Search.setIndex({"docnames": ["api", "api/compas_timber.connections", "api/compas_timber.elements", "api/compas_timber.fabrication", "api/compas_timber.ghpython", "api/compas_timber.model", "api/compas_timber.planning", "api/compas_timber.rhino", "api/generated/compas_timber.connections.BeamJoinningError", "api/generated/compas_timber.connections.ConnectionSolver", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs", "api/generated/compas_timber.connections.ConnectionSolver.find_topology", "api/generated/compas_timber.connections.FrenchRidgeLapJoint", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.ToString", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.add_features", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.check_geometry", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.copy", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.create", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.from_json", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.from_jsonstring", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.sha256", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.to_json", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.to_jsonstring", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.validate_data", "api/generated/compas_timber.connections.Joint", "api/generated/compas_timber.connections.Joint.ToString", "api/generated/compas_timber.connections.Joint.add_features", "api/generated/compas_timber.connections.Joint.copy", "api/generated/compas_timber.connections.Joint.create", "api/generated/compas_timber.connections.Joint.from_json", "api/generated/compas_timber.connections.Joint.from_jsonstring", "api/generated/compas_timber.connections.Joint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.Joint.get_face_most_towards_beam", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys", "api/generated/compas_timber.connections.Joint.sha256", "api/generated/compas_timber.connections.Joint.to_json", "api/generated/compas_timber.connections.Joint.to_jsonstring", "api/generated/compas_timber.connections.Joint.validate_data", "api/generated/compas_timber.connections.JointTopology", "api/generated/compas_timber.connections.JointTopology.get_name", "api/generated/compas_timber.connections.LButtJoint", "api/generated/compas_timber.connections.LButtJoint.ToString", "api/generated/compas_timber.connections.LButtJoint.add_features", "api/generated/compas_timber.connections.LButtJoint.back_surface_main", "api/generated/compas_timber.connections.LButtJoint.calc_params_birdsmouth", "api/generated/compas_timber.connections.LButtJoint.copy", "api/generated/compas_timber.connections.LButtJoint.create", "api/generated/compas_timber.connections.LButtJoint.from_json", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring", "api/generated/compas_timber.connections.LButtJoint.front_back_surface_main", "api/generated/compas_timber.connections.LButtJoint.get_cross_cutting_plane", "api/generated/compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LButtJoint.get_main_cutting_plane", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LButtJoint.sha256", "api/generated/compas_timber.connections.LButtJoint.side_surfaces_cross", "api/generated/compas_timber.connections.LButtJoint.subtraction_volume", "api/generated/compas_timber.connections.LButtJoint.to_json", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring", "api/generated/compas_timber.connections.LButtJoint.validate_data", "api/generated/compas_timber.connections.LHalfLapJoint", "api/generated/compas_timber.connections.LHalfLapJoint.ToString", "api/generated/compas_timber.connections.LHalfLapJoint.add_features", "api/generated/compas_timber.connections.LHalfLapJoint.copy", "api/generated/compas_timber.connections.LHalfLapJoint.create", "api/generated/compas_timber.connections.LHalfLapJoint.from_json", "api/generated/compas_timber.connections.LHalfLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LHalfLapJoint.get_cross_cutting_frame", "api/generated/compas_timber.connections.LHalfLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LHalfLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LHalfLapJoint.get_main_cutting_frame", "api/generated/compas_timber.connections.LHalfLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LHalfLapJoint.sha256", "api/generated/compas_timber.connections.LHalfLapJoint.to_json", "api/generated/compas_timber.connections.LHalfLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LHalfLapJoint.validate_data", "api/generated/compas_timber.connections.LMiterJoint", "api/generated/compas_timber.connections.LMiterJoint.ToString", "api/generated/compas_timber.connections.LMiterJoint.add_features", "api/generated/compas_timber.connections.LMiterJoint.copy", "api/generated/compas_timber.connections.LMiterJoint.create", "api/generated/compas_timber.connections.LMiterJoint.from_json", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LMiterJoint.sha256", "api/generated/compas_timber.connections.LMiterJoint.to_json", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.validate_data", "api/generated/compas_timber.connections.LapJoint", "api/generated/compas_timber.connections.LapJoint.ToString", "api/generated/compas_timber.connections.LapJoint.add_features", "api/generated/compas_timber.connections.LapJoint.copy", "api/generated/compas_timber.connections.LapJoint.create", "api/generated/compas_timber.connections.LapJoint.from_json", "api/generated/compas_timber.connections.LapJoint.from_jsonstring", "api/generated/compas_timber.connections.LapJoint.get_cross_cutting_frame", "api/generated/compas_timber.connections.LapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LapJoint.get_main_cutting_frame", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LapJoint.sha256", "api/generated/compas_timber.connections.LapJoint.to_json", "api/generated/compas_timber.connections.LapJoint.to_jsonstring", "api/generated/compas_timber.connections.LapJoint.validate_data", "api/generated/compas_timber.connections.TButtJoint", "api/generated/compas_timber.connections.TButtJoint.ToString", "api/generated/compas_timber.connections.TButtJoint.add_features", "api/generated/compas_timber.connections.TButtJoint.back_surface_main", "api/generated/compas_timber.connections.TButtJoint.calc_params_birdsmouth", "api/generated/compas_timber.connections.TButtJoint.copy", "api/generated/compas_timber.connections.TButtJoint.create", "api/generated/compas_timber.connections.TButtJoint.from_json", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring", "api/generated/compas_timber.connections.TButtJoint.front_back_surface_main", "api/generated/compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TButtJoint.get_main_cutting_plane", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TButtJoint.sha256", "api/generated/compas_timber.connections.TButtJoint.side_surfaces_cross", "api/generated/compas_timber.connections.TButtJoint.subtraction_volume", "api/generated/compas_timber.connections.TButtJoint.to_json", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring", "api/generated/compas_timber.connections.TButtJoint.validate_data", "api/generated/compas_timber.connections.THalfLapJoint", "api/generated/compas_timber.connections.THalfLapJoint.ToString", "api/generated/compas_timber.connections.THalfLapJoint.add_features", "api/generated/compas_timber.connections.THalfLapJoint.copy", "api/generated/compas_timber.connections.THalfLapJoint.create", "api/generated/compas_timber.connections.THalfLapJoint.from_json", "api/generated/compas_timber.connections.THalfLapJoint.from_jsonstring", "api/generated/compas_timber.connections.THalfLapJoint.get_cross_cutting_frame", "api/generated/compas_timber.connections.THalfLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.THalfLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.THalfLapJoint.get_main_cutting_frame", "api/generated/compas_timber.connections.THalfLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.THalfLapJoint.sha256", "api/generated/compas_timber.connections.THalfLapJoint.to_json", "api/generated/compas_timber.connections.THalfLapJoint.to_jsonstring", "api/generated/compas_timber.connections.THalfLapJoint.validate_data", "api/generated/compas_timber.connections.XHalfLapJoint", "api/generated/compas_timber.connections.XHalfLapJoint.ToString", "api/generated/compas_timber.connections.XHalfLapJoint.add_features", "api/generated/compas_timber.connections.XHalfLapJoint.copy", "api/generated/compas_timber.connections.XHalfLapJoint.create", "api/generated/compas_timber.connections.XHalfLapJoint.from_json", "api/generated/compas_timber.connections.XHalfLapJoint.from_jsonstring", "api/generated/compas_timber.connections.XHalfLapJoint.get_cross_cutting_frame", "api/generated/compas_timber.connections.XHalfLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.XHalfLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.XHalfLapJoint.get_main_cutting_frame", "api/generated/compas_timber.connections.XHalfLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XHalfLapJoint.sha256", "api/generated/compas_timber.connections.XHalfLapJoint.to_json", "api/generated/compas_timber.connections.XHalfLapJoint.to_jsonstring", "api/generated/compas_timber.connections.XHalfLapJoint.validate_data", "api/generated/compas_timber.connections.find_neighboring_beams", "api/generated/compas_timber.elements.Beam", "api/generated/compas_timber.elements.Beam.ToString", "api/generated/compas_timber.elements.Beam.add_blank_extension", "api/generated/compas_timber.elements.Beam.add_feature", "api/generated/compas_timber.elements.Beam.add_features", "api/generated/compas_timber.elements.Beam.compute_aabb", "api/generated/compas_timber.elements.Beam.compute_collision_mesh", "api/generated/compas_timber.elements.Beam.compute_geometry", "api/generated/compas_timber.elements.Beam.compute_obb", "api/generated/compas_timber.elements.Beam.compute_worldtransformation", "api/generated/compas_timber.elements.Beam.copy", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point", "api/generated/compas_timber.elements.Beam.extension_to_plane", "api/generated/compas_timber.elements.Beam.from_centerline", "api/generated/compas_timber.elements.Beam.from_endpoints", "api/generated/compas_timber.elements.Beam.from_json", "api/generated/compas_timber.elements.Beam.from_jsonstring", "api/generated/compas_timber.elements.Beam.remove_blank_extension", "api/generated/compas_timber.elements.Beam.remove_features", "api/generated/compas_timber.elements.Beam.sha256", "api/generated/compas_timber.elements.Beam.to_json", "api/generated/compas_timber.elements.Beam.to_jsonstring", "api/generated/compas_timber.elements.Beam.transform", "api/generated/compas_timber.elements.Beam.transformed", "api/generated/compas_timber.elements.Beam.validate_data", "api/generated/compas_timber.fabrication.BTLx", "api/generated/compas_timber.fabrication.BTLx.btlx_string", "api/generated/compas_timber.fabrication.BTLx.process_model", "api/generated/compas_timber.fabrication.BTLx.register_joint", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.create_process", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.get_params", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.process_joints", "api/generated/compas_timber.fabrication.BTLxJackCut", "api/generated/compas_timber.fabrication.BTLxJackCut.create_process", "api/generated/compas_timber.fabrication.BTLxJackCut.generate_process", "api/generated/compas_timber.fabrication.BTLxProcess", "api/generated/compas_timber.fabrication.FrenchRidgeFactory", "api/generated/compas_timber.fabrication.FrenchRidgeFactory.apply_processings", "api/generated/compas_timber.fabrication.LButtFactory", "api/generated/compas_timber.fabrication.LButtFactory.apply_processings", "api/generated/compas_timber.fabrication.LMiterFactory", "api/generated/compas_timber.fabrication.LMiterFactory.apply_processings", "api/generated/compas_timber.fabrication.TButtFactory", "api/generated/compas_timber.fabrication.TButtFactory.apply_processings", "api/generated/compas_timber.ghpython.CategoryRule", "api/generated/compas_timber.ghpython.CategoryRule.ToString", "api/generated/compas_timber.ghpython.CategoryRule.comply", "api/generated/compas_timber.ghpython.CategoryRule.reorder", "api/generated/compas_timber.ghpython.DebugInfomation", "api/generated/compas_timber.ghpython.DebugInfomation.ToString", "api/generated/compas_timber.ghpython.DebugInfomation.add_feature_error", "api/generated/compas_timber.ghpython.DebugInfomation.add_joint_error", "api/generated/compas_timber.ghpython.DirectRule", "api/generated/compas_timber.ghpython.DirectRule.ToString", "api/generated/compas_timber.ghpython.DirectRule.comply", "api/generated/compas_timber.ghpython.FeatureDefinition", "api/generated/compas_timber.ghpython.FeatureDefinition.ToString", "api/generated/compas_timber.ghpython.JointDefinition", "api/generated/compas_timber.ghpython.JointDefinition.ToString", "api/generated/compas_timber.ghpython.JointDefinition.is_identical", "api/generated/compas_timber.ghpython.JointDefinition.match", "api/generated/compas_timber.ghpython.TopologyRule", "api/generated/compas_timber.ghpython.TopologyRule.ToString", "api/generated/compas_timber.ghpython.TopologyRule.comply", "api/generated/compas_timber.model.TimberModel", "api/generated/compas_timber.model.TimberModel.ToString", "api/generated/compas_timber.model.TimberModel.add_beam", "api/generated/compas_timber.model.TimberModel.add_element", "api/generated/compas_timber.model.TimberModel.add_elements", "api/generated/compas_timber.model.TimberModel.add_group", "api/generated/compas_timber.model.TimberModel.add_interaction", "api/generated/compas_timber.model.TimberModel.add_joint", "api/generated/compas_timber.model.TimberModel.add_material", "api/generated/compas_timber.model.TimberModel.add_wall", "api/generated/compas_timber.model.TimberModel.assign_material", "api/generated/compas_timber.model.TimberModel.beam_by_guid", "api/generated/compas_timber.model.TimberModel.compute_aabb", "api/generated/compas_timber.model.TimberModel.compute_obb", "api/generated/compas_timber.model.TimberModel.copy", "api/generated/compas_timber.model.TimberModel.elements", "api/generated/compas_timber.model.TimberModel.elements_connected_by", "api/generated/compas_timber.model.TimberModel.from_json", "api/generated/compas_timber.model.TimberModel.from_jsonstring", "api/generated/compas_timber.model.TimberModel.has_element", "api/generated/compas_timber.model.TimberModel.has_interaction", "api/generated/compas_timber.model.TimberModel.has_material", "api/generated/compas_timber.model.TimberModel.interactions", "api/generated/compas_timber.model.TimberModel.materials", "api/generated/compas_timber.model.TimberModel.remove_element", "api/generated/compas_timber.model.TimberModel.remove_interaction", "api/generated/compas_timber.model.TimberModel.remove_joint", "api/generated/compas_timber.model.TimberModel.rotate", "api/generated/compas_timber.model.TimberModel.rotated", "api/generated/compas_timber.model.TimberModel.scale", "api/generated/compas_timber.model.TimberModel.scaled", "api/generated/compas_timber.model.TimberModel.set_topologies", "api/generated/compas_timber.model.TimberModel.sha256", "api/generated/compas_timber.model.TimberModel.to_json", "api/generated/compas_timber.model.TimberModel.to_jsonstring", "api/generated/compas_timber.model.TimberModel.transform", "api/generated/compas_timber.model.TimberModel.transform_numpy", "api/generated/compas_timber.model.TimberModel.transformed", "api/generated/compas_timber.model.TimberModel.transformed_numpy", "api/generated/compas_timber.model.TimberModel.translate", "api/generated/compas_timber.model.TimberModel.translated", "api/generated/compas_timber.model.TimberModel.validate_data", "api/generated/compas_timber.planning.Actor", "api/generated/compas_timber.planning.Actor.get_name", "api/generated/compas_timber.planning.BuildingPlan", "api/generated/compas_timber.planning.BuildingPlan.ToString", "api/generated/compas_timber.planning.BuildingPlan.add_step", "api/generated/compas_timber.planning.BuildingPlan.copy", "api/generated/compas_timber.planning.BuildingPlan.from_json", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.sha256", "api/generated/compas_timber.planning.BuildingPlan.to_json", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.validate_data", "api/generated/compas_timber.planning.SimpleSequenceGenerator", "api/generated/compas_timber.planning.Step", "api/generated/compas_timber.planning.Step.ToString", "api/generated/compas_timber.planning.Step.copy", "api/generated/compas_timber.planning.Step.from_json", "api/generated/compas_timber.planning.Step.from_jsonstring", "api/generated/compas_timber.planning.Step.sha256", "api/generated/compas_timber.planning.Step.to_json", "api/generated/compas_timber.planning.Step.to_jsonstring", "api/generated/compas_timber.planning.Step.transform", "api/generated/compas_timber.planning.Step.validate_data", "api/generated/compas_timber.rhino.find_neighboring_beams", "citing", "examples", "examples/create_joint", "index", "installation", "license", "tutorials", "tutorials/BTLx_contribution_guide", "tutorials/grasshopper/assembly", "tutorials/grasshopper/attributes", "tutorials/grasshopper/beam", "tutorials/grasshopper/examples", "tutorials/grasshopper/features", "tutorials/grasshopper/joints", "tutorials/grasshopper/rules", "tutorials/grasshopper/show", "tutorials/grasshopper/utils", "tutorials/grasshopper/workflow"], "filenames": ["api.rst", "api/compas_timber.connections.rst", "api/compas_timber.elements.rst", "api/compas_timber.fabrication.rst", "api/compas_timber.ghpython.rst", "api/compas_timber.model.rst", "api/compas_timber.planning.rst", "api/compas_timber.rhino.rst", "api/generated/compas_timber.connections.BeamJoinningError.rst", "api/generated/compas_timber.connections.ConnectionSolver.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_topology.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.ToString.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.add_features.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.check_geometry.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.copy.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.create.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.from_json.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.sha256.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.to_json.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.validate_data.rst", "api/generated/compas_timber.connections.Joint.rst", "api/generated/compas_timber.connections.Joint.ToString.rst", "api/generated/compas_timber.connections.Joint.add_features.rst", "api/generated/compas_timber.connections.Joint.copy.rst", "api/generated/compas_timber.connections.Joint.create.rst", "api/generated/compas_timber.connections.Joint.from_json.rst", "api/generated/compas_timber.connections.Joint.from_jsonstring.rst", "api/generated/compas_timber.connections.Joint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.Joint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.Joint.sha256.rst", "api/generated/compas_timber.connections.Joint.to_json.rst", "api/generated/compas_timber.connections.Joint.to_jsonstring.rst", "api/generated/compas_timber.connections.Joint.validate_data.rst", "api/generated/compas_timber.connections.JointTopology.rst", "api/generated/compas_timber.connections.JointTopology.get_name.rst", "api/generated/compas_timber.connections.LButtJoint.rst", "api/generated/compas_timber.connections.LButtJoint.ToString.rst", "api/generated/compas_timber.connections.LButtJoint.add_features.rst", "api/generated/compas_timber.connections.LButtJoint.back_surface_main.rst", "api/generated/compas_timber.connections.LButtJoint.calc_params_birdsmouth.rst", "api/generated/compas_timber.connections.LButtJoint.copy.rst", "api/generated/compas_timber.connections.LButtJoint.create.rst", "api/generated/compas_timber.connections.LButtJoint.from_json.rst", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.front_back_surface_main.rst", "api/generated/compas_timber.connections.LButtJoint.get_cross_cutting_plane.rst", "api/generated/compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LButtJoint.get_main_cutting_plane.rst", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LButtJoint.sha256.rst", "api/generated/compas_timber.connections.LButtJoint.side_surfaces_cross.rst", "api/generated/compas_timber.connections.LButtJoint.subtraction_volume.rst", "api/generated/compas_timber.connections.LButtJoint.to_json.rst", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.validate_data.rst", "api/generated/compas_timber.connections.LHalfLapJoint.rst", "api/generated/compas_timber.connections.LHalfLapJoint.ToString.rst", "api/generated/compas_timber.connections.LHalfLapJoint.add_features.rst", "api/generated/compas_timber.connections.LHalfLapJoint.copy.rst", "api/generated/compas_timber.connections.LHalfLapJoint.create.rst", "api/generated/compas_timber.connections.LHalfLapJoint.from_json.rst", "api/generated/compas_timber.connections.LHalfLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LHalfLapJoint.get_cross_cutting_frame.rst", "api/generated/compas_timber.connections.LHalfLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LHalfLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LHalfLapJoint.get_main_cutting_frame.rst", "api/generated/compas_timber.connections.LHalfLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LHalfLapJoint.sha256.rst", "api/generated/compas_timber.connections.LHalfLapJoint.to_json.rst", "api/generated/compas_timber.connections.LHalfLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LHalfLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LMiterJoint.rst", "api/generated/compas_timber.connections.LMiterJoint.ToString.rst", "api/generated/compas_timber.connections.LMiterJoint.add_features.rst", "api/generated/compas_timber.connections.LMiterJoint.copy.rst", "api/generated/compas_timber.connections.LMiterJoint.create.rst", "api/generated/compas_timber.connections.LMiterJoint.from_json.rst", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes.rst", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LMiterJoint.sha256.rst", "api/generated/compas_timber.connections.LMiterJoint.to_json.rst", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.validate_data.rst", "api/generated/compas_timber.connections.LapJoint.rst", "api/generated/compas_timber.connections.LapJoint.ToString.rst", "api/generated/compas_timber.connections.LapJoint.add_features.rst", "api/generated/compas_timber.connections.LapJoint.copy.rst", "api/generated/compas_timber.connections.LapJoint.create.rst", "api/generated/compas_timber.connections.LapJoint.from_json.rst", "api/generated/compas_timber.connections.LapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.get_cross_cutting_frame.rst", "api/generated/compas_timber.connections.LapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LapJoint.get_main_cutting_frame.rst", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LapJoint.sha256.rst", "api/generated/compas_timber.connections.LapJoint.to_json.rst", "api/generated/compas_timber.connections.LapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.validate_data.rst", "api/generated/compas_timber.connections.TButtJoint.rst", "api/generated/compas_timber.connections.TButtJoint.ToString.rst", "api/generated/compas_timber.connections.TButtJoint.add_features.rst", "api/generated/compas_timber.connections.TButtJoint.back_surface_main.rst", "api/generated/compas_timber.connections.TButtJoint.calc_params_birdsmouth.rst", "api/generated/compas_timber.connections.TButtJoint.copy.rst", "api/generated/compas_timber.connections.TButtJoint.create.rst", "api/generated/compas_timber.connections.TButtJoint.from_json.rst", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.front_back_surface_main.rst", "api/generated/compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TButtJoint.get_main_cutting_plane.rst", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TButtJoint.sha256.rst", "api/generated/compas_timber.connections.TButtJoint.side_surfaces_cross.rst", "api/generated/compas_timber.connections.TButtJoint.subtraction_volume.rst", "api/generated/compas_timber.connections.TButtJoint.to_json.rst", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.validate_data.rst", "api/generated/compas_timber.connections.THalfLapJoint.rst", "api/generated/compas_timber.connections.THalfLapJoint.ToString.rst", "api/generated/compas_timber.connections.THalfLapJoint.add_features.rst", "api/generated/compas_timber.connections.THalfLapJoint.copy.rst", "api/generated/compas_timber.connections.THalfLapJoint.create.rst", "api/generated/compas_timber.connections.THalfLapJoint.from_json.rst", "api/generated/compas_timber.connections.THalfLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.THalfLapJoint.get_cross_cutting_frame.rst", "api/generated/compas_timber.connections.THalfLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.THalfLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.THalfLapJoint.get_main_cutting_frame.rst", "api/generated/compas_timber.connections.THalfLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.THalfLapJoint.sha256.rst", "api/generated/compas_timber.connections.THalfLapJoint.to_json.rst", "api/generated/compas_timber.connections.THalfLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.THalfLapJoint.validate_data.rst", "api/generated/compas_timber.connections.XHalfLapJoint.rst", "api/generated/compas_timber.connections.XHalfLapJoint.ToString.rst", "api/generated/compas_timber.connections.XHalfLapJoint.add_features.rst", "api/generated/compas_timber.connections.XHalfLapJoint.copy.rst", "api/generated/compas_timber.connections.XHalfLapJoint.create.rst", "api/generated/compas_timber.connections.XHalfLapJoint.from_json.rst", "api/generated/compas_timber.connections.XHalfLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XHalfLapJoint.get_cross_cutting_frame.rst", "api/generated/compas_timber.connections.XHalfLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.XHalfLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.XHalfLapJoint.get_main_cutting_frame.rst", "api/generated/compas_timber.connections.XHalfLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XHalfLapJoint.sha256.rst", "api/generated/compas_timber.connections.XHalfLapJoint.to_json.rst", "api/generated/compas_timber.connections.XHalfLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XHalfLapJoint.validate_data.rst", "api/generated/compas_timber.connections.find_neighboring_beams.rst", "api/generated/compas_timber.elements.Beam.rst", "api/generated/compas_timber.elements.Beam.ToString.rst", "api/generated/compas_timber.elements.Beam.add_blank_extension.rst", "api/generated/compas_timber.elements.Beam.add_feature.rst", "api/generated/compas_timber.elements.Beam.add_features.rst", "api/generated/compas_timber.elements.Beam.compute_aabb.rst", "api/generated/compas_timber.elements.Beam.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Beam.compute_geometry.rst", "api/generated/compas_timber.elements.Beam.compute_obb.rst", "api/generated/compas_timber.elements.Beam.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Beam.copy.rst", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point.rst", "api/generated/compas_timber.elements.Beam.extension_to_plane.rst", "api/generated/compas_timber.elements.Beam.from_centerline.rst", "api/generated/compas_timber.elements.Beam.from_endpoints.rst", "api/generated/compas_timber.elements.Beam.from_json.rst", "api/generated/compas_timber.elements.Beam.from_jsonstring.rst", "api/generated/compas_timber.elements.Beam.remove_blank_extension.rst", "api/generated/compas_timber.elements.Beam.remove_features.rst", "api/generated/compas_timber.elements.Beam.sha256.rst", "api/generated/compas_timber.elements.Beam.to_json.rst", "api/generated/compas_timber.elements.Beam.to_jsonstring.rst", "api/generated/compas_timber.elements.Beam.transform.rst", "api/generated/compas_timber.elements.Beam.transformed.rst", "api/generated/compas_timber.elements.Beam.validate_data.rst", "api/generated/compas_timber.fabrication.BTLx.rst", "api/generated/compas_timber.fabrication.BTLx.btlx_string.rst", "api/generated/compas_timber.fabrication.BTLx.process_model.rst", "api/generated/compas_timber.fabrication.BTLx.register_joint.rst", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.rst", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.create_process.rst", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.get_params.rst", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.process_joints.rst", "api/generated/compas_timber.fabrication.BTLxJackCut.rst", "api/generated/compas_timber.fabrication.BTLxJackCut.create_process.rst", "api/generated/compas_timber.fabrication.BTLxJackCut.generate_process.rst", "api/generated/compas_timber.fabrication.BTLxProcess.rst", "api/generated/compas_timber.fabrication.FrenchRidgeFactory.rst", "api/generated/compas_timber.fabrication.FrenchRidgeFactory.apply_processings.rst", "api/generated/compas_timber.fabrication.LButtFactory.rst", "api/generated/compas_timber.fabrication.LButtFactory.apply_processings.rst", "api/generated/compas_timber.fabrication.LMiterFactory.rst", "api/generated/compas_timber.fabrication.LMiterFactory.apply_processings.rst", "api/generated/compas_timber.fabrication.TButtFactory.rst", "api/generated/compas_timber.fabrication.TButtFactory.apply_processings.rst", "api/generated/compas_timber.ghpython.CategoryRule.rst", "api/generated/compas_timber.ghpython.CategoryRule.ToString.rst", "api/generated/compas_timber.ghpython.CategoryRule.comply.rst", "api/generated/compas_timber.ghpython.CategoryRule.reorder.rst", "api/generated/compas_timber.ghpython.DebugInfomation.rst", "api/generated/compas_timber.ghpython.DebugInfomation.ToString.rst", "api/generated/compas_timber.ghpython.DebugInfomation.add_feature_error.rst", "api/generated/compas_timber.ghpython.DebugInfomation.add_joint_error.rst", "api/generated/compas_timber.ghpython.DirectRule.rst", "api/generated/compas_timber.ghpython.DirectRule.ToString.rst", "api/generated/compas_timber.ghpython.DirectRule.comply.rst", "api/generated/compas_timber.ghpython.FeatureDefinition.rst", "api/generated/compas_timber.ghpython.FeatureDefinition.ToString.rst", "api/generated/compas_timber.ghpython.JointDefinition.rst", "api/generated/compas_timber.ghpython.JointDefinition.ToString.rst", "api/generated/compas_timber.ghpython.JointDefinition.is_identical.rst", "api/generated/compas_timber.ghpython.JointDefinition.match.rst", "api/generated/compas_timber.ghpython.TopologyRule.rst", "api/generated/compas_timber.ghpython.TopologyRule.ToString.rst", "api/generated/compas_timber.ghpython.TopologyRule.comply.rst", "api/generated/compas_timber.model.TimberModel.rst", "api/generated/compas_timber.model.TimberModel.ToString.rst", "api/generated/compas_timber.model.TimberModel.add_beam.rst", "api/generated/compas_timber.model.TimberModel.add_element.rst", "api/generated/compas_timber.model.TimberModel.add_elements.rst", "api/generated/compas_timber.model.TimberModel.add_group.rst", "api/generated/compas_timber.model.TimberModel.add_interaction.rst", "api/generated/compas_timber.model.TimberModel.add_joint.rst", "api/generated/compas_timber.model.TimberModel.add_material.rst", "api/generated/compas_timber.model.TimberModel.add_wall.rst", "api/generated/compas_timber.model.TimberModel.assign_material.rst", "api/generated/compas_timber.model.TimberModel.beam_by_guid.rst", "api/generated/compas_timber.model.TimberModel.compute_aabb.rst", "api/generated/compas_timber.model.TimberModel.compute_obb.rst", "api/generated/compas_timber.model.TimberModel.copy.rst", "api/generated/compas_timber.model.TimberModel.elements.rst", "api/generated/compas_timber.model.TimberModel.elements_connected_by.rst", "api/generated/compas_timber.model.TimberModel.from_json.rst", "api/generated/compas_timber.model.TimberModel.from_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.has_element.rst", "api/generated/compas_timber.model.TimberModel.has_interaction.rst", "api/generated/compas_timber.model.TimberModel.has_material.rst", "api/generated/compas_timber.model.TimberModel.interactions.rst", "api/generated/compas_timber.model.TimberModel.materials.rst", "api/generated/compas_timber.model.TimberModel.remove_element.rst", "api/generated/compas_timber.model.TimberModel.remove_interaction.rst", "api/generated/compas_timber.model.TimberModel.remove_joint.rst", "api/generated/compas_timber.model.TimberModel.rotate.rst", "api/generated/compas_timber.model.TimberModel.rotated.rst", "api/generated/compas_timber.model.TimberModel.scale.rst", "api/generated/compas_timber.model.TimberModel.scaled.rst", "api/generated/compas_timber.model.TimberModel.set_topologies.rst", "api/generated/compas_timber.model.TimberModel.sha256.rst", "api/generated/compas_timber.model.TimberModel.to_json.rst", "api/generated/compas_timber.model.TimberModel.to_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.transform.rst", "api/generated/compas_timber.model.TimberModel.transform_numpy.rst", "api/generated/compas_timber.model.TimberModel.transformed.rst", "api/generated/compas_timber.model.TimberModel.transformed_numpy.rst", "api/generated/compas_timber.model.TimberModel.translate.rst", "api/generated/compas_timber.model.TimberModel.translated.rst", "api/generated/compas_timber.model.TimberModel.validate_data.rst", "api/generated/compas_timber.planning.Actor.rst", "api/generated/compas_timber.planning.Actor.get_name.rst", "api/generated/compas_timber.planning.BuildingPlan.rst", "api/generated/compas_timber.planning.BuildingPlan.ToString.rst", "api/generated/compas_timber.planning.BuildingPlan.add_step.rst", "api/generated/compas_timber.planning.BuildingPlan.copy.rst", "api/generated/compas_timber.planning.BuildingPlan.from_json.rst", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.sha256.rst", "api/generated/compas_timber.planning.BuildingPlan.to_json.rst", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.validate_data.rst", "api/generated/compas_timber.planning.SimpleSequenceGenerator.rst", "api/generated/compas_timber.planning.Step.rst", "api/generated/compas_timber.planning.Step.ToString.rst", "api/generated/compas_timber.planning.Step.copy.rst", "api/generated/compas_timber.planning.Step.from_json.rst", "api/generated/compas_timber.planning.Step.from_jsonstring.rst", "api/generated/compas_timber.planning.Step.sha256.rst", "api/generated/compas_timber.planning.Step.to_json.rst", "api/generated/compas_timber.planning.Step.to_jsonstring.rst", "api/generated/compas_timber.planning.Step.transform.rst", "api/generated/compas_timber.planning.Step.validate_data.rst", "api/generated/compas_timber.rhino.find_neighboring_beams.rst", "citing.rst", "examples.rst", "examples/create_joint.rst", "index.rst", "installation.rst", "license.rst", "tutorials.rst", "tutorials/BTLx_contribution_guide.rst", "tutorials/grasshopper/assembly.rst", "tutorials/grasshopper/attributes.rst", "tutorials/grasshopper/beam.rst", "tutorials/grasshopper/examples.rst", "tutorials/grasshopper/features.rst", "tutorials/grasshopper/joints.rst", "tutorials/grasshopper/rules.rst", "tutorials/grasshopper/show.rst", "tutorials/grasshopper/utils.rst", "tutorials/grasshopper/workflow.rst"], "titles": ["API Reference", "compas_timber.connections", "compas_timber.elements", "compas_timber.fabrication", "compas_timber.ghpython", "compas_timber.model", "compas_timber.planning", "rhino", "BeamJoinningError", "ConnectionSolver", "ConnectionSolver.find_intersecting_pairs", "ConnectionSolver.find_topology", "FrenchRidgeLapJoint", "FrenchRidgeLapJoint.ToString", "FrenchRidgeLapJoint.add_features", "FrenchRidgeLapJoint.check_geometry", "FrenchRidgeLapJoint.copy", "FrenchRidgeLapJoint.create", "FrenchRidgeLapJoint.from_json", "FrenchRidgeLapJoint.from_jsonstring", "FrenchRidgeLapJoint.get_face_most_ortho_to_beam", "FrenchRidgeLapJoint.get_face_most_towards_beam", "FrenchRidgeLapJoint.restore_beams_from_keys", "FrenchRidgeLapJoint.sha256", "FrenchRidgeLapJoint.to_json", "FrenchRidgeLapJoint.to_jsonstring", "FrenchRidgeLapJoint.validate_data", "Joint", "Joint.ToString", "Joint.add_features", "Joint.copy", "Joint.create", "Joint.from_json", "Joint.from_jsonstring", "Joint.get_face_most_ortho_to_beam", "Joint.get_face_most_towards_beam", "Joint.restore_beams_from_keys", "Joint.sha256", "Joint.to_json", "Joint.to_jsonstring", "Joint.validate_data", "JointTopology", "JointTopology.get_name", "LButtJoint", "LButtJoint.ToString", "LButtJoint.add_features", "LButtJoint.back_surface_main", "LButtJoint.calc_params_birdsmouth", "LButtJoint.copy", "LButtJoint.create", "LButtJoint.from_json", "LButtJoint.from_jsonstring", "LButtJoint.front_back_surface_main", "LButtJoint.get_cross_cutting_plane", "LButtJoint.get_face_most_ortho_to_beam", "LButtJoint.get_face_most_towards_beam", "LButtJoint.get_main_cutting_plane", "LButtJoint.restore_beams_from_keys", "LButtJoint.sha256", "LButtJoint.side_surfaces_cross", "LButtJoint.subtraction_volume", "LButtJoint.to_json", "LButtJoint.to_jsonstring", "LButtJoint.validate_data", "LHalfLapJoint", "LHalfLapJoint.ToString", "LHalfLapJoint.add_features", "LHalfLapJoint.copy", "LHalfLapJoint.create", "LHalfLapJoint.from_json", "LHalfLapJoint.from_jsonstring", "LHalfLapJoint.get_cross_cutting_frame", "LHalfLapJoint.get_face_most_ortho_to_beam", "LHalfLapJoint.get_face_most_towards_beam", "LHalfLapJoint.get_main_cutting_frame", "LHalfLapJoint.restore_beams_from_keys", "LHalfLapJoint.sha256", "LHalfLapJoint.to_json", "LHalfLapJoint.to_jsonstring", "LHalfLapJoint.validate_data", "LMiterJoint", "LMiterJoint.ToString", "LMiterJoint.add_features", "LMiterJoint.copy", "LMiterJoint.create", "LMiterJoint.from_json", "LMiterJoint.from_jsonstring", "LMiterJoint.get_cutting_planes", "LMiterJoint.get_face_most_ortho_to_beam", "LMiterJoint.get_face_most_towards_beam", "LMiterJoint.restore_beams_from_keys", "LMiterJoint.sha256", "LMiterJoint.to_json", "LMiterJoint.to_jsonstring", "LMiterJoint.validate_data", "LapJoint", "LapJoint.ToString", "LapJoint.add_features", "LapJoint.copy", "LapJoint.create", "LapJoint.from_json", "LapJoint.from_jsonstring", "LapJoint.get_cross_cutting_frame", "LapJoint.get_face_most_ortho_to_beam", "LapJoint.get_face_most_towards_beam", "LapJoint.get_main_cutting_frame", "LapJoint.restore_beams_from_keys", "LapJoint.sha256", "LapJoint.to_json", "LapJoint.to_jsonstring", "LapJoint.validate_data", "TButtJoint", "TButtJoint.ToString", "TButtJoint.add_features", "TButtJoint.back_surface_main", "TButtJoint.calc_params_birdsmouth", "TButtJoint.copy", "TButtJoint.create", "TButtJoint.from_json", "TButtJoint.from_jsonstring", "TButtJoint.front_back_surface_main", "TButtJoint.get_face_most_ortho_to_beam", "TButtJoint.get_face_most_towards_beam", "TButtJoint.get_main_cutting_plane", "TButtJoint.restore_beams_from_keys", "TButtJoint.sha256", "TButtJoint.side_surfaces_cross", "TButtJoint.subtraction_volume", "TButtJoint.to_json", "TButtJoint.to_jsonstring", "TButtJoint.validate_data", "THalfLapJoint", "THalfLapJoint.ToString", "THalfLapJoint.add_features", "THalfLapJoint.copy", "THalfLapJoint.create", "THalfLapJoint.from_json", "THalfLapJoint.from_jsonstring", "THalfLapJoint.get_cross_cutting_frame", "THalfLapJoint.get_face_most_ortho_to_beam", "THalfLapJoint.get_face_most_towards_beam", "THalfLapJoint.get_main_cutting_frame", "THalfLapJoint.restore_beams_from_keys", "THalfLapJoint.sha256", "THalfLapJoint.to_json", "THalfLapJoint.to_jsonstring", "THalfLapJoint.validate_data", "XHalfLapJoint", "XHalfLapJoint.ToString", "XHalfLapJoint.add_features", "XHalfLapJoint.copy", "XHalfLapJoint.create", "XHalfLapJoint.from_json", "XHalfLapJoint.from_jsonstring", "XHalfLapJoint.get_cross_cutting_frame", "XHalfLapJoint.get_face_most_ortho_to_beam", "XHalfLapJoint.get_face_most_towards_beam", "XHalfLapJoint.get_main_cutting_frame", "XHalfLapJoint.restore_beams_from_keys", "XHalfLapJoint.sha256", "XHalfLapJoint.to_json", "XHalfLapJoint.to_jsonstring", "XHalfLapJoint.validate_data", "find_neighboring_beams", "Beam", "Beam.ToString", "Beam.add_blank_extension", "Beam.add_feature", "Beam.add_features", "Beam.compute_aabb", "Beam.compute_collision_mesh", "Beam.compute_geometry", "Beam.compute_obb", "Beam.compute_worldtransformation", "Beam.copy", "Beam.endpoint_closest_to_point", "Beam.extension_to_plane", "Beam.from_centerline", "Beam.from_endpoints", "Beam.from_json", "Beam.from_jsonstring", "Beam.remove_blank_extension", "Beam.remove_features", "Beam.sha256", "Beam.to_json", "Beam.to_jsonstring", "Beam.transform", "Beam.transformed", "Beam.validate_data", "BTLx", "BTLx.btlx_string", "BTLx.process_model", "BTLx.register_joint", "BTLxFrenchRidgeLap", "BTLxFrenchRidgeLap.create_process", "BTLxFrenchRidgeLap.get_params", "BTLxFrenchRidgeLap.process_joints", "BTLxJackCut", "BTLxJackCut.create_process", "BTLxJackCut.generate_process", "BTLxProcess", "FrenchRidgeFactory", "FrenchRidgeFactory.apply_processings", "LButtFactory", "LButtFactory.apply_processings", "LMiterFactory", "LMiterFactory.apply_processings", "TButtFactory", "TButtFactory.apply_processings", "CategoryRule", "CategoryRule.ToString", "CategoryRule.comply", "CategoryRule.reorder", "DebugInfomation", "DebugInfomation.ToString", "DebugInfomation.add_feature_error", "DebugInfomation.add_joint_error", "DirectRule", "DirectRule.ToString", "DirectRule.comply", "FeatureDefinition", "FeatureDefinition.ToString", "JointDefinition", "JointDefinition.ToString", "JointDefinition.is_identical", "JointDefinition.match", "TopologyRule", "TopologyRule.ToString", "TopologyRule.comply", "TimberModel", "TimberModel.ToString", "TimberModel.add_beam", "TimberModel.add_element", "TimberModel.add_elements", "TimberModel.add_group", "TimberModel.add_interaction", "TimberModel.add_joint", "TimberModel.add_material", "TimberModel.add_wall", "TimberModel.assign_material", "TimberModel.beam_by_guid", "TimberModel.compute_aabb", "TimberModel.compute_obb", "TimberModel.copy", "TimberModel.elements", "TimberModel.elements_connected_by", "TimberModel.from_json", "TimberModel.from_jsonstring", "TimberModel.has_element", "TimberModel.has_interaction", "TimberModel.has_material", "TimberModel.interactions", "TimberModel.materials", "TimberModel.remove_element", "TimberModel.remove_interaction", "TimberModel.remove_joint", "TimberModel.rotate", "TimberModel.rotated", "TimberModel.scale", "TimberModel.scaled", "TimberModel.set_topologies", "TimberModel.sha256", "TimberModel.to_json", "TimberModel.to_jsonstring", "TimberModel.transform", "TimberModel.transform_numpy", "TimberModel.transformed", "TimberModel.transformed_numpy", "TimberModel.translate", "TimberModel.translated", "TimberModel.validate_data", "Actor", "Actor.get_name", "BuildingPlan", "BuildingPlan.ToString", "BuildingPlan.add_step", "BuildingPlan.copy", "BuildingPlan.from_json", "BuildingPlan.from_jsonstring", "BuildingPlan.sha256", "BuildingPlan.to_json", "BuildingPlan.to_jsonstring", "BuildingPlan.validate_data", "SimpleSequenceGenerator", "Step", "Step.ToString", "Step.copy", "Step.from_json", "Step.from_jsonstring", "Step.sha256", "Step.to_json", "Step.to_jsonstring", "Step.transform", "Step.validate_data", "find_neighboring_beams", "Citing", "Examples", "Create Joint", "COMPAS Timber Documentation", "Installation", "License", "Grasshopper plugin", "BTLx Contribution Guide", "Assembly", "Attributes", "Beam", "Examples", "Features", "Joints", "Joint Rules", "Show", "Utils", "Workflow"], "terms": {"compas_timb": [0, 8, 9, 12, 17, 27, 31, 36, 41, 43, 49, 64, 68, 80, 84, 95, 99, 111, 117, 131, 135, 147, 151, 163, 164, 189, 192, 193, 197, 200, 201, 203, 205, 207, 209, 213, 217, 220, 222, 226, 229, 271, 273, 283, 284, 294, 295, 298, 299], "model": [0, 12, 17, 22, 31, 36, 43, 49, 57, 64, 68, 75, 80, 84, 90, 95, 99, 106, 111, 117, 124, 131, 135, 142, 147, 151, 158, 173, 189, 191, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 244, 248, 250, 251, 252, 253, 255, 260, 264, 271, 283, 298], "element": [0, 163, 164, 169, 170, 171, 172, 173, 175, 186, 187, 200, 229, 232, 233, 235, 239, 245, 248, 249, 251, 253, 254, 283, 284, 298], "connect": [0, 8, 9, 12, 13, 17, 27, 28, 31, 36, 41, 43, 44, 49, 64, 65, 68, 80, 81, 84, 95, 96, 99, 111, 112, 117, 131, 132, 135, 147, 148, 151, 163, 165, 202, 204, 206, 208, 226, 230, 245, 274, 285, 298, 300, 303, 308], "fabric": [0, 189, 192, 193, 196, 197, 200, 201, 203, 205, 207, 295, 298], "plan": [0, 271, 273, 283, 284, 298], "ghpython": [0, 209, 213, 217, 220, 222, 226, 298, 301], "rhino": [0, 13, 28, 44, 65, 81, 96, 112, 132, 148, 163, 165, 230, 274, 285, 294, 296, 298, 299, 304, 305, 309, 311], "The": [7, 8, 12, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 47, 48, 49, 50, 51, 54, 55, 61, 62, 63, 64, 67, 68, 69, 70, 72, 73, 77, 78, 79, 83, 84, 85, 86, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 108, 109, 110, 111, 115, 116, 117, 118, 119, 121, 122, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 144, 145, 146, 147, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 166, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 192, 193, 197, 200, 202, 204, 206, 208, 212, 226, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 245, 246, 247, 248, 249, 253, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 276, 277, 278, 280, 281, 282, 286, 287, 288, 290, 291, 293, 294, 300, 301, 304, 305, 307, 308, 309, 311, 312], "modul": [7, 200, 298, 302], "contain": [7, 8, 10, 12, 17, 18, 19, 20, 21, 31, 32, 33, 34, 35, 49, 50, 51, 54, 55, 68, 69, 70, 72, 73, 84, 85, 86, 88, 89, 99, 100, 101, 103, 104, 117, 118, 119, 121, 122, 135, 136, 137, 139, 140, 151, 152, 153, 155, 156, 163, 164, 179, 180, 212, 213, 220, 222, 229, 232, 244, 246, 247, 248, 250, 252, 264, 273, 277, 278, 284, 287, 288, 294], "function": [7, 47, 60, 95, 115, 127, 163, 200, 301, 302, 308], "type": [7, 11, 12, 13, 16, 18, 19, 26, 28, 30, 32, 33, 40, 43, 44, 48, 50, 51, 63, 64, 65, 67, 69, 70, 79, 80, 81, 83, 85, 86, 94, 95, 96, 98, 100, 101, 110, 111, 112, 116, 118, 119, 130, 131, 132, 134, 136, 137, 146, 147, 148, 150, 152, 153, 162, 165, 174, 179, 180, 188, 192, 193, 196, 200, 222, 226, 230, 243, 245, 246, 247, 270, 271, 274, 276, 277, 278, 282, 284, 285, 286, 287, 288, 293, 298, 302, 303, 309, 312], "meant": 7, "us": [7, 8, 10, 11, 12, 13, 15, 23, 26, 27, 28, 37, 40, 42, 43, 44, 58, 63, 64, 65, 76, 79, 80, 81, 91, 94, 95, 96, 107, 110, 111, 112, 125, 130, 131, 132, 143, 146, 147, 148, 159, 162, 163, 165, 176, 183, 188, 189, 196, 212, 230, 260, 261, 265, 266, 267, 268, 269, 270, 272, 274, 279, 282, 284, 285, 289, 293, 294, 295, 298, 300, 301, 302, 304, 305, 307, 308, 309, 311], "context": 7, "except": [8, 235], "sourc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 304, 305], "base": [8, 9, 12, 27, 41, 43, 64, 80, 95, 111, 131, 147, 164, 171, 173, 189, 193, 197, 200, 201, 203, 205, 207, 209, 213, 217, 220, 222, 226, 229, 256, 257, 271, 273, 283, 284, 303, 310, 312], "indic": [8, 12, 177, 178, 193, 304, 305], "an": [8, 10, 12, 16, 17, 18, 19, 24, 25, 26, 30, 31, 32, 33, 38, 39, 40, 43, 48, 49, 50, 51, 61, 62, 63, 64, 67, 68, 69, 70, 77, 78, 79, 80, 83, 84, 85, 86, 92, 93, 94, 95, 98, 99, 100, 101, 108, 109, 110, 111, 116, 117, 118, 119, 128, 129, 130, 131, 134, 135, 136, 137, 144, 145, 146, 147, 150, 151, 152, 153, 160, 161, 162, 164, 174, 179, 180, 184, 185, 188, 195, 199, 232, 235, 236, 239, 243, 246, 247, 249, 253, 262, 263, 270, 271, 276, 277, 278, 280, 281, 282, 286, 287, 288, 290, 291, 293, 295, 296, 298, 299, 300, 301, 303, 304, 305, 308], "error": [8, 169, 172, 213, 215, 216, 303, 304], "ha": [8, 18, 19, 32, 33, 50, 51, 69, 70, 85, 86, 100, 101, 118, 119, 136, 137, 152, 153, 163, 179, 180, 246, 247, 277, 278, 284, 287, 288, 305, 311], "occur": [8, 213, 303], "while": [8, 308], "try": 8, "join": [8, 12, 17, 27, 31, 43, 49, 64, 68, 80, 84, 95, 99, 111, 117, 131, 135, 147, 151, 193, 213, 217, 222, 236, 303], "two": [8, 11, 12, 17, 27, 31, 43, 49, 64, 68, 80, 84, 99, 117, 135, 151, 175, 212, 217, 235, 236, 249, 254, 308, 309], "more": [8, 47, 60, 115, 127, 168, 298, 301, 302, 305, 308], "beam": [8, 9, 10, 11, 12, 14, 17, 20, 21, 22, 27, 29, 31, 34, 35, 36, 43, 45, 49, 54, 55, 57, 60, 64, 66, 68, 72, 73, 75, 80, 82, 84, 88, 89, 90, 95, 97, 99, 103, 104, 106, 111, 113, 117, 121, 122, 124, 127, 131, 133, 135, 139, 140, 142, 147, 149, 151, 155, 156, 158, 163, 193, 197, 209, 211, 212, 213, 217, 219, 220, 222, 225, 228, 229, 231, 236, 240, 294, 297, 298, 301, 303, 304, 307, 308, 309, 310, 311, 312], "thi": [8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 43, 44, 45, 47, 48, 49, 50, 51, 54, 55, 60, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 94, 96, 97, 98, 99, 100, 101, 103, 104, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 127, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 162, 163, 164, 165, 166, 173, 174, 176, 179, 180, 181, 188, 193, 195, 196, 199, 200, 202, 204, 206, 208, 209, 211, 212, 219, 220, 222, 225, 226, 228, 229, 230, 231, 238, 243, 246, 247, 255, 257, 259, 266, 267, 269, 270, 274, 276, 277, 278, 282, 284, 285, 286, 287, 288, 293, 294, 296, 300, 302, 304, 308, 312], "should": [8, 14, 27, 29, 36, 47, 60, 64, 66, 95, 97, 115, 127, 131, 133, 147, 149, 163, 166, 200, 220, 232, 236, 302], "calcul": [8, 14, 20, 21, 29, 34, 35, 47, 54, 55, 66, 72, 73, 88, 89, 97, 103, 104, 115, 121, 122, 133, 139, 140, 149, 155, 156, 229, 260], "featur": [8, 14, 27, 29, 45, 47, 64, 66, 82, 97, 113, 115, 133, 149, 164, 167, 168, 171, 182, 213, 220, 298, 301, 303, 305, 312], "which": [8, 10, 11, 12, 15, 17, 20, 21, 27, 31, 34, 35, 43, 49, 54, 55, 64, 68, 72, 73, 80, 84, 88, 89, 99, 103, 104, 111, 117, 121, 122, 131, 135, 139, 140, 147, 151, 155, 156, 163, 166, 175, 176, 181, 193, 200, 220, 226, 234, 271, 273, 284, 302, 303, 305], "appli": [8, 14, 29, 66, 97, 133, 149, 186, 187, 193, 200, 202, 204, 206, 208, 220, 226, 264, 302, 308, 309, 312], "joint": [8, 9, 12, 14, 17, 41, 43, 45, 47, 49, 64, 66, 68, 80, 82, 84, 95, 97, 99, 111, 113, 115, 117, 131, 133, 135, 147, 149, 151, 166, 181, 189, 192, 193, 194, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 213, 217, 222, 226, 229, 236, 255, 296, 298, 301, 302, 303, 305, 310, 312], "attribut": [8, 12, 27, 41, 43, 64, 80, 95, 111, 164, 189, 193, 200, 209, 212, 213, 229, 234, 283, 284, 298, 301, 302, 305], "list": [8, 10, 12, 17, 27, 31, 49, 64, 68, 84, 99, 117, 135, 151, 163, 164, 167, 168, 175, 182, 189, 200, 211, 213, 219, 228, 229, 233, 239, 245, 284, 294, 302, 309, 310], "were": [8, 11, 27, 304], "suppos": 8, "debug_geometri": 8, "geometri": [8, 164, 170, 171, 172, 173, 186, 187, 241, 242, 256, 257, 259, 264, 268, 269, 284, 294, 298, 301, 303, 305, 307, 308, 311, 312], "A": [8, 10, 12, 17, 27, 31, 49, 64, 68, 84, 99, 117, 135, 151, 163, 164, 167, 177, 178, 189, 202, 204, 206, 208, 212, 229, 232, 237, 250, 295, 300, 305, 308], "can": [8, 26, 40, 63, 79, 94, 110, 130, 146, 162, 188, 200, 232, 270, 273, 282, 284, 293, 296, 301, 302, 305, 308, 309], "visual": [8, 189, 190, 213, 273, 284, 296], "debug_info": 8, "str": [8, 12, 18, 19, 23, 24, 25, 27, 32, 33, 37, 38, 39, 42, 50, 51, 58, 61, 62, 64, 69, 70, 76, 77, 78, 85, 86, 91, 92, 93, 100, 101, 107, 108, 109, 118, 119, 125, 128, 129, 136, 137, 143, 144, 145, 152, 153, 159, 160, 161, 175, 179, 180, 183, 184, 185, 189, 193, 197, 200, 234, 240, 246, 247, 261, 262, 263, 272, 277, 278, 279, 280, 281, 284, 287, 288, 289, 290, 291], "string": [8, 12, 13, 19, 25, 28, 33, 39, 42, 44, 51, 62, 64, 65, 70, 78, 81, 86, 93, 96, 101, 109, 112, 119, 129, 132, 137, 145, 148, 153, 161, 165, 180, 185, 189, 190, 230, 247, 263, 272, 274, 278, 281, 285, 288, 291, 304, 305, 309], "debug": [8, 213, 303], "inform": [8, 213, 298, 303, 311], "about": [8, 298], "wa": [8, 14, 29, 66, 97, 133, 149], "class": [9, 12, 13, 27, 28, 41, 43, 44, 64, 65, 80, 81, 95, 96, 111, 112, 131, 132, 147, 148, 164, 165, 189, 192, 193, 197, 200, 201, 203, 205, 207, 209, 213, 217, 220, 222, 226, 229, 230, 236, 264, 271, 273, 274, 283, 284, 285, 298, 302], "object": [9, 10, 13, 16, 17, 18, 19, 24, 25, 26, 28, 30, 31, 32, 33, 36, 38, 39, 40, 41, 44, 47, 48, 49, 50, 51, 61, 62, 63, 65, 67, 68, 69, 70, 77, 78, 79, 81, 83, 84, 85, 86, 92, 93, 94, 96, 98, 99, 100, 101, 108, 109, 110, 112, 115, 116, 117, 118, 119, 128, 129, 130, 132, 134, 135, 136, 137, 144, 145, 146, 148, 150, 151, 152, 153, 160, 161, 162, 163, 165, 174, 179, 180, 184, 185, 188, 189, 193, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 213, 220, 222, 230, 235, 236, 243, 246, 247, 255, 262, 263, 270, 271, 274, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 293, 298, 303, 304, 305, 311], "provid": [9, 211, 219, 228, 232, 239, 300, 301, 303, 305], "tool": [9, 298, 301, 310, 311], "detect": [9, 303], "intersect": [9, 10, 11], "topologi": [9, 11, 12, 17, 31, 41, 42, 43, 49, 64, 68, 80, 84, 99, 111, 117, 131, 135, 147, 151, 226, 229, 260, 303, 309, 312], "method": [9, 11, 12, 13, 15, 17, 27, 28, 31, 36, 41, 43, 44, 45, 49, 64, 65, 68, 80, 81, 82, 84, 95, 96, 99, 111, 112, 113, 117, 131, 132, 135, 147, 148, 151, 164, 165, 189, 193, 195, 197, 199, 201, 203, 205, 207, 209, 213, 217, 220, 222, 226, 229, 230, 271, 273, 274, 284, 285, 298, 302], "classmethod": [10, 17, 18, 19, 26, 31, 32, 33, 40, 42, 49, 50, 51, 63, 68, 69, 70, 79, 84, 85, 86, 94, 99, 100, 101, 110, 117, 118, 119, 130, 135, 136, 137, 146, 151, 152, 153, 162, 177, 178, 179, 180, 188, 192, 194, 198, 202, 204, 206, 208, 246, 247, 270, 272, 277, 278, 282, 287, 288, 293], "rtree": [10, 294], "fals": [10, 23, 24, 25, 37, 38, 39, 43, 58, 61, 62, 76, 77, 78, 91, 92, 93, 107, 108, 109, 125, 128, 129, 143, 144, 145, 159, 160, 161, 171, 183, 184, 185, 211, 219, 228, 261, 262, 263, 279, 280, 281, 289, 290, 291, 303], "max_dist": [10, 11], "0": [10, 20, 23, 34, 37, 54, 58, 64, 72, 76, 88, 91, 95, 103, 107, 121, 125, 131, 139, 143, 147, 155, 159, 163, 164, 169, 172, 183, 261, 279, 289, 294, 297, 299, 305], "find": [10, 163, 245, 294, 305, 309], "pair": [10, 11, 163, 294, 304], "given": [10, 11, 17, 31, 42, 49, 68, 84, 99, 117, 135, 151, 163, 175, 176, 178, 212, 226, 248, 272, 304], "paramet": [10, 11, 12, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 48, 49, 50, 51, 54, 55, 58, 61, 62, 63, 64, 67, 68, 69, 70, 72, 73, 76, 77, 78, 79, 80, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 111, 116, 117, 118, 119, 121, 122, 125, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 150, 151, 152, 153, 155, 156, 159, 160, 161, 162, 163, 164, 167, 168, 169, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 196, 197, 199, 200, 202, 204, 206, 208, 211, 212, 219, 226, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 293, 294, 302, 304, 311], "bool": [10, 20, 21, 23, 24, 25, 34, 35, 37, 38, 39, 43, 54, 55, 58, 61, 62, 64, 72, 73, 76, 77, 78, 88, 89, 91, 92, 93, 95, 103, 104, 107, 108, 109, 121, 122, 125, 128, 129, 131, 139, 140, 143, 144, 145, 147, 155, 156, 159, 160, 161, 171, 183, 184, 185, 193, 211, 219, 228, 248, 249, 250, 261, 262, 263, 279, 280, 281, 284, 289, 290, 291], "when": [10, 13, 28, 44, 45, 65, 81, 82, 96, 112, 113, 132, 148, 165, 166, 230, 274, 285, 304, 308], "set": [10, 163, 249, 294, 303, 304, 305], "true": [10, 20, 21, 23, 24, 25, 34, 35, 37, 38, 39, 43, 54, 55, 58, 61, 62, 64, 72, 73, 76, 77, 78, 88, 89, 91, 92, 93, 95, 103, 104, 107, 108, 109, 121, 122, 125, 128, 129, 131, 139, 140, 143, 144, 145, 147, 155, 156, 159, 160, 161, 171, 176, 183, 184, 185, 211, 219, 225, 228, 248, 249, 261, 262, 263, 279, 280, 281, 289, 290, 291, 303, 305, 308], "r": [10, 163, 299], "tree": [10, 163, 232], "search": [10, 163], "neighbor": [10, 163, 294], "float": [10, 11, 64, 95, 131, 147, 163, 164, 166, 169, 172, 176, 177, 178, 193, 229, 256, 257, 258, 259, 294], "option": [10, 11, 16, 20, 21, 23, 24, 25, 30, 34, 35, 37, 38, 39, 48, 54, 55, 58, 61, 62, 67, 72, 73, 76, 77, 78, 83, 88, 89, 91, 92, 93, 98, 103, 104, 107, 108, 109, 116, 121, 122, 125, 128, 129, 134, 139, 140, 143, 144, 145, 150, 155, 156, 159, 160, 161, 163, 169, 171, 174, 183, 184, 185, 197, 232, 233, 234, 235, 239, 243, 254, 256, 257, 258, 259, 261, 262, 263, 276, 279, 280, 281, 286, 289, 290, 291, 305, 308, 312], "i": [10, 11, 12, 15, 17, 18, 19, 20, 21, 26, 27, 31, 32, 33, 34, 35, 36, 40, 43, 45, 47, 49, 50, 51, 54, 55, 63, 64, 68, 69, 70, 72, 73, 79, 80, 82, 84, 85, 86, 88, 89, 94, 95, 99, 100, 101, 103, 104, 110, 111, 113, 115, 117, 118, 119, 121, 122, 130, 131, 135, 136, 137, 139, 140, 146, 147, 151, 152, 153, 155, 156, 162, 163, 164, 166, 175, 176, 179, 180, 188, 189, 193, 195, 196, 199, 226, 229, 232, 239, 246, 247, 264, 270, 273, 277, 278, 282, 283, 287, 288, 293, 295, 298, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311], "addit": [10, 27, 234, 301, 304, 305, 307], "distanc": [10, 11, 303, 308], "apart": 10, "non": 10, "touch": 10, "ar": [10, 11, 13, 15, 17, 20, 21, 28, 31, 34, 35, 36, 43, 44, 49, 54, 55, 65, 68, 72, 73, 81, 84, 88, 89, 96, 99, 103, 104, 112, 117, 121, 122, 132, 135, 139, 140, 148, 151, 155, 156, 163, 165, 200, 212, 225, 230, 235, 239, 274, 284, 285, 296, 302, 303, 304, 305, 307, 308, 309, 311, 312], "still": 10, "consid": [10, 11, 308], "return": [10, 11, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 39, 40, 42, 48, 49, 50, 51, 54, 55, 58, 60, 62, 63, 67, 68, 69, 70, 72, 73, 76, 78, 79, 83, 84, 85, 86, 88, 89, 91, 93, 94, 98, 99, 100, 101, 103, 104, 107, 109, 110, 116, 117, 118, 119, 121, 122, 125, 127, 129, 130, 134, 135, 136, 137, 139, 140, 143, 145, 146, 150, 151, 152, 153, 155, 156, 159, 161, 162, 163, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 190, 192, 196, 202, 204, 206, 208, 211, 212, 219, 225, 228, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 253, 254, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 276, 277, 278, 279, 281, 282, 286, 287, 288, 289, 291, 293, 294, 303], "neightbor": [10, 294], "beam_a": [11, 12, 20, 21, 34, 35, 54, 55, 72, 73, 80, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "beam_b": [11, 12, 20, 21, 34, 35, 54, 55, 72, 73, 80, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "tol": 11, "1e": 11, "06": 11, "none": [11, 16, 30, 48, 67, 83, 98, 116, 134, 150, 166, 167, 174, 177, 178, 181, 182, 186, 192, 197, 198, 202, 204, 206, 208, 232, 233, 234, 235, 237, 239, 243, 253, 254, 256, 257, 258, 259, 264, 265, 268, 276, 286, 305], "If": [11, 18, 19, 20, 21, 23, 24, 25, 32, 33, 34, 35, 37, 38, 39, 43, 50, 51, 54, 55, 58, 61, 62, 64, 69, 70, 72, 73, 76, 77, 78, 85, 86, 88, 89, 91, 92, 93, 95, 100, 101, 103, 104, 107, 108, 109, 118, 119, 121, 122, 125, 128, 129, 131, 136, 137, 139, 140, 143, 144, 145, 147, 152, 153, 155, 156, 159, 160, 161, 171, 179, 180, 182, 183, 184, 185, 232, 233, 235, 239, 246, 247, 261, 262, 263, 277, 278, 279, 280, 281, 287, 288, 289, 290, 291, 294, 295, 303, 305, 308], "within": [11, 225, 284, 305], "role": [11, 36, 212], "sensit": 11, "output": [11, 13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285, 303, 305, 307, 308], "consist": 11, "specif": [11, 36, 200, 245, 250, 298, 302, 308, 309], "order": [11, 163, 196, 212, 283, 312], "e": [11, 36, 43, 296, 304, 308, 309, 311], "g": [11, 36, 296, 304], "main": [11, 36, 43, 47, 57, 64, 75, 90, 95, 106, 111, 113, 115, 124, 131, 142, 147, 158, 308], "first": [11, 80, 175, 212, 235, 249, 309, 312], "cross": [11, 36, 43, 47, 57, 60, 64, 75, 90, 95, 106, 111, 113, 115, 124, 127, 131, 142, 147, 158, 164, 177, 178, 305, 308], "second": [11, 80, 175, 212, 235, 249, 309], "otherwis": [11, 43, 211, 219, 228, 300, 305], "same": [11, 43, 283, 284], "thei": [11, 312], "input": [11, 163, 200, 301, 302, 303, 304, 305, 307, 308, 309], "from": [11, 18, 19, 23, 32, 33, 37, 50, 51, 58, 60, 69, 70, 76, 85, 86, 91, 100, 101, 107, 118, 119, 125, 127, 136, 137, 143, 152, 153, 159, 177, 178, 179, 180, 181, 182, 183, 200, 246, 247, 253, 255, 261, 277, 278, 279, 287, 288, 289, 296, 298, 300, 301, 302, 304, 305, 307, 308, 309, 310], "gener": [11, 191, 195, 199, 200, 283, 302, 305, 308, 312], "toler": [11, 303, 308], "mathemat": 11, "comput": [11, 23, 37, 58, 76, 91, 107, 125, 143, 159, 169, 170, 171, 172, 173, 183, 241, 242, 261, 279, 289], "maximum": 11, "desigen": 11, "unit": [11, 163, 176], "tupl": [11, 20, 21, 27, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 164, 176, 212, 235, 236], "jointtopologi": [11, 226, 229, 298], "repres": [12, 43, 64, 80, 111, 131, 147, 164, 189, 193, 197, 229, 235, 271, 305], "french": [12, 15, 193, 201, 308], "ridg": [12, 15, 193, 201, 308], "lap": [12, 15, 64, 95, 131, 147, 193, 308], "end": [12, 20, 21, 27, 34, 35, 43, 54, 55, 60, 64, 72, 73, 80, 88, 89, 103, 104, 111, 121, 122, 127, 131, 139, 140, 147, 155, 156, 164, 166, 175, 176, 178, 193, 308], "compat": [12, 13, 28, 43, 44, 64, 65, 80, 81, 96, 111, 112, 131, 132, 147, 148, 163, 165, 230, 274, 285], "l": [12, 43, 47, 64, 80, 95, 115, 203, 205, 206, 226, 309], "pleas": [12, 43, 64, 80, 95, 111, 131, 147, 295], "lbuttjoint": [12, 298], "creat": [12, 15, 27, 43, 45, 64, 80, 82, 95, 111, 113, 131, 147, 177, 178, 187, 192, 193, 201, 203, 205, 207, 217, 296, 298, 299, 301, 302, 303, 304, 305, 308, 312], "properli": [12, 43, 64, 80, 95, 111, 131, 147], "instanc": [12, 13, 17, 18, 19, 28, 31, 32, 33, 43, 44, 49, 50, 51, 64, 65, 68, 69, 70, 80, 81, 84, 85, 86, 95, 96, 99, 100, 101, 111, 112, 117, 118, 119, 131, 132, 135, 136, 137, 147, 148, 151, 152, 153, 165, 179, 180, 200, 211, 219, 228, 230, 236, 246, 247, 274, 277, 278, 285, 287, 288, 296, 302], "associ": [12, 36, 43, 64, 80, 95, 111, 131, 147, 193, 204, 208, 284, 300], "top": [12, 22, 193, 301, 308], "bottom": [12, 22, 193, 308], "joint_typ": [12, 64, 192, 226], "represent": [12, 13, 24, 25, 28, 38, 39, 42, 44, 61, 62, 64, 65, 77, 78, 81, 92, 93, 96, 108, 109, 112, 128, 129, 132, 144, 145, 148, 160, 161, 165, 184, 185, 230, 262, 263, 272, 274, 280, 281, 285, 290, 291, 302], "": [12, 14, 20, 21, 26, 29, 34, 35, 40, 47, 54, 55, 63, 64, 66, 72, 73, 79, 88, 89, 94, 97, 103, 104, 110, 115, 121, 122, 130, 133, 139, 140, 146, 149, 155, 156, 162, 164, 175, 177, 178, 188, 270, 282, 293, 304, 305, 311], "reference_face_indic": 12, "dict": [12, 27, 189, 193, 196, 200, 202, 204, 206, 208, 226, 229, 234, 302], "dictionari": [12, 27, 189, 202, 204, 206, 208], "refer": [12, 15, 22, 36, 57, 75, 90, 106, 124, 142, 158, 193, 298, 301, 302, 304], "face": [12, 15, 20, 21, 23, 34, 35, 37, 43, 54, 55, 58, 72, 73, 76, 88, 89, 91, 103, 104, 107, 121, 122, 125, 139, 140, 143, 155, 156, 159, 164, 176, 183, 193, 261, 279, 289, 308, 310], "both": [12, 45, 82, 235, 239], "inherit": [12, 27, 43, 64, 80, 95, 111, 131, 147, 164, 226, 229, 273, 284, 298, 302], "convert": [13, 24, 25, 28, 38, 39, 44, 61, 62, 65, 77, 78, 81, 92, 93, 96, 108, 109, 112, 128, 129, 132, 144, 145, 148, 160, 161, 165, 184, 185, 230, 262, 263, 274, 280, 281, 285, 290, 291], "exist": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285, 302], "net": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "ironpython": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "implicit": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "convers": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "usual": [13, 28, 44, 65, 81, 96, 112, 132, 148, 164, 165, 230, 274, 285], "take": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285, 302, 312], "place": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 264, 274, 285, 308], "cpython": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "kick": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "its": [13, 20, 21, 24, 25, 28, 34, 35, 38, 39, 44, 54, 55, 61, 62, 65, 72, 73, 77, 78, 81, 88, 89, 92, 93, 96, 103, 104, 108, 109, 112, 121, 122, 128, 129, 132, 139, 140, 144, 145, 148, 155, 156, 160, 161, 165, 173, 177, 184, 185, 192, 204, 208, 230, 240, 262, 263, 274, 280, 281, 285, 290, 291, 299, 304, 308], "default": [13, 16, 24, 25, 28, 30, 38, 39, 43, 44, 48, 61, 62, 64, 65, 67, 77, 78, 81, 83, 92, 93, 95, 96, 98, 108, 109, 112, 116, 128, 129, 131, 132, 134, 144, 145, 147, 148, 150, 160, 161, 165, 174, 177, 178, 184, 185, 197, 230, 243, 256, 257, 258, 259, 262, 263, 274, 276, 280, 281, 285, 286, 290, 291, 298, 303, 305, 309, 311], "print": [13, 24, 25, 28, 38, 39, 44, 61, 62, 65, 77, 78, 81, 92, 93, 96, 108, 109, 112, 128, 129, 132, 144, 145, 148, 160, 161, 165, 184, 185, 230, 262, 263, 274, 280, 281, 285, 290, 291], "self": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 200, 230, 274, 285, 302], "gettyp": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "fullnam": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "similar": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285, 308], "overrid": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285, 309], "fix": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "make": [13, 16, 28, 30, 44, 48, 65, 67, 81, 83, 96, 98, 112, 116, 132, 134, 148, 150, 165, 174, 230, 243, 274, 276, 285, 286], "grasshopp": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285, 296, 298, 299, 305], "displai": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285, 304, 310], "proper": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "panel": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 230, 274, 285], "other": [13, 20, 21, 28, 34, 35, 44, 54, 55, 64, 65, 72, 73, 81, 88, 89, 95, 96, 103, 104, 112, 121, 122, 131, 132, 139, 140, 147, 148, 155, 156, 165, 193, 224, 230, 274, 285, 295, 300, 303, 308, 312], "add": [14, 29, 45, 66, 82, 97, 113, 133, 149, 166, 167, 168, 231, 232, 233, 234, 235, 236, 237, 238, 301, 302, 303, 311], "defin": [14, 29, 66, 97, 133, 149, 177, 193, 211, 219, 225, 228, 304, 305, 308, 309, 311, 312], "affect": [14, 29, 66, 97, 133, 149], "rais": [14, 17, 18, 19, 29, 31, 32, 33, 49, 50, 51, 66, 68, 69, 70, 84, 85, 86, 97, 99, 100, 101, 117, 118, 119, 133, 135, 136, 137, 149, 151, 152, 153, 179, 180, 232, 235, 239, 246, 247, 277, 278, 287, 288], "beamjoinningerror": [14, 29, 66, 97, 133, 149, 298], "whenev": [14, 29, 66, 97, 133, 149], "abl": [14, 29, 66, 97, 133, 149], "check": [15, 248, 294, 298, 304], "whether": [15, 284, 300], "part": [15, 36, 47, 60, 115, 127, 189, 191, 193, 194, 197, 198, 202, 204, 206, 208, 232, 239, 294, 298, 302, 305, 307], "align": [15, 163, 164, 169, 241, 301, 311], "necessari": [15, 299, 302], "determin": [15, 212, 308], "machin": [15, 302], "cl": [16, 30, 48, 67, 83, 98, 116, 134, 150, 174, 226, 243, 276, 286], "independ": [16, 30, 48, 67, 83, 98, 116, 134, 150, 174, 243, 276, 286], "data": [16, 18, 19, 23, 24, 25, 26, 30, 32, 33, 37, 38, 39, 40, 48, 50, 51, 58, 61, 62, 63, 67, 69, 70, 76, 77, 78, 79, 83, 85, 86, 91, 92, 93, 94, 98, 100, 101, 107, 108, 109, 110, 116, 118, 119, 125, 128, 129, 130, 134, 136, 137, 143, 144, 145, 146, 150, 152, 153, 159, 160, 161, 162, 174, 179, 180, 183, 184, 185, 188, 189, 243, 246, 247, 261, 262, 263, 265, 266, 267, 270, 273, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 293, 310], "compa": [16, 18, 19, 23, 30, 32, 33, 37, 48, 50, 51, 58, 67, 69, 70, 76, 83, 85, 86, 91, 98, 100, 101, 107, 116, 118, 119, 125, 134, 136, 137, 143, 150, 152, 153, 159, 164, 170, 171, 172, 173, 174, 179, 180, 183, 186, 187, 241, 242, 243, 246, 247, 256, 257, 261, 264, 268, 269, 276, 277, 278, 279, 284, 286, 287, 288, 289, 295, 301, 308], "current": [16, 30, 48, 67, 83, 98, 116, 134, 150, 174, 243, 276, 286, 298, 308], "kwarg": [17, 31, 49, 68, 84, 99, 117, 135, 151, 226, 234], "new": [17, 31, 49, 68, 84, 99, 117, 135, 151, 299, 302, 305], "expect": [17, 31, 49, 68, 84, 99, 117, 135, 151], "have": [17, 31, 49, 68, 84, 99, 117, 135, 151, 200, 232, 249, 305], "been": [17, 31, 49, 68, 84, 99, 117, 135, 151, 232, 284], "ad": [17, 27, 31, 49, 68, 84, 99, 117, 135, 151, 168, 232, 233, 234, 294, 309], "befor": [17, 31, 49, 68, 84, 99, 117, 135, 151, 232], "call": [17, 31, 36, 45, 49, 68, 82, 84, 99, 113, 117, 135, 151, 200, 302, 305], "code": [17, 31, 47, 49, 60, 68, 84, 99, 115, 117, 127, 135, 151, 296, 298], "doe": [17, 31, 49, 68, 84, 99, 117, 135, 151, 302, 305], "verifi": [17, 31, 49, 68, 84, 99, 117, 135, 151, 176, 250], "adjac": [17, 31, 49, 68, 84, 99, 117, 135, 151], "lie": [17, 31, 49, 68, 84, 99, 117, 135, 151], "allow": [17, 31, 49, 64, 68, 84, 95, 99, 117, 131, 135, 147, 151, 176, 212, 213, 220, 222, 229, 284], "them": [17, 31, 49, 68, 80, 84, 99, 117, 135, 151, 200, 249, 296, 302, 304, 308, 309], "respons": [17, 31, 49, 68, 84, 99, 117, 135, 151], "valueerror": [17, 31, 49, 68, 84, 99, 117, 135, 151, 232, 239], "less": [17, 31, 49, 68, 84, 99, 117, 135, 151, 164, 308], "than": [17, 23, 31, 37, 49, 58, 68, 76, 84, 91, 99, 107, 117, 125, 135, 143, 151, 159, 183, 261, 279, 289, 308], "timbermodel": [17, 31, 49, 68, 84, 99, 117, 135, 151, 298], "jo": [17, 31, 49, 68, 84, 99, 117, 135, 151], "belong": [17, 31, 49, 68, 84, 99, 117, 135, 151], "whould": [17, 31, 49, 68, 84, 99, 117, 135, 151], "togeth": [17, 31, 49, 68, 84, 99, 117, 135, 151, 305], "filepath": [18, 24, 32, 38, 50, 61, 69, 77, 85, 92, 100, 108, 118, 128, 136, 144, 152, 160, 179, 184, 246, 262, 277, 280, 287, 290], "construct": [18, 19, 26, 32, 33, 40, 50, 51, 63, 69, 70, 79, 85, 86, 94, 100, 101, 110, 118, 119, 130, 136, 137, 146, 152, 153, 162, 179, 180, 188, 246, 247, 270, 277, 278, 282, 287, 288, 293, 298], "json": [18, 19, 24, 25, 32, 33, 38, 39, 50, 51, 61, 62, 69, 70, 77, 78, 85, 86, 92, 93, 100, 101, 108, 109, 118, 119, 128, 129, 136, 137, 144, 145, 152, 153, 160, 161, 179, 180, 184, 185, 246, 247, 262, 263, 277, 278, 280, 281, 287, 288, 290, 291], "file": [18, 24, 32, 38, 50, 61, 69, 77, 85, 92, 100, 108, 118, 128, 136, 144, 152, 160, 179, 184, 189, 246, 262, 277, 280, 287, 290, 300, 302, 306], "path": [18, 24, 32, 38, 50, 61, 69, 77, 85, 92, 100, 108, 118, 128, 136, 144, 152, 160, 179, 184, 246, 262, 277, 280, 287, 290], "correct": [18, 19, 32, 33, 50, 51, 69, 70, 85, 86, 100, 101, 118, 119, 136, 137, 152, 153, 179, 180, 246, 247, 277, 278, 287, 288], "schema": [18, 19, 26, 32, 33, 40, 50, 51, 63, 69, 70, 79, 85, 86, 94, 100, 101, 110, 118, 119, 130, 136, 137, 146, 152, 153, 162, 179, 180, 188, 246, 247, 270, 277, 278, 282, 287, 288, 293], "typeerror": [18, 19, 32, 33, 50, 51, 69, 70, 85, 86, 100, 101, 118, 119, 136, 137, 152, 153, 179, 180, 246, 247, 277, 278, 287, 288], "static": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "ignore_end": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "Of": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "all": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 176, 182, 196, 244, 251, 252, 264, 294, 300, 304], "one": [20, 21, 34, 35, 54, 55, 64, 72, 73, 88, 89, 95, 103, 104, 121, 122, 131, 139, 140, 147, 155, 156, 168, 212, 235, 239, 283, 284, 302, 305, 308], "whose": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "normal": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 164], "most": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "orthogon": [20, 34, 54, 72, 88, 103, 121, 139, 155], "done": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "inner": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 308], "product": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "centerlin": [20, 21, 34, 35, 54, 55, 72, 73, 80, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 164, 175, 177, 178, 301, 304, 305, 311], "each": [20, 21, 27, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 176, 200, 273, 302, 304, 308, 309, 310], "result": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 175, 283, 305], "closest": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "chosen": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "attach": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 209], "ignor": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "face_index": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156], "frame": [20, 21, 27, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 164, 193, 197, 198, 284, 297, 298, 301, 305, 312], "index": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 193, 298, 303, 310], "center": [20, 21, 34, 35, 54, 55, 72, 73, 88, 89, 103, 104, 121, 122, 139, 140, 155, 156, 229, 295], "1": [21, 23, 35, 37, 55, 58, 64, 73, 76, 89, 91, 95, 104, 107, 122, 125, 131, 140, 143, 147, 156, 159, 164, 183, 261, 279, 289, 297, 302, 305, 312], "assemli": 22, "after": [22, 57, 75, 90, 106, 124, 142, 158], "de": [22, 36, 57, 75, 90, 106, 124, 142, 158], "serial": [22, 36, 57, 75, 90, 106, 124, 142, 158], "restor": [22, 36, 57, 75, 90, 106, 124, 142, 158], "save": [22, 24, 25, 38, 39, 57, 61, 62, 75, 77, 78, 90, 92, 93, 106, 108, 109, 124, 128, 129, 142, 144, 145, 158, 160, 161, 184, 185, 262, 263, 280, 281, 290, 291], "as_str": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "hash": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "comparison": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "dure": [23, 36, 37, 58, 76, 91, 107, 125, 143, 159, 183, 213, 261, 279, 284, 289, 303], "version": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289, 299, 308], "control": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289, 308], "algorithm": [23, 37, 58, 76, 91, 107, 125, 143, 159, 163, 183, 261, 279, 289], "digest": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "hexadecim": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "format": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 189, 261, 279, 289, 304], "rather": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "byte": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "exampl": [23, 36, 37, 58, 76, 91, 107, 125, 143, 159, 163, 183, 261, 279, 289, 298, 301, 304, 305, 312], "datastructur": [23, 37, 58, 76, 91, 107, 125, 143, 159, 170, 171, 183, 241, 242, 256, 258, 261, 266, 267, 268, 269, 279, 289], "import": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289, 302, 312], "mesh": [23, 37, 58, 76, 91, 107, 125, 143, 159, 170, 171, 183, 261, 279, 289, 297], "from_obj": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "get": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 240, 261, 279, 289, 299, 301], "obj": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 284, 289], "v1": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "v2": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "vertex_attribut": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "vertex_sampl": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "z": [23, 37, 58, 76, 91, 107, 125, 143, 159, 164, 177, 178, 183, 256, 257, 258, 259, 261, 279, 289, 305, 307, 311], "v3": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "pretti": [24, 25, 38, 39, 61, 62, 77, 78, 92, 93, 108, 109, 128, 129, 144, 145, 160, 161, 184, 185, 189, 190, 262, 263, 280, 281, 290, 291], "nativ": [24, 25, 38, 39, 61, 62, 77, 78, 92, 93, 108, 109, 128, 129, 144, 145, 160, 161, 184, 185, 262, 263, 280, 281, 290, 291], "valid": [26, 40, 63, 79, 94, 110, 130, 146, 162, 188, 270, 282, 293], "against": [26, 40, 63, 79, 94, 110, 130, 146, 162, 188, 270, 282, 293], "raw": [26, 40, 63, 79, 94, 110, 130, 146, 162, 188, 270, 282, 293, 305], "__from_data__": [26, 40, 63, 79, 94, 110, 130, 146, 162, 188, 270, 282, 293], "ani": [26, 40, 63, 79, 94, 110, 130, 146, 162, 188, 270, 282, 293, 296, 300, 307, 309], "interact": [27, 229, 235, 245, 249, 254, 296], "instanti": [27, 95, 200, 302], "directli": [27, 95, 217, 232, 233, 309], "respect": [27, 36], "implement": [27, 36, 294, 298, 308], "instead": [27, 305], "map": [27, 301, 311], "kei": [27, 36, 64, 166, 181, 202, 204, 206, 208, 304], "uniqu": [27, 240], "identifi": [27, 163, 240], "To": [36, 299, 301, 302, 303, 312], "avoid": [36, 169, 172], "circular": 36, "onli": [36, 47, 115, 171, 304], "store": [36, 304, 305], "sinc": 36, "concret": 36, "see": [36, 229, 301, 303, 305, 306, 307, 309, 311, 312], "tbuttjoint": [36, 297, 298], "enumer": 41, "possibl": [41, 304], "topo_unknown": [41, 42], "topo_i": 41, "topo_l": [41, 42], "topo_t": [41, 42], "topo_x": [41, 42], "valu": [42, 64, 95, 131, 147, 163, 164, 272, 304], "For": [42, 163, 272, 298, 303, 308, 311], "log": [42, 272], "int": [42, 166, 181, 193, 235, 272, 284], "One": [42, 272, 284, 308], "buttjoint": [43, 111], "butt": [43, 47, 111, 115, 203, 207, 308, 309], "trim": [43, 45, 64, 80, 82, 111, 113, 131, 147, 303, 307], "main_beam": [43, 64, 95, 111, 131, 147, 297], "cross_beam": [43, 64, 95, 111, 131, 147, 297], "small_beam_butt": 43, "smaller": [43, 47, 60, 115, 127, 164, 305], "section": [43, 164, 177, 178, 296, 301, 305, 308], "modify_cross": 43, "extend": [43, 166, 176, 308], "opposit": [43, 308], "cut": [43, 64, 95, 131, 147, 197, 301, 303, 305, 307, 308], "plane": [43, 80, 113, 176, 197, 305, 307, 308, 311], "reject_i": 43, "reject": 43, "requir": [45, 82, 166, 181, 196, 200, 299], "extens": [45, 82, 166, 176, 181, 308], "automat": [45, 82, 113, 309, 311], "birdsmouth": [47, 115], "todo": [47, 60, 115, 127, 176, 260], "break": [47, 60, 115, 127], "readabl": [47, 60, 115, 127], "btlx": [47, 60, 115, 127, 193, 200, 298, 301], "move": [47, 115], "some": [47, 115, 200, 301, 311], "where": [47, 115, 302, 305, 308, 309, 311], "els": [47, 115], "eventu": [47, 115], "doublecut": [47, 115], "hold": [47, 115], "bird": [47, 115], "mouth": [47, 115], "shouldn": [47, 115], "t": [47, 95, 111, 115, 131, 147, 207, 226, 309], "least": [47, 115], "main_part": [47, 115], "cross_part": [47, 115], "volum": [60, 127, 229], "subtract": [60, 127, 303, 307], "relat": [60, 127, 200, 213, 302], "here": [60, 127, 302, 306, 311], "up": [60, 127], "lapfeatur": [60, 127], "lapjoint": [64, 131, 147, 298], "flip_lap_sid": [64, 95, 131, 147], "flip": [64, 95, 131, 147, 308], "side": [64, 95, 131, 147, 164, 307, 308], "cut_plane_bia": [64, 95, 131, 147], "shift": [64, 95, 131, 147, 308], "deeper": [64, 95, 131, 147], "between": [64, 80, 95, 131, 147, 229, 235, 249, 251, 254, 304, 308, 309, 312], "without": [64, 95, 131, 147, 300, 305], "complet": [64, 95, 131, 147], "through": [64, 95, 131, 147, 176, 295, 309], "either": [64, 95, 131, 147, 175], "5": [64, 95, 131, 147, 164], "main_beam_kei": 64, "cross_beam_kei": 64, "miter": [80, 205, 206, 308, 309], "bisector": [80, 308], "angl": [80, 193, 256, 257, 308], "abstract": [95, 303], "common": 95, "x": [95, 147, 164, 226, 258, 259, 305, 309, 311], "do": [95, 300, 302], "sub": 95, "along": [111, 131, 147, 164, 308], "length": [111, 131, 147, 164, 177, 308], "anoth": [111, 131, 147], "inflate_bi": [163, 294], "axi": [163, 164, 169, 177, 178, 241, 256, 257, 305, 307, 311], "bound": [163, 164, 169, 172, 241, 242, 294], "box": [163, 164, 169, 172, 241, 242, 284, 294, 301, 305], "aabb": [163, 164, 169], "enlarg": 163, "amount": [163, 166, 176, 294], "design": [163, 295, 298, 301, 304, 305], "regard": 163, "inflat": [163, 169, 172, 294], "note": [163, 232, 295], "pluggabl": 163, "In": [163, 298, 299, 308, 312], "plugin": [163, 298], "avail": 163, "timber": [164, 189, 197, 229, 295, 301, 305, 308, 312], "stud": [164, 305], "slat": 164, "etc": [164, 189, 190, 296, 298, 305], "rectangular": [164, 305], "local": [164, 305], "coordin": [164, 173, 305], "system": [164, 305], "origin": [164, 196, 256, 257, 305, 311], "locat": [164, 284, 303, 305], "start": [164, 166, 175, 176, 178, 301, 305], "point": [164, 169, 172, 175, 178, 229, 256, 257, 298, 308, 311], "correspond": [164, 175, 192, 304, 305, 309, 311], "major": [164, 305], "also": [164, 295, 298, 301, 304, 305, 308, 309], "fibr": [164, 301], "direct": [164, 176, 177, 178, 258, 259, 294, 305, 309, 312], "solid": [164, 303], "wood": 164, "y": [164, 258, 259, 305, 311], "width": [164, 177, 178, 297, 304, 305], "dimens": [164, 305], "height": [164, 177, 178, 297, 304, 305], "larger": [164, 305, 308], "shape": 164, "parametr": [164, 298], "blank": [164, 166, 181, 305], "materi": [164, 232, 237, 239, 250, 305, 311], "stock": [164, 305], "produc": 164, "6": 164, "equal": 164, "posit": [164, 173, 307], "2": [164, 297, 302, 312], "3": [164, 299, 302, 308, 312], "4": [164, 297, 302], "line": [164, 177, 298, 304, 305, 307, 309], "centerline_start": 164, "centerline_end": 164, "xmin": 164, "ymin": 164, "zmin": 164, "xmax": 164, "ymax": 164, "zmax": 164, "long_edg": 164, "long": [164, 176], "midpoint": 164, "middl": [164, 308], "joint_kei": [166, 181], "remov": [166, 181, 182, 253, 254, 255, 304, 307, 308], "well": [166, 309], "lement": 167, "offset": [169, 172], "collis": 170, "include_featur": 171, "includ": [171, 300, 302], "brep": [171, 298, 303, 307, 311], "orient": [172, 177, 178, 193, 242, 311], "obb": 172, "transform": [173, 256, 257, 258, 259, 265, 267, 268, 269], "world": [173, 305], "spatial": [173, 303], "hierarchi": [173, 229, 232], "endpoint": [175, 178], "closer": 175, "interest": 175, "depend": [175, 177, 178, 299, 302], "actual": [175, 220, 222], "pln": 176, "metric": 176, "minimum": 176, "pass": [176, 226], "z_vector": [177, 178], "vector": [177, 178, 256, 257, 268, 269, 298, 305], "worldz": [177, 178], "worldx": [177, 178], "point_start": 178, "point_end": 178, "end_point": 178, "copi": [187, 257, 259, 266, 267, 269, 300], "compas_model": [187, 245, 283], "histori": 189, "btlx_string": 189, "xml": [189, 190], "gh": [189, 190], "termin": [189, 190], "btlxpart": [189, 193, 197, 200, 202, 204, 206, 208, 302], "process": [191, 193, 195, 196, 197, 199, 200, 202, 204, 206, 208, 298, 301, 302, 303, 312], "joint_factori": [192, 200, 302], "regist": 192, "factori": [192, 200, 201, 203, 205, 207, 302], "jointfactori": 192, "is_top": [193, 194], "flag": 193, "process_typ": [193, 200, 302], "frenchridgelap": 193, "other_beam": 193, "drill_hole_diamet": 193, "diamet": [193, 307], "drill": [193, 307], "hole": [193, 301, 307], "ref_face_index": 193, "ref_fac": 193, "surfac": [193, 302, 307, 308], "header_attribut": [193, 200, 302], "header": 193, "process_paramet": [193, 200], "geometr": [193, 196, 200, 298, 302, 303, 307], "degre": 193, "intern": [195, 199], "properti": 196, "It": [196, 298, 301, 303, 304, 305, 308, 309, 311], "ordereddict": 196, "maintain": [196, 298], "jack": 197, "joint_nam": [197, 198], "name": [197, 200, 234, 302, 304, 310], "append": [200, 302], "btlx_process": [200, 302], "eg": 200, "btlxjackcut": [200, 298], "match": [200, 302, 308], "describ": [200, 302], "deriv": [200, 302], "combin": [200, 308, 309], "multipl": [200, 233, 296, 302], "cover": 200, "register_joint": [200, 302], "so": [200, 300, 302], "typic": [200, 284, 302], "need": [200, 302, 304, 312], "individu": 200, "attr": [200, 234], "param": 200, "et_el": 200, "et": 200, "involv": 206, "jointrul": [209, 217, 226], "categori": [209, 212, 304, 305, 308, 309, 312], "rule": [209, 211, 217, 219, 226, 228, 298, 301, 303, 305, 308, 312], "assign": [209, 226, 229, 232, 239, 309, 311], "sort": 212, "accord": [212, 304, 308], "catergory_a": 212, "category_b": 212, "inspect": [213, 310], "featureapplicationerror": 213, "beamjoiningerror": 213, "feature_error": 213, "applic": 213, "joint_error": 213, "link": 220, "delai": [220, 222], "downstream": [220, 222], "compon": [220, 222, 299, 303, 304, 305, 307, 308, 309], "shall": [222, 300], "k": 226, "topology_typ": 226, "constant": 226, "keyword": [226, 234], "argument": [226, 234], "differ": [229, 296, 302, 308, 309], "wall": [229, 238], "express": [229, 300], "center_of_mass": 229, "mass": 229, "detected_topo": 229, "beam_a_kei": 229, "beam_b_kei": 229, "total": 229, "parent": [232, 233, 234], "groupnod": [232, 233, 234], "group": [232, 233, 234, 245, 304], "node": [232, 233, 234], "under": [232, 233], "root": [232, 233], "alreadi": 232, "elementnod": [232, 233], "b": [235, 249, 254], "edg": [235, 308], "graph": 235, "neither": 239, "guid": [240, 298, 301, 305, 309], "retriev": [240, 304], "specifi": 240, "yield": [244, 251, 252], "interaction_typ": 245, "radian": [256, 257], "translat": [256, 257, 258, 259], "scale": [256, 257, 268, 269, 311], "factor": [258, 259], "rotat": [258, 259, 268, 269, 305], "insid": [260, 296], "connectionsolv": [260, 298], "modifi": [264, 300], "structur": [265, 266, 267, 295, 298, 301, 303, 312], "enum": 271, "could": 271, "execut": [271, 284, 296], "instruct": [271, 273, 284], "human": [272, 284], "robot": [272, 284], "build": [273, 283, 284, 299, 312], "step": [273, 275, 283, 298, 302], "collect": [273, 294, 303], "simpl": [283, 298, 301], "sequenc": [283, 298], "per": 283, "buildingplan": [283, 298], "assembl": 284, "singl": [284, 302, 309], "actor": [284, 298], "element_id": 284, "cad": [284, 296], "id": [284, 296], "elements_held": 284, "held": 284, "support": [284, 295, 296], "is_built": 284, "is_plan": 284, "increment": 284, "cylind": 284, "prioriti": [284, 309], "parallel": [284, 305, 308], "prior": 294, "research": [295, 298, 300], "project": [295, 298], "develop": [295, 298], "aleksandra": 295, "apolinarska": 295, "chen": 295, "kasir": 295, "gonzalo": 295, "casa": 295, "gramazio": [295, 298, 300], "kohler": [295, 298, 300], "eth": [295, 298], "zurich": [295, 298], "swiss": 295, "nation": 295, "scienc": 295, "foundat": 295, "compet": 295, "digit": 295, "nccr": 295, "dfab": 295, "programm": 295, "As": 295, "open": [295, 298], "mani": [295, 296, 298], "contributor": 295, "you": [295, 301, 312], "your": 295, "work": 295, "acknowledg": 295, "misc": 295, "titl": 295, "librari": [295, 296, 298, 301], "author": [295, 300], "anna": 295, "http": [295, 299, 302], "github": [295, 299], "com": [295, 299, 302], "gramaziokohl": 295, "year": 295, "2022": 295, "2023": 295, "doi": 295, "10": [295, 299], "5281": 295, "zenodo": 295, "7934267": 295, "url": 295, "present": [296, 308], "concept": [296, 301], "There": [296, 304, 308, 309, 312], "wai": 296, "run": [296, 298], "python": [296, 298, 299, 301], "environ": [296, 298, 299, 305], "session": 296, "text": 296, "editor": 296, "sublim": 296, "studio": 296, "eclips": 296, "blender": 296, "assembli": [297, 298, 301, 305, 307, 308, 309, 310, 312], "timberassembli": 297, "worldxi": 297, "depth": [297, 308], "geometry_typ": 297, "add_beam": 297, "packag": [298, 299, 302], "written": 298, "ecosystem": 298, "rhinocero": 298, "3d": 298, "plug": 298, "activ": [298, 299, 303, 305, 311], "being": 298, "continu": 298, "At": 298, "stage": 298, "encompass": 298, "fast": 298, "intuit": 298, "custom": [298, 304], "entiti": 298, "semant": 298, "futur": 298, "expand": 298, "entail": [298, 304], "interfac": 298, "analysi": 298, "softwar": [298, 300], "specialist": 298, "built": [298, 301], "upon": 298, "framework": 298, "basic": 298, "like": [298, 301, 303], "complex": [298, 308], "resolv": 298, "backend": 298, "rhinocommon": 298, "sdk": 298, "handl": 298, "opencascad": 298, "via": 298, "occ": 298, "introduct": 298, "instal": 298, "api": [298, 301], "frenchridgelapjoint": 298, "lhalflapjoint": 298, "lmiterjoint": 298, "thalflapjoint": 298, "xhalflapjoint": 298, "find_neighboring_beam": 298, "btlxprocess": [298, 302], "btlxfrenchridgelap": 298, "lbuttfactori": 298, "tbuttfactori": 298, "lmiterfactori": 298, "frenchridgefactori": 298, "simplesequencegener": 298, "jointdefinit": 298, "categoryrul": 298, "topologyrul": 298, "directrul": 298, "featuredefinit": 298, "debuginfom": 298, "workflow": [298, 301, 304, 305], "show": [298, 301, 303], "util": [298, 301], "contribut": [298, 301], "licens": 298, "cite": 298, "n": 299, "myenvnam": 299, "ye": 299, "7": 299, "m": 299, "compas_rhino": 299, "v7": 299, "latest": 299, "fork": 299, "repositori": 299, "clone": 299, "git": 299, "yourgithub_usernam": 299, "cd": 299, "edit": 299, "mode": 299, "pip": 299, "dev": 299, "txt": 299, "compil": 299, "invok": 299, "ghuser": 299, "mit": 300, "copyright": 300, "c": 300, "2020": 300, "02": 300, "17": 300, "permiss": 300, "herebi": 300, "grant": 300, "free": 300, "charg": 300, "person": 300, "obtain": 300, "document": [300, 302, 304, 305, 311], "deal": 300, "restrict": 300, "limit": [300, 308], "right": 300, "merg": 300, "publish": 300, "distribut": 300, "sublicens": 300, "sell": 300, "permit": 300, "whom": 300, "furnish": 300, "subject": 300, "follow": [300, 301, 302, 305, 308], "condit": 300, "abov": [300, 308], "notic": 300, "substanti": 300, "portion": 300, "THE": 300, "AS": 300, "warranti": 300, "OF": 300, "kind": 300, "OR": 300, "impli": [300, 303], "BUT": 300, "NOT": 300, "TO": 300, "merchant": 300, "fit": 300, "FOR": 300, "particular": 300, "purpos": 300, "AND": 300, "noninfring": 300, "IN": 300, "NO": 300, "event": 300, "holder": 300, "BE": 300, "liabl": 300, "claim": 300, "damag": 300, "liabil": 300, "action": 300, "contract": 300, "tort": 300, "aris": 300, "out": 300, "WITH": 300, "easi": 301, "autom": 301, "bake": 301, "textur": [301, 311], "render": [301, 311], "boolean": [301, 303, 307], "style": 301, "planar": [301, 308], "might": 301, "componen": 301, "detail": 301, "overal": 301, "idea": 301, "how": [301, 308, 312], "Then": 301, "explain": 301, "requr": 302, "found": 302, "design2machin": 302, "btlx_2_1_0": 302, "pdf": 302, "process_param": 302, "btlxjoint": 302, "__init__": 302, "py": 302, "mind": 302, "definit": [302, 303], "compos": 303, "oper": [303, 307], "mai": [303, 304], "computation": 303, "expens": 303, "disabl": 303, "creategeometri": 303, "jointsrul": 303, "maxdist": 303, "max": 303, "visualis": [303, 308], "debuginfo": 303, "case": 303, "showassembli": 303, "help": [303, 308], "showfeatureerror": [303, 310], "showjoiningerror": [303, 310], "intend": [304, 305], "hybrid": 304, "encod": 304, "concaten": 304, "colon": 304, "separ": 304, "entri": 304, "underscor": 304, "_": 304, "attr1nam": 304, "attr1value_attr2nam": 304, "attr2valu": 304, "four": [304, 308], "standard": 304, "zvector": [304, 305], "setstandardattribut": 304, "write": [304, 305], "readstandardattribut": 304, "read": 304, "checkstandardattribut": 304, "correctli": 304, "miss": 304, "user": 304, "later": [304, 305], "filter": 304, "criteria": 304, "These": 304, "deleteattribut": 304, "setcustomattribut": 304, "readallattribut": 304, "linear": 305, "straight": 305, "rafter": 305, "joist": 305, "linecurv": 305, "referenc": 305, "latter": 305, "drawn": 305, "around": 305, "li": [305, 311], "sai": 305, "perpendicular": 305, "cannot": 305, "vertic": [305, 308], "convent": 305, "updaterefobj": 305, "size": [305, 311], "onc": 305, "decomposebeam": 305, "extract": [305, 310], "centrelin": 305, "findbeambyrhinogeometri": 305, "curv": 305, "demo": 306, "brepsubtractionfeatur": 307, "brepdrillholefeatur": 307, "trimfeatur": 307, "ly": 307, "three": [308, 309, 312], "corner": 308, "meet": 308, "sever": 308, "half": 308, "shorten": 308, "clean": 308, "smallbeambutt": 308, "modifycross": 308, "flush": 308, "rejecti": 308, "upper": 308, "overlap": 308, "lower": [308, 309], "fliplapsid": 308, "cutplanebia": 308, "fulli": 308, "unlik": 308, "made": 308, "centr": 308, "keep": 308, "secur": 308, "prevent": 308, "tilt": 308, "sequenti": 308, "third": 308, "outer": 308, "cutoff": 308, "veri": 308, "acut": 308, "tip": 308, "beak": 308, "remain": 308, "unchang": 308, "gap": 308, "crate": 308, "halflap": [308, 309], "null": 308, "nulljoint": 308, "situat": 308, "summaris": 308, "final": [308, 312], "level": 309, "hereaft": 309, "lowest": 309, "highest": 309, "topolog": 309, "entir": 309, "recognis": 309, "jointopt": 309, "cata": 309, "catb": 309, "select": 309, "By": [309, 312], "mainbeam": 309, "secondarybeam": 309, "preview": 310, "showbeamfac": 310, "showbeamindex": 310, "global": 310, "showjointtyp": 310, "showtopologytyp": 310, "bakewithboxmap": 311, "layer": 311, "desir": 311, "random": 311, "deviat": 311, "mapsiz": 311, "serv": 311, "adjust": 311, "imag": 311, "ratio": 311, "bitmap": 311, "care": 312, "overwrit": 312}, "objects": {"compas_timber.connections": [[8, 0, 1, "", "BeamJoinningError"], [9, 1, 1, "", "ConnectionSolver"], [12, 1, 1, "", "FrenchRidgeLapJoint"], [27, 1, 1, "", "Joint"], [41, 1, 1, "", "JointTopology"], [43, 1, 1, "", "LButtJoint"], [64, 1, 1, "", "LHalfLapJoint"], [80, 1, 1, "", "LMiterJoint"], [95, 1, 1, "", "LapJoint"], [111, 1, 1, "", "TButtJoint"], [131, 1, 1, "", "THalfLapJoint"], [147, 1, 1, "", "XHalfLapJoint"], [163, 3, 1, "", "find_neighboring_beams"]], "compas_timber.connections.ConnectionSolver": [[10, 2, 1, "", "find_intersecting_pairs"], [11, 2, 1, "", "find_topology"]], "compas_timber.connections.FrenchRidgeLapJoint": [[13, 2, 1, "", "ToString"], [14, 2, 1, "", "add_features"], [15, 2, 1, "", "check_geometry"], [16, 2, 1, "", "copy"], [17, 2, 1, "", "create"], [18, 2, 1, "", "from_json"], [19, 2, 1, "", "from_jsonstring"], [20, 2, 1, "", "get_face_most_ortho_to_beam"], [21, 2, 1, "", "get_face_most_towards_beam"], [22, 2, 1, "", "restore_beams_from_keys"], [23, 2, 1, "", "sha256"], [24, 2, 1, "", "to_json"], [25, 2, 1, "", "to_jsonstring"], [26, 2, 1, "", "validate_data"]], "compas_timber.connections.Joint": [[28, 2, 1, "", "ToString"], [29, 2, 1, "", "add_features"], [30, 2, 1, "", "copy"], [31, 2, 1, "", "create"], [32, 2, 1, "", "from_json"], [33, 2, 1, "", "from_jsonstring"], [34, 2, 1, "", "get_face_most_ortho_to_beam"], [35, 2, 1, "", "get_face_most_towards_beam"], [36, 2, 1, "", "restore_beams_from_keys"], [37, 2, 1, "", "sha256"], [38, 2, 1, "", "to_json"], [39, 2, 1, "", "to_jsonstring"], [40, 2, 1, "", "validate_data"]], "compas_timber.connections.JointTopology": [[42, 2, 1, "", "get_name"]], "compas_timber.connections.LButtJoint": [[44, 2, 1, "", "ToString"], [45, 2, 1, "", "add_features"], [46, 2, 1, "", "back_surface_main"], [47, 2, 1, "", "calc_params_birdsmouth"], [48, 2, 1, "", "copy"], [49, 2, 1, "", "create"], [50, 2, 1, "", "from_json"], [51, 2, 1, "", "from_jsonstring"], [52, 2, 1, "", "front_back_surface_main"], [53, 2, 1, "", "get_cross_cutting_plane"], [54, 2, 1, "", "get_face_most_ortho_to_beam"], [55, 2, 1, "", "get_face_most_towards_beam"], [56, 2, 1, "", "get_main_cutting_plane"], [57, 2, 1, "", "restore_beams_from_keys"], [58, 2, 1, "", "sha256"], [59, 2, 1, "", "side_surfaces_cross"], [60, 2, 1, "", "subtraction_volume"], [61, 2, 1, "", "to_json"], [62, 2, 1, "", "to_jsonstring"], [63, 2, 1, "", "validate_data"]], "compas_timber.connections.LHalfLapJoint": [[65, 2, 1, "", "ToString"], [66, 2, 1, "", "add_features"], [67, 2, 1, "", "copy"], [68, 2, 1, "", "create"], [69, 2, 1, "", "from_json"], [70, 2, 1, "", "from_jsonstring"], [71, 2, 1, "", "get_cross_cutting_frame"], [72, 2, 1, "", "get_face_most_ortho_to_beam"], [73, 2, 1, "", "get_face_most_towards_beam"], [74, 2, 1, "", "get_main_cutting_frame"], [75, 2, 1, "", "restore_beams_from_keys"], [76, 2, 1, "", "sha256"], [77, 2, 1, "", "to_json"], [78, 2, 1, "", "to_jsonstring"], [79, 2, 1, "", "validate_data"]], "compas_timber.connections.LMiterJoint": [[81, 2, 1, "", "ToString"], [82, 2, 1, "", "add_features"], [83, 2, 1, "", "copy"], [84, 2, 1, "", "create"], [85, 2, 1, "", "from_json"], [86, 2, 1, "", "from_jsonstring"], [87, 2, 1, "", "get_cutting_planes"], [88, 2, 1, "", "get_face_most_ortho_to_beam"], [89, 2, 1, "", "get_face_most_towards_beam"], [90, 2, 1, "", "restore_beams_from_keys"], [91, 2, 1, "", "sha256"], [92, 2, 1, "", "to_json"], [93, 2, 1, "", "to_jsonstring"], [94, 2, 1, "", "validate_data"]], "compas_timber.connections.LapJoint": [[96, 2, 1, "", "ToString"], [97, 2, 1, "", "add_features"], [98, 2, 1, "", "copy"], [99, 2, 1, "", "create"], [100, 2, 1, "", "from_json"], [101, 2, 1, "", "from_jsonstring"], [102, 2, 1, "", "get_cross_cutting_frame"], [103, 2, 1, "", "get_face_most_ortho_to_beam"], [104, 2, 1, "", "get_face_most_towards_beam"], [105, 2, 1, "", "get_main_cutting_frame"], [106, 2, 1, "", "restore_beams_from_keys"], [107, 2, 1, "", "sha256"], [108, 2, 1, "", "to_json"], [109, 2, 1, "", "to_jsonstring"], [110, 2, 1, "", "validate_data"]], "compas_timber.connections.TButtJoint": [[112, 2, 1, "", "ToString"], [113, 2, 1, "", "add_features"], [114, 2, 1, "", "back_surface_main"], [115, 2, 1, "", "calc_params_birdsmouth"], [116, 2, 1, "", "copy"], [117, 2, 1, "", "create"], [118, 2, 1, "", "from_json"], [119, 2, 1, "", "from_jsonstring"], [120, 2, 1, "", "front_back_surface_main"], [121, 2, 1, "", "get_face_most_ortho_to_beam"], [122, 2, 1, "", "get_face_most_towards_beam"], [123, 2, 1, "", "get_main_cutting_plane"], [124, 2, 1, "", "restore_beams_from_keys"], [125, 2, 1, "", "sha256"], [126, 2, 1, "", "side_surfaces_cross"], [127, 2, 1, "", "subtraction_volume"], [128, 2, 1, "", "to_json"], [129, 2, 1, "", "to_jsonstring"], [130, 2, 1, "", "validate_data"]], "compas_timber.connections.THalfLapJoint": [[132, 2, 1, "", "ToString"], [133, 2, 1, "", "add_features"], [134, 2, 1, "", "copy"], [135, 2, 1, "", "create"], [136, 2, 1, "", "from_json"], [137, 2, 1, "", "from_jsonstring"], [138, 2, 1, "", "get_cross_cutting_frame"], [139, 2, 1, "", "get_face_most_ortho_to_beam"], [140, 2, 1, "", "get_face_most_towards_beam"], [141, 2, 1, "", "get_main_cutting_frame"], [142, 2, 1, "", "restore_beams_from_keys"], [143, 2, 1, "", "sha256"], [144, 2, 1, "", "to_json"], [145, 2, 1, "", "to_jsonstring"], [146, 2, 1, "", "validate_data"]], "compas_timber.connections.XHalfLapJoint": [[148, 2, 1, "", "ToString"], [149, 2, 1, "", "add_features"], [150, 2, 1, "", "copy"], [151, 2, 1, "", "create"], [152, 2, 1, "", "from_json"], [153, 2, 1, "", "from_jsonstring"], [154, 2, 1, "", "get_cross_cutting_frame"], [155, 2, 1, "", "get_face_most_ortho_to_beam"], [156, 2, 1, "", "get_face_most_towards_beam"], [157, 2, 1, "", "get_main_cutting_frame"], [158, 2, 1, "", "restore_beams_from_keys"], [159, 2, 1, "", "sha256"], [160, 2, 1, "", "to_json"], [161, 2, 1, "", "to_jsonstring"], [162, 2, 1, "", "validate_data"]], "compas_timber.elements": [[164, 1, 1, "", "Beam"]], "compas_timber.elements.Beam": [[165, 2, 1, "", "ToString"], [166, 2, 1, "", "add_blank_extension"], [167, 2, 1, "", "add_feature"], [168, 2, 1, "", "add_features"], [169, 2, 1, "", "compute_aabb"], [170, 2, 1, "", "compute_collision_mesh"], [171, 2, 1, "", "compute_geometry"], [172, 2, 1, "", "compute_obb"], [173, 2, 1, "", "compute_worldtransformation"], [174, 2, 1, "", "copy"], [175, 2, 1, "", "endpoint_closest_to_point"], [176, 2, 1, "", "extension_to_plane"], [177, 2, 1, "", "from_centerline"], [178, 2, 1, "", "from_endpoints"], [179, 2, 1, "", "from_json"], [180, 2, 1, "", "from_jsonstring"], [181, 2, 1, "", "remove_blank_extension"], [182, 2, 1, "", "remove_features"], [183, 2, 1, "", "sha256"], [184, 2, 1, "", "to_json"], [185, 2, 1, "", "to_jsonstring"], [186, 2, 1, "", "transform"], [187, 2, 1, "", "transformed"], [188, 2, 1, "", "validate_data"]], "compas_timber.fabrication": [[189, 1, 1, "", "BTLx"], [193, 1, 1, "", "BTLxFrenchRidgeLap"], [197, 1, 1, "", "BTLxJackCut"], [200, 1, 1, "", "BTLxProcess"], [201, 1, 1, "", "FrenchRidgeFactory"], [203, 1, 1, "", "LButtFactory"], [205, 1, 1, "", "LMiterFactory"], [207, 1, 1, "", "TButtFactory"]], "compas_timber.fabrication.BTLx": [[190, 2, 1, "", "btlx_string"], [191, 2, 1, "", "process_model"], [192, 2, 1, "", "register_joint"]], "compas_timber.fabrication.BTLxFrenchRidgeLap": [[194, 2, 1, "", "create_process"], [195, 2, 1, "", "get_params"], [196, 2, 1, "", "process_joints"]], "compas_timber.fabrication.BTLxJackCut": [[198, 2, 1, "", "create_process"], [199, 2, 1, "", "generate_process"]], "compas_timber.fabrication.FrenchRidgeFactory": [[202, 2, 1, "", "apply_processings"]], "compas_timber.fabrication.LButtFactory": [[204, 2, 1, "", "apply_processings"]], "compas_timber.fabrication.LMiterFactory": [[206, 2, 1, "", "apply_processings"]], "compas_timber.fabrication.TButtFactory": [[208, 2, 1, "", "apply_processings"]], "compas_timber.ghpython": [[209, 1, 1, "", "CategoryRule"], [213, 1, 1, "", "DebugInfomation"], [217, 1, 1, "", "DirectRule"], [220, 1, 1, "", "FeatureDefinition"], [222, 1, 1, "", "JointDefinition"], [226, 1, 1, "", "TopologyRule"]], "compas_timber.ghpython.CategoryRule": [[210, 2, 1, "", "ToString"], [211, 2, 1, "", "comply"], [212, 2, 1, "", "reorder"]], "compas_timber.ghpython.DebugInfomation": [[214, 2, 1, "", "ToString"], [215, 2, 1, "", "add_feature_error"], [216, 2, 1, "", "add_joint_error"]], "compas_timber.ghpython.DirectRule": [[218, 2, 1, "", "ToString"], [219, 2, 1, "", "comply"]], "compas_timber.ghpython.FeatureDefinition": [[221, 2, 1, "", "ToString"]], "compas_timber.ghpython.JointDefinition": [[223, 2, 1, "", "ToString"], [224, 2, 1, "", "is_identical"], [225, 2, 1, "", "match"]], "compas_timber.ghpython.TopologyRule": [[227, 2, 1, "", "ToString"], [228, 2, 1, "", "comply"]], "compas_timber.model": [[229, 1, 1, "", "TimberModel"]], "compas_timber.model.TimberModel": [[230, 2, 1, "", "ToString"], [231, 2, 1, "", "add_beam"], [232, 2, 1, "", "add_element"], [233, 2, 1, "", "add_elements"], [234, 2, 1, "", "add_group"], [235, 2, 1, "", "add_interaction"], [236, 2, 1, "", "add_joint"], [237, 2, 1, "", "add_material"], [238, 2, 1, "", "add_wall"], [239, 2, 1, "", "assign_material"], [240, 2, 1, "", "beam_by_guid"], [241, 2, 1, "", "compute_aabb"], [242, 2, 1, "", "compute_obb"], [243, 2, 1, "", "copy"], [244, 2, 1, "", "elements"], [245, 2, 1, "", "elements_connected_by"], [246, 2, 1, "", "from_json"], [247, 2, 1, "", "from_jsonstring"], [248, 2, 1, "", "has_element"], [249, 2, 1, "", "has_interaction"], [250, 2, 1, "", "has_material"], [251, 2, 1, "", "interactions"], [252, 2, 1, "", "materials"], [253, 2, 1, "", "remove_element"], [254, 2, 1, "", "remove_interaction"], [255, 2, 1, "", "remove_joint"], [256, 2, 1, "", "rotate"], [257, 2, 1, "", "rotated"], [258, 2, 1, "", "scale"], [259, 2, 1, "", "scaled"], [260, 2, 1, "", "set_topologies"], [261, 2, 1, "", "sha256"], [262, 2, 1, "", "to_json"], [263, 2, 1, "", "to_jsonstring"], [264, 2, 1, "", "transform"], [265, 2, 1, "", "transform_numpy"], [266, 2, 1, "", "transformed"], [267, 2, 1, "", "transformed_numpy"], [268, 2, 1, "", "translate"], [269, 2, 1, "", "translated"], [270, 2, 1, "", "validate_data"]], "compas_timber.planning": [[271, 1, 1, "", "Actor"], [273, 1, 1, "", "BuildingPlan"], [283, 1, 1, "", "SimpleSequenceGenerator"], [284, 1, 1, "", "Step"]], "compas_timber.planning.Actor": [[272, 2, 1, "", "get_name"]], "compas_timber.planning.BuildingPlan": [[274, 2, 1, "", "ToString"], [275, 2, 1, "", "add_step"], [276, 2, 1, "", "copy"], [277, 2, 1, "", "from_json"], [278, 2, 1, "", "from_jsonstring"], [279, 2, 1, "", "sha256"], [280, 2, 1, "", "to_json"], [281, 2, 1, "", "to_jsonstring"], [282, 2, 1, "", "validate_data"]], "compas_timber.planning.Step": [[285, 2, 1, "", "ToString"], [286, 2, 1, "", "copy"], [287, 2, 1, "", "from_json"], [288, 2, 1, "", "from_jsonstring"], [289, 2, 1, "", "sha256"], [290, 2, 1, "", "to_json"], [291, 2, 1, "", "to_jsonstring"], [292, 2, 1, "", "transform"], [293, 2, 1, "", "validate_data"]], "compas_timber.rhino": [[294, 3, 1, "", "find_neighboring_beams"]]}, "objtypes": {"0": "py:exception", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "exception", "Python exception"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "packag": 0, "compas_timb": [1, 2, 3, 4, 5, 6], "connect": 1, "class": [1, 2, 3, 4, 5, 6], "function": 1, "except": 1, "element": [2, 244], "fabric": 3, "ghpython": 4, "model": 5, "plan": 6, "rhino": 7, "plugin": [7, 301], "beamjoinningerror": 8, "connectionsolv": [9, 10, 11], "find_intersecting_pair": 10, "find_topologi": 11, "frenchridgelapjoint": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "tostr": [13, 28, 44, 65, 81, 96, 112, 132, 148, 165, 210, 214, 218, 221, 223, 227, 230, 274, 285], "add_featur": [14, 29, 45, 66, 82, 97, 113, 133, 149, 167, 168], "check_geometri": 15, "copi": [16, 30, 48, 67, 83, 98, 116, 134, 150, 174, 243, 276, 286], "creat": [17, 31, 49, 68, 84, 99, 117, 135, 151, 297], "from_json": [18, 32, 50, 69, 85, 100, 118, 136, 152, 179, 246, 277, 287], "from_jsonstr": [19, 33, 51, 70, 86, 101, 119, 137, 153, 180, 247, 278, 288], "get_face_most_ortho_to_beam": [20, 34, 54, 72, 88, 103, 121, 139, 155], "get_face_most_towards_beam": [21, 35, 55, 73, 89, 104, 122, 140, 156], "restore_beams_from_kei": [22, 36, 57, 75, 90, 106, 124, 142, 158], "sha256": [23, 37, 58, 76, 91, 107, 125, 143, 159, 183, 261, 279, 289], "to_json": [24, 38, 61, 77, 92, 108, 128, 144, 160, 184, 262, 280, 290], "to_jsonstr": [25, 39, 62, 78, 93, 109, 129, 145, 161, 185, 263, 281, 291], "validate_data": [26, 40, 63, 79, 94, 110, 130, 146, 162, 188, 270, 282, 293], "joint": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 297, 308, 309], "jointtopologi": [41, 42], "get_nam": [42, 272], "lbuttjoint": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "back_surface_main": [46, 114], "calc_params_birdsmouth": [47, 115], "paramet": [47, 115], "front_back_surface_main": [52, 120], "get_cross_cutting_plan": 53, "get_main_cutting_plan": [56, 123], "side_surfaces_cross": [59, 126], "subtraction_volum": [60, 127], "lhalflapjoint": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "get_cross_cutting_fram": [71, 102, 138, 154], "get_main_cutting_fram": [74, 105, 141, 157], "lmiterjoint": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "get_cutting_plan": 87, "lapjoint": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "tbuttjoint": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "thalflapjoint": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "xhalflapjoint": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "find_neighboring_beam": [163, 294], "beam": [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 305], "add_blank_extens": 166, "compute_aabb": [169, 241], "compute_collision_mesh": 170, "compute_geometri": 171, "compute_obb": [172, 242], "compute_worldtransform": 173, "endpoint_closest_to_point": 175, "extension_to_plan": 176, "from_centerlin": 177, "from_endpoint": 178, "remove_blank_extens": 181, "remove_featur": 182, "transform": [186, 187, 264, 266, 292], "btlx": [189, 190, 191, 192, 302], "btlx_string": 190, "process_model": 191, "register_joint": 192, "btlxfrenchridgelap": [193, 194, 195, 196], "create_process": [194, 198], "get_param": 195, "process_joint": 196, "btlxjackcut": [197, 198, 199], "generate_process": 199, "btlxprocess": 200, "frenchridgefactori": [201, 202], "apply_process": [202, 204, 206, 208], "lbuttfactori": [203, 204], "lmiterfactori": [205, 206], "tbuttfactori": [207, 208], "categoryrul": [209, 210, 211, 212], "compli": [211, 219, 228], "reorder": 212, "debuginfom": [213, 214, 215, 216], "add_feature_error": 215, "add_joint_error": 216, "directrul": [217, 218, 219], "featuredefinit": [220, 221], "jointdefinit": [222, 223, 224, 225], "is_ident": 224, "match": 225, "topologyrul": [226, 227, 228], "timbermodel": [229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270], "add_beam": 231, "add_el": [232, 233], "add_group": 234, "add_interact": 235, "add_joint": 236, "add_materi": 237, "add_wal": 238, "assign_materi": 239, "beam_by_guid": 240, "elements_connected_bi": 245, "has_el": 248, "has_interact": 249, "has_materi": 250, "interact": 251, "materi": 252, "remove_el": 253, "remove_interact": 254, "remove_joint": 255, "rotat": [256, 257], "scale": [258, 259], "set_topologi": 260, "transform_numpi": 265, "transformed_numpi": 267, "translat": [268, 269], "actor": [271, 272], "buildingplan": [273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "add_step": 275, "simplesequencegener": 283, "step": [284, 285, 286, 287, 288, 289, 290, 291, 292, 293], "cite": 295, "exampl": [296, 306], "timber": [296, 298], "assembli": [296, 303], "compa": 298, "document": 298, "depend": 298, "tabl": [298, 308], "content": 298, "indic": 298, "instal": 299, "stabl": 299, "conda": 299, "develop": 299, "licens": 300, "grasshopp": 301, "contribut": 302, "guid": 302, "attribut": 304, "featur": 307, "topologi": 308, "type": [308, 310], "l": 308, "t": 308, "x": 308, "summari": 308, "rule": 309, "show": 310, "visualis": 310, "geometri": 310, "error": 310, "util": 311, "bake": 311, "boxmap": 311, "workflow": 312}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Packages": [[0, "packages"]], "compas_timber.connections": [[1, "compas-timber-connections"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"]], "Functions": [[1, "functions"]], "Exceptions": [[1, "exceptions"]], "compas_timber.elements": [[2, "compas-timber-elements"]], "compas_timber.fabrication": [[3, "compas-timber-fabrication"]], "compas_timber.ghpython": [[4, "compas-timber-ghpython"]], "compas_timber.model": [[5, "compas-timber-model"]], "compas_timber.planning": [[6, "compas-timber-planning"]], "rhino": [[7, "rhino"]], "Plugins": [[7, "plugins"]], "BeamJoinningError": [[8, "beamjoinningerror"]], "ConnectionSolver": [[9, "connectionsolver"]], "ConnectionSolver.find_intersecting_pairs": [[10, "connectionsolver-find-intersecting-pairs"]], "ConnectionSolver.find_topology": [[11, "connectionsolver-find-topology"]], "FrenchRidgeLapJoint": [[12, "frenchridgelapjoint"]], "FrenchRidgeLapJoint.ToString": [[13, "frenchridgelapjoint-tostring"]], "FrenchRidgeLapJoint.add_features": [[14, "frenchridgelapjoint-add-features"]], "FrenchRidgeLapJoint.check_geometry": [[15, "frenchridgelapjoint-check-geometry"]], "FrenchRidgeLapJoint.copy": [[16, "frenchridgelapjoint-copy"]], "FrenchRidgeLapJoint.create": [[17, "frenchridgelapjoint-create"]], "FrenchRidgeLapJoint.from_json": [[18, "frenchridgelapjoint-from-json"]], "FrenchRidgeLapJoint.from_jsonstring": [[19, "frenchridgelapjoint-from-jsonstring"]], "FrenchRidgeLapJoint.get_face_most_ortho_to_beam": [[20, "frenchridgelapjoint-get-face-most-ortho-to-beam"]], "FrenchRidgeLapJoint.get_face_most_towards_beam": [[21, "frenchridgelapjoint-get-face-most-towards-beam"]], "FrenchRidgeLapJoint.restore_beams_from_keys": [[22, "frenchridgelapjoint-restore-beams-from-keys"]], "FrenchRidgeLapJoint.sha256": [[23, "frenchridgelapjoint-sha256"]], "FrenchRidgeLapJoint.to_json": [[24, "frenchridgelapjoint-to-json"]], "FrenchRidgeLapJoint.to_jsonstring": [[25, "frenchridgelapjoint-to-jsonstring"]], "FrenchRidgeLapJoint.validate_data": [[26, "frenchridgelapjoint-validate-data"]], "Joint": [[27, "joint"]], "Joint.ToString": [[28, "joint-tostring"]], "Joint.add_features": [[29, "joint-add-features"]], "Joint.copy": [[30, "joint-copy"]], "Joint.create": [[31, "joint-create"]], "Joint.from_json": [[32, "joint-from-json"]], "Joint.from_jsonstring": [[33, "joint-from-jsonstring"]], "Joint.get_face_most_ortho_to_beam": [[34, "joint-get-face-most-ortho-to-beam"]], "Joint.get_face_most_towards_beam": [[35, "joint-get-face-most-towards-beam"]], "Joint.restore_beams_from_keys": [[36, "joint-restore-beams-from-keys"]], "Joint.sha256": [[37, "joint-sha256"]], "Joint.to_json": [[38, "joint-to-json"]], "Joint.to_jsonstring": [[39, "joint-to-jsonstring"]], "Joint.validate_data": [[40, "joint-validate-data"]], "JointTopology": [[41, "jointtopology"]], "JointTopology.get_name": [[42, "jointtopology-get-name"]], "LButtJoint": [[43, "lbuttjoint"]], "LButtJoint.ToString": [[44, "lbuttjoint-tostring"]], "LButtJoint.add_features": [[45, "lbuttjoint-add-features"]], "LButtJoint.back_surface_main": [[46, "lbuttjoint-back-surface-main"]], "LButtJoint.calc_params_birdsmouth": [[47, "lbuttjoint-calc-params-birdsmouth"]], "Parameters:": [[47, "parameters"], [115, "parameters"]], "LButtJoint.copy": [[48, "lbuttjoint-copy"]], "LButtJoint.create": [[49, "lbuttjoint-create"]], "LButtJoint.from_json": [[50, "lbuttjoint-from-json"]], "LButtJoint.from_jsonstring": [[51, "lbuttjoint-from-jsonstring"]], "LButtJoint.front_back_surface_main": [[52, "lbuttjoint-front-back-surface-main"]], "LButtJoint.get_cross_cutting_plane": [[53, "lbuttjoint-get-cross-cutting-plane"]], "LButtJoint.get_face_most_ortho_to_beam": [[54, "lbuttjoint-get-face-most-ortho-to-beam"]], "LButtJoint.get_face_most_towards_beam": [[55, "lbuttjoint-get-face-most-towards-beam"]], "LButtJoint.get_main_cutting_plane": [[56, "lbuttjoint-get-main-cutting-plane"]], "LButtJoint.restore_beams_from_keys": [[57, "lbuttjoint-restore-beams-from-keys"]], "LButtJoint.sha256": [[58, "lbuttjoint-sha256"]], "LButtJoint.side_surfaces_cross": [[59, "lbuttjoint-side-surfaces-cross"]], "LButtJoint.subtraction_volume": [[60, "lbuttjoint-subtraction-volume"]], "LButtJoint.to_json": [[61, "lbuttjoint-to-json"]], "LButtJoint.to_jsonstring": [[62, "lbuttjoint-to-jsonstring"]], "LButtJoint.validate_data": [[63, "lbuttjoint-validate-data"]], "LHalfLapJoint": [[64, "lhalflapjoint"]], "LHalfLapJoint.ToString": [[65, "lhalflapjoint-tostring"]], "LHalfLapJoint.add_features": [[66, "lhalflapjoint-add-features"]], "LHalfLapJoint.copy": [[67, "lhalflapjoint-copy"]], "LHalfLapJoint.create": [[68, "lhalflapjoint-create"]], "LHalfLapJoint.from_json": [[69, "lhalflapjoint-from-json"]], "LHalfLapJoint.from_jsonstring": [[70, "lhalflapjoint-from-jsonstring"]], "LHalfLapJoint.get_cross_cutting_frame": [[71, "lhalflapjoint-get-cross-cutting-frame"]], "LHalfLapJoint.get_face_most_ortho_to_beam": [[72, "lhalflapjoint-get-face-most-ortho-to-beam"]], "LHalfLapJoint.get_face_most_towards_beam": [[73, "lhalflapjoint-get-face-most-towards-beam"]], "LHalfLapJoint.get_main_cutting_frame": [[74, "lhalflapjoint-get-main-cutting-frame"]], "LHalfLapJoint.restore_beams_from_keys": [[75, "lhalflapjoint-restore-beams-from-keys"]], "LHalfLapJoint.sha256": [[76, "lhalflapjoint-sha256"]], "LHalfLapJoint.to_json": [[77, "lhalflapjoint-to-json"]], "LHalfLapJoint.to_jsonstring": [[78, "lhalflapjoint-to-jsonstring"]], "LHalfLapJoint.validate_data": [[79, "lhalflapjoint-validate-data"]], "LMiterJoint": [[80, "lmiterjoint"]], "LMiterJoint.ToString": [[81, "lmiterjoint-tostring"]], "LMiterJoint.add_features": [[82, "lmiterjoint-add-features"]], "LMiterJoint.copy": [[83, "lmiterjoint-copy"]], "LMiterJoint.create": [[84, "lmiterjoint-create"]], "LMiterJoint.from_json": [[85, "lmiterjoint-from-json"]], "LMiterJoint.from_jsonstring": [[86, "lmiterjoint-from-jsonstring"]], "LMiterJoint.get_cutting_planes": [[87, "lmiterjoint-get-cutting-planes"]], "LMiterJoint.get_face_most_ortho_to_beam": [[88, "lmiterjoint-get-face-most-ortho-to-beam"]], "LMiterJoint.get_face_most_towards_beam": [[89, "lmiterjoint-get-face-most-towards-beam"]], "LMiterJoint.restore_beams_from_keys": [[90, "lmiterjoint-restore-beams-from-keys"]], "LMiterJoint.sha256": [[91, "lmiterjoint-sha256"]], "LMiterJoint.to_json": [[92, "lmiterjoint-to-json"]], "LMiterJoint.to_jsonstring": [[93, "lmiterjoint-to-jsonstring"]], "LMiterJoint.validate_data": [[94, "lmiterjoint-validate-data"]], "LapJoint": [[95, "lapjoint"]], "LapJoint.ToString": [[96, "lapjoint-tostring"]], "LapJoint.add_features": [[97, "lapjoint-add-features"]], "LapJoint.copy": [[98, "lapjoint-copy"]], "LapJoint.create": [[99, "lapjoint-create"]], "LapJoint.from_json": [[100, "lapjoint-from-json"]], "LapJoint.from_jsonstring": [[101, "lapjoint-from-jsonstring"]], "LapJoint.get_cross_cutting_frame": [[102, "lapjoint-get-cross-cutting-frame"]], "LapJoint.get_face_most_ortho_to_beam": [[103, "lapjoint-get-face-most-ortho-to-beam"]], "LapJoint.get_face_most_towards_beam": [[104, "lapjoint-get-face-most-towards-beam"]], "LapJoint.get_main_cutting_frame": [[105, "lapjoint-get-main-cutting-frame"]], "LapJoint.restore_beams_from_keys": [[106, "lapjoint-restore-beams-from-keys"]], "LapJoint.sha256": [[107, "lapjoint-sha256"]], "LapJoint.to_json": [[108, "lapjoint-to-json"]], "LapJoint.to_jsonstring": [[109, "lapjoint-to-jsonstring"]], "LapJoint.validate_data": [[110, "lapjoint-validate-data"]], "TButtJoint": [[111, "tbuttjoint"]], "TButtJoint.ToString": [[112, "tbuttjoint-tostring"]], "TButtJoint.add_features": [[113, "tbuttjoint-add-features"]], "TButtJoint.back_surface_main": [[114, "tbuttjoint-back-surface-main"]], "TButtJoint.calc_params_birdsmouth": [[115, "tbuttjoint-calc-params-birdsmouth"]], "TButtJoint.copy": [[116, "tbuttjoint-copy"]], "TButtJoint.create": [[117, "tbuttjoint-create"]], "TButtJoint.from_json": [[118, "tbuttjoint-from-json"]], "TButtJoint.from_jsonstring": [[119, "tbuttjoint-from-jsonstring"]], "TButtJoint.front_back_surface_main": [[120, "tbuttjoint-front-back-surface-main"]], "TButtJoint.get_face_most_ortho_to_beam": [[121, "tbuttjoint-get-face-most-ortho-to-beam"]], "TButtJoint.get_face_most_towards_beam": [[122, "tbuttjoint-get-face-most-towards-beam"]], "TButtJoint.get_main_cutting_plane": [[123, "tbuttjoint-get-main-cutting-plane"]], "TButtJoint.restore_beams_from_keys": [[124, "tbuttjoint-restore-beams-from-keys"]], "TButtJoint.sha256": [[125, "tbuttjoint-sha256"]], "TButtJoint.side_surfaces_cross": [[126, "tbuttjoint-side-surfaces-cross"]], "TButtJoint.subtraction_volume": [[127, "tbuttjoint-subtraction-volume"]], "TButtJoint.to_json": [[128, "tbuttjoint-to-json"]], "TButtJoint.to_jsonstring": [[129, "tbuttjoint-to-jsonstring"]], "TButtJoint.validate_data": [[130, "tbuttjoint-validate-data"]], "THalfLapJoint": [[131, "thalflapjoint"]], "THalfLapJoint.ToString": [[132, "thalflapjoint-tostring"]], "THalfLapJoint.add_features": [[133, "thalflapjoint-add-features"]], "THalfLapJoint.copy": [[134, "thalflapjoint-copy"]], "THalfLapJoint.create": [[135, "thalflapjoint-create"]], "THalfLapJoint.from_json": [[136, "thalflapjoint-from-json"]], "THalfLapJoint.from_jsonstring": [[137, "thalflapjoint-from-jsonstring"]], "THalfLapJoint.get_cross_cutting_frame": [[138, "thalflapjoint-get-cross-cutting-frame"]], "THalfLapJoint.get_face_most_ortho_to_beam": [[139, "thalflapjoint-get-face-most-ortho-to-beam"]], "THalfLapJoint.get_face_most_towards_beam": [[140, "thalflapjoint-get-face-most-towards-beam"]], "THalfLapJoint.get_main_cutting_frame": [[141, "thalflapjoint-get-main-cutting-frame"]], "THalfLapJoint.restore_beams_from_keys": [[142, "thalflapjoint-restore-beams-from-keys"]], "THalfLapJoint.sha256": [[143, "thalflapjoint-sha256"]], "THalfLapJoint.to_json": [[144, "thalflapjoint-to-json"]], "THalfLapJoint.to_jsonstring": [[145, "thalflapjoint-to-jsonstring"]], "THalfLapJoint.validate_data": [[146, "thalflapjoint-validate-data"]], "XHalfLapJoint": [[147, "xhalflapjoint"]], "XHalfLapJoint.ToString": [[148, "xhalflapjoint-tostring"]], "XHalfLapJoint.add_features": [[149, "xhalflapjoint-add-features"]], "XHalfLapJoint.copy": [[150, "xhalflapjoint-copy"]], "XHalfLapJoint.create": [[151, "xhalflapjoint-create"]], "XHalfLapJoint.from_json": [[152, "xhalflapjoint-from-json"]], "XHalfLapJoint.from_jsonstring": [[153, "xhalflapjoint-from-jsonstring"]], "XHalfLapJoint.get_cross_cutting_frame": [[154, "xhalflapjoint-get-cross-cutting-frame"]], "XHalfLapJoint.get_face_most_ortho_to_beam": [[155, "xhalflapjoint-get-face-most-ortho-to-beam"]], "XHalfLapJoint.get_face_most_towards_beam": [[156, "xhalflapjoint-get-face-most-towards-beam"]], "XHalfLapJoint.get_main_cutting_frame": [[157, "xhalflapjoint-get-main-cutting-frame"]], "XHalfLapJoint.restore_beams_from_keys": [[158, "xhalflapjoint-restore-beams-from-keys"]], "XHalfLapJoint.sha256": [[159, "xhalflapjoint-sha256"]], "XHalfLapJoint.to_json": [[160, "xhalflapjoint-to-json"]], "XHalfLapJoint.to_jsonstring": [[161, "xhalflapjoint-to-jsonstring"]], "XHalfLapJoint.validate_data": [[162, "xhalflapjoint-validate-data"]], "find_neighboring_beams": [[163, "find-neighboring-beams"], [294, "find-neighboring-beams"]], "Beam": [[164, "beam"], [305, "beam"]], "Beam.ToString": [[165, "beam-tostring"]], "Beam.add_blank_extension": [[166, "beam-add-blank-extension"]], "Beam.add_feature": [[167, "beam-add-feature"]], "Beam.add_features": [[168, "beam-add-features"]], "Beam.compute_aabb": [[169, "beam-compute-aabb"]], "Beam.compute_collision_mesh": [[170, "beam-compute-collision-mesh"]], "Beam.compute_geometry": [[171, "beam-compute-geometry"]], "Beam.compute_obb": [[172, "beam-compute-obb"]], "Beam.compute_worldtransformation": [[173, "beam-compute-worldtransformation"]], "Beam.copy": [[174, "beam-copy"]], "Beam.endpoint_closest_to_point": [[175, "beam-endpoint-closest-to-point"]], "Beam.extension_to_plane": [[176, "beam-extension-to-plane"]], "Beam.from_centerline": [[177, "beam-from-centerline"]], "Beam.from_endpoints": [[178, "beam-from-endpoints"]], "Beam.from_json": [[179, "beam-from-json"]], "Beam.from_jsonstring": [[180, "beam-from-jsonstring"]], "Beam.remove_blank_extension": [[181, "beam-remove-blank-extension"]], "Beam.remove_features": [[182, "beam-remove-features"]], "Beam.sha256": [[183, "beam-sha256"]], "Beam.to_json": [[184, "beam-to-json"]], "Beam.to_jsonstring": [[185, "beam-to-jsonstring"]], "Beam.transform": [[186, "beam-transform"]], "Beam.transformed": [[187, "beam-transformed"]], "Beam.validate_data": [[188, "beam-validate-data"]], "BTLx": [[189, "btlx"]], "BTLx.btlx_string": [[190, "btlx-btlx-string"]], "BTLx.process_model": [[191, "btlx-process-model"]], "BTLx.register_joint": [[192, "btlx-register-joint"]], "BTLxFrenchRidgeLap": [[193, "btlxfrenchridgelap"]], "BTLxFrenchRidgeLap.create_process": [[194, "btlxfrenchridgelap-create-process"]], "BTLxFrenchRidgeLap.get_params": [[195, "btlxfrenchridgelap-get-params"]], "BTLxFrenchRidgeLap.process_joints": [[196, "btlxfrenchridgelap-process-joints"]], "BTLxJackCut": [[197, "btlxjackcut"]], "BTLxJackCut.create_process": [[198, "btlxjackcut-create-process"]], "BTLxJackCut.generate_process": [[199, "btlxjackcut-generate-process"]], "BTLxProcess": [[200, "btlxprocess"]], "FrenchRidgeFactory": [[201, "frenchridgefactory"]], "FrenchRidgeFactory.apply_processings": [[202, "frenchridgefactory-apply-processings"]], "LButtFactory": [[203, "lbuttfactory"]], "LButtFactory.apply_processings": [[204, "lbuttfactory-apply-processings"]], "LMiterFactory": [[205, "lmiterfactory"]], "LMiterFactory.apply_processings": [[206, "lmiterfactory-apply-processings"]], "TButtFactory": [[207, "tbuttfactory"]], "TButtFactory.apply_processings": [[208, "tbuttfactory-apply-processings"]], "CategoryRule": [[209, "categoryrule"]], "CategoryRule.ToString": [[210, "categoryrule-tostring"]], "CategoryRule.comply": [[211, "categoryrule-comply"]], "CategoryRule.reorder": [[212, "categoryrule-reorder"]], "DebugInfomation": [[213, "debuginfomation"]], "DebugInfomation.ToString": [[214, "debuginfomation-tostring"]], "DebugInfomation.add_feature_error": [[215, "debuginfomation-add-feature-error"]], "DebugInfomation.add_joint_error": [[216, "debuginfomation-add-joint-error"]], "DirectRule": [[217, "directrule"]], "DirectRule.ToString": [[218, "directrule-tostring"]], "DirectRule.comply": [[219, "directrule-comply"]], "FeatureDefinition": [[220, "featuredefinition"]], "FeatureDefinition.ToString": [[221, "featuredefinition-tostring"]], "JointDefinition": [[222, "jointdefinition"]], "JointDefinition.ToString": [[223, "jointdefinition-tostring"]], "JointDefinition.is_identical": [[224, "jointdefinition-is-identical"]], "JointDefinition.match": [[225, "jointdefinition-match"]], "TopologyRule": [[226, "topologyrule"]], "TopologyRule.ToString": [[227, "topologyrule-tostring"]], "TopologyRule.comply": [[228, "topologyrule-comply"]], "TimberModel": [[229, "timbermodel"]], "TimberModel.ToString": [[230, "timbermodel-tostring"]], "TimberModel.add_beam": [[231, "timbermodel-add-beam"]], "TimberModel.add_element": [[232, "timbermodel-add-element"]], "TimberModel.add_elements": [[233, "timbermodel-add-elements"]], "TimberModel.add_group": [[234, "timbermodel-add-group"]], "TimberModel.add_interaction": [[235, "timbermodel-add-interaction"]], "TimberModel.add_joint": [[236, "timbermodel-add-joint"]], "TimberModel.add_material": [[237, "timbermodel-add-material"]], "TimberModel.add_wall": [[238, "timbermodel-add-wall"]], "TimberModel.assign_material": [[239, "timbermodel-assign-material"]], "TimberModel.beam_by_guid": [[240, "timbermodel-beam-by-guid"]], "TimberModel.compute_aabb": [[241, "timbermodel-compute-aabb"]], "TimberModel.compute_obb": [[242, "timbermodel-compute-obb"]], "TimberModel.copy": [[243, "timbermodel-copy"]], "TimberModel.elements": [[244, "timbermodel-elements"]], "TimberModel.elements_connected_by": [[245, "timbermodel-elements-connected-by"]], "TimberModel.from_json": [[246, "timbermodel-from-json"]], "TimberModel.from_jsonstring": [[247, "timbermodel-from-jsonstring"]], "TimberModel.has_element": [[248, "timbermodel-has-element"]], "TimberModel.has_interaction": [[249, "timbermodel-has-interaction"]], "TimberModel.has_material": [[250, "timbermodel-has-material"]], "TimberModel.interactions": [[251, "timbermodel-interactions"]], "TimberModel.materials": [[252, "timbermodel-materials"]], "TimberModel.remove_element": [[253, "timbermodel-remove-element"]], "TimberModel.remove_interaction": [[254, "timbermodel-remove-interaction"]], "TimberModel.remove_joint": [[255, "timbermodel-remove-joint"]], "TimberModel.rotate": [[256, "timbermodel-rotate"]], "TimberModel.rotated": [[257, "timbermodel-rotated"]], "TimberModel.scale": [[258, "timbermodel-scale"]], "TimberModel.scaled": [[259, "timbermodel-scaled"]], "TimberModel.set_topologies": [[260, "timbermodel-set-topologies"]], "TimberModel.sha256": [[261, "timbermodel-sha256"]], "TimberModel.to_json": [[262, "timbermodel-to-json"]], "TimberModel.to_jsonstring": [[263, "timbermodel-to-jsonstring"]], "TimberModel.transform": [[264, "timbermodel-transform"]], "TimberModel.transform_numpy": [[265, "timbermodel-transform-numpy"]], "TimberModel.transformed": [[266, "timbermodel-transformed"]], "TimberModel.transformed_numpy": [[267, "timbermodel-transformed-numpy"]], "TimberModel.translate": [[268, "timbermodel-translate"]], "TimberModel.translated": [[269, "timbermodel-translated"]], "TimberModel.validate_data": [[270, "timbermodel-validate-data"]], "Actor": [[271, "actor"]], "Actor.get_name": [[272, "actor-get-name"]], "BuildingPlan": [[273, "buildingplan"]], "BuildingPlan.ToString": [[274, "buildingplan-tostring"]], "BuildingPlan.add_step": [[275, "buildingplan-add-step"]], "BuildingPlan.copy": [[276, "buildingplan-copy"]], "BuildingPlan.from_json": [[277, "buildingplan-from-json"]], "BuildingPlan.from_jsonstring": [[278, "buildingplan-from-jsonstring"]], "BuildingPlan.sha256": [[279, "buildingplan-sha256"]], "BuildingPlan.to_json": [[280, "buildingplan-to-json"]], "BuildingPlan.to_jsonstring": [[281, "buildingplan-to-jsonstring"]], "BuildingPlan.validate_data": [[282, "buildingplan-validate-data"]], "SimpleSequenceGenerator": [[283, "simplesequencegenerator"]], "Step": [[284, "step"]], "Step.ToString": [[285, "step-tostring"]], "Step.copy": [[286, "step-copy"]], "Step.from_json": [[287, "step-from-json"]], "Step.from_jsonstring": [[288, "step-from-jsonstring"]], "Step.sha256": [[289, "step-sha256"]], "Step.to_json": [[290, "step-to-json"]], "Step.to_jsonstring": [[291, "step-to-jsonstring"]], "Step.transform": [[292, "step-transform"]], "Step.validate_data": [[293, "step-validate-data"]], "Citing": [[295, "citing"]], "Examples": [[296, "examples"], [306, "examples"]], "Timber Assembly Examples": [[296, "timber-assembly-examples"]], "Create Joint": [[297, "create-joint"]], "COMPAS Timber Documentation": [[298, "compas-timber-documentation"]], "Dependencies": [[298, "dependencies"]], "Table of Contents": [[298, "table-of-contents"]], "Indices and tables": [[298, "indices-and-tables"]], "Installation": [[299, "installation"]], "Stable": [[299, "stable"]], "Install with conda": [[299, "install-with-conda"]], "Development": [[299, "development"]], "License": [[300, "license"]], "Grasshopper plugin": [[301, "grasshopper-plugin"]], "BTLx Contribution Guide": [[302, "btlx-contribution-guide"]], "Assembly": [[303, "assembly"]], "Attributes": [[304, "attributes"]], "Features": [[307, "features"]], "Joints": [[308, "joints"]], "Joint Topologies": [[308, "joint-topologies"]], "Joint Types": [[308, "joint-types"]], "Joints for L Topologies": [[308, "joints-for-l-topologies"]], "Joints for T Topologies": [[308, "joints-for-t-topologies"]], "Joints for X Topologies": [[308, "joints-for-x-topologies"]], "Summary Table": [[308, "summary-table"]], "Joint Topologies and Joint Types": [[308, "id1"]], "Joint Rules": [[309, "joint-rules"]], "Show": [[310, "show"]], "Visualisation": [[310, "visualisation"]], "Geometries": [[310, "geometries"]], "Errors": [[310, "errors"]], "Types": [[310, "types"]], "Utils": [[311, "utils"]], "Bake with BoxMap": [[311, "bake-with-boxmap"]], "Workflow": [[312, "workflow"]]}, "indexentries": {"beamjoinningerror": [[8, "compas_timber.connections.BeamJoinningError"]], "connectionsolver (class in compas_timber.connections)": [[9, "compas_timber.connections.ConnectionSolver"]], "find_intersecting_pairs() (compas_timber.connections.connectionsolver class method)": [[10, "compas_timber.connections.ConnectionSolver.find_intersecting_pairs"]], "find_topology() (compas_timber.connections.connectionsolver method)": [[11, "compas_timber.connections.ConnectionSolver.find_topology"]], "frenchridgelapjoint (class in compas_timber.connections)": [[12, "compas_timber.connections.FrenchRidgeLapJoint"]], "tostring() (compas_timber.connections.frenchridgelapjoint method)": [[13, "compas_timber.connections.FrenchRidgeLapJoint.ToString"]], "add_features() (compas_timber.connections.frenchridgelapjoint method)": [[14, "compas_timber.connections.FrenchRidgeLapJoint.add_features"]], "check_geometry() (compas_timber.connections.frenchridgelapjoint method)": [[15, "compas_timber.connections.FrenchRidgeLapJoint.check_geometry"]], "copy() (compas_timber.connections.frenchridgelapjoint method)": [[16, "compas_timber.connections.FrenchRidgeLapJoint.copy"]], "create() (compas_timber.connections.frenchridgelapjoint class method)": [[17, "compas_timber.connections.FrenchRidgeLapJoint.create"]], "from_json() (compas_timber.connections.frenchridgelapjoint class method)": [[18, "compas_timber.connections.FrenchRidgeLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.frenchridgelapjoint class method)": [[19, "compas_timber.connections.FrenchRidgeLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.frenchridgelapjoint static method)": [[20, "compas_timber.connections.FrenchRidgeLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.frenchridgelapjoint static method)": [[21, "compas_timber.connections.FrenchRidgeLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.frenchridgelapjoint method)": [[22, "compas_timber.connections.FrenchRidgeLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.frenchridgelapjoint method)": [[23, "compas_timber.connections.FrenchRidgeLapJoint.sha256"]], "to_json() (compas_timber.connections.frenchridgelapjoint method)": [[24, "compas_timber.connections.FrenchRidgeLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.frenchridgelapjoint method)": [[25, "compas_timber.connections.FrenchRidgeLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.frenchridgelapjoint class method)": [[26, "compas_timber.connections.FrenchRidgeLapJoint.validate_data"]], "joint (class in compas_timber.connections)": [[27, "compas_timber.connections.Joint"]], "tostring() (compas_timber.connections.joint method)": [[28, "compas_timber.connections.Joint.ToString"]], "add_features() (compas_timber.connections.joint method)": [[29, "compas_timber.connections.Joint.add_features"]], "copy() (compas_timber.connections.joint method)": [[30, "compas_timber.connections.Joint.copy"]], "create() (compas_timber.connections.joint class method)": [[31, "compas_timber.connections.Joint.create"]], "from_json() (compas_timber.connections.joint class method)": [[32, "compas_timber.connections.Joint.from_json"]], "from_jsonstring() (compas_timber.connections.joint class method)": [[33, "compas_timber.connections.Joint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.joint static method)": [[34, "compas_timber.connections.Joint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.joint static method)": [[35, "compas_timber.connections.Joint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.joint method)": [[36, "compas_timber.connections.Joint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.joint method)": [[37, "compas_timber.connections.Joint.sha256"]], "to_json() (compas_timber.connections.joint method)": [[38, "compas_timber.connections.Joint.to_json"]], "to_jsonstring() (compas_timber.connections.joint method)": [[39, "compas_timber.connections.Joint.to_jsonstring"]], "validate_data() (compas_timber.connections.joint class method)": [[40, "compas_timber.connections.Joint.validate_data"]], "jointtopology (class in compas_timber.connections)": [[41, "compas_timber.connections.JointTopology"]], "get_name() (compas_timber.connections.jointtopology class method)": [[42, "compas_timber.connections.JointTopology.get_name"]], "lbuttjoint (class in compas_timber.connections)": [[43, "compas_timber.connections.LButtJoint"]], "tostring() (compas_timber.connections.lbuttjoint method)": [[44, "compas_timber.connections.LButtJoint.ToString"]], "add_features() (compas_timber.connections.lbuttjoint method)": [[45, "compas_timber.connections.LButtJoint.add_features"]], "back_surface_main() (compas_timber.connections.lbuttjoint method)": [[46, "compas_timber.connections.LButtJoint.back_surface_main"]], "calc_params_birdsmouth() (compas_timber.connections.lbuttjoint method)": [[47, "compas_timber.connections.LButtJoint.calc_params_birdsmouth"]], "copy() (compas_timber.connections.lbuttjoint method)": [[48, "compas_timber.connections.LButtJoint.copy"]], "create() (compas_timber.connections.lbuttjoint class method)": [[49, "compas_timber.connections.LButtJoint.create"]], "from_json() (compas_timber.connections.lbuttjoint class method)": [[50, "compas_timber.connections.LButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lbuttjoint class method)": [[51, "compas_timber.connections.LButtJoint.from_jsonstring"]], "front_back_surface_main() (compas_timber.connections.lbuttjoint method)": [[52, "compas_timber.connections.LButtJoint.front_back_surface_main"]], "get_cross_cutting_plane() (compas_timber.connections.lbuttjoint method)": [[53, "compas_timber.connections.LButtJoint.get_cross_cutting_plane"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lbuttjoint static method)": [[54, "compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lbuttjoint static method)": [[55, "compas_timber.connections.LButtJoint.get_face_most_towards_beam"]], "get_main_cutting_plane() (compas_timber.connections.lbuttjoint method)": [[56, "compas_timber.connections.LButtJoint.get_main_cutting_plane"]], "restore_beams_from_keys() (compas_timber.connections.lbuttjoint method)": [[57, "compas_timber.connections.LButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lbuttjoint method)": [[58, "compas_timber.connections.LButtJoint.sha256"]], "side_surfaces_cross() (compas_timber.connections.lbuttjoint method)": [[59, "compas_timber.connections.LButtJoint.side_surfaces_cross"]], "subtraction_volume() (compas_timber.connections.lbuttjoint method)": [[60, "compas_timber.connections.LButtJoint.subtraction_volume"]], "to_json() (compas_timber.connections.lbuttjoint method)": [[61, "compas_timber.connections.LButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lbuttjoint method)": [[62, "compas_timber.connections.LButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lbuttjoint class method)": [[63, "compas_timber.connections.LButtJoint.validate_data"]], "lhalflapjoint (class in compas_timber.connections)": [[64, "compas_timber.connections.LHalfLapJoint"]], "tostring() (compas_timber.connections.lhalflapjoint method)": [[65, "compas_timber.connections.LHalfLapJoint.ToString"]], "add_features() (compas_timber.connections.lhalflapjoint method)": [[66, "compas_timber.connections.LHalfLapJoint.add_features"]], "copy() (compas_timber.connections.lhalflapjoint method)": [[67, "compas_timber.connections.LHalfLapJoint.copy"]], "create() (compas_timber.connections.lhalflapjoint class method)": [[68, "compas_timber.connections.LHalfLapJoint.create"]], "from_json() (compas_timber.connections.lhalflapjoint class method)": [[69, "compas_timber.connections.LHalfLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lhalflapjoint class method)": [[70, "compas_timber.connections.LHalfLapJoint.from_jsonstring"]], "get_cross_cutting_frame() (compas_timber.connections.lhalflapjoint method)": [[71, "compas_timber.connections.LHalfLapJoint.get_cross_cutting_frame"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lhalflapjoint static method)": [[72, "compas_timber.connections.LHalfLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lhalflapjoint static method)": [[73, "compas_timber.connections.LHalfLapJoint.get_face_most_towards_beam"]], "get_main_cutting_frame() (compas_timber.connections.lhalflapjoint method)": [[74, "compas_timber.connections.LHalfLapJoint.get_main_cutting_frame"]], "restore_beams_from_keys() (compas_timber.connections.lhalflapjoint method)": [[75, "compas_timber.connections.LHalfLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lhalflapjoint method)": [[76, "compas_timber.connections.LHalfLapJoint.sha256"]], "to_json() (compas_timber.connections.lhalflapjoint method)": [[77, "compas_timber.connections.LHalfLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lhalflapjoint method)": [[78, "compas_timber.connections.LHalfLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lhalflapjoint class method)": [[79, "compas_timber.connections.LHalfLapJoint.validate_data"]], "lmiterjoint (class in compas_timber.connections)": [[80, "compas_timber.connections.LMiterJoint"]], "tostring() (compas_timber.connections.lmiterjoint method)": [[81, "compas_timber.connections.LMiterJoint.ToString"]], "add_features() (compas_timber.connections.lmiterjoint method)": [[82, "compas_timber.connections.LMiterJoint.add_features"]], "copy() (compas_timber.connections.lmiterjoint method)": [[83, "compas_timber.connections.LMiterJoint.copy"]], "create() (compas_timber.connections.lmiterjoint class method)": [[84, "compas_timber.connections.LMiterJoint.create"]], "from_json() (compas_timber.connections.lmiterjoint class method)": [[85, "compas_timber.connections.LMiterJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lmiterjoint class method)": [[86, "compas_timber.connections.LMiterJoint.from_jsonstring"]], "get_cutting_planes() (compas_timber.connections.lmiterjoint method)": [[87, "compas_timber.connections.LMiterJoint.get_cutting_planes"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lmiterjoint static method)": [[88, "compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lmiterjoint static method)": [[89, "compas_timber.connections.LMiterJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lmiterjoint method)": [[90, "compas_timber.connections.LMiterJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lmiterjoint method)": [[91, "compas_timber.connections.LMiterJoint.sha256"]], "to_json() (compas_timber.connections.lmiterjoint method)": [[92, "compas_timber.connections.LMiterJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lmiterjoint method)": [[93, "compas_timber.connections.LMiterJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lmiterjoint class method)": [[94, "compas_timber.connections.LMiterJoint.validate_data"]], "lapjoint (class in compas_timber.connections)": [[95, "compas_timber.connections.LapJoint"]], "tostring() (compas_timber.connections.lapjoint method)": [[96, "compas_timber.connections.LapJoint.ToString"]], "add_features() (compas_timber.connections.lapjoint method)": [[97, "compas_timber.connections.LapJoint.add_features"]], "copy() (compas_timber.connections.lapjoint method)": [[98, "compas_timber.connections.LapJoint.copy"]], "create() (compas_timber.connections.lapjoint class method)": [[99, "compas_timber.connections.LapJoint.create"]], "from_json() (compas_timber.connections.lapjoint class method)": [[100, "compas_timber.connections.LapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lapjoint class method)": [[101, "compas_timber.connections.LapJoint.from_jsonstring"]], "get_cross_cutting_frame() (compas_timber.connections.lapjoint method)": [[102, "compas_timber.connections.LapJoint.get_cross_cutting_frame"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lapjoint static method)": [[103, "compas_timber.connections.LapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lapjoint static method)": [[104, "compas_timber.connections.LapJoint.get_face_most_towards_beam"]], "get_main_cutting_frame() (compas_timber.connections.lapjoint method)": [[105, "compas_timber.connections.LapJoint.get_main_cutting_frame"]], "restore_beams_from_keys() (compas_timber.connections.lapjoint method)": [[106, "compas_timber.connections.LapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lapjoint method)": [[107, "compas_timber.connections.LapJoint.sha256"]], "to_json() (compas_timber.connections.lapjoint method)": [[108, "compas_timber.connections.LapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lapjoint method)": [[109, "compas_timber.connections.LapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lapjoint class method)": [[110, "compas_timber.connections.LapJoint.validate_data"]], "tbuttjoint (class in compas_timber.connections)": [[111, "compas_timber.connections.TButtJoint"]], "tostring() (compas_timber.connections.tbuttjoint method)": [[112, "compas_timber.connections.TButtJoint.ToString"]], "add_features() (compas_timber.connections.tbuttjoint method)": [[113, "compas_timber.connections.TButtJoint.add_features"]], "back_surface_main() (compas_timber.connections.tbuttjoint method)": [[114, "compas_timber.connections.TButtJoint.back_surface_main"]], "calc_params_birdsmouth() (compas_timber.connections.tbuttjoint method)": [[115, "compas_timber.connections.TButtJoint.calc_params_birdsmouth"]], "copy() (compas_timber.connections.tbuttjoint method)": [[116, "compas_timber.connections.TButtJoint.copy"]], "create() (compas_timber.connections.tbuttjoint class method)": [[117, "compas_timber.connections.TButtJoint.create"]], "from_json() (compas_timber.connections.tbuttjoint class method)": [[118, "compas_timber.connections.TButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbuttjoint class method)": [[119, "compas_timber.connections.TButtJoint.from_jsonstring"]], "front_back_surface_main() (compas_timber.connections.tbuttjoint method)": [[120, "compas_timber.connections.TButtJoint.front_back_surface_main"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tbuttjoint static method)": [[121, "compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tbuttjoint static method)": [[122, "compas_timber.connections.TButtJoint.get_face_most_towards_beam"]], "get_main_cutting_plane() (compas_timber.connections.tbuttjoint method)": [[123, "compas_timber.connections.TButtJoint.get_main_cutting_plane"]], "restore_beams_from_keys() (compas_timber.connections.tbuttjoint method)": [[124, "compas_timber.connections.TButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbuttjoint method)": [[125, "compas_timber.connections.TButtJoint.sha256"]], "side_surfaces_cross() (compas_timber.connections.tbuttjoint method)": [[126, "compas_timber.connections.TButtJoint.side_surfaces_cross"]], "subtraction_volume() (compas_timber.connections.tbuttjoint method)": [[127, "compas_timber.connections.TButtJoint.subtraction_volume"]], "to_json() (compas_timber.connections.tbuttjoint method)": [[128, "compas_timber.connections.TButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbuttjoint method)": [[129, "compas_timber.connections.TButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbuttjoint class method)": [[130, "compas_timber.connections.TButtJoint.validate_data"]], "thalflapjoint (class in compas_timber.connections)": [[131, "compas_timber.connections.THalfLapJoint"]], "tostring() (compas_timber.connections.thalflapjoint method)": [[132, "compas_timber.connections.THalfLapJoint.ToString"]], "add_features() (compas_timber.connections.thalflapjoint method)": [[133, "compas_timber.connections.THalfLapJoint.add_features"]], "copy() (compas_timber.connections.thalflapjoint method)": [[134, "compas_timber.connections.THalfLapJoint.copy"]], "create() (compas_timber.connections.thalflapjoint class method)": [[135, "compas_timber.connections.THalfLapJoint.create"]], "from_json() (compas_timber.connections.thalflapjoint class method)": [[136, "compas_timber.connections.THalfLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.thalflapjoint class method)": [[137, "compas_timber.connections.THalfLapJoint.from_jsonstring"]], "get_cross_cutting_frame() (compas_timber.connections.thalflapjoint method)": [[138, "compas_timber.connections.THalfLapJoint.get_cross_cutting_frame"]], "get_face_most_ortho_to_beam() (compas_timber.connections.thalflapjoint static method)": [[139, "compas_timber.connections.THalfLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.thalflapjoint static method)": [[140, "compas_timber.connections.THalfLapJoint.get_face_most_towards_beam"]], "get_main_cutting_frame() (compas_timber.connections.thalflapjoint method)": [[141, "compas_timber.connections.THalfLapJoint.get_main_cutting_frame"]], "restore_beams_from_keys() (compas_timber.connections.thalflapjoint method)": [[142, "compas_timber.connections.THalfLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.thalflapjoint method)": [[143, "compas_timber.connections.THalfLapJoint.sha256"]], "to_json() (compas_timber.connections.thalflapjoint method)": [[144, "compas_timber.connections.THalfLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.thalflapjoint method)": [[145, "compas_timber.connections.THalfLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.thalflapjoint class method)": [[146, "compas_timber.connections.THalfLapJoint.validate_data"]], "xhalflapjoint (class in compas_timber.connections)": [[147, "compas_timber.connections.XHalfLapJoint"]], "tostring() (compas_timber.connections.xhalflapjoint method)": [[148, "compas_timber.connections.XHalfLapJoint.ToString"]], "add_features() (compas_timber.connections.xhalflapjoint method)": [[149, "compas_timber.connections.XHalfLapJoint.add_features"]], "copy() (compas_timber.connections.xhalflapjoint method)": [[150, "compas_timber.connections.XHalfLapJoint.copy"]], "create() (compas_timber.connections.xhalflapjoint class method)": [[151, "compas_timber.connections.XHalfLapJoint.create"]], "from_json() (compas_timber.connections.xhalflapjoint class method)": [[152, "compas_timber.connections.XHalfLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xhalflapjoint class method)": [[153, "compas_timber.connections.XHalfLapJoint.from_jsonstring"]], "get_cross_cutting_frame() (compas_timber.connections.xhalflapjoint method)": [[154, "compas_timber.connections.XHalfLapJoint.get_cross_cutting_frame"]], "get_face_most_ortho_to_beam() (compas_timber.connections.xhalflapjoint static method)": [[155, "compas_timber.connections.XHalfLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.xhalflapjoint static method)": [[156, "compas_timber.connections.XHalfLapJoint.get_face_most_towards_beam"]], "get_main_cutting_frame() (compas_timber.connections.xhalflapjoint method)": [[157, "compas_timber.connections.XHalfLapJoint.get_main_cutting_frame"]], "restore_beams_from_keys() (compas_timber.connections.xhalflapjoint method)": [[158, "compas_timber.connections.XHalfLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xhalflapjoint method)": [[159, "compas_timber.connections.XHalfLapJoint.sha256"]], "to_json() (compas_timber.connections.xhalflapjoint method)": [[160, "compas_timber.connections.XHalfLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xhalflapjoint method)": [[161, "compas_timber.connections.XHalfLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xhalflapjoint class method)": [[162, "compas_timber.connections.XHalfLapJoint.validate_data"]], "find_neighboring_beams() (in module compas_timber.connections)": [[163, "compas_timber.connections.find_neighboring_beams"]], "beam (class in compas_timber.elements)": [[164, "compas_timber.elements.Beam"]], "tostring() (compas_timber.elements.beam method)": [[165, "compas_timber.elements.Beam.ToString"]], "add_blank_extension() (compas_timber.elements.beam method)": [[166, "compas_timber.elements.Beam.add_blank_extension"]], "add_feature() (compas_timber.elements.beam method)": [[167, "compas_timber.elements.Beam.add_feature"]], "add_features() (compas_timber.elements.beam method)": [[168, "compas_timber.elements.Beam.add_features"]], "compute_aabb() (compas_timber.elements.beam method)": [[169, "compas_timber.elements.Beam.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.beam method)": [[170, "compas_timber.elements.Beam.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.beam method)": [[171, "compas_timber.elements.Beam.compute_geometry"]], "compute_obb() (compas_timber.elements.beam method)": [[172, "compas_timber.elements.Beam.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.beam method)": [[173, "compas_timber.elements.Beam.compute_worldtransformation"]], "copy() (compas_timber.elements.beam method)": [[174, "compas_timber.elements.Beam.copy"]], "endpoint_closest_to_point() (compas_timber.elements.beam method)": [[175, "compas_timber.elements.Beam.endpoint_closest_to_point"]], "extension_to_plane() (compas_timber.elements.beam method)": [[176, "compas_timber.elements.Beam.extension_to_plane"]], "from_centerline() (compas_timber.elements.beam class method)": [[177, "compas_timber.elements.Beam.from_centerline"]], "from_endpoints() (compas_timber.elements.beam class method)": [[178, "compas_timber.elements.Beam.from_endpoints"]], "from_json() (compas_timber.elements.beam class method)": [[179, "compas_timber.elements.Beam.from_json"]], "from_jsonstring() (compas_timber.elements.beam class method)": [[180, "compas_timber.elements.Beam.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.beam method)": [[181, "compas_timber.elements.Beam.remove_blank_extension"]], "remove_features() (compas_timber.elements.beam method)": [[182, "compas_timber.elements.Beam.remove_features"]], "sha256() (compas_timber.elements.beam method)": [[183, "compas_timber.elements.Beam.sha256"]], "to_json() (compas_timber.elements.beam method)": [[184, "compas_timber.elements.Beam.to_json"]], "to_jsonstring() (compas_timber.elements.beam method)": [[185, "compas_timber.elements.Beam.to_jsonstring"]], "transform() (compas_timber.elements.beam method)": [[186, "compas_timber.elements.Beam.transform"]], "transformed() (compas_timber.elements.beam method)": [[187, "compas_timber.elements.Beam.transformed"]], "validate_data() (compas_timber.elements.beam class method)": [[188, "compas_timber.elements.Beam.validate_data"]], "btlx (class in compas_timber.fabrication)": [[189, "compas_timber.fabrication.BTLx"]], "btlx_string() (compas_timber.fabrication.btlx method)": [[190, "compas_timber.fabrication.BTLx.btlx_string"]], "process_model() (compas_timber.fabrication.btlx method)": [[191, "compas_timber.fabrication.BTLx.process_model"]], "register_joint() (compas_timber.fabrication.btlx class method)": [[192, "compas_timber.fabrication.BTLx.register_joint"]], "btlxfrenchridgelap (class in compas_timber.fabrication)": [[193, "compas_timber.fabrication.BTLxFrenchRidgeLap"]], "create_process() (compas_timber.fabrication.btlxfrenchridgelap class method)": [[194, "compas_timber.fabrication.BTLxFrenchRidgeLap.create_process"]], "get_params() (compas_timber.fabrication.btlxfrenchridgelap method)": [[195, "compas_timber.fabrication.BTLxFrenchRidgeLap.get_params"]], "process_joints() (compas_timber.fabrication.btlxfrenchridgelap method)": [[196, "compas_timber.fabrication.BTLxFrenchRidgeLap.process_joints"]], "btlxjackcut (class in compas_timber.fabrication)": [[197, "compas_timber.fabrication.BTLxJackCut"]], "create_process() (compas_timber.fabrication.btlxjackcut class method)": [[198, "compas_timber.fabrication.BTLxJackCut.create_process"]], "generate_process() (compas_timber.fabrication.btlxjackcut method)": [[199, "compas_timber.fabrication.BTLxJackCut.generate_process"]], "btlxprocess (class in compas_timber.fabrication)": [[200, "compas_timber.fabrication.BTLxProcess"]], "frenchridgefactory (class in compas_timber.fabrication)": [[201, "compas_timber.fabrication.FrenchRidgeFactory"]], "apply_processings() (compas_timber.fabrication.frenchridgefactory class method)": [[202, "compas_timber.fabrication.FrenchRidgeFactory.apply_processings"]], "lbuttfactory (class in compas_timber.fabrication)": [[203, "compas_timber.fabrication.LButtFactory"]], "apply_processings() (compas_timber.fabrication.lbuttfactory class method)": [[204, "compas_timber.fabrication.LButtFactory.apply_processings"]], "lmiterfactory (class in compas_timber.fabrication)": [[205, "compas_timber.fabrication.LMiterFactory"]], "apply_processings() (compas_timber.fabrication.lmiterfactory class method)": [[206, "compas_timber.fabrication.LMiterFactory.apply_processings"]], "tbuttfactory (class in compas_timber.fabrication)": [[207, "compas_timber.fabrication.TButtFactory"]], "apply_processings() (compas_timber.fabrication.tbuttfactory class method)": [[208, "compas_timber.fabrication.TButtFactory.apply_processings"]], "categoryrule (class in compas_timber.ghpython)": [[209, "compas_timber.ghpython.CategoryRule"]], "tostring() (compas_timber.ghpython.categoryrule method)": [[210, "compas_timber.ghpython.CategoryRule.ToString"]], "comply() (compas_timber.ghpython.categoryrule method)": [[211, "compas_timber.ghpython.CategoryRule.comply"]], "reorder() (compas_timber.ghpython.categoryrule method)": [[212, "compas_timber.ghpython.CategoryRule.reorder"]], "debuginfomation (class in compas_timber.ghpython)": [[213, "compas_timber.ghpython.DebugInfomation"]], "tostring() (compas_timber.ghpython.debuginfomation method)": [[214, "compas_timber.ghpython.DebugInfomation.ToString"]], "add_feature_error() (compas_timber.ghpython.debuginfomation method)": [[215, "compas_timber.ghpython.DebugInfomation.add_feature_error"]], "add_joint_error() (compas_timber.ghpython.debuginfomation method)": [[216, "compas_timber.ghpython.DebugInfomation.add_joint_error"]], "directrule (class in compas_timber.ghpython)": [[217, "compas_timber.ghpython.DirectRule"]], "tostring() (compas_timber.ghpython.directrule method)": [[218, "compas_timber.ghpython.DirectRule.ToString"]], "comply() (compas_timber.ghpython.directrule method)": [[219, "compas_timber.ghpython.DirectRule.comply"]], "featuredefinition (class in compas_timber.ghpython)": [[220, "compas_timber.ghpython.FeatureDefinition"]], "tostring() (compas_timber.ghpython.featuredefinition method)": [[221, "compas_timber.ghpython.FeatureDefinition.ToString"]], "jointdefinition (class in compas_timber.ghpython)": [[222, "compas_timber.ghpython.JointDefinition"]], "tostring() (compas_timber.ghpython.jointdefinition method)": [[223, "compas_timber.ghpython.JointDefinition.ToString"]], "is_identical() (compas_timber.ghpython.jointdefinition method)": [[224, "compas_timber.ghpython.JointDefinition.is_identical"]], "match() (compas_timber.ghpython.jointdefinition method)": [[225, "compas_timber.ghpython.JointDefinition.match"]], "topologyrule (class in compas_timber.ghpython)": [[226, "compas_timber.ghpython.TopologyRule"]], "tostring() (compas_timber.ghpython.topologyrule method)": [[227, "compas_timber.ghpython.TopologyRule.ToString"]], "comply() (compas_timber.ghpython.topologyrule method)": [[228, "compas_timber.ghpython.TopologyRule.comply"]], "timbermodel (class in compas_timber.model)": [[229, "compas_timber.model.TimberModel"]], "tostring() (compas_timber.model.timbermodel method)": [[230, "compas_timber.model.TimberModel.ToString"]], "add_beam() (compas_timber.model.timbermodel method)": [[231, "compas_timber.model.TimberModel.add_beam"]], "add_element() (compas_timber.model.timbermodel method)": [[232, "compas_timber.model.TimberModel.add_element"]], "add_elements() (compas_timber.model.timbermodel method)": [[233, "compas_timber.model.TimberModel.add_elements"]], "add_group() (compas_timber.model.timbermodel method)": [[234, "compas_timber.model.TimberModel.add_group"]], "add_interaction() (compas_timber.model.timbermodel method)": [[235, "compas_timber.model.TimberModel.add_interaction"]], "add_joint() (compas_timber.model.timbermodel method)": [[236, "compas_timber.model.TimberModel.add_joint"]], "add_material() (compas_timber.model.timbermodel method)": [[237, "compas_timber.model.TimberModel.add_material"]], "add_wall() (compas_timber.model.timbermodel method)": [[238, "compas_timber.model.TimberModel.add_wall"]], "assign_material() (compas_timber.model.timbermodel method)": [[239, "compas_timber.model.TimberModel.assign_material"]], "beam_by_guid() (compas_timber.model.timbermodel method)": [[240, "compas_timber.model.TimberModel.beam_by_guid"]], "compute_aabb() (compas_timber.model.timbermodel method)": [[241, "compas_timber.model.TimberModel.compute_aabb"]], "compute_obb() (compas_timber.model.timbermodel method)": [[242, "compas_timber.model.TimberModel.compute_obb"]], "copy() (compas_timber.model.timbermodel method)": [[243, "compas_timber.model.TimberModel.copy"]], "elements() (compas_timber.model.timbermodel method)": [[244, "compas_timber.model.TimberModel.elements"]], "elements_connected_by() (compas_timber.model.timbermodel method)": [[245, "compas_timber.model.TimberModel.elements_connected_by"]], "from_json() (compas_timber.model.timbermodel class method)": [[246, "compas_timber.model.TimberModel.from_json"]], "from_jsonstring() (compas_timber.model.timbermodel class method)": [[247, "compas_timber.model.TimberModel.from_jsonstring"]], "has_element() (compas_timber.model.timbermodel method)": [[248, "compas_timber.model.TimberModel.has_element"]], "has_interaction() (compas_timber.model.timbermodel method)": [[249, "compas_timber.model.TimberModel.has_interaction"]], "has_material() (compas_timber.model.timbermodel method)": [[250, "compas_timber.model.TimberModel.has_material"]], "interactions() (compas_timber.model.timbermodel method)": [[251, "compas_timber.model.TimberModel.interactions"]], "materials() (compas_timber.model.timbermodel method)": [[252, "compas_timber.model.TimberModel.materials"]], "remove_element() (compas_timber.model.timbermodel method)": [[253, "compas_timber.model.TimberModel.remove_element"]], "remove_interaction() (compas_timber.model.timbermodel method)": [[254, "compas_timber.model.TimberModel.remove_interaction"]], "remove_joint() (compas_timber.model.timbermodel method)": [[255, "compas_timber.model.TimberModel.remove_joint"]], "rotate() (compas_timber.model.timbermodel method)": [[256, "compas_timber.model.TimberModel.rotate"]], "rotated() (compas_timber.model.timbermodel method)": [[257, "compas_timber.model.TimberModel.rotated"]], "scale() (compas_timber.model.timbermodel method)": [[258, "compas_timber.model.TimberModel.scale"]], "scaled() (compas_timber.model.timbermodel method)": [[259, "compas_timber.model.TimberModel.scaled"]], "set_topologies() (compas_timber.model.timbermodel method)": [[260, "compas_timber.model.TimberModel.set_topologies"]], "sha256() (compas_timber.model.timbermodel method)": [[261, "compas_timber.model.TimberModel.sha256"]], "to_json() (compas_timber.model.timbermodel method)": [[262, "compas_timber.model.TimberModel.to_json"]], "to_jsonstring() (compas_timber.model.timbermodel method)": [[263, "compas_timber.model.TimberModel.to_jsonstring"]], "transform() (compas_timber.model.timbermodel method)": [[264, "compas_timber.model.TimberModel.transform"]], "transform_numpy() (compas_timber.model.timbermodel method)": [[265, "compas_timber.model.TimberModel.transform_numpy"]], "transformed() (compas_timber.model.timbermodel method)": [[266, "compas_timber.model.TimberModel.transformed"]], "transformed_numpy() (compas_timber.model.timbermodel method)": [[267, "compas_timber.model.TimberModel.transformed_numpy"]], "translate() (compas_timber.model.timbermodel method)": [[268, "compas_timber.model.TimberModel.translate"]], "translated() (compas_timber.model.timbermodel method)": [[269, "compas_timber.model.TimberModel.translated"]], "validate_data() (compas_timber.model.timbermodel class method)": [[270, "compas_timber.model.TimberModel.validate_data"]], "actor (class in compas_timber.planning)": [[271, "compas_timber.planning.Actor"]], "get_name() (compas_timber.planning.actor class method)": [[272, "compas_timber.planning.Actor.get_name"]], "buildingplan (class in compas_timber.planning)": [[273, "compas_timber.planning.BuildingPlan"]], "tostring() (compas_timber.planning.buildingplan method)": [[274, "compas_timber.planning.BuildingPlan.ToString"]], "add_step() (compas_timber.planning.buildingplan method)": [[275, "compas_timber.planning.BuildingPlan.add_step"]], "copy() (compas_timber.planning.buildingplan method)": [[276, "compas_timber.planning.BuildingPlan.copy"]], "from_json() (compas_timber.planning.buildingplan class method)": [[277, "compas_timber.planning.BuildingPlan.from_json"]], "from_jsonstring() (compas_timber.planning.buildingplan class method)": [[278, "compas_timber.planning.BuildingPlan.from_jsonstring"]], "sha256() (compas_timber.planning.buildingplan method)": [[279, "compas_timber.planning.BuildingPlan.sha256"]], "to_json() (compas_timber.planning.buildingplan method)": [[280, "compas_timber.planning.BuildingPlan.to_json"]], "to_jsonstring() (compas_timber.planning.buildingplan method)": [[281, "compas_timber.planning.BuildingPlan.to_jsonstring"]], "validate_data() (compas_timber.planning.buildingplan class method)": [[282, "compas_timber.planning.BuildingPlan.validate_data"]], "simplesequencegenerator (class in compas_timber.planning)": [[283, "compas_timber.planning.SimpleSequenceGenerator"]], "step (class in compas_timber.planning)": [[284, "compas_timber.planning.Step"]], "tostring() (compas_timber.planning.step method)": [[285, "compas_timber.planning.Step.ToString"]], "copy() (compas_timber.planning.step method)": [[286, "compas_timber.planning.Step.copy"]], "from_json() (compas_timber.planning.step class method)": [[287, "compas_timber.planning.Step.from_json"]], "from_jsonstring() (compas_timber.planning.step class method)": [[288, "compas_timber.planning.Step.from_jsonstring"]], "sha256() (compas_timber.planning.step method)": [[289, "compas_timber.planning.Step.sha256"]], "to_json() (compas_timber.planning.step method)": [[290, "compas_timber.planning.Step.to_json"]], "to_jsonstring() (compas_timber.planning.step method)": [[291, "compas_timber.planning.Step.to_jsonstring"]], "transform() (compas_timber.planning.step method)": [[292, "compas_timber.planning.Step.transform"]], "validate_data() (compas_timber.planning.step class method)": [[293, "compas_timber.planning.Step.validate_data"]], "find_neighboring_beams() (in module compas_timber.rhino)": [[294, "compas_timber.rhino.find_neighboring_beams"]]}})