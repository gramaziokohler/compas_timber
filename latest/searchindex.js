Search.setIndex({"docnames": ["api", "api/compas_timber.connections", "api/compas_timber.design", "api/compas_timber.elements", "api/compas_timber.errors", "api/compas_timber.fabrication", "api/compas_timber.ghpython", "api/compas_timber.model", "api/compas_timber.planning", "api/compas_timber.rhino", "api/generated/compas_timber.connections.BallNodeJoint", "api/generated/compas_timber.connections.BallNodeJoint.ToString", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions", "api/generated/compas_timber.connections.BallNodeJoint.add_features", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility", "api/generated/compas_timber.connections.BallNodeJoint.copy", "api/generated/compas_timber.connections.BallNodeJoint.create", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies", "api/generated/compas_timber.connections.BallNodeJoint.from_json", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.BallNodeJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.BallNodeJoint.sha256", "api/generated/compas_timber.connections.BallNodeJoint.to_json", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.validate_data", "api/generated/compas_timber.connections.ConnectionSolver", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs", "api/generated/compas_timber.connections.ConnectionSolver.find_topology", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology", "api/generated/compas_timber.connections.Joint", "api/generated/compas_timber.connections.Joint.ToString", "api/generated/compas_timber.connections.Joint.add_extensions", "api/generated/compas_timber.connections.Joint.add_features", "api/generated/compas_timber.connections.Joint.check_elements_compatibility", "api/generated/compas_timber.connections.Joint.copy", "api/generated/compas_timber.connections.Joint.create", "api/generated/compas_timber.connections.Joint.element_count_complies", "api/generated/compas_timber.connections.Joint.from_json", "api/generated/compas_timber.connections.Joint.from_jsonstring", "api/generated/compas_timber.connections.Joint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.Joint.get_face_most_towards_beam", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys", "api/generated/compas_timber.connections.Joint.sha256", "api/generated/compas_timber.connections.Joint.to_json", "api/generated/compas_timber.connections.Joint.to_jsonstring", "api/generated/compas_timber.connections.Joint.validate_data", "api/generated/compas_timber.connections.JointTopology", "api/generated/compas_timber.connections.JointTopology.get_name", "api/generated/compas_timber.connections.LButtJoint", "api/generated/compas_timber.connections.LButtJoint.ToString", "api/generated/compas_timber.connections.LButtJoint.add_extensions", "api/generated/compas_timber.connections.LButtJoint.add_features", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LButtJoint.copy", "api/generated/compas_timber.connections.LButtJoint.create", "api/generated/compas_timber.connections.LButtJoint.element_count_complies", "api/generated/compas_timber.connections.LButtJoint.from_json", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring", "api/generated/compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LButtJoint.sha256", "api/generated/compas_timber.connections.LButtJoint.to_json", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles", "api/generated/compas_timber.connections.LButtJoint.validate_data", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data", "api/generated/compas_timber.connections.LLapJoint", "api/generated/compas_timber.connections.LLapJoint.ToString", "api/generated/compas_timber.connections.LLapJoint.add_extensions", "api/generated/compas_timber.connections.LLapJoint.add_features", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LLapJoint.copy", "api/generated/compas_timber.connections.LLapJoint.create", "api/generated/compas_timber.connections.LLapJoint.element_count_complies", "api/generated/compas_timber.connections.LLapJoint.from_json", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LLapJoint.sha256", "api/generated/compas_timber.connections.LLapJoint.to_json", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LLapJoint.validate_data", "api/generated/compas_timber.connections.LMiterJoint", "api/generated/compas_timber.connections.LMiterJoint.ToString", "api/generated/compas_timber.connections.LMiterJoint.add_extensions", "api/generated/compas_timber.connections.LMiterJoint.add_features", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LMiterJoint.copy", "api/generated/compas_timber.connections.LMiterJoint.create", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies", "api/generated/compas_timber.connections.LMiterJoint.from_json", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LMiterJoint.sha256", "api/generated/compas_timber.connections.LMiterJoint.to_json", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.validate_data", "api/generated/compas_timber.connections.LapJoint", "api/generated/compas_timber.connections.LapJoint.ToString", "api/generated/compas_timber.connections.LapJoint.add_extensions", "api/generated/compas_timber.connections.LapJoint.add_features", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LapJoint.copy", "api/generated/compas_timber.connections.LapJoint.create", "api/generated/compas_timber.connections.LapJoint.element_count_complies", "api/generated/compas_timber.connections.LapJoint.from_json", "api/generated/compas_timber.connections.LapJoint.from_jsonstring", "api/generated/compas_timber.connections.LapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LapJoint.sha256", "api/generated/compas_timber.connections.LapJoint.to_json", "api/generated/compas_timber.connections.LapJoint.to_jsonstring", "api/generated/compas_timber.connections.LapJoint.validate_data", "api/generated/compas_timber.connections.NullJoint", "api/generated/compas_timber.connections.NullJoint.ToString", "api/generated/compas_timber.connections.NullJoint.add_extensions", "api/generated/compas_timber.connections.NullJoint.add_features", "api/generated/compas_timber.connections.NullJoint.check_elements_compatibility", "api/generated/compas_timber.connections.NullJoint.copy", "api/generated/compas_timber.connections.NullJoint.create", "api/generated/compas_timber.connections.NullJoint.element_count_complies", "api/generated/compas_timber.connections.NullJoint.from_json", "api/generated/compas_timber.connections.NullJoint.from_jsonstring", "api/generated/compas_timber.connections.NullJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.NullJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.NullJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.NullJoint.sha256", "api/generated/compas_timber.connections.NullJoint.to_json", "api/generated/compas_timber.connections.NullJoint.to_jsonstring", "api/generated/compas_timber.connections.NullJoint.validate_data", "api/generated/compas_timber.connections.TBirdsmouthJoint", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy", "api/generated/compas_timber.connections.TBirdsmouthJoint.create", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TBirdsmouthJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data", "api/generated/compas_timber.connections.TButtJoint", "api/generated/compas_timber.connections.TButtJoint.ToString", "api/generated/compas_timber.connections.TButtJoint.add_extensions", "api/generated/compas_timber.connections.TButtJoint.add_features", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TButtJoint.copy", "api/generated/compas_timber.connections.TButtJoint.create", "api/generated/compas_timber.connections.TButtJoint.element_count_complies", "api/generated/compas_timber.connections.TButtJoint.from_json", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring", "api/generated/compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TButtJoint.sha256", "api/generated/compas_timber.connections.TButtJoint.to_json", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring", "api/generated/compas_timber.connections.TButtJoint.validate_data", "api/generated/compas_timber.connections.TDovetailJoint", "api/generated/compas_timber.connections.TDovetailJoint.ToString", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions", "api/generated/compas_timber.connections.TDovetailJoint.add_features", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TDovetailJoint.copy", "api/generated/compas_timber.connections.TDovetailJoint.create", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies", "api/generated/compas_timber.connections.TDovetailJoint.from_json", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TDovetailJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TDovetailJoint.sha256", "api/generated/compas_timber.connections.TDovetailJoint.to_json", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.validate_data", "api/generated/compas_timber.connections.TLapJoint", "api/generated/compas_timber.connections.TLapJoint.ToString", "api/generated/compas_timber.connections.TLapJoint.add_extensions", "api/generated/compas_timber.connections.TLapJoint.add_features", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TLapJoint.copy", "api/generated/compas_timber.connections.TLapJoint.create", "api/generated/compas_timber.connections.TLapJoint.element_count_complies", "api/generated/compas_timber.connections.TLapJoint.from_json", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring", "api/generated/compas_timber.connections.TLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TLapJoint.sha256", "api/generated/compas_timber.connections.TLapJoint.to_json", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring", "api/generated/compas_timber.connections.TLapJoint.validate_data", "api/generated/compas_timber.connections.TStepJoint", "api/generated/compas_timber.connections.TStepJoint.ToString", "api/generated/compas_timber.connections.TStepJoint.add_extensions", "api/generated/compas_timber.connections.TStepJoint.add_features", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TStepJoint.copy", "api/generated/compas_timber.connections.TStepJoint.create", "api/generated/compas_timber.connections.TStepJoint.element_count_complies", "api/generated/compas_timber.connections.TStepJoint.from_json", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring", "api/generated/compas_timber.connections.TStepJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TStepJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TStepJoint.set_step_depths", "api/generated/compas_timber.connections.TStepJoint.sha256", "api/generated/compas_timber.connections.TStepJoint.to_json", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring", "api/generated/compas_timber.connections.TStepJoint.validate_data", "api/generated/compas_timber.connections.TenonMortiseJoint", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TenonMortiseJoint.copy", "api/generated/compas_timber.connections.TenonMortiseJoint.create", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TenonMortiseJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data", "api/generated/compas_timber.connections.XLapJoint", "api/generated/compas_timber.connections.XLapJoint.ToString", "api/generated/compas_timber.connections.XLapJoint.add_extensions", "api/generated/compas_timber.connections.XLapJoint.add_features", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XLapJoint.copy", "api/generated/compas_timber.connections.XLapJoint.create", "api/generated/compas_timber.connections.XLapJoint.element_count_complies", "api/generated/compas_timber.connections.XLapJoint.from_json", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring", "api/generated/compas_timber.connections.XLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.XLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XLapJoint.sha256", "api/generated/compas_timber.connections.XLapJoint.to_json", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring", "api/generated/compas_timber.connections.XLapJoint.validate_data", "api/generated/compas_timber.connections.XNotchJoint", "api/generated/compas_timber.connections.XNotchJoint.ToString", "api/generated/compas_timber.connections.XNotchJoint.add_extensions", "api/generated/compas_timber.connections.XNotchJoint.add_features", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XNotchJoint.copy", "api/generated/compas_timber.connections.XNotchJoint.create", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies", "api/generated/compas_timber.connections.XNotchJoint.from_json", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.XNotchJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XNotchJoint.sha256", "api/generated/compas_timber.connections.XNotchJoint.to_json", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.validate_data", "api/generated/compas_timber.connections.YButtJoint", "api/generated/compas_timber.connections.YButtJoint.ToString", "api/generated/compas_timber.connections.YButtJoint.add_extensions", "api/generated/compas_timber.connections.YButtJoint.add_features", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.YButtJoint.copy", "api/generated/compas_timber.connections.YButtJoint.create", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.element_count_complies", "api/generated/compas_timber.connections.YButtJoint.from_json", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring", "api/generated/compas_timber.connections.YButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.YButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.YButtJoint.sha256", "api/generated/compas_timber.connections.YButtJoint.to_json", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring", "api/generated/compas_timber.connections.YButtJoint.validate_data", "api/generated/compas_timber.connections.find_neighboring_elements", "api/generated/compas_timber.design.CategoryRule", "api/generated/compas_timber.design.CategoryRule.ToString", "api/generated/compas_timber.design.CategoryRule.comply", "api/generated/compas_timber.design.CategoryRule.get_category_rules", "api/generated/compas_timber.design.CategoryRule.get_direct_rules", "api/generated/compas_timber.design.CategoryRule.get_topology_rules", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.CategoryRule.reorder", "api/generated/compas_timber.design.DebugInfomation", "api/generated/compas_timber.design.DebugInfomation.ToString", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error", "api/generated/compas_timber.design.DebugInfomation.add_feature_error", "api/generated/compas_timber.design.DebugInfomation.add_joint_error", "api/generated/compas_timber.design.DirectRule", "api/generated/compas_timber.design.DirectRule.ToString", "api/generated/compas_timber.design.DirectRule.comply", "api/generated/compas_timber.design.DirectRule.contains", "api/generated/compas_timber.design.DirectRule.get_category_rules", "api/generated/compas_timber.design.DirectRule.get_direct_rules", "api/generated/compas_timber.design.DirectRule.get_topology_rules", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.FeatureDefinition", "api/generated/compas_timber.design.FeatureDefinition.ToString", "api/generated/compas_timber.design.JointDefinition", "api/generated/compas_timber.design.JointDefinition.ToString", "api/generated/compas_timber.design.JointDefinition.is_identical", "api/generated/compas_timber.design.JointDefinition.match", "api/generated/compas_timber.design.JointRule", "api/generated/compas_timber.design.JointRule.comply", "api/generated/compas_timber.design.JointRule.get_category_rules", "api/generated/compas_timber.design.JointRule.get_direct_rules", "api/generated/compas_timber.design.JointRule.get_topology_rules", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.SurfaceModel", "api/generated/compas_timber.design.SurfaceModel.beam_category_names", "api/generated/compas_timber.design.SurfaceModel.create_model", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements", "api/generated/compas_timber.design.SurfaceModel.generate_frame", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams", "api/generated/compas_timber.design.SurfaceModel.generate_plates", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines", "api/generated/compas_timber.design.SurfaceModel.generate_studs", "api/generated/compas_timber.design.SurfaceModel.generate_windows", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices", "api/generated/compas_timber.design.SurfaceModel.offset_elements", "api/generated/compas_timber.design.SurfaceModel.parse_loops", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs", "api/generated/compas_timber.design.SurfaceModel.trim_studs", "api/generated/compas_timber.design.TopologyRule", "api/generated/compas_timber.design.TopologyRule.ToString", "api/generated/compas_timber.design.TopologyRule.comply", "api/generated/compas_timber.design.TopologyRule.get_category_rules", "api/generated/compas_timber.design.TopologyRule.get_direct_rules", "api/generated/compas_timber.design.TopologyRule.get_topology_rules", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.guess_joint_topology_2beams", "api/generated/compas_timber.design.set_default_joints", "api/generated/compas_timber.elements.Beam", "api/generated/compas_timber.elements.Beam.ToString", "api/generated/compas_timber.elements.Beam.add_blank_extension", "api/generated/compas_timber.elements.Beam.add_feature", "api/generated/compas_timber.elements.Beam.add_features", "api/generated/compas_timber.elements.Beam.back_side", "api/generated/compas_timber.elements.Beam.compute_aabb", "api/generated/compas_timber.elements.Beam.compute_collision_mesh", "api/generated/compas_timber.elements.Beam.compute_geometry", "api/generated/compas_timber.elements.Beam.compute_obb", "api/generated/compas_timber.elements.Beam.compute_worldtransformation", "api/generated/compas_timber.elements.Beam.copy", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point", "api/generated/compas_timber.elements.Beam.extension_to_plane", "api/generated/compas_timber.elements.Beam.from_centerline", "api/generated/compas_timber.elements.Beam.from_endpoints", "api/generated/compas_timber.elements.Beam.from_json", "api/generated/compas_timber.elements.Beam.from_jsonstring", "api/generated/compas_timber.elements.Beam.front_side", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side", "api/generated/compas_timber.elements.Beam.opp_side", "api/generated/compas_timber.elements.Beam.remove_blank_extension", "api/generated/compas_timber.elements.Beam.remove_features", "api/generated/compas_timber.elements.Beam.reset", "api/generated/compas_timber.elements.Beam.sha256", "api/generated/compas_timber.elements.Beam.side_as_surface", "api/generated/compas_timber.elements.Beam.to_json", "api/generated/compas_timber.elements.Beam.to_jsonstring", "api/generated/compas_timber.elements.Beam.transform", "api/generated/compas_timber.elements.Beam.transformed", "api/generated/compas_timber.elements.Beam.validate_data", "api/generated/compas_timber.elements.Fastener", "api/generated/compas_timber.elements.Fastener.ToString", "api/generated/compas_timber.elements.Fastener.add_feature", "api/generated/compas_timber.elements.Fastener.add_features", "api/generated/compas_timber.elements.Fastener.compute_aabb", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh", "api/generated/compas_timber.elements.Fastener.compute_geometry", "api/generated/compas_timber.elements.Fastener.compute_obb", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation", "api/generated/compas_timber.elements.Fastener.copy", "api/generated/compas_timber.elements.Fastener.from_json", "api/generated/compas_timber.elements.Fastener.from_jsonstring", "api/generated/compas_timber.elements.Fastener.remove_blank_extension", "api/generated/compas_timber.elements.Fastener.remove_features", "api/generated/compas_timber.elements.Fastener.reset", "api/generated/compas_timber.elements.Fastener.sha256", "api/generated/compas_timber.elements.Fastener.to_json", "api/generated/compas_timber.elements.Fastener.to_jsonstring", "api/generated/compas_timber.elements.Fastener.transform", "api/generated/compas_timber.elements.Fastener.transformed", "api/generated/compas_timber.elements.Fastener.validate_data", "api/generated/compas_timber.elements.FastenerTimberInterface", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString", "api/generated/compas_timber.elements.FastenerTimberInterface.copy", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data", "api/generated/compas_timber.elements.Plate", "api/generated/compas_timber.elements.Plate.ToString", "api/generated/compas_timber.elements.Plate.add_feature", "api/generated/compas_timber.elements.Plate.add_features", "api/generated/compas_timber.elements.Plate.compute_aabb", "api/generated/compas_timber.elements.Plate.compute_collision_mesh", "api/generated/compas_timber.elements.Plate.compute_geometry", "api/generated/compas_timber.elements.Plate.compute_obb", "api/generated/compas_timber.elements.Plate.compute_worldtransformation", "api/generated/compas_timber.elements.Plate.copy", "api/generated/compas_timber.elements.Plate.from_json", "api/generated/compas_timber.elements.Plate.from_jsonstring", "api/generated/compas_timber.elements.Plate.from_outline_thickness", "api/generated/compas_timber.elements.Plate.remove_blank_extension", "api/generated/compas_timber.elements.Plate.remove_features", "api/generated/compas_timber.elements.Plate.reset", "api/generated/compas_timber.elements.Plate.sha256", "api/generated/compas_timber.elements.Plate.shape", "api/generated/compas_timber.elements.Plate.side_as_surface", "api/generated/compas_timber.elements.Plate.to_json", "api/generated/compas_timber.elements.Plate.to_jsonstring", "api/generated/compas_timber.elements.Plate.transform", "api/generated/compas_timber.elements.Plate.transformed", "api/generated/compas_timber.elements.Plate.validate_data", "api/generated/compas_timber.elements.TimberElement", "api/generated/compas_timber.elements.TimberElement.ToString", "api/generated/compas_timber.elements.TimberElement.add_feature", "api/generated/compas_timber.elements.TimberElement.add_features", "api/generated/compas_timber.elements.TimberElement.compute_aabb", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh", "api/generated/compas_timber.elements.TimberElement.compute_geometry", "api/generated/compas_timber.elements.TimberElement.compute_obb", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation", "api/generated/compas_timber.elements.TimberElement.copy", "api/generated/compas_timber.elements.TimberElement.from_json", "api/generated/compas_timber.elements.TimberElement.from_jsonstring", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension", "api/generated/compas_timber.elements.TimberElement.remove_features", "api/generated/compas_timber.elements.TimberElement.reset", "api/generated/compas_timber.elements.TimberElement.sha256", "api/generated/compas_timber.elements.TimberElement.to_json", "api/generated/compas_timber.elements.TimberElement.to_jsonstring", "api/generated/compas_timber.elements.TimberElement.transform", "api/generated/compas_timber.elements.TimberElement.transformed", "api/generated/compas_timber.elements.TimberElement.validate_data", "api/generated/compas_timber.elements.Wall", "api/generated/compas_timber.elements.Wall.ToString", "api/generated/compas_timber.elements.Wall.add_feature", "api/generated/compas_timber.elements.Wall.add_features", "api/generated/compas_timber.elements.Wall.compute_aabb", "api/generated/compas_timber.elements.Wall.compute_collision_mesh", "api/generated/compas_timber.elements.Wall.compute_geometry", "api/generated/compas_timber.elements.Wall.compute_obb", "api/generated/compas_timber.elements.Wall.compute_worldtransformation", "api/generated/compas_timber.elements.Wall.copy", "api/generated/compas_timber.elements.Wall.from_boundary", "api/generated/compas_timber.elements.Wall.from_brep", "api/generated/compas_timber.elements.Wall.from_json", "api/generated/compas_timber.elements.Wall.from_jsonstring", "api/generated/compas_timber.elements.Wall.remove_blank_extension", "api/generated/compas_timber.elements.Wall.remove_features", "api/generated/compas_timber.elements.Wall.reset", "api/generated/compas_timber.elements.Wall.rotate", "api/generated/compas_timber.elements.Wall.sha256", "api/generated/compas_timber.elements.Wall.to_json", "api/generated/compas_timber.elements.Wall.to_jsonstring", "api/generated/compas_timber.elements.Wall.transform", "api/generated/compas_timber.elements.Wall.transformed", "api/generated/compas_timber.elements.Wall.validate_data", "api/generated/compas_timber.errors.BeamJoiningError", "api/generated/compas_timber.errors.FastenerApplicationError", "api/generated/compas_timber.errors.FeatureApplicationError", "api/generated/compas_timber.fabrication.BTLxPart", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face", "api/generated/compas_timber.fabrication.BTLxProcessing", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing", "api/generated/compas_timber.fabrication.BTLxProcessing.copy", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data", "api/generated/compas_timber.fabrication.BTLxWriter", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer", "api/generated/compas_timber.fabrication.BTLxWriter.write", "api/generated/compas_timber.fabrication.DoubleCut", "api/generated/compas_timber.fabrication.DoubleCut.ToString", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing", "api/generated/compas_timber.fabrication.DoubleCut.apply", "api/generated/compas_timber.fabrication.DoubleCut.copy", "api/generated/compas_timber.fabrication.DoubleCut.from_json", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.scale", "api/generated/compas_timber.fabrication.DoubleCut.scaled", "api/generated/compas_timber.fabrication.DoubleCut.sha256", "api/generated/compas_timber.fabrication.DoubleCut.to_json", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.validate_data", "api/generated/compas_timber.fabrication.DovetailMortise", "api/generated/compas_timber.fabrication.DovetailMortise.ToString", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailMortise.apply", "api/generated/compas_timber.fabrication.DovetailMortise.copy", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_json", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.scale", "api/generated/compas_timber.fabrication.DovetailMortise.scaled", "api/generated/compas_timber.fabrication.DovetailMortise.sha256", "api/generated/compas_timber.fabrication.DovetailMortise.to_json", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data", "api/generated/compas_timber.fabrication.DovetailTenon", "api/generated/compas_timber.fabrication.DovetailTenon.ToString", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailTenon.apply", "api/generated/compas_timber.fabrication.DovetailTenon.copy", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.from_json", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.scale", "api/generated/compas_timber.fabrication.DovetailTenon.scaled", "api/generated/compas_timber.fabrication.DovetailTenon.sha256", "api/generated/compas_timber.fabrication.DovetailTenon.to_json", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data", "api/generated/compas_timber.fabrication.Drilling", "api/generated/compas_timber.fabrication.Drilling.ToString", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing", "api/generated/compas_timber.fabrication.Drilling.apply", "api/generated/compas_timber.fabrication.Drilling.copy", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element", "api/generated/compas_timber.fabrication.Drilling.from_json", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element", "api/generated/compas_timber.fabrication.Drilling.scale", "api/generated/compas_timber.fabrication.Drilling.scaled", "api/generated/compas_timber.fabrication.Drilling.sha256", "api/generated/compas_timber.fabrication.Drilling.to_json", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring", "api/generated/compas_timber.fabrication.Drilling.validate_data", "api/generated/compas_timber.fabrication.EdgePositionType", "api/generated/compas_timber.fabrication.FrenchRidgeLap", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data", "api/generated/compas_timber.fabrication.JackRafterCut", "api/generated/compas_timber.fabrication.JackRafterCut.ToString", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing", "api/generated/compas_timber.fabrication.JackRafterCut.apply", "api/generated/compas_timber.fabrication.JackRafterCut.copy", "api/generated/compas_timber.fabrication.JackRafterCut.from_json", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.scale", "api/generated/compas_timber.fabrication.JackRafterCut.scaled", "api/generated/compas_timber.fabrication.JackRafterCut.sha256", "api/generated/compas_timber.fabrication.JackRafterCut.to_json", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data", "api/generated/compas_timber.fabrication.Lap", "api/generated/compas_timber.fabrication.Lap.ToString", "api/generated/compas_timber.fabrication.Lap.add_subprocessing", "api/generated/compas_timber.fabrication.Lap.apply", "api/generated/compas_timber.fabrication.Lap.copy", "api/generated/compas_timber.fabrication.Lap.from_json", "api/generated/compas_timber.fabrication.Lap.from_jsonstring", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam", "api/generated/compas_timber.fabrication.Lap.scale", "api/generated/compas_timber.fabrication.Lap.scaled", "api/generated/compas_timber.fabrication.Lap.sha256", "api/generated/compas_timber.fabrication.Lap.to_json", "api/generated/compas_timber.fabrication.Lap.to_jsonstring", "api/generated/compas_timber.fabrication.Lap.validate_data", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.LimitationTopType", "api/generated/compas_timber.fabrication.LongitudinalCut", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing", "api/generated/compas_timber.fabrication.LongitudinalCut.apply", "api/generated/compas_timber.fabrication.LongitudinalCut.copy", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.MachiningLimits", "api/generated/compas_timber.fabrication.Mortise", "api/generated/compas_timber.fabrication.Mortise.ToString", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing", "api/generated/compas_timber.fabrication.Mortise.apply", "api/generated/compas_timber.fabrication.Mortise.copy", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_json", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring", "api/generated/compas_timber.fabrication.Mortise.scale", "api/generated/compas_timber.fabrication.Mortise.scaled", "api/generated/compas_timber.fabrication.Mortise.sha256", "api/generated/compas_timber.fabrication.Mortise.to_json", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring", "api/generated/compas_timber.fabrication.Mortise.validate_data", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.OrientationType", "api/generated/compas_timber.fabrication.Pocket", "api/generated/compas_timber.fabrication.Pocket.ToString", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing", "api/generated/compas_timber.fabrication.Pocket.apply", "api/generated/compas_timber.fabrication.Pocket.copy", "api/generated/compas_timber.fabrication.Pocket.from_json", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element", "api/generated/compas_timber.fabrication.Pocket.scale", "api/generated/compas_timber.fabrication.Pocket.scaled", "api/generated/compas_timber.fabrication.Pocket.sha256", "api/generated/compas_timber.fabrication.Pocket.to_json", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring", "api/generated/compas_timber.fabrication.Pocket.validate_data", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element", "api/generated/compas_timber.fabrication.Slot", "api/generated/compas_timber.fabrication.Slot.ToString", "api/generated/compas_timber.fabrication.Slot.add_subprocessing", "api/generated/compas_timber.fabrication.Slot.apply", "api/generated/compas_timber.fabrication.Slot.copy", "api/generated/compas_timber.fabrication.Slot.from_json", "api/generated/compas_timber.fabrication.Slot.from_jsonstring", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam", "api/generated/compas_timber.fabrication.Slot.scale", "api/generated/compas_timber.fabrication.Slot.scaled", "api/generated/compas_timber.fabrication.Slot.sha256", "api/generated/compas_timber.fabrication.Slot.to_json", "api/generated/compas_timber.fabrication.Slot.to_jsonstring", "api/generated/compas_timber.fabrication.Slot.validate_data", "api/generated/compas_timber.fabrication.StepJoint", "api/generated/compas_timber.fabrication.StepJoint.ToString", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing", "api/generated/compas_timber.fabrication.StepJoint.add_tenon", "api/generated/compas_timber.fabrication.StepJoint.apply", "api/generated/compas_timber.fabrication.StepJoint.copy", "api/generated/compas_timber.fabrication.StepJoint.from_json", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.scale", "api/generated/compas_timber.fabrication.StepJoint.scaled", "api/generated/compas_timber.fabrication.StepJoint.sha256", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.to_json", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.validate_data", "api/generated/compas_timber.fabrication.StepJointNotch", "api/generated/compas_timber.fabrication.StepJointNotch.ToString", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing", "api/generated/compas_timber.fabrication.StepJointNotch.apply", "api/generated/compas_timber.fabrication.StepJointNotch.copy", "api/generated/compas_timber.fabrication.StepJointNotch.from_json", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.scale", "api/generated/compas_timber.fabrication.StepJointNotch.scaled", "api/generated/compas_timber.fabrication.StepJointNotch.sha256", "api/generated/compas_timber.fabrication.StepJointNotch.to_json", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data", "api/generated/compas_timber.fabrication.StepShapeType", "api/generated/compas_timber.fabrication.Tenon", "api/generated/compas_timber.fabrication.Tenon.ToString", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing", "api/generated/compas_timber.fabrication.Tenon.apply", "api/generated/compas_timber.fabrication.Tenon.copy", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Tenon.from_json", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.Tenon.scale", "api/generated/compas_timber.fabrication.Tenon.scaled", "api/generated/compas_timber.fabrication.Tenon.sha256", "api/generated/compas_timber.fabrication.Tenon.to_json", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring", "api/generated/compas_timber.fabrication.Tenon.validate_data", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.TenonShapeType", "api/generated/compas_timber.ghpython.add_gh_param", "api/generated/compas_timber.ghpython.clear_gh_params", "api/generated/compas_timber.ghpython.get_leaf_subclasses", "api/generated/compas_timber.ghpython.item_input_valid", "api/generated/compas_timber.ghpython.list_input_valid", "api/generated/compas_timber.ghpython.manage_dynamic_params", "api/generated/compas_timber.ghpython.rename_gh_input", "api/generated/compas_timber.model.TimberModel", "api/generated/compas_timber.model.TimberModel.ToString", "api/generated/compas_timber.model.TimberModel.add_element", "api/generated/compas_timber.model.TimberModel.add_elements", "api/generated/compas_timber.model.TimberModel.add_group", "api/generated/compas_timber.model.TimberModel.add_group_element", "api/generated/compas_timber.model.TimberModel.add_interaction", "api/generated/compas_timber.model.TimberModel.add_joint", "api/generated/compas_timber.model.TimberModel.add_material", "api/generated/compas_timber.model.TimberModel.assign_material", "api/generated/compas_timber.model.TimberModel.compute_aabb", "api/generated/compas_timber.model.TimberModel.compute_obb", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls", "api/generated/compas_timber.model.TimberModel.copy", "api/generated/compas_timber.model.TimberModel.element_by_guid", "api/generated/compas_timber.model.TimberModel.elements", "api/generated/compas_timber.model.TimberModel.elements_connected_by", "api/generated/compas_timber.model.TimberModel.from_json", "api/generated/compas_timber.model.TimberModel.from_jsonstring", "api/generated/compas_timber.model.TimberModel.get_elements_in_group", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element", "api/generated/compas_timber.model.TimberModel.has_element", "api/generated/compas_timber.model.TimberModel.has_group", "api/generated/compas_timber.model.TimberModel.has_interaction", "api/generated/compas_timber.model.TimberModel.has_material", "api/generated/compas_timber.model.TimberModel.interactions", "api/generated/compas_timber.model.TimberModel.materials", "api/generated/compas_timber.model.TimberModel.process_joinery", "api/generated/compas_timber.model.TimberModel.remove_element", "api/generated/compas_timber.model.TimberModel.remove_interaction", "api/generated/compas_timber.model.TimberModel.remove_joint", "api/generated/compas_timber.model.TimberModel.rotate", "api/generated/compas_timber.model.TimberModel.rotated", "api/generated/compas_timber.model.TimberModel.scale", "api/generated/compas_timber.model.TimberModel.scaled", "api/generated/compas_timber.model.TimberModel.set_topologies", "api/generated/compas_timber.model.TimberModel.sha256", "api/generated/compas_timber.model.TimberModel.to_json", "api/generated/compas_timber.model.TimberModel.to_jsonstring", "api/generated/compas_timber.model.TimberModel.transform", "api/generated/compas_timber.model.TimberModel.transform_numpy", "api/generated/compas_timber.model.TimberModel.transformed", "api/generated/compas_timber.model.TimberModel.transformed_numpy", "api/generated/compas_timber.model.TimberModel.translate", "api/generated/compas_timber.model.TimberModel.translated", "api/generated/compas_timber.model.TimberModel.validate_data", "api/generated/compas_timber.planning.Actor", "api/generated/compas_timber.planning.Actor.get_name", "api/generated/compas_timber.planning.BuildingPlan", "api/generated/compas_timber.planning.BuildingPlan.ToString", "api/generated/compas_timber.planning.BuildingPlan.add_step", "api/generated/compas_timber.planning.BuildingPlan.copy", "api/generated/compas_timber.planning.BuildingPlan.from_json", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.sha256", "api/generated/compas_timber.planning.BuildingPlan.to_json", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.validate_data", "api/generated/compas_timber.planning.BuildingPlanParser", "api/generated/compas_timber.planning.BuildingPlanParser.parse", "api/generated/compas_timber.planning.BuildingPlanParser.serialize", "api/generated/compas_timber.planning.Instruction", "api/generated/compas_timber.planning.Instruction.ToString", "api/generated/compas_timber.planning.Instruction.copy", "api/generated/compas_timber.planning.Instruction.from_json", "api/generated/compas_timber.planning.Instruction.from_jsonstring", "api/generated/compas_timber.planning.Instruction.sha256", "api/generated/compas_timber.planning.Instruction.to_json", "api/generated/compas_timber.planning.Instruction.to_jsonstring", "api/generated/compas_timber.planning.Instruction.transform", "api/generated/compas_timber.planning.Instruction.validate_data", "api/generated/compas_timber.planning.LinearDimension", "api/generated/compas_timber.planning.LinearDimension.ToString", "api/generated/compas_timber.planning.LinearDimension.copy", "api/generated/compas_timber.planning.LinearDimension.from_json", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring", "api/generated/compas_timber.planning.LinearDimension.sha256", "api/generated/compas_timber.planning.LinearDimension.to_json", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring", "api/generated/compas_timber.planning.LinearDimension.transform", "api/generated/compas_timber.planning.LinearDimension.validate_data", "api/generated/compas_timber.planning.Model3d", "api/generated/compas_timber.planning.Model3d.ToString", "api/generated/compas_timber.planning.Model3d.copy", "api/generated/compas_timber.planning.Model3d.from_json", "api/generated/compas_timber.planning.Model3d.from_jsonstring", "api/generated/compas_timber.planning.Model3d.sha256", "api/generated/compas_timber.planning.Model3d.to_json", "api/generated/compas_timber.planning.Model3d.to_jsonstring", "api/generated/compas_timber.planning.Model3d.transform", "api/generated/compas_timber.planning.Model3d.validate_data", "api/generated/compas_timber.planning.SimpleSequenceGenerator", "api/generated/compas_timber.planning.Step", "api/generated/compas_timber.planning.Step.ToString", "api/generated/compas_timber.planning.Step.copy", "api/generated/compas_timber.planning.Step.from_json", "api/generated/compas_timber.planning.Step.from_jsonstring", "api/generated/compas_timber.planning.Step.sha256", "api/generated/compas_timber.planning.Step.to_json", "api/generated/compas_timber.planning.Step.to_jsonstring", "api/generated/compas_timber.planning.Step.transform", "api/generated/compas_timber.planning.Step.validate_data", "api/generated/compas_timber.planning.Text3d", "api/generated/compas_timber.planning.Text3d.ToString", "api/generated/compas_timber.planning.Text3d.copy", "api/generated/compas_timber.planning.Text3d.from_json", "api/generated/compas_timber.planning.Text3d.from_jsonstring", "api/generated/compas_timber.planning.Text3d.sha256", "api/generated/compas_timber.planning.Text3d.to_json", "api/generated/compas_timber.planning.Text3d.to_jsonstring", "api/generated/compas_timber.planning.Text3d.transform", "api/generated/compas_timber.planning.Text3d.validate_data", "api/generated/compas_timber.rhino.find_neighboring_elements", "citing", "examples", "examples/create_joint", "index", "installation", "license", "tutorials", "tutorials/BTLx_contribution_guide", "tutorials/grasshopper/attributes", "tutorials/grasshopper/beams", "tutorials/grasshopper/design", "tutorials/grasshopper/examples", "tutorials/grasshopper/fabrication", "tutorials/grasshopper/features", "tutorials/grasshopper/installation", "tutorials/grasshopper/joint_rules", "tutorials/grasshopper/model", "tutorials/grasshopper/show", "tutorials/grasshopper/utils", "tutorials/grasshopper/workflow"], "filenames": ["api.rst", "api/compas_timber.connections.rst", "api/compas_timber.design.rst", "api/compas_timber.elements.rst", "api/compas_timber.errors.rst", "api/compas_timber.fabrication.rst", "api/compas_timber.ghpython.rst", "api/compas_timber.model.rst", "api/compas_timber.planning.rst", "api/compas_timber.rhino.rst", "api/generated/compas_timber.connections.BallNodeJoint.rst", "api/generated/compas_timber.connections.BallNodeJoint.ToString.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_features.rst", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.BallNodeJoint.copy.rst", "api/generated/compas_timber.connections.BallNodeJoint.create.rst", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.BallNodeJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.BallNodeJoint.sha256.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.validate_data.rst", "api/generated/compas_timber.connections.ConnectionSolver.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_topology.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology.rst", "api/generated/compas_timber.connections.Joint.rst", "api/generated/compas_timber.connections.Joint.ToString.rst", "api/generated/compas_timber.connections.Joint.add_extensions.rst", "api/generated/compas_timber.connections.Joint.add_features.rst", "api/generated/compas_timber.connections.Joint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.Joint.copy.rst", "api/generated/compas_timber.connections.Joint.create.rst", "api/generated/compas_timber.connections.Joint.element_count_complies.rst", "api/generated/compas_timber.connections.Joint.from_json.rst", "api/generated/compas_timber.connections.Joint.from_jsonstring.rst", "api/generated/compas_timber.connections.Joint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.Joint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.Joint.sha256.rst", "api/generated/compas_timber.connections.Joint.to_json.rst", "api/generated/compas_timber.connections.Joint.to_jsonstring.rst", "api/generated/compas_timber.connections.Joint.validate_data.rst", "api/generated/compas_timber.connections.JointTopology.rst", "api/generated/compas_timber.connections.JointTopology.get_name.rst", "api/generated/compas_timber.connections.LButtJoint.rst", "api/generated/compas_timber.connections.LButtJoint.ToString.rst", "api/generated/compas_timber.connections.LButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.LButtJoint.add_features.rst", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LButtJoint.copy.rst", "api/generated/compas_timber.connections.LButtJoint.create.rst", "api/generated/compas_timber.connections.LButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LButtJoint.from_json.rst", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LButtJoint.sha256.rst", "api/generated/compas_timber.connections.LButtJoint.to_json.rst", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles.rst", "api/generated/compas_timber.connections.LButtJoint.validate_data.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LLapJoint.rst", "api/generated/compas_timber.connections.LLapJoint.ToString.rst", "api/generated/compas_timber.connections.LLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LLapJoint.add_features.rst", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LLapJoint.copy.rst", "api/generated/compas_timber.connections.LLapJoint.create.rst", "api/generated/compas_timber.connections.LLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LLapJoint.from_json.rst", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LLapJoint.sha256.rst", "api/generated/compas_timber.connections.LLapJoint.to_json.rst", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LMiterJoint.rst", "api/generated/compas_timber.connections.LMiterJoint.ToString.rst", "api/generated/compas_timber.connections.LMiterJoint.add_extensions.rst", "api/generated/compas_timber.connections.LMiterJoint.add_features.rst", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LMiterJoint.copy.rst", "api/generated/compas_timber.connections.LMiterJoint.create.rst", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LMiterJoint.from_json.rst", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes.rst", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LMiterJoint.sha256.rst", "api/generated/compas_timber.connections.LMiterJoint.to_json.rst", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.validate_data.rst", "api/generated/compas_timber.connections.LapJoint.rst", "api/generated/compas_timber.connections.LapJoint.ToString.rst", "api/generated/compas_timber.connections.LapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LapJoint.add_features.rst", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LapJoint.copy.rst", "api/generated/compas_timber.connections.LapJoint.create.rst", "api/generated/compas_timber.connections.LapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LapJoint.from_json.rst", "api/generated/compas_timber.connections.LapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LapJoint.sha256.rst", "api/generated/compas_timber.connections.LapJoint.to_json.rst", "api/generated/compas_timber.connections.LapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.validate_data.rst", "api/generated/compas_timber.connections.NullJoint.rst", "api/generated/compas_timber.connections.NullJoint.ToString.rst", "api/generated/compas_timber.connections.NullJoint.add_extensions.rst", "api/generated/compas_timber.connections.NullJoint.add_features.rst", "api/generated/compas_timber.connections.NullJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.NullJoint.copy.rst", "api/generated/compas_timber.connections.NullJoint.create.rst", "api/generated/compas_timber.connections.NullJoint.element_count_complies.rst", "api/generated/compas_timber.connections.NullJoint.from_json.rst", "api/generated/compas_timber.connections.NullJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.NullJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.NullJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.NullJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.NullJoint.sha256.rst", "api/generated/compas_timber.connections.NullJoint.to_json.rst", "api/generated/compas_timber.connections.NullJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.NullJoint.validate_data.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.create.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data.rst", "api/generated/compas_timber.connections.TButtJoint.rst", "api/generated/compas_timber.connections.TButtJoint.ToString.rst", "api/generated/compas_timber.connections.TButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.TButtJoint.add_features.rst", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TButtJoint.copy.rst", "api/generated/compas_timber.connections.TButtJoint.create.rst", "api/generated/compas_timber.connections.TButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TButtJoint.from_json.rst", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TButtJoint.sha256.rst", "api/generated/compas_timber.connections.TButtJoint.to_json.rst", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.validate_data.rst", "api/generated/compas_timber.connections.TDovetailJoint.rst", "api/generated/compas_timber.connections.TDovetailJoint.ToString.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_features.rst", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TDovetailJoint.copy.rst", "api/generated/compas_timber.connections.TDovetailJoint.create.rst", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool.rst", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TDovetailJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TDovetailJoint.sha256.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.validate_data.rst", "api/generated/compas_timber.connections.TLapJoint.rst", "api/generated/compas_timber.connections.TLapJoint.ToString.rst", "api/generated/compas_timber.connections.TLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.TLapJoint.add_features.rst", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TLapJoint.copy.rst", "api/generated/compas_timber.connections.TLapJoint.create.rst", "api/generated/compas_timber.connections.TLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TLapJoint.from_json.rst", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TLapJoint.sha256.rst", "api/generated/compas_timber.connections.TLapJoint.to_json.rst", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.validate_data.rst", "api/generated/compas_timber.connections.TStepJoint.rst", "api/generated/compas_timber.connections.TStepJoint.ToString.rst", "api/generated/compas_timber.connections.TStepJoint.add_extensions.rst", "api/generated/compas_timber.connections.TStepJoint.add_features.rst", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TStepJoint.copy.rst", "api/generated/compas_timber.connections.TStepJoint.create.rst", "api/generated/compas_timber.connections.TStepJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TStepJoint.from_json.rst", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TStepJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TStepJoint.set_step_depths.rst", "api/generated/compas_timber.connections.TStepJoint.sha256.rst", "api/generated/compas_timber.connections.TStepJoint.to_json.rst", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.validate_data.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.copy.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.create.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data.rst", "api/generated/compas_timber.connections.XLapJoint.rst", "api/generated/compas_timber.connections.XLapJoint.ToString.rst", "api/generated/compas_timber.connections.XLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.XLapJoint.add_features.rst", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XLapJoint.copy.rst", "api/generated/compas_timber.connections.XLapJoint.create.rst", "api/generated/compas_timber.connections.XLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XLapJoint.from_json.rst", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.XLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XLapJoint.sha256.rst", "api/generated/compas_timber.connections.XLapJoint.to_json.rst", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.validate_data.rst", "api/generated/compas_timber.connections.XNotchJoint.rst", "api/generated/compas_timber.connections.XNotchJoint.ToString.rst", "api/generated/compas_timber.connections.XNotchJoint.add_extensions.rst", "api/generated/compas_timber.connections.XNotchJoint.add_features.rst", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XNotchJoint.copy.rst", "api/generated/compas_timber.connections.XNotchJoint.create.rst", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XNotchJoint.from_json.rst", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.XNotchJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XNotchJoint.sha256.rst", "api/generated/compas_timber.connections.XNotchJoint.to_json.rst", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.validate_data.rst", "api/generated/compas_timber.connections.YButtJoint.rst", "api/generated/compas_timber.connections.YButtJoint.ToString.rst", "api/generated/compas_timber.connections.YButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.YButtJoint.add_features.rst", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.YButtJoint.copy.rst", "api/generated/compas_timber.connections.YButtJoint.create.rst", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.YButtJoint.from_json.rst", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.YButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes.rst", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.YButtJoint.sha256.rst", "api/generated/compas_timber.connections.YButtJoint.to_json.rst", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.validate_data.rst", "api/generated/compas_timber.connections.find_neighboring_elements.rst", "api/generated/compas_timber.design.CategoryRule.rst", "api/generated/compas_timber.design.CategoryRule.ToString.rst", "api/generated/compas_timber.design.CategoryRule.comply.rst", "api/generated/compas_timber.design.CategoryRule.get_category_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_direct_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_topology_rules.rst", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.CategoryRule.reorder.rst", "api/generated/compas_timber.design.DebugInfomation.rst", "api/generated/compas_timber.design.DebugInfomation.ToString.rst", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_feature_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_joint_error.rst", "api/generated/compas_timber.design.DirectRule.rst", "api/generated/compas_timber.design.DirectRule.ToString.rst", "api/generated/compas_timber.design.DirectRule.comply.rst", "api/generated/compas_timber.design.DirectRule.contains.rst", "api/generated/compas_timber.design.DirectRule.get_category_rules.rst", "api/generated/compas_timber.design.DirectRule.get_direct_rules.rst", "api/generated/compas_timber.design.DirectRule.get_topology_rules.rst", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.FeatureDefinition.rst", "api/generated/compas_timber.design.FeatureDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.rst", "api/generated/compas_timber.design.JointDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.is_identical.rst", "api/generated/compas_timber.design.JointDefinition.match.rst", "api/generated/compas_timber.design.JointRule.rst", "api/generated/compas_timber.design.JointRule.comply.rst", "api/generated/compas_timber.design.JointRule.get_category_rules.rst", "api/generated/compas_timber.design.JointRule.get_direct_rules.rst", "api/generated/compas_timber.design.JointRule.get_topology_rules.rst", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.SurfaceModel.rst", "api/generated/compas_timber.design.SurfaceModel.beam_category_names.rst", "api/generated/compas_timber.design.SurfaceModel.create_model.rst", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps.rst", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements.rst", "api/generated/compas_timber.design.SurfaceModel.generate_frame.rst", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams.rst", "api/generated/compas_timber.design.SurfaceModel.generate_plates.rst", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines.rst", "api/generated/compas_timber.design.SurfaceModel.generate_studs.rst", "api/generated/compas_timber.design.SurfaceModel.generate_windows.rst", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections.rst", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices.rst", "api/generated/compas_timber.design.SurfaceModel.offset_elements.rst", "api/generated/compas_timber.design.SurfaceModel.parse_loops.rst", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_studs.rst", "api/generated/compas_timber.design.TopologyRule.rst", "api/generated/compas_timber.design.TopologyRule.ToString.rst", "api/generated/compas_timber.design.TopologyRule.comply.rst", "api/generated/compas_timber.design.TopologyRule.get_category_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_direct_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_topology_rules.rst", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.guess_joint_topology_2beams.rst", "api/generated/compas_timber.design.set_default_joints.rst", "api/generated/compas_timber.elements.Beam.rst", "api/generated/compas_timber.elements.Beam.ToString.rst", "api/generated/compas_timber.elements.Beam.add_blank_extension.rst", "api/generated/compas_timber.elements.Beam.add_feature.rst", "api/generated/compas_timber.elements.Beam.add_features.rst", "api/generated/compas_timber.elements.Beam.back_side.rst", "api/generated/compas_timber.elements.Beam.compute_aabb.rst", "api/generated/compas_timber.elements.Beam.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Beam.compute_geometry.rst", "api/generated/compas_timber.elements.Beam.compute_obb.rst", "api/generated/compas_timber.elements.Beam.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Beam.copy.rst", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point.rst", "api/generated/compas_timber.elements.Beam.extension_to_plane.rst", "api/generated/compas_timber.elements.Beam.from_centerline.rst", "api/generated/compas_timber.elements.Beam.from_endpoints.rst", "api/generated/compas_timber.elements.Beam.from_json.rst", "api/generated/compas_timber.elements.Beam.from_jsonstring.rst", "api/generated/compas_timber.elements.Beam.front_side.rst", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side.rst", "api/generated/compas_timber.elements.Beam.opp_side.rst", "api/generated/compas_timber.elements.Beam.remove_blank_extension.rst", "api/generated/compas_timber.elements.Beam.remove_features.rst", "api/generated/compas_timber.elements.Beam.reset.rst", "api/generated/compas_timber.elements.Beam.sha256.rst", "api/generated/compas_timber.elements.Beam.side_as_surface.rst", "api/generated/compas_timber.elements.Beam.to_json.rst", "api/generated/compas_timber.elements.Beam.to_jsonstring.rst", "api/generated/compas_timber.elements.Beam.transform.rst", "api/generated/compas_timber.elements.Beam.transformed.rst", "api/generated/compas_timber.elements.Beam.validate_data.rst", "api/generated/compas_timber.elements.Fastener.rst", "api/generated/compas_timber.elements.Fastener.ToString.rst", "api/generated/compas_timber.elements.Fastener.add_feature.rst", "api/generated/compas_timber.elements.Fastener.add_features.rst", "api/generated/compas_timber.elements.Fastener.compute_aabb.rst", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Fastener.compute_geometry.rst", "api/generated/compas_timber.elements.Fastener.compute_obb.rst", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Fastener.copy.rst", "api/generated/compas_timber.elements.Fastener.from_json.rst", "api/generated/compas_timber.elements.Fastener.from_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.remove_blank_extension.rst", "api/generated/compas_timber.elements.Fastener.remove_features.rst", "api/generated/compas_timber.elements.Fastener.reset.rst", "api/generated/compas_timber.elements.Fastener.sha256.rst", "api/generated/compas_timber.elements.Fastener.to_json.rst", "api/generated/compas_timber.elements.Fastener.to_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.transform.rst", "api/generated/compas_timber.elements.Fastener.transformed.rst", "api/generated/compas_timber.elements.Fastener.validate_data.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.copy.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data.rst", "api/generated/compas_timber.elements.Plate.rst", "api/generated/compas_timber.elements.Plate.ToString.rst", "api/generated/compas_timber.elements.Plate.add_feature.rst", "api/generated/compas_timber.elements.Plate.add_features.rst", "api/generated/compas_timber.elements.Plate.compute_aabb.rst", "api/generated/compas_timber.elements.Plate.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Plate.compute_geometry.rst", "api/generated/compas_timber.elements.Plate.compute_obb.rst", "api/generated/compas_timber.elements.Plate.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Plate.copy.rst", "api/generated/compas_timber.elements.Plate.from_json.rst", "api/generated/compas_timber.elements.Plate.from_jsonstring.rst", "api/generated/compas_timber.elements.Plate.from_outline_thickness.rst", "api/generated/compas_timber.elements.Plate.remove_blank_extension.rst", "api/generated/compas_timber.elements.Plate.remove_features.rst", "api/generated/compas_timber.elements.Plate.reset.rst", "api/generated/compas_timber.elements.Plate.sha256.rst", "api/generated/compas_timber.elements.Plate.shape.rst", "api/generated/compas_timber.elements.Plate.side_as_surface.rst", "api/generated/compas_timber.elements.Plate.to_json.rst", "api/generated/compas_timber.elements.Plate.to_jsonstring.rst", "api/generated/compas_timber.elements.Plate.transform.rst", "api/generated/compas_timber.elements.Plate.transformed.rst", "api/generated/compas_timber.elements.Plate.validate_data.rst", "api/generated/compas_timber.elements.TimberElement.rst", "api/generated/compas_timber.elements.TimberElement.ToString.rst", "api/generated/compas_timber.elements.TimberElement.add_feature.rst", "api/generated/compas_timber.elements.TimberElement.add_features.rst", "api/generated/compas_timber.elements.TimberElement.compute_aabb.rst", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh.rst", "api/generated/compas_timber.elements.TimberElement.compute_geometry.rst", "api/generated/compas_timber.elements.TimberElement.compute_obb.rst", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation.rst", "api/generated/compas_timber.elements.TimberElement.copy.rst", "api/generated/compas_timber.elements.TimberElement.from_json.rst", "api/generated/compas_timber.elements.TimberElement.from_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension.rst", "api/generated/compas_timber.elements.TimberElement.remove_features.rst", "api/generated/compas_timber.elements.TimberElement.reset.rst", "api/generated/compas_timber.elements.TimberElement.sha256.rst", "api/generated/compas_timber.elements.TimberElement.to_json.rst", "api/generated/compas_timber.elements.TimberElement.to_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.transform.rst", "api/generated/compas_timber.elements.TimberElement.transformed.rst", "api/generated/compas_timber.elements.TimberElement.validate_data.rst", "api/generated/compas_timber.elements.Wall.rst", "api/generated/compas_timber.elements.Wall.ToString.rst", "api/generated/compas_timber.elements.Wall.add_feature.rst", "api/generated/compas_timber.elements.Wall.add_features.rst", "api/generated/compas_timber.elements.Wall.compute_aabb.rst", "api/generated/compas_timber.elements.Wall.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Wall.compute_geometry.rst", "api/generated/compas_timber.elements.Wall.compute_obb.rst", "api/generated/compas_timber.elements.Wall.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Wall.copy.rst", "api/generated/compas_timber.elements.Wall.from_boundary.rst", "api/generated/compas_timber.elements.Wall.from_brep.rst", "api/generated/compas_timber.elements.Wall.from_json.rst", "api/generated/compas_timber.elements.Wall.from_jsonstring.rst", "api/generated/compas_timber.elements.Wall.remove_blank_extension.rst", "api/generated/compas_timber.elements.Wall.remove_features.rst", "api/generated/compas_timber.elements.Wall.reset.rst", "api/generated/compas_timber.elements.Wall.rotate.rst", "api/generated/compas_timber.elements.Wall.sha256.rst", "api/generated/compas_timber.elements.Wall.to_json.rst", "api/generated/compas_timber.elements.Wall.to_jsonstring.rst", "api/generated/compas_timber.elements.Wall.transform.rst", "api/generated/compas_timber.elements.Wall.transformed.rst", "api/generated/compas_timber.elements.Wall.validate_data.rst", "api/generated/compas_timber.errors.BeamJoiningError.rst", "api/generated/compas_timber.errors.FastenerApplicationError.rst", "api/generated/compas_timber.errors.FeatureApplicationError.rst", "api/generated/compas_timber.fabrication.BTLxPart.rst", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals.rst", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.copy.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data.rst", "api/generated/compas_timber.fabrication.BTLxWriter.rst", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml.rst", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer.rst", "api/generated/compas_timber.fabrication.BTLxWriter.write.rst", "api/generated/compas_timber.fabrication.DoubleCut.rst", "api/generated/compas_timber.fabrication.DoubleCut.ToString.rst", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DoubleCut.apply.rst", "api/generated/compas_timber.fabrication.DoubleCut.copy.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.scale.rst", "api/generated/compas_timber.fabrication.DoubleCut.scaled.rst", "api/generated/compas_timber.fabrication.DoubleCut.sha256.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailMortise.rst", "api/generated/compas_timber.fabrication.DovetailMortise.ToString.rst", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailMortise.apply.rst", "api/generated/compas_timber.fabrication.DovetailMortise.copy.rst", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scale.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scaled.rst", "api/generated/compas_timber.fabrication.DovetailMortise.sha256.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailTenon.rst", "api/generated/compas_timber.fabrication.DovetailTenon.ToString.rst", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailTenon.apply.rst", "api/generated/compas_timber.fabrication.DovetailTenon.copy.rst", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scale.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scaled.rst", "api/generated/compas_timber.fabrication.DovetailTenon.sha256.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data.rst", "api/generated/compas_timber.fabrication.Drilling.rst", "api/generated/compas_timber.fabrication.Drilling.ToString.rst", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Drilling.apply.rst", "api/generated/compas_timber.fabrication.Drilling.copy.rst", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_json.rst", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.scale.rst", "api/generated/compas_timber.fabrication.Drilling.scaled.rst", "api/generated/compas_timber.fabrication.Drilling.sha256.rst", "api/generated/compas_timber.fabrication.Drilling.to_json.rst", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.validate_data.rst", "api/generated/compas_timber.fabrication.EdgePositionType.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data.rst", "api/generated/compas_timber.fabrication.JackRafterCut.rst", "api/generated/compas_timber.fabrication.JackRafterCut.ToString.rst", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.JackRafterCut.apply.rst", "api/generated/compas_timber.fabrication.JackRafterCut.copy.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scale.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scaled.rst", "api/generated/compas_timber.fabrication.JackRafterCut.sha256.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.rst", "api/generated/compas_timber.fabrication.Lap.ToString.rst", "api/generated/compas_timber.fabrication.Lap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Lap.apply.rst", "api/generated/compas_timber.fabrication.Lap.copy.rst", "api/generated/compas_timber.fabrication.Lap.from_json.rst", "api/generated/compas_timber.fabrication.Lap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.scale.rst", "api/generated/compas_timber.fabrication.Lap.scaled.rst", "api/generated/compas_timber.fabrication.Lap.sha256.rst", "api/generated/compas_timber.fabrication.Lap.to_json.rst", "api/generated/compas_timber.fabrication.Lap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LimitationTopType.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.apply.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.copy.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.MachiningLimits.rst", "api/generated/compas_timber.fabrication.Mortise.rst", "api/generated/compas_timber.fabrication.Mortise.ToString.rst", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Mortise.apply.rst", "api/generated/compas_timber.fabrication.Mortise.copy.rst", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_json.rst", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.scale.rst", "api/generated/compas_timber.fabrication.Mortise.scaled.rst", "api/generated/compas_timber.fabrication.Mortise.sha256.rst", "api/generated/compas_timber.fabrication.Mortise.to_json.rst", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.validate_data.rst", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.OrientationType.rst", "api/generated/compas_timber.fabrication.Pocket.rst", "api/generated/compas_timber.fabrication.Pocket.ToString.rst", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Pocket.apply.rst", "api/generated/compas_timber.fabrication.Pocket.copy.rst", "api/generated/compas_timber.fabrication.Pocket.from_json.rst", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.scale.rst", "api/generated/compas_timber.fabrication.Pocket.scaled.rst", "api/generated/compas_timber.fabrication.Pocket.sha256.rst", "api/generated/compas_timber.fabrication.Pocket.to_json.rst", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.validate_data.rst", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Slot.rst", "api/generated/compas_timber.fabrication.Slot.ToString.rst", "api/generated/compas_timber.fabrication.Slot.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Slot.apply.rst", "api/generated/compas_timber.fabrication.Slot.copy.rst", "api/generated/compas_timber.fabrication.Slot.from_json.rst", "api/generated/compas_timber.fabrication.Slot.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Slot.scale.rst", "api/generated/compas_timber.fabrication.Slot.scaled.rst", "api/generated/compas_timber.fabrication.Slot.sha256.rst", "api/generated/compas_timber.fabrication.Slot.to_json.rst", "api/generated/compas_timber.fabrication.Slot.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.validate_data.rst", "api/generated/compas_timber.fabrication.StepJoint.rst", "api/generated/compas_timber.fabrication.StepJoint.ToString.rst", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJoint.add_tenon.rst", "api/generated/compas_timber.fabrication.StepJoint.apply.rst", "api/generated/compas_timber.fabrication.StepJoint.copy.rst", "api/generated/compas_timber.fabrication.StepJoint.from_json.rst", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.scale.rst", "api/generated/compas_timber.fabrication.StepJoint.scaled.rst", "api/generated/compas_timber.fabrication.StepJoint.sha256.rst", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.to_json.rst", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.validate_data.rst", "api/generated/compas_timber.fabrication.StepJointNotch.rst", "api/generated/compas_timber.fabrication.StepJointNotch.ToString.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJointNotch.apply.rst", "api/generated/compas_timber.fabrication.StepJointNotch.copy.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scale.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scaled.rst", "api/generated/compas_timber.fabrication.StepJointNotch.sha256.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data.rst", "api/generated/compas_timber.fabrication.StepShapeType.rst", "api/generated/compas_timber.fabrication.Tenon.rst", "api/generated/compas_timber.fabrication.Tenon.ToString.rst", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Tenon.apply.rst", "api/generated/compas_timber.fabrication.Tenon.copy.rst", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.from_json.rst", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.scale.rst", "api/generated/compas_timber.fabrication.Tenon.scaled.rst", "api/generated/compas_timber.fabrication.Tenon.sha256.rst", "api/generated/compas_timber.fabrication.Tenon.to_json.rst", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.validate_data.rst", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.TenonShapeType.rst", "api/generated/compas_timber.ghpython.add_gh_param.rst", "api/generated/compas_timber.ghpython.clear_gh_params.rst", "api/generated/compas_timber.ghpython.get_leaf_subclasses.rst", "api/generated/compas_timber.ghpython.item_input_valid.rst", "api/generated/compas_timber.ghpython.list_input_valid.rst", "api/generated/compas_timber.ghpython.manage_dynamic_params.rst", "api/generated/compas_timber.ghpython.rename_gh_input.rst", "api/generated/compas_timber.model.TimberModel.rst", "api/generated/compas_timber.model.TimberModel.ToString.rst", "api/generated/compas_timber.model.TimberModel.add_element.rst", "api/generated/compas_timber.model.TimberModel.add_elements.rst", "api/generated/compas_timber.model.TimberModel.add_group.rst", "api/generated/compas_timber.model.TimberModel.add_group_element.rst", "api/generated/compas_timber.model.TimberModel.add_interaction.rst", "api/generated/compas_timber.model.TimberModel.add_joint.rst", "api/generated/compas_timber.model.TimberModel.add_material.rst", "api/generated/compas_timber.model.TimberModel.assign_material.rst", "api/generated/compas_timber.model.TimberModel.compute_aabb.rst", "api/generated/compas_timber.model.TimberModel.compute_obb.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls.rst", "api/generated/compas_timber.model.TimberModel.copy.rst", "api/generated/compas_timber.model.TimberModel.element_by_guid.rst", "api/generated/compas_timber.model.TimberModel.elements.rst", "api/generated/compas_timber.model.TimberModel.elements_connected_by.rst", "api/generated/compas_timber.model.TimberModel.from_json.rst", "api/generated/compas_timber.model.TimberModel.from_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.get_elements_in_group.rst", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element.rst", "api/generated/compas_timber.model.TimberModel.has_element.rst", "api/generated/compas_timber.model.TimberModel.has_group.rst", "api/generated/compas_timber.model.TimberModel.has_interaction.rst", "api/generated/compas_timber.model.TimberModel.has_material.rst", "api/generated/compas_timber.model.TimberModel.interactions.rst", "api/generated/compas_timber.model.TimberModel.materials.rst", "api/generated/compas_timber.model.TimberModel.process_joinery.rst", "api/generated/compas_timber.model.TimberModel.remove_element.rst", "api/generated/compas_timber.model.TimberModel.remove_interaction.rst", "api/generated/compas_timber.model.TimberModel.remove_joint.rst", "api/generated/compas_timber.model.TimberModel.rotate.rst", "api/generated/compas_timber.model.TimberModel.rotated.rst", "api/generated/compas_timber.model.TimberModel.scale.rst", "api/generated/compas_timber.model.TimberModel.scaled.rst", "api/generated/compas_timber.model.TimberModel.set_topologies.rst", "api/generated/compas_timber.model.TimberModel.sha256.rst", "api/generated/compas_timber.model.TimberModel.to_json.rst", "api/generated/compas_timber.model.TimberModel.to_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.transform.rst", "api/generated/compas_timber.model.TimberModel.transform_numpy.rst", "api/generated/compas_timber.model.TimberModel.transformed.rst", "api/generated/compas_timber.model.TimberModel.transformed_numpy.rst", "api/generated/compas_timber.model.TimberModel.translate.rst", "api/generated/compas_timber.model.TimberModel.translated.rst", "api/generated/compas_timber.model.TimberModel.validate_data.rst", "api/generated/compas_timber.planning.Actor.rst", "api/generated/compas_timber.planning.Actor.get_name.rst", "api/generated/compas_timber.planning.BuildingPlan.rst", "api/generated/compas_timber.planning.BuildingPlan.ToString.rst", "api/generated/compas_timber.planning.BuildingPlan.add_step.rst", "api/generated/compas_timber.planning.BuildingPlan.copy.rst", "api/generated/compas_timber.planning.BuildingPlan.from_json.rst", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.sha256.rst", "api/generated/compas_timber.planning.BuildingPlan.to_json.rst", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.validate_data.rst", "api/generated/compas_timber.planning.BuildingPlanParser.rst", "api/generated/compas_timber.planning.BuildingPlanParser.parse.rst", "api/generated/compas_timber.planning.BuildingPlanParser.serialize.rst", "api/generated/compas_timber.planning.Instruction.rst", "api/generated/compas_timber.planning.Instruction.ToString.rst", "api/generated/compas_timber.planning.Instruction.copy.rst", "api/generated/compas_timber.planning.Instruction.from_json.rst", "api/generated/compas_timber.planning.Instruction.from_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.sha256.rst", "api/generated/compas_timber.planning.Instruction.to_json.rst", "api/generated/compas_timber.planning.Instruction.to_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.transform.rst", "api/generated/compas_timber.planning.Instruction.validate_data.rst", "api/generated/compas_timber.planning.LinearDimension.rst", "api/generated/compas_timber.planning.LinearDimension.ToString.rst", "api/generated/compas_timber.planning.LinearDimension.copy.rst", "api/generated/compas_timber.planning.LinearDimension.from_json.rst", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.sha256.rst", "api/generated/compas_timber.planning.LinearDimension.to_json.rst", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.transform.rst", "api/generated/compas_timber.planning.LinearDimension.validate_data.rst", "api/generated/compas_timber.planning.Model3d.rst", "api/generated/compas_timber.planning.Model3d.ToString.rst", "api/generated/compas_timber.planning.Model3d.copy.rst", "api/generated/compas_timber.planning.Model3d.from_json.rst", "api/generated/compas_timber.planning.Model3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.sha256.rst", "api/generated/compas_timber.planning.Model3d.to_json.rst", "api/generated/compas_timber.planning.Model3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.transform.rst", "api/generated/compas_timber.planning.Model3d.validate_data.rst", "api/generated/compas_timber.planning.SimpleSequenceGenerator.rst", "api/generated/compas_timber.planning.Step.rst", "api/generated/compas_timber.planning.Step.ToString.rst", "api/generated/compas_timber.planning.Step.copy.rst", "api/generated/compas_timber.planning.Step.from_json.rst", "api/generated/compas_timber.planning.Step.from_jsonstring.rst", "api/generated/compas_timber.planning.Step.sha256.rst", "api/generated/compas_timber.planning.Step.to_json.rst", "api/generated/compas_timber.planning.Step.to_jsonstring.rst", "api/generated/compas_timber.planning.Step.transform.rst", "api/generated/compas_timber.planning.Step.validate_data.rst", "api/generated/compas_timber.planning.Text3d.rst", "api/generated/compas_timber.planning.Text3d.ToString.rst", "api/generated/compas_timber.planning.Text3d.copy.rst", "api/generated/compas_timber.planning.Text3d.from_json.rst", "api/generated/compas_timber.planning.Text3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.sha256.rst", "api/generated/compas_timber.planning.Text3d.to_json.rst", "api/generated/compas_timber.planning.Text3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.transform.rst", "api/generated/compas_timber.planning.Text3d.validate_data.rst", "api/generated/compas_timber.rhino.find_neighboring_elements.rst", "citing.rst", "examples.rst", "examples/create_joint.rst", "index.rst", "installation.rst", "license.rst", "tutorials.rst", "tutorials/BTLx_contribution_guide.rst", "tutorials/grasshopper/attributes.rst", "tutorials/grasshopper/beams.rst", "tutorials/grasshopper/design.rst", "tutorials/grasshopper/examples.rst", "tutorials/grasshopper/fabrication.rst", "tutorials/grasshopper/features.rst", "tutorials/grasshopper/installation.rst", "tutorials/grasshopper/joint_rules.rst", "tutorials/grasshopper/model.rst", "tutorials/grasshopper/show.rst", "tutorials/grasshopper/utils.rst", "tutorials/grasshopper/workflow.rst"], "titles": ["API Reference", "compas_timber.connections", "compas_timber.design", "compas_timber.elements", "compas_timber.errors", "compas_timber.fabrication", "compas_timber.ghpython", "compas_timber.model", "compas_timber.planning", "compas_timber.rhino", "BallNodeJoint", "BallNodeJoint.ToString", "BallNodeJoint.add_extensions", "BallNodeJoint.add_features", "BallNodeJoint.check_elements_compatibility", "BallNodeJoint.copy", "BallNodeJoint.create", "BallNodeJoint.element_count_complies", "BallNodeJoint.from_json", "BallNodeJoint.from_jsonstring", "BallNodeJoint.get_face_most_ortho_to_beam", "BallNodeJoint.get_face_most_towards_beam", "BallNodeJoint.restore_beams_from_keys", "BallNodeJoint.sha256", "BallNodeJoint.to_json", "BallNodeJoint.to_jsonstring", "BallNodeJoint.validate_data", "ConnectionSolver", "ConnectionSolver.find_intersecting_pairs", "ConnectionSolver.find_topology", "ConnectionSolver.find_wall_wall_topology", "Joint", "Joint.ToString", "Joint.add_extensions", "Joint.add_features", "Joint.check_elements_compatibility", "Joint.copy", "Joint.create", "Joint.element_count_complies", "Joint.from_json", "Joint.from_jsonstring", "Joint.get_face_most_ortho_to_beam", "Joint.get_face_most_towards_beam", "Joint.restore_beams_from_keys", "Joint.sha256", "Joint.to_json", "Joint.to_jsonstring", "Joint.validate_data", "JointTopology", "JointTopology.get_name", "LButtJoint", "LButtJoint.ToString", "LButtJoint.add_extensions", "LButtJoint.add_features", "LButtJoint.check_elements_compatibility", "LButtJoint.copy", "LButtJoint.create", "LButtJoint.element_count_complies", "LButtJoint.from_json", "LButtJoint.from_jsonstring", "LButtJoint.get_face_most_ortho_to_beam", "LButtJoint.get_face_most_towards_beam", "LButtJoint.restore_beams_from_keys", "LButtJoint.sha256", "LButtJoint.to_json", "LButtJoint.to_jsonstring", "LButtJoint.update_beam_roles", "LButtJoint.validate_data", "LFrenchRidgeLapJoint", "LFrenchRidgeLapJoint.ToString", "LFrenchRidgeLapJoint.add_extensions", "LFrenchRidgeLapJoint.add_features", "LFrenchRidgeLapJoint.check_elements_compatibility", "LFrenchRidgeLapJoint.copy", "LFrenchRidgeLapJoint.create", "LFrenchRidgeLapJoint.element_count_complies", "LFrenchRidgeLapJoint.from_json", "LFrenchRidgeLapJoint.from_jsonstring", "LFrenchRidgeLapJoint.get_face_most_ortho_to_beam", "LFrenchRidgeLapJoint.get_face_most_towards_beam", "LFrenchRidgeLapJoint.restore_beams_from_keys", "LFrenchRidgeLapJoint.sha256", "LFrenchRidgeLapJoint.to_json", "LFrenchRidgeLapJoint.to_jsonstring", "LFrenchRidgeLapJoint.validate_data", "LLapJoint", "LLapJoint.ToString", "LLapJoint.add_extensions", "LLapJoint.add_features", "LLapJoint.check_elements_compatibility", "LLapJoint.copy", "LLapJoint.create", "LLapJoint.element_count_complies", "LLapJoint.from_json", "LLapJoint.from_jsonstring", "LLapJoint.get_face_most_ortho_to_beam", "LLapJoint.get_face_most_towards_beam", "LLapJoint.restore_beams_from_keys", "LLapJoint.sha256", "LLapJoint.to_json", "LLapJoint.to_jsonstring", "LLapJoint.validate_data", "LMiterJoint", "LMiterJoint.ToString", "LMiterJoint.add_extensions", "LMiterJoint.add_features", "LMiterJoint.check_elements_compatibility", "LMiterJoint.copy", "LMiterJoint.create", "LMiterJoint.element_count_complies", "LMiterJoint.from_json", "LMiterJoint.from_jsonstring", "LMiterJoint.get_cutoff_plane", "LMiterJoint.get_cutting_planes", "LMiterJoint.get_face_most_ortho_to_beam", "LMiterJoint.get_face_most_towards_beam", "LMiterJoint.restore_beams_from_keys", "LMiterJoint.sha256", "LMiterJoint.to_json", "LMiterJoint.to_jsonstring", "LMiterJoint.validate_data", "LapJoint", "LapJoint.ToString", "LapJoint.add_extensions", "LapJoint.add_features", "LapJoint.check_elements_compatibility", "LapJoint.copy", "LapJoint.create", "LapJoint.element_count_complies", "LapJoint.from_json", "LapJoint.from_jsonstring", "LapJoint.get_face_most_ortho_to_beam", "LapJoint.get_face_most_towards_beam", "LapJoint.restore_beams_from_keys", "LapJoint.sha256", "LapJoint.to_json", "LapJoint.to_jsonstring", "LapJoint.validate_data", "NullJoint", "NullJoint.ToString", "NullJoint.add_extensions", "NullJoint.add_features", "NullJoint.check_elements_compatibility", "NullJoint.copy", "NullJoint.create", "NullJoint.element_count_complies", "NullJoint.from_json", "NullJoint.from_jsonstring", "NullJoint.get_face_most_ortho_to_beam", "NullJoint.get_face_most_towards_beam", "NullJoint.restore_beams_from_keys", "NullJoint.sha256", "NullJoint.to_json", "NullJoint.to_jsonstring", "NullJoint.validate_data", "TBirdsmouthJoint", "TBirdsmouthJoint.ToString", "TBirdsmouthJoint.add_extensions", "TBirdsmouthJoint.add_features", "TBirdsmouthJoint.check_elements_compatibility", "TBirdsmouthJoint.copy", "TBirdsmouthJoint.create", "TBirdsmouthJoint.element_count_complies", "TBirdsmouthJoint.from_json", "TBirdsmouthJoint.from_jsonstring", "TBirdsmouthJoint.get_face_most_ortho_to_beam", "TBirdsmouthJoint.get_face_most_towards_beam", "TBirdsmouthJoint.restore_beams_from_keys", "TBirdsmouthJoint.sha256", "TBirdsmouthJoint.to_json", "TBirdsmouthJoint.to_jsonstring", "TBirdsmouthJoint.validate_data", "TButtJoint", "TButtJoint.ToString", "TButtJoint.add_extensions", "TButtJoint.add_features", "TButtJoint.check_elements_compatibility", "TButtJoint.copy", "TButtJoint.create", "TButtJoint.element_count_complies", "TButtJoint.from_json", "TButtJoint.from_jsonstring", "TButtJoint.get_face_most_ortho_to_beam", "TButtJoint.get_face_most_towards_beam", "TButtJoint.restore_beams_from_keys", "TButtJoint.sha256", "TButtJoint.to_json", "TButtJoint.to_jsonstring", "TButtJoint.validate_data", "TDovetailJoint", "TDovetailJoint.ToString", "TDovetailJoint.add_extensions", "TDovetailJoint.add_features", "TDovetailJoint.check_elements_compatibility", "TDovetailJoint.copy", "TDovetailJoint.create", "TDovetailJoint.define_dovetail_tool", "TDovetailJoint.element_count_complies", "TDovetailJoint.from_json", "TDovetailJoint.from_jsonstring", "TDovetailJoint.get_face_most_ortho_to_beam", "TDovetailJoint.get_face_most_towards_beam", "TDovetailJoint.restore_beams_from_keys", "TDovetailJoint.sha256", "TDovetailJoint.to_json", "TDovetailJoint.to_jsonstring", "TDovetailJoint.validate_data", "TLapJoint", "TLapJoint.ToString", "TLapJoint.add_extensions", "TLapJoint.add_features", "TLapJoint.check_elements_compatibility", "TLapJoint.copy", "TLapJoint.create", "TLapJoint.element_count_complies", "TLapJoint.from_json", "TLapJoint.from_jsonstring", "TLapJoint.get_face_most_ortho_to_beam", "TLapJoint.get_face_most_towards_beam", "TLapJoint.restore_beams_from_keys", "TLapJoint.sha256", "TLapJoint.to_json", "TLapJoint.to_jsonstring", "TLapJoint.validate_data", "TStepJoint", "TStepJoint.ToString", "TStepJoint.add_extensions", "TStepJoint.add_features", "TStepJoint.check_elements_compatibility", "TStepJoint.copy", "TStepJoint.create", "TStepJoint.element_count_complies", "TStepJoint.from_json", "TStepJoint.from_jsonstring", "TStepJoint.get_face_most_ortho_to_beam", "TStepJoint.get_face_most_towards_beam", "TStepJoint.restore_beams_from_keys", "TStepJoint.set_step_depths", "TStepJoint.sha256", "TStepJoint.to_json", "TStepJoint.to_jsonstring", "TStepJoint.validate_data", "TenonMortiseJoint", "TenonMortiseJoint.ToString", "TenonMortiseJoint.add_extensions", "TenonMortiseJoint.add_features", "TenonMortiseJoint.check_elements_compatibility", "TenonMortiseJoint.copy", "TenonMortiseJoint.create", "TenonMortiseJoint.element_count_complies", "TenonMortiseJoint.from_json", "TenonMortiseJoint.from_jsonstring", "TenonMortiseJoint.get_face_most_ortho_to_beam", "TenonMortiseJoint.get_face_most_towards_beam", "TenonMortiseJoint.restore_beams_from_keys", "TenonMortiseJoint.set_default_values", "TenonMortiseJoint.sha256", "TenonMortiseJoint.to_json", "TenonMortiseJoint.to_jsonstring", "TenonMortiseJoint.validate_data", "XLapJoint", "XLapJoint.ToString", "XLapJoint.add_extensions", "XLapJoint.add_features", "XLapJoint.check_elements_compatibility", "XLapJoint.copy", "XLapJoint.create", "XLapJoint.element_count_complies", "XLapJoint.from_json", "XLapJoint.from_jsonstring", "XLapJoint.get_face_most_ortho_to_beam", "XLapJoint.get_face_most_towards_beam", "XLapJoint.restore_beams_from_keys", "XLapJoint.sha256", "XLapJoint.to_json", "XLapJoint.to_jsonstring", "XLapJoint.validate_data", "XNotchJoint", "XNotchJoint.ToString", "XNotchJoint.add_extensions", "XNotchJoint.add_features", "XNotchJoint.check_elements_compatibility", "XNotchJoint.copy", "XNotchJoint.create", "XNotchJoint.element_count_complies", "XNotchJoint.from_json", "XNotchJoint.from_jsonstring", "XNotchJoint.get_face_most_ortho_to_beam", "XNotchJoint.get_face_most_towards_beam", "XNotchJoint.restore_beams_from_keys", "XNotchJoint.sha256", "XNotchJoint.to_json", "XNotchJoint.to_jsonstring", "XNotchJoint.validate_data", "YButtJoint", "YButtJoint.ToString", "YButtJoint.add_extensions", "YButtJoint.add_features", "YButtJoint.check_elements_compatibility", "YButtJoint.copy", "YButtJoint.create", "YButtJoint.cross_beam_ref_side_index", "YButtJoint.element_count_complies", "YButtJoint.from_json", "YButtJoint.from_jsonstring", "YButtJoint.get_face_most_ortho_to_beam", "YButtJoint.get_face_most_towards_beam", "YButtJoint.get_miter_planes", "YButtJoint.main_beam_ref_side_index", "YButtJoint.restore_beams_from_keys", "YButtJoint.sha256", "YButtJoint.to_json", "YButtJoint.to_jsonstring", "YButtJoint.validate_data", "find_neighboring_elements", "CategoryRule", "CategoryRule.ToString", "CategoryRule.comply", "CategoryRule.get_category_rules", "CategoryRule.get_direct_rules", "CategoryRule.get_topology_rules", "CategoryRule.joints_from_beams_and_rules", "CategoryRule.reorder", "DebugInfomation", "DebugInfomation.ToString", "DebugInfomation.add_fastener_error", "DebugInfomation.add_feature_error", "DebugInfomation.add_joint_error", "DirectRule", "DirectRule.ToString", "DirectRule.comply", "DirectRule.contains", "DirectRule.get_category_rules", "DirectRule.get_direct_rules", "DirectRule.get_topology_rules", "DirectRule.joints_from_beams_and_rules", "FeatureDefinition", "FeatureDefinition.ToString", "JointDefinition", "JointDefinition.ToString", "JointDefinition.is_identical", "JointDefinition.match", "JointRule", "JointRule.comply", "JointRule.get_category_rules", "JointRule.get_direct_rules", "JointRule.get_topology_rules", "JointRule.joints_from_beams_and_rules", "SurfaceModel", "SurfaceModel.beam_category_names", "SurfaceModel.create_model", "SurfaceModel.cull_overlaps", "SurfaceModel.distance_between_elements", "SurfaceModel.generate_frame", "SurfaceModel.generate_perimeter_beams", "SurfaceModel.generate_plates", "SurfaceModel.generate_stud_lines", "SurfaceModel.generate_studs", "SurfaceModel.generate_windows", "SurfaceModel.get_beam_intersections", "SurfaceModel.get_interior_segment_indices", "SurfaceModel.offset_elements", "SurfaceModel.parse_loops", "SurfaceModel.trim_jack_studs", "SurfaceModel.trim_king_studs", "SurfaceModel.trim_studs", "TopologyRule", "TopologyRule.ToString", "TopologyRule.comply", "TopologyRule.get_category_rules", "TopologyRule.get_direct_rules", "TopologyRule.get_topology_rules", "TopologyRule.joints_from_beams_and_rules", "guess_joint_topology_2beams", "set_default_joints", "Beam", "Beam.ToString", "Beam.add_blank_extension", "Beam.add_feature", "Beam.add_features", "Beam.back_side", "Beam.compute_aabb", "Beam.compute_collision_mesh", "Beam.compute_geometry", "Beam.compute_obb", "Beam.compute_worldtransformation", "Beam.copy", "Beam.endpoint_closest_to_point", "Beam.extension_to_plane", "Beam.from_centerline", "Beam.from_endpoints", "Beam.from_json", "Beam.from_jsonstring", "Beam.front_side", "Beam.get_dimensions_relative_to_side", "Beam.opp_side", "Beam.remove_blank_extension", "Beam.remove_features", "Beam.reset", "Beam.sha256", "Beam.side_as_surface", "Beam.to_json", "Beam.to_jsonstring", "Beam.transform", "Beam.transformed", "Beam.validate_data", "Fastener", "Fastener.ToString", "Fastener.add_feature", "Fastener.add_features", "Fastener.compute_aabb", "Fastener.compute_collision_mesh", "Fastener.compute_geometry", "Fastener.compute_obb", "Fastener.compute_worldtransformation", "Fastener.copy", "Fastener.from_json", "Fastener.from_jsonstring", "Fastener.remove_blank_extension", "Fastener.remove_features", "Fastener.reset", "Fastener.sha256", "Fastener.to_json", "Fastener.to_jsonstring", "Fastener.transform", "Fastener.transformed", "Fastener.validate_data", "FastenerTimberInterface", "FastenerTimberInterface.ToString", "FastenerTimberInterface.copy", "FastenerTimberInterface.from_json", "FastenerTimberInterface.from_jsonstring", "FastenerTimberInterface.get_features", "FastenerTimberInterface.sha256", "FastenerTimberInterface.to_json", "FastenerTimberInterface.to_jsonstring", "FastenerTimberInterface.validate_data", "Plate", "Plate.ToString", "Plate.add_feature", "Plate.add_features", "Plate.compute_aabb", "Plate.compute_collision_mesh", "Plate.compute_geometry", "Plate.compute_obb", "Plate.compute_worldtransformation", "Plate.copy", "Plate.from_json", "Plate.from_jsonstring", "Plate.from_outline_thickness", "Plate.remove_blank_extension", "Plate.remove_features", "Plate.reset", "Plate.sha256", "Plate.shape", "Plate.side_as_surface", "Plate.to_json", "Plate.to_jsonstring", "Plate.transform", "Plate.transformed", "Plate.validate_data", "TimberElement", "TimberElement.ToString", "TimberElement.add_feature", "TimberElement.add_features", "TimberElement.compute_aabb", "TimberElement.compute_collision_mesh", "TimberElement.compute_geometry", "TimberElement.compute_obb", "TimberElement.compute_worldtransformation", "TimberElement.copy", "TimberElement.from_json", "TimberElement.from_jsonstring", "TimberElement.remove_blank_extension", "TimberElement.remove_features", "TimberElement.reset", "TimberElement.sha256", "TimberElement.to_json", "TimberElement.to_jsonstring", "TimberElement.transform", "TimberElement.transformed", "TimberElement.validate_data", "Wall", "Wall.ToString", "Wall.add_feature", "Wall.add_features", "Wall.compute_aabb", "Wall.compute_collision_mesh", "Wall.compute_geometry", "Wall.compute_obb", "Wall.compute_worldtransformation", "Wall.copy", "Wall.from_boundary", "Wall.from_brep", "Wall.from_json", "Wall.from_jsonstring", "Wall.remove_blank_extension", "Wall.remove_features", "Wall.reset", "Wall.rotate", "Wall.sha256", "Wall.to_json", "Wall.to_jsonstring", "Wall.transform", "Wall.transformed", "Wall.validate_data", "BeamJoiningError", "FastenerApplicationError", "FeatureApplicationError", "BTLxPart", "BTLxPart.et_point_vals", "BTLxPart.ref_side_from_face", "BTLxProcessing", "BTLxProcessing.ToString", "BTLxProcessing.add_subprocessing", "BTLxProcessing.copy", "BTLxProcessing.from_json", "BTLxProcessing.from_jsonstring", "BTLxProcessing.scaled", "BTLxProcessing.sha256", "BTLxProcessing.to_json", "BTLxProcessing.to_jsonstring", "BTLxProcessing.validate_data", "BTLxWriter", "BTLxWriter.model_to_xml", "BTLxWriter.register_type_serializer", "BTLxWriter.write", "DoubleCut", "DoubleCut.ToString", "DoubleCut.add_subprocessing", "DoubleCut.apply", "DoubleCut.copy", "DoubleCut.from_json", "DoubleCut.from_jsonstring", "DoubleCut.from_planes_and_beam", "DoubleCut.from_shapes_and_element", "DoubleCut.planes_from_params_and_beam", "DoubleCut.scale", "DoubleCut.scaled", "DoubleCut.sha256", "DoubleCut.to_json", "DoubleCut.to_jsonstring", "DoubleCut.validate_data", "DovetailMortise", "DovetailMortise.ToString", "DovetailMortise.add_subprocessing", "DovetailMortise.apply", "DovetailMortise.copy", "DovetailMortise.define_dovetail_tool", "DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "DovetailMortise.dovetail_volume_from_params_and_beam", "DovetailMortise.frame_from_params_and_beam", "DovetailMortise.from_frame_and_beam", "DovetailMortise.from_json", "DovetailMortise.from_jsonstring", "DovetailMortise.scale", "DovetailMortise.scaled", "DovetailMortise.sha256", "DovetailMortise.to_json", "DovetailMortise.to_jsonstring", "DovetailMortise.validate_data", "DovetailTenon", "DovetailTenon.ToString", "DovetailTenon.add_subprocessing", "DovetailTenon.apply", "DovetailTenon.copy", "DovetailTenon.define_dovetail_tool", "DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "DovetailTenon.dovetail_volume_from_params_and_beam", "DovetailTenon.frame_from_params_and_beam", "DovetailTenon.from_json", "DovetailTenon.from_jsonstring", "DovetailTenon.from_plane_and_beam", "DovetailTenon.scale", "DovetailTenon.scaled", "DovetailTenon.sha256", "DovetailTenon.to_json", "DovetailTenon.to_jsonstring", "DovetailTenon.validate_data", "Drilling", "Drilling.ToString", "Drilling.add_subprocessing", "Drilling.apply", "Drilling.copy", "Drilling.cylinder_from_params_and_element", "Drilling.from_json", "Drilling.from_jsonstring", "Drilling.from_line_and_element", "Drilling.from_shapes_and_element", "Drilling.scale", "Drilling.scaled", "Drilling.sha256", "Drilling.to_json", "Drilling.to_jsonstring", "Drilling.validate_data", "EdgePositionType", "FrenchRidgeLap", "FrenchRidgeLap.ToString", "FrenchRidgeLap.add_subprocessing", "FrenchRidgeLap.apply", "FrenchRidgeLap.copy", "FrenchRidgeLap.frame_from_params_and_beam", "FrenchRidgeLap.from_beam_beam_and_plane", "FrenchRidgeLap.from_json", "FrenchRidgeLap.from_jsonstring", "FrenchRidgeLap.lap_volume_from_params_and_beam", "FrenchRidgeLap.scale", "FrenchRidgeLap.scaled", "FrenchRidgeLap.sha256", "FrenchRidgeLap.to_json", "FrenchRidgeLap.to_jsonstring", "FrenchRidgeLap.validate_data", "JackRafterCut", "JackRafterCut.ToString", "JackRafterCut.add_subprocessing", "JackRafterCut.apply", "JackRafterCut.copy", "JackRafterCut.from_json", "JackRafterCut.from_jsonstring", "JackRafterCut.from_plane_and_beam", "JackRafterCut.from_shapes_and_element", "JackRafterCut.plane_from_params_and_beam", "JackRafterCut.scale", "JackRafterCut.scaled", "JackRafterCut.sha256", "JackRafterCut.to_json", "JackRafterCut.to_jsonstring", "JackRafterCut.validate_data", "Lap", "Lap.ToString", "Lap.add_subprocessing", "Lap.apply", "Lap.copy", "Lap.from_json", "Lap.from_jsonstring", "Lap.from_plane_and_beam", "Lap.from_shapes_and_element", "Lap.from_volume_and_beam", "Lap.scale", "Lap.scaled", "Lap.sha256", "Lap.to_json", "Lap.to_jsonstring", "Lap.validate_data", "Lap.volume_from_params_and_beam", "LimitationTopType", "LongitudinalCut", "LongitudinalCut.ToString", "LongitudinalCut.add_subprocessing", "LongitudinalCut.apply", "LongitudinalCut.copy", "LongitudinalCut.from_json", "LongitudinalCut.from_jsonstring", "LongitudinalCut.from_plane_and_beam", "LongitudinalCut.from_shapes_and_element", "LongitudinalCut.plane_from_params_and_beam", "LongitudinalCut.scaled", "LongitudinalCut.sha256", "LongitudinalCut.to_json", "LongitudinalCut.to_jsonstring", "LongitudinalCut.validate_data", "LongitudinalCut.volume_from_params_and_beam", "MachiningLimits", "Mortise", "Mortise.ToString", "Mortise.add_subprocessing", "Mortise.apply", "Mortise.copy", "Mortise.frame_from_params_and_beam", "Mortise.from_frame_and_beam", "Mortise.from_json", "Mortise.from_jsonstring", "Mortise.scale", "Mortise.scaled", "Mortise.sha256", "Mortise.to_json", "Mortise.to_jsonstring", "Mortise.validate_data", "Mortise.volume_from_params_and_beam", "OrientationType", "Pocket", "Pocket.ToString", "Pocket.add_subprocessing", "Pocket.apply", "Pocket.copy", "Pocket.from_json", "Pocket.from_jsonstring", "Pocket.from_shapes_and_element", "Pocket.from_volume_and_element", "Pocket.scale", "Pocket.scaled", "Pocket.sha256", "Pocket.to_json", "Pocket.to_jsonstring", "Pocket.validate_data", "Pocket.volume_from_params_and_element", "Slot", "Slot.ToString", "Slot.add_subprocessing", "Slot.apply", "Slot.copy", "Slot.from_json", "Slot.from_jsonstring", "Slot.from_plane_and_beam", "Slot.scale", "Slot.scaled", "Slot.sha256", "Slot.to_json", "Slot.to_jsonstring", "Slot.validate_data", "StepJoint", "StepJoint.ToString", "StepJoint.add_subprocessing", "StepJoint.add_tenon", "StepJoint.apply", "StepJoint.copy", "StepJoint.from_json", "StepJoint.from_jsonstring", "StepJoint.from_plane_and_beam", "StepJoint.planes_from_params_and_beam", "StepJoint.scale", "StepJoint.scaled", "StepJoint.sha256", "StepJoint.tenon_volume_from_params_and_beam", "StepJoint.to_json", "StepJoint.to_jsonstring", "StepJoint.validate_data", "StepJointNotch", "StepJointNotch.ToString", "StepJointNotch.add_mortise", "StepJointNotch.add_subprocessing", "StepJointNotch.apply", "StepJointNotch.copy", "StepJointNotch.from_json", "StepJointNotch.from_jsonstring", "StepJointNotch.from_plane_and_beam", "StepJointNotch.mortise_volume_from_params_and_beam", "StepJointNotch.planes_from_params_and_beam", "StepJointNotch.scale", "StepJointNotch.scaled", "StepJointNotch.sha256", "StepJointNotch.to_json", "StepJointNotch.to_jsonstring", "StepJointNotch.validate_data", "StepShapeType", "Tenon", "Tenon.ToString", "Tenon.add_subprocessing", "Tenon.apply", "Tenon.copy", "Tenon.frame_from_params_and_beam", "Tenon.from_json", "Tenon.from_jsonstring", "Tenon.from_plane_and_beam", "Tenon.scale", "Tenon.scaled", "Tenon.sha256", "Tenon.to_json", "Tenon.to_jsonstring", "Tenon.validate_data", "Tenon.volume_from_params_and_beam", "TenonShapeType", "add_gh_param", "clear_gh_params", "get_leaf_subclasses", "item_input_valid", "list_input_valid", "manage_dynamic_params", "rename_gh_input", "TimberModel", "TimberModel.ToString", "TimberModel.add_element", "TimberModel.add_elements", "TimberModel.add_group", "TimberModel.add_group_element", "TimberModel.add_interaction", "TimberModel.add_joint", "TimberModel.add_material", "TimberModel.assign_material", "TimberModel.compute_aabb", "TimberModel.compute_obb", "TimberModel.connect_adjacent_walls", "TimberModel.copy", "TimberModel.element_by_guid", "TimberModel.elements", "TimberModel.elements_connected_by", "TimberModel.from_json", "TimberModel.from_jsonstring", "TimberModel.get_elements_in_group", "TimberModel.get_interactions_for_element", "TimberModel.has_element", "TimberModel.has_group", "TimberModel.has_interaction", "TimberModel.has_material", "TimberModel.interactions", "TimberModel.materials", "TimberModel.process_joinery", "TimberModel.remove_element", "TimberModel.remove_interaction", "TimberModel.remove_joint", "TimberModel.rotate", "TimberModel.rotated", "TimberModel.scale", "TimberModel.scaled", "TimberModel.set_topologies", "TimberModel.sha256", "TimberModel.to_json", "TimberModel.to_jsonstring", "TimberModel.transform", "TimberModel.transform_numpy", "TimberModel.transformed", "TimberModel.transformed_numpy", "TimberModel.translate", "TimberModel.translated", "TimberModel.validate_data", "Actor", "Actor.get_name", "BuildingPlan", "BuildingPlan.ToString", "BuildingPlan.add_step", "BuildingPlan.copy", "BuildingPlan.from_json", "BuildingPlan.from_jsonstring", "BuildingPlan.sha256", "BuildingPlan.to_json", "BuildingPlan.to_jsonstring", "BuildingPlan.validate_data", "BuildingPlanParser", "BuildingPlanParser.parse", "BuildingPlanParser.serialize", "Instruction", "Instruction.ToString", "Instruction.copy", "Instruction.from_json", "Instruction.from_jsonstring", "Instruction.sha256", "Instruction.to_json", "Instruction.to_jsonstring", "Instruction.transform", "Instruction.validate_data", "LinearDimension", "LinearDimension.ToString", "LinearDimension.copy", "LinearDimension.from_json", "LinearDimension.from_jsonstring", "LinearDimension.sha256", "LinearDimension.to_json", "LinearDimension.to_jsonstring", "LinearDimension.transform", "LinearDimension.validate_data", "Model3d", "Model3d.ToString", "Model3d.copy", "Model3d.from_json", "Model3d.from_jsonstring", "Model3d.sha256", "Model3d.to_json", "Model3d.to_jsonstring", "Model3d.transform", "Model3d.validate_data", "SimpleSequenceGenerator", "Step", "Step.ToString", "Step.copy", "Step.from_json", "Step.from_jsonstring", "Step.sha256", "Step.to_json", "Step.to_jsonstring", "Step.transform", "Step.validate_data", "Text3d", "Text3d.ToString", "Text3d.copy", "Text3d.from_json", "Text3d.from_jsonstring", "Text3d.sha256", "Text3d.to_json", "Text3d.to_jsonstring", "Text3d.transform", "Text3d.validate_data", "find_neighboring_elements", "Citing", "Examples", "Create Joint", "COMPAS Timber Documentation", "Installation", "License", "Grasshopper plugin", "BTLx Contribution Guide", "Attributes", "Beams", "Design", "Examples", "Fabrication", "Features", "Installation Guide", "Joint Rules", "Model", "Show", "Utils", "Workflow"], "terms": {"compas_timb": [0, 10, 16, 22, 27, 31, 37, 43, 48, 50, 56, 68, 74, 85, 91, 102, 108, 121, 127, 138, 144, 155, 161, 172, 178, 189, 195, 207, 213, 224, 230, 242, 248, 260, 266, 277, 283, 294, 300, 314, 315, 323, 328, 336, 338, 342, 348, 366, 373, 374, 375, 406, 427, 437, 461, 482, 506, 507, 508, 509, 512, 523, 527, 530, 535, 536, 543, 546, 549, 550, 551, 561, 564, 568, 569, 579, 582, 584, 587, 588, 595, 596, 599, 601, 605, 612, 615, 620, 621, 628, 631, 644, 645, 646, 649, 654, 655, 661, 662, 663, 666, 668, 678, 679, 680, 683, 695, 696, 699, 710, 714, 719, 723, 727, 731, 736, 737, 744, 745, 748, 750, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 815, 817, 827, 830, 840, 850, 860, 861, 871, 881, 882, 885, 886, 896], "model": [0, 10, 16, 22, 37, 43, 50, 56, 62, 68, 71, 74, 80, 85, 91, 97, 102, 108, 116, 121, 127, 133, 138, 144, 150, 155, 161, 167, 172, 178, 184, 189, 195, 202, 207, 213, 219, 224, 230, 236, 242, 248, 254, 260, 266, 272, 277, 283, 289, 294, 300, 309, 348, 374, 375, 385, 412, 414, 427, 437, 445, 469, 490, 523, 524, 526, 769, 771, 772, 773, 774, 775, 776, 777, 778, 781, 784, 790, 791, 793, 794, 795, 796, 797, 799, 804, 808, 815, 850, 860, 885, 888, 891, 894, 895, 901], "element": [0, 10, 13, 14, 16, 17, 35, 37, 38, 54, 56, 57, 72, 74, 75, 89, 91, 92, 106, 108, 109, 121, 125, 127, 128, 142, 144, 145, 159, 161, 162, 176, 178, 179, 193, 195, 197, 211, 213, 214, 228, 230, 231, 242, 246, 248, 249, 264, 266, 267, 281, 283, 284, 298, 300, 302, 314, 315, 317, 321, 322, 328, 330, 331, 335, 336, 338, 341, 343, 347, 348, 366, 368, 372, 375, 381, 382, 383, 384, 385, 387, 398, 403, 404, 406, 410, 411, 413, 414, 420, 424, 425, 427, 432, 437, 441, 442, 443, 444, 445, 452, 454, 458, 459, 461, 465, 466, 467, 468, 469, 475, 479, 480, 482, 486, 487, 488, 489, 490, 498, 503, 504, 507, 508, 509, 510, 511, 512, 525, 530, 535, 536, 546, 549, 550, 551, 564, 568, 569, 579, 582, 584, 587, 588, 599, 601, 605, 615, 620, 621, 631, 636, 637, 644, 649, 654, 655, 661, 666, 668, 678, 679, 683, 687, 688, 695, 699, 714, 719, 723, 731, 736, 737, 748, 750, 760, 769, 771, 772, 774, 775, 778, 783, 785, 788, 789, 790, 792, 794, 797, 798, 860, 861, 881, 885, 898], "connect": [0, 10, 11, 16, 22, 27, 31, 32, 37, 43, 48, 50, 51, 56, 68, 69, 74, 85, 86, 91, 102, 103, 108, 121, 122, 127, 138, 139, 144, 155, 156, 161, 172, 173, 178, 189, 190, 195, 207, 208, 213, 224, 225, 230, 242, 243, 248, 260, 261, 266, 277, 278, 283, 294, 295, 300, 314, 366, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 781, 785, 818, 831, 841, 851, 862, 872, 885, 887, 897, 898], "fabric": [0, 427, 509, 512, 523, 527, 535, 543, 561, 579, 587, 588, 595, 596, 612, 620, 628, 645, 646, 654, 662, 663, 679, 680, 696, 710, 727, 744, 745, 761, 882, 885, 888], "design": [0, 314, 315, 323, 328, 336, 338, 342, 348, 366, 373, 374, 509, 882, 885, 888, 890, 891], "plan": [0, 815, 817, 827, 828, 829, 830, 840, 850, 860, 861, 871, 885], "error": [0, 1, 323, 325, 326, 327, 381, 384, 410, 413, 441, 465, 468, 486, 489, 506, 507, 508, 582, 796, 885, 890, 892, 898], "ghpython": [0, 762, 763, 764, 765, 766, 767, 768, 885, 888], "rhino": [0, 11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 314, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872, 881, 883, 885, 886, 890, 891, 897, 900], "The": [1, 9, 10, 15, 16, 18, 19, 20, 21, 24, 25, 26, 31, 36, 37, 39, 40, 41, 42, 45, 46, 47, 50, 55, 56, 58, 59, 60, 61, 64, 65, 67, 68, 73, 74, 76, 77, 78, 79, 82, 83, 84, 85, 90, 91, 93, 94, 95, 96, 99, 100, 101, 107, 108, 110, 111, 114, 115, 118, 119, 120, 121, 126, 127, 129, 130, 131, 132, 135, 136, 137, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 163, 164, 165, 166, 169, 170, 171, 172, 177, 178, 180, 181, 182, 183, 186, 187, 188, 189, 194, 195, 196, 198, 199, 200, 201, 204, 205, 206, 207, 212, 213, 215, 216, 217, 218, 221, 222, 223, 229, 230, 232, 233, 234, 235, 239, 240, 241, 242, 247, 248, 250, 251, 252, 253, 257, 258, 259, 260, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 299, 300, 303, 304, 305, 306, 311, 312, 313, 314, 315, 317, 321, 322, 328, 330, 335, 347, 348, 366, 368, 372, 375, 377, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 413, 415, 416, 417, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 436, 437, 440, 441, 442, 444, 446, 447, 448, 449, 451, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 468, 470, 471, 472, 474, 477, 478, 479, 480, 481, 485, 486, 487, 489, 491, 494, 495, 497, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 767, 768, 769, 771, 772, 773, 774, 775, 778, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 820, 821, 822, 824, 825, 826, 832, 833, 834, 836, 837, 839, 842, 843, 844, 846, 847, 849, 852, 853, 854, 856, 857, 859, 863, 864, 865, 867, 868, 870, 873, 874, 875, 877, 878, 880, 881, 887, 888, 890, 891, 895, 897, 898, 900, 901], "follow": [1, 380, 393, 395, 427, 887, 888, 889, 891, 896, 897], "mai": [1, 890, 898], "rais": [1, 12, 14, 16, 18, 19, 33, 34, 35, 37, 39, 40, 52, 54, 56, 58, 59, 70, 72, 74, 76, 77, 87, 89, 91, 93, 94, 104, 106, 108, 110, 111, 123, 124, 125, 127, 129, 130, 140, 142, 144, 146, 147, 157, 159, 161, 163, 164, 174, 176, 178, 180, 181, 191, 193, 195, 198, 199, 209, 211, 213, 215, 216, 226, 228, 230, 232, 233, 244, 246, 248, 250, 251, 262, 264, 266, 268, 269, 279, 281, 283, 285, 286, 296, 298, 300, 303, 304, 391, 392, 416, 417, 430, 431, 447, 448, 471, 472, 494, 495, 507, 508, 516, 517, 530, 532, 533, 546, 553, 554, 564, 570, 571, 582, 585, 586, 599, 603, 604, 615, 617, 618, 631, 633, 634, 649, 651, 652, 666, 670, 671, 683, 685, 686, 699, 701, 702, 714, 716, 717, 731, 733, 734, 748, 751, 752, 771, 774, 775, 778, 786, 787, 796, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "thi": [1, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 114, 115, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 313, 314, 315, 317, 322, 330, 331, 336, 338, 341, 343, 366, 368, 375, 376, 377, 380, 385, 386, 388, 391, 392, 393, 395, 396, 405, 406, 407, 414, 415, 416, 417, 426, 427, 428, 429, 430, 431, 436, 437, 438, 445, 446, 447, 448, 460, 461, 462, 469, 470, 471, 472, 481, 482, 483, 490, 491, 492, 494, 495, 505, 506, 509, 511, 513, 515, 516, 517, 522, 528, 530, 531, 532, 533, 534, 536, 542, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 560, 562, 564, 565, 567, 568, 569, 570, 571, 572, 578, 580, 583, 584, 585, 586, 587, 589, 594, 597, 599, 600, 601, 602, 603, 604, 605, 606, 611, 613, 615, 616, 617, 618, 619, 621, 622, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 643, 644, 647, 649, 650, 651, 652, 653, 655, 660, 661, 664, 666, 667, 668, 669, 670, 671, 672, 677, 678, 681, 683, 684, 685, 686, 687, 688, 689, 694, 695, 697, 699, 700, 701, 702, 703, 704, 709, 711, 714, 715, 716, 717, 718, 719, 720, 723, 726, 728, 731, 732, 733, 734, 735, 736, 737, 738, 743, 746, 748, 749, 750, 751, 752, 753, 754, 759, 760, 769, 770, 774, 782, 786, 787, 788, 791, 796, 799, 801, 803, 810, 811, 813, 814, 818, 820, 821, 822, 826, 827, 831, 832, 833, 834, 839, 841, 842, 843, 844, 849, 851, 852, 853, 854, 859, 861, 862, 863, 864, 865, 870, 872, 873, 874, 875, 880, 881, 883, 887, 889, 890, 892, 896, 897, 901], "modul": [1, 9, 885, 889], "see": [1, 22, 43, 769, 888, 891, 893, 895, 896, 897, 900], "detail": [1, 888], "beamjoiningerror": [1, 12, 14, 33, 34, 35, 52, 54, 70, 72, 87, 89, 104, 106, 123, 124, 125, 140, 142, 157, 159, 174, 176, 191, 193, 209, 211, 226, 228, 244, 246, 262, 264, 279, 281, 296, 298, 323, 796, 885], "featureapplicationerror": [1, 323, 530, 546, 564, 582, 599, 615, 631, 649, 666, 683, 699, 714, 731, 748, 885], "fastenerapplicationerror": [1, 885], "contain": [9, 16, 18, 19, 20, 21, 28, 37, 39, 40, 41, 42, 56, 58, 59, 60, 61, 74, 76, 77, 78, 79, 91, 93, 94, 95, 96, 108, 110, 111, 114, 115, 127, 129, 130, 131, 132, 144, 146, 147, 148, 149, 161, 163, 164, 165, 166, 178, 180, 181, 182, 183, 195, 198, 199, 200, 201, 213, 215, 216, 217, 218, 230, 232, 233, 234, 235, 248, 250, 251, 252, 253, 266, 268, 269, 270, 271, 283, 285, 286, 287, 288, 300, 303, 304, 305, 306, 314, 317, 322, 323, 330, 336, 338, 368, 375, 391, 392, 416, 417, 430, 431, 437, 447, 448, 461, 471, 472, 482, 494, 495, 506, 516, 517, 532, 533, 553, 554, 570, 571, 585, 586, 603, 604, 617, 618, 633, 634, 651, 652, 670, 671, 685, 686, 701, 702, 716, 717, 733, 734, 751, 752, 769, 771, 774, 784, 786, 787, 790, 793, 795, 808, 817, 821, 822, 833, 834, 843, 844, 853, 854, 861, 864, 865, 874, 875, 881], "function": [9, 121, 314, 525, 788, 888, 889], "type": [9, 10, 11, 15, 18, 19, 26, 29, 32, 36, 39, 40, 47, 50, 51, 55, 58, 59, 67, 68, 69, 73, 76, 77, 84, 85, 86, 90, 93, 94, 101, 102, 103, 107, 110, 111, 120, 121, 122, 126, 129, 130, 137, 139, 143, 146, 147, 154, 155, 156, 160, 163, 164, 171, 172, 173, 177, 180, 181, 188, 189, 190, 194, 198, 199, 206, 207, 208, 212, 215, 216, 223, 224, 225, 229, 232, 233, 237, 241, 242, 243, 247, 250, 251, 259, 260, 261, 265, 268, 269, 276, 277, 278, 282, 285, 286, 293, 294, 295, 299, 303, 304, 313, 315, 328, 338, 366, 376, 386, 391, 392, 405, 407, 415, 416, 417, 426, 428, 429, 430, 431, 436, 438, 446, 447, 448, 460, 462, 470, 471, 472, 481, 483, 491, 494, 495, 505, 513, 515, 516, 517, 522, 525, 528, 531, 532, 533, 542, 543, 544, 547, 553, 554, 560, 562, 565, 570, 571, 578, 580, 583, 585, 586, 594, 597, 600, 603, 604, 611, 613, 616, 617, 618, 627, 629, 632, 633, 634, 643, 647, 650, 651, 652, 660, 664, 667, 670, 671, 677, 681, 684, 685, 686, 694, 697, 700, 701, 702, 709, 711, 715, 716, 717, 726, 728, 732, 733, 734, 743, 746, 749, 751, 752, 759, 770, 782, 785, 786, 787, 814, 815, 818, 820, 821, 822, 826, 831, 832, 833, 834, 839, 841, 842, 843, 844, 849, 851, 852, 853, 854, 859, 861, 862, 863, 864, 865, 870, 872, 873, 874, 875, 880, 885, 889, 892, 896, 901], "meant": 9, "us": [9, 10, 11, 23, 26, 28, 29, 30, 31, 32, 44, 47, 49, 50, 51, 63, 67, 68, 69, 81, 84, 85, 86, 98, 101, 102, 103, 117, 120, 121, 122, 134, 137, 138, 139, 151, 154, 155, 156, 168, 171, 172, 173, 185, 188, 189, 190, 203, 206, 207, 208, 220, 223, 224, 225, 238, 241, 242, 243, 256, 259, 260, 261, 273, 276, 277, 278, 290, 293, 294, 295, 310, 313, 314, 317, 322, 330, 368, 376, 388, 399, 405, 407, 421, 426, 428, 433, 436, 438, 453, 460, 461, 462, 476, 481, 483, 492, 500, 505, 506, 509, 513, 519, 522, 523, 528, 539, 542, 543, 544, 552, 557, 560, 561, 562, 572, 575, 578, 580, 584, 591, 594, 597, 602, 608, 611, 613, 624, 627, 629, 635, 640, 643, 647, 657, 660, 664, 669, 674, 677, 681, 691, 694, 697, 706, 709, 711, 722, 726, 728, 740, 743, 746, 753, 756, 759, 769, 770, 774, 804, 805, 809, 810, 811, 812, 813, 814, 816, 818, 823, 826, 827, 831, 835, 839, 841, 845, 849, 851, 855, 859, 861, 862, 866, 870, 872, 876, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900], "context": 9, "class": [10, 11, 27, 31, 32, 48, 50, 51, 68, 69, 85, 86, 102, 103, 121, 122, 138, 139, 155, 156, 172, 173, 189, 190, 207, 208, 224, 225, 242, 243, 260, 261, 277, 278, 294, 295, 315, 323, 328, 336, 338, 342, 348, 366, 375, 376, 406, 407, 427, 428, 437, 438, 461, 462, 482, 483, 507, 509, 512, 513, 523, 527, 528, 543, 544, 561, 562, 579, 580, 595, 596, 597, 612, 613, 628, 629, 645, 646, 647, 662, 663, 664, 679, 680, 681, 696, 697, 710, 711, 727, 728, 735, 744, 745, 746, 761, 769, 770, 776, 808, 815, 817, 818, 827, 830, 831, 840, 841, 850, 851, 860, 861, 862, 871, 872, 885, 889], "sourc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 890, 891], "base": [10, 27, 31, 48, 50, 66, 68, 85, 102, 121, 138, 155, 172, 189, 196, 207, 224, 237, 242, 260, 277, 294, 315, 323, 328, 336, 338, 342, 348, 366, 375, 383, 385, 406, 414, 427, 437, 445, 461, 467, 469, 482, 488, 490, 506, 507, 508, 509, 511, 512, 523, 527, 543, 548, 561, 566, 579, 595, 596, 612, 628, 645, 646, 653, 662, 663, 679, 680, 696, 710, 727, 744, 745, 761, 769, 796, 800, 801, 815, 817, 827, 830, 840, 850, 860, 861, 871, 898, 899, 901], "joint": [10, 12, 13, 14, 16, 22, 27, 48, 50, 52, 53, 54, 56, 66, 68, 70, 71, 72, 74, 85, 87, 88, 89, 91, 102, 104, 105, 106, 108, 121, 123, 124, 125, 127, 138, 140, 141, 142, 144, 155, 157, 158, 159, 161, 172, 174, 175, 176, 178, 189, 191, 192, 193, 195, 207, 209, 210, 211, 213, 224, 226, 227, 228, 230, 237, 242, 244, 245, 246, 248, 260, 262, 263, 264, 266, 277, 279, 280, 281, 283, 294, 296, 297, 298, 300, 315, 317, 321, 323, 328, 335, 338, 347, 366, 372, 377, 396, 427, 482, 506, 507, 552, 572, 669, 710, 718, 727, 735, 753, 769, 776, 796, 799, 883, 885, 888, 889, 891, 892, 898, 901], "repres": [10, 50, 68, 85, 102, 155, 172, 189, 207, 224, 242, 260, 277, 294, 375, 406, 427, 437, 449, 482, 509, 523, 527, 543, 561, 579, 596, 612, 628, 646, 661, 663, 680, 710, 727, 745, 769, 775, 815, 891, 897], "ball": 10, "node": [10, 771, 772, 773, 774], "which": [10, 16, 20, 21, 28, 29, 30, 31, 37, 41, 42, 50, 56, 60, 61, 68, 74, 78, 79, 85, 91, 95, 96, 102, 108, 114, 115, 127, 131, 132, 138, 144, 148, 149, 155, 161, 165, 166, 172, 178, 182, 183, 189, 195, 200, 201, 207, 213, 217, 218, 224, 230, 234, 235, 242, 248, 252, 253, 260, 266, 270, 271, 277, 283, 287, 288, 294, 300, 305, 306, 314, 336, 366, 377, 380, 387, 388, 393, 394, 395, 396, 506, 507, 525, 572, 587, 588, 703, 753, 773, 774, 815, 817, 850, 861, 889, 891, 892, 898], "join": [10, 16, 31, 37, 50, 56, 68, 74, 85, 91, 102, 108, 121, 127, 138, 144, 155, 161, 172, 178, 189, 195, 207, 213, 224, 230, 242, 248, 260, 266, 277, 283, 294, 300, 321, 323, 328, 335, 338, 347, 372, 506, 892, 898], "end": [10, 20, 21, 31, 41, 42, 50, 60, 61, 68, 78, 79, 85, 95, 96, 102, 114, 115, 131, 132, 148, 149, 155, 165, 166, 172, 182, 183, 189, 200, 201, 207, 217, 218, 224, 234, 235, 242, 252, 253, 270, 271, 287, 288, 294, 305, 306, 375, 377, 380, 387, 388, 390, 393, 395, 527, 561, 596, 612, 628, 646, 653, 662, 679, 680, 703, 710, 727, 745, 897], "multipl": [10, 328, 772, 883, 889], "beam": [10, 12, 13, 14, 16, 20, 21, 22, 27, 28, 29, 30, 31, 33, 34, 35, 37, 41, 42, 43, 50, 52, 53, 54, 56, 60, 61, 62, 66, 68, 70, 71, 72, 74, 78, 79, 80, 85, 87, 88, 89, 91, 95, 96, 97, 102, 104, 105, 106, 108, 114, 115, 116, 121, 123, 124, 125, 127, 131, 132, 133, 138, 140, 141, 142, 144, 148, 149, 150, 155, 157, 158, 159, 161, 165, 166, 167, 172, 174, 175, 176, 178, 182, 183, 184, 189, 191, 192, 193, 195, 200, 201, 202, 207, 209, 210, 211, 213, 217, 218, 219, 224, 226, 227, 230, 234, 235, 236, 242, 244, 245, 246, 248, 252, 253, 254, 260, 262, 263, 264, 266, 270, 271, 272, 277, 279, 280, 281, 283, 287, 288, 289, 294, 296, 297, 298, 300, 301, 305, 306, 308, 309, 314, 323, 348, 409, 419, 440, 451, 455, 461, 464, 474, 482, 485, 497, 506, 527, 530, 534, 536, 543, 546, 549, 550, 551, 552, 561, 564, 567, 568, 569, 572, 596, 599, 601, 602, 605, 612, 615, 619, 620, 621, 628, 631, 635, 636, 637, 644, 646, 649, 653, 654, 655, 661, 663, 666, 668, 669, 678, 680, 683, 687, 688, 695, 699, 703, 710, 714, 718, 719, 723, 727, 729, 731, 735, 736, 737, 745, 748, 750, 753, 760, 769, 774, 783, 796, 850, 881, 884, 885, 888, 890, 895, 897, 898, 900, 901], "trim": [10, 50, 53, 102, 105, 158, 172, 175, 192, 210, 227, 245, 263, 280, 294, 297, 605, 895, 898], "main": [10, 22, 29, 43, 50, 62, 66, 68, 80, 97, 116, 121, 133, 150, 155, 167, 172, 184, 189, 202, 207, 219, 224, 236, 242, 254, 272, 289, 294, 309, 572, 669, 718, 735, 753, 897], "pleas": [10, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 260, 277, 294, 882, 896], "creat": [10, 13, 31, 50, 52, 53, 68, 70, 85, 87, 88, 102, 104, 105, 121, 138, 155, 157, 158, 172, 174, 175, 189, 191, 192, 207, 209, 210, 224, 226, 227, 242, 244, 245, 260, 263, 277, 280, 294, 296, 297, 328, 336, 348, 389, 390, 404, 425, 459, 480, 493, 504, 534, 546, 552, 564, 572, 602, 619, 635, 653, 666, 669, 714, 718, 731, 735, 748, 753, 883, 885, 886, 888, 889, 890, 891, 892, 894, 897, 898, 901], "properli": [10, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 260, 277, 294], "an": [10, 15, 16, 18, 19, 24, 25, 26, 28, 36, 37, 39, 40, 45, 46, 47, 50, 55, 56, 58, 59, 64, 65, 67, 68, 73, 74, 76, 77, 82, 83, 84, 85, 90, 91, 93, 94, 99, 100, 101, 102, 107, 108, 110, 111, 118, 119, 120, 121, 126, 127, 129, 130, 135, 136, 137, 138, 143, 144, 146, 147, 152, 153, 154, 155, 160, 161, 163, 164, 169, 170, 171, 172, 177, 178, 180, 181, 186, 187, 188, 189, 194, 195, 198, 199, 204, 205, 206, 207, 212, 213, 215, 216, 221, 222, 223, 224, 229, 230, 232, 233, 239, 240, 241, 242, 247, 248, 250, 251, 257, 258, 259, 260, 265, 266, 268, 269, 274, 275, 276, 277, 282, 283, 285, 286, 291, 292, 293, 294, 299, 300, 303, 304, 311, 312, 313, 375, 386, 391, 392, 401, 402, 405, 406, 415, 416, 417, 422, 423, 426, 427, 429, 430, 431, 434, 435, 436, 437, 446, 447, 448, 456, 457, 460, 461, 470, 471, 472, 477, 478, 481, 482, 491, 494, 495, 501, 502, 505, 506, 508, 509, 511, 515, 516, 517, 520, 521, 522, 524, 525, 531, 532, 533, 535, 540, 541, 542, 547, 553, 554, 558, 559, 560, 565, 570, 571, 572, 576, 577, 578, 583, 585, 586, 592, 593, 594, 600, 603, 604, 609, 610, 611, 616, 617, 618, 625, 626, 627, 632, 633, 634, 641, 642, 643, 650, 651, 652, 658, 659, 660, 667, 670, 671, 675, 676, 677, 684, 685, 686, 692, 693, 694, 700, 701, 702, 707, 708, 709, 715, 716, 717, 724, 725, 726, 732, 733, 734, 741, 742, 743, 749, 751, 752, 753, 757, 758, 759, 771, 774, 775, 776, 778, 782, 786, 787, 792, 796, 797, 806, 807, 814, 815, 820, 821, 822, 824, 825, 826, 832, 833, 834, 836, 837, 839, 842, 843, 844, 846, 847, 849, 852, 853, 854, 856, 857, 859, 863, 864, 865, 867, 868, 870, 873, 874, 875, 877, 878, 880, 882, 883, 885, 887, 888, 890, 891, 897], "instanc": [10, 11, 16, 18, 19, 32, 37, 39, 40, 50, 51, 56, 58, 59, 68, 69, 74, 76, 77, 85, 86, 91, 93, 94, 102, 103, 108, 110, 111, 121, 122, 127, 129, 130, 138, 139, 144, 146, 147, 155, 156, 161, 163, 164, 172, 173, 178, 180, 181, 189, 190, 195, 198, 199, 207, 208, 213, 215, 216, 224, 225, 230, 232, 233, 242, 243, 248, 250, 251, 260, 261, 266, 268, 269, 277, 278, 283, 285, 286, 294, 295, 300, 303, 304, 343, 376, 391, 392, 407, 416, 417, 427, 428, 430, 431, 438, 447, 448, 462, 471, 472, 483, 494, 495, 513, 516, 517, 518, 525, 528, 530, 532, 533, 534, 536, 538, 544, 546, 549, 550, 551, 552, 553, 554, 556, 562, 564, 567, 568, 569, 570, 571, 572, 574, 580, 584, 585, 586, 590, 597, 599, 601, 602, 603, 604, 605, 607, 613, 615, 617, 618, 619, 621, 623, 629, 631, 633, 634, 635, 636, 637, 639, 644, 647, 649, 651, 652, 653, 655, 656, 661, 664, 666, 668, 669, 670, 671, 673, 678, 681, 683, 685, 686, 687, 688, 690, 695, 697, 699, 701, 702, 703, 705, 711, 713, 714, 716, 717, 718, 719, 721, 723, 728, 729, 731, 733, 734, 735, 736, 737, 739, 746, 748, 750, 751, 752, 753, 755, 760, 770, 776, 786, 787, 818, 821, 822, 831, 833, 834, 841, 843, 844, 851, 853, 854, 862, 864, 865, 872, 874, 875, 883, 889], "associ": [10, 22, 43, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 260, 277, 294, 437, 861, 887], "paramet": [10, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 107, 108, 110, 111, 114, 115, 117, 118, 119, 120, 121, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 212, 213, 215, 216, 217, 218, 220, 221, 222, 223, 224, 229, 230, 232, 233, 234, 235, 238, 239, 240, 241, 242, 247, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 299, 300, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 317, 321, 322, 328, 330, 335, 343, 347, 348, 366, 368, 372, 375, 378, 379, 380, 381, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 413, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 439, 440, 441, 443, 446, 447, 448, 449, 451, 453, 455, 456, 457, 458, 459, 460, 463, 464, 465, 467, 468, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 484, 485, 486, 488, 489, 491, 494, 495, 497, 500, 501, 502, 503, 504, 505, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 820, 821, 822, 823, 824, 825, 826, 828, 829, 832, 833, 834, 835, 836, 837, 839, 842, 843, 844, 845, 846, 847, 849, 852, 853, 854, 855, 856, 857, 859, 860, 863, 864, 865, 866, 867, 868, 870, 873, 874, 875, 876, 877, 878, 880, 881, 889, 890, 900], "list": [10, 16, 28, 31, 37, 56, 74, 91, 108, 121, 127, 144, 161, 178, 189, 195, 213, 230, 242, 248, 266, 283, 294, 300, 314, 315, 321, 323, 328, 335, 343, 347, 348, 368, 372, 375, 378, 379, 387, 397, 408, 409, 419, 427, 439, 440, 451, 463, 464, 474, 484, 485, 497, 506, 507, 509, 534, 536, 549, 767, 769, 772, 778, 785, 789, 796, 861, 881, 889, 897, 899], "base_interfac": 10, "fastenertimberinterfac": [10, 13, 885], "describ": [10, 889], "interfac": [10, 427, 432, 885], "between": [10, 30, 68, 85, 102, 121, 207, 260, 330, 348, 427, 511, 543, 561, 653, 663, 745, 769, 775, 781, 792, 794, 798, 890, 892, 895, 897, 901], "fasten": [10, 13, 427, 507, 885], "each": [10, 20, 21, 31, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 277, 287, 288, 305, 306, 388, 653, 817, 889, 890, 897, 899], "timber": [10, 13, 348, 375, 406, 427, 437, 461, 482, 523, 769, 882, 886, 888, 891, 892, 894, 896, 899, 901], "ball_diamet": 10, "float": [10, 28, 29, 30, 50, 68, 85, 121, 155, 172, 189, 196, 207, 224, 242, 260, 294, 314, 315, 317, 321, 328, 330, 335, 347, 348, 366, 368, 372, 375, 377, 381, 384, 388, 389, 390, 394, 410, 413, 427, 437, 441, 449, 465, 468, 486, 489, 509, 518, 527, 537, 538, 543, 548, 552, 555, 556, 561, 566, 572, 573, 574, 579, 587, 588, 589, 590, 596, 602, 606, 607, 612, 622, 623, 628, 635, 638, 639, 646, 653, 656, 663, 669, 672, 673, 680, 689, 690, 704, 705, 710, 713, 720, 721, 727, 729, 738, 739, 745, 753, 754, 755, 769, 781, 800, 801, 802, 803, 881, 897], "diamet": [10, 68, 189, 196, 427, 548, 566, 579, 587, 588, 596, 602, 895, 897], "attribut": [10, 31, 48, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 255, 260, 277, 294, 315, 317, 322, 323, 348, 375, 406, 427, 437, 461, 506, 507, 508, 509, 512, 595, 645, 662, 679, 744, 761, 769, 773, 860, 861, 885, 888, 889, 891], "generated_el": 10, "gener": [10, 13, 16, 29, 30, 224, 406, 427, 769, 788, 860, 889, 891, 892, 897, 901], "method": [10, 11, 16, 22, 27, 29, 31, 32, 37, 43, 48, 50, 51, 52, 53, 56, 68, 69, 70, 71, 72, 74, 85, 86, 87, 88, 91, 102, 103, 104, 105, 108, 121, 122, 127, 138, 139, 144, 155, 156, 157, 158, 161, 172, 173, 174, 175, 178, 189, 190, 191, 192, 195, 207, 208, 209, 210, 213, 224, 225, 226, 227, 230, 242, 243, 244, 245, 248, 260, 261, 263, 266, 277, 278, 280, 283, 294, 295, 296, 297, 298, 300, 315, 323, 328, 336, 338, 342, 348, 366, 375, 376, 380, 393, 395, 406, 407, 427, 428, 437, 438, 461, 462, 482, 483, 509, 512, 513, 523, 527, 528, 543, 544, 561, 562, 572, 579, 580, 596, 597, 612, 613, 628, 629, 635, 646, 647, 663, 664, 680, 681, 696, 697, 710, 711, 727, 728, 745, 746, 753, 769, 770, 796, 815, 817, 818, 827, 830, 831, 840, 841, 850, 851, 861, 862, 871, 872, 885, 889], "inherit": [10, 31, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 260, 277, 294, 315, 328, 366, 375, 406, 427, 437, 461, 482, 512, 527, 543, 561, 579, 596, 612, 628, 646, 663, 680, 696, 710, 727, 745, 769, 817, 830, 840, 850, 861, 871, 885, 889], "convert": [11, 24, 25, 32, 45, 46, 51, 64, 65, 69, 82, 83, 86, 99, 100, 103, 118, 119, 122, 135, 136, 139, 152, 153, 156, 169, 170, 173, 186, 187, 190, 204, 205, 208, 221, 222, 225, 239, 240, 243, 257, 258, 261, 274, 275, 278, 291, 292, 295, 311, 312, 336, 376, 401, 402, 407, 422, 423, 428, 434, 435, 438, 456, 457, 462, 477, 478, 483, 501, 502, 510, 513, 520, 521, 524, 528, 540, 541, 544, 558, 559, 562, 576, 577, 580, 592, 593, 597, 609, 610, 613, 625, 626, 629, 641, 642, 647, 658, 659, 664, 675, 676, 681, 692, 693, 697, 707, 708, 711, 724, 725, 728, 741, 742, 746, 757, 758, 770, 806, 807, 818, 824, 825, 831, 836, 837, 841, 846, 847, 851, 856, 857, 862, 867, 868, 872, 877, 878], "string": [11, 19, 25, 32, 40, 46, 49, 51, 59, 65, 69, 77, 83, 86, 94, 100, 103, 111, 119, 122, 130, 136, 139, 147, 153, 156, 164, 170, 173, 181, 187, 190, 199, 205, 208, 216, 222, 225, 233, 240, 243, 251, 258, 261, 269, 275, 278, 286, 292, 295, 304, 312, 376, 392, 402, 407, 417, 423, 428, 431, 435, 438, 448, 457, 462, 472, 478, 483, 495, 502, 506, 513, 517, 521, 524, 526, 528, 533, 541, 544, 554, 559, 562, 571, 577, 580, 586, 593, 597, 604, 610, 613, 618, 626, 629, 634, 642, 647, 652, 659, 664, 671, 676, 681, 686, 693, 697, 702, 708, 711, 717, 725, 728, 734, 742, 746, 752, 758, 770, 787, 807, 816, 818, 822, 825, 831, 834, 837, 841, 844, 847, 851, 854, 857, 862, 865, 868, 872, 875, 878, 890, 891, 897], "exist": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 713, 728, 729, 746, 770, 774, 791, 818, 831, 841, 851, 862, 872, 889], "net": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "compat": [11, 14, 32, 35, 50, 51, 54, 68, 69, 72, 85, 86, 89, 102, 103, 106, 122, 125, 139, 142, 155, 156, 159, 172, 173, 176, 189, 190, 193, 207, 208, 211, 224, 225, 228, 242, 243, 246, 260, 261, 264, 277, 278, 281, 295, 298, 314, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "when": [11, 28, 32, 51, 52, 53, 69, 70, 86, 87, 88, 103, 104, 105, 122, 139, 156, 157, 158, 173, 174, 175, 190, 191, 192, 208, 209, 210, 225, 226, 227, 243, 244, 245, 261, 263, 278, 280, 295, 296, 297, 376, 377, 407, 428, 438, 462, 483, 507, 508, 509, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872, 890, 897], "ironpython": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "implicit": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "convers": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "usual": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 375, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "take": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 525, 528, 544, 562, 580, 587, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872, 889, 901], "place": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 808, 818, 831, 841, 851, 862, 872, 897], "cpython": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872, 886], "kick": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "its": [11, 20, 21, 24, 25, 32, 41, 42, 45, 46, 51, 60, 61, 64, 65, 69, 78, 79, 82, 83, 86, 95, 96, 99, 100, 103, 114, 115, 118, 119, 122, 131, 132, 135, 136, 139, 148, 149, 152, 153, 156, 165, 166, 169, 170, 173, 182, 183, 186, 187, 189, 190, 200, 201, 204, 205, 208, 217, 218, 221, 222, 225, 234, 235, 239, 240, 242, 243, 252, 253, 257, 258, 261, 270, 271, 274, 275, 278, 287, 288, 291, 292, 295, 305, 306, 311, 312, 376, 385, 389, 398, 401, 402, 407, 414, 420, 422, 423, 428, 434, 435, 438, 445, 452, 456, 457, 462, 469, 475, 477, 478, 483, 490, 498, 501, 502, 513, 520, 521, 525, 528, 540, 541, 544, 558, 559, 562, 576, 577, 580, 592, 593, 597, 609, 610, 613, 625, 626, 629, 641, 642, 647, 658, 659, 664, 675, 676, 681, 692, 693, 697, 703, 707, 708, 711, 724, 725, 728, 741, 742, 746, 757, 758, 770, 783, 806, 807, 818, 824, 825, 831, 836, 837, 841, 846, 847, 851, 856, 857, 862, 867, 868, 872, 877, 878, 886, 890, 897], "default": [11, 15, 32, 36, 50, 51, 55, 69, 73, 85, 86, 90, 103, 107, 121, 122, 126, 139, 143, 156, 160, 173, 177, 190, 194, 207, 208, 212, 225, 229, 237, 243, 247, 255, 260, 261, 265, 278, 282, 295, 299, 317, 330, 348, 368, 376, 386, 389, 390, 407, 415, 428, 429, 437, 438, 446, 449, 462, 470, 483, 491, 509, 513, 515, 523, 528, 531, 534, 544, 547, 552, 562, 565, 572, 579, 580, 583, 597, 600, 602, 613, 616, 619, 628, 629, 632, 635, 636, 637, 647, 650, 653, 664, 667, 669, 680, 681, 684, 687, 688, 697, 700, 711, 715, 718, 728, 732, 735, 746, 749, 753, 763, 767, 770, 781, 782, 796, 800, 801, 802, 803, 818, 820, 831, 832, 841, 842, 851, 852, 862, 863, 872, 873, 885, 891, 892, 898, 900], "print": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "self": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872, 889], "gettyp": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "fullnam": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "similar": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872, 886, 897], "overrid": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 366, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872, 892], "object": [11, 15, 16, 18, 19, 22, 24, 25, 26, 27, 28, 32, 36, 37, 39, 40, 43, 45, 46, 47, 48, 51, 55, 56, 58, 59, 64, 65, 67, 69, 73, 74, 76, 77, 82, 83, 84, 86, 90, 91, 93, 94, 99, 100, 101, 103, 107, 108, 110, 111, 118, 119, 120, 122, 126, 127, 129, 130, 135, 136, 137, 139, 143, 144, 146, 147, 152, 153, 154, 156, 160, 161, 163, 164, 169, 170, 171, 173, 177, 178, 180, 181, 186, 187, 188, 190, 194, 195, 198, 199, 204, 205, 206, 208, 212, 213, 215, 216, 221, 222, 223, 225, 229, 230, 232, 233, 239, 240, 241, 243, 247, 248, 250, 251, 257, 258, 259, 261, 265, 266, 268, 269, 274, 275, 276, 278, 282, 283, 285, 286, 291, 292, 293, 295, 299, 300, 303, 304, 311, 312, 313, 314, 323, 336, 338, 342, 348, 376, 386, 391, 392, 401, 402, 405, 407, 415, 416, 417, 422, 423, 426, 428, 429, 430, 431, 434, 435, 436, 438, 446, 447, 448, 449, 456, 457, 460, 462, 470, 471, 472, 477, 478, 481, 483, 491, 494, 495, 501, 502, 505, 509, 513, 515, 516, 517, 520, 521, 522, 523, 524, 526, 528, 531, 532, 533, 540, 541, 542, 544, 547, 553, 554, 558, 559, 560, 562, 565, 570, 571, 576, 577, 578, 580, 583, 584, 585, 586, 592, 593, 594, 595, 597, 600, 603, 604, 609, 610, 611, 613, 616, 617, 618, 625, 626, 627, 629, 632, 633, 634, 641, 642, 643, 645, 647, 650, 651, 652, 658, 659, 660, 662, 664, 667, 670, 671, 675, 676, 677, 679, 681, 684, 685, 686, 692, 693, 694, 697, 700, 701, 702, 707, 708, 709, 711, 715, 716, 717, 724, 725, 726, 728, 732, 733, 734, 741, 742, 743, 744, 746, 749, 751, 752, 757, 758, 759, 761, 762, 763, 767, 768, 769, 770, 775, 776, 782, 786, 787, 799, 806, 807, 814, 815, 818, 820, 821, 822, 824, 825, 826, 827, 831, 832, 833, 834, 836, 837, 839, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 854, 856, 857, 859, 860, 862, 863, 864, 865, 867, 868, 870, 872, 873, 874, 875, 877, 878, 880, 885, 890, 891, 892, 898, 900], "fix": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "make": [11, 15, 32, 36, 51, 55, 69, 73, 86, 90, 103, 107, 122, 126, 139, 143, 156, 160, 173, 177, 190, 194, 208, 212, 225, 229, 243, 247, 261, 265, 278, 282, 295, 299, 376, 386, 407, 415, 427, 428, 429, 438, 446, 462, 470, 483, 491, 492, 509, 513, 515, 528, 531, 544, 547, 562, 565, 580, 583, 587, 597, 600, 613, 616, 629, 632, 647, 650, 664, 667, 681, 684, 697, 700, 703, 711, 715, 728, 732, 746, 749, 770, 782, 818, 820, 831, 832, 841, 842, 851, 852, 862, 863, 872, 873], "grasshopp": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 762, 763, 767, 768, 770, 818, 831, 841, 851, 862, 872, 883, 885, 886, 891, 896, 897, 901], "displai": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872, 890, 899], "proper": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "represent": [11, 24, 25, 32, 45, 46, 49, 51, 64, 65, 69, 82, 83, 86, 99, 100, 103, 118, 119, 122, 135, 136, 139, 152, 153, 156, 169, 170, 173, 186, 187, 190, 204, 205, 208, 221, 222, 225, 239, 240, 243, 257, 258, 261, 274, 275, 278, 291, 292, 295, 311, 312, 376, 401, 402, 407, 422, 423, 427, 428, 434, 435, 438, 456, 457, 462, 477, 478, 483, 501, 502, 513, 520, 521, 528, 540, 541, 544, 558, 559, 562, 576, 577, 580, 592, 593, 597, 609, 610, 613, 625, 626, 629, 641, 642, 647, 658, 659, 664, 675, 676, 681, 692, 693, 697, 707, 708, 711, 724, 725, 728, 741, 742, 746, 757, 758, 770, 806, 807, 816, 818, 824, 825, 831, 836, 837, 841, 846, 847, 851, 856, 857, 862, 867, 868, 872, 877, 878, 889], "ar": [11, 12, 14, 16, 20, 21, 22, 28, 29, 30, 32, 33, 35, 37, 41, 42, 43, 51, 54, 56, 60, 61, 68, 69, 72, 74, 78, 79, 86, 89, 91, 95, 96, 103, 106, 108, 114, 115, 122, 123, 125, 127, 131, 132, 139, 140, 142, 144, 148, 149, 156, 159, 161, 165, 166, 173, 176, 178, 182, 183, 190, 193, 195, 200, 201, 208, 211, 213, 217, 218, 224, 225, 228, 230, 234, 235, 237, 243, 246, 248, 252, 253, 255, 261, 262, 264, 266, 270, 271, 277, 278, 279, 281, 283, 287, 288, 295, 298, 300, 305, 306, 314, 315, 322, 331, 341, 368, 376, 407, 427, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 745, 746, 753, 770, 775, 778, 818, 831, 841, 851, 861, 862, 872, 883, 886, 889, 890, 891, 894, 895, 897, 898, 900, 901], "panel": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 348, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "other": [11, 20, 21, 32, 41, 42, 51, 60, 61, 68, 69, 78, 79, 85, 86, 95, 96, 103, 114, 115, 121, 122, 131, 132, 139, 148, 149, 155, 156, 165, 166, 173, 182, 183, 189, 190, 200, 201, 207, 208, 217, 218, 224, 225, 234, 235, 242, 243, 252, 253, 260, 261, 270, 271, 277, 278, 287, 288, 295, 305, 306, 340, 376, 407, 428, 437, 438, 454, 461, 462, 482, 483, 509, 513, 528, 544, 562, 580, 597, 602, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 774, 818, 831, 841, 851, 862, 872, 882, 887, 897, 901], "output": [11, 24, 25, 29, 32, 45, 46, 51, 64, 65, 69, 82, 83, 86, 99, 100, 103, 118, 119, 122, 135, 136, 139, 152, 153, 156, 169, 170, 173, 186, 187, 190, 204, 205, 208, 221, 222, 225, 239, 240, 243, 257, 258, 261, 274, 275, 278, 291, 292, 295, 311, 312, 376, 401, 402, 407, 422, 423, 428, 434, 435, 438, 456, 457, 462, 477, 478, 483, 501, 502, 513, 520, 521, 528, 540, 541, 544, 558, 559, 562, 576, 577, 580, 592, 593, 597, 609, 610, 613, 625, 626, 629, 641, 642, 647, 658, 659, 664, 675, 676, 681, 692, 693, 697, 707, 708, 711, 724, 725, 728, 741, 742, 746, 757, 758, 762, 770, 806, 807, 818, 824, 825, 831, 836, 837, 841, 846, 847, 851, 856, 857, 862, 867, 868, 872, 877, 878, 891, 892, 894, 895, 898], "add": [12, 13, 33, 34, 52, 53, 70, 71, 87, 88, 104, 105, 123, 124, 140, 141, 157, 158, 174, 175, 191, 192, 209, 210, 226, 227, 244, 245, 262, 263, 279, 280, 296, 297, 377, 378, 379, 408, 409, 432, 437, 439, 440, 463, 464, 484, 485, 514, 529, 545, 563, 581, 598, 614, 630, 648, 665, 682, 698, 712, 713, 729, 730, 747, 762, 771, 772, 773, 774, 775, 776, 777, 796, 888, 889, 898, 900, 901], "extens": [12, 33, 52, 53, 70, 71, 87, 104, 105, 123, 140, 157, 174, 175, 191, 209, 210, 226, 244, 262, 263, 279, 280, 296, 297, 377, 388, 396, 398, 420, 437, 449, 452, 475, 498, 796], "defin": [12, 33, 34, 123, 124, 140, 189, 196, 242, 262, 279, 331, 341, 343, 389, 427, 437, 534, 548, 566, 572, 635, 753, 890, 891, 892, 897, 900, 901], "affect": [12, 33, 34, 123, 124, 140, 262, 279], "": [12, 20, 21, 26, 33, 34, 41, 42, 47, 60, 61, 67, 72, 78, 79, 84, 95, 96, 101, 114, 115, 120, 123, 124, 131, 132, 137, 140, 148, 149, 154, 155, 165, 166, 171, 182, 183, 188, 189, 200, 201, 206, 217, 218, 223, 224, 234, 235, 241, 242, 252, 253, 259, 262, 270, 271, 276, 279, 287, 288, 293, 305, 306, 313, 375, 380, 387, 389, 390, 393, 395, 405, 406, 426, 427, 436, 460, 481, 505, 509, 522, 542, 552, 560, 578, 594, 611, 627, 643, 653, 660, 669, 677, 694, 709, 726, 727, 743, 759, 774, 814, 826, 839, 849, 859, 870, 880, 890, 891, 896, 897, 900], "i": [12, 14, 16, 18, 19, 20, 21, 22, 26, 28, 29, 31, 33, 35, 37, 39, 40, 41, 42, 43, 47, 50, 52, 53, 54, 56, 58, 59, 60, 61, 66, 67, 68, 70, 71, 74, 76, 77, 78, 79, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 101, 102, 104, 105, 106, 108, 110, 111, 112, 114, 115, 120, 121, 123, 125, 127, 129, 130, 131, 132, 137, 138, 140, 142, 144, 146, 147, 148, 149, 154, 155, 157, 158, 159, 161, 163, 164, 165, 166, 171, 172, 174, 175, 176, 178, 180, 181, 182, 183, 188, 189, 191, 192, 193, 195, 198, 199, 200, 201, 206, 207, 209, 210, 211, 213, 215, 216, 217, 218, 223, 224, 226, 227, 230, 232, 233, 234, 235, 241, 242, 244, 245, 246, 248, 250, 251, 252, 253, 259, 260, 262, 263, 264, 266, 268, 269, 270, 271, 276, 277, 279, 280, 281, 283, 285, 286, 287, 288, 293, 296, 297, 300, 303, 304, 305, 306, 313, 314, 317, 330, 348, 366, 368, 375, 377, 387, 388, 391, 392, 395, 405, 406, 416, 417, 426, 427, 430, 431, 436, 437, 447, 448, 449, 460, 461, 471, 472, 481, 482, 492, 494, 495, 505, 509, 512, 516, 517, 522, 523, 530, 532, 533, 534, 536, 542, 543, 546, 549, 550, 551, 552, 553, 554, 560, 561, 564, 568, 569, 570, 571, 572, 578, 579, 585, 586, 587, 588, 594, 599, 601, 602, 603, 604, 605, 611, 615, 617, 618, 619, 621, 627, 628, 631, 633, 634, 635, 636, 637, 643, 644, 646, 649, 651, 652, 653, 655, 660, 661, 663, 666, 668, 669, 670, 671, 677, 678, 679, 680, 683, 685, 686, 687, 688, 694, 695, 699, 701, 702, 703, 709, 714, 716, 717, 718, 719, 723, 726, 727, 731, 733, 734, 735, 736, 737, 743, 745, 748, 750, 751, 752, 753, 759, 760, 763, 767, 769, 771, 774, 778, 781, 786, 787, 796, 808, 814, 817, 821, 822, 826, 833, 834, 839, 843, 844, 849, 853, 854, 859, 860, 864, 865, 870, 874, 875, 880, 882, 885, 887, 888, 889, 890, 891, 892, 894, 895, 897, 898, 900, 901], "option": [12, 14, 15, 20, 21, 23, 24, 25, 28, 29, 30, 33, 35, 36, 41, 42, 44, 45, 46, 54, 55, 60, 61, 63, 64, 65, 73, 78, 79, 81, 82, 83, 89, 90, 95, 96, 98, 99, 100, 102, 106, 107, 114, 115, 117, 118, 119, 123, 125, 126, 131, 132, 134, 135, 136, 140, 142, 143, 148, 149, 151, 152, 153, 159, 160, 165, 166, 168, 169, 170, 176, 177, 182, 183, 185, 186, 187, 189, 193, 194, 200, 201, 203, 204, 205, 211, 212, 217, 218, 220, 221, 222, 229, 234, 235, 238, 239, 240, 246, 247, 252, 253, 256, 257, 258, 262, 264, 265, 270, 271, 273, 274, 275, 279, 281, 282, 287, 288, 290, 291, 292, 299, 305, 306, 310, 311, 312, 314, 315, 317, 321, 328, 330, 335, 347, 348, 366, 368, 372, 375, 381, 383, 386, 399, 401, 402, 410, 415, 421, 422, 423, 427, 429, 433, 434, 435, 437, 441, 443, 446, 449, 453, 456, 457, 465, 467, 470, 476, 477, 478, 486, 488, 491, 500, 501, 502, 509, 515, 519, 520, 521, 523, 531, 534, 539, 540, 541, 547, 552, 557, 558, 559, 565, 572, 575, 576, 577, 583, 591, 592, 593, 600, 602, 608, 609, 610, 616, 619, 624, 625, 626, 628, 632, 635, 636, 637, 640, 641, 642, 650, 653, 657, 658, 659, 667, 669, 674, 675, 676, 680, 684, 687, 688, 691, 692, 693, 700, 706, 707, 708, 715, 718, 722, 724, 725, 732, 735, 740, 741, 742, 749, 753, 756, 757, 758, 763, 767, 771, 772, 773, 774, 775, 778, 781, 782, 788, 796, 798, 800, 801, 802, 803, 805, 806, 807, 820, 823, 824, 825, 832, 835, 836, 837, 842, 845, 846, 847, 852, 855, 856, 857, 863, 866, 867, 868, 873, 876, 877, 878, 891, 901], "should": [12, 14, 22, 30, 31, 33, 34, 35, 43, 54, 85, 89, 106, 121, 123, 124, 125, 140, 142, 159, 176, 193, 207, 211, 246, 260, 262, 264, 279, 281, 314, 336, 377, 380, 388, 393, 394, 395, 406, 427, 437, 461, 506, 534, 543, 552, 572, 596, 619, 653, 669, 718, 735, 753, 763, 767, 771, 889, 896, 897], "onli": [12, 14, 22, 33, 35, 43, 54, 68, 89, 106, 123, 125, 140, 142, 159, 176, 193, 211, 246, 262, 264, 279, 281, 317, 330, 368, 383, 443, 467, 488, 796, 890], "implement": [12, 14, 22, 31, 33, 35, 43, 54, 89, 106, 123, 125, 140, 142, 159, 176, 193, 211, 246, 262, 264, 279, 281, 406, 827, 881, 885], "requir": [12, 14, 33, 35, 53, 54, 88, 89, 105, 106, 123, 125, 140, 142, 158, 159, 175, 176, 192, 193, 210, 211, 227, 245, 246, 262, 263, 264, 279, 280, 281, 297, 336, 377, 396], "whenev": [12, 14, 33, 34, 35, 54, 89, 106, 123, 124, 125, 140, 142, 159, 176, 193, 211, 246, 262, 264, 279, 281], "wa": [12, 33, 34, 123, 124, 140, 262, 279, 506], "abl": [12, 33, 34, 123, 124, 140, 262, 279], "calcul": [12, 20, 21, 30, 33, 34, 41, 42, 52, 60, 61, 70, 78, 79, 87, 95, 96, 104, 114, 115, 123, 124, 131, 132, 140, 148, 149, 157, 165, 166, 174, 182, 183, 191, 200, 201, 209, 217, 218, 226, 234, 235, 244, 252, 253, 262, 270, 271, 279, 287, 288, 296, 305, 306, 380, 393, 394, 395, 506, 536, 549, 550, 551, 567, 568, 569, 601, 605, 621, 644, 653, 655, 661, 668, 678, 695, 719, 723, 736, 737, 750, 760, 769, 796, 804], "appli": [12, 33, 34, 123, 124, 140, 189, 242, 262, 277, 279, 315, 321, 328, 335, 336, 347, 366, 372, 403, 404, 424, 425, 427, 437, 454, 458, 459, 479, 480, 503, 504, 506, 507, 508, 509, 635, 788, 808, 889, 897, 901], "note": [12, 33, 123, 140, 262, 279, 314, 771, 882], "ad": [12, 16, 31, 33, 37, 56, 71, 74, 91, 108, 123, 127, 140, 144, 161, 178, 195, 213, 230, 242, 248, 262, 266, 279, 283, 300, 375, 379, 409, 437, 440, 464, 485, 771, 772, 773, 774, 881, 892, 897], "all": [12, 20, 21, 33, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 123, 131, 132, 140, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 262, 270, 271, 279, 287, 288, 305, 306, 388, 397, 398, 419, 420, 427, 451, 452, 461, 474, 475, 497, 498, 763, 767, 769, 784, 788, 789, 794, 795, 796, 808, 881, 887, 890, 892, 897, 899], "befor": [12, 16, 33, 37, 56, 74, 91, 108, 123, 127, 140, 144, 161, 178, 195, 213, 230, 248, 262, 266, 279, 283, 300, 336, 380, 437, 454, 771], "featur": [12, 13, 31, 33, 34, 53, 71, 88, 105, 123, 124, 138, 140, 141, 158, 175, 189, 192, 196, 210, 224, 227, 242, 245, 262, 263, 277, 279, 280, 297, 323, 336, 375, 378, 379, 383, 397, 398, 408, 409, 419, 420, 427, 432, 437, 439, 440, 443, 451, 452, 454, 463, 464, 467, 474, 475, 484, 485, 488, 497, 498, 506, 508, 527, 530, 543, 546, 548, 561, 564, 566, 582, 596, 599, 612, 615, 628, 631, 636, 637, 646, 649, 663, 666, 680, 683, 687, 688, 699, 703, 710, 714, 727, 731, 745, 748, 796, 885, 888, 891, 892, 897, 898, 901], "In": [13, 314, 579, 885, 896], "adapt": [13, 336], "therefor": [13, 703], "check": [14, 35, 54, 72, 89, 106, 125, 142, 159, 176, 193, 211, 228, 246, 264, 281, 298, 317, 330, 368, 790, 791, 796, 881, 885], "creation": [14, 35, 54, 72, 89, 106, 125, 142, 159, 176, 193, 211, 228, 246, 264, 281, 298, 897], "did": [14, 35, 54, 89, 106, 125, 142, 159, 176, 193, 211, 246, 264, 281], "compli": [14, 35, 54, 89, 106, 125, 142, 159, 176, 193, 211, 246, 264, 281], "cl": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 299, 315, 328, 366, 386, 415, 429, 446, 470, 491, 515, 531, 547, 565, 583, 600, 616, 632, 650, 667, 684, 700, 715, 732, 749, 764, 782, 820, 832, 842, 852, 863, 873], "none": [15, 29, 30, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 224, 229, 237, 247, 265, 282, 299, 321, 335, 347, 372, 377, 378, 386, 389, 390, 396, 397, 403, 408, 415, 419, 424, 427, 429, 439, 446, 449, 451, 458, 463, 470, 474, 479, 484, 491, 492, 497, 503, 515, 523, 531, 534, 547, 565, 583, 600, 616, 628, 632, 636, 637, 650, 653, 667, 680, 684, 687, 688, 700, 715, 732, 749, 762, 763, 767, 768, 769, 771, 772, 773, 774, 775, 777, 778, 781, 782, 788, 797, 798, 800, 801, 802, 803, 808, 809, 812, 820, 832, 842, 852, 863, 873, 891, 897], "copy_guid": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 299, 386, 415, 429, 446, 470, 491, 515, 531, 547, 565, 583, 600, 616, 632, 650, 667, 684, 700, 715, 732, 749, 782, 820, 832, 842, 852, 863, 873], "fals": [15, 23, 24, 25, 28, 36, 44, 45, 46, 50, 55, 63, 64, 65, 73, 81, 82, 83, 90, 98, 99, 100, 107, 117, 118, 119, 126, 134, 135, 136, 143, 151, 152, 153, 160, 168, 169, 170, 177, 185, 186, 187, 194, 203, 204, 205, 212, 220, 221, 222, 229, 238, 239, 240, 247, 256, 257, 258, 265, 273, 274, 275, 282, 290, 291, 292, 299, 310, 311, 312, 317, 320, 330, 334, 343, 346, 368, 371, 383, 386, 399, 401, 402, 415, 421, 422, 423, 429, 433, 434, 435, 443, 446, 453, 456, 457, 467, 470, 476, 477, 478, 488, 491, 500, 501, 502, 515, 519, 520, 521, 531, 539, 540, 541, 543, 547, 557, 558, 559, 561, 565, 575, 576, 577, 583, 591, 592, 593, 600, 608, 609, 610, 616, 624, 625, 626, 632, 640, 641, 642, 650, 657, 658, 659, 663, 667, 674, 675, 676, 684, 691, 692, 693, 700, 706, 707, 708, 715, 718, 722, 724, 725, 732, 735, 740, 741, 742, 745, 749, 753, 756, 757, 758, 782, 796, 805, 806, 807, 820, 823, 824, 825, 832, 835, 836, 837, 842, 845, 846, 847, 852, 855, 856, 857, 863, 866, 867, 868, 873, 876, 877, 878, 892, 898], "independ": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 299, 386, 415, 429, 446, 470, 491, 515, 531, 547, 565, 583, 600, 616, 632, 650, 667, 684, 700, 715, 732, 749, 782, 820, 832, 842, 852, 863, 873], "data": [15, 18, 19, 23, 24, 25, 26, 36, 39, 40, 44, 45, 46, 47, 55, 58, 59, 63, 64, 65, 67, 73, 76, 77, 81, 82, 83, 84, 90, 93, 94, 98, 99, 100, 101, 107, 110, 111, 117, 118, 119, 120, 126, 129, 130, 134, 135, 136, 137, 143, 146, 147, 151, 152, 153, 154, 160, 163, 164, 168, 169, 170, 171, 177, 180, 181, 185, 186, 187, 188, 194, 198, 199, 203, 204, 205, 206, 212, 215, 216, 220, 221, 222, 223, 229, 232, 233, 238, 239, 240, 241, 247, 250, 251, 256, 257, 258, 259, 265, 268, 269, 273, 274, 275, 276, 282, 285, 286, 290, 291, 292, 293, 299, 303, 304, 310, 311, 312, 313, 386, 391, 392, 399, 401, 402, 405, 415, 416, 417, 421, 422, 423, 426, 427, 429, 430, 431, 433, 434, 435, 436, 446, 447, 448, 453, 456, 457, 460, 470, 471, 472, 476, 477, 478, 481, 491, 494, 495, 500, 501, 502, 505, 512, 515, 516, 517, 519, 520, 521, 522, 523, 531, 532, 533, 539, 540, 541, 542, 547, 553, 554, 557, 558, 559, 560, 565, 570, 571, 575, 576, 577, 578, 583, 585, 586, 591, 592, 593, 594, 600, 603, 604, 608, 609, 610, 611, 616, 617, 618, 624, 625, 626, 627, 632, 633, 634, 640, 641, 642, 643, 650, 651, 652, 657, 658, 659, 660, 667, 670, 671, 674, 675, 676, 677, 684, 685, 686, 691, 692, 693, 694, 700, 701, 702, 706, 707, 708, 709, 715, 716, 717, 722, 724, 725, 726, 732, 733, 734, 740, 741, 742, 743, 749, 751, 752, 756, 757, 758, 759, 782, 786, 787, 805, 806, 807, 809, 810, 811, 814, 817, 820, 821, 822, 823, 824, 825, 826, 830, 832, 833, 834, 835, 836, 837, 839, 842, 843, 844, 845, 846, 847, 849, 852, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 870, 873, 874, 875, 876, 877, 878, 880, 894, 899], "compa": [15, 18, 19, 23, 36, 39, 40, 44, 55, 58, 59, 63, 73, 76, 77, 81, 90, 93, 94, 98, 107, 110, 111, 117, 126, 129, 130, 134, 143, 146, 147, 151, 160, 163, 164, 168, 177, 180, 181, 185, 194, 198, 199, 203, 212, 215, 216, 220, 229, 232, 233, 238, 247, 250, 251, 256, 265, 268, 269, 273, 282, 285, 286, 290, 299, 303, 304, 310, 348, 375, 382, 383, 384, 385, 386, 391, 392, 399, 403, 404, 410, 411, 413, 414, 415, 416, 417, 421, 424, 425, 427, 429, 430, 431, 433, 442, 443, 444, 445, 446, 447, 448, 453, 458, 459, 465, 466, 467, 468, 469, 470, 471, 472, 476, 479, 480, 486, 487, 488, 489, 490, 491, 494, 495, 500, 503, 504, 515, 516, 517, 519, 531, 532, 533, 535, 539, 546, 547, 549, 550, 551, 553, 554, 557, 564, 565, 568, 569, 570, 571, 575, 582, 583, 584, 585, 586, 587, 588, 591, 600, 601, 603, 604, 605, 608, 616, 617, 618, 620, 621, 624, 632, 633, 634, 640, 644, 650, 651, 652, 654, 655, 657, 666, 667, 668, 670, 671, 674, 678, 684, 685, 686, 691, 695, 700, 701, 702, 706, 714, 715, 716, 717, 719, 722, 723, 732, 733, 734, 735, 736, 737, 740, 748, 749, 750, 751, 752, 756, 760, 779, 780, 782, 786, 787, 800, 801, 805, 808, 812, 813, 820, 821, 822, 823, 827, 832, 833, 834, 835, 842, 843, 844, 845, 852, 853, 854, 855, 861, 863, 864, 865, 866, 873, 874, 875, 876, 882, 886, 888, 892, 894, 896, 899], "return": [15, 16, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 36, 37, 39, 40, 41, 42, 44, 46, 47, 49, 55, 56, 58, 59, 60, 61, 63, 65, 67, 73, 74, 76, 77, 78, 79, 81, 83, 84, 90, 91, 93, 94, 95, 96, 98, 100, 101, 107, 108, 110, 111, 112, 114, 115, 117, 119, 120, 126, 127, 129, 130, 131, 132, 134, 136, 137, 143, 144, 146, 147, 148, 149, 151, 153, 154, 160, 161, 163, 164, 165, 166, 168, 170, 171, 177, 178, 180, 181, 182, 183, 185, 187, 188, 194, 195, 198, 199, 200, 201, 203, 205, 206, 212, 213, 215, 216, 217, 218, 220, 222, 223, 229, 230, 232, 233, 234, 235, 238, 240, 241, 247, 248, 250, 251, 252, 253, 256, 258, 259, 265, 266, 268, 269, 270, 271, 273, 275, 276, 282, 283, 285, 286, 287, 288, 290, 292, 293, 299, 300, 303, 304, 305, 306, 310, 312, 313, 314, 317, 321, 322, 330, 331, 335, 341, 343, 347, 368, 372, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 399, 400, 402, 403, 404, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 435, 436, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 454, 455, 457, 458, 459, 460, 463, 465, 466, 467, 468, 469, 470, 471, 472, 476, 478, 479, 480, 481, 484, 486, 487, 488, 489, 490, 491, 494, 495, 500, 502, 503, 504, 505, 510, 511, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 564, 565, 568, 569, 570, 571, 572, 574, 575, 577, 578, 582, 583, 584, 585, 586, 587, 588, 590, 591, 593, 594, 599, 600, 601, 602, 603, 604, 605, 607, 608, 610, 611, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 627, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 644, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 699, 700, 701, 702, 703, 705, 706, 708, 709, 714, 715, 716, 717, 718, 719, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 742, 743, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 762, 763, 767, 768, 771, 772, 773, 774, 775, 777, 778, 779, 780, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 800, 801, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 816, 820, 821, 822, 823, 825, 826, 828, 832, 833, 834, 835, 837, 839, 842, 843, 844, 845, 847, 849, 852, 853, 854, 855, 857, 859, 863, 864, 865, 866, 868, 870, 873, 874, 875, 876, 878, 880, 881], "current": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 299, 386, 415, 429, 446, 470, 491, 515, 531, 547, 565, 583, 600, 616, 632, 650, 667, 684, 700, 715, 732, 749, 782, 820, 832, 842, 852, 863, 873, 885], "bool": [15, 20, 21, 23, 24, 25, 28, 36, 41, 42, 44, 45, 46, 50, 55, 60, 61, 63, 64, 65, 68, 73, 78, 79, 81, 82, 83, 85, 90, 95, 96, 98, 99, 100, 102, 107, 114, 115, 117, 118, 119, 121, 126, 131, 132, 134, 135, 136, 143, 148, 149, 151, 152, 153, 160, 165, 166, 168, 169, 170, 177, 182, 183, 185, 186, 187, 194, 200, 201, 203, 204, 205, 207, 212, 217, 218, 220, 221, 222, 224, 229, 234, 235, 238, 239, 240, 247, 252, 253, 256, 257, 258, 260, 265, 270, 271, 273, 274, 275, 282, 287, 288, 290, 291, 292, 299, 305, 306, 310, 311, 312, 317, 330, 343, 368, 383, 386, 399, 401, 402, 415, 421, 422, 423, 427, 429, 433, 434, 435, 443, 446, 453, 456, 457, 461, 467, 470, 476, 477, 478, 488, 491, 500, 501, 502, 512, 515, 519, 520, 521, 531, 539, 540, 541, 543, 547, 557, 558, 559, 561, 565, 575, 576, 577, 579, 583, 591, 592, 593, 596, 600, 608, 609, 610, 616, 624, 625, 626, 628, 632, 640, 641, 642, 646, 650, 657, 658, 659, 662, 663, 667, 674, 675, 676, 684, 691, 692, 693, 700, 706, 707, 708, 715, 722, 724, 725, 727, 732, 740, 741, 742, 745, 749, 753, 756, 757, 758, 782, 790, 791, 792, 793, 796, 805, 806, 807, 820, 823, 824, 825, 832, 835, 836, 837, 842, 845, 846, 847, 852, 855, 856, 857, 861, 863, 866, 867, 868, 873, 876, 877, 878], "If": [15, 18, 19, 20, 21, 23, 24, 25, 29, 36, 39, 40, 41, 42, 44, 45, 46, 50, 52, 55, 58, 59, 60, 61, 63, 64, 65, 68, 70, 72, 73, 76, 77, 78, 79, 81, 82, 83, 85, 87, 90, 93, 94, 95, 96, 98, 99, 100, 102, 104, 107, 110, 111, 114, 115, 117, 118, 119, 121, 126, 129, 130, 131, 132, 134, 135, 136, 143, 146, 147, 148, 149, 151, 152, 153, 157, 160, 163, 164, 165, 166, 168, 169, 170, 174, 177, 180, 181, 182, 183, 185, 186, 187, 191, 194, 198, 199, 200, 201, 203, 204, 205, 207, 209, 212, 215, 216, 217, 218, 220, 221, 222, 224, 226, 228, 229, 232, 233, 234, 235, 238, 239, 240, 244, 247, 250, 251, 252, 253, 256, 257, 258, 260, 265, 268, 269, 270, 271, 273, 274, 275, 282, 285, 286, 287, 288, 290, 291, 292, 296, 298, 299, 303, 304, 305, 306, 310, 311, 312, 368, 383, 386, 391, 392, 397, 399, 401, 402, 415, 416, 417, 419, 421, 422, 423, 429, 430, 431, 433, 434, 435, 443, 446, 447, 448, 449, 451, 453, 456, 457, 467, 470, 471, 472, 474, 476, 477, 478, 488, 491, 494, 495, 497, 500, 501, 502, 512, 515, 516, 517, 519, 520, 521, 530, 531, 532, 533, 539, 540, 541, 546, 547, 553, 554, 557, 558, 559, 564, 565, 570, 571, 575, 576, 577, 579, 582, 583, 585, 586, 591, 592, 593, 599, 600, 603, 604, 608, 609, 610, 615, 616, 617, 618, 624, 625, 626, 631, 632, 633, 634, 640, 641, 642, 646, 649, 650, 651, 652, 657, 658, 659, 666, 667, 670, 671, 674, 675, 676, 683, 684, 685, 686, 691, 692, 693, 699, 700, 701, 702, 706, 707, 708, 714, 715, 716, 717, 722, 724, 725, 727, 731, 732, 733, 734, 740, 741, 742, 748, 749, 751, 752, 756, 757, 758, 771, 772, 774, 775, 778, 782, 786, 787, 796, 805, 806, 807, 820, 821, 822, 823, 824, 825, 832, 833, 834, 835, 836, 837, 842, 843, 844, 845, 846, 847, 852, 853, 854, 855, 856, 857, 863, 864, 865, 866, 867, 868, 873, 874, 875, 876, 877, 878, 881, 882, 886, 891, 892, 896, 897, 898], "true": [15, 20, 21, 23, 24, 25, 28, 36, 41, 42, 44, 45, 46, 50, 55, 60, 61, 63, 64, 65, 66, 68, 73, 78, 79, 81, 82, 83, 85, 90, 95, 96, 98, 99, 100, 102, 107, 114, 115, 117, 118, 119, 121, 126, 131, 132, 134, 135, 136, 143, 148, 149, 151, 152, 153, 160, 165, 166, 168, 169, 170, 177, 182, 183, 185, 186, 187, 194, 200, 201, 203, 204, 205, 207, 212, 217, 218, 220, 221, 222, 224, 229, 234, 235, 238, 239, 240, 247, 252, 253, 256, 257, 258, 260, 265, 270, 271, 273, 274, 275, 282, 287, 288, 290, 291, 292, 299, 305, 306, 310, 311, 312, 317, 330, 331, 341, 343, 368, 383, 386, 388, 399, 401, 402, 415, 421, 422, 423, 427, 429, 433, 434, 435, 443, 446, 453, 456, 457, 461, 467, 470, 476, 477, 478, 488, 491, 500, 501, 502, 512, 515, 519, 520, 521, 531, 539, 540, 541, 543, 547, 557, 558, 559, 561, 565, 575, 576, 577, 579, 583, 591, 592, 593, 600, 608, 609, 610, 616, 624, 625, 626, 632, 640, 641, 642, 646, 650, 657, 658, 659, 663, 667, 674, 675, 676, 684, 691, 692, 693, 700, 706, 707, 708, 715, 722, 724, 725, 727, 732, 740, 741, 742, 745, 749, 753, 756, 757, 758, 767, 774, 782, 790, 791, 792, 796, 805, 806, 807, 820, 823, 824, 825, 832, 835, 836, 837, 842, 845, 846, 847, 852, 855, 856, 857, 863, 866, 867, 868, 873, 876, 877, 878, 891, 892, 894, 897, 898], "have": [15, 16, 36, 37, 55, 56, 68, 71, 73, 74, 90, 91, 107, 108, 126, 127, 138, 143, 144, 160, 161, 177, 178, 194, 195, 212, 213, 229, 230, 247, 248, 265, 266, 277, 282, 283, 298, 299, 300, 317, 330, 368, 375, 386, 415, 429, 437, 446, 470, 491, 515, 531, 547, 565, 583, 600, 616, 632, 636, 637, 650, 667, 684, 687, 688, 700, 715, 732, 749, 771, 782, 792, 820, 832, 842, 852, 863, 873, 891], "same": [15, 29, 36, 50, 55, 68, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 298, 299, 386, 415, 429, 437, 446, 470, 491, 515, 531, 547, 565, 583, 600, 616, 632, 650, 667, 684, 700, 715, 732, 749, 774, 782, 820, 832, 842, 852, 860, 861, 863, 873, 896], "guid": [15, 24, 25, 36, 45, 46, 55, 64, 65, 73, 82, 83, 90, 99, 100, 107, 118, 119, 126, 135, 136, 143, 152, 153, 160, 169, 170, 177, 186, 187, 194, 204, 205, 212, 221, 222, 229, 239, 240, 242, 247, 257, 258, 265, 274, 275, 282, 291, 292, 299, 311, 312, 386, 401, 402, 415, 422, 423, 429, 434, 435, 446, 456, 457, 470, 477, 478, 491, 501, 502, 515, 520, 521, 531, 540, 541, 547, 558, 559, 565, 576, 577, 583, 592, 593, 600, 609, 610, 616, 625, 626, 632, 641, 642, 650, 658, 659, 667, 675, 676, 684, 692, 693, 700, 707, 708, 715, 724, 725, 732, 741, 742, 749, 757, 758, 782, 783, 806, 807, 820, 824, 825, 832, 836, 837, 842, 846, 847, 852, 856, 857, 863, 867, 868, 873, 877, 878, 885, 888, 891, 897], "origin": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 299, 375, 386, 415, 429, 446, 470, 491, 515, 531, 547, 565, 583, 600, 616, 632, 650, 667, 684, 700, 715, 732, 749, 782, 800, 801, 820, 832, 842, 852, 863, 873, 891, 900], "classmethod": [16, 17, 18, 19, 26, 28, 37, 38, 39, 40, 47, 49, 56, 57, 58, 59, 67, 74, 75, 76, 77, 84, 91, 92, 93, 94, 101, 108, 109, 110, 111, 120, 127, 128, 129, 130, 137, 144, 145, 146, 147, 154, 161, 162, 163, 164, 171, 178, 179, 180, 181, 188, 195, 197, 198, 199, 206, 213, 214, 215, 216, 223, 230, 231, 232, 233, 241, 248, 249, 250, 251, 259, 266, 267, 268, 269, 276, 283, 284, 285, 286, 293, 300, 302, 303, 304, 313, 349, 389, 390, 391, 392, 405, 416, 417, 426, 430, 431, 436, 447, 448, 449, 460, 471, 472, 481, 492, 493, 494, 495, 505, 516, 517, 522, 525, 532, 533, 534, 535, 542, 548, 552, 553, 554, 560, 566, 570, 571, 572, 578, 585, 586, 587, 588, 594, 602, 603, 604, 611, 617, 618, 619, 620, 627, 633, 634, 635, 636, 637, 643, 651, 652, 653, 654, 660, 669, 670, 671, 677, 685, 686, 687, 688, 694, 701, 702, 703, 709, 716, 717, 718, 726, 733, 734, 735, 743, 751, 752, 753, 759, 786, 787, 814, 816, 821, 822, 826, 828, 829, 833, 834, 839, 843, 844, 849, 853, 854, 859, 864, 865, 870, 874, 875, 880], "kwarg": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 315, 328, 366, 449, 492, 493, 534, 535, 552, 588, 619, 620, 636, 637, 653, 654, 687, 771, 773], "new": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 518, 538, 556, 574, 590, 607, 623, 639, 656, 673, 690, 705, 721, 739, 755, 768, 886, 889, 891], "differ": [16, 769, 827, 883, 889, 892, 897], "fom": 16, "pass": [16, 30, 315, 328, 366, 388, 449], "constructor": [16, 336, 449, 587], "instead": [16, 31, 587, 891], "separ": [16, 890], "argument": [16, 315, 328, 336, 366, 449, 773], "expect": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 317, 662], "been": [16, 37, 56, 71, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 771, 861], "call": [16, 22, 37, 43, 52, 53, 56, 70, 71, 74, 87, 88, 91, 104, 105, 108, 127, 144, 157, 158, 161, 174, 175, 178, 191, 192, 195, 209, 210, 213, 226, 227, 230, 244, 245, 248, 263, 266, 280, 283, 296, 297, 300, 336, 889, 891], "code": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 883, 885], "doe": [16, 37, 56, 74, 91, 108, 127, 138, 141, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 317, 330, 368, 380, 393, 395, 406, 530, 582, 599, 615, 631, 649, 683, 699, 827, 889, 891], "verifi": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 388, 793], "given": [16, 28, 29, 37, 49, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 314, 317, 321, 322, 330, 331, 335, 347, 366, 368, 372, 387, 388, 390, 394, 449, 510, 511, 518, 523, 526, 536, 537, 538, 549, 550, 551, 555, 556, 567, 568, 569, 573, 574, 589, 590, 601, 605, 606, 607, 621, 622, 623, 635, 638, 639, 644, 655, 656, 661, 668, 672, 673, 678, 689, 690, 695, 704, 705, 719, 720, 721, 723, 736, 737, 738, 739, 750, 754, 755, 760, 789, 790, 816, 890], "adjac": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 781], "lie": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300], "topologi": [16, 27, 29, 30, 37, 48, 49, 50, 56, 68, 74, 85, 91, 102, 108, 127, 144, 155, 161, 172, 178, 189, 195, 207, 213, 224, 230, 242, 248, 260, 266, 277, 283, 300, 315, 317, 366, 368, 769, 804, 897, 898, 901], "allow": [16, 37, 56, 74, 85, 91, 108, 121, 127, 144, 161, 178, 195, 207, 213, 230, 248, 260, 266, 283, 300, 322, 323, 336, 338, 388, 769, 861, 892, 897], "them": [16, 37, 56, 68, 74, 91, 102, 108, 127, 144, 155, 161, 178, 189, 195, 213, 224, 230, 242, 248, 266, 283, 300, 482, 781, 792, 883, 889, 890, 897], "respons": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 427], "A": [16, 28, 31, 37, 56, 74, 91, 108, 127, 138, 144, 161, 178, 189, 195, 213, 230, 242, 248, 266, 283, 300, 314, 317, 321, 322, 330, 335, 347, 368, 372, 375, 378, 389, 390, 406, 408, 427, 437, 439, 449, 463, 484, 506, 509, 518, 523, 537, 538, 555, 556, 573, 574, 589, 590, 606, 607, 622, 623, 638, 639, 656, 672, 673, 689, 690, 704, 705, 720, 721, 738, 739, 744, 754, 755, 769, 771, 777, 788, 789, 793, 796, 882, 887, 891, 892, 897], "valueerror": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 771, 774, 778], "less": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 330, 375, 437], "than": [16, 23, 37, 44, 56, 63, 74, 81, 91, 98, 108, 117, 127, 134, 144, 151, 161, 168, 178, 185, 195, 203, 213, 220, 230, 238, 248, 256, 266, 273, 283, 290, 300, 310, 330, 399, 421, 433, 453, 476, 500, 509, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "two": [16, 29, 30, 31, 37, 50, 56, 68, 74, 85, 91, 102, 108, 112, 127, 144, 155, 161, 178, 189, 195, 213, 224, 230, 242, 248, 260, 266, 277, 283, 298, 300, 315, 317, 321, 322, 328, 330, 335, 347, 366, 368, 372, 387, 506, 534, 535, 602, 703, 775, 792, 798, 895, 897], "timbermodel": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 524, 526, 885], "jo": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300], "belong": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300], "whould": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300], "togeth": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 482, 891], "filepath": [18, 24, 39, 45, 58, 64, 76, 82, 93, 99, 110, 118, 129, 135, 146, 152, 163, 169, 180, 186, 198, 204, 215, 221, 232, 239, 250, 257, 268, 274, 285, 291, 303, 311, 391, 401, 416, 422, 430, 434, 447, 456, 471, 477, 494, 501, 516, 520, 532, 540, 553, 558, 570, 576, 585, 592, 603, 609, 617, 625, 633, 641, 651, 658, 670, 675, 685, 692, 701, 707, 716, 724, 733, 741, 751, 757, 786, 806, 821, 824, 828, 829, 833, 836, 843, 846, 853, 856, 864, 867, 874, 877], "construct": [18, 19, 26, 39, 40, 47, 58, 59, 67, 76, 77, 84, 93, 94, 101, 110, 111, 120, 129, 130, 137, 146, 147, 154, 163, 164, 171, 180, 181, 188, 198, 199, 206, 215, 216, 223, 232, 233, 241, 250, 251, 259, 268, 269, 276, 285, 286, 293, 303, 304, 313, 391, 392, 405, 416, 417, 426, 430, 431, 436, 447, 448, 449, 460, 471, 472, 481, 494, 495, 505, 516, 517, 522, 532, 533, 535, 542, 553, 554, 560, 570, 571, 578, 584, 585, 586, 587, 588, 594, 603, 604, 611, 617, 618, 620, 627, 633, 634, 636, 637, 643, 651, 652, 654, 660, 670, 671, 677, 685, 686, 687, 688, 694, 701, 702, 703, 709, 716, 717, 726, 733, 734, 743, 751, 752, 759, 786, 787, 814, 821, 822, 826, 833, 834, 839, 843, 844, 849, 853, 854, 859, 864, 865, 870, 874, 875, 880, 885, 892], "from": [18, 19, 23, 24, 25, 29, 39, 40, 44, 45, 46, 58, 59, 63, 64, 65, 76, 77, 81, 82, 83, 93, 94, 98, 99, 100, 110, 111, 117, 118, 119, 129, 130, 134, 135, 136, 146, 147, 151, 152, 153, 163, 164, 168, 169, 170, 180, 181, 185, 186, 187, 189, 198, 199, 203, 204, 205, 215, 216, 220, 221, 222, 232, 233, 238, 239, 240, 242, 250, 251, 256, 257, 258, 268, 269, 273, 274, 275, 277, 285, 286, 290, 291, 292, 303, 304, 310, 311, 312, 348, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 406, 416, 417, 419, 421, 422, 423, 427, 430, 431, 433, 434, 435, 447, 448, 449, 451, 453, 456, 457, 471, 472, 474, 476, 477, 478, 493, 494, 495, 497, 500, 501, 502, 511, 516, 517, 519, 520, 521, 523, 532, 533, 534, 535, 536, 539, 540, 541, 543, 549, 550, 551, 552, 553, 554, 557, 558, 559, 561, 567, 568, 569, 570, 571, 572, 575, 576, 577, 585, 586, 587, 588, 591, 592, 593, 601, 602, 603, 604, 605, 608, 609, 610, 617, 618, 619, 620, 621, 624, 625, 626, 633, 634, 635, 636, 637, 640, 641, 642, 644, 651, 652, 653, 654, 655, 657, 658, 659, 661, 663, 668, 669, 670, 671, 674, 675, 676, 678, 685, 686, 687, 688, 691, 692, 693, 695, 701, 702, 706, 707, 708, 716, 717, 718, 719, 722, 723, 724, 725, 733, 734, 735, 736, 737, 740, 741, 742, 745, 750, 751, 752, 753, 756, 757, 758, 760, 763, 767, 774, 786, 787, 797, 799, 805, 806, 807, 821, 822, 823, 824, 825, 827, 828, 833, 834, 835, 836, 837, 843, 844, 845, 846, 847, 853, 854, 855, 856, 857, 864, 865, 866, 867, 868, 874, 875, 876, 877, 878, 883, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 897, 899], "json": [18, 19, 24, 25, 39, 40, 45, 46, 58, 59, 64, 65, 76, 77, 82, 83, 93, 94, 99, 100, 110, 111, 118, 119, 129, 130, 135, 136, 146, 147, 152, 153, 163, 164, 169, 170, 180, 181, 186, 187, 198, 199, 204, 205, 215, 216, 221, 222, 232, 233, 239, 240, 250, 251, 257, 258, 268, 269, 274, 275, 285, 286, 291, 292, 303, 304, 311, 312, 391, 392, 401, 402, 416, 417, 422, 423, 430, 431, 434, 435, 447, 448, 456, 457, 471, 472, 477, 478, 494, 495, 501, 502, 516, 517, 520, 521, 532, 533, 540, 541, 553, 554, 558, 559, 570, 571, 576, 577, 585, 586, 592, 593, 603, 604, 609, 610, 617, 618, 625, 626, 633, 634, 641, 642, 651, 652, 658, 659, 670, 671, 675, 676, 685, 686, 692, 693, 701, 702, 707, 708, 716, 717, 724, 725, 733, 734, 741, 742, 751, 752, 757, 758, 786, 787, 806, 807, 821, 822, 824, 825, 827, 828, 829, 833, 834, 836, 837, 843, 844, 846, 847, 853, 854, 856, 857, 864, 865, 867, 868, 874, 875, 877, 878], "file": [18, 24, 39, 45, 58, 64, 76, 82, 93, 99, 110, 118, 129, 135, 146, 152, 163, 169, 180, 186, 198, 204, 215, 221, 232, 239, 250, 257, 268, 274, 285, 291, 303, 311, 391, 401, 416, 422, 430, 434, 447, 456, 471, 477, 494, 501, 516, 520, 523, 524, 526, 532, 540, 553, 558, 570, 576, 585, 592, 603, 609, 617, 625, 633, 641, 651, 658, 670, 675, 685, 692, 701, 707, 716, 724, 733, 741, 751, 757, 786, 806, 821, 824, 827, 828, 829, 833, 836, 843, 846, 853, 856, 864, 867, 874, 877, 887, 889, 893, 894], "str": [18, 19, 23, 24, 25, 31, 39, 40, 44, 45, 46, 49, 58, 59, 63, 64, 65, 76, 77, 81, 82, 83, 93, 94, 98, 99, 100, 110, 111, 117, 118, 119, 129, 130, 134, 135, 136, 146, 147, 151, 152, 153, 163, 164, 168, 169, 170, 180, 181, 185, 186, 187, 198, 199, 203, 204, 205, 215, 216, 220, 221, 222, 232, 233, 238, 239, 240, 242, 250, 251, 256, 257, 258, 268, 269, 273, 274, 275, 285, 286, 290, 291, 292, 303, 304, 310, 311, 312, 315, 387, 391, 392, 399, 401, 402, 416, 417, 421, 422, 423, 430, 431, 433, 434, 435, 447, 448, 453, 456, 457, 471, 472, 476, 477, 478, 494, 495, 500, 501, 502, 506, 507, 508, 511, 512, 516, 517, 519, 520, 521, 523, 524, 526, 532, 533, 539, 540, 541, 543, 552, 553, 554, 557, 558, 559, 561, 570, 571, 572, 575, 576, 577, 585, 586, 591, 592, 593, 603, 604, 608, 609, 610, 617, 618, 624, 625, 626, 633, 634, 640, 641, 642, 651, 652, 657, 658, 659, 663, 669, 670, 671, 674, 675, 676, 685, 686, 691, 692, 693, 701, 702, 706, 707, 708, 710, 716, 717, 722, 724, 725, 727, 733, 734, 740, 741, 742, 745, 751, 752, 753, 756, 757, 758, 762, 767, 768, 773, 774, 783, 786, 787, 788, 791, 805, 806, 807, 816, 821, 822, 823, 824, 825, 828, 829, 833, 834, 835, 836, 837, 843, 844, 845, 846, 847, 853, 854, 855, 856, 857, 861, 864, 865, 866, 867, 868, 874, 875, 876, 877, 878], "path": [18, 24, 39, 45, 58, 64, 76, 82, 93, 99, 110, 118, 129, 135, 146, 152, 163, 169, 180, 186, 198, 204, 215, 221, 232, 239, 250, 257, 268, 274, 285, 291, 303, 311, 391, 401, 416, 422, 430, 434, 447, 456, 471, 477, 494, 501, 516, 520, 523, 526, 532, 540, 553, 558, 570, 576, 585, 592, 603, 609, 617, 625, 633, 641, 651, 658, 670, 675, 685, 692, 701, 707, 716, 724, 733, 741, 751, 757, 786, 806, 821, 824, 828, 829, 833, 836, 843, 846, 853, 856, 864, 867, 874, 877, 894], "ha": [18, 19, 39, 40, 58, 59, 71, 76, 77, 93, 94, 110, 111, 129, 130, 146, 147, 163, 164, 180, 181, 198, 199, 215, 216, 232, 233, 250, 251, 268, 269, 285, 286, 303, 304, 314, 391, 392, 416, 417, 430, 431, 447, 448, 471, 472, 494, 495, 506, 516, 517, 532, 533, 553, 554, 570, 571, 585, 586, 603, 604, 617, 618, 633, 634, 651, 652, 670, 671, 685, 686, 701, 702, 716, 717, 733, 734, 751, 752, 774, 786, 787, 821, 822, 833, 834, 843, 844, 853, 854, 861, 864, 865, 874, 875, 891, 897, 900], "correct": [18, 19, 39, 40, 58, 59, 76, 77, 93, 94, 110, 111, 129, 130, 146, 147, 163, 164, 180, 181, 198, 199, 215, 216, 232, 233, 250, 251, 268, 269, 285, 286, 303, 304, 368, 391, 392, 416, 417, 430, 431, 447, 448, 471, 472, 494, 495, 516, 517, 532, 533, 553, 554, 570, 571, 585, 586, 603, 604, 617, 618, 633, 634, 644, 651, 652, 670, 671, 685, 686, 695, 701, 702, 716, 717, 733, 734, 751, 752, 786, 787, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "schema": [18, 19, 26, 39, 40, 47, 58, 59, 67, 76, 77, 84, 93, 94, 101, 110, 111, 120, 129, 130, 137, 146, 147, 154, 163, 164, 171, 180, 181, 188, 198, 199, 206, 215, 216, 223, 232, 233, 241, 250, 251, 259, 268, 269, 276, 285, 286, 293, 303, 304, 313, 391, 392, 405, 416, 417, 426, 430, 431, 436, 447, 448, 460, 471, 472, 481, 494, 495, 505, 516, 517, 522, 532, 533, 542, 553, 554, 560, 570, 571, 578, 585, 586, 594, 603, 604, 611, 617, 618, 627, 633, 634, 643, 651, 652, 660, 670, 671, 677, 685, 686, 694, 701, 702, 709, 716, 717, 726, 733, 734, 743, 751, 752, 759, 786, 787, 814, 821, 822, 826, 833, 834, 839, 843, 844, 849, 853, 854, 859, 864, 865, 870, 874, 875, 880], "typeerror": [18, 19, 39, 40, 58, 59, 76, 77, 93, 94, 110, 111, 129, 130, 146, 147, 163, 164, 180, 181, 198, 199, 215, 216, 232, 233, 250, 251, 268, 269, 285, 286, 303, 304, 391, 392, 416, 417, 430, 431, 447, 448, 471, 472, 494, 495, 516, 517, 532, 533, 553, 554, 570, 571, 585, 586, 603, 604, 617, 618, 633, 634, 651, 652, 670, 671, 685, 686, 701, 702, 716, 717, 733, 734, 751, 752, 786, 787, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "static": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 318, 319, 320, 321, 332, 333, 334, 335, 344, 345, 346, 347, 369, 370, 371, 372], "beam_a": [20, 21, 29, 41, 42, 60, 61, 78, 79, 95, 96, 102, 114, 115, 131, 132, 138, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 307, 774], "beam_b": [20, 21, 29, 41, 42, 60, 61, 78, 79, 95, 96, 102, 114, 115, 131, 132, 138, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 307], "ignore_end": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306], "Of": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306], "face": [20, 21, 23, 41, 42, 44, 50, 60, 61, 63, 78, 79, 81, 95, 96, 98, 114, 115, 117, 131, 132, 134, 148, 149, 151, 165, 166, 168, 182, 183, 185, 200, 201, 203, 217, 218, 220, 234, 235, 238, 252, 253, 256, 270, 271, 273, 287, 288, 290, 305, 306, 310, 375, 388, 399, 421, 433, 437, 449, 453, 476, 493, 500, 511, 519, 539, 557, 561, 575, 591, 608, 624, 636, 637, 640, 644, 657, 662, 674, 687, 688, 691, 695, 703, 706, 722, 740, 745, 756, 805, 823, 835, 845, 855, 866, 876, 897], "one": [20, 21, 41, 42, 60, 61, 72, 78, 79, 85, 95, 96, 114, 115, 121, 131, 132, 148, 149, 155, 165, 166, 182, 183, 189, 200, 201, 207, 217, 218, 224, 234, 235, 242, 252, 253, 260, 270, 271, 277, 287, 288, 305, 306, 322, 379, 409, 440, 464, 485, 511, 703, 775, 778, 860, 861, 889, 891, 897, 899], "whose": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 277, 287, 288, 305, 306], "normal": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 348, 375, 394, 492, 511, 572, 653, 753], "most": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306], "orthogon": [20, 41, 60, 78, 95, 114, 131, 148, 165, 182, 200, 217, 234, 252, 270, 287, 305], "done": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306], "inner": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 897], "product": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306], "centerlin": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 102, 112, 114, 115, 131, 132, 148, 149, 155, 165, 166, 182, 183, 189, 200, 201, 217, 218, 224, 234, 235, 242, 252, 253, 270, 271, 277, 287, 288, 305, 306, 330, 348, 375, 387, 389, 390, 888, 890, 891, 900], "result": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 277, 287, 288, 305, 306, 387, 427, 512, 530, 546, 564, 582, 599, 615, 631, 649, 666, 683, 699, 714, 731, 748, 860, 891, 892], "closest": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 892], "0": [20, 23, 28, 41, 44, 60, 63, 78, 81, 85, 95, 98, 114, 117, 121, 131, 134, 148, 151, 165, 168, 182, 185, 189, 200, 203, 207, 217, 220, 224, 234, 238, 242, 252, 256, 260, 270, 273, 287, 290, 305, 310, 314, 375, 381, 384, 399, 400, 410, 413, 421, 433, 437, 441, 444, 449, 453, 455, 465, 468, 476, 486, 489, 500, 509, 512, 519, 527, 534, 537, 539, 543, 552, 555, 557, 561, 572, 573, 575, 579, 589, 591, 596, 602, 606, 608, 612, 619, 622, 624, 628, 635, 636, 637, 638, 640, 646, 653, 657, 663, 669, 672, 674, 680, 687, 688, 689, 691, 704, 706, 710, 713, 718, 720, 722, 727, 729, 735, 738, 740, 745, 753, 754, 756, 767, 781, 805, 823, 835, 845, 855, 866, 876, 881, 884, 886, 891, 895, 897], "chosen": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306], "attach": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 315], "ignor": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306], "tupl": [20, 21, 29, 30, 31, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 317, 322, 330, 368, 375, 388, 394, 437, 775], "face_index": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306], "frame": [20, 21, 31, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 348, 375, 380, 388, 393, 395, 406, 427, 437, 509, 511, 534, 549, 551, 552, 564, 567, 569, 572, 601, 619, 620, 653, 654, 668, 669, 718, 735, 748, 750, 753, 774, 861, 884, 885, 888, 891, 892, 901], "index": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 189, 200, 201, 217, 218, 234, 235, 242, 252, 253, 270, 271, 287, 288, 305, 306, 380, 393, 394, 395, 400, 455, 511, 512, 534, 552, 572, 602, 619, 635, 636, 637, 653, 669, 687, 688, 718, 735, 753, 762, 768, 885, 897], "center": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 287, 288, 305, 306, 646, 653, 769, 882, 897], "1": [21, 23, 42, 44, 61, 63, 79, 81, 85, 96, 98, 115, 117, 121, 132, 134, 149, 151, 166, 168, 183, 185, 189, 201, 203, 207, 218, 220, 224, 235, 238, 242, 253, 256, 260, 271, 273, 288, 290, 306, 310, 375, 399, 421, 433, 453, 476, 486, 500, 509, 511, 519, 527, 537, 539, 543, 555, 557, 561, 573, 575, 589, 591, 596, 606, 608, 612, 622, 624, 628, 638, 640, 646, 657, 663, 672, 674, 680, 689, 691, 704, 706, 710, 720, 722, 727, 738, 740, 745, 754, 756, 763, 805, 823, 835, 845, 855, 866, 876, 884, 889, 891, 897, 901], "restor": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 289, 309], "refer": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 289, 309, 375, 380, 393, 394, 395, 400, 437, 455, 482, 511, 512, 527, 534, 543, 552, 561, 572, 579, 587, 595, 596, 602, 612, 619, 628, 635, 636, 637, 646, 653, 663, 669, 680, 687, 688, 710, 718, 727, 735, 745, 753, 885, 888, 889, 890], "dure": [22, 23, 43, 44, 63, 71, 81, 98, 117, 134, 151, 168, 185, 189, 203, 220, 238, 256, 273, 290, 310, 323, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 796, 805, 823, 835, 845, 855, 861, 866, 876], "serial": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 289, 309, 525, 827], "part": [22, 43, 509, 601, 602, 771, 778, 881, 885, 889, 891, 895], "To": [22, 43, 886, 888, 889, 896, 898, 901], "avoid": [22, 43, 381, 384, 410, 413, 441, 465, 468, 486, 489], "circular": [22, 43], "store": [22, 43, 890, 891], "kei": [22, 31, 43, 375, 377, 396, 437, 511, 662, 890], "respect": [22, 31, 43], "de": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 289, 309], "sinc": [22, 43, 796], "role": [22, 29, 43, 322], "specif": [22, 29, 43, 785, 793, 885, 889, 891, 892, 897], "e": [22, 29, 43, 534, 552, 572, 602, 619, 635, 669, 718, 735, 753, 883, 886, 890, 900], "g": [22, 29, 43, 883, 890], "cross": [22, 29, 43, 50, 62, 66, 68, 80, 97, 116, 121, 133, 150, 155, 167, 172, 184, 189, 202, 207, 219, 224, 236, 242, 254, 272, 289, 294, 298, 309, 375, 389, 390, 552, 572, 669, 718, 727, 735, 753, 891, 892, 897], "concret": [22, 43], "exampl": [22, 23, 43, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 314, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 774, 805, 823, 835, 845, 855, 866, 876, 885, 888, 890, 891, 901], "tbuttjoint": [22, 43, 884, 885], "as_str": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "comput": [23, 29, 30, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 381, 382, 383, 384, 385, 399, 410, 411, 413, 414, 421, 433, 441, 442, 443, 444, 445, 453, 465, 466, 467, 468, 469, 476, 486, 487, 488, 489, 490, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 779, 780, 805, 823, 835, 845, 855, 866, 876], "hash": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "comparison": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "version": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "control": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "algorithm": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 314, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "digest": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "hexadecim": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "format": [23, 24, 25, 44, 45, 46, 63, 64, 65, 81, 82, 83, 98, 99, 100, 117, 118, 119, 134, 135, 136, 151, 152, 153, 168, 169, 170, 185, 186, 187, 203, 204, 205, 220, 221, 222, 238, 239, 240, 256, 257, 258, 273, 274, 275, 290, 291, 292, 310, 311, 312, 399, 401, 402, 421, 422, 423, 433, 434, 435, 453, 456, 457, 476, 477, 478, 500, 501, 502, 510, 519, 520, 521, 523, 539, 540, 541, 557, 558, 559, 575, 576, 577, 591, 592, 593, 608, 609, 610, 624, 625, 626, 640, 641, 642, 657, 658, 659, 674, 675, 676, 691, 692, 693, 706, 707, 708, 722, 724, 725, 740, 741, 742, 756, 757, 758, 805, 806, 807, 823, 824, 825, 827, 835, 836, 837, 845, 846, 847, 855, 856, 857, 866, 867, 868, 876, 877, 878, 890], "rather": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "byte": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "datastructur": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 382, 399, 411, 421, 433, 442, 443, 453, 466, 467, 476, 487, 488, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 779, 780, 800, 802, 805, 810, 811, 812, 813, 823, 835, 845, 855, 866, 876], "import": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 774, 796, 805, 823, 835, 845, 855, 866, 876, 889, 901], "mesh": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 382, 399, 411, 421, 433, 442, 443, 453, 466, 467, 476, 487, 488, 500, 519, 539, 557, 575, 591, 608, 624, 636, 637, 640, 657, 674, 687, 688, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876, 884], "from_obj": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "get": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 783, 788, 789, 805, 823, 835, 845, 855, 866, 876, 888, 890], "obj": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 861, 866, 876], "v1": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "v2": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "vertex_attribut": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "vertex_sampl": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "z": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 375, 389, 390, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 579, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 800, 801, 802, 803, 805, 823, 835, 845, 855, 866, 876, 891, 892, 895, 900], "v3": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "pretti": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 291, 292, 311, 312, 401, 402, 422, 423, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878], "compact": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 291, 292, 311, 312, 401, 402, 422, 423, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878], "minim": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 291, 292, 311, 312, 401, 402, 422, 423, 427, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878], "nativ": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 291, 292, 311, 312, 401, 402, 422, 423, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878], "save": [24, 25, 45, 46, 62, 64, 65, 80, 82, 83, 97, 99, 100, 116, 118, 119, 133, 135, 136, 150, 152, 153, 167, 169, 170, 184, 186, 187, 202, 204, 205, 219, 221, 222, 236, 239, 240, 254, 257, 258, 272, 274, 275, 289, 291, 292, 309, 311, 312, 401, 402, 422, 423, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878, 894], "newlin": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 291, 292, 311, 312, 401, 402, 422, 423, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878], "indent": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 291, 292, 311, 312, 401, 402, 422, 423, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878], "without": [24, 25, 45, 46, 64, 65, 82, 83, 85, 99, 100, 118, 119, 121, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 207, 221, 222, 239, 240, 257, 258, 260, 274, 275, 291, 292, 311, 312, 401, 402, 422, 423, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878, 887, 891], "ani": [24, 25, 26, 45, 46, 47, 64, 65, 67, 82, 83, 84, 99, 100, 101, 118, 119, 120, 135, 136, 137, 138, 141, 152, 153, 154, 169, 170, 171, 186, 187, 188, 204, 205, 206, 221, 222, 223, 239, 240, 241, 257, 258, 259, 274, 275, 276, 291, 292, 293, 311, 312, 313, 401, 402, 405, 422, 423, 426, 434, 435, 436, 456, 457, 460, 477, 478, 481, 501, 502, 505, 520, 521, 522, 540, 541, 542, 546, 558, 559, 560, 564, 576, 577, 578, 592, 593, 594, 609, 610, 611, 625, 626, 627, 641, 642, 643, 658, 659, 660, 666, 675, 676, 677, 692, 693, 694, 707, 708, 709, 714, 724, 725, 726, 731, 741, 742, 743, 748, 757, 758, 759, 806, 807, 814, 824, 825, 826, 836, 837, 839, 846, 847, 849, 856, 857, 859, 867, 868, 870, 877, 878, 880, 883, 887, 897, 901], "whitespac": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 291, 292, 311, 312, 401, 402, 422, 423, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878], "exclud": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 291, 292, 311, 312, 401, 402, 422, 423, 434, 435, 456, 457, 477, 478, 501, 502, 520, 521, 540, 541, 558, 559, 576, 577, 592, 593, 609, 610, 625, 626, 641, 642, 658, 659, 675, 676, 692, 693, 707, 708, 724, 725, 741, 742, 757, 758, 806, 807, 824, 825, 836, 837, 846, 847, 856, 857, 867, 868, 877, 878], "valid": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 293, 313, 405, 426, 436, 460, 481, 505, 522, 542, 560, 578, 594, 611, 627, 643, 660, 677, 694, 709, 726, 743, 759, 814, 826, 839, 849, 859, 870, 880], "against": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 293, 313, 405, 426, 436, 460, 481, 505, 522, 542, 560, 578, 594, 611, 627, 643, 660, 677, 694, 709, 726, 743, 759, 814, 826, 839, 849, 859, 870, 880], "raw": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 293, 313, 405, 426, 436, 460, 481, 505, 522, 542, 560, 578, 594, 611, 627, 643, 660, 677, 694, 709, 726, 743, 759, 814, 826, 839, 849, 859, 870, 880, 891], "can": [26, 47, 67, 68, 84, 101, 120, 137, 138, 154, 171, 188, 189, 206, 223, 241, 259, 276, 293, 313, 321, 335, 347, 372, 405, 426, 427, 436, 460, 461, 481, 505, 506, 522, 542, 560, 572, 578, 587, 594, 611, 627, 643, 646, 653, 660, 677, 694, 709, 726, 743, 753, 759, 771, 814, 817, 826, 839, 849, 859, 861, 870, 880, 883, 886, 888, 889, 891, 897, 901], "__from_data__": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 293, 313, 405, 426, 436, 460, 481, 505, 522, 542, 560, 578, 594, 611, 627, 643, 660, 677, 694, 709, 726, 743, 759, 814, 826, 839, 849, 859, 870, 880], "provid": [27, 237, 255, 343, 703, 769, 771, 774, 778, 827, 887, 888, 891, 898], "tool": [27, 189, 196, 543, 548, 561, 566, 572, 646, 653, 753, 885, 886, 888, 897, 899, 900], "detect": [27, 898], "intersect": [27, 28, 29, 30, 112, 315, 317, 321, 328, 330, 335, 347, 366, 368, 372, 530, 582, 599, 615, 631, 649, 683, 699, 703], "rtree": [28, 881], "max_dist": [28, 29, 30, 315, 317, 321, 328, 330, 335, 347, 366, 368, 372, 373, 781], "find": [28, 314, 511, 785, 881, 891, 897], "pair": [28, 29, 314, 881, 890], "set": [28, 189, 237, 255, 314, 317, 330, 366, 368, 662, 792, 881, 890, 891, 892, 897, 898], "r": [28, 314], "tree": [28, 314, 771], "search": [28, 314, 896], "neighbor": [28, 314, 881], "addit": [28, 31, 449, 773, 888, 890, 891, 895], "distanc": [28, 29, 30, 315, 317, 321, 328, 330, 335, 347, 366, 368, 372, 449, 543, 561, 635, 663, 745, 781, 892, 898], "apart": 28, "non": 28, "touch": 28, "still": 28, "consid": [28, 29, 30, 315, 317, 321, 328, 330, 335, 347, 366, 368, 372, 380, 393, 395, 781, 897], "neightbor": [28, 881], "tol": [29, 30, 317, 330, 368, 373, 769], "1e": [29, 30, 317, 321, 330, 335, 347, 368, 372, 373], "06": [29, 30, 373], "within": [29, 331, 341, 861, 891], "sensit": 29, "consist": 29, "order": [29, 314, 322, 336, 368, 509, 860], "first": [29, 30, 85, 102, 138, 155, 189, 224, 242, 260, 277, 315, 322, 387, 527, 535, 775, 792, 796, 895, 897, 901], "second": [29, 30, 85, 102, 138, 155, 189, 224, 242, 260, 277, 315, 322, 387, 527, 535, 775, 792, 796, 895], "otherwis": [29, 50, 317, 330, 343, 368, 579, 887, 891], "thei": [29, 237, 255, 368, 427, 534, 897, 901], "were": [29, 31, 506, 890], "input": [29, 314, 427, 762, 763, 767, 888, 889, 890, 891, 892, 894, 895, 897, 898], "todo": [29, 30, 336, 388, 406, 427, 437, 482, 509, 587, 774, 788, 791, 804, 897], "need": [29, 336, 427, 889, 890, 901], "rework": [29, 30], "asap": 29, "toler": [29, 30, 769, 898], "mathemat": [29, 30], "maximum": [29, 30, 315, 317, 321, 328, 330, 335, 347, 366, 368, 372, 781], "desigen": [29, 30], "unit": [29, 30, 314, 388, 482, 509], "jointtopologi": [29, 30, 315, 330, 366, 769, 885], "wall_a": 30, "wall_b": 30, "wall": [30, 348, 461, 769, 774, 781, 885, 892], "through": [30, 85, 121, 207, 260, 277, 388, 427, 579, 587, 653, 882, 897], "potenti": 30, "f": 30, "interact": [31, 769, 775, 785, 789, 792, 798, 883, 901], "instanti": [31, 71, 121, 461, 889], "directli": [31, 121, 328, 395, 461, 771, 772, 892, 897], "dict": [31, 315, 328, 366, 427, 449, 509, 510, 628, 636, 637, 680, 687, 688, 769, 773, 889], "map": [31, 888, 900], "uniqu": [31, 375, 437, 783], "identifi": [31, 314, 783], "dictionari": [31, 662], "enumer": 48, "possibl": [48, 336, 890], "topo_unknown": [48, 49], "topo_i": 48, "topo_l": [48, 49], "topo_t": [48, 49], "topo_x": [48, 49], "valu": [49, 85, 121, 207, 255, 260, 314, 375, 437, 510, 537, 552, 555, 573, 589, 606, 622, 638, 669, 672, 689, 704, 720, 727, 738, 754, 816, 890], "For": [49, 298, 314, 796, 816, 885, 900], "log": [49, 816], "int": [49, 189, 224, 242, 375, 377, 380, 393, 394, 395, 396, 400, 437, 455, 509, 512, 527, 534, 552, 561, 572, 596, 602, 612, 619, 628, 635, 636, 637, 653, 669, 687, 688, 710, 718, 727, 735, 745, 753, 763, 767, 768, 775, 816, 861], "One": [49, 816, 861], "l": [50, 68, 85, 102, 121, 242, 366, 374, 899], "butt": [50, 172, 294, 298, 374, 892], "main_beam": [50, 68, 85, 121, 155, 172, 189, 207, 224, 242, 260, 277, 294, 635, 884], "cross_beam": [50, 68, 85, 121, 155, 172, 189, 207, 224, 242, 260, 277, 294, 884], "mill_depth": [50, 155, 172, 294, 897], "depth": [50, 155, 172, 189, 224, 237, 242, 294, 543, 552, 561, 572, 579, 612, 628, 635, 646, 653, 663, 669, 680, 703, 710, 727, 745, 753, 884, 897], "pocket": [50, 155, 172, 294, 543, 635, 645, 885, 897], "mill": [50, 155, 172, 294, 546, 564, 666, 714, 731, 748, 897], "small_beam_butt": [50, 66, 897], "smaller": [50, 66, 375, 891], "section": [50, 66, 375, 389, 390, 883, 888, 891, 892, 896, 897], "modify_cross": [50, 897], "extend": [50, 377, 388, 796, 897], "opposit": [50, 395, 595, 897], "cut": [50, 85, 121, 189, 196, 207, 224, 260, 294, 512, 527, 530, 534, 535, 536, 543, 546, 548, 549, 550, 551, 552, 561, 564, 566, 567, 568, 569, 572, 582, 595, 596, 599, 601, 602, 605, 612, 615, 619, 620, 621, 628, 631, 635, 636, 637, 644, 645, 646, 649, 653, 654, 655, 661, 662, 663, 666, 668, 669, 678, 679, 680, 683, 687, 688, 695, 699, 703, 710, 714, 718, 719, 723, 727, 731, 735, 736, 737, 744, 745, 748, 750, 753, 760, 761, 888, 891, 897, 898], "plane": [50, 102, 112, 388, 530, 534, 535, 536, 546, 552, 572, 582, 599, 602, 615, 619, 620, 621, 631, 635, 649, 653, 654, 655, 666, 669, 683, 699, 703, 714, 718, 719, 731, 735, 737, 750, 753, 891, 895, 897, 900], "reject_i": [50, 897], "reject": 50, "necessari": [52, 70, 71, 87, 104, 157, 174, 191, 209, 226, 244, 296, 886, 889], "automat": [52, 53, 70, 87, 88, 104, 105, 157, 158, 174, 175, 189, 191, 192, 209, 210, 226, 227, 242, 244, 245, 263, 280, 296, 297, 543, 552, 561, 572, 663, 669, 745, 753, 761, 897, 900], "could": [52, 70, 87, 104, 157, 174, 191, 209, 226, 244, 296, 507, 508, 552, 572, 669, 718, 735, 753, 815], "both": [53, 88, 105, 158, 175, 192, 210, 227, 242, 245, 263, 280, 297, 775, 778, 895, 897], "after": [62, 71, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 289, 309, 393, 530, 546, 564, 582, 599, 615, 631, 649, 666, 683, 699, 714, 731, 748, 896], "flip": [66, 68, 85, 121, 207, 260, 587, 897], "priorit": 66, "lapjoint": [68, 72, 85, 207, 260, 885], "frenchridgelap": [68, 885], "lap": [68, 85, 121, 207, 260, 374, 596, 605, 885], "ridg": [68, 596, 605], "align": [68, 314, 375, 381, 410, 437, 441, 465, 486, 779, 888, 900], "dimens": [68, 72, 298, 375, 394, 509, 840, 891], "flip_lap_sid": [68, 85, 121, 207, 260, 897], "side": [68, 85, 121, 207, 260, 375, 380, 393, 394, 395, 400, 437, 455, 511, 512, 527, 534, 543, 552, 561, 572, 579, 587, 596, 602, 612, 619, 628, 635, 636, 637, 646, 653, 663, 669, 680, 687, 688, 703, 710, 718, 727, 735, 745, 753, 892, 895, 897], "drillhole_diam": [68, 596, 602, 897], "drill": [68, 596, 620, 885], "hole": [68, 427, 596, 888, 895, 897], "made": [68, 189, 224, 242, 527, 543, 561, 587, 588, 596, 612, 628, 646, 663, 680, 710, 727, 745, 897], "process_joineri": 71, "process": [71, 189, 242, 321, 335, 336, 347, 372, 375, 437, 509, 512, 518, 530, 535, 537, 538, 546, 555, 556, 564, 573, 574, 579, 582, 587, 588, 589, 590, 599, 606, 607, 615, 620, 622, 623, 631, 638, 639, 649, 654, 656, 666, 672, 673, 683, 689, 690, 699, 704, 705, 714, 720, 721, 731, 738, 739, 748, 754, 755, 796, 885, 888, 889, 901], "It": [71, 317, 368, 406, 482, 727, 885, 886, 888, 890, 891, 897, 898, 900], "execut": [71, 815, 861, 883], "via": [71, 885], "add_extens": 71, "compar": 72, "addition": 72, "match": [72, 368, 511, 889, 897], "cut_plane_bia": [85, 121, 207, 260, 897], "shift": [85, 121, 207, 260, 897], "deeper": [85, 121, 207, 260], "complet": [85, 121, 207, 260, 482, 896], "either": [85, 121, 207, 260, 387, 527, 543, 561, 596, 612, 628, 663, 710, 727, 745, 762, 892], "5": [85, 121, 207, 260, 375, 400, 455, 512, 543, 561], "miter": [102, 112, 294, 374], "bisector": [102, 897], "angl": [102, 189, 196, 527, 543, 548, 552, 561, 566, 572, 579, 596, 612, 628, 646, 653, 663, 669, 680, 745, 753, 800, 801, 895, 897], "cutoff": [102, 897], "perpendicular": [102, 112, 394, 427, 653, 891], "point": [112, 375, 381, 384, 387, 390, 410, 413, 427, 437, 441, 465, 468, 486, 489, 510, 543, 561, 579, 587, 663, 745, 769, 800, 801, 885, 897, 900], "abstract": [121, 406, 461], "common": 121, "t": [121, 138, 155, 172, 189, 207, 224, 242, 366, 374, 899], "x": [121, 260, 277, 366, 374, 375, 380, 393, 395, 527, 543, 561, 579, 596, 612, 628, 646, 653, 663, 680, 710, 727, 745, 802, 803, 891, 899, 900], "do": [121, 546, 564, 666, 714, 731, 748, 887, 889], "sub": 121, "null": 138, "shouldn": 138, "birdsmouth": 155, "along": [155, 172, 189, 207, 224, 242, 260, 277, 375, 380, 393, 394, 395, 543, 552, 572, 663, 669, 753, 897], "tbirdsmouth": 155, "length": [172, 189, 207, 242, 260, 277, 348, 375, 389, 437, 509, 543, 552, 561, 572, 628, 635, 646, 653, 663, 669, 680, 703, 745, 753, 897], "anoth": [172, 207], "dovetail": [189, 196, 543, 548, 549, 550, 552, 561, 566, 567, 568, 572, 753], "correspond": [189, 242, 375, 387, 512, 525, 890, 891, 897, 900], "notch": [189, 224, 277, 727, 897], "fit": [189, 224, 242, 887, 897], "start_i": [189, 242, 527, 543, 561, 572, 579, 612, 628, 646, 663, 680, 727, 735, 745, 753, 897], "start": [189, 242, 375, 377, 380, 387, 388, 390, 393, 395, 527, 543, 552, 561, 572, 579, 596, 612, 628, 646, 653, 662, 663, 669, 679, 680, 710, 727, 745, 753, 888, 891, 897], "posit": [189, 242, 375, 385, 414, 445, 469, 490, 509, 595, 596, 646, 653, 895, 897], "y": [189, 242, 294, 298, 375, 394, 527, 543, 552, 561, 572, 579, 612, 628, 646, 663, 669, 680, 727, 745, 753, 802, 803, 891, 897, 900], "axi": [189, 242, 314, 375, 380, 381, 389, 390, 393, 394, 395, 410, 437, 441, 465, 486, 543, 552, 561, 579, 628, 653, 663, 669, 745, 779, 800, 801, 891, 895, 897, 900], "start_depth": [189, 242, 543, 552, 561, 572, 612, 663, 669, 680, 745, 753, 897], "surfac": [189, 242, 348, 400, 455, 511, 552, 572, 718, 735, 889, 895], "rotat": [189, 242, 561, 572, 579, 745, 753, 802, 803, 812, 813, 891, 897], "around": [189, 242, 437, 449, 579, 891, 897], "width": [189, 242, 348, 375, 389, 390, 437, 509, 543, 552, 561, 572, 628, 663, 669, 680, 710, 713, 727, 729, 745, 753, 884, 890, 891, 892, 897], "cone_angl": [189, 543, 552, 561, 572, 897], "determin": [189, 322, 348, 449, 897], "taper": [189, 224, 744, 897], "dovetail_shap": [189, 897], "shape": [189, 224, 242, 375, 427, 437, 443, 543, 552, 561, 572, 620, 654, 663, 669, 710, 727, 744, 745, 753, 761, 897], "integ": [189, 242, 375, 437, 897], "squar": [189, 242, 543, 561, 663, 745, 761, 897], "2": [189, 224, 242, 375, 537, 555, 573, 589, 606, 622, 638, 672, 689, 704, 720, 738, 754, 884, 889, 897, 901], "round": [189, 242, 543, 561, 663, 745, 761, 897], "3": [189, 242, 375, 886, 889, 897, 901], "4": [189, 242, 375, 884, 889, 897], "radiu": [189, 242, 543, 552, 561, 572, 663, 669, 745, 753, 761, 897], "tool_angl": [189, 196, 548, 566, 897], "tool_diamet": [189, 196, 548, 566, 897], "tool_height": [189, 196, 548, 566, 897], "height": [189, 196, 224, 242, 348, 375, 389, 390, 437, 509, 548, 552, 561, 566, 572, 669, 710, 713, 727, 729, 745, 753, 884, 890, 891, 892, 897], "initi": [189, 398, 420, 452, 475, 498], "later": [189, 890, 891], "flank_angl": [189, 543, 552, 561, 572], "flank": [189, 543, 552, 561, 572], "applic": [189, 242, 323, 897, 899], "shape_radiu": [189, 242, 543, 552, 561, 572, 663, 669, 745, 753, 897], "machin": [189, 242, 375, 437, 536, 549, 550, 551, 567, 568, 569, 601, 605, 621, 628, 636, 637, 644, 655, 661, 662, 668, 678, 680, 687, 688, 695, 719, 723, 736, 737, 750, 760, 889, 894], "cutter": [196, 548, 566], "step": [224, 237, 546, 564, 666, 710, 714, 727, 731, 744, 748, 817, 819, 860, 885, 889, 896], "more": [224, 379, 409, 427, 440, 464, 485, 506, 885, 888, 889, 891, 897], "step_shap": [224, 710, 727, 897], "heel": [224, 237, 710, 727, 744, 897], "doubl": [224, 294, 527, 534, 535, 537, 555, 573, 589, 606, 622, 638, 672, 689, 704, 710, 720, 727, 738, 744, 754, 897], "step_depth": [224, 237, 710, 718, 727, 735, 897], "combin": [224, 897], "heel_depth": [224, 237, 710, 718, 727, 735, 897], "tapered_heel": [224, 718, 727, 735, 744, 897], "tenon_mortise_height": [224, 897], "tenon": [224, 242, 561, 567, 568, 572, 669, 710, 713, 723, 761, 885], "mortis": [224, 242, 543, 549, 550, 552, 727, 729, 736, 885], "featru": [224, 897], "tenonmortis": 242, "main_beam_guid": 242, "cross_beam_guid": 242, "somewher": [260, 277], "typic": [277, 861, 889], "offset": [277, 381, 384, 410, 413, 441, 465, 468, 486, 489, 552, 572, 669, 753, 892], "rest": 277, "top": [277, 437, 449, 543, 561, 645, 662, 663, 745, 753, 888, 897], "No": [277, 645], "three": [294, 897, 901], "coplanar": 298, "inflate_bi": [314, 486, 489, 881], "bound": [314, 375, 381, 384, 410, 413, 437, 441, 444, 465, 468, 486, 489, 779, 780, 881], "box": [314, 375, 381, 384, 410, 413, 437, 441, 444, 465, 468, 486, 489, 509, 736, 779, 780, 861, 881, 888, 891], "aabb": [314, 375, 381, 410, 437, 441, 465, 486], "enlarg": 314, "amount": [314, 377, 388, 881], "regard": [314, 552, 669], "inflat": [314, 381, 384, 410, 413, 441, 444, 465, 468, 486, 489, 881], "pluggabl": 314, "plugin": [314, 885], "avail": 314, "jointrul": [315, 321, 328, 335, 366, 372, 885, 898], "categori": [315, 317, 322, 890, 891, 901], "rule": [315, 317, 318, 319, 320, 321, 328, 330, 332, 333, 334, 335, 343, 344, 345, 346, 347, 348, 366, 368, 369, 370, 371, 372, 380, 393, 395, 885, 888, 891, 892, 898, 901], "assign": [315, 366, 769, 771, 778, 897, 900], "joint_typ": [315, 328, 366], "category_a": 315, "category_b": [315, 322], "topo": 315, "support": [315, 317, 437, 861, 882, 883], "keyword": [315, 328, 366, 449, 773], "model_max_dist": [317, 330, 368], "09": [317, 321, 330, 335, 347, 368, 372], "exceed": [317, 368, 601, 602], "timberel": [317, 321, 322, 328, 330, 335, 343, 347, 368, 372, 375, 406, 437, 507, 636, 687, 688, 774, 885], "absolut": [317, 330, 368], "alreadi": [317, 330, 368, 771, 774], "use_default": [320, 334, 346, 371], "handled_pair": [321, 335, 347, 372], "definit": [321, 335, 347, 372, 889, 898], "jointdefinit": [321, 335, 347, 372, 885], "sort": 322, "accord": [322, 375, 437, 890], "catergory_a": 322, "debug": [323, 506, 892, 898, 899], "inform": [323, 506, 885, 892, 898, 899, 900], "visual": [323, 506, 817, 861, 883], "inspect": [323, 899], "relat": [323, 482, 572, 753, 889], "feature_error": 323, "occur": [323, 506, 796, 899], "joint_error": 323, "complianc": 330, "link": 336, "delai": [336, 338], "actual": [336, 338, 387], "downstream": [336, 338], "compon": [336, 338, 762, 763, 765, 766, 767, 768, 886, 890, 891, 892, 894, 895, 896, 898, 901], "There": [336, 883, 890, 897, 901], "wai": [336, 827, 883], "name": [336, 512, 523, 762, 765, 766, 767, 768, 773, 774, 788, 791, 889, 890, 899], "altern": 336, "transform": [336, 385, 414, 445, 469, 490, 800, 801, 802, 803, 809, 811, 812, 813], "shall": [338, 774, 887], "assembli": [348, 884, 885, 892, 899], "geometri": [348, 375, 382, 383, 384, 385, 403, 404, 406, 410, 411, 412, 413, 414, 424, 425, 427, 437, 442, 443, 444, 445, 449, 458, 459, 465, 466, 467, 468, 469, 479, 480, 486, 487, 488, 489, 490, 503, 504, 506, 508, 509, 530, 535, 546, 549, 550, 551, 564, 568, 569, 582, 584, 587, 588, 599, 601, 605, 615, 620, 621, 631, 644, 649, 654, 655, 666, 668, 678, 683, 695, 699, 714, 719, 723, 731, 735, 736, 737, 748, 750, 760, 779, 780, 800, 801, 803, 808, 812, 813, 861, 881, 885, 888, 891, 892, 898, 899, 900, 901], "must": [348, 527, 543, 561, 596, 612, 628, 636, 637, 653, 663, 687, 688, 703, 710, 727, 745, 796, 892, 895], "planar": [348, 400, 455, 493, 888, 892, 897], "beam_width": [348, 892], "aka": 348, "thick": [348, 427, 437, 449, 492, 493, 703, 892], "caviti": 348, "frame_depth": [348, 892], "stud_spac": [348, 892], "space": [348, 527, 543, 561, 572, 596, 612, 628, 646, 653, 663, 680, 710, 727, 745, 753, 892], "stud": [348, 375, 891, 892, 897], "z_axi": 348, "vector": [348, 389, 390, 427, 449, 587, 800, 801, 812, 813, 885, 891, 892], "orient": [348, 384, 389, 390, 413, 444, 468, 489, 492, 527, 561, 596, 612, 628, 644, 679, 695, 703, 710, 727, 745, 780, 900], "post": 348, "insid": [348, 804, 883], "zaxi": 348, "categoryrul": [348, 885], "line": [348, 375, 389, 437, 587, 588, 885, 890, 891, 892, 895, 896], "panel_length": 348, "panel_height": 348, "jack_stud": [348, 892, 897], "surfaceassembli": 348, "beamdefinit": 348, "jack": [348, 612, 620, 892], "king_stud": [348, 892, 897], "king": [348, 892], "edge_stud": [348, 892, 897], "edg": [348, 375, 437, 449, 543, 552, 561, 572, 595, 663, 669, 703, 745, 753, 775, 892, 897], "sill": [348, 892, 897], "header": [348, 892, 897], "plate": [348, 427, 461, 683, 687, 688, 695, 769, 885, 892, 898], "element_on": 352, "element_two": 352, "beam_def": 359, "element_lists_to_intersect": 359, "polylin": [360, 427, 437, 449, 492], "element_loop": 361, "k": 366, "topology_typ": 366, "constant": 366, "global": [366, 899], "revers": 368, "beama": 373, "beamb": 373, "x_default": 374, "t_default": 374, "l_default": 374, "slat": 375, "etc": [375, 437, 850, 883, 885, 891], "rectangular": [375, 891], "local": [375, 579, 891], "coordin": [375, 385, 414, 427, 437, 445, 469, 490, 509, 527, 543, 561, 572, 579, 596, 612, 628, 646, 653, 663, 680, 710, 727, 745, 753, 891], "system": [375, 437, 511, 579, 891], "locat": [375, 861, 891], "major": [375, 891], "also": [375, 882, 885, 888, 890, 891, 897], "fibr": [375, 888], "direct": [375, 388, 389, 390, 449, 762, 802, 803, 881, 891, 892, 901], "solid": [375, 427, 898], "wood": 375, "larger": [375, 891, 897], "parametr": [375, 400, 455, 527, 543, 561, 572, 596, 612, 628, 646, 653, 663, 680, 710, 727, 745, 753, 885], "blank": [375, 377, 396, 437, 449, 509, 601, 796, 891], "materi": [375, 437, 771, 777, 778, 793, 891, 900], "stock": [375, 437, 891], "produc": [375, 437], "ref_fram": [375, 437], "btlx": [375, 437, 509, 511, 512, 523, 524, 526, 885, 888], "standard": [375, 437, 892], "ref_sid": [375, 437, 552, 572, 653, 669, 718, 735, 753], "6": [375, 437, 511, 636, 637, 687, 688], "ref_edg": 375, "long": [375, 388], "equal": [375, 703], "centerline_start": 375, "centerline_end": 375, "xmin": [375, 437], "ymin": [375, 437], "zmin": [375, 437], "xmax": [375, 437], "ymax": [375, 437], "zmax": [375, 437], "long_edg": 375, "midpoint": 375, "middl": [375, 897], "onc": [375, 437, 891], "wide": [375, 437], "joint_kei": [377, 396], "remov": [377, 396, 397, 398, 419, 420, 451, 452, 474, 475, 497, 498, 797, 798, 799, 890, 895, 897], "well": [377, 774], "lement": [378, 408, 439, 463, 484], "ref_side_index": [380, 393, 394, 395, 512, 534, 552, 572, 602, 619, 635, 636, 637, 653, 669, 687, 688, 718, 735, 753], "previou": 380, "right": [380, 393, 395, 646, 653, 887, 897], "hand": [380, 393, 395], "thumb": [380, 393, 395], "rs5": [380, 393, 395], "rs6": [380, 393, 395, 512], "back": [380, 662], "rel": [380, 393, 395, 646, 653], "collis": [382, 411, 442, 466, 487], "include_featur": [383, 443, 467, 488], "includ": [383, 443, 467, 488, 523, 887, 889], "brep": [383, 437, 443, 454, 467, 488, 493, 530, 546, 550, 564, 568, 582, 599, 605, 615, 631, 636, 637, 649, 661, 666, 678, 683, 687, 688, 699, 714, 723, 731, 748, 760, 885, 900], "obb": [384, 413, 444, 468, 489], "world": [385, 414, 427, 445, 469, 490, 891, 892], "spatial": [385, 414, 445, 469, 490], "hierarchi": [385, 414, 445, 469, 490, 769, 771, 901], "endpoint": [387, 390], "closer": 387, "interest": 387, "depend": [387, 389, 390, 886, 889, 897], "pln": 388, "metric": 388, "minimum": [388, 653], "z_vector": [389, 390], "indic": [389, 390, 506, 596, 890, 891], "worldz": [389, 390], "worldx": [389, 390], "point_start": 390, "point_end": 390, "end_point": 390, "next": 393, "front": [393, 662], "parallel": [394, 628, 635, 703, 861, 891, 897], "measur": 394, "across": 395, "state": [398, 420, 452, 475, 498], "debug_info": [398, 420, 452, 475, 498, 506], "side_index": [400, 455], "request": [400, 455], "copi": [404, 425, 459, 480, 504, 801, 803, 810, 811, 813, 887], "compas_model": [404, 425, 459, 480, 504, 774, 785, 788, 791, 860], "screw": [406, 850], "dowel": [406, 897], "bracket": 406, "we": [406, 427, 886], "rethink": 406, "entir": [406, 653], "clear": [406, 763, 767], "appropri": 406, "put": [427, 509], "some": [427, 888, 900], "thought": 427, "what": 427, "v": 427, "perhap": 427, "clearli": 427, "prehap": 427, "would": 427, "sens": 427, "move": 427, "stuff": 427, "over": 427, "here": [427, 796, 886, 889, 892, 893, 900], "ballnodejoint": [427, 885], "while": [427, 506, 537, 555, 573, 589, 606, 622, 638, 672, 689, 704, 720, 738, 754, 886, 897, 899], "attempt": [427, 899], "tightli": 427, "coupl": 427, "differec": 427, "outlin": [427, 437, 449], "seem": 427, "just": 427, "outline_point": 427, "structur": [427, 809, 810, 811, 882, 885, 888, 892, 898, 901], "assum": 427, "goe": [427, 646, 653], "extra": 427, "geometr": [427, 885, 889, 895, 898], "These": [427, 890, 897], "boolean": [427, 888, 892, 895, 898], "btlxfromgeometrydefinit": 427, "plywood": 437, "clt": 437, "bottom": [437, 449, 543, 561, 572, 662, 663, 745, 753, 897], "outline_a": 437, "nurbscurv": 437, "princip": [437, 602], "outline_b": 437, "number": [437, 509, 763, 767, 892, 901], "blank_extens": [437, 449], "blank_length": 437, "area": [437, 454], "is_beam": 461, "is_plat": 461, "is_wal": 461, "is_group_el": 461, "slab": 482, "singl": [482, 493, 861, 889], "serv": [482, 900], "group": [482, 771, 772, 773, 774, 785, 788, 791, 890], "form": 482, "often": 482, "prefabr": 482, "envelop": 482, "bodi": 482, "docstr": 482, "_": [488, 890], "open": [492, 882, 885, 896], "sure": 492, "correctli": [492, 644, 695, 890], "except": [506, 507, 508, 775, 796], "try": 506, "suppos": 506, "debug_geometri": 506, "about": [506, 885], "cannot": [507, 508, 891, 897], "messag": [507, 508], "feature_geometri": 508, "element_geometri": 508, "modifi": [508, 808, 886, 887], "act": 509, "wrapper": 509, "realli": 509, "parent": [509, 771, 772, 773, 774], "order_num": 509, "scale_factor": 509, "scale": [509, 800, 801, 812, 813, 900], "factor": [509, 518, 537, 538, 555, 556, 573, 574, 589, 590, 606, 607, 622, 623, 638, 639, 656, 672, 673, 689, 690, 704, 705, 720, 721, 738, 739, 754, 755, 802, 803], "anyth": 509, "mm": [509, 579], "attr": [509, 773], "corner": [509, 897], "et": 510, "element_fac": 511, "essenti": 511, "translat": [511, 800, 801, 802, 803], "zero": [512, 892], "rs1": [512, 534, 552, 572, 602, 619, 635, 669, 718, 735, 753], "prioriti": [512, 861, 897], "process_id": 512, "id": [512, 861, 883], "processing_nam": 512, "is_joineri": 512, "joineri": [512, 796], "subprocess": [514, 529, 545, 563, 581, 598, 614, 630, 648, 665, 682, 698, 712, 730, 747], "nest": [514, 529, 545, 563, 581, 598, 614, 630, 648, 665, 682, 698, 712, 730, 747], "write": [523, 524, 829, 890, 891], "company_nam": 523, "compani": 523, "gramazio": [523, 882, 885, 887], "kohler": [523, 882, 885, 887], "research": [523, 882, 885, 887], "file_nam": 523, "comment": 523, "xml": [524, 525, 526, 894], "type_": 525, "regist": 525, "callabl": [525, 788], "file_path": 526, "model_to_xml": 526, "btlxprocess": [527, 538, 543, 552, 556, 561, 574, 579, 590, 596, 607, 612, 623, 628, 639, 646, 656, 663, 669, 673, 680, 690, 696, 705, 710, 721, 727, 739, 745, 755, 885, 889], "orientationtyp": [527, 561, 596, 612, 628, 710, 727, 745, 885], "start_x": [527, 543, 561, 579, 596, 612, 628, 646, 653, 663, 680, 710, 727, 745], "100000": [527, 543, 561, 596, 612, 628, 646, 663, 680, 710, 727, 745], "50000": [527, 612, 628, 646, 680, 710, 727], "angle_1": 527, "horizont": [527, 596, 612, 628, 680, 703], "179": [527, 543, 561, 596, 612, 628, 646, 663, 680, 710, 727, 745, 895], "9": [527, 543, 561, 596, 612, 628, 646, 663, 680, 710, 727, 745, 895], "inclination_1": 527, "vertic": [527, 612, 628, 646, 680, 703, 891, 897], "angle_2": 527, "inclination_2": 527, "plane_a": [535, 895], "plane_b": [535, 895], "mean": [537, 555, 573, 589, 606, 622, 638, 672, 689, 704, 720, 738, 754], "size": [537, 555, 573, 589, 606, 622, 638, 672, 689, 704, 720, 738, 754, 891, 900], "5000": [543, 561, 663, 745, 774], "margin": [543, 561, 663, 745], "180": [543, 663], "slope": [543, 628, 663, 680], "reder": [543, 561, 663, 745], "inclin": [543, 561, 579, 612, 628, 646, 663, 680, 710, 727, 745], "limitation_top": 543, "limit": [543, 561, 579, 628, 636, 637, 645, 646, 662, 663, 680, 687, 688, 727, 745, 753, 887], "unlimit": [543, 645], "length_limited_bottom": [543, 561, 663, 745, 753], "whether": [543, 561, 646, 663, 727, 745, 753, 861, 887], "1000": [543, 561, 663, 710, 713, 727, 729, 745], "cone": [543, 552, 561, 572], "30": [543, 561], "use_flank_angl": [543, 561], "35": [543, 561], "volum": [546, 550, 564, 568, 605, 636, 637, 644, 661, 666, 678, 687, 688, 695, 714, 723, 731, 736, 748, 760, 769], "itersect": [546, 564, 666, 714, 731, 748], "fail": [546, 564, 666, 714, 731, 748], "80": [552, 572, 669, 753], "40": [552, 572, 669, 753], "28": [552, 572, 669, 753], "10": [552, 572, 882, 886], "15": [552, 572], "20": [552, 572, 579, 669, 718, 735, 753], "case": [552, 669, 892, 898], "hous": [552, 669], "equival": [552, 669], "dovetailtenon": [552, 753, 885], "length_limited_top": [561, 663, 745, 753], "50": [572, 579, 753], "define_dovetail_tool": [572, 753], "degre": [579, 646, 653], "depth_limit": [579, 646], "go": 579, "cylind": [584, 861], "chang": [587, 897], "too": 587, "fragil": 587, "caus": 587, "issu": [587, 896], "alt": 587, "straight": [587, 891], "enum": [595, 645, 679, 744, 761, 815], "refedg": [595, 596], "liter": [595, 645, 679, 744, 761], "oppedg": [595, 596], "french": [596, 605], "ref_posit": 596, "edgepositiontyp": [596, 885], "drillhol": [596, 602], "flag": 596, "other_beam": 602, "furthest": [602, 892], "rafter": [612, 620, 891], "89": 628, "lead_angle_parallel": 628, "lead": 628, "lead_angl": 628, "lead_inclination_parallel": 628, "lead_inclin": 628, "machining_limit": [628, 636, 637, 680, 687, 688], "polyhedron": [636, 637, 644, 687, 688, 695], "subtract": [644, 695, 895, 898], "ensur": [644, 695], "like": [645, 885, 888, 898], "longitudin": [646, 654], "90": [646, 653], "start_limit": 646, "end_limit": 646, "certain": 646, "angle_start": [646, 653], "angle_end": [646, 653], "tool_posit": [646, 653], "alignmenttyp": [646, 653], "left": [646, 653], "so": [653, 887, 889], "chamfer": [653, 745, 753], "chanfer": 653, "logitudin": 654, "neg": 661, "configur": [662, 769], "expected_kei": 662, "face_limited_start": 662, "face_limited_end": 662, "face_limited_front": 662, "face_limited_back": 662, "face_limited_top": 662, "face_limited_bottom": 662, "awai": 679, "internal_angl": 680, "intern": 680, "tilt_ref_sid": 680, "tilt": [680, 897], "tilt_end_sid": 680, "tilt_opp_sid": 680, "oppos": 680, "tilt_start_sid": 680, "full": 703, "accross": 703, "exactli": 703, "small": 703, "specifi": [703, 783, 892], "strut_inclin": [710, 727], "strut": [710, 727], "taperedheel": [710, 744], "presenc": [710, 727], "ye": [710, 727, 886], "tenon_width": [710, 713], "tenon_height": [710, 713], "stepjointnotch": [713, 885], "notch_limit": [727, 735], "notch_width": [727, 735], "strut_height": [727, 735], "stepshapetyp": [727, 885], "mortise_width": [727, 729], "mortise_height": [727, 729], "plana": 735, "io": 762, "ghenv": [762, 763, 767, 768], "environ": [762, 763, 767, 768, 883, 885, 886, 891], "permanent_param_count": [763, 767], "delet": [763, 767], "param": [765, 766], "input_nam": [767, 768], "rename_count": 767, "keep_connect": 767, "renam": [767, 768], "express": [769, 887], "center_of_mass": 769, "mass": 769, "detected_topo": 769, "beam_a_kei": 769, "beam_b_kei": 769, "total": 769, "groupnod": [771, 772, 773, 774], "under": [771, 772], "root": [771, 772], "elementnod": [771, 772], "upstream": [774, 788, 791], "mayb": 774, "wall1_group": 774, "200": 774, "3000": 774, "wall1": 774, "worldxi": [774, 884], "100": 774, "300": 774, "add_el": 774, "has_group": 774, "b": [775, 792, 798], "graph": 775, "neither": 778, "retriev": [783, 890], "yield": [784, 794, 795], "interaction_typ": 785, "group_nam": [788, 791], "filter_": 788, "queri": [788, 789, 791], "filter": [788, 890], "stop_on_first_error": 796, "feasibl": 796, "instruct": [796, 815, 817, 840, 850, 861, 871, 885, 896], "sequenc": [796, 860, 885], "reason": 796, "iter": 796, "encount": [796, 896], "radian": [800, 801], "connectionsolv": [804, 885], "human": [816, 861], "robot": [816, 861], "build": [817, 827, 828, 829, 860, 861, 886, 901], "collect": [817, 881, 898], "pars": 827, "implemet": 827, "your": [827, 882, 886], "own": [827, 897], "you": [827, 882, 886, 888, 892, 896, 897, 901], "want": 827, "buildingplan": [828, 829, 860, 885], "building_plan": 829, "tranform": [838, 848, 858, 879], "3d": [840, 850, 885], "linear": [840, 891], "incorpor": 850, "simpl": [860, 885, 888], "per": 860, "assembl": 861, "actor": [861, 885], "element_id": 861, "cad": [861, 883], "elements_held": 861, "held": 861, "is_built": 861, "is_plan": 861, "increment": 861, "text": [871, 883, 894], "overlai": 871, "prior": 881, "project": [882, 885], "develop": [882, 885], "aleksandra": 882, "apolinarska": 882, "chen": 882, "kasir": 882, "gonzalo": 882, "casa": 882, "eth": [882, 885, 887], "zurich": [882, 885, 887], "swiss": 882, "nation": 882, "scienc": 882, "foundat": 882, "compet": 882, "digit": 882, "nccr": 882, "dfab": 882, "programm": 882, "As": 882, "mani": [882, 883, 885, 886], "contributor": 882, "work": [882, 892], "acknowledg": 882, "misc": 882, "titl": 882, "librari": [882, 883, 885, 888, 896], "author": [882, 887], "anna": 882, "http": [882, 886, 889], "github": [882, 886], "com": [882, 886, 889], "gramaziokohl": 882, "year": 882, "2022": 882, "2023": 882, "doi": 882, "5281": 882, "zenodo": 882, "7934267": 882, "url": 882, "present": [883, 897], "concept": [883, 888], "run": [883, 885], "python": [883, 885, 886, 888], "session": 883, "editor": 883, "sublim": 883, "studio": 883, "eclips": 883, "blender": 883, "timberassembli": 884, "geometry_typ": 884, "add_beam": 884, "packag": [885, 886, 889, 896], "written": 885, "ecosystem": 885, "rhinocero": 885, "plug": 885, "activ": [885, 886, 891, 898, 900], "being": 885, "continu": 885, "At": 885, "stage": 885, "encompass": 885, "fast": 885, "intuit": 885, "custom": 885, "entiti": 885, "maintain": 885, "semant": 885, "futur": 885, "expand": 885, "entail": [885, 890], "analysi": 885, "softwar": [885, 887], "specialist": 885, "built": [885, 888], "upon": 885, "framework": 885, "basic": 885, "complex": 885, "resolv": 885, "backend": 885, "rhinocommon": 885, "sdk": 885, "handl": 885, "opencascad": 885, "occ": 885, "introduct": 885, "instal": [885, 888], "api": [885, 888], "lbuttjoint": 885, "lfrenchridgelapjoint": 885, "llapjoint": 885, "lmiterjoint": 885, "nulljoint": 885, "tbirdsmouthjoint": 885, "tdovetailjoint": 885, "tlapjoint": 885, "tstepjoint": 885, "tenonmortisejoint": 885, "xlapjoint": 885, "xnotchjoint": 885, "ybuttjoint": 885, "find_neighboring_el": 885, "btlxwriter": 885, "btlxpart": [885, 889], "doublecut": [885, 895, 897], "dovetailmortis": 885, "jackraftercut": [885, 895], "longitudinalcut": 885, "slot": 885, "stepjoint": 885, "limitationtoptyp": 885, "machininglimit": 885, "tenonshapetyp": 885, "debuginfom": 885, "directrul": 885, "featuredefinit": 885, "surfacemodel": 885, "topologyrul": 885, "guess_joint_topology_2beam": 885, "set_default_joint": 885, "buildingplanpars": 885, "lineardimens": 885, "model3d": 885, "simplesequencegener": 885, "text3d": 885, "clear_gh_param": 885, "add_gh_param": 885, "manage_dynamic_param": 885, "list_input_valid": 885, "item_input_valid": 885, "get_leaf_subclass": 885, "rename_gh_input": 885, "workflow": [885, 888, 890, 891], "show": [885, 888], "util": [885, 888], "contribut": [885, 886, 888], "licens": 885, "cite": 885, "recommend": 886, "mamba": 886, "manag": [886, 896], "n": 886, "myenvnam": 886, "c": [886, 887], "conda": 886, "forg": 886, "7": 886, "m": 886, "compas_rhino": 886, "v7": 886, "wish": 886, "fork": 886, "repositori": 886, "clone": 886, "git": 886, "yourgithub_usernam": 886, "cd": 886, "edit": 886, "mode": 886, "pip": 886, "dev": 886, "compil": 886, "rhino7": [886, 896], "invok": 886, "ghuser": 886, "rhino8": [886, 896], "mit": 887, "copyright": 887, "2025": 887, "permiss": 887, "herebi": 887, "grant": 887, "free": 887, "charg": 887, "person": 887, "obtain": 887, "document": [887, 889, 890, 891, 896, 900], "deal": 887, "restrict": 887, "merg": 887, "publish": 887, "distribut": 887, "sublicens": 887, "sell": 887, "permit": 887, "whom": 887, "furnish": 887, "subject": 887, "condit": 887, "abov": [887, 897], "notic": 887, "substanti": 887, "portion": 887, "THE": 887, "AS": 887, "warranti": 887, "OF": 887, "kind": [887, 897], "OR": 887, "impli": [887, 898], "BUT": 887, "NOT": 887, "TO": 887, "merchant": 887, "FOR": 887, "particular": 887, "purpos": 887, "AND": 887, "noninfring": 887, "IN": 887, "NO": 887, "event": 887, "holder": 887, "BE": 887, "liabl": 887, "claim": 887, "damag": 887, "liabil": 887, "action": 887, "contract": 887, "tort": 887, "aris": 887, "out": 887, "WITH": 887, "easi": 888, "autom": 888, "bake": 888, "textur": [888, 900], "render": [888, 900], "style": 888, "might": [888, 897], "componen": 888, "overal": 888, "idea": 888, "how": [888, 896, 897, 901], "Then": 888, "explain": [888, 896], "requr": 889, "btlx_process": 889, "found": 889, "design2machin": 889, "btlx_2_1_0": 889, "pdf": 889, "joint_factori": 889, "append": 889, "process_typ": 889, "header_attribut": 889, "process_param": 889, "where": [889, 891, 894, 897, 900], "factori": 889, "btlxjoint": 889, "register_joint": 889, "deriv": 889, "__init__": 889, "py": 889, "mind": 889, "intend": [890, 891], "hybrid": 890, "encod": 890, "concaten": 890, "colon": 890, "entri": 890, "underscor": 890, "attr1nam": 890, "attr1value_attr2nam": 890, "attr2valu": 890, "four": [890, 897], "zvector": [890, 891], "setstandardattribut": 890, "getstandardattribut": 890, "user": [890, 892, 896], "criteria": 890, "setcustomattribut": 890, "getcustomattribut": 890, "checkstandardattribut": 890, "miss": 890, "deleteattribut": 890, "joist": 891, "linecurv": 891, "referenc": [891, 892], "latter": 891, "drawn": 891, "li": [891, 900], "sai": 891, "convent": 891, "updaterefobj": 891, "extract": [891, 899], "centrelin": 891, "curv": 891, "help": [892, 896], "bit": 892, "vocabulari": 892, "stud_direct": 892, "creategeometri": [892, 898], "debuginfo": [892, 898], "sheeting_outsid": 892, "sheet": 892, "sheeting_insid": 892, "lintel_post": 892, "onto": 892, "edge_stud_offset": 892, "flush": [892, 897], "custom_dimens": 892, "joint_overrid": 892, "dynam": [892, 897], "select": [892, 897, 899], "demo": 893, "content": 894, "oper": [895, 898], "ly": 895, "01": [895, 897], "cylindr": 895, "command": 896, "packagemanag": 896, "press": 896, "enter": 896, "window": 896, "click": [896, 897], "restart": 896, "success": 896, "toolbar": 896, "look": 896, "tab": 896, "retart": 896, "consult": 896, "offici": 896, "seek": 896, "forum": 896, "lower": 897, "hereaft": 897, "lowest": 897, "highest": 897, "level": 897, "canva": 897, "now": 897, "drop": 897, "down": 897, "becaus": 897, "everi": 897, "halflap": 897, "overwrit": [897, 901], "variabl": 897, "highli": 897, "By": [897, 901], "shorten": 897, "clean": 897, "meet": 897, "half": 897, "upper": 897, "overlap": 897, "rang": 897, "99": 897, "unlik": 897, "centr": 897, "keep": 897, "secur": 897, "prevent": 897, "sequenti": 897, "third": 897, "outer": 897, "remain": 897, "unchang": 897, "crate": 897, "doblecut": 897, "summaris": 897, "compos": 898, "computation": 898, "expens": 898, "disabl": 898, "maxdist": 898, "max": 898, "visualis": 898, "preview": 899, "recogn": 899, "bakewithboxmap": 900, "layer": 900, "desir": 900, "random": 900, "deviat": 900, "mapsiz": 900, "adjust": 900, "imag": 900, "ratio": 900, "bitmap": 900, "care": 901, "final": 901}, "objects": {"compas_timber.connections": [[10, 0, 1, "", "BallNodeJoint"], [27, 0, 1, "", "ConnectionSolver"], [31, 0, 1, "", "Joint"], [48, 0, 1, "", "JointTopology"], [50, 0, 1, "", "LButtJoint"], [68, 0, 1, "", "LFrenchRidgeLapJoint"], [85, 0, 1, "", "LLapJoint"], [102, 0, 1, "", "LMiterJoint"], [121, 0, 1, "", "LapJoint"], [138, 0, 1, "", "NullJoint"], [155, 0, 1, "", "TBirdsmouthJoint"], [172, 0, 1, "", "TButtJoint"], [189, 0, 1, "", "TDovetailJoint"], [207, 0, 1, "", "TLapJoint"], [224, 0, 1, "", "TStepJoint"], [242, 0, 1, "", "TenonMortiseJoint"], [260, 0, 1, "", "XLapJoint"], [277, 0, 1, "", "XNotchJoint"], [294, 0, 1, "", "YButtJoint"], [314, 2, 1, "", "find_neighboring_elements"]], "compas_timber.connections.BallNodeJoint": [[11, 1, 1, "", "ToString"], [12, 1, 1, "", "add_extensions"], [13, 1, 1, "", "add_features"], [14, 1, 1, "", "check_elements_compatibility"], [15, 1, 1, "", "copy"], [16, 1, 1, "", "create"], [17, 1, 1, "", "element_count_complies"], [18, 1, 1, "", "from_json"], [19, 1, 1, "", "from_jsonstring"], [20, 1, 1, "", "get_face_most_ortho_to_beam"], [21, 1, 1, "", "get_face_most_towards_beam"], [22, 1, 1, "", "restore_beams_from_keys"], [23, 1, 1, "", "sha256"], [24, 1, 1, "", "to_json"], [25, 1, 1, "", "to_jsonstring"], [26, 1, 1, "", "validate_data"]], "compas_timber.connections.ConnectionSolver": [[28, 1, 1, "", "find_intersecting_pairs"], [29, 1, 1, "", "find_topology"], [30, 1, 1, "", "find_wall_wall_topology"]], "compas_timber.connections.Joint": [[32, 1, 1, "", "ToString"], [33, 1, 1, "", "add_extensions"], [34, 1, 1, "", "add_features"], [35, 1, 1, "", "check_elements_compatibility"], [36, 1, 1, "", "copy"], [37, 1, 1, "", "create"], [38, 1, 1, "", "element_count_complies"], [39, 1, 1, "", "from_json"], [40, 1, 1, "", "from_jsonstring"], [41, 1, 1, "", "get_face_most_ortho_to_beam"], [42, 1, 1, "", "get_face_most_towards_beam"], [43, 1, 1, "", "restore_beams_from_keys"], [44, 1, 1, "", "sha256"], [45, 1, 1, "", "to_json"], [46, 1, 1, "", "to_jsonstring"], [47, 1, 1, "", "validate_data"]], "compas_timber.connections.JointTopology": [[49, 1, 1, "", "get_name"]], "compas_timber.connections.LButtJoint": [[51, 1, 1, "", "ToString"], [52, 1, 1, "", "add_extensions"], [53, 1, 1, "", "add_features"], [54, 1, 1, "", "check_elements_compatibility"], [55, 1, 1, "", "copy"], [56, 1, 1, "", "create"], [57, 1, 1, "", "element_count_complies"], [58, 1, 1, "", "from_json"], [59, 1, 1, "", "from_jsonstring"], [60, 1, 1, "", "get_face_most_ortho_to_beam"], [61, 1, 1, "", "get_face_most_towards_beam"], [62, 1, 1, "", "restore_beams_from_keys"], [63, 1, 1, "", "sha256"], [64, 1, 1, "", "to_json"], [65, 1, 1, "", "to_jsonstring"], [66, 1, 1, "", "update_beam_roles"], [67, 1, 1, "", "validate_data"]], "compas_timber.connections.LFrenchRidgeLapJoint": [[69, 1, 1, "", "ToString"], [70, 1, 1, "", "add_extensions"], [71, 1, 1, "", "add_features"], [72, 1, 1, "", "check_elements_compatibility"], [73, 1, 1, "", "copy"], [74, 1, 1, "", "create"], [75, 1, 1, "", "element_count_complies"], [76, 1, 1, "", "from_json"], [77, 1, 1, "", "from_jsonstring"], [78, 1, 1, "", "get_face_most_ortho_to_beam"], [79, 1, 1, "", "get_face_most_towards_beam"], [80, 1, 1, "", "restore_beams_from_keys"], [81, 1, 1, "", "sha256"], [82, 1, 1, "", "to_json"], [83, 1, 1, "", "to_jsonstring"], [84, 1, 1, "", "validate_data"]], "compas_timber.connections.LLapJoint": [[86, 1, 1, "", "ToString"], [87, 1, 1, "", "add_extensions"], [88, 1, 1, "", "add_features"], [89, 1, 1, "", "check_elements_compatibility"], [90, 1, 1, "", "copy"], [91, 1, 1, "", "create"], [92, 1, 1, "", "element_count_complies"], [93, 1, 1, "", "from_json"], [94, 1, 1, "", "from_jsonstring"], [95, 1, 1, "", "get_face_most_ortho_to_beam"], [96, 1, 1, "", "get_face_most_towards_beam"], [97, 1, 1, "", "restore_beams_from_keys"], [98, 1, 1, "", "sha256"], [99, 1, 1, "", "to_json"], [100, 1, 1, "", "to_jsonstring"], [101, 1, 1, "", "validate_data"]], "compas_timber.connections.LMiterJoint": [[103, 1, 1, "", "ToString"], [104, 1, 1, "", "add_extensions"], [105, 1, 1, "", "add_features"], [106, 1, 1, "", "check_elements_compatibility"], [107, 1, 1, "", "copy"], [108, 1, 1, "", "create"], [109, 1, 1, "", "element_count_complies"], [110, 1, 1, "", "from_json"], [111, 1, 1, "", "from_jsonstring"], [112, 1, 1, "", "get_cutoff_plane"], [113, 1, 1, "", "get_cutting_planes"], [114, 1, 1, "", "get_face_most_ortho_to_beam"], [115, 1, 1, "", "get_face_most_towards_beam"], [116, 1, 1, "", "restore_beams_from_keys"], [117, 1, 1, "", "sha256"], [118, 1, 1, "", "to_json"], [119, 1, 1, "", "to_jsonstring"], [120, 1, 1, "", "validate_data"]], "compas_timber.connections.LapJoint": [[122, 1, 1, "", "ToString"], [123, 1, 1, "", "add_extensions"], [124, 1, 1, "", "add_features"], [125, 1, 1, "", "check_elements_compatibility"], [126, 1, 1, "", "copy"], [127, 1, 1, "", "create"], [128, 1, 1, "", "element_count_complies"], [129, 1, 1, "", "from_json"], [130, 1, 1, "", "from_jsonstring"], [131, 1, 1, "", "get_face_most_ortho_to_beam"], [132, 1, 1, "", "get_face_most_towards_beam"], [133, 1, 1, "", "restore_beams_from_keys"], [134, 1, 1, "", "sha256"], [135, 1, 1, "", "to_json"], [136, 1, 1, "", "to_jsonstring"], [137, 1, 1, "", "validate_data"]], "compas_timber.connections.NullJoint": [[139, 1, 1, "", "ToString"], [140, 1, 1, "", "add_extensions"], [141, 1, 1, "", "add_features"], [142, 1, 1, "", "check_elements_compatibility"], [143, 1, 1, "", "copy"], [144, 1, 1, "", "create"], [145, 1, 1, "", "element_count_complies"], [146, 1, 1, "", "from_json"], [147, 1, 1, "", "from_jsonstring"], [148, 1, 1, "", "get_face_most_ortho_to_beam"], [149, 1, 1, "", "get_face_most_towards_beam"], [150, 1, 1, "", "restore_beams_from_keys"], [151, 1, 1, "", "sha256"], [152, 1, 1, "", "to_json"], [153, 1, 1, "", "to_jsonstring"], [154, 1, 1, "", "validate_data"]], "compas_timber.connections.TBirdsmouthJoint": [[156, 1, 1, "", "ToString"], [157, 1, 1, "", "add_extensions"], [158, 1, 1, "", "add_features"], [159, 1, 1, "", "check_elements_compatibility"], [160, 1, 1, "", "copy"], [161, 1, 1, "", "create"], [162, 1, 1, "", "element_count_complies"], [163, 1, 1, "", "from_json"], [164, 1, 1, "", "from_jsonstring"], [165, 1, 1, "", "get_face_most_ortho_to_beam"], [166, 1, 1, "", "get_face_most_towards_beam"], [167, 1, 1, "", "restore_beams_from_keys"], [168, 1, 1, "", "sha256"], [169, 1, 1, "", "to_json"], [170, 1, 1, "", "to_jsonstring"], [171, 1, 1, "", "validate_data"]], "compas_timber.connections.TButtJoint": [[173, 1, 1, "", "ToString"], [174, 1, 1, "", "add_extensions"], [175, 1, 1, "", "add_features"], [176, 1, 1, "", "check_elements_compatibility"], [177, 1, 1, "", "copy"], [178, 1, 1, "", "create"], [179, 1, 1, "", "element_count_complies"], [180, 1, 1, "", "from_json"], [181, 1, 1, "", "from_jsonstring"], [182, 1, 1, "", "get_face_most_ortho_to_beam"], [183, 1, 1, "", "get_face_most_towards_beam"], [184, 1, 1, "", "restore_beams_from_keys"], [185, 1, 1, "", "sha256"], [186, 1, 1, "", "to_json"], [187, 1, 1, "", "to_jsonstring"], [188, 1, 1, "", "validate_data"]], "compas_timber.connections.TDovetailJoint": [[190, 1, 1, "", "ToString"], [191, 1, 1, "", "add_extensions"], [192, 1, 1, "", "add_features"], [193, 1, 1, "", "check_elements_compatibility"], [194, 1, 1, "", "copy"], [195, 1, 1, "", "create"], [196, 1, 1, "", "define_dovetail_tool"], [197, 1, 1, "", "element_count_complies"], [198, 1, 1, "", "from_json"], [199, 1, 1, "", "from_jsonstring"], [200, 1, 1, "", "get_face_most_ortho_to_beam"], [201, 1, 1, "", "get_face_most_towards_beam"], [202, 1, 1, "", "restore_beams_from_keys"], [203, 1, 1, "", "sha256"], [204, 1, 1, "", "to_json"], [205, 1, 1, "", "to_jsonstring"], [206, 1, 1, "", "validate_data"]], "compas_timber.connections.TLapJoint": [[208, 1, 1, "", "ToString"], [209, 1, 1, "", "add_extensions"], [210, 1, 1, "", "add_features"], [211, 1, 1, "", "check_elements_compatibility"], [212, 1, 1, "", "copy"], [213, 1, 1, "", "create"], [214, 1, 1, "", "element_count_complies"], [215, 1, 1, "", "from_json"], [216, 1, 1, "", "from_jsonstring"], [217, 1, 1, "", "get_face_most_ortho_to_beam"], [218, 1, 1, "", "get_face_most_towards_beam"], [219, 1, 1, "", "restore_beams_from_keys"], [220, 1, 1, "", "sha256"], [221, 1, 1, "", "to_json"], [222, 1, 1, "", "to_jsonstring"], [223, 1, 1, "", "validate_data"]], "compas_timber.connections.TStepJoint": [[225, 1, 1, "", "ToString"], [226, 1, 1, "", "add_extensions"], [227, 1, 1, "", "add_features"], [228, 1, 1, "", "check_elements_compatibility"], [229, 1, 1, "", "copy"], [230, 1, 1, "", "create"], [231, 1, 1, "", "element_count_complies"], [232, 1, 1, "", "from_json"], [233, 1, 1, "", "from_jsonstring"], [234, 1, 1, "", "get_face_most_ortho_to_beam"], [235, 1, 1, "", "get_face_most_towards_beam"], [236, 1, 1, "", "restore_beams_from_keys"], [237, 1, 1, "", "set_step_depths"], [238, 1, 1, "", "sha256"], [239, 1, 1, "", "to_json"], [240, 1, 1, "", "to_jsonstring"], [241, 1, 1, "", "validate_data"]], "compas_timber.connections.TenonMortiseJoint": [[243, 1, 1, "", "ToString"], [244, 1, 1, "", "add_extensions"], [245, 1, 1, "", "add_features"], [246, 1, 1, "", "check_elements_compatibility"], [247, 1, 1, "", "copy"], [248, 1, 1, "", "create"], [249, 1, 1, "", "element_count_complies"], [250, 1, 1, "", "from_json"], [251, 1, 1, "", "from_jsonstring"], [252, 1, 1, "", "get_face_most_ortho_to_beam"], [253, 1, 1, "", "get_face_most_towards_beam"], [254, 1, 1, "", "restore_beams_from_keys"], [255, 1, 1, "", "set_default_values"], [256, 1, 1, "", "sha256"], [257, 1, 1, "", "to_json"], [258, 1, 1, "", "to_jsonstring"], [259, 1, 1, "", "validate_data"]], "compas_timber.connections.XLapJoint": [[261, 1, 1, "", "ToString"], [262, 1, 1, "", "add_extensions"], [263, 1, 1, "", "add_features"], [264, 1, 1, "", "check_elements_compatibility"], [265, 1, 1, "", "copy"], [266, 1, 1, "", "create"], [267, 1, 1, "", "element_count_complies"], [268, 1, 1, "", "from_json"], [269, 1, 1, "", "from_jsonstring"], [270, 1, 1, "", "get_face_most_ortho_to_beam"], [271, 1, 1, "", "get_face_most_towards_beam"], [272, 1, 1, "", "restore_beams_from_keys"], [273, 1, 1, "", "sha256"], [274, 1, 1, "", "to_json"], [275, 1, 1, "", "to_jsonstring"], [276, 1, 1, "", "validate_data"]], "compas_timber.connections.XNotchJoint": [[278, 1, 1, "", "ToString"], [279, 1, 1, "", "add_extensions"], [280, 1, 1, "", "add_features"], [281, 1, 1, "", "check_elements_compatibility"], [282, 1, 1, "", "copy"], [283, 1, 1, "", "create"], [284, 1, 1, "", "element_count_complies"], [285, 1, 1, "", "from_json"], [286, 1, 1, "", "from_jsonstring"], [287, 1, 1, "", "get_face_most_ortho_to_beam"], [288, 1, 1, "", "get_face_most_towards_beam"], [289, 1, 1, "", "restore_beams_from_keys"], [290, 1, 1, "", "sha256"], [291, 1, 1, "", "to_json"], [292, 1, 1, "", "to_jsonstring"], [293, 1, 1, "", "validate_data"]], "compas_timber.connections.YButtJoint": [[295, 1, 1, "", "ToString"], [296, 1, 1, "", "add_extensions"], [297, 1, 1, "", "add_features"], [298, 1, 1, "", "check_elements_compatibility"], [299, 1, 1, "", "copy"], [300, 1, 1, "", "create"], [301, 1, 1, "", "cross_beam_ref_side_index"], [302, 1, 1, "", "element_count_complies"], [303, 1, 1, "", "from_json"], [304, 1, 1, "", "from_jsonstring"], [305, 1, 1, "", "get_face_most_ortho_to_beam"], [306, 1, 1, "", "get_face_most_towards_beam"], [307, 1, 1, "", "get_miter_planes"], [308, 1, 1, "", "main_beam_ref_side_index"], [309, 1, 1, "", "restore_beams_from_keys"], [310, 1, 1, "", "sha256"], [311, 1, 1, "", "to_json"], [312, 1, 1, "", "to_jsonstring"], [313, 1, 1, "", "validate_data"]], "compas_timber.design": [[315, 0, 1, "", "CategoryRule"], [323, 0, 1, "", "DebugInfomation"], [328, 0, 1, "", "DirectRule"], [336, 0, 1, "", "FeatureDefinition"], [338, 0, 1, "", "JointDefinition"], [342, 0, 1, "", "JointRule"], [348, 0, 1, "", "SurfaceModel"], [366, 0, 1, "", "TopologyRule"], [373, 2, 1, "", "guess_joint_topology_2beams"], [374, 2, 1, "", "set_default_joints"]], "compas_timber.design.CategoryRule": [[316, 1, 1, "", "ToString"], [317, 1, 1, "", "comply"], [318, 1, 1, "", "get_category_rules"], [319, 1, 1, "", "get_direct_rules"], [320, 1, 1, "", "get_topology_rules"], [321, 1, 1, "", "joints_from_beams_and_rules"], [322, 1, 1, "", "reorder"]], "compas_timber.design.DebugInfomation": [[324, 1, 1, "", "ToString"], [325, 1, 1, "", "add_fastener_error"], [326, 1, 1, "", "add_feature_error"], [327, 1, 1, "", "add_joint_error"]], "compas_timber.design.DirectRule": [[329, 1, 1, "", "ToString"], [330, 1, 1, "", "comply"], [331, 1, 1, "", "contains"], [332, 1, 1, "", "get_category_rules"], [333, 1, 1, "", "get_direct_rules"], [334, 1, 1, "", "get_topology_rules"], [335, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.FeatureDefinition": [[337, 1, 1, "", "ToString"]], "compas_timber.design.JointDefinition": [[339, 1, 1, "", "ToString"], [340, 1, 1, "", "is_identical"], [341, 1, 1, "", "match"]], "compas_timber.design.JointRule": [[343, 1, 1, "", "comply"], [344, 1, 1, "", "get_category_rules"], [345, 1, 1, "", "get_direct_rules"], [346, 1, 1, "", "get_topology_rules"], [347, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.SurfaceModel": [[349, 1, 1, "", "beam_category_names"], [350, 1, 1, "", "create_model"], [351, 1, 1, "", "cull_overlaps"], [352, 1, 1, "", "distance_between_elements"], [353, 1, 1, "", "generate_frame"], [354, 1, 1, "", "generate_perimeter_beams"], [355, 1, 1, "", "generate_plates"], [356, 1, 1, "", "generate_stud_lines"], [357, 1, 1, "", "generate_studs"], [358, 1, 1, "", "generate_windows"], [359, 1, 1, "", "get_beam_intersections"], [360, 1, 1, "", "get_interior_segment_indices"], [361, 1, 1, "", "offset_elements"], [362, 1, 1, "", "parse_loops"], [363, 1, 1, "", "trim_jack_studs"], [364, 1, 1, "", "trim_king_studs"], [365, 1, 1, "", "trim_studs"]], "compas_timber.design.TopologyRule": [[367, 1, 1, "", "ToString"], [368, 1, 1, "", "comply"], [369, 1, 1, "", "get_category_rules"], [370, 1, 1, "", "get_direct_rules"], [371, 1, 1, "", "get_topology_rules"], [372, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.elements": [[375, 0, 1, "", "Beam"], [406, 0, 1, "", "Fastener"], [427, 0, 1, "", "FastenerTimberInterface"], [437, 0, 1, "", "Plate"], [461, 0, 1, "", "TimberElement"], [482, 0, 1, "", "Wall"]], "compas_timber.elements.Beam": [[376, 1, 1, "", "ToString"], [377, 1, 1, "", "add_blank_extension"], [378, 1, 1, "", "add_feature"], [379, 1, 1, "", "add_features"], [380, 1, 1, "", "back_side"], [381, 1, 1, "", "compute_aabb"], [382, 1, 1, "", "compute_collision_mesh"], [383, 1, 1, "", "compute_geometry"], [384, 1, 1, "", "compute_obb"], [385, 1, 1, "", "compute_worldtransformation"], [386, 1, 1, "", "copy"], [387, 1, 1, "", "endpoint_closest_to_point"], [388, 1, 1, "", "extension_to_plane"], [389, 1, 1, "", "from_centerline"], [390, 1, 1, "", "from_endpoints"], [391, 1, 1, "", "from_json"], [392, 1, 1, "", "from_jsonstring"], [393, 1, 1, "", "front_side"], [394, 1, 1, "", "get_dimensions_relative_to_side"], [395, 1, 1, "", "opp_side"], [396, 1, 1, "", "remove_blank_extension"], [397, 1, 1, "", "remove_features"], [398, 1, 1, "", "reset"], [399, 1, 1, "", "sha256"], [400, 1, 1, "", "side_as_surface"], [401, 1, 1, "", "to_json"], [402, 1, 1, "", "to_jsonstring"], [403, 1, 1, "", "transform"], [404, 1, 1, "", "transformed"], [405, 1, 1, "", "validate_data"]], "compas_timber.elements.Fastener": [[407, 1, 1, "", "ToString"], [408, 1, 1, "", "add_feature"], [409, 1, 1, "", "add_features"], [410, 1, 1, "", "compute_aabb"], [411, 1, 1, "", "compute_collision_mesh"], [412, 1, 1, "", "compute_geometry"], [413, 1, 1, "", "compute_obb"], [414, 1, 1, "", "compute_worldtransformation"], [415, 1, 1, "", "copy"], [416, 1, 1, "", "from_json"], [417, 1, 1, "", "from_jsonstring"], [418, 1, 1, "", "remove_blank_extension"], [419, 1, 1, "", "remove_features"], [420, 1, 1, "", "reset"], [421, 1, 1, "", "sha256"], [422, 1, 1, "", "to_json"], [423, 1, 1, "", "to_jsonstring"], [424, 1, 1, "", "transform"], [425, 1, 1, "", "transformed"], [426, 1, 1, "", "validate_data"]], "compas_timber.elements.FastenerTimberInterface": [[428, 1, 1, "", "ToString"], [429, 1, 1, "", "copy"], [430, 1, 1, "", "from_json"], [431, 1, 1, "", "from_jsonstring"], [432, 1, 1, "", "get_features"], [433, 1, 1, "", "sha256"], [434, 1, 1, "", "to_json"], [435, 1, 1, "", "to_jsonstring"], [436, 1, 1, "", "validate_data"]], "compas_timber.elements.Plate": [[438, 1, 1, "", "ToString"], [439, 1, 1, "", "add_feature"], [440, 1, 1, "", "add_features"], [441, 1, 1, "", "compute_aabb"], [442, 1, 1, "", "compute_collision_mesh"], [443, 1, 1, "", "compute_geometry"], [444, 1, 1, "", "compute_obb"], [445, 1, 1, "", "compute_worldtransformation"], [446, 1, 1, "", "copy"], [447, 1, 1, "", "from_json"], [448, 1, 1, "", "from_jsonstring"], [449, 1, 1, "", "from_outline_thickness"], [450, 1, 1, "", "remove_blank_extension"], [451, 1, 1, "", "remove_features"], [452, 1, 1, "", "reset"], [453, 1, 1, "", "sha256"], [454, 1, 1, "", "shape"], [455, 1, 1, "", "side_as_surface"], [456, 1, 1, "", "to_json"], [457, 1, 1, "", "to_jsonstring"], [458, 1, 1, "", "transform"], [459, 1, 1, "", "transformed"], [460, 1, 1, "", "validate_data"]], "compas_timber.elements.TimberElement": [[462, 1, 1, "", "ToString"], [463, 1, 1, "", "add_feature"], [464, 1, 1, "", "add_features"], [465, 1, 1, "", "compute_aabb"], [466, 1, 1, "", "compute_collision_mesh"], [467, 1, 1, "", "compute_geometry"], [468, 1, 1, "", "compute_obb"], [469, 1, 1, "", "compute_worldtransformation"], [470, 1, 1, "", "copy"], [471, 1, 1, "", "from_json"], [472, 1, 1, "", "from_jsonstring"], [473, 1, 1, "", "remove_blank_extension"], [474, 1, 1, "", "remove_features"], [475, 1, 1, "", "reset"], [476, 1, 1, "", "sha256"], [477, 1, 1, "", "to_json"], [478, 1, 1, "", "to_jsonstring"], [479, 1, 1, "", "transform"], [480, 1, 1, "", "transformed"], [481, 1, 1, "", "validate_data"]], "compas_timber.elements.Wall": [[483, 1, 1, "", "ToString"], [484, 1, 1, "", "add_feature"], [485, 1, 1, "", "add_features"], [486, 1, 1, "", "compute_aabb"], [487, 1, 1, "", "compute_collision_mesh"], [488, 1, 1, "", "compute_geometry"], [489, 1, 1, "", "compute_obb"], [490, 1, 1, "", "compute_worldtransformation"], [491, 1, 1, "", "copy"], [492, 1, 1, "", "from_boundary"], [493, 1, 1, "", "from_brep"], [494, 1, 1, "", "from_json"], [495, 1, 1, "", "from_jsonstring"], [496, 1, 1, "", "remove_blank_extension"], [497, 1, 1, "", "remove_features"], [498, 1, 1, "", "reset"], [499, 1, 1, "", "rotate"], [500, 1, 1, "", "sha256"], [501, 1, 1, "", "to_json"], [502, 1, 1, "", "to_jsonstring"], [503, 1, 1, "", "transform"], [504, 1, 1, "", "transformed"], [505, 1, 1, "", "validate_data"]], "compas_timber.errors": [[506, 3, 1, "", "BeamJoiningError"], [507, 3, 1, "", "FastenerApplicationError"], [508, 3, 1, "", "FeatureApplicationError"]], "compas_timber.fabrication": [[509, 0, 1, "", "BTLxPart"], [512, 0, 1, "", "BTLxProcessing"], [523, 0, 1, "", "BTLxWriter"], [527, 0, 1, "", "DoubleCut"], [543, 0, 1, "", "DovetailMortise"], [561, 0, 1, "", "DovetailTenon"], [579, 0, 1, "", "Drilling"], [595, 0, 1, "", "EdgePositionType"], [596, 0, 1, "", "FrenchRidgeLap"], [612, 0, 1, "", "JackRafterCut"], [628, 0, 1, "", "Lap"], [645, 0, 1, "", "LimitationTopType"], [646, 0, 1, "", "LongitudinalCut"], [662, 0, 1, "", "MachiningLimits"], [663, 0, 1, "", "Mortise"], [679, 0, 1, "", "OrientationType"], [680, 0, 1, "", "Pocket"], [696, 0, 1, "", "Slot"], [710, 0, 1, "", "StepJoint"], [727, 0, 1, "", "StepJointNotch"], [744, 0, 1, "", "StepShapeType"], [745, 0, 1, "", "Tenon"], [761, 0, 1, "", "TenonShapeType"]], "compas_timber.fabrication.BTLxPart": [[510, 1, 1, "", "et_point_vals"], [511, 1, 1, "", "ref_side_from_face"]], "compas_timber.fabrication.BTLxProcessing": [[513, 1, 1, "", "ToString"], [514, 1, 1, "", "add_subprocessing"], [515, 1, 1, "", "copy"], [516, 1, 1, "", "from_json"], [517, 1, 1, "", "from_jsonstring"], [518, 1, 1, "", "scaled"], [519, 1, 1, "", "sha256"], [520, 1, 1, "", "to_json"], [521, 1, 1, "", "to_jsonstring"], [522, 1, 1, "", "validate_data"]], "compas_timber.fabrication.BTLxWriter": [[524, 1, 1, "", "model_to_xml"], [525, 1, 1, "", "register_type_serializer"], [526, 1, 1, "", "write"]], "compas_timber.fabrication.DoubleCut": [[528, 1, 1, "", "ToString"], [529, 1, 1, "", "add_subprocessing"], [530, 1, 1, "", "apply"], [531, 1, 1, "", "copy"], [532, 1, 1, "", "from_json"], [533, 1, 1, "", "from_jsonstring"], [534, 1, 1, "", "from_planes_and_beam"], [535, 1, 1, "", "from_shapes_and_element"], [536, 1, 1, "", "planes_from_params_and_beam"], [537, 1, 1, "", "scale"], [538, 1, 1, "", "scaled"], [539, 1, 1, "", "sha256"], [540, 1, 1, "", "to_json"], [541, 1, 1, "", "to_jsonstring"], [542, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailMortise": [[544, 1, 1, "", "ToString"], [545, 1, 1, "", "add_subprocessing"], [546, 1, 1, "", "apply"], [547, 1, 1, "", "copy"], [548, 1, 1, "", "define_dovetail_tool"], [549, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [550, 1, 1, "", "dovetail_volume_from_params_and_beam"], [551, 1, 1, "", "frame_from_params_and_beam"], [552, 1, 1, "", "from_frame_and_beam"], [553, 1, 1, "", "from_json"], [554, 1, 1, "", "from_jsonstring"], [555, 1, 1, "", "scale"], [556, 1, 1, "", "scaled"], [557, 1, 1, "", "sha256"], [558, 1, 1, "", "to_json"], [559, 1, 1, "", "to_jsonstring"], [560, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailTenon": [[562, 1, 1, "", "ToString"], [563, 1, 1, "", "add_subprocessing"], [564, 1, 1, "", "apply"], [565, 1, 1, "", "copy"], [566, 1, 1, "", "define_dovetail_tool"], [567, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [568, 1, 1, "", "dovetail_volume_from_params_and_beam"], [569, 1, 1, "", "frame_from_params_and_beam"], [570, 1, 1, "", "from_json"], [571, 1, 1, "", "from_jsonstring"], [572, 1, 1, "", "from_plane_and_beam"], [573, 1, 1, "", "scale"], [574, 1, 1, "", "scaled"], [575, 1, 1, "", "sha256"], [576, 1, 1, "", "to_json"], [577, 1, 1, "", "to_jsonstring"], [578, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Drilling": [[580, 1, 1, "", "ToString"], [581, 1, 1, "", "add_subprocessing"], [582, 1, 1, "", "apply"], [583, 1, 1, "", "copy"], [584, 1, 1, "", "cylinder_from_params_and_element"], [585, 1, 1, "", "from_json"], [586, 1, 1, "", "from_jsonstring"], [587, 1, 1, "", "from_line_and_element"], [588, 1, 1, "", "from_shapes_and_element"], [589, 1, 1, "", "scale"], [590, 1, 1, "", "scaled"], [591, 1, 1, "", "sha256"], [592, 1, 1, "", "to_json"], [593, 1, 1, "", "to_jsonstring"], [594, 1, 1, "", "validate_data"]], "compas_timber.fabrication.FrenchRidgeLap": [[597, 1, 1, "", "ToString"], [598, 1, 1, "", "add_subprocessing"], [599, 1, 1, "", "apply"], [600, 1, 1, "", "copy"], [601, 1, 1, "", "frame_from_params_and_beam"], [602, 1, 1, "", "from_beam_beam_and_plane"], [603, 1, 1, "", "from_json"], [604, 1, 1, "", "from_jsonstring"], [605, 1, 1, "", "lap_volume_from_params_and_beam"], [606, 1, 1, "", "scale"], [607, 1, 1, "", "scaled"], [608, 1, 1, "", "sha256"], [609, 1, 1, "", "to_json"], [610, 1, 1, "", "to_jsonstring"], [611, 1, 1, "", "validate_data"]], "compas_timber.fabrication.JackRafterCut": [[613, 1, 1, "", "ToString"], [614, 1, 1, "", "add_subprocessing"], [615, 1, 1, "", "apply"], [616, 1, 1, "", "copy"], [617, 1, 1, "", "from_json"], [618, 1, 1, "", "from_jsonstring"], [619, 1, 1, "", "from_plane_and_beam"], [620, 1, 1, "", "from_shapes_and_element"], [621, 1, 1, "", "plane_from_params_and_beam"], [622, 1, 1, "", "scale"], [623, 1, 1, "", "scaled"], [624, 1, 1, "", "sha256"], [625, 1, 1, "", "to_json"], [626, 1, 1, "", "to_jsonstring"], [627, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Lap": [[629, 1, 1, "", "ToString"], [630, 1, 1, "", "add_subprocessing"], [631, 1, 1, "", "apply"], [632, 1, 1, "", "copy"], [633, 1, 1, "", "from_json"], [634, 1, 1, "", "from_jsonstring"], [635, 1, 1, "", "from_plane_and_beam"], [636, 1, 1, "", "from_shapes_and_element"], [637, 1, 1, "", "from_volume_and_beam"], [638, 1, 1, "", "scale"], [639, 1, 1, "", "scaled"], [640, 1, 1, "", "sha256"], [641, 1, 1, "", "to_json"], [642, 1, 1, "", "to_jsonstring"], [643, 1, 1, "", "validate_data"], [644, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.LongitudinalCut": [[647, 1, 1, "", "ToString"], [648, 1, 1, "", "add_subprocessing"], [649, 1, 1, "", "apply"], [650, 1, 1, "", "copy"], [651, 1, 1, "", "from_json"], [652, 1, 1, "", "from_jsonstring"], [653, 1, 1, "", "from_plane_and_beam"], [654, 1, 1, "", "from_shapes_and_element"], [655, 1, 1, "", "plane_from_params_and_beam"], [656, 1, 1, "", "scaled"], [657, 1, 1, "", "sha256"], [658, 1, 1, "", "to_json"], [659, 1, 1, "", "to_jsonstring"], [660, 1, 1, "", "validate_data"], [661, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Mortise": [[664, 1, 1, "", "ToString"], [665, 1, 1, "", "add_subprocessing"], [666, 1, 1, "", "apply"], [667, 1, 1, "", "copy"], [668, 1, 1, "", "frame_from_params_and_beam"], [669, 1, 1, "", "from_frame_and_beam"], [670, 1, 1, "", "from_json"], [671, 1, 1, "", "from_jsonstring"], [672, 1, 1, "", "scale"], [673, 1, 1, "", "scaled"], [674, 1, 1, "", "sha256"], [675, 1, 1, "", "to_json"], [676, 1, 1, "", "to_jsonstring"], [677, 1, 1, "", "validate_data"], [678, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Pocket": [[681, 1, 1, "", "ToString"], [682, 1, 1, "", "add_subprocessing"], [683, 1, 1, "", "apply"], [684, 1, 1, "", "copy"], [685, 1, 1, "", "from_json"], [686, 1, 1, "", "from_jsonstring"], [687, 1, 1, "", "from_shapes_and_element"], [688, 1, 1, "", "from_volume_and_element"], [689, 1, 1, "", "scale"], [690, 1, 1, "", "scaled"], [691, 1, 1, "", "sha256"], [692, 1, 1, "", "to_json"], [693, 1, 1, "", "to_jsonstring"], [694, 1, 1, "", "validate_data"], [695, 1, 1, "", "volume_from_params_and_element"]], "compas_timber.fabrication.Slot": [[697, 1, 1, "", "ToString"], [698, 1, 1, "", "add_subprocessing"], [699, 1, 1, "", "apply"], [700, 1, 1, "", "copy"], [701, 1, 1, "", "from_json"], [702, 1, 1, "", "from_jsonstring"], [703, 1, 1, "", "from_plane_and_beam"], [704, 1, 1, "", "scale"], [705, 1, 1, "", "scaled"], [706, 1, 1, "", "sha256"], [707, 1, 1, "", "to_json"], [708, 1, 1, "", "to_jsonstring"], [709, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJoint": [[711, 1, 1, "", "ToString"], [712, 1, 1, "", "add_subprocessing"], [713, 1, 1, "", "add_tenon"], [714, 1, 1, "", "apply"], [715, 1, 1, "", "copy"], [716, 1, 1, "", "from_json"], [717, 1, 1, "", "from_jsonstring"], [718, 1, 1, "", "from_plane_and_beam"], [719, 1, 1, "", "planes_from_params_and_beam"], [720, 1, 1, "", "scale"], [721, 1, 1, "", "scaled"], [722, 1, 1, "", "sha256"], [723, 1, 1, "", "tenon_volume_from_params_and_beam"], [724, 1, 1, "", "to_json"], [725, 1, 1, "", "to_jsonstring"], [726, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJointNotch": [[728, 1, 1, "", "ToString"], [729, 1, 1, "", "add_mortise"], [730, 1, 1, "", "add_subprocessing"], [731, 1, 1, "", "apply"], [732, 1, 1, "", "copy"], [733, 1, 1, "", "from_json"], [734, 1, 1, "", "from_jsonstring"], [735, 1, 1, "", "from_plane_and_beam"], [736, 1, 1, "", "mortise_volume_from_params_and_beam"], [737, 1, 1, "", "planes_from_params_and_beam"], [738, 1, 1, "", "scale"], [739, 1, 1, "", "scaled"], [740, 1, 1, "", "sha256"], [741, 1, 1, "", "to_json"], [742, 1, 1, "", "to_jsonstring"], [743, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Tenon": [[746, 1, 1, "", "ToString"], [747, 1, 1, "", "add_subprocessing"], [748, 1, 1, "", "apply"], [749, 1, 1, "", "copy"], [750, 1, 1, "", "frame_from_params_and_beam"], [751, 1, 1, "", "from_json"], [752, 1, 1, "", "from_jsonstring"], [753, 1, 1, "", "from_plane_and_beam"], [754, 1, 1, "", "scale"], [755, 1, 1, "", "scaled"], [756, 1, 1, "", "sha256"], [757, 1, 1, "", "to_json"], [758, 1, 1, "", "to_jsonstring"], [759, 1, 1, "", "validate_data"], [760, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.ghpython": [[762, 2, 1, "", "add_gh_param"], [763, 2, 1, "", "clear_gh_params"], [764, 2, 1, "", "get_leaf_subclasses"], [765, 2, 1, "", "item_input_valid"], [766, 2, 1, "", "list_input_valid"], [767, 2, 1, "", "manage_dynamic_params"], [768, 2, 1, "", "rename_gh_input"]], "compas_timber.model": [[769, 0, 1, "", "TimberModel"]], "compas_timber.model.TimberModel": [[770, 1, 1, "", "ToString"], [771, 1, 1, "", "add_element"], [772, 1, 1, "", "add_elements"], [773, 1, 1, "", "add_group"], [774, 1, 1, "", "add_group_element"], [775, 1, 1, "", "add_interaction"], [776, 1, 1, "", "add_joint"], [777, 1, 1, "", "add_material"], [778, 1, 1, "", "assign_material"], [779, 1, 1, "", "compute_aabb"], [780, 1, 1, "", "compute_obb"], [781, 1, 1, "", "connect_adjacent_walls"], [782, 1, 1, "", "copy"], [783, 1, 1, "", "element_by_guid"], [784, 1, 1, "", "elements"], [785, 1, 1, "", "elements_connected_by"], [786, 1, 1, "", "from_json"], [787, 1, 1, "", "from_jsonstring"], [788, 1, 1, "", "get_elements_in_group"], [789, 1, 1, "", "get_interactions_for_element"], [790, 1, 1, "", "has_element"], [791, 1, 1, "", "has_group"], [792, 1, 1, "", "has_interaction"], [793, 1, 1, "", "has_material"], [794, 1, 1, "", "interactions"], [795, 1, 1, "", "materials"], [796, 1, 1, "", "process_joinery"], [797, 1, 1, "", "remove_element"], [798, 1, 1, "", "remove_interaction"], [799, 1, 1, "", "remove_joint"], [800, 1, 1, "", "rotate"], [801, 1, 1, "", "rotated"], [802, 1, 1, "", "scale"], [803, 1, 1, "", "scaled"], [804, 1, 1, "", "set_topologies"], [805, 1, 1, "", "sha256"], [806, 1, 1, "", "to_json"], [807, 1, 1, "", "to_jsonstring"], [808, 1, 1, "", "transform"], [809, 1, 1, "", "transform_numpy"], [810, 1, 1, "", "transformed"], [811, 1, 1, "", "transformed_numpy"], [812, 1, 1, "", "translate"], [813, 1, 1, "", "translated"], [814, 1, 1, "", "validate_data"]], "compas_timber.planning": [[815, 0, 1, "", "Actor"], [817, 0, 1, "", "BuildingPlan"], [827, 0, 1, "", "BuildingPlanParser"], [830, 0, 1, "", "Instruction"], [840, 0, 1, "", "LinearDimension"], [850, 0, 1, "", "Model3d"], [860, 0, 1, "", "SimpleSequenceGenerator"], [861, 0, 1, "", "Step"], [871, 0, 1, "", "Text3d"]], "compas_timber.planning.Actor": [[816, 1, 1, "", "get_name"]], "compas_timber.planning.BuildingPlan": [[818, 1, 1, "", "ToString"], [819, 1, 1, "", "add_step"], [820, 1, 1, "", "copy"], [821, 1, 1, "", "from_json"], [822, 1, 1, "", "from_jsonstring"], [823, 1, 1, "", "sha256"], [824, 1, 1, "", "to_json"], [825, 1, 1, "", "to_jsonstring"], [826, 1, 1, "", "validate_data"]], "compas_timber.planning.BuildingPlanParser": [[828, 1, 1, "", "parse"], [829, 1, 1, "", "serialize"]], "compas_timber.planning.Instruction": [[831, 1, 1, "", "ToString"], [832, 1, 1, "", "copy"], [833, 1, 1, "", "from_json"], [834, 1, 1, "", "from_jsonstring"], [835, 1, 1, "", "sha256"], [836, 1, 1, "", "to_json"], [837, 1, 1, "", "to_jsonstring"], [838, 1, 1, "", "transform"], [839, 1, 1, "", "validate_data"]], "compas_timber.planning.LinearDimension": [[841, 1, 1, "", "ToString"], [842, 1, 1, "", "copy"], [843, 1, 1, "", "from_json"], [844, 1, 1, "", "from_jsonstring"], [845, 1, 1, "", "sha256"], [846, 1, 1, "", "to_json"], [847, 1, 1, "", "to_jsonstring"], [848, 1, 1, "", "transform"], [849, 1, 1, "", "validate_data"]], "compas_timber.planning.Model3d": [[851, 1, 1, "", "ToString"], [852, 1, 1, "", "copy"], [853, 1, 1, "", "from_json"], [854, 1, 1, "", "from_jsonstring"], [855, 1, 1, "", "sha256"], [856, 1, 1, "", "to_json"], [857, 1, 1, "", "to_jsonstring"], [858, 1, 1, "", "transform"], [859, 1, 1, "", "validate_data"]], "compas_timber.planning.Step": [[862, 1, 1, "", "ToString"], [863, 1, 1, "", "copy"], [864, 1, 1, "", "from_json"], [865, 1, 1, "", "from_jsonstring"], [866, 1, 1, "", "sha256"], [867, 1, 1, "", "to_json"], [868, 1, 1, "", "to_jsonstring"], [869, 1, 1, "", "transform"], [870, 1, 1, "", "validate_data"]], "compas_timber.planning.Text3d": [[872, 1, 1, "", "ToString"], [873, 1, 1, "", "copy"], [874, 1, 1, "", "from_json"], [875, 1, 1, "", "from_jsonstring"], [876, 1, 1, "", "sha256"], [877, 1, 1, "", "to_json"], [878, 1, 1, "", "to_jsonstring"], [879, 1, 1, "", "transform"], [880, 1, 1, "", "validate_data"]], "compas_timber.rhino": [[881, 2, 1, "", "find_neighboring_elements"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"]}, "titleterms": {"api": 0, "refer": 0, "packag": 0, "compas_timb": [1, 2, 3, 4, 5, 6, 7, 8, 9], "connect": 1, "class": [1, 2, 3, 4, 5, 7, 8], "function": [1, 2, 6], "except": 1, "design": [2, 892], "element": [3, 784], "error": [4, 899], "fabric": [5, 894], "ghpython": 6, "model": [7, 892, 897, 898, 899], "plan": 8, "rhino": [9, 896], "plugin": [9, 888], "ballnodejoint": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "tostr": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 295, 316, 324, 329, 337, 339, 367, 376, 407, 428, 438, 462, 483, 513, 528, 544, 562, 580, 597, 613, 629, 647, 664, 681, 697, 711, 728, 746, 770, 818, 831, 841, 851, 862, 872], "add_extens": [12, 33, 52, 70, 87, 104, 123, 140, 157, 174, 191, 209, 226, 244, 262, 279, 296], "add_featur": [13, 34, 53, 71, 88, 105, 124, 141, 158, 175, 192, 210, 227, 245, 263, 280, 297, 378, 379, 408, 409, 439, 440, 463, 464, 484, 485], "check_elements_compat": [14, 35, 54, 72, 89, 106, 125, 142, 159, 176, 193, 211, 228, 246, 264, 281, 298], "copi": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 299, 386, 415, 429, 446, 470, 491, 515, 531, 547, 565, 583, 600, 616, 632, 650, 667, 684, 700, 715, 732, 749, 782, 820, 832, 842, 852, 863, 873], "creat": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 884], "element_count_compli": [17, 38, 57, 75, 92, 109, 128, 145, 162, 179, 197, 214, 231, 249, 267, 284, 302], "from_json": [18, 39, 58, 76, 93, 110, 129, 146, 163, 180, 198, 215, 232, 250, 268, 285, 303, 391, 416, 430, 447, 471, 494, 516, 532, 553, 570, 585, 603, 617, 633, 651, 670, 685, 701, 716, 733, 751, 786, 821, 833, 843, 853, 864, 874], "from_jsonstr": [19, 40, 59, 77, 94, 111, 130, 147, 164, 181, 199, 216, 233, 251, 269, 286, 304, 392, 417, 431, 448, 472, 495, 517, 533, 554, 571, 586, 604, 618, 634, 652, 671, 686, 702, 717, 734, 752, 787, 822, 834, 844, 854, 865, 875], "get_face_most_ortho_to_beam": [20, 41, 60, 78, 95, 114, 131, 148, 165, 182, 200, 217, 234, 252, 270, 287, 305], "get_face_most_towards_beam": [21, 42, 61, 79, 96, 115, 132, 149, 166, 183, 201, 218, 235, 253, 271, 288, 306], "restore_beams_from_kei": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 289, 309], "sha256": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 290, 310, 399, 421, 433, 453, 476, 500, 519, 539, 557, 575, 591, 608, 624, 640, 657, 674, 691, 706, 722, 740, 756, 805, 823, 835, 845, 855, 866, 876], "to_json": [24, 45, 64, 82, 99, 118, 135, 152, 169, 186, 204, 221, 239, 257, 274, 291, 311, 401, 422, 434, 456, 477, 501, 520, 540, 558, 576, 592, 609, 625, 641, 658, 675, 692, 707, 724, 741, 757, 806, 824, 836, 846, 856, 867, 877], "to_jsonstr": [25, 46, 65, 83, 100, 119, 136, 153, 170, 187, 205, 222, 240, 258, 275, 292, 312, 402, 423, 435, 457, 478, 502, 521, 541, 559, 577, 593, 610, 626, 642, 659, 676, 693, 708, 725, 742, 758, 807, 825, 837, 847, 857, 868, 878], "validate_data": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 293, 313, 405, 426, 436, 460, 481, 505, 522, 542, 560, 578, 594, 611, 627, 643, 660, 677, 694, 709, 726, 743, 759, 814, 826, 839, 849, 859, 870, 880], "connectionsolv": [27, 28, 29, 30], "find_intersecting_pair": 28, "find_topologi": 29, "find_wall_wall_topologi": 30, "joint": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 884, 897, 899], "jointtopologi": [48, 49], "get_nam": [49, 816], "lbuttjoint": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "update_beam_rol": 66, "lfrenchridgelapjoint": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "llapjoint": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "lmiterjoint": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "get_cutoff_plan": 112, "get_cutting_plan": 113, "lapjoint": [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "nulljoint": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "tbirdsmouthjoint": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "tbuttjoint": [172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "tdovetailjoint": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "define_dovetail_tool": [196, 548, 566], "tlapjoint": [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223], "tstepjoint": [224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], "set_step_depth": 237, "tenonmortisejoint": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "set_default_valu": 255, "xlapjoint": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "xnotchjoint": [277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293], "ybuttjoint": [294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313], "cross_beam_ref_side_index": 301, "get_miter_plan": 307, "main_beam_ref_side_index": 308, "find_neighboring_el": [314, 881], "categoryrul": [315, 316, 317, 318, 319, 320, 321, 322], "compli": [317, 330, 343, 368], "get_category_rul": [318, 332, 344, 369], "get_direct_rul": [319, 333, 345, 370], "get_topology_rul": [320, 334, 346, 371], "joints_from_beams_and_rul": [321, 335, 347, 372], "reorder": 322, "debuginfom": [323, 324, 325, 326, 327], "add_fastener_error": 325, "add_feature_error": 326, "add_joint_error": 327, "directrul": [328, 329, 330, 331, 332, 333, 334, 335], "contain": 331, "featuredefinit": [336, 337], "jointdefinit": [338, 339, 340, 341], "is_ident": 340, "match": 341, "jointrul": [342, 343, 344, 345, 346, 347], "surfacemodel": [348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365], "beam_category_nam": 349, "create_model": 350, "cull_overlap": 351, "distance_between_el": 352, "generate_fram": 353, "generate_perimeter_beam": 354, "generate_pl": 355, "generate_stud_lin": 356, "generate_stud": 357, "generate_window": 358, "get_beam_intersect": 359, "get_interior_segment_indic": 360, "offset_el": 361, "parse_loop": 362, "trim_jack_stud": 363, "trim_king_stud": 364, "trim_stud": 365, "topologyrul": [366, 367, 368, 369, 370, 371, 372], "guess_joint_topology_2beam": 373, "set_default_joint": 374, "beam": [375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 891, 892, 899], "add_blank_extens": 377, "back_sid": 380, "compute_aabb": [381, 410, 441, 465, 486, 779], "compute_collision_mesh": [382, 411, 442, 466, 487], "compute_geometri": [383, 412, 443, 467, 488], "compute_obb": [384, 413, 444, 468, 489, 780], "compute_worldtransform": [385, 414, 445, 469, 490], "endpoint_closest_to_point": 387, "extension_to_plan": 388, "from_centerlin": 389, "from_endpoint": 390, "front_sid": 393, "get_dimensions_relative_to_sid": 394, "opp_sid": 395, "remove_blank_extens": [396, 418, 450, 473, 496], "remove_featur": [397, 419, 451, 474, 497], "reset": [398, 420, 452, 475, 498], "side_as_surfac": [400, 455], "transform": [403, 404, 424, 425, 458, 459, 479, 480, 503, 504, 808, 810, 838, 848, 858, 869, 879], "fasten": [406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426], "fastenertimberinterfac": [427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "get_featur": 432, "plate": [437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460], "from_outline_thick": 449, "shape": 454, "timberel": [461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "wall": [482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505], "from_boundari": 492, "from_brep": 493, "rotat": [499, 800, 801], "beamjoiningerror": 506, "fastenerapplicationerror": 507, "featureapplicationerror": 508, "btlxpart": [509, 510, 511], "et_point_v": 510, "ref_side_from_fac": 511, "btlxprocess": [512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "add_subprocess": [514, 529, 545, 563, 581, 598, 614, 630, 648, 665, 682, 698, 712, 730, 747], "scale": [518, 537, 538, 555, 556, 573, 574, 589, 590, 606, 607, 622, 623, 638, 639, 656, 672, 673, 689, 690, 704, 705, 720, 721, 738, 739, 754, 755, 802, 803], "btlxwriter": [523, 524, 525, 526], "model_to_xml": 524, "register_type_seri": 525, "write": [526, 894], "doublecut": [527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542], "appli": [530, 546, 564, 582, 599, 615, 631, 649, 666, 683, 699, 714, 731, 748], "from_planes_and_beam": 534, "from_shapes_and_el": [535, 588, 620, 636, 654, 687], "planes_from_params_and_beam": [536, 719, 737], "dovetailmortis": [543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560], "dovetail_cutting_frames_from_params_and_beam": [549, 567], "dovetail_volume_from_params_and_beam": [550, 568], "frame_from_params_and_beam": [551, 569, 601, 668, 750], "from_frame_and_beam": [552, 669], "dovetailtenon": [561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578], "from_plane_and_beam": [572, 619, 635, 653, 703, 718, 735, 753], "drill": [579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 895], "cylinder_from_params_and_el": 584, "from_line_and_el": 587, "edgepositiontyp": 595, "frenchridgelap": [596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611], "from_beam_beam_and_plan": 602, "lap_volume_from_params_and_beam": 605, "jackraftercut": [612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627], "plane_from_params_and_beam": [621, 655], "lap": [628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 897], "from_volume_and_beam": 637, "volume_from_params_and_beam": [644, 661, 678, 760], "limitationtoptyp": 645, "longitudinalcut": [646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661], "machininglimit": 662, "mortis": [663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 897], "orientationtyp": 679, "pocket": [680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695], "from_volume_and_el": 688, "volume_from_params_and_el": 695, "slot": [696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709], "stepjoint": [710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726], "add_tenon": 713, "tenon_volume_from_params_and_beam": 723, "stepjointnotch": [727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743], "add_mortis": 729, "mortise_volume_from_params_and_beam": 736, "stepshapetyp": 744, "tenon": [745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 897], "tenonshapetyp": 761, "add_gh_param": 762, "clear_gh_param": 763, "get_leaf_subclass": 764, "item_input_valid": 765, "list_input_valid": 766, "manage_dynamic_param": 767, "rename_gh_input": 768, "timbermodel": [769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814], "add_el": [771, 772], "add_group": 773, "add_group_el": 774, "add_interact": 775, "add_joint": 776, "add_materi": 777, "assign_materi": 778, "connect_adjacent_wal": 781, "element_by_guid": 783, "elements_connected_bi": 785, "get_elements_in_group": 788, "get_interactions_for_el": 789, "has_el": 790, "has_group": 791, "has_interact": 792, "has_materi": 793, "interact": 794, "materi": 795, "process_joineri": 796, "remove_el": 797, "remove_interact": 798, "remove_joint": 799, "set_topologi": 804, "transform_numpi": 809, "transformed_numpi": 811, "translat": [812, 813], "actor": [815, 816], "buildingplan": [817, 818, 819, 820, 821, 822, 823, 824, 825, 826], "add_step": 819, "buildingplanpars": [827, 828, 829], "pars": 828, "serial": 829, "instruct": [830, 831, 832, 833, 834, 835, 836, 837, 838, 839], "lineardimens": [840, 841, 842, 843, 844, 845, 846, 847, 848, 849], "model3d": [850, 851, 852, 853, 854, 855, 856, 857, 858, 859], "simplesequencegener": 860, "step": [861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 897], "text3d": [871, 872, 873, 874, 875, 876, 877, 878, 879, 880], "cite": 882, "exampl": [883, 893], "timber": [883, 885], "assembli": 883, "compa": 885, "document": 885, "depend": 885, "tabl": [885, 897], "content": 885, "indic": 885, "instal": [886, 896], "user": 886, "develop": 886, "licens": 887, "grasshopp": 888, "btlx": [889, 894], "contribut": 889, "guid": [889, 896], "attribut": 890, "standard": 890, "custom": [890, 892], "check": 890, "delet": 890, "decomposebeam": 891, "findbeambyrhinoguid": 891, "surfac": [892, 897, 899], "option": 892, "dimens": 892, "featur": [895, 899], "jack": 895, "rafter": 895, "cut": 895, "doubl": 895, "8": 896, "7": 896, "troubleshoot": 896, "rule": 897, "compon": 897, "default": 897, "topolog": 897, "categori": 897, "direct": 897, "overrid": 897, "type": [897, 899], "l": 897, "butt": 897, "miter": 897, "french": 897, "ridg": 897, "t": 897, "birdsmouth": 897, "dovetail": 897, "x": 897, "summari": 897, "show": 899, "face": 899, "index": 899, "join": 899, "topologi": 899, "util": 900, "bake": 900, "boxmap": 900, "workflow": 901}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Packages": [[0, "packages"]], "compas_timber.connections": [[1, "compas-timber-connections"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"]], "Functions": [[1, "functions"], [2, "functions"], [6, "functions"]], "Exceptions": [[1, "exceptions"]], "compas_timber.design": [[2, "compas-timber-design"]], "compas_timber.elements": [[3, "compas-timber-elements"]], "compas_timber.errors": [[4, "compas-timber-errors"]], "compas_timber.fabrication": [[5, "compas-timber-fabrication"]], "compas_timber.ghpython": [[6, "compas-timber-ghpython"]], "compas_timber.model": [[7, "compas-timber-model"]], "compas_timber.planning": [[8, "compas-timber-planning"]], "compas_timber.rhino": [[9, "compas-timber-rhino"]], "Plugins": [[9, "plugins"]], "BallNodeJoint": [[10, "ballnodejoint"]], "BallNodeJoint.ToString": [[11, "ballnodejoint-tostring"]], "BallNodeJoint.add_extensions": [[12, "ballnodejoint-add-extensions"]], "BallNodeJoint.add_features": [[13, "ballnodejoint-add-features"]], "BallNodeJoint.check_elements_compatibility": [[14, "ballnodejoint-check-elements-compatibility"]], "BallNodeJoint.copy": [[15, "ballnodejoint-copy"]], "BallNodeJoint.create": [[16, "ballnodejoint-create"]], "BallNodeJoint.element_count_complies": [[17, "ballnodejoint-element-count-complies"]], "BallNodeJoint.from_json": [[18, "ballnodejoint-from-json"]], "BallNodeJoint.from_jsonstring": [[19, "ballnodejoint-from-jsonstring"]], "BallNodeJoint.get_face_most_ortho_to_beam": [[20, "ballnodejoint-get-face-most-ortho-to-beam"]], "BallNodeJoint.get_face_most_towards_beam": [[21, "ballnodejoint-get-face-most-towards-beam"]], "BallNodeJoint.restore_beams_from_keys": [[22, "ballnodejoint-restore-beams-from-keys"]], "BallNodeJoint.sha256": [[23, "ballnodejoint-sha256"]], "BallNodeJoint.to_json": [[24, "ballnodejoint-to-json"]], "BallNodeJoint.to_jsonstring": [[25, "ballnodejoint-to-jsonstring"]], "BallNodeJoint.validate_data": [[26, "ballnodejoint-validate-data"]], "ConnectionSolver": [[27, "connectionsolver"]], "ConnectionSolver.find_intersecting_pairs": [[28, "connectionsolver-find-intersecting-pairs"]], "ConnectionSolver.find_topology": [[29, "connectionsolver-find-topology"]], "ConnectionSolver.find_wall_wall_topology": [[30, "connectionsolver-find-wall-wall-topology"]], "Joint": [[31, "joint"]], "Joint.ToString": [[32, "joint-tostring"]], "Joint.add_extensions": [[33, "joint-add-extensions"]], "Joint.add_features": [[34, "joint-add-features"]], "Joint.check_elements_compatibility": [[35, "joint-check-elements-compatibility"]], "Joint.copy": [[36, "joint-copy"]], "Joint.create": [[37, "joint-create"]], "Joint.element_count_complies": [[38, "joint-element-count-complies"]], "Joint.from_json": [[39, "joint-from-json"]], "Joint.from_jsonstring": [[40, "joint-from-jsonstring"]], "Joint.get_face_most_ortho_to_beam": [[41, "joint-get-face-most-ortho-to-beam"]], "Joint.get_face_most_towards_beam": [[42, "joint-get-face-most-towards-beam"]], "Joint.restore_beams_from_keys": [[43, "joint-restore-beams-from-keys"]], "Joint.sha256": [[44, "joint-sha256"]], "Joint.to_json": [[45, "joint-to-json"]], "Joint.to_jsonstring": [[46, "joint-to-jsonstring"]], "Joint.validate_data": [[47, "joint-validate-data"]], "JointTopology": [[48, "jointtopology"]], "JointTopology.get_name": [[49, "jointtopology-get-name"]], "LButtJoint": [[50, "lbuttjoint"]], "LButtJoint.ToString": [[51, "lbuttjoint-tostring"]], "LButtJoint.add_extensions": [[52, "lbuttjoint-add-extensions"]], "LButtJoint.add_features": [[53, "lbuttjoint-add-features"]], "LButtJoint.check_elements_compatibility": [[54, "lbuttjoint-check-elements-compatibility"]], "LButtJoint.copy": [[55, "lbuttjoint-copy"]], "LButtJoint.create": [[56, "lbuttjoint-create"]], "LButtJoint.element_count_complies": [[57, "lbuttjoint-element-count-complies"]], "LButtJoint.from_json": [[58, "lbuttjoint-from-json"]], "LButtJoint.from_jsonstring": [[59, "lbuttjoint-from-jsonstring"]], "LButtJoint.get_face_most_ortho_to_beam": [[60, "lbuttjoint-get-face-most-ortho-to-beam"]], "LButtJoint.get_face_most_towards_beam": [[61, "lbuttjoint-get-face-most-towards-beam"]], "LButtJoint.restore_beams_from_keys": [[62, "lbuttjoint-restore-beams-from-keys"]], "LButtJoint.sha256": [[63, "lbuttjoint-sha256"]], "LButtJoint.to_json": [[64, "lbuttjoint-to-json"]], "LButtJoint.to_jsonstring": [[65, "lbuttjoint-to-jsonstring"]], "LButtJoint.update_beam_roles": [[66, "lbuttjoint-update-beam-roles"]], "LButtJoint.validate_data": [[67, "lbuttjoint-validate-data"]], "LFrenchRidgeLapJoint": [[68, "lfrenchridgelapjoint"]], "LFrenchRidgeLapJoint.ToString": [[69, "lfrenchridgelapjoint-tostring"]], "LFrenchRidgeLapJoint.add_extensions": [[70, "lfrenchridgelapjoint-add-extensions"]], "LFrenchRidgeLapJoint.add_features": [[71, "lfrenchridgelapjoint-add-features"]], "LFrenchRidgeLapJoint.check_elements_compatibility": [[72, "lfrenchridgelapjoint-check-elements-compatibility"]], "LFrenchRidgeLapJoint.copy": [[73, "lfrenchridgelapjoint-copy"]], "LFrenchRidgeLapJoint.create": [[74, "lfrenchridgelapjoint-create"]], "LFrenchRidgeLapJoint.element_count_complies": [[75, "lfrenchridgelapjoint-element-count-complies"]], "LFrenchRidgeLapJoint.from_json": [[76, "lfrenchridgelapjoint-from-json"]], "LFrenchRidgeLapJoint.from_jsonstring": [[77, "lfrenchridgelapjoint-from-jsonstring"]], "LFrenchRidgeLapJoint.get_face_most_ortho_to_beam": [[78, "lfrenchridgelapjoint-get-face-most-ortho-to-beam"]], "LFrenchRidgeLapJoint.get_face_most_towards_beam": [[79, "lfrenchridgelapjoint-get-face-most-towards-beam"]], "LFrenchRidgeLapJoint.restore_beams_from_keys": [[80, "lfrenchridgelapjoint-restore-beams-from-keys"]], "LFrenchRidgeLapJoint.sha256": [[81, "lfrenchridgelapjoint-sha256"]], "LFrenchRidgeLapJoint.to_json": [[82, "lfrenchridgelapjoint-to-json"]], "LFrenchRidgeLapJoint.to_jsonstring": [[83, "lfrenchridgelapjoint-to-jsonstring"]], "LFrenchRidgeLapJoint.validate_data": [[84, "lfrenchridgelapjoint-validate-data"]], "LLapJoint": [[85, "llapjoint"]], "LLapJoint.ToString": [[86, "llapjoint-tostring"]], "LLapJoint.add_extensions": [[87, "llapjoint-add-extensions"]], "LLapJoint.add_features": [[88, "llapjoint-add-features"]], "LLapJoint.check_elements_compatibility": [[89, "llapjoint-check-elements-compatibility"]], "LLapJoint.copy": [[90, "llapjoint-copy"]], "LLapJoint.create": [[91, "llapjoint-create"]], "LLapJoint.element_count_complies": [[92, "llapjoint-element-count-complies"]], "LLapJoint.from_json": [[93, "llapjoint-from-json"]], "LLapJoint.from_jsonstring": [[94, "llapjoint-from-jsonstring"]], "LLapJoint.get_face_most_ortho_to_beam": [[95, "llapjoint-get-face-most-ortho-to-beam"]], "LLapJoint.get_face_most_towards_beam": [[96, "llapjoint-get-face-most-towards-beam"]], "LLapJoint.restore_beams_from_keys": [[97, "llapjoint-restore-beams-from-keys"]], "LLapJoint.sha256": [[98, "llapjoint-sha256"]], "LLapJoint.to_json": [[99, "llapjoint-to-json"]], "LLapJoint.to_jsonstring": [[100, "llapjoint-to-jsonstring"]], "LLapJoint.validate_data": [[101, "llapjoint-validate-data"]], "LMiterJoint": [[102, "lmiterjoint"]], "LMiterJoint.ToString": [[103, "lmiterjoint-tostring"]], "LMiterJoint.add_extensions": [[104, "lmiterjoint-add-extensions"]], "LMiterJoint.add_features": [[105, "lmiterjoint-add-features"]], "LMiterJoint.check_elements_compatibility": [[106, "lmiterjoint-check-elements-compatibility"]], "LMiterJoint.copy": [[107, "lmiterjoint-copy"]], "LMiterJoint.create": [[108, "lmiterjoint-create"]], "LMiterJoint.element_count_complies": [[109, "lmiterjoint-element-count-complies"]], "LMiterJoint.from_json": [[110, "lmiterjoint-from-json"]], "LMiterJoint.from_jsonstring": [[111, "lmiterjoint-from-jsonstring"]], "LMiterJoint.get_cutoff_plane": [[112, "lmiterjoint-get-cutoff-plane"]], "LMiterJoint.get_cutting_planes": [[113, "lmiterjoint-get-cutting-planes"]], "LMiterJoint.get_face_most_ortho_to_beam": [[114, "lmiterjoint-get-face-most-ortho-to-beam"]], "LMiterJoint.get_face_most_towards_beam": [[115, "lmiterjoint-get-face-most-towards-beam"]], "LMiterJoint.restore_beams_from_keys": [[116, "lmiterjoint-restore-beams-from-keys"]], "LMiterJoint.sha256": [[117, "lmiterjoint-sha256"]], "LMiterJoint.to_json": [[118, "lmiterjoint-to-json"]], "LMiterJoint.to_jsonstring": [[119, "lmiterjoint-to-jsonstring"]], "LMiterJoint.validate_data": [[120, "lmiterjoint-validate-data"]], "LapJoint": [[121, "lapjoint"]], "LapJoint.ToString": [[122, "lapjoint-tostring"]], "LapJoint.add_extensions": [[123, "lapjoint-add-extensions"]], "LapJoint.add_features": [[124, "lapjoint-add-features"]], "LapJoint.check_elements_compatibility": [[125, "lapjoint-check-elements-compatibility"]], "LapJoint.copy": [[126, "lapjoint-copy"]], "LapJoint.create": [[127, "lapjoint-create"]], "LapJoint.element_count_complies": [[128, "lapjoint-element-count-complies"]], "LapJoint.from_json": [[129, "lapjoint-from-json"]], "LapJoint.from_jsonstring": [[130, "lapjoint-from-jsonstring"]], "LapJoint.get_face_most_ortho_to_beam": [[131, "lapjoint-get-face-most-ortho-to-beam"]], "LapJoint.get_face_most_towards_beam": [[132, "lapjoint-get-face-most-towards-beam"]], "LapJoint.restore_beams_from_keys": [[133, "lapjoint-restore-beams-from-keys"]], "LapJoint.sha256": [[134, "lapjoint-sha256"]], "LapJoint.to_json": [[135, "lapjoint-to-json"]], "LapJoint.to_jsonstring": [[136, "lapjoint-to-jsonstring"]], "LapJoint.validate_data": [[137, "lapjoint-validate-data"]], "NullJoint": [[138, "nulljoint"]], "NullJoint.ToString": [[139, "nulljoint-tostring"]], "NullJoint.add_extensions": [[140, "nulljoint-add-extensions"]], "NullJoint.add_features": [[141, "nulljoint-add-features"]], "NullJoint.check_elements_compatibility": [[142, "nulljoint-check-elements-compatibility"]], "NullJoint.copy": [[143, "nulljoint-copy"]], "NullJoint.create": [[144, "nulljoint-create"]], "NullJoint.element_count_complies": [[145, "nulljoint-element-count-complies"]], "NullJoint.from_json": [[146, "nulljoint-from-json"]], "NullJoint.from_jsonstring": [[147, "nulljoint-from-jsonstring"]], "NullJoint.get_face_most_ortho_to_beam": [[148, "nulljoint-get-face-most-ortho-to-beam"]], "NullJoint.get_face_most_towards_beam": [[149, "nulljoint-get-face-most-towards-beam"]], "NullJoint.restore_beams_from_keys": [[150, "nulljoint-restore-beams-from-keys"]], "NullJoint.sha256": [[151, "nulljoint-sha256"]], "NullJoint.to_json": [[152, "nulljoint-to-json"]], "NullJoint.to_jsonstring": [[153, "nulljoint-to-jsonstring"]], "NullJoint.validate_data": [[154, "nulljoint-validate-data"]], "TBirdsmouthJoint": [[155, "tbirdsmouthjoint"]], "TBirdsmouthJoint.ToString": [[156, "tbirdsmouthjoint-tostring"]], "TBirdsmouthJoint.add_extensions": [[157, "tbirdsmouthjoint-add-extensions"]], "TBirdsmouthJoint.add_features": [[158, "tbirdsmouthjoint-add-features"]], "TBirdsmouthJoint.check_elements_compatibility": [[159, "tbirdsmouthjoint-check-elements-compatibility"]], "TBirdsmouthJoint.copy": [[160, "tbirdsmouthjoint-copy"]], "TBirdsmouthJoint.create": [[161, "tbirdsmouthjoint-create"]], "TBirdsmouthJoint.element_count_complies": [[162, "tbirdsmouthjoint-element-count-complies"]], "TBirdsmouthJoint.from_json": [[163, "tbirdsmouthjoint-from-json"]], "TBirdsmouthJoint.from_jsonstring": [[164, "tbirdsmouthjoint-from-jsonstring"]], "TBirdsmouthJoint.get_face_most_ortho_to_beam": [[165, "tbirdsmouthjoint-get-face-most-ortho-to-beam"]], "TBirdsmouthJoint.get_face_most_towards_beam": [[166, "tbirdsmouthjoint-get-face-most-towards-beam"]], "TBirdsmouthJoint.restore_beams_from_keys": [[167, "tbirdsmouthjoint-restore-beams-from-keys"]], "TBirdsmouthJoint.sha256": [[168, "tbirdsmouthjoint-sha256"]], "TBirdsmouthJoint.to_json": [[169, "tbirdsmouthjoint-to-json"]], "TBirdsmouthJoint.to_jsonstring": [[170, "tbirdsmouthjoint-to-jsonstring"]], "TBirdsmouthJoint.validate_data": [[171, "tbirdsmouthjoint-validate-data"]], "TButtJoint": [[172, "tbuttjoint"]], "TButtJoint.ToString": [[173, "tbuttjoint-tostring"]], "TButtJoint.add_extensions": [[174, "tbuttjoint-add-extensions"]], "TButtJoint.add_features": [[175, "tbuttjoint-add-features"]], "TButtJoint.check_elements_compatibility": [[176, "tbuttjoint-check-elements-compatibility"]], "TButtJoint.copy": [[177, "tbuttjoint-copy"]], "TButtJoint.create": [[178, "tbuttjoint-create"]], "TButtJoint.element_count_complies": [[179, "tbuttjoint-element-count-complies"]], "TButtJoint.from_json": [[180, "tbuttjoint-from-json"]], "TButtJoint.from_jsonstring": [[181, "tbuttjoint-from-jsonstring"]], "TButtJoint.get_face_most_ortho_to_beam": [[182, "tbuttjoint-get-face-most-ortho-to-beam"]], "TButtJoint.get_face_most_towards_beam": [[183, "tbuttjoint-get-face-most-towards-beam"]], "TButtJoint.restore_beams_from_keys": [[184, "tbuttjoint-restore-beams-from-keys"]], "TButtJoint.sha256": [[185, "tbuttjoint-sha256"]], "TButtJoint.to_json": [[186, "tbuttjoint-to-json"]], "TButtJoint.to_jsonstring": [[187, "tbuttjoint-to-jsonstring"]], "TButtJoint.validate_data": [[188, "tbuttjoint-validate-data"]], "TDovetailJoint": [[189, "tdovetailjoint"]], "TDovetailJoint.ToString": [[190, "tdovetailjoint-tostring"]], "TDovetailJoint.add_extensions": [[191, "tdovetailjoint-add-extensions"]], "TDovetailJoint.add_features": [[192, "tdovetailjoint-add-features"]], "TDovetailJoint.check_elements_compatibility": [[193, "tdovetailjoint-check-elements-compatibility"]], "TDovetailJoint.copy": [[194, "tdovetailjoint-copy"]], "TDovetailJoint.create": [[195, "tdovetailjoint-create"]], "TDovetailJoint.define_dovetail_tool": [[196, "tdovetailjoint-define-dovetail-tool"]], "TDovetailJoint.element_count_complies": [[197, "tdovetailjoint-element-count-complies"]], "TDovetailJoint.from_json": [[198, "tdovetailjoint-from-json"]], "TDovetailJoint.from_jsonstring": [[199, "tdovetailjoint-from-jsonstring"]], "TDovetailJoint.get_face_most_ortho_to_beam": [[200, "tdovetailjoint-get-face-most-ortho-to-beam"]], "TDovetailJoint.get_face_most_towards_beam": [[201, "tdovetailjoint-get-face-most-towards-beam"]], "TDovetailJoint.restore_beams_from_keys": [[202, "tdovetailjoint-restore-beams-from-keys"]], "TDovetailJoint.sha256": [[203, "tdovetailjoint-sha256"]], "TDovetailJoint.to_json": [[204, "tdovetailjoint-to-json"]], "TDovetailJoint.to_jsonstring": [[205, "tdovetailjoint-to-jsonstring"]], "TDovetailJoint.validate_data": [[206, "tdovetailjoint-validate-data"]], "TLapJoint": [[207, "tlapjoint"]], "TLapJoint.ToString": [[208, "tlapjoint-tostring"]], "TLapJoint.add_extensions": [[209, "tlapjoint-add-extensions"]], "TLapJoint.add_features": [[210, "tlapjoint-add-features"]], "TLapJoint.check_elements_compatibility": [[211, "tlapjoint-check-elements-compatibility"]], "TLapJoint.copy": [[212, "tlapjoint-copy"]], "TLapJoint.create": [[213, "tlapjoint-create"]], "TLapJoint.element_count_complies": [[214, "tlapjoint-element-count-complies"]], "TLapJoint.from_json": [[215, "tlapjoint-from-json"]], "TLapJoint.from_jsonstring": [[216, "tlapjoint-from-jsonstring"]], "TLapJoint.get_face_most_ortho_to_beam": [[217, "tlapjoint-get-face-most-ortho-to-beam"]], "TLapJoint.get_face_most_towards_beam": [[218, "tlapjoint-get-face-most-towards-beam"]], "TLapJoint.restore_beams_from_keys": [[219, "tlapjoint-restore-beams-from-keys"]], "TLapJoint.sha256": [[220, "tlapjoint-sha256"]], "TLapJoint.to_json": [[221, "tlapjoint-to-json"]], "TLapJoint.to_jsonstring": [[222, "tlapjoint-to-jsonstring"]], "TLapJoint.validate_data": [[223, "tlapjoint-validate-data"]], "TStepJoint": [[224, "tstepjoint"]], "TStepJoint.ToString": [[225, "tstepjoint-tostring"]], "TStepJoint.add_extensions": [[226, "tstepjoint-add-extensions"]], "TStepJoint.add_features": [[227, "tstepjoint-add-features"]], "TStepJoint.check_elements_compatibility": [[228, "tstepjoint-check-elements-compatibility"]], "TStepJoint.copy": [[229, "tstepjoint-copy"]], "TStepJoint.create": [[230, "tstepjoint-create"]], "TStepJoint.element_count_complies": [[231, "tstepjoint-element-count-complies"]], "TStepJoint.from_json": [[232, "tstepjoint-from-json"]], "TStepJoint.from_jsonstring": [[233, "tstepjoint-from-jsonstring"]], "TStepJoint.get_face_most_ortho_to_beam": [[234, "tstepjoint-get-face-most-ortho-to-beam"]], "TStepJoint.get_face_most_towards_beam": [[235, "tstepjoint-get-face-most-towards-beam"]], "TStepJoint.restore_beams_from_keys": [[236, "tstepjoint-restore-beams-from-keys"]], "TStepJoint.set_step_depths": [[237, "tstepjoint-set-step-depths"]], "TStepJoint.sha256": [[238, "tstepjoint-sha256"]], "TStepJoint.to_json": [[239, "tstepjoint-to-json"]], "TStepJoint.to_jsonstring": [[240, "tstepjoint-to-jsonstring"]], "TStepJoint.validate_data": [[241, "tstepjoint-validate-data"]], "TenonMortiseJoint": [[242, "tenonmortisejoint"]], "TenonMortiseJoint.ToString": [[243, "tenonmortisejoint-tostring"]], "TenonMortiseJoint.add_extensions": [[244, "tenonmortisejoint-add-extensions"]], "TenonMortiseJoint.add_features": [[245, "tenonmortisejoint-add-features"]], "TenonMortiseJoint.check_elements_compatibility": [[246, "tenonmortisejoint-check-elements-compatibility"]], "TenonMortiseJoint.copy": [[247, "tenonmortisejoint-copy"]], "TenonMortiseJoint.create": [[248, "tenonmortisejoint-create"]], "TenonMortiseJoint.element_count_complies": [[249, "tenonmortisejoint-element-count-complies"]], "TenonMortiseJoint.from_json": [[250, "tenonmortisejoint-from-json"]], "TenonMortiseJoint.from_jsonstring": [[251, "tenonmortisejoint-from-jsonstring"]], "TenonMortiseJoint.get_face_most_ortho_to_beam": [[252, "tenonmortisejoint-get-face-most-ortho-to-beam"]], "TenonMortiseJoint.get_face_most_towards_beam": [[253, "tenonmortisejoint-get-face-most-towards-beam"]], "TenonMortiseJoint.restore_beams_from_keys": [[254, "tenonmortisejoint-restore-beams-from-keys"]], "TenonMortiseJoint.set_default_values": [[255, "tenonmortisejoint-set-default-values"]], "TenonMortiseJoint.sha256": [[256, "tenonmortisejoint-sha256"]], "TenonMortiseJoint.to_json": [[257, "tenonmortisejoint-to-json"]], "TenonMortiseJoint.to_jsonstring": [[258, "tenonmortisejoint-to-jsonstring"]], "TenonMortiseJoint.validate_data": [[259, "tenonmortisejoint-validate-data"]], "XLapJoint": [[260, "xlapjoint"]], "XLapJoint.ToString": [[261, "xlapjoint-tostring"]], "XLapJoint.add_extensions": [[262, "xlapjoint-add-extensions"]], "XLapJoint.add_features": [[263, "xlapjoint-add-features"]], "XLapJoint.check_elements_compatibility": [[264, "xlapjoint-check-elements-compatibility"]], "XLapJoint.copy": [[265, "xlapjoint-copy"]], "XLapJoint.create": [[266, "xlapjoint-create"]], "XLapJoint.element_count_complies": [[267, "xlapjoint-element-count-complies"]], "XLapJoint.from_json": [[268, "xlapjoint-from-json"]], "XLapJoint.from_jsonstring": [[269, "xlapjoint-from-jsonstring"]], "XLapJoint.get_face_most_ortho_to_beam": [[270, "xlapjoint-get-face-most-ortho-to-beam"]], "XLapJoint.get_face_most_towards_beam": [[271, "xlapjoint-get-face-most-towards-beam"]], "XLapJoint.restore_beams_from_keys": [[272, "xlapjoint-restore-beams-from-keys"]], "XLapJoint.sha256": [[273, "xlapjoint-sha256"]], "XLapJoint.to_json": [[274, "xlapjoint-to-json"]], "XLapJoint.to_jsonstring": [[275, "xlapjoint-to-jsonstring"]], "XLapJoint.validate_data": [[276, "xlapjoint-validate-data"]], "XNotchJoint": [[277, "xnotchjoint"]], "XNotchJoint.ToString": [[278, "xnotchjoint-tostring"]], "XNotchJoint.add_extensions": [[279, "xnotchjoint-add-extensions"]], "XNotchJoint.add_features": [[280, "xnotchjoint-add-features"]], "XNotchJoint.check_elements_compatibility": [[281, "xnotchjoint-check-elements-compatibility"]], "XNotchJoint.copy": [[282, "xnotchjoint-copy"]], "XNotchJoint.create": [[283, "xnotchjoint-create"]], "XNotchJoint.element_count_complies": [[284, "xnotchjoint-element-count-complies"]], "XNotchJoint.from_json": [[285, "xnotchjoint-from-json"]], "XNotchJoint.from_jsonstring": [[286, "xnotchjoint-from-jsonstring"]], "XNotchJoint.get_face_most_ortho_to_beam": [[287, "xnotchjoint-get-face-most-ortho-to-beam"]], "XNotchJoint.get_face_most_towards_beam": [[288, "xnotchjoint-get-face-most-towards-beam"]], "XNotchJoint.restore_beams_from_keys": [[289, "xnotchjoint-restore-beams-from-keys"]], "XNotchJoint.sha256": [[290, "xnotchjoint-sha256"]], "XNotchJoint.to_json": [[291, "xnotchjoint-to-json"]], "XNotchJoint.to_jsonstring": [[292, "xnotchjoint-to-jsonstring"]], "XNotchJoint.validate_data": [[293, "xnotchjoint-validate-data"]], "YButtJoint": [[294, "ybuttjoint"]], "YButtJoint.ToString": [[295, "ybuttjoint-tostring"]], "YButtJoint.add_extensions": [[296, "ybuttjoint-add-extensions"]], "YButtJoint.add_features": [[297, "ybuttjoint-add-features"]], "YButtJoint.check_elements_compatibility": [[298, "ybuttjoint-check-elements-compatibility"]], "YButtJoint.copy": [[299, "ybuttjoint-copy"]], "YButtJoint.create": [[300, "ybuttjoint-create"]], "YButtJoint.cross_beam_ref_side_index": [[301, "ybuttjoint-cross-beam-ref-side-index"]], "YButtJoint.element_count_complies": [[302, "ybuttjoint-element-count-complies"]], "YButtJoint.from_json": [[303, "ybuttjoint-from-json"]], "YButtJoint.from_jsonstring": [[304, "ybuttjoint-from-jsonstring"]], "YButtJoint.get_face_most_ortho_to_beam": [[305, "ybuttjoint-get-face-most-ortho-to-beam"]], "YButtJoint.get_face_most_towards_beam": [[306, "ybuttjoint-get-face-most-towards-beam"]], "YButtJoint.get_miter_planes": [[307, "ybuttjoint-get-miter-planes"]], "YButtJoint.main_beam_ref_side_index": [[308, "ybuttjoint-main-beam-ref-side-index"]], "YButtJoint.restore_beams_from_keys": [[309, "ybuttjoint-restore-beams-from-keys"]], "YButtJoint.sha256": [[310, "ybuttjoint-sha256"]], "YButtJoint.to_json": [[311, "ybuttjoint-to-json"]], "YButtJoint.to_jsonstring": [[312, "ybuttjoint-to-jsonstring"]], "YButtJoint.validate_data": [[313, "ybuttjoint-validate-data"]], "find_neighboring_elements": [[314, "find-neighboring-elements"], [881, "find-neighboring-elements"]], "CategoryRule": [[315, "categoryrule"]], "CategoryRule.ToString": [[316, "categoryrule-tostring"]], "CategoryRule.comply": [[317, "categoryrule-comply"]], "CategoryRule.get_category_rules": [[318, "categoryrule-get-category-rules"]], "CategoryRule.get_direct_rules": [[319, "categoryrule-get-direct-rules"]], "CategoryRule.get_topology_rules": [[320, "categoryrule-get-topology-rules"]], "CategoryRule.joints_from_beams_and_rules": [[321, "categoryrule-joints-from-beams-and-rules"]], "CategoryRule.reorder": [[322, "categoryrule-reorder"]], "DebugInfomation": [[323, "debuginfomation"]], "DebugInfomation.ToString": [[324, "debuginfomation-tostring"]], "DebugInfomation.add_fastener_error": [[325, "debuginfomation-add-fastener-error"]], "DebugInfomation.add_feature_error": [[326, "debuginfomation-add-feature-error"]], "DebugInfomation.add_joint_error": [[327, "debuginfomation-add-joint-error"]], "DirectRule": [[328, "directrule"]], "DirectRule.ToString": [[329, "directrule-tostring"]], "DirectRule.comply": [[330, "directrule-comply"]], "DirectRule.contains": [[331, "directrule-contains"]], "DirectRule.get_category_rules": [[332, "directrule-get-category-rules"]], "DirectRule.get_direct_rules": [[333, "directrule-get-direct-rules"]], "DirectRule.get_topology_rules": [[334, "directrule-get-topology-rules"]], "DirectRule.joints_from_beams_and_rules": [[335, "directrule-joints-from-beams-and-rules"]], "FeatureDefinition": [[336, "featuredefinition"]], "FeatureDefinition.ToString": [[337, "featuredefinition-tostring"]], "JointDefinition": [[338, "jointdefinition"]], "JointDefinition.ToString": [[339, "jointdefinition-tostring"]], "JointDefinition.is_identical": [[340, "jointdefinition-is-identical"]], "JointDefinition.match": [[341, "jointdefinition-match"]], "JointRule": [[342, "jointrule"]], "JointRule.comply": [[343, "jointrule-comply"]], "JointRule.get_category_rules": [[344, "jointrule-get-category-rules"]], "JointRule.get_direct_rules": [[345, "jointrule-get-direct-rules"]], "JointRule.get_topology_rules": [[346, "jointrule-get-topology-rules"]], "JointRule.joints_from_beams_and_rules": [[347, "jointrule-joints-from-beams-and-rules"]], "SurfaceModel": [[348, "surfacemodel"]], "SurfaceModel.beam_category_names": [[349, "surfacemodel-beam-category-names"]], "SurfaceModel.create_model": [[350, "surfacemodel-create-model"]], "SurfaceModel.cull_overlaps": [[351, "surfacemodel-cull-overlaps"]], "SurfaceModel.distance_between_elements": [[352, "surfacemodel-distance-between-elements"]], "SurfaceModel.generate_frame": [[353, "surfacemodel-generate-frame"]], "SurfaceModel.generate_perimeter_beams": [[354, "surfacemodel-generate-perimeter-beams"]], "SurfaceModel.generate_plates": [[355, "surfacemodel-generate-plates"]], "SurfaceModel.generate_stud_lines": [[356, "surfacemodel-generate-stud-lines"]], "SurfaceModel.generate_studs": [[357, "surfacemodel-generate-studs"]], "SurfaceModel.generate_windows": [[358, "surfacemodel-generate-windows"]], "SurfaceModel.get_beam_intersections": [[359, "surfacemodel-get-beam-intersections"]], "SurfaceModel.get_interior_segment_indices": [[360, "surfacemodel-get-interior-segment-indices"]], "SurfaceModel.offset_elements": [[361, "surfacemodel-offset-elements"]], "SurfaceModel.parse_loops": [[362, "surfacemodel-parse-loops"]], "SurfaceModel.trim_jack_studs": [[363, "surfacemodel-trim-jack-studs"]], "SurfaceModel.trim_king_studs": [[364, "surfacemodel-trim-king-studs"]], "SurfaceModel.trim_studs": [[365, "surfacemodel-trim-studs"]], "TopologyRule": [[366, "topologyrule"]], "TopologyRule.ToString": [[367, "topologyrule-tostring"]], "TopologyRule.comply": [[368, "topologyrule-comply"]], "TopologyRule.get_category_rules": [[369, "topologyrule-get-category-rules"]], "TopologyRule.get_direct_rules": [[370, "topologyrule-get-direct-rules"]], "TopologyRule.get_topology_rules": [[371, "topologyrule-get-topology-rules"]], "TopologyRule.joints_from_beams_and_rules": [[372, "topologyrule-joints-from-beams-and-rules"]], "guess_joint_topology_2beams": [[373, "guess-joint-topology-2beams"]], "set_default_joints": [[374, "set-default-joints"]], "Beam": [[375, "beam"]], "Beam.ToString": [[376, "beam-tostring"]], "Beam.add_blank_extension": [[377, "beam-add-blank-extension"]], "Beam.add_feature": [[378, "beam-add-feature"]], "Beam.add_features": [[379, "beam-add-features"]], "Beam.back_side": [[380, "beam-back-side"]], "Beam.compute_aabb": [[381, "beam-compute-aabb"]], "Beam.compute_collision_mesh": [[382, "beam-compute-collision-mesh"]], "Beam.compute_geometry": [[383, "beam-compute-geometry"]], "Beam.compute_obb": [[384, "beam-compute-obb"]], "Beam.compute_worldtransformation": [[385, "beam-compute-worldtransformation"]], "Beam.copy": [[386, "beam-copy"]], "Beam.endpoint_closest_to_point": [[387, "beam-endpoint-closest-to-point"]], "Beam.extension_to_plane": [[388, "beam-extension-to-plane"]], "Beam.from_centerline": [[389, "beam-from-centerline"]], "Beam.from_endpoints": [[390, "beam-from-endpoints"]], "Beam.from_json": [[391, "beam-from-json"]], "Beam.from_jsonstring": [[392, "beam-from-jsonstring"]], "Beam.front_side": [[393, "beam-front-side"]], "Beam.get_dimensions_relative_to_side": [[394, "beam-get-dimensions-relative-to-side"]], "Beam.opp_side": [[395, "beam-opp-side"]], "Beam.remove_blank_extension": [[396, "beam-remove-blank-extension"]], "Beam.remove_features": [[397, "beam-remove-features"]], "Beam.reset": [[398, "beam-reset"]], "Beam.sha256": [[399, "beam-sha256"]], "Beam.side_as_surface": [[400, "beam-side-as-surface"]], "Beam.to_json": [[401, "beam-to-json"]], "Beam.to_jsonstring": [[402, "beam-to-jsonstring"]], "Beam.transform": [[403, "beam-transform"]], "Beam.transformed": [[404, "beam-transformed"]], "Beam.validate_data": [[405, "beam-validate-data"]], "Fastener": [[406, "fastener"]], "Fastener.ToString": [[407, "fastener-tostring"]], "Fastener.add_feature": [[408, "fastener-add-feature"]], "Fastener.add_features": [[409, "fastener-add-features"]], "Fastener.compute_aabb": [[410, "fastener-compute-aabb"]], "Fastener.compute_collision_mesh": [[411, "fastener-compute-collision-mesh"]], "Fastener.compute_geometry": [[412, "fastener-compute-geometry"]], "Fastener.compute_obb": [[413, "fastener-compute-obb"]], "Fastener.compute_worldtransformation": [[414, "fastener-compute-worldtransformation"]], "Fastener.copy": [[415, "fastener-copy"]], "Fastener.from_json": [[416, "fastener-from-json"]], "Fastener.from_jsonstring": [[417, "fastener-from-jsonstring"]], "Fastener.remove_blank_extension": [[418, "fastener-remove-blank-extension"]], "Fastener.remove_features": [[419, "fastener-remove-features"]], "Fastener.reset": [[420, "fastener-reset"]], "Fastener.sha256": [[421, "fastener-sha256"]], "Fastener.to_json": [[422, "fastener-to-json"]], "Fastener.to_jsonstring": [[423, "fastener-to-jsonstring"]], "Fastener.transform": [[424, "fastener-transform"]], "Fastener.transformed": [[425, "fastener-transformed"]], "Fastener.validate_data": [[426, "fastener-validate-data"]], "FastenerTimberInterface": [[427, "fastenertimberinterface"]], "FastenerTimberInterface.ToString": [[428, "fastenertimberinterface-tostring"]], "FastenerTimberInterface.copy": [[429, "fastenertimberinterface-copy"]], "FastenerTimberInterface.from_json": [[430, "fastenertimberinterface-from-json"]], "FastenerTimberInterface.from_jsonstring": [[431, "fastenertimberinterface-from-jsonstring"]], "FastenerTimberInterface.get_features": [[432, "fastenertimberinterface-get-features"]], "FastenerTimberInterface.sha256": [[433, "fastenertimberinterface-sha256"]], "FastenerTimberInterface.to_json": [[434, "fastenertimberinterface-to-json"]], "FastenerTimberInterface.to_jsonstring": [[435, "fastenertimberinterface-to-jsonstring"]], "FastenerTimberInterface.validate_data": [[436, "fastenertimberinterface-validate-data"]], "Plate": [[437, "plate"]], "Plate.ToString": [[438, "plate-tostring"]], "Plate.add_feature": [[439, "plate-add-feature"]], "Plate.add_features": [[440, "plate-add-features"]], "Plate.compute_aabb": [[441, "plate-compute-aabb"]], "Plate.compute_collision_mesh": [[442, "plate-compute-collision-mesh"]], "Plate.compute_geometry": [[443, "plate-compute-geometry"]], "Plate.compute_obb": [[444, "plate-compute-obb"]], "Plate.compute_worldtransformation": [[445, "plate-compute-worldtransformation"]], "Plate.copy": [[446, "plate-copy"]], "Plate.from_json": [[447, "plate-from-json"]], "Plate.from_jsonstring": [[448, "plate-from-jsonstring"]], "Plate.from_outline_thickness": [[449, "plate-from-outline-thickness"]], "Plate.remove_blank_extension": [[450, "plate-remove-blank-extension"]], "Plate.remove_features": [[451, "plate-remove-features"]], "Plate.reset": [[452, "plate-reset"]], "Plate.sha256": [[453, "plate-sha256"]], "Plate.shape": [[454, "plate-shape"]], "Plate.side_as_surface": [[455, "plate-side-as-surface"]], "Plate.to_json": [[456, "plate-to-json"]], "Plate.to_jsonstring": [[457, "plate-to-jsonstring"]], "Plate.transform": [[458, "plate-transform"]], "Plate.transformed": [[459, "plate-transformed"]], "Plate.validate_data": [[460, "plate-validate-data"]], "TimberElement": [[461, "timberelement"]], "TimberElement.ToString": [[462, "timberelement-tostring"]], "TimberElement.add_feature": [[463, "timberelement-add-feature"]], "TimberElement.add_features": [[464, "timberelement-add-features"]], "TimberElement.compute_aabb": [[465, "timberelement-compute-aabb"]], "TimberElement.compute_collision_mesh": [[466, "timberelement-compute-collision-mesh"]], "TimberElement.compute_geometry": [[467, "timberelement-compute-geometry"]], "TimberElement.compute_obb": [[468, "timberelement-compute-obb"]], "TimberElement.compute_worldtransformation": [[469, "timberelement-compute-worldtransformation"]], "TimberElement.copy": [[470, "timberelement-copy"]], "TimberElement.from_json": [[471, "timberelement-from-json"]], "TimberElement.from_jsonstring": [[472, "timberelement-from-jsonstring"]], "TimberElement.remove_blank_extension": [[473, "timberelement-remove-blank-extension"]], "TimberElement.remove_features": [[474, "timberelement-remove-features"]], "TimberElement.reset": [[475, "timberelement-reset"]], "TimberElement.sha256": [[476, "timberelement-sha256"]], "TimberElement.to_json": [[477, "timberelement-to-json"]], "TimberElement.to_jsonstring": [[478, "timberelement-to-jsonstring"]], "TimberElement.transform": [[479, "timberelement-transform"]], "TimberElement.transformed": [[480, "timberelement-transformed"]], "TimberElement.validate_data": [[481, "timberelement-validate-data"]], "Wall": [[482, "wall"]], "Wall.ToString": [[483, "wall-tostring"]], "Wall.add_feature": [[484, "wall-add-feature"]], "Wall.add_features": [[485, "wall-add-features"]], "Wall.compute_aabb": [[486, "wall-compute-aabb"]], "Wall.compute_collision_mesh": [[487, "wall-compute-collision-mesh"]], "Wall.compute_geometry": [[488, "wall-compute-geometry"]], "Wall.compute_obb": [[489, "wall-compute-obb"]], "Wall.compute_worldtransformation": [[490, "wall-compute-worldtransformation"]], "Wall.copy": [[491, "wall-copy"]], "Wall.from_boundary": [[492, "wall-from-boundary"]], "Wall.from_brep": [[493, "wall-from-brep"]], "Wall.from_json": [[494, "wall-from-json"]], "Wall.from_jsonstring": [[495, "wall-from-jsonstring"]], "Wall.remove_blank_extension": [[496, "wall-remove-blank-extension"]], "Wall.remove_features": [[497, "wall-remove-features"]], "Wall.reset": [[498, "wall-reset"]], "Wall.rotate": [[499, "wall-rotate"]], "Wall.sha256": [[500, "wall-sha256"]], "Wall.to_json": [[501, "wall-to-json"]], "Wall.to_jsonstring": [[502, "wall-to-jsonstring"]], "Wall.transform": [[503, "wall-transform"]], "Wall.transformed": [[504, "wall-transformed"]], "Wall.validate_data": [[505, "wall-validate-data"]], "BeamJoiningError": [[506, "beamjoiningerror"]], "FastenerApplicationError": [[507, "fastenerapplicationerror"]], "FeatureApplicationError": [[508, "featureapplicationerror"]], "BTLxPart": [[509, "btlxpart"]], "BTLxPart.et_point_vals": [[510, "btlxpart-et-point-vals"]], "BTLxPart.ref_side_from_face": [[511, "btlxpart-ref-side-from-face"]], "BTLxProcessing": [[512, "btlxprocessing"]], "BTLxProcessing.ToString": [[513, "btlxprocessing-tostring"]], "BTLxProcessing.add_subprocessing": [[514, "btlxprocessing-add-subprocessing"]], "BTLxProcessing.copy": [[515, "btlxprocessing-copy"]], "BTLxProcessing.from_json": [[516, "btlxprocessing-from-json"]], "BTLxProcessing.from_jsonstring": [[517, "btlxprocessing-from-jsonstring"]], "BTLxProcessing.scaled": [[518, "btlxprocessing-scaled"]], "BTLxProcessing.sha256": [[519, "btlxprocessing-sha256"]], "BTLxProcessing.to_json": [[520, "btlxprocessing-to-json"]], "BTLxProcessing.to_jsonstring": [[521, "btlxprocessing-to-jsonstring"]], "BTLxProcessing.validate_data": [[522, "btlxprocessing-validate-data"]], "BTLxWriter": [[523, "btlxwriter"]], "BTLxWriter.model_to_xml": [[524, "btlxwriter-model-to-xml"]], "BTLxWriter.register_type_serializer": [[525, "btlxwriter-register-type-serializer"]], "BTLxWriter.write": [[526, "btlxwriter-write"]], "DoubleCut": [[527, "doublecut"]], "DoubleCut.ToString": [[528, "doublecut-tostring"]], "DoubleCut.add_subprocessing": [[529, "doublecut-add-subprocessing"]], "DoubleCut.apply": [[530, "doublecut-apply"]], "DoubleCut.copy": [[531, "doublecut-copy"]], "DoubleCut.from_json": [[532, "doublecut-from-json"]], "DoubleCut.from_jsonstring": [[533, "doublecut-from-jsonstring"]], "DoubleCut.from_planes_and_beam": [[534, "doublecut-from-planes-and-beam"]], "DoubleCut.from_shapes_and_element": [[535, "doublecut-from-shapes-and-element"]], "DoubleCut.planes_from_params_and_beam": [[536, "doublecut-planes-from-params-and-beam"]], "DoubleCut.scale": [[537, "doublecut-scale"]], "DoubleCut.scaled": [[538, "doublecut-scaled"]], "DoubleCut.sha256": [[539, "doublecut-sha256"]], "DoubleCut.to_json": [[540, "doublecut-to-json"]], "DoubleCut.to_jsonstring": [[541, "doublecut-to-jsonstring"]], "DoubleCut.validate_data": [[542, "doublecut-validate-data"]], "DovetailMortise": [[543, "dovetailmortise"]], "DovetailMortise.ToString": [[544, "dovetailmortise-tostring"]], "DovetailMortise.add_subprocessing": [[545, "dovetailmortise-add-subprocessing"]], "DovetailMortise.apply": [[546, "dovetailmortise-apply"]], "DovetailMortise.copy": [[547, "dovetailmortise-copy"]], "DovetailMortise.define_dovetail_tool": [[548, "dovetailmortise-define-dovetail-tool"]], "DovetailMortise.dovetail_cutting_frames_from_params_and_beam": [[549, "dovetailmortise-dovetail-cutting-frames-from-params-and-beam"]], "DovetailMortise.dovetail_volume_from_params_and_beam": [[550, "dovetailmortise-dovetail-volume-from-params-and-beam"]], "DovetailMortise.frame_from_params_and_beam": [[551, "dovetailmortise-frame-from-params-and-beam"]], "DovetailMortise.from_frame_and_beam": [[552, "dovetailmortise-from-frame-and-beam"]], "DovetailMortise.from_json": [[553, "dovetailmortise-from-json"]], "DovetailMortise.from_jsonstring": [[554, "dovetailmortise-from-jsonstring"]], "DovetailMortise.scale": [[555, "dovetailmortise-scale"]], "DovetailMortise.scaled": [[556, "dovetailmortise-scaled"]], "DovetailMortise.sha256": [[557, "dovetailmortise-sha256"]], "DovetailMortise.to_json": [[558, "dovetailmortise-to-json"]], "DovetailMortise.to_jsonstring": [[559, "dovetailmortise-to-jsonstring"]], "DovetailMortise.validate_data": [[560, "dovetailmortise-validate-data"]], "DovetailTenon": [[561, "dovetailtenon"]], "DovetailTenon.ToString": [[562, "dovetailtenon-tostring"]], "DovetailTenon.add_subprocessing": [[563, "dovetailtenon-add-subprocessing"]], "DovetailTenon.apply": [[564, "dovetailtenon-apply"]], "DovetailTenon.copy": [[565, "dovetailtenon-copy"]], "DovetailTenon.define_dovetail_tool": [[566, "dovetailtenon-define-dovetail-tool"]], "DovetailTenon.dovetail_cutting_frames_from_params_and_beam": [[567, "dovetailtenon-dovetail-cutting-frames-from-params-and-beam"]], "DovetailTenon.dovetail_volume_from_params_and_beam": [[568, "dovetailtenon-dovetail-volume-from-params-and-beam"]], "DovetailTenon.frame_from_params_and_beam": [[569, "dovetailtenon-frame-from-params-and-beam"]], "DovetailTenon.from_json": [[570, "dovetailtenon-from-json"]], "DovetailTenon.from_jsonstring": [[571, "dovetailtenon-from-jsonstring"]], "DovetailTenon.from_plane_and_beam": [[572, "dovetailtenon-from-plane-and-beam"]], "DovetailTenon.scale": [[573, "dovetailtenon-scale"]], "DovetailTenon.scaled": [[574, "dovetailtenon-scaled"]], "DovetailTenon.sha256": [[575, "dovetailtenon-sha256"]], "DovetailTenon.to_json": [[576, "dovetailtenon-to-json"]], "DovetailTenon.to_jsonstring": [[577, "dovetailtenon-to-jsonstring"]], "DovetailTenon.validate_data": [[578, "dovetailtenon-validate-data"]], "Drilling": [[579, "drilling"]], "Drilling.ToString": [[580, "drilling-tostring"]], "Drilling.add_subprocessing": [[581, "drilling-add-subprocessing"]], "Drilling.apply": [[582, "drilling-apply"]], "Drilling.copy": [[583, "drilling-copy"]], "Drilling.cylinder_from_params_and_element": [[584, "drilling-cylinder-from-params-and-element"]], "Drilling.from_json": [[585, "drilling-from-json"]], "Drilling.from_jsonstring": [[586, "drilling-from-jsonstring"]], "Drilling.from_line_and_element": [[587, "drilling-from-line-and-element"]], "Drilling.from_shapes_and_element": [[588, "drilling-from-shapes-and-element"]], "Drilling.scale": [[589, "drilling-scale"]], "Drilling.scaled": [[590, "drilling-scaled"]], "Drilling.sha256": [[591, "drilling-sha256"]], "Drilling.to_json": [[592, "drilling-to-json"]], "Drilling.to_jsonstring": [[593, "drilling-to-jsonstring"]], "Drilling.validate_data": [[594, "drilling-validate-data"]], "EdgePositionType": [[595, "edgepositiontype"]], "FrenchRidgeLap": [[596, "frenchridgelap"]], "FrenchRidgeLap.ToString": [[597, "frenchridgelap-tostring"]], "FrenchRidgeLap.add_subprocessing": [[598, "frenchridgelap-add-subprocessing"]], "FrenchRidgeLap.apply": [[599, "frenchridgelap-apply"]], "FrenchRidgeLap.copy": [[600, "frenchridgelap-copy"]], "FrenchRidgeLap.frame_from_params_and_beam": [[601, "frenchridgelap-frame-from-params-and-beam"]], "FrenchRidgeLap.from_beam_beam_and_plane": [[602, "frenchridgelap-from-beam-beam-and-plane"]], "FrenchRidgeLap.from_json": [[603, "frenchridgelap-from-json"]], "FrenchRidgeLap.from_jsonstring": [[604, "frenchridgelap-from-jsonstring"]], "FrenchRidgeLap.lap_volume_from_params_and_beam": [[605, "frenchridgelap-lap-volume-from-params-and-beam"]], "FrenchRidgeLap.scale": [[606, "frenchridgelap-scale"]], "FrenchRidgeLap.scaled": [[607, "frenchridgelap-scaled"]], "FrenchRidgeLap.sha256": [[608, "frenchridgelap-sha256"]], "FrenchRidgeLap.to_json": [[609, "frenchridgelap-to-json"]], "FrenchRidgeLap.to_jsonstring": [[610, "frenchridgelap-to-jsonstring"]], "FrenchRidgeLap.validate_data": [[611, "frenchridgelap-validate-data"]], "JackRafterCut": [[612, "jackraftercut"]], "JackRafterCut.ToString": [[613, "jackraftercut-tostring"]], "JackRafterCut.add_subprocessing": [[614, "jackraftercut-add-subprocessing"]], "JackRafterCut.apply": [[615, "jackraftercut-apply"]], "JackRafterCut.copy": [[616, "jackraftercut-copy"]], "JackRafterCut.from_json": [[617, "jackraftercut-from-json"]], "JackRafterCut.from_jsonstring": [[618, "jackraftercut-from-jsonstring"]], "JackRafterCut.from_plane_and_beam": [[619, "jackraftercut-from-plane-and-beam"]], "JackRafterCut.from_shapes_and_element": [[620, "jackraftercut-from-shapes-and-element"]], "JackRafterCut.plane_from_params_and_beam": [[621, "jackraftercut-plane-from-params-and-beam"]], "JackRafterCut.scale": [[622, "jackraftercut-scale"]], "JackRafterCut.scaled": [[623, "jackraftercut-scaled"]], "JackRafterCut.sha256": [[624, "jackraftercut-sha256"]], "JackRafterCut.to_json": [[625, "jackraftercut-to-json"]], "JackRafterCut.to_jsonstring": [[626, "jackraftercut-to-jsonstring"]], "JackRafterCut.validate_data": [[627, "jackraftercut-validate-data"]], "Lap": [[628, "lap"]], "Lap.ToString": [[629, "lap-tostring"]], "Lap.add_subprocessing": [[630, "lap-add-subprocessing"]], "Lap.apply": [[631, "lap-apply"]], "Lap.copy": [[632, "lap-copy"]], "Lap.from_json": [[633, "lap-from-json"]], "Lap.from_jsonstring": [[634, "lap-from-jsonstring"]], "Lap.from_plane_and_beam": [[635, "lap-from-plane-and-beam"]], "Lap.from_shapes_and_element": [[636, "lap-from-shapes-and-element"]], "Lap.from_volume_and_beam": [[637, "lap-from-volume-and-beam"]], "Lap.scale": [[638, "lap-scale"]], "Lap.scaled": [[639, "lap-scaled"]], "Lap.sha256": [[640, "lap-sha256"]], "Lap.to_json": [[641, "lap-to-json"]], "Lap.to_jsonstring": [[642, "lap-to-jsonstring"]], "Lap.validate_data": [[643, "lap-validate-data"]], "Lap.volume_from_params_and_beam": [[644, "lap-volume-from-params-and-beam"]], "LimitationTopType": [[645, "limitationtoptype"]], "LongitudinalCut": [[646, "longitudinalcut"]], "LongitudinalCut.ToString": [[647, "longitudinalcut-tostring"]], "LongitudinalCut.add_subprocessing": [[648, "longitudinalcut-add-subprocessing"]], "LongitudinalCut.apply": [[649, "longitudinalcut-apply"]], "LongitudinalCut.copy": [[650, "longitudinalcut-copy"]], "LongitudinalCut.from_json": [[651, "longitudinalcut-from-json"]], "LongitudinalCut.from_jsonstring": [[652, "longitudinalcut-from-jsonstring"]], "LongitudinalCut.from_plane_and_beam": [[653, "longitudinalcut-from-plane-and-beam"]], "LongitudinalCut.from_shapes_and_element": [[654, "longitudinalcut-from-shapes-and-element"]], "LongitudinalCut.plane_from_params_and_beam": [[655, "longitudinalcut-plane-from-params-and-beam"]], "LongitudinalCut.scaled": [[656, "longitudinalcut-scaled"]], "LongitudinalCut.sha256": [[657, "longitudinalcut-sha256"]], "LongitudinalCut.to_json": [[658, "longitudinalcut-to-json"]], "LongitudinalCut.to_jsonstring": [[659, "longitudinalcut-to-jsonstring"]], "LongitudinalCut.validate_data": [[660, "longitudinalcut-validate-data"]], "LongitudinalCut.volume_from_params_and_beam": [[661, "longitudinalcut-volume-from-params-and-beam"]], "MachiningLimits": [[662, "machininglimits"]], "Mortise": [[663, "mortise"]], "Mortise.ToString": [[664, "mortise-tostring"]], "Mortise.add_subprocessing": [[665, "mortise-add-subprocessing"]], "Mortise.apply": [[666, "mortise-apply"]], "Mortise.copy": [[667, "mortise-copy"]], "Mortise.frame_from_params_and_beam": [[668, "mortise-frame-from-params-and-beam"]], "Mortise.from_frame_and_beam": [[669, "mortise-from-frame-and-beam"]], "Mortise.from_json": [[670, "mortise-from-json"]], "Mortise.from_jsonstring": [[671, "mortise-from-jsonstring"]], "Mortise.scale": [[672, "mortise-scale"]], "Mortise.scaled": [[673, "mortise-scaled"]], "Mortise.sha256": [[674, "mortise-sha256"]], "Mortise.to_json": [[675, "mortise-to-json"]], "Mortise.to_jsonstring": [[676, "mortise-to-jsonstring"]], "Mortise.validate_data": [[677, "mortise-validate-data"]], "Mortise.volume_from_params_and_beam": [[678, "mortise-volume-from-params-and-beam"]], "OrientationType": [[679, "orientationtype"]], "Pocket": [[680, "pocket"]], "Pocket.ToString": [[681, "pocket-tostring"]], "Pocket.add_subprocessing": [[682, "pocket-add-subprocessing"]], "Pocket.apply": [[683, "pocket-apply"]], "Pocket.copy": [[684, "pocket-copy"]], "Pocket.from_json": [[685, "pocket-from-json"]], "Pocket.from_jsonstring": [[686, "pocket-from-jsonstring"]], "Pocket.from_shapes_and_element": [[687, "pocket-from-shapes-and-element"]], "Pocket.from_volume_and_element": [[688, "pocket-from-volume-and-element"]], "Pocket.scale": [[689, "pocket-scale"]], "Pocket.scaled": [[690, "pocket-scaled"]], "Pocket.sha256": [[691, "pocket-sha256"]], "Pocket.to_json": [[692, "pocket-to-json"]], "Pocket.to_jsonstring": [[693, "pocket-to-jsonstring"]], "Pocket.validate_data": [[694, "pocket-validate-data"]], "Pocket.volume_from_params_and_element": [[695, "pocket-volume-from-params-and-element"]], "Slot": [[696, "slot"]], "Slot.ToString": [[697, "slot-tostring"]], "Slot.add_subprocessing": [[698, "slot-add-subprocessing"]], "Slot.apply": [[699, "slot-apply"]], "Slot.copy": [[700, "slot-copy"]], "Slot.from_json": [[701, "slot-from-json"]], "Slot.from_jsonstring": [[702, "slot-from-jsonstring"]], "Slot.from_plane_and_beam": [[703, "slot-from-plane-and-beam"]], "Slot.scale": [[704, "slot-scale"]], "Slot.scaled": [[705, "slot-scaled"]], "Slot.sha256": [[706, "slot-sha256"]], "Slot.to_json": [[707, "slot-to-json"]], "Slot.to_jsonstring": [[708, "slot-to-jsonstring"]], "Slot.validate_data": [[709, "slot-validate-data"]], "StepJoint": [[710, "stepjoint"]], "StepJoint.ToString": [[711, "stepjoint-tostring"]], "StepJoint.add_subprocessing": [[712, "stepjoint-add-subprocessing"]], "StepJoint.add_tenon": [[713, "stepjoint-add-tenon"]], "StepJoint.apply": [[714, "stepjoint-apply"]], "StepJoint.copy": [[715, "stepjoint-copy"]], "StepJoint.from_json": [[716, "stepjoint-from-json"]], "StepJoint.from_jsonstring": [[717, "stepjoint-from-jsonstring"]], "StepJoint.from_plane_and_beam": [[718, "stepjoint-from-plane-and-beam"]], "StepJoint.planes_from_params_and_beam": [[719, "stepjoint-planes-from-params-and-beam"]], "StepJoint.scale": [[720, "stepjoint-scale"]], "StepJoint.scaled": [[721, "stepjoint-scaled"]], "StepJoint.sha256": [[722, "stepjoint-sha256"]], "StepJoint.tenon_volume_from_params_and_beam": [[723, "stepjoint-tenon-volume-from-params-and-beam"]], "StepJoint.to_json": [[724, "stepjoint-to-json"]], "StepJoint.to_jsonstring": [[725, "stepjoint-to-jsonstring"]], "StepJoint.validate_data": [[726, "stepjoint-validate-data"]], "StepJointNotch": [[727, "stepjointnotch"]], "StepJointNotch.ToString": [[728, "stepjointnotch-tostring"]], "StepJointNotch.add_mortise": [[729, "stepjointnotch-add-mortise"]], "StepJointNotch.add_subprocessing": [[730, "stepjointnotch-add-subprocessing"]], "StepJointNotch.apply": [[731, "stepjointnotch-apply"]], "StepJointNotch.copy": [[732, "stepjointnotch-copy"]], "StepJointNotch.from_json": [[733, "stepjointnotch-from-json"]], "StepJointNotch.from_jsonstring": [[734, "stepjointnotch-from-jsonstring"]], "StepJointNotch.from_plane_and_beam": [[735, "stepjointnotch-from-plane-and-beam"]], "StepJointNotch.mortise_volume_from_params_and_beam": [[736, "stepjointnotch-mortise-volume-from-params-and-beam"]], "StepJointNotch.planes_from_params_and_beam": [[737, "stepjointnotch-planes-from-params-and-beam"]], "StepJointNotch.scale": [[738, "stepjointnotch-scale"]], "StepJointNotch.scaled": [[739, "stepjointnotch-scaled"]], "StepJointNotch.sha256": [[740, "stepjointnotch-sha256"]], "StepJointNotch.to_json": [[741, "stepjointnotch-to-json"]], "StepJointNotch.to_jsonstring": [[742, "stepjointnotch-to-jsonstring"]], "StepJointNotch.validate_data": [[743, "stepjointnotch-validate-data"]], "StepShapeType": [[744, "stepshapetype"]], "Tenon": [[745, "tenon"]], "Tenon.ToString": [[746, "tenon-tostring"]], "Tenon.add_subprocessing": [[747, "tenon-add-subprocessing"]], "Tenon.apply": [[748, "tenon-apply"]], "Tenon.copy": [[749, "tenon-copy"]], "Tenon.frame_from_params_and_beam": [[750, "tenon-frame-from-params-and-beam"]], "Tenon.from_json": [[751, "tenon-from-json"]], "Tenon.from_jsonstring": [[752, "tenon-from-jsonstring"]], "Tenon.from_plane_and_beam": [[753, "tenon-from-plane-and-beam"]], "Tenon.scale": [[754, "tenon-scale"]], "Tenon.scaled": [[755, "tenon-scaled"]], "Tenon.sha256": [[756, "tenon-sha256"]], "Tenon.to_json": [[757, "tenon-to-json"]], "Tenon.to_jsonstring": [[758, "tenon-to-jsonstring"]], "Tenon.validate_data": [[759, "tenon-validate-data"]], "Tenon.volume_from_params_and_beam": [[760, "tenon-volume-from-params-and-beam"]], "TenonShapeType": [[761, "tenonshapetype"]], "add_gh_param": [[762, "add-gh-param"]], "clear_gh_params": [[763, "clear-gh-params"]], "get_leaf_subclasses": [[764, "get-leaf-subclasses"]], "item_input_valid": [[765, "item-input-valid"]], "list_input_valid": [[766, "list-input-valid"]], "manage_dynamic_params": [[767, "manage-dynamic-params"]], "rename_gh_input": [[768, "rename-gh-input"]], "TimberModel": [[769, "timbermodel"]], "TimberModel.ToString": [[770, "timbermodel-tostring"]], "TimberModel.add_element": [[771, "timbermodel-add-element"]], "TimberModel.add_elements": [[772, "timbermodel-add-elements"]], "TimberModel.add_group": [[773, "timbermodel-add-group"]], "TimberModel.add_group_element": [[774, "timbermodel-add-group-element"]], "TimberModel.add_interaction": [[775, "timbermodel-add-interaction"]], "TimberModel.add_joint": [[776, "timbermodel-add-joint"]], "TimberModel.add_material": [[777, "timbermodel-add-material"]], "TimberModel.assign_material": [[778, "timbermodel-assign-material"]], "TimberModel.compute_aabb": [[779, "timbermodel-compute-aabb"]], "TimberModel.compute_obb": [[780, "timbermodel-compute-obb"]], "TimberModel.connect_adjacent_walls": [[781, "timbermodel-connect-adjacent-walls"]], "TimberModel.copy": [[782, "timbermodel-copy"]], "TimberModel.element_by_guid": [[783, "timbermodel-element-by-guid"]], "TimberModel.elements": [[784, "timbermodel-elements"]], "TimberModel.elements_connected_by": [[785, "timbermodel-elements-connected-by"]], "TimberModel.from_json": [[786, "timbermodel-from-json"]], "TimberModel.from_jsonstring": [[787, "timbermodel-from-jsonstring"]], "TimberModel.get_elements_in_group": [[788, "timbermodel-get-elements-in-group"]], "TimberModel.get_interactions_for_element": [[789, "timbermodel-get-interactions-for-element"]], "TimberModel.has_element": [[790, "timbermodel-has-element"]], "TimberModel.has_group": [[791, "timbermodel-has-group"]], "TimberModel.has_interaction": [[792, "timbermodel-has-interaction"]], "TimberModel.has_material": [[793, "timbermodel-has-material"]], "TimberModel.interactions": [[794, "timbermodel-interactions"]], "TimberModel.materials": [[795, "timbermodel-materials"]], "TimberModel.process_joinery": [[796, "timbermodel-process-joinery"]], "TimberModel.remove_element": [[797, "timbermodel-remove-element"]], "TimberModel.remove_interaction": [[798, "timbermodel-remove-interaction"]], "TimberModel.remove_joint": [[799, "timbermodel-remove-joint"]], "TimberModel.rotate": [[800, "timbermodel-rotate"]], "TimberModel.rotated": [[801, "timbermodel-rotated"]], "TimberModel.scale": [[802, "timbermodel-scale"]], "TimberModel.scaled": [[803, "timbermodel-scaled"]], "TimberModel.set_topologies": [[804, "timbermodel-set-topologies"]], "TimberModel.sha256": [[805, "timbermodel-sha256"]], "TimberModel.to_json": [[806, "timbermodel-to-json"]], "TimberModel.to_jsonstring": [[807, "timbermodel-to-jsonstring"]], "TimberModel.transform": [[808, "timbermodel-transform"]], "TimberModel.transform_numpy": [[809, "timbermodel-transform-numpy"]], "TimberModel.transformed": [[810, "timbermodel-transformed"]], "TimberModel.transformed_numpy": [[811, "timbermodel-transformed-numpy"]], "TimberModel.translate": [[812, "timbermodel-translate"]], "TimberModel.translated": [[813, "timbermodel-translated"]], "TimberModel.validate_data": [[814, "timbermodel-validate-data"]], "Actor": [[815, "actor"]], "Actor.get_name": [[816, "actor-get-name"]], "BuildingPlan": [[817, "buildingplan"]], "BuildingPlan.ToString": [[818, "buildingplan-tostring"]], "BuildingPlan.add_step": [[819, "buildingplan-add-step"]], "BuildingPlan.copy": [[820, "buildingplan-copy"]], "BuildingPlan.from_json": [[821, "buildingplan-from-json"]], "BuildingPlan.from_jsonstring": [[822, "buildingplan-from-jsonstring"]], "BuildingPlan.sha256": [[823, "buildingplan-sha256"]], "BuildingPlan.to_json": [[824, "buildingplan-to-json"]], "BuildingPlan.to_jsonstring": [[825, "buildingplan-to-jsonstring"]], "BuildingPlan.validate_data": [[826, "buildingplan-validate-data"]], "BuildingPlanParser": [[827, "buildingplanparser"]], "BuildingPlanParser.parse": [[828, "buildingplanparser-parse"]], "BuildingPlanParser.serialize": [[829, "buildingplanparser-serialize"]], "Instruction": [[830, "instruction"]], "Instruction.ToString": [[831, "instruction-tostring"]], "Instruction.copy": [[832, "instruction-copy"]], "Instruction.from_json": [[833, "instruction-from-json"]], "Instruction.from_jsonstring": [[834, "instruction-from-jsonstring"]], "Instruction.sha256": [[835, "instruction-sha256"]], "Instruction.to_json": [[836, "instruction-to-json"]], "Instruction.to_jsonstring": [[837, "instruction-to-jsonstring"]], "Instruction.transform": [[838, "instruction-transform"]], "Instruction.validate_data": [[839, "instruction-validate-data"]], "LinearDimension": [[840, "lineardimension"]], "LinearDimension.ToString": [[841, "lineardimension-tostring"]], "LinearDimension.copy": [[842, "lineardimension-copy"]], "LinearDimension.from_json": [[843, "lineardimension-from-json"]], "LinearDimension.from_jsonstring": [[844, "lineardimension-from-jsonstring"]], "LinearDimension.sha256": [[845, "lineardimension-sha256"]], "LinearDimension.to_json": [[846, "lineardimension-to-json"]], "LinearDimension.to_jsonstring": [[847, "lineardimension-to-jsonstring"]], "LinearDimension.transform": [[848, "lineardimension-transform"]], "LinearDimension.validate_data": [[849, "lineardimension-validate-data"]], "Model3d": [[850, "model3d"]], "Model3d.ToString": [[851, "model3d-tostring"]], "Model3d.copy": [[852, "model3d-copy"]], "Model3d.from_json": [[853, "model3d-from-json"]], "Model3d.from_jsonstring": [[854, "model3d-from-jsonstring"]], "Model3d.sha256": [[855, "model3d-sha256"]], "Model3d.to_json": [[856, "model3d-to-json"]], "Model3d.to_jsonstring": [[857, "model3d-to-jsonstring"]], "Model3d.transform": [[858, "model3d-transform"]], "Model3d.validate_data": [[859, "model3d-validate-data"]], "SimpleSequenceGenerator": [[860, "simplesequencegenerator"]], "Step": [[861, "step"]], "Step.ToString": [[862, "step-tostring"]], "Step.copy": [[863, "step-copy"]], "Step.from_json": [[864, "step-from-json"]], "Step.from_jsonstring": [[865, "step-from-jsonstring"]], "Step.sha256": [[866, "step-sha256"]], "Step.to_json": [[867, "step-to-json"]], "Step.to_jsonstring": [[868, "step-to-jsonstring"]], "Step.transform": [[869, "step-transform"]], "Step.validate_data": [[870, "step-validate-data"]], "Text3d": [[871, "text3d"]], "Text3d.ToString": [[872, "text3d-tostring"]], "Text3d.copy": [[873, "text3d-copy"]], "Text3d.from_json": [[874, "text3d-from-json"]], "Text3d.from_jsonstring": [[875, "text3d-from-jsonstring"]], "Text3d.sha256": [[876, "text3d-sha256"]], "Text3d.to_json": [[877, "text3d-to-json"]], "Text3d.to_jsonstring": [[878, "text3d-to-jsonstring"]], "Text3d.transform": [[879, "text3d-transform"]], "Text3d.validate_data": [[880, "text3d-validate-data"]], "Citing": [[882, "citing"]], "Examples": [[883, "examples"], [893, "examples"]], "Timber Assembly Examples": [[883, "timber-assembly-examples"]], "Create Joint": [[884, "create-joint"]], "COMPAS Timber Documentation": [[885, "compas-timber-documentation"]], "Dependencies": [[885, "dependencies"]], "Table of Contents": [[885, "table-of-contents"]], "Indices and tables": [[885, "indices-and-tables"]], "Installation": [[886, "installation"]], "User": [[886, "user"]], "Developer": [[886, "developer"]], "License": [[887, "license"]], "Grasshopper plugin": [[888, "grasshopper-plugin"]], "BTLx Contribution Guide": [[889, "btlx-contribution-guide"]], "Attributes": [[890, "attributes"]], "Standard Attributes": [[890, "standard-attributes"]], "Custom Attributes": [[890, "custom-attributes"]], "Check Attributes": [[890, "check-attributes"]], "Delete Attributes": [[890, "delete-attributes"]], "Beams": [[891, "beams"]], "DecomposeBeam": [[891, "decomposebeam"]], "FindBeamByRhinoGuid": [[891, "findbeambyrhinoguid"]], "Design": [[892, "design"]], "Surface Model": [[892, "surface-model"]], "Surface Model Options": [[892, "surface-model-options"]], "Custom Beam Dimensions": [[892, "custom-beam-dimensions"]], "Fabrication": [[894, "fabrication"]], "Write BTLx": [[894, "write-btlx"]], "Features": [[895, "features"]], "Jack Rafter Cut Feature": [[895, "jack-rafter-cut-feature"]], "Double Cut Feature": [[895, "double-cut-feature"]], "Drilling Feature": [[895, "drilling-feature"]], "Installation Guide": [[896, "installation-guide"]], "Rhino 8 Installation": [[896, "rhino-8-installation"]], "Rhino 7 Installation": [[896, "rhino-7-installation"]], "Troubleshooting": [[896, "troubleshooting"]], "Joint Rules": [[897, "joint-rules"]], "Joint Rules Components": [[897, "joint-rules-components"]], "Default Joint Rules": [[897, "default-joint-rules"]], "Topological Joint Rules": [[897, "topological-joint-rules"]], "Category Joint Rules": [[897, "category-joint-rules"]], "Direct Joint Rules": [[897, "direct-joint-rules"]], "Surface Model Joint Override": [[897, "surface-model-joint-override"]], "Joint Types": [[897, "joint-types"]], "L-Butt": [[897, "l-butt"]], "L-Lap": [[897, "l-lap"]], "L-Miter": [[897, "l-miter"]], "French Ridge Lap": [[897, "french-ridge-lap"]], "Tenon and Mortise": [[897, "tenon-and-mortise"], [897, "id1"]], "T-Butt": [[897, "t-butt"]], "T-Lap": [[897, "t-lap"]], "T-Step": [[897, "t-step"]], "T-Birdsmouth": [[897, "t-birdsmouth"]], "T-Dovetail": [[897, "t-dovetail"]], "X-Lap": [[897, "x-lap"]], "Summary Table": [[897, "summary-table"]], "Model": [[898, "model"]], "Show": [[899, "show"]], "Show Beam Face Index": [[899, "show-beam-face-index"]], "Show Beam Index": [[899, "show-beam-index"]], "Show Surface Model Beam Types": [[899, "show-surface-model-beam-types"]], "Show Feature Errors": [[899, "show-feature-errors"]], "Show Joining Errors": [[899, "show-joining-errors"]], "Show Joint Types": [[899, "show-joint-types"]], "Show Topology Types": [[899, "show-topology-types"]], "Utils": [[900, "utils"]], "Bake with BoxMap": [[900, "bake-with-boxmap"]], "Workflow": [[901, "workflow"]]}, "indexentries": {"ballnodejoint (class in compas_timber.connections)": [[10, "compas_timber.connections.BallNodeJoint"]], "tostring() (compas_timber.connections.ballnodejoint method)": [[11, "compas_timber.connections.BallNodeJoint.ToString"]], "add_extensions() (compas_timber.connections.ballnodejoint method)": [[12, "compas_timber.connections.BallNodeJoint.add_extensions"]], "add_features() (compas_timber.connections.ballnodejoint method)": [[13, "compas_timber.connections.BallNodeJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ballnodejoint method)": [[14, "compas_timber.connections.BallNodeJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ballnodejoint method)": [[15, "compas_timber.connections.BallNodeJoint.copy"]], "create() (compas_timber.connections.ballnodejoint class method)": [[16, "compas_timber.connections.BallNodeJoint.create"]], "element_count_complies() (compas_timber.connections.ballnodejoint class method)": [[17, "compas_timber.connections.BallNodeJoint.element_count_complies"]], "from_json() (compas_timber.connections.ballnodejoint class method)": [[18, "compas_timber.connections.BallNodeJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ballnodejoint class method)": [[19, "compas_timber.connections.BallNodeJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.ballnodejoint static method)": [[20, "compas_timber.connections.BallNodeJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.ballnodejoint static method)": [[21, "compas_timber.connections.BallNodeJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.ballnodejoint method)": [[22, "compas_timber.connections.BallNodeJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ballnodejoint method)": [[23, "compas_timber.connections.BallNodeJoint.sha256"]], "to_json() (compas_timber.connections.ballnodejoint method)": [[24, "compas_timber.connections.BallNodeJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ballnodejoint method)": [[25, "compas_timber.connections.BallNodeJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ballnodejoint class method)": [[26, "compas_timber.connections.BallNodeJoint.validate_data"]], "connectionsolver (class in compas_timber.connections)": [[27, "compas_timber.connections.ConnectionSolver"]], "find_intersecting_pairs() (compas_timber.connections.connectionsolver class method)": [[28, "compas_timber.connections.ConnectionSolver.find_intersecting_pairs"]], "find_topology() (compas_timber.connections.connectionsolver method)": [[29, "compas_timber.connections.ConnectionSolver.find_topology"]], "find_wall_wall_topology() (compas_timber.connections.connectionsolver method)": [[30, "compas_timber.connections.ConnectionSolver.find_wall_wall_topology"]], "joint (class in compas_timber.connections)": [[31, "compas_timber.connections.Joint"]], "tostring() (compas_timber.connections.joint method)": [[32, "compas_timber.connections.Joint.ToString"]], "add_extensions() (compas_timber.connections.joint method)": [[33, "compas_timber.connections.Joint.add_extensions"]], "add_features() (compas_timber.connections.joint method)": [[34, "compas_timber.connections.Joint.add_features"]], "check_elements_compatibility() (compas_timber.connections.joint method)": [[35, "compas_timber.connections.Joint.check_elements_compatibility"]], "copy() (compas_timber.connections.joint method)": [[36, "compas_timber.connections.Joint.copy"]], "create() (compas_timber.connections.joint class method)": [[37, "compas_timber.connections.Joint.create"]], "element_count_complies() (compas_timber.connections.joint class method)": [[38, "compas_timber.connections.Joint.element_count_complies"]], "from_json() (compas_timber.connections.joint class method)": [[39, "compas_timber.connections.Joint.from_json"]], "from_jsonstring() (compas_timber.connections.joint class method)": [[40, "compas_timber.connections.Joint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.joint static method)": [[41, "compas_timber.connections.Joint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.joint static method)": [[42, "compas_timber.connections.Joint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.joint method)": [[43, "compas_timber.connections.Joint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.joint method)": [[44, "compas_timber.connections.Joint.sha256"]], "to_json() (compas_timber.connections.joint method)": [[45, "compas_timber.connections.Joint.to_json"]], "to_jsonstring() (compas_timber.connections.joint method)": [[46, "compas_timber.connections.Joint.to_jsonstring"]], "validate_data() (compas_timber.connections.joint class method)": [[47, "compas_timber.connections.Joint.validate_data"]], "jointtopology (class in compas_timber.connections)": [[48, "compas_timber.connections.JointTopology"]], "get_name() (compas_timber.connections.jointtopology class method)": [[49, "compas_timber.connections.JointTopology.get_name"]], "lbuttjoint (class in compas_timber.connections)": [[50, "compas_timber.connections.LButtJoint"]], "tostring() (compas_timber.connections.lbuttjoint method)": [[51, "compas_timber.connections.LButtJoint.ToString"]], "add_extensions() (compas_timber.connections.lbuttjoint method)": [[52, "compas_timber.connections.LButtJoint.add_extensions"]], "add_features() (compas_timber.connections.lbuttjoint method)": [[53, "compas_timber.connections.LButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lbuttjoint method)": [[54, "compas_timber.connections.LButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lbuttjoint method)": [[55, "compas_timber.connections.LButtJoint.copy"]], "create() (compas_timber.connections.lbuttjoint class method)": [[56, "compas_timber.connections.LButtJoint.create"]], "element_count_complies() (compas_timber.connections.lbuttjoint class method)": [[57, "compas_timber.connections.LButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.lbuttjoint class method)": [[58, "compas_timber.connections.LButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lbuttjoint class method)": [[59, "compas_timber.connections.LButtJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lbuttjoint static method)": [[60, "compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lbuttjoint static method)": [[61, "compas_timber.connections.LButtJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lbuttjoint method)": [[62, "compas_timber.connections.LButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lbuttjoint method)": [[63, "compas_timber.connections.LButtJoint.sha256"]], "to_json() (compas_timber.connections.lbuttjoint method)": [[64, "compas_timber.connections.LButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lbuttjoint method)": [[65, "compas_timber.connections.LButtJoint.to_jsonstring"]], "update_beam_roles() (compas_timber.connections.lbuttjoint method)": [[66, "compas_timber.connections.LButtJoint.update_beam_roles"]], "validate_data() (compas_timber.connections.lbuttjoint class method)": [[67, "compas_timber.connections.LButtJoint.validate_data"]], "lfrenchridgelapjoint (class in compas_timber.connections)": [[68, "compas_timber.connections.LFrenchRidgeLapJoint"]], "tostring() (compas_timber.connections.lfrenchridgelapjoint method)": [[69, "compas_timber.connections.LFrenchRidgeLapJoint.ToString"]], "add_extensions() (compas_timber.connections.lfrenchridgelapjoint method)": [[70, "compas_timber.connections.LFrenchRidgeLapJoint.add_extensions"]], "add_features() (compas_timber.connections.lfrenchridgelapjoint method)": [[71, "compas_timber.connections.LFrenchRidgeLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lfrenchridgelapjoint method)": [[72, "compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lfrenchridgelapjoint method)": [[73, "compas_timber.connections.LFrenchRidgeLapJoint.copy"]], "create() (compas_timber.connections.lfrenchridgelapjoint class method)": [[74, "compas_timber.connections.LFrenchRidgeLapJoint.create"]], "element_count_complies() (compas_timber.connections.lfrenchridgelapjoint class method)": [[75, "compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lfrenchridgelapjoint class method)": [[76, "compas_timber.connections.LFrenchRidgeLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lfrenchridgelapjoint class method)": [[77, "compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lfrenchridgelapjoint static method)": [[78, "compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lfrenchridgelapjoint static method)": [[79, "compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lfrenchridgelapjoint method)": [[80, "compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lfrenchridgelapjoint method)": [[81, "compas_timber.connections.LFrenchRidgeLapJoint.sha256"]], "to_json() (compas_timber.connections.lfrenchridgelapjoint method)": [[82, "compas_timber.connections.LFrenchRidgeLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lfrenchridgelapjoint method)": [[83, "compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lfrenchridgelapjoint class method)": [[84, "compas_timber.connections.LFrenchRidgeLapJoint.validate_data"]], "llapjoint (class in compas_timber.connections)": [[85, "compas_timber.connections.LLapJoint"]], "tostring() (compas_timber.connections.llapjoint method)": [[86, "compas_timber.connections.LLapJoint.ToString"]], "add_extensions() (compas_timber.connections.llapjoint method)": [[87, "compas_timber.connections.LLapJoint.add_extensions"]], "add_features() (compas_timber.connections.llapjoint method)": [[88, "compas_timber.connections.LLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.llapjoint method)": [[89, "compas_timber.connections.LLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.llapjoint method)": [[90, "compas_timber.connections.LLapJoint.copy"]], "create() (compas_timber.connections.llapjoint class method)": [[91, "compas_timber.connections.LLapJoint.create"]], "element_count_complies() (compas_timber.connections.llapjoint class method)": [[92, "compas_timber.connections.LLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.llapjoint class method)": [[93, "compas_timber.connections.LLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.llapjoint class method)": [[94, "compas_timber.connections.LLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.llapjoint static method)": [[95, "compas_timber.connections.LLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.llapjoint static method)": [[96, "compas_timber.connections.LLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.llapjoint method)": [[97, "compas_timber.connections.LLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.llapjoint method)": [[98, "compas_timber.connections.LLapJoint.sha256"]], "to_json() (compas_timber.connections.llapjoint method)": [[99, "compas_timber.connections.LLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.llapjoint method)": [[100, "compas_timber.connections.LLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.llapjoint class method)": [[101, "compas_timber.connections.LLapJoint.validate_data"]], "lmiterjoint (class in compas_timber.connections)": [[102, "compas_timber.connections.LMiterJoint"]], "tostring() (compas_timber.connections.lmiterjoint method)": [[103, "compas_timber.connections.LMiterJoint.ToString"]], "add_extensions() (compas_timber.connections.lmiterjoint method)": [[104, "compas_timber.connections.LMiterJoint.add_extensions"]], "add_features() (compas_timber.connections.lmiterjoint method)": [[105, "compas_timber.connections.LMiterJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lmiterjoint method)": [[106, "compas_timber.connections.LMiterJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lmiterjoint method)": [[107, "compas_timber.connections.LMiterJoint.copy"]], "create() (compas_timber.connections.lmiterjoint class method)": [[108, "compas_timber.connections.LMiterJoint.create"]], "element_count_complies() (compas_timber.connections.lmiterjoint class method)": [[109, "compas_timber.connections.LMiterJoint.element_count_complies"]], "from_json() (compas_timber.connections.lmiterjoint class method)": [[110, "compas_timber.connections.LMiterJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lmiterjoint class method)": [[111, "compas_timber.connections.LMiterJoint.from_jsonstring"]], "get_cutoff_plane() (compas_timber.connections.lmiterjoint method)": [[112, "compas_timber.connections.LMiterJoint.get_cutoff_plane"]], "get_cutting_planes() (compas_timber.connections.lmiterjoint method)": [[113, "compas_timber.connections.LMiterJoint.get_cutting_planes"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lmiterjoint static method)": [[114, "compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lmiterjoint static method)": [[115, "compas_timber.connections.LMiterJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lmiterjoint method)": [[116, "compas_timber.connections.LMiterJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lmiterjoint method)": [[117, "compas_timber.connections.LMiterJoint.sha256"]], "to_json() (compas_timber.connections.lmiterjoint method)": [[118, "compas_timber.connections.LMiterJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lmiterjoint method)": [[119, "compas_timber.connections.LMiterJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lmiterjoint class method)": [[120, "compas_timber.connections.LMiterJoint.validate_data"]], "lapjoint (class in compas_timber.connections)": [[121, "compas_timber.connections.LapJoint"]], "tostring() (compas_timber.connections.lapjoint method)": [[122, "compas_timber.connections.LapJoint.ToString"]], "add_extensions() (compas_timber.connections.lapjoint method)": [[123, "compas_timber.connections.LapJoint.add_extensions"]], "add_features() (compas_timber.connections.lapjoint method)": [[124, "compas_timber.connections.LapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lapjoint method)": [[125, "compas_timber.connections.LapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lapjoint method)": [[126, "compas_timber.connections.LapJoint.copy"]], "create() (compas_timber.connections.lapjoint class method)": [[127, "compas_timber.connections.LapJoint.create"]], "element_count_complies() (compas_timber.connections.lapjoint class method)": [[128, "compas_timber.connections.LapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lapjoint class method)": [[129, "compas_timber.connections.LapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lapjoint class method)": [[130, "compas_timber.connections.LapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lapjoint static method)": [[131, "compas_timber.connections.LapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lapjoint static method)": [[132, "compas_timber.connections.LapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lapjoint method)": [[133, "compas_timber.connections.LapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lapjoint method)": [[134, "compas_timber.connections.LapJoint.sha256"]], "to_json() (compas_timber.connections.lapjoint method)": [[135, "compas_timber.connections.LapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lapjoint method)": [[136, "compas_timber.connections.LapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lapjoint class method)": [[137, "compas_timber.connections.LapJoint.validate_data"]], "nulljoint (class in compas_timber.connections)": [[138, "compas_timber.connections.NullJoint"]], "tostring() (compas_timber.connections.nulljoint method)": [[139, "compas_timber.connections.NullJoint.ToString"]], "add_extensions() (compas_timber.connections.nulljoint method)": [[140, "compas_timber.connections.NullJoint.add_extensions"]], "add_features() (compas_timber.connections.nulljoint method)": [[141, "compas_timber.connections.NullJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.nulljoint method)": [[142, "compas_timber.connections.NullJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.nulljoint method)": [[143, "compas_timber.connections.NullJoint.copy"]], "create() (compas_timber.connections.nulljoint class method)": [[144, "compas_timber.connections.NullJoint.create"]], "element_count_complies() (compas_timber.connections.nulljoint class method)": [[145, "compas_timber.connections.NullJoint.element_count_complies"]], "from_json() (compas_timber.connections.nulljoint class method)": [[146, "compas_timber.connections.NullJoint.from_json"]], "from_jsonstring() (compas_timber.connections.nulljoint class method)": [[147, "compas_timber.connections.NullJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.nulljoint static method)": [[148, "compas_timber.connections.NullJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.nulljoint static method)": [[149, "compas_timber.connections.NullJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.nulljoint method)": [[150, "compas_timber.connections.NullJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.nulljoint method)": [[151, "compas_timber.connections.NullJoint.sha256"]], "to_json() (compas_timber.connections.nulljoint method)": [[152, "compas_timber.connections.NullJoint.to_json"]], "to_jsonstring() (compas_timber.connections.nulljoint method)": [[153, "compas_timber.connections.NullJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.nulljoint class method)": [[154, "compas_timber.connections.NullJoint.validate_data"]], "tbirdsmouthjoint (class in compas_timber.connections)": [[155, "compas_timber.connections.TBirdsmouthJoint"]], "tostring() (compas_timber.connections.tbirdsmouthjoint method)": [[156, "compas_timber.connections.TBirdsmouthJoint.ToString"]], "add_extensions() (compas_timber.connections.tbirdsmouthjoint method)": [[157, "compas_timber.connections.TBirdsmouthJoint.add_extensions"]], "add_features() (compas_timber.connections.tbirdsmouthjoint method)": [[158, "compas_timber.connections.TBirdsmouthJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbirdsmouthjoint method)": [[159, "compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbirdsmouthjoint method)": [[160, "compas_timber.connections.TBirdsmouthJoint.copy"]], "create() (compas_timber.connections.tbirdsmouthjoint class method)": [[161, "compas_timber.connections.TBirdsmouthJoint.create"]], "element_count_complies() (compas_timber.connections.tbirdsmouthjoint class method)": [[162, "compas_timber.connections.TBirdsmouthJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbirdsmouthjoint class method)": [[163, "compas_timber.connections.TBirdsmouthJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbirdsmouthjoint class method)": [[164, "compas_timber.connections.TBirdsmouthJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tbirdsmouthjoint static method)": [[165, "compas_timber.connections.TBirdsmouthJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tbirdsmouthjoint static method)": [[166, "compas_timber.connections.TBirdsmouthJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tbirdsmouthjoint method)": [[167, "compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbirdsmouthjoint method)": [[168, "compas_timber.connections.TBirdsmouthJoint.sha256"]], "to_json() (compas_timber.connections.tbirdsmouthjoint method)": [[169, "compas_timber.connections.TBirdsmouthJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbirdsmouthjoint method)": [[170, "compas_timber.connections.TBirdsmouthJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbirdsmouthjoint class method)": [[171, "compas_timber.connections.TBirdsmouthJoint.validate_data"]], "tbuttjoint (class in compas_timber.connections)": [[172, "compas_timber.connections.TButtJoint"]], "tostring() (compas_timber.connections.tbuttjoint method)": [[173, "compas_timber.connections.TButtJoint.ToString"]], "add_extensions() (compas_timber.connections.tbuttjoint method)": [[174, "compas_timber.connections.TButtJoint.add_extensions"]], "add_features() (compas_timber.connections.tbuttjoint method)": [[175, "compas_timber.connections.TButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbuttjoint method)": [[176, "compas_timber.connections.TButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbuttjoint method)": [[177, "compas_timber.connections.TButtJoint.copy"]], "create() (compas_timber.connections.tbuttjoint class method)": [[178, "compas_timber.connections.TButtJoint.create"]], "element_count_complies() (compas_timber.connections.tbuttjoint class method)": [[179, "compas_timber.connections.TButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbuttjoint class method)": [[180, "compas_timber.connections.TButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbuttjoint class method)": [[181, "compas_timber.connections.TButtJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tbuttjoint static method)": [[182, "compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tbuttjoint static method)": [[183, "compas_timber.connections.TButtJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tbuttjoint method)": [[184, "compas_timber.connections.TButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbuttjoint method)": [[185, "compas_timber.connections.TButtJoint.sha256"]], "to_json() (compas_timber.connections.tbuttjoint method)": [[186, "compas_timber.connections.TButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbuttjoint method)": [[187, "compas_timber.connections.TButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbuttjoint class method)": [[188, "compas_timber.connections.TButtJoint.validate_data"]], "tdovetailjoint (class in compas_timber.connections)": [[189, "compas_timber.connections.TDovetailJoint"]], "tostring() (compas_timber.connections.tdovetailjoint method)": [[190, "compas_timber.connections.TDovetailJoint.ToString"]], "add_extensions() (compas_timber.connections.tdovetailjoint method)": [[191, "compas_timber.connections.TDovetailJoint.add_extensions"]], "add_features() (compas_timber.connections.tdovetailjoint method)": [[192, "compas_timber.connections.TDovetailJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tdovetailjoint method)": [[193, "compas_timber.connections.TDovetailJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tdovetailjoint method)": [[194, "compas_timber.connections.TDovetailJoint.copy"]], "create() (compas_timber.connections.tdovetailjoint class method)": [[195, "compas_timber.connections.TDovetailJoint.create"]], "define_dovetail_tool() (compas_timber.connections.tdovetailjoint method)": [[196, "compas_timber.connections.TDovetailJoint.define_dovetail_tool"]], "element_count_complies() (compas_timber.connections.tdovetailjoint class method)": [[197, "compas_timber.connections.TDovetailJoint.element_count_complies"]], "from_json() (compas_timber.connections.tdovetailjoint class method)": [[198, "compas_timber.connections.TDovetailJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tdovetailjoint class method)": [[199, "compas_timber.connections.TDovetailJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tdovetailjoint static method)": [[200, "compas_timber.connections.TDovetailJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tdovetailjoint static method)": [[201, "compas_timber.connections.TDovetailJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tdovetailjoint method)": [[202, "compas_timber.connections.TDovetailJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tdovetailjoint method)": [[203, "compas_timber.connections.TDovetailJoint.sha256"]], "to_json() (compas_timber.connections.tdovetailjoint method)": [[204, "compas_timber.connections.TDovetailJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tdovetailjoint method)": [[205, "compas_timber.connections.TDovetailJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tdovetailjoint class method)": [[206, "compas_timber.connections.TDovetailJoint.validate_data"]], "tlapjoint (class in compas_timber.connections)": [[207, "compas_timber.connections.TLapJoint"]], "tostring() (compas_timber.connections.tlapjoint method)": [[208, "compas_timber.connections.TLapJoint.ToString"]], "add_extensions() (compas_timber.connections.tlapjoint method)": [[209, "compas_timber.connections.TLapJoint.add_extensions"]], "add_features() (compas_timber.connections.tlapjoint method)": [[210, "compas_timber.connections.TLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tlapjoint method)": [[211, "compas_timber.connections.TLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tlapjoint method)": [[212, "compas_timber.connections.TLapJoint.copy"]], "create() (compas_timber.connections.tlapjoint class method)": [[213, "compas_timber.connections.TLapJoint.create"]], "element_count_complies() (compas_timber.connections.tlapjoint class method)": [[214, "compas_timber.connections.TLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.tlapjoint class method)": [[215, "compas_timber.connections.TLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tlapjoint class method)": [[216, "compas_timber.connections.TLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tlapjoint static method)": [[217, "compas_timber.connections.TLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tlapjoint static method)": [[218, "compas_timber.connections.TLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tlapjoint method)": [[219, "compas_timber.connections.TLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tlapjoint method)": [[220, "compas_timber.connections.TLapJoint.sha256"]], "to_json() (compas_timber.connections.tlapjoint method)": [[221, "compas_timber.connections.TLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tlapjoint method)": [[222, "compas_timber.connections.TLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tlapjoint class method)": [[223, "compas_timber.connections.TLapJoint.validate_data"]], "tstepjoint (class in compas_timber.connections)": [[224, "compas_timber.connections.TStepJoint"]], "tostring() (compas_timber.connections.tstepjoint method)": [[225, "compas_timber.connections.TStepJoint.ToString"]], "add_extensions() (compas_timber.connections.tstepjoint method)": [[226, "compas_timber.connections.TStepJoint.add_extensions"]], "add_features() (compas_timber.connections.tstepjoint method)": [[227, "compas_timber.connections.TStepJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tstepjoint method)": [[228, "compas_timber.connections.TStepJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tstepjoint method)": [[229, "compas_timber.connections.TStepJoint.copy"]], "create() (compas_timber.connections.tstepjoint class method)": [[230, "compas_timber.connections.TStepJoint.create"]], "element_count_complies() (compas_timber.connections.tstepjoint class method)": [[231, "compas_timber.connections.TStepJoint.element_count_complies"]], "from_json() (compas_timber.connections.tstepjoint class method)": [[232, "compas_timber.connections.TStepJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tstepjoint class method)": [[233, "compas_timber.connections.TStepJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tstepjoint static method)": [[234, "compas_timber.connections.TStepJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tstepjoint static method)": [[235, "compas_timber.connections.TStepJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tstepjoint method)": [[236, "compas_timber.connections.TStepJoint.restore_beams_from_keys"]], "set_step_depths() (compas_timber.connections.tstepjoint method)": [[237, "compas_timber.connections.TStepJoint.set_step_depths"]], "sha256() (compas_timber.connections.tstepjoint method)": [[238, "compas_timber.connections.TStepJoint.sha256"]], "to_json() (compas_timber.connections.tstepjoint method)": [[239, "compas_timber.connections.TStepJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tstepjoint method)": [[240, "compas_timber.connections.TStepJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tstepjoint class method)": [[241, "compas_timber.connections.TStepJoint.validate_data"]], "tenonmortisejoint (class in compas_timber.connections)": [[242, "compas_timber.connections.TenonMortiseJoint"]], "tostring() (compas_timber.connections.tenonmortisejoint method)": [[243, "compas_timber.connections.TenonMortiseJoint.ToString"]], "add_extensions() (compas_timber.connections.tenonmortisejoint method)": [[244, "compas_timber.connections.TenonMortiseJoint.add_extensions"]], "add_features() (compas_timber.connections.tenonmortisejoint method)": [[245, "compas_timber.connections.TenonMortiseJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tenonmortisejoint method)": [[246, "compas_timber.connections.TenonMortiseJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tenonmortisejoint method)": [[247, "compas_timber.connections.TenonMortiseJoint.copy"]], "create() (compas_timber.connections.tenonmortisejoint class method)": [[248, "compas_timber.connections.TenonMortiseJoint.create"]], "element_count_complies() (compas_timber.connections.tenonmortisejoint class method)": [[249, "compas_timber.connections.TenonMortiseJoint.element_count_complies"]], "from_json() (compas_timber.connections.tenonmortisejoint class method)": [[250, "compas_timber.connections.TenonMortiseJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tenonmortisejoint class method)": [[251, "compas_timber.connections.TenonMortiseJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tenonmortisejoint static method)": [[252, "compas_timber.connections.TenonMortiseJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tenonmortisejoint static method)": [[253, "compas_timber.connections.TenonMortiseJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tenonmortisejoint method)": [[254, "compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys"]], "set_default_values() (compas_timber.connections.tenonmortisejoint method)": [[255, "compas_timber.connections.TenonMortiseJoint.set_default_values"]], "sha256() (compas_timber.connections.tenonmortisejoint method)": [[256, "compas_timber.connections.TenonMortiseJoint.sha256"]], "to_json() (compas_timber.connections.tenonmortisejoint method)": [[257, "compas_timber.connections.TenonMortiseJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tenonmortisejoint method)": [[258, "compas_timber.connections.TenonMortiseJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tenonmortisejoint class method)": [[259, "compas_timber.connections.TenonMortiseJoint.validate_data"]], "xlapjoint (class in compas_timber.connections)": [[260, "compas_timber.connections.XLapJoint"]], "tostring() (compas_timber.connections.xlapjoint method)": [[261, "compas_timber.connections.XLapJoint.ToString"]], "add_extensions() (compas_timber.connections.xlapjoint method)": [[262, "compas_timber.connections.XLapJoint.add_extensions"]], "add_features() (compas_timber.connections.xlapjoint method)": [[263, "compas_timber.connections.XLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xlapjoint method)": [[264, "compas_timber.connections.XLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xlapjoint method)": [[265, "compas_timber.connections.XLapJoint.copy"]], "create() (compas_timber.connections.xlapjoint class method)": [[266, "compas_timber.connections.XLapJoint.create"]], "element_count_complies() (compas_timber.connections.xlapjoint class method)": [[267, "compas_timber.connections.XLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.xlapjoint class method)": [[268, "compas_timber.connections.XLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xlapjoint class method)": [[269, "compas_timber.connections.XLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.xlapjoint static method)": [[270, "compas_timber.connections.XLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.xlapjoint static method)": [[271, "compas_timber.connections.XLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.xlapjoint method)": [[272, "compas_timber.connections.XLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xlapjoint method)": [[273, "compas_timber.connections.XLapJoint.sha256"]], "to_json() (compas_timber.connections.xlapjoint method)": [[274, "compas_timber.connections.XLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xlapjoint method)": [[275, "compas_timber.connections.XLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xlapjoint class method)": [[276, "compas_timber.connections.XLapJoint.validate_data"]], "xnotchjoint (class in compas_timber.connections)": [[277, "compas_timber.connections.XNotchJoint"]], "tostring() (compas_timber.connections.xnotchjoint method)": [[278, "compas_timber.connections.XNotchJoint.ToString"]], "add_extensions() (compas_timber.connections.xnotchjoint method)": [[279, "compas_timber.connections.XNotchJoint.add_extensions"]], "add_features() (compas_timber.connections.xnotchjoint method)": [[280, "compas_timber.connections.XNotchJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xnotchjoint method)": [[281, "compas_timber.connections.XNotchJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xnotchjoint method)": [[282, "compas_timber.connections.XNotchJoint.copy"]], "create() (compas_timber.connections.xnotchjoint class method)": [[283, "compas_timber.connections.XNotchJoint.create"]], "element_count_complies() (compas_timber.connections.xnotchjoint class method)": [[284, "compas_timber.connections.XNotchJoint.element_count_complies"]], "from_json() (compas_timber.connections.xnotchjoint class method)": [[285, "compas_timber.connections.XNotchJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xnotchjoint class method)": [[286, "compas_timber.connections.XNotchJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.xnotchjoint static method)": [[287, "compas_timber.connections.XNotchJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.xnotchjoint static method)": [[288, "compas_timber.connections.XNotchJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.xnotchjoint method)": [[289, "compas_timber.connections.XNotchJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xnotchjoint method)": [[290, "compas_timber.connections.XNotchJoint.sha256"]], "to_json() (compas_timber.connections.xnotchjoint method)": [[291, "compas_timber.connections.XNotchJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xnotchjoint method)": [[292, "compas_timber.connections.XNotchJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xnotchjoint class method)": [[293, "compas_timber.connections.XNotchJoint.validate_data"]], "ybuttjoint (class in compas_timber.connections)": [[294, "compas_timber.connections.YButtJoint"]], "tostring() (compas_timber.connections.ybuttjoint method)": [[295, "compas_timber.connections.YButtJoint.ToString"]], "add_extensions() (compas_timber.connections.ybuttjoint method)": [[296, "compas_timber.connections.YButtJoint.add_extensions"]], "add_features() (compas_timber.connections.ybuttjoint method)": [[297, "compas_timber.connections.YButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ybuttjoint method)": [[298, "compas_timber.connections.YButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ybuttjoint method)": [[299, "compas_timber.connections.YButtJoint.copy"]], "create() (compas_timber.connections.ybuttjoint class method)": [[300, "compas_timber.connections.YButtJoint.create"]], "cross_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[301, "compas_timber.connections.YButtJoint.cross_beam_ref_side_index"]], "element_count_complies() (compas_timber.connections.ybuttjoint class method)": [[302, "compas_timber.connections.YButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.ybuttjoint class method)": [[303, "compas_timber.connections.YButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ybuttjoint class method)": [[304, "compas_timber.connections.YButtJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.ybuttjoint static method)": [[305, "compas_timber.connections.YButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.ybuttjoint static method)": [[306, "compas_timber.connections.YButtJoint.get_face_most_towards_beam"]], "get_miter_planes() (compas_timber.connections.ybuttjoint method)": [[307, "compas_timber.connections.YButtJoint.get_miter_planes"]], "main_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[308, "compas_timber.connections.YButtJoint.main_beam_ref_side_index"]], "restore_beams_from_keys() (compas_timber.connections.ybuttjoint method)": [[309, "compas_timber.connections.YButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ybuttjoint method)": [[310, "compas_timber.connections.YButtJoint.sha256"]], "to_json() (compas_timber.connections.ybuttjoint method)": [[311, "compas_timber.connections.YButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ybuttjoint method)": [[312, "compas_timber.connections.YButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ybuttjoint class method)": [[313, "compas_timber.connections.YButtJoint.validate_data"]], "find_neighboring_elements() (in module compas_timber.connections)": [[314, "compas_timber.connections.find_neighboring_elements"]], "categoryrule (class in compas_timber.design)": [[315, "compas_timber.design.CategoryRule"]], "tostring() (compas_timber.design.categoryrule method)": [[316, "compas_timber.design.CategoryRule.ToString"]], "comply() (compas_timber.design.categoryrule method)": [[317, "compas_timber.design.CategoryRule.comply"]], "get_category_rules() (compas_timber.design.categoryrule static method)": [[318, "compas_timber.design.CategoryRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.categoryrule static method)": [[319, "compas_timber.design.CategoryRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.categoryrule static method)": [[320, "compas_timber.design.CategoryRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.categoryrule static method)": [[321, "compas_timber.design.CategoryRule.joints_from_beams_and_rules"]], "reorder() (compas_timber.design.categoryrule method)": [[322, "compas_timber.design.CategoryRule.reorder"]], "debuginfomation (class in compas_timber.design)": [[323, "compas_timber.design.DebugInfomation"]], "tostring() (compas_timber.design.debuginfomation method)": [[324, "compas_timber.design.DebugInfomation.ToString"]], "add_fastener_error() (compas_timber.design.debuginfomation method)": [[325, "compas_timber.design.DebugInfomation.add_fastener_error"]], "add_feature_error() (compas_timber.design.debuginfomation method)": [[326, "compas_timber.design.DebugInfomation.add_feature_error"]], "add_joint_error() (compas_timber.design.debuginfomation method)": [[327, "compas_timber.design.DebugInfomation.add_joint_error"]], "directrule (class in compas_timber.design)": [[328, "compas_timber.design.DirectRule"]], "tostring() (compas_timber.design.directrule method)": [[329, "compas_timber.design.DirectRule.ToString"]], "comply() (compas_timber.design.directrule method)": [[330, "compas_timber.design.DirectRule.comply"]], "contains() (compas_timber.design.directrule method)": [[331, "compas_timber.design.DirectRule.contains"]], "get_category_rules() (compas_timber.design.directrule static method)": [[332, "compas_timber.design.DirectRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.directrule static method)": [[333, "compas_timber.design.DirectRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.directrule static method)": [[334, "compas_timber.design.DirectRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.directrule static method)": [[335, "compas_timber.design.DirectRule.joints_from_beams_and_rules"]], "featuredefinition (class in compas_timber.design)": [[336, "compas_timber.design.FeatureDefinition"]], "tostring() (compas_timber.design.featuredefinition method)": [[337, "compas_timber.design.FeatureDefinition.ToString"]], "jointdefinition (class in compas_timber.design)": [[338, "compas_timber.design.JointDefinition"]], "tostring() (compas_timber.design.jointdefinition method)": [[339, "compas_timber.design.JointDefinition.ToString"]], "is_identical() (compas_timber.design.jointdefinition method)": [[340, "compas_timber.design.JointDefinition.is_identical"]], "match() (compas_timber.design.jointdefinition method)": [[341, "compas_timber.design.JointDefinition.match"]], "jointrule (class in compas_timber.design)": [[342, "compas_timber.design.JointRule"]], "comply() (compas_timber.design.jointrule method)": [[343, "compas_timber.design.JointRule.comply"]], "get_category_rules() (compas_timber.design.jointrule static method)": [[344, "compas_timber.design.JointRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.jointrule static method)": [[345, "compas_timber.design.JointRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.jointrule static method)": [[346, "compas_timber.design.JointRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.jointrule static method)": [[347, "compas_timber.design.JointRule.joints_from_beams_and_rules"]], "surfacemodel (class in compas_timber.design)": [[348, "compas_timber.design.SurfaceModel"]], "beam_category_names() (compas_timber.design.surfacemodel class method)": [[349, "compas_timber.design.SurfaceModel.beam_category_names"]], "create_model() (compas_timber.design.surfacemodel method)": [[350, "compas_timber.design.SurfaceModel.create_model"]], "cull_overlaps() (compas_timber.design.surfacemodel method)": [[351, "compas_timber.design.SurfaceModel.cull_overlaps"]], "distance_between_elements() (compas_timber.design.surfacemodel method)": [[352, "compas_timber.design.SurfaceModel.distance_between_elements"]], "generate_frame() (compas_timber.design.surfacemodel method)": [[353, "compas_timber.design.SurfaceModel.generate_frame"]], "generate_perimeter_beams() (compas_timber.design.surfacemodel method)": [[354, "compas_timber.design.SurfaceModel.generate_perimeter_beams"]], "generate_plates() (compas_timber.design.surfacemodel method)": [[355, "compas_timber.design.SurfaceModel.generate_plates"]], "generate_stud_lines() (compas_timber.design.surfacemodel method)": [[356, "compas_timber.design.SurfaceModel.generate_stud_lines"]], "generate_studs() (compas_timber.design.surfacemodel method)": [[357, "compas_timber.design.SurfaceModel.generate_studs"]], "generate_windows() (compas_timber.design.surfacemodel method)": [[358, "compas_timber.design.SurfaceModel.generate_windows"]], "get_beam_intersections() (compas_timber.design.surfacemodel method)": [[359, "compas_timber.design.SurfaceModel.get_beam_intersections"]], "get_interior_segment_indices() (compas_timber.design.surfacemodel method)": [[360, "compas_timber.design.SurfaceModel.get_interior_segment_indices"]], "offset_elements() (compas_timber.design.surfacemodel method)": [[361, "compas_timber.design.SurfaceModel.offset_elements"]], "parse_loops() (compas_timber.design.surfacemodel method)": [[362, "compas_timber.design.SurfaceModel.parse_loops"]], "trim_jack_studs() (compas_timber.design.surfacemodel method)": [[363, "compas_timber.design.SurfaceModel.trim_jack_studs"]], "trim_king_studs() (compas_timber.design.surfacemodel method)": [[364, "compas_timber.design.SurfaceModel.trim_king_studs"]], "trim_studs() (compas_timber.design.surfacemodel method)": [[365, "compas_timber.design.SurfaceModel.trim_studs"]], "topologyrule (class in compas_timber.design)": [[366, "compas_timber.design.TopologyRule"]], "tostring() (compas_timber.design.topologyrule method)": [[367, "compas_timber.design.TopologyRule.ToString"]], "comply() (compas_timber.design.topologyrule method)": [[368, "compas_timber.design.TopologyRule.comply"]], "get_category_rules() (compas_timber.design.topologyrule static method)": [[369, "compas_timber.design.TopologyRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.topologyrule static method)": [[370, "compas_timber.design.TopologyRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.topologyrule static method)": [[371, "compas_timber.design.TopologyRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.topologyrule static method)": [[372, "compas_timber.design.TopologyRule.joints_from_beams_and_rules"]], "guess_joint_topology_2beams() (in module compas_timber.design)": [[373, "compas_timber.design.guess_joint_topology_2beams"]], "set_default_joints() (in module compas_timber.design)": [[374, "compas_timber.design.set_default_joints"]], "beam (class in compas_timber.elements)": [[375, "compas_timber.elements.Beam"]], "tostring() (compas_timber.elements.beam method)": [[376, "compas_timber.elements.Beam.ToString"]], "add_blank_extension() (compas_timber.elements.beam method)": [[377, "compas_timber.elements.Beam.add_blank_extension"]], "add_feature() (compas_timber.elements.beam method)": [[378, "compas_timber.elements.Beam.add_feature"]], "add_features() (compas_timber.elements.beam method)": [[379, "compas_timber.elements.Beam.add_features"]], "back_side() (compas_timber.elements.beam method)": [[380, "compas_timber.elements.Beam.back_side"]], "compute_aabb() (compas_timber.elements.beam method)": [[381, "compas_timber.elements.Beam.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.beam method)": [[382, "compas_timber.elements.Beam.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.beam method)": [[383, "compas_timber.elements.Beam.compute_geometry"]], "compute_obb() (compas_timber.elements.beam method)": [[384, "compas_timber.elements.Beam.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.beam method)": [[385, "compas_timber.elements.Beam.compute_worldtransformation"]], "copy() (compas_timber.elements.beam method)": [[386, "compas_timber.elements.Beam.copy"]], "endpoint_closest_to_point() (compas_timber.elements.beam method)": [[387, "compas_timber.elements.Beam.endpoint_closest_to_point"]], "extension_to_plane() (compas_timber.elements.beam method)": [[388, "compas_timber.elements.Beam.extension_to_plane"]], "from_centerline() (compas_timber.elements.beam class method)": [[389, "compas_timber.elements.Beam.from_centerline"]], "from_endpoints() (compas_timber.elements.beam class method)": [[390, "compas_timber.elements.Beam.from_endpoints"]], "from_json() (compas_timber.elements.beam class method)": [[391, "compas_timber.elements.Beam.from_json"]], "from_jsonstring() (compas_timber.elements.beam class method)": [[392, "compas_timber.elements.Beam.from_jsonstring"]], "front_side() (compas_timber.elements.beam method)": [[393, "compas_timber.elements.Beam.front_side"]], "get_dimensions_relative_to_side() (compas_timber.elements.beam method)": [[394, "compas_timber.elements.Beam.get_dimensions_relative_to_side"]], "opp_side() (compas_timber.elements.beam method)": [[395, "compas_timber.elements.Beam.opp_side"]], "remove_blank_extension() (compas_timber.elements.beam method)": [[396, "compas_timber.elements.Beam.remove_blank_extension"]], "remove_features() (compas_timber.elements.beam method)": [[397, "compas_timber.elements.Beam.remove_features"]], "reset() (compas_timber.elements.beam method)": [[398, "compas_timber.elements.Beam.reset"]], "sha256() (compas_timber.elements.beam method)": [[399, "compas_timber.elements.Beam.sha256"]], "side_as_surface() (compas_timber.elements.beam method)": [[400, "compas_timber.elements.Beam.side_as_surface"]], "to_json() (compas_timber.elements.beam method)": [[401, "compas_timber.elements.Beam.to_json"]], "to_jsonstring() (compas_timber.elements.beam method)": [[402, "compas_timber.elements.Beam.to_jsonstring"]], "transform() (compas_timber.elements.beam method)": [[403, "compas_timber.elements.Beam.transform"]], "transformed() (compas_timber.elements.beam method)": [[404, "compas_timber.elements.Beam.transformed"]], "validate_data() (compas_timber.elements.beam class method)": [[405, "compas_timber.elements.Beam.validate_data"]], "fastener (class in compas_timber.elements)": [[406, "compas_timber.elements.Fastener"]], "tostring() (compas_timber.elements.fastener method)": [[407, "compas_timber.elements.Fastener.ToString"]], "add_feature() (compas_timber.elements.fastener method)": [[408, "compas_timber.elements.Fastener.add_feature"]], "add_features() (compas_timber.elements.fastener method)": [[409, "compas_timber.elements.Fastener.add_features"]], "compute_aabb() (compas_timber.elements.fastener method)": [[410, "compas_timber.elements.Fastener.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.fastener method)": [[411, "compas_timber.elements.Fastener.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.fastener method)": [[412, "compas_timber.elements.Fastener.compute_geometry"]], "compute_obb() (compas_timber.elements.fastener method)": [[413, "compas_timber.elements.Fastener.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.fastener method)": [[414, "compas_timber.elements.Fastener.compute_worldtransformation"]], "copy() (compas_timber.elements.fastener method)": [[415, "compas_timber.elements.Fastener.copy"]], "from_json() (compas_timber.elements.fastener class method)": [[416, "compas_timber.elements.Fastener.from_json"]], "from_jsonstring() (compas_timber.elements.fastener class method)": [[417, "compas_timber.elements.Fastener.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.fastener method)": [[418, "compas_timber.elements.Fastener.remove_blank_extension"]], "remove_features() (compas_timber.elements.fastener method)": [[419, "compas_timber.elements.Fastener.remove_features"]], "reset() (compas_timber.elements.fastener method)": [[420, "compas_timber.elements.Fastener.reset"]], "sha256() (compas_timber.elements.fastener method)": [[421, "compas_timber.elements.Fastener.sha256"]], "to_json() (compas_timber.elements.fastener method)": [[422, "compas_timber.elements.Fastener.to_json"]], "to_jsonstring() (compas_timber.elements.fastener method)": [[423, "compas_timber.elements.Fastener.to_jsonstring"]], "transform() (compas_timber.elements.fastener method)": [[424, "compas_timber.elements.Fastener.transform"]], "transformed() (compas_timber.elements.fastener method)": [[425, "compas_timber.elements.Fastener.transformed"]], "validate_data() (compas_timber.elements.fastener class method)": [[426, "compas_timber.elements.Fastener.validate_data"]], "fastenertimberinterface (class in compas_timber.elements)": [[427, "compas_timber.elements.FastenerTimberInterface"]], "tostring() (compas_timber.elements.fastenertimberinterface method)": [[428, "compas_timber.elements.FastenerTimberInterface.ToString"]], "copy() (compas_timber.elements.fastenertimberinterface method)": [[429, "compas_timber.elements.FastenerTimberInterface.copy"]], "from_json() (compas_timber.elements.fastenertimberinterface class method)": [[430, "compas_timber.elements.FastenerTimberInterface.from_json"]], "from_jsonstring() (compas_timber.elements.fastenertimberinterface class method)": [[431, "compas_timber.elements.FastenerTimberInterface.from_jsonstring"]], "get_features() (compas_timber.elements.fastenertimberinterface method)": [[432, "compas_timber.elements.FastenerTimberInterface.get_features"]], "sha256() (compas_timber.elements.fastenertimberinterface method)": [[433, "compas_timber.elements.FastenerTimberInterface.sha256"]], "to_json() (compas_timber.elements.fastenertimberinterface method)": [[434, "compas_timber.elements.FastenerTimberInterface.to_json"]], "to_jsonstring() (compas_timber.elements.fastenertimberinterface method)": [[435, "compas_timber.elements.FastenerTimberInterface.to_jsonstring"]], "validate_data() (compas_timber.elements.fastenertimberinterface class method)": [[436, "compas_timber.elements.FastenerTimberInterface.validate_data"]], "plate (class in compas_timber.elements)": [[437, "compas_timber.elements.Plate"]], "tostring() (compas_timber.elements.plate method)": [[438, "compas_timber.elements.Plate.ToString"]], "add_feature() (compas_timber.elements.plate method)": [[439, "compas_timber.elements.Plate.add_feature"]], "add_features() (compas_timber.elements.plate method)": [[440, "compas_timber.elements.Plate.add_features"]], "compute_aabb() (compas_timber.elements.plate method)": [[441, "compas_timber.elements.Plate.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.plate method)": [[442, "compas_timber.elements.Plate.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.plate method)": [[443, "compas_timber.elements.Plate.compute_geometry"]], "compute_obb() (compas_timber.elements.plate method)": [[444, "compas_timber.elements.Plate.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.plate method)": [[445, "compas_timber.elements.Plate.compute_worldtransformation"]], "copy() (compas_timber.elements.plate method)": [[446, "compas_timber.elements.Plate.copy"]], "from_json() (compas_timber.elements.plate class method)": [[447, "compas_timber.elements.Plate.from_json"]], "from_jsonstring() (compas_timber.elements.plate class method)": [[448, "compas_timber.elements.Plate.from_jsonstring"]], "from_outline_thickness() (compas_timber.elements.plate class method)": [[449, "compas_timber.elements.Plate.from_outline_thickness"]], "remove_blank_extension() (compas_timber.elements.plate method)": [[450, "compas_timber.elements.Plate.remove_blank_extension"]], "remove_features() (compas_timber.elements.plate method)": [[451, "compas_timber.elements.Plate.remove_features"]], "reset() (compas_timber.elements.plate method)": [[452, "compas_timber.elements.Plate.reset"]], "sha256() (compas_timber.elements.plate method)": [[453, "compas_timber.elements.Plate.sha256"]], "shape() (compas_timber.elements.plate method)": [[454, "compas_timber.elements.Plate.shape"]], "side_as_surface() (compas_timber.elements.plate method)": [[455, "compas_timber.elements.Plate.side_as_surface"]], "to_json() (compas_timber.elements.plate method)": [[456, "compas_timber.elements.Plate.to_json"]], "to_jsonstring() (compas_timber.elements.plate method)": [[457, "compas_timber.elements.Plate.to_jsonstring"]], "transform() (compas_timber.elements.plate method)": [[458, "compas_timber.elements.Plate.transform"]], "transformed() (compas_timber.elements.plate method)": [[459, "compas_timber.elements.Plate.transformed"]], "validate_data() (compas_timber.elements.plate class method)": [[460, "compas_timber.elements.Plate.validate_data"]], "timberelement (class in compas_timber.elements)": [[461, "compas_timber.elements.TimberElement"]], "tostring() (compas_timber.elements.timberelement method)": [[462, "compas_timber.elements.TimberElement.ToString"]], "add_feature() (compas_timber.elements.timberelement method)": [[463, "compas_timber.elements.TimberElement.add_feature"]], "add_features() (compas_timber.elements.timberelement method)": [[464, "compas_timber.elements.TimberElement.add_features"]], "compute_aabb() (compas_timber.elements.timberelement method)": [[465, "compas_timber.elements.TimberElement.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.timberelement method)": [[466, "compas_timber.elements.TimberElement.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.timberelement method)": [[467, "compas_timber.elements.TimberElement.compute_geometry"]], "compute_obb() (compas_timber.elements.timberelement method)": [[468, "compas_timber.elements.TimberElement.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.timberelement method)": [[469, "compas_timber.elements.TimberElement.compute_worldtransformation"]], "copy() (compas_timber.elements.timberelement method)": [[470, "compas_timber.elements.TimberElement.copy"]], "from_json() (compas_timber.elements.timberelement class method)": [[471, "compas_timber.elements.TimberElement.from_json"]], "from_jsonstring() (compas_timber.elements.timberelement class method)": [[472, "compas_timber.elements.TimberElement.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.timberelement method)": [[473, "compas_timber.elements.TimberElement.remove_blank_extension"]], "remove_features() (compas_timber.elements.timberelement method)": [[474, "compas_timber.elements.TimberElement.remove_features"]], "reset() (compas_timber.elements.timberelement method)": [[475, "compas_timber.elements.TimberElement.reset"]], "sha256() (compas_timber.elements.timberelement method)": [[476, "compas_timber.elements.TimberElement.sha256"]], "to_json() (compas_timber.elements.timberelement method)": [[477, "compas_timber.elements.TimberElement.to_json"]], "to_jsonstring() (compas_timber.elements.timberelement method)": [[478, "compas_timber.elements.TimberElement.to_jsonstring"]], "transform() (compas_timber.elements.timberelement method)": [[479, "compas_timber.elements.TimberElement.transform"]], "transformed() (compas_timber.elements.timberelement method)": [[480, "compas_timber.elements.TimberElement.transformed"]], "validate_data() (compas_timber.elements.timberelement class method)": [[481, "compas_timber.elements.TimberElement.validate_data"]], "wall (class in compas_timber.elements)": [[482, "compas_timber.elements.Wall"]], "tostring() (compas_timber.elements.wall method)": [[483, "compas_timber.elements.Wall.ToString"]], "add_feature() (compas_timber.elements.wall method)": [[484, "compas_timber.elements.Wall.add_feature"]], "add_features() (compas_timber.elements.wall method)": [[485, "compas_timber.elements.Wall.add_features"]], "compute_aabb() (compas_timber.elements.wall method)": [[486, "compas_timber.elements.Wall.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.wall method)": [[487, "compas_timber.elements.Wall.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.wall method)": [[488, "compas_timber.elements.Wall.compute_geometry"]], "compute_obb() (compas_timber.elements.wall method)": [[489, "compas_timber.elements.Wall.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.wall method)": [[490, "compas_timber.elements.Wall.compute_worldtransformation"]], "copy() (compas_timber.elements.wall method)": [[491, "compas_timber.elements.Wall.copy"]], "from_boundary() (compas_timber.elements.wall class method)": [[492, "compas_timber.elements.Wall.from_boundary"]], "from_brep() (compas_timber.elements.wall class method)": [[493, "compas_timber.elements.Wall.from_brep"]], "from_json() (compas_timber.elements.wall class method)": [[494, "compas_timber.elements.Wall.from_json"]], "from_jsonstring() (compas_timber.elements.wall class method)": [[495, "compas_timber.elements.Wall.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.wall method)": [[496, "compas_timber.elements.Wall.remove_blank_extension"]], "remove_features() (compas_timber.elements.wall method)": [[497, "compas_timber.elements.Wall.remove_features"]], "reset() (compas_timber.elements.wall method)": [[498, "compas_timber.elements.Wall.reset"]], "rotate() (compas_timber.elements.wall method)": [[499, "compas_timber.elements.Wall.rotate"]], "sha256() (compas_timber.elements.wall method)": [[500, "compas_timber.elements.Wall.sha256"]], "to_json() (compas_timber.elements.wall method)": [[501, "compas_timber.elements.Wall.to_json"]], "to_jsonstring() (compas_timber.elements.wall method)": [[502, "compas_timber.elements.Wall.to_jsonstring"]], "transform() (compas_timber.elements.wall method)": [[503, "compas_timber.elements.Wall.transform"]], "transformed() (compas_timber.elements.wall method)": [[504, "compas_timber.elements.Wall.transformed"]], "validate_data() (compas_timber.elements.wall class method)": [[505, "compas_timber.elements.Wall.validate_data"]], "beamjoiningerror": [[506, "compas_timber.errors.BeamJoiningError"]], "fastenerapplicationerror": [[507, "compas_timber.errors.FastenerApplicationError"]], "featureapplicationerror": [[508, "compas_timber.errors.FeatureApplicationError"]], "btlxpart (class in compas_timber.fabrication)": [[509, "compas_timber.fabrication.BTLxPart"]], "et_point_vals() (compas_timber.fabrication.btlxpart method)": [[510, "compas_timber.fabrication.BTLxPart.et_point_vals"]], "ref_side_from_face() (compas_timber.fabrication.btlxpart method)": [[511, "compas_timber.fabrication.BTLxPart.ref_side_from_face"]], "btlxprocessing (class in compas_timber.fabrication)": [[512, "compas_timber.fabrication.BTLxProcessing"]], "tostring() (compas_timber.fabrication.btlxprocessing method)": [[513, "compas_timber.fabrication.BTLxProcessing.ToString"]], "add_subprocessing() (compas_timber.fabrication.btlxprocessing method)": [[514, "compas_timber.fabrication.BTLxProcessing.add_subprocessing"]], "copy() (compas_timber.fabrication.btlxprocessing method)": [[515, "compas_timber.fabrication.BTLxProcessing.copy"]], "from_json() (compas_timber.fabrication.btlxprocessing class method)": [[516, "compas_timber.fabrication.BTLxProcessing.from_json"]], "from_jsonstring() (compas_timber.fabrication.btlxprocessing class method)": [[517, "compas_timber.fabrication.BTLxProcessing.from_jsonstring"]], "scaled() (compas_timber.fabrication.btlxprocessing method)": [[518, "compas_timber.fabrication.BTLxProcessing.scaled"]], "sha256() (compas_timber.fabrication.btlxprocessing method)": [[519, "compas_timber.fabrication.BTLxProcessing.sha256"]], "to_json() (compas_timber.fabrication.btlxprocessing method)": [[520, "compas_timber.fabrication.BTLxProcessing.to_json"]], "to_jsonstring() (compas_timber.fabrication.btlxprocessing method)": [[521, "compas_timber.fabrication.BTLxProcessing.to_jsonstring"]], "validate_data() (compas_timber.fabrication.btlxprocessing class method)": [[522, "compas_timber.fabrication.BTLxProcessing.validate_data"]], "btlxwriter (class in compas_timber.fabrication)": [[523, "compas_timber.fabrication.BTLxWriter"]], "model_to_xml() (compas_timber.fabrication.btlxwriter method)": [[524, "compas_timber.fabrication.BTLxWriter.model_to_xml"]], "register_type_serializer() (compas_timber.fabrication.btlxwriter class method)": [[525, "compas_timber.fabrication.BTLxWriter.register_type_serializer"]], "write() (compas_timber.fabrication.btlxwriter method)": [[526, "compas_timber.fabrication.BTLxWriter.write"]], "doublecut (class in compas_timber.fabrication)": [[527, "compas_timber.fabrication.DoubleCut"]], "tostring() (compas_timber.fabrication.doublecut method)": [[528, "compas_timber.fabrication.DoubleCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.doublecut method)": [[529, "compas_timber.fabrication.DoubleCut.add_subprocessing"]], "apply() (compas_timber.fabrication.doublecut method)": [[530, "compas_timber.fabrication.DoubleCut.apply"]], "copy() (compas_timber.fabrication.doublecut method)": [[531, "compas_timber.fabrication.DoubleCut.copy"]], "from_json() (compas_timber.fabrication.doublecut class method)": [[532, "compas_timber.fabrication.DoubleCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.doublecut class method)": [[533, "compas_timber.fabrication.DoubleCut.from_jsonstring"]], "from_planes_and_beam() (compas_timber.fabrication.doublecut class method)": [[534, "compas_timber.fabrication.DoubleCut.from_planes_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.doublecut class method)": [[535, "compas_timber.fabrication.DoubleCut.from_shapes_and_element"]], "planes_from_params_and_beam() (compas_timber.fabrication.doublecut method)": [[536, "compas_timber.fabrication.DoubleCut.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.doublecut method)": [[537, "compas_timber.fabrication.DoubleCut.scale"]], "scaled() (compas_timber.fabrication.doublecut method)": [[538, "compas_timber.fabrication.DoubleCut.scaled"]], "sha256() (compas_timber.fabrication.doublecut method)": [[539, "compas_timber.fabrication.DoubleCut.sha256"]], "to_json() (compas_timber.fabrication.doublecut method)": [[540, "compas_timber.fabrication.DoubleCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.doublecut method)": [[541, "compas_timber.fabrication.DoubleCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.doublecut class method)": [[542, "compas_timber.fabrication.DoubleCut.validate_data"]], "dovetailmortise (class in compas_timber.fabrication)": [[543, "compas_timber.fabrication.DovetailMortise"]], "tostring() (compas_timber.fabrication.dovetailmortise method)": [[544, "compas_timber.fabrication.DovetailMortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailmortise method)": [[545, "compas_timber.fabrication.DovetailMortise.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailmortise method)": [[546, "compas_timber.fabrication.DovetailMortise.apply"]], "copy() (compas_timber.fabrication.dovetailmortise method)": [[547, "compas_timber.fabrication.DovetailMortise.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailmortise class method)": [[548, "compas_timber.fabrication.DovetailMortise.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[549, "compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[550, "compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[551, "compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.dovetailmortise class method)": [[552, "compas_timber.fabrication.DovetailMortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.dovetailmortise class method)": [[553, "compas_timber.fabrication.DovetailMortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailmortise class method)": [[554, "compas_timber.fabrication.DovetailMortise.from_jsonstring"]], "scale() (compas_timber.fabrication.dovetailmortise method)": [[555, "compas_timber.fabrication.DovetailMortise.scale"]], "scaled() (compas_timber.fabrication.dovetailmortise method)": [[556, "compas_timber.fabrication.DovetailMortise.scaled"]], "sha256() (compas_timber.fabrication.dovetailmortise method)": [[557, "compas_timber.fabrication.DovetailMortise.sha256"]], "to_json() (compas_timber.fabrication.dovetailmortise method)": [[558, "compas_timber.fabrication.DovetailMortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailmortise method)": [[559, "compas_timber.fabrication.DovetailMortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailmortise class method)": [[560, "compas_timber.fabrication.DovetailMortise.validate_data"]], "dovetailtenon (class in compas_timber.fabrication)": [[561, "compas_timber.fabrication.DovetailTenon"]], "tostring() (compas_timber.fabrication.dovetailtenon method)": [[562, "compas_timber.fabrication.DovetailTenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailtenon method)": [[563, "compas_timber.fabrication.DovetailTenon.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailtenon method)": [[564, "compas_timber.fabrication.DovetailTenon.apply"]], "copy() (compas_timber.fabrication.dovetailtenon method)": [[565, "compas_timber.fabrication.DovetailTenon.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailtenon class method)": [[566, "compas_timber.fabrication.DovetailTenon.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[567, "compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[568, "compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[569, "compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.dovetailtenon class method)": [[570, "compas_timber.fabrication.DovetailTenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailtenon class method)": [[571, "compas_timber.fabrication.DovetailTenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.dovetailtenon class method)": [[572, "compas_timber.fabrication.DovetailTenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.dovetailtenon method)": [[573, "compas_timber.fabrication.DovetailTenon.scale"]], "scaled() (compas_timber.fabrication.dovetailtenon method)": [[574, "compas_timber.fabrication.DovetailTenon.scaled"]], "sha256() (compas_timber.fabrication.dovetailtenon method)": [[575, "compas_timber.fabrication.DovetailTenon.sha256"]], "to_json() (compas_timber.fabrication.dovetailtenon method)": [[576, "compas_timber.fabrication.DovetailTenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailtenon method)": [[577, "compas_timber.fabrication.DovetailTenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailtenon class method)": [[578, "compas_timber.fabrication.DovetailTenon.validate_data"]], "drilling (class in compas_timber.fabrication)": [[579, "compas_timber.fabrication.Drilling"]], "tostring() (compas_timber.fabrication.drilling method)": [[580, "compas_timber.fabrication.Drilling.ToString"]], "add_subprocessing() (compas_timber.fabrication.drilling method)": [[581, "compas_timber.fabrication.Drilling.add_subprocessing"]], "apply() (compas_timber.fabrication.drilling method)": [[582, "compas_timber.fabrication.Drilling.apply"]], "copy() (compas_timber.fabrication.drilling method)": [[583, "compas_timber.fabrication.Drilling.copy"]], "cylinder_from_params_and_element() (compas_timber.fabrication.drilling method)": [[584, "compas_timber.fabrication.Drilling.cylinder_from_params_and_element"]], "from_json() (compas_timber.fabrication.drilling class method)": [[585, "compas_timber.fabrication.Drilling.from_json"]], "from_jsonstring() (compas_timber.fabrication.drilling class method)": [[586, "compas_timber.fabrication.Drilling.from_jsonstring"]], "from_line_and_element() (compas_timber.fabrication.drilling class method)": [[587, "compas_timber.fabrication.Drilling.from_line_and_element"]], "from_shapes_and_element() (compas_timber.fabrication.drilling class method)": [[588, "compas_timber.fabrication.Drilling.from_shapes_and_element"]], "scale() (compas_timber.fabrication.drilling method)": [[589, "compas_timber.fabrication.Drilling.scale"]], "scaled() (compas_timber.fabrication.drilling method)": [[590, "compas_timber.fabrication.Drilling.scaled"]], "sha256() (compas_timber.fabrication.drilling method)": [[591, "compas_timber.fabrication.Drilling.sha256"]], "to_json() (compas_timber.fabrication.drilling method)": [[592, "compas_timber.fabrication.Drilling.to_json"]], "to_jsonstring() (compas_timber.fabrication.drilling method)": [[593, "compas_timber.fabrication.Drilling.to_jsonstring"]], "validate_data() (compas_timber.fabrication.drilling class method)": [[594, "compas_timber.fabrication.Drilling.validate_data"]], "edgepositiontype (class in compas_timber.fabrication)": [[595, "compas_timber.fabrication.EdgePositionType"]], "frenchridgelap (class in compas_timber.fabrication)": [[596, "compas_timber.fabrication.FrenchRidgeLap"]], "tostring() (compas_timber.fabrication.frenchridgelap method)": [[597, "compas_timber.fabrication.FrenchRidgeLap.ToString"]], "add_subprocessing() (compas_timber.fabrication.frenchridgelap method)": [[598, "compas_timber.fabrication.FrenchRidgeLap.add_subprocessing"]], "apply() (compas_timber.fabrication.frenchridgelap method)": [[599, "compas_timber.fabrication.FrenchRidgeLap.apply"]], "copy() (compas_timber.fabrication.frenchridgelap method)": [[600, "compas_timber.fabrication.FrenchRidgeLap.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[601, "compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam"]], "from_beam_beam_and_plane() (compas_timber.fabrication.frenchridgelap class method)": [[602, "compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane"]], "from_json() (compas_timber.fabrication.frenchridgelap class method)": [[603, "compas_timber.fabrication.FrenchRidgeLap.from_json"]], "from_jsonstring() (compas_timber.fabrication.frenchridgelap class method)": [[604, "compas_timber.fabrication.FrenchRidgeLap.from_jsonstring"]], "lap_volume_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[605, "compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam"]], "scale() (compas_timber.fabrication.frenchridgelap method)": [[606, "compas_timber.fabrication.FrenchRidgeLap.scale"]], "scaled() (compas_timber.fabrication.frenchridgelap method)": [[607, "compas_timber.fabrication.FrenchRidgeLap.scaled"]], "sha256() (compas_timber.fabrication.frenchridgelap method)": [[608, "compas_timber.fabrication.FrenchRidgeLap.sha256"]], "to_json() (compas_timber.fabrication.frenchridgelap method)": [[609, "compas_timber.fabrication.FrenchRidgeLap.to_json"]], "to_jsonstring() (compas_timber.fabrication.frenchridgelap method)": [[610, "compas_timber.fabrication.FrenchRidgeLap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.frenchridgelap class method)": [[611, "compas_timber.fabrication.FrenchRidgeLap.validate_data"]], "jackraftercut (class in compas_timber.fabrication)": [[612, "compas_timber.fabrication.JackRafterCut"]], "tostring() (compas_timber.fabrication.jackraftercut method)": [[613, "compas_timber.fabrication.JackRafterCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.jackraftercut method)": [[614, "compas_timber.fabrication.JackRafterCut.add_subprocessing"]], "apply() (compas_timber.fabrication.jackraftercut method)": [[615, "compas_timber.fabrication.JackRafterCut.apply"]], "copy() (compas_timber.fabrication.jackraftercut method)": [[616, "compas_timber.fabrication.JackRafterCut.copy"]], "from_json() (compas_timber.fabrication.jackraftercut class method)": [[617, "compas_timber.fabrication.JackRafterCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.jackraftercut class method)": [[618, "compas_timber.fabrication.JackRafterCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.jackraftercut class method)": [[619, "compas_timber.fabrication.JackRafterCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.jackraftercut class method)": [[620, "compas_timber.fabrication.JackRafterCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.jackraftercut method)": [[621, "compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam"]], "scale() (compas_timber.fabrication.jackraftercut method)": [[622, "compas_timber.fabrication.JackRafterCut.scale"]], "scaled() (compas_timber.fabrication.jackraftercut method)": [[623, "compas_timber.fabrication.JackRafterCut.scaled"]], "sha256() (compas_timber.fabrication.jackraftercut method)": [[624, "compas_timber.fabrication.JackRafterCut.sha256"]], "to_json() (compas_timber.fabrication.jackraftercut method)": [[625, "compas_timber.fabrication.JackRafterCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.jackraftercut method)": [[626, "compas_timber.fabrication.JackRafterCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.jackraftercut class method)": [[627, "compas_timber.fabrication.JackRafterCut.validate_data"]], "lap (class in compas_timber.fabrication)": [[628, "compas_timber.fabrication.Lap"]], "tostring() (compas_timber.fabrication.lap method)": [[629, "compas_timber.fabrication.Lap.ToString"]], "add_subprocessing() (compas_timber.fabrication.lap method)": [[630, "compas_timber.fabrication.Lap.add_subprocessing"]], "apply() (compas_timber.fabrication.lap method)": [[631, "compas_timber.fabrication.Lap.apply"]], "copy() (compas_timber.fabrication.lap method)": [[632, "compas_timber.fabrication.Lap.copy"]], "from_json() (compas_timber.fabrication.lap class method)": [[633, "compas_timber.fabrication.Lap.from_json"]], "from_jsonstring() (compas_timber.fabrication.lap class method)": [[634, "compas_timber.fabrication.Lap.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.lap class method)": [[635, "compas_timber.fabrication.Lap.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.lap class method)": [[636, "compas_timber.fabrication.Lap.from_shapes_and_element"]], "from_volume_and_beam() (compas_timber.fabrication.lap class method)": [[637, "compas_timber.fabrication.Lap.from_volume_and_beam"]], "scale() (compas_timber.fabrication.lap method)": [[638, "compas_timber.fabrication.Lap.scale"]], "scaled() (compas_timber.fabrication.lap method)": [[639, "compas_timber.fabrication.Lap.scaled"]], "sha256() (compas_timber.fabrication.lap method)": [[640, "compas_timber.fabrication.Lap.sha256"]], "to_json() (compas_timber.fabrication.lap method)": [[641, "compas_timber.fabrication.Lap.to_json"]], "to_jsonstring() (compas_timber.fabrication.lap method)": [[642, "compas_timber.fabrication.Lap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.lap class method)": [[643, "compas_timber.fabrication.Lap.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.lap method)": [[644, "compas_timber.fabrication.Lap.volume_from_params_and_beam"]], "limitationtoptype (class in compas_timber.fabrication)": [[645, "compas_timber.fabrication.LimitationTopType"]], "longitudinalcut (class in compas_timber.fabrication)": [[646, "compas_timber.fabrication.LongitudinalCut"]], "tostring() (compas_timber.fabrication.longitudinalcut method)": [[647, "compas_timber.fabrication.LongitudinalCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.longitudinalcut method)": [[648, "compas_timber.fabrication.LongitudinalCut.add_subprocessing"]], "apply() (compas_timber.fabrication.longitudinalcut method)": [[649, "compas_timber.fabrication.LongitudinalCut.apply"]], "copy() (compas_timber.fabrication.longitudinalcut method)": [[650, "compas_timber.fabrication.LongitudinalCut.copy"]], "from_json() (compas_timber.fabrication.longitudinalcut class method)": [[651, "compas_timber.fabrication.LongitudinalCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.longitudinalcut class method)": [[652, "compas_timber.fabrication.LongitudinalCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.longitudinalcut class method)": [[653, "compas_timber.fabrication.LongitudinalCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.longitudinalcut class method)": [[654, "compas_timber.fabrication.LongitudinalCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[655, "compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam"]], "scaled() (compas_timber.fabrication.longitudinalcut method)": [[656, "compas_timber.fabrication.LongitudinalCut.scaled"]], "sha256() (compas_timber.fabrication.longitudinalcut method)": [[657, "compas_timber.fabrication.LongitudinalCut.sha256"]], "to_json() (compas_timber.fabrication.longitudinalcut method)": [[658, "compas_timber.fabrication.LongitudinalCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.longitudinalcut method)": [[659, "compas_timber.fabrication.LongitudinalCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.longitudinalcut class method)": [[660, "compas_timber.fabrication.LongitudinalCut.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[661, "compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam"]], "machininglimits (class in compas_timber.fabrication)": [[662, "compas_timber.fabrication.MachiningLimits"]], "mortise (class in compas_timber.fabrication)": [[663, "compas_timber.fabrication.Mortise"]], "tostring() (compas_timber.fabrication.mortise method)": [[664, "compas_timber.fabrication.Mortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.mortise method)": [[665, "compas_timber.fabrication.Mortise.add_subprocessing"]], "apply() (compas_timber.fabrication.mortise method)": [[666, "compas_timber.fabrication.Mortise.apply"]], "copy() (compas_timber.fabrication.mortise method)": [[667, "compas_timber.fabrication.Mortise.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[668, "compas_timber.fabrication.Mortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.mortise class method)": [[669, "compas_timber.fabrication.Mortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.mortise class method)": [[670, "compas_timber.fabrication.Mortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.mortise class method)": [[671, "compas_timber.fabrication.Mortise.from_jsonstring"]], "scale() (compas_timber.fabrication.mortise method)": [[672, "compas_timber.fabrication.Mortise.scale"]], "scaled() (compas_timber.fabrication.mortise method)": [[673, "compas_timber.fabrication.Mortise.scaled"]], "sha256() (compas_timber.fabrication.mortise method)": [[674, "compas_timber.fabrication.Mortise.sha256"]], "to_json() (compas_timber.fabrication.mortise method)": [[675, "compas_timber.fabrication.Mortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.mortise method)": [[676, "compas_timber.fabrication.Mortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.mortise class method)": [[677, "compas_timber.fabrication.Mortise.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[678, "compas_timber.fabrication.Mortise.volume_from_params_and_beam"]], "orientationtype (class in compas_timber.fabrication)": [[679, "compas_timber.fabrication.OrientationType"]], "pocket (class in compas_timber.fabrication)": [[680, "compas_timber.fabrication.Pocket"]], "tostring() (compas_timber.fabrication.pocket method)": [[681, "compas_timber.fabrication.Pocket.ToString"]], "add_subprocessing() (compas_timber.fabrication.pocket method)": [[682, "compas_timber.fabrication.Pocket.add_subprocessing"]], "apply() (compas_timber.fabrication.pocket method)": [[683, "compas_timber.fabrication.Pocket.apply"]], "copy() (compas_timber.fabrication.pocket method)": [[684, "compas_timber.fabrication.Pocket.copy"]], "from_json() (compas_timber.fabrication.pocket class method)": [[685, "compas_timber.fabrication.Pocket.from_json"]], "from_jsonstring() (compas_timber.fabrication.pocket class method)": [[686, "compas_timber.fabrication.Pocket.from_jsonstring"]], "from_shapes_and_element() (compas_timber.fabrication.pocket class method)": [[687, "compas_timber.fabrication.Pocket.from_shapes_and_element"]], "from_volume_and_element() (compas_timber.fabrication.pocket class method)": [[688, "compas_timber.fabrication.Pocket.from_volume_and_element"]], "scale() (compas_timber.fabrication.pocket method)": [[689, "compas_timber.fabrication.Pocket.scale"]], "scaled() (compas_timber.fabrication.pocket method)": [[690, "compas_timber.fabrication.Pocket.scaled"]], "sha256() (compas_timber.fabrication.pocket method)": [[691, "compas_timber.fabrication.Pocket.sha256"]], "to_json() (compas_timber.fabrication.pocket method)": [[692, "compas_timber.fabrication.Pocket.to_json"]], "to_jsonstring() (compas_timber.fabrication.pocket method)": [[693, "compas_timber.fabrication.Pocket.to_jsonstring"]], "validate_data() (compas_timber.fabrication.pocket class method)": [[694, "compas_timber.fabrication.Pocket.validate_data"]], "volume_from_params_and_element() (compas_timber.fabrication.pocket method)": [[695, "compas_timber.fabrication.Pocket.volume_from_params_and_element"]], "slot (class in compas_timber.fabrication)": [[696, "compas_timber.fabrication.Slot"]], "tostring() (compas_timber.fabrication.slot method)": [[697, "compas_timber.fabrication.Slot.ToString"]], "add_subprocessing() (compas_timber.fabrication.slot method)": [[698, "compas_timber.fabrication.Slot.add_subprocessing"]], "apply() (compas_timber.fabrication.slot method)": [[699, "compas_timber.fabrication.Slot.apply"]], "copy() (compas_timber.fabrication.slot method)": [[700, "compas_timber.fabrication.Slot.copy"]], "from_json() (compas_timber.fabrication.slot class method)": [[701, "compas_timber.fabrication.Slot.from_json"]], "from_jsonstring() (compas_timber.fabrication.slot class method)": [[702, "compas_timber.fabrication.Slot.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.slot class method)": [[703, "compas_timber.fabrication.Slot.from_plane_and_beam"]], "scale() (compas_timber.fabrication.slot method)": [[704, "compas_timber.fabrication.Slot.scale"]], "scaled() (compas_timber.fabrication.slot method)": [[705, "compas_timber.fabrication.Slot.scaled"]], "sha256() (compas_timber.fabrication.slot method)": [[706, "compas_timber.fabrication.Slot.sha256"]], "to_json() (compas_timber.fabrication.slot method)": [[707, "compas_timber.fabrication.Slot.to_json"]], "to_jsonstring() (compas_timber.fabrication.slot method)": [[708, "compas_timber.fabrication.Slot.to_jsonstring"]], "validate_data() (compas_timber.fabrication.slot class method)": [[709, "compas_timber.fabrication.Slot.validate_data"]], "stepjoint (class in compas_timber.fabrication)": [[710, "compas_timber.fabrication.StepJoint"]], "tostring() (compas_timber.fabrication.stepjoint method)": [[711, "compas_timber.fabrication.StepJoint.ToString"]], "add_subprocessing() (compas_timber.fabrication.stepjoint method)": [[712, "compas_timber.fabrication.StepJoint.add_subprocessing"]], "add_tenon() (compas_timber.fabrication.stepjoint method)": [[713, "compas_timber.fabrication.StepJoint.add_tenon"]], "apply() (compas_timber.fabrication.stepjoint method)": [[714, "compas_timber.fabrication.StepJoint.apply"]], "copy() (compas_timber.fabrication.stepjoint method)": [[715, "compas_timber.fabrication.StepJoint.copy"]], "from_json() (compas_timber.fabrication.stepjoint class method)": [[716, "compas_timber.fabrication.StepJoint.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjoint class method)": [[717, "compas_timber.fabrication.StepJoint.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjoint class method)": [[718, "compas_timber.fabrication.StepJoint.from_plane_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[719, "compas_timber.fabrication.StepJoint.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjoint method)": [[720, "compas_timber.fabrication.StepJoint.scale"]], "scaled() (compas_timber.fabrication.stepjoint method)": [[721, "compas_timber.fabrication.StepJoint.scaled"]], "sha256() (compas_timber.fabrication.stepjoint method)": [[722, "compas_timber.fabrication.StepJoint.sha256"]], "tenon_volume_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[723, "compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam"]], "to_json() (compas_timber.fabrication.stepjoint method)": [[724, "compas_timber.fabrication.StepJoint.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjoint method)": [[725, "compas_timber.fabrication.StepJoint.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjoint class method)": [[726, "compas_timber.fabrication.StepJoint.validate_data"]], "stepjointnotch (class in compas_timber.fabrication)": [[727, "compas_timber.fabrication.StepJointNotch"]], "tostring() (compas_timber.fabrication.stepjointnotch method)": [[728, "compas_timber.fabrication.StepJointNotch.ToString"]], "add_mortise() (compas_timber.fabrication.stepjointnotch method)": [[729, "compas_timber.fabrication.StepJointNotch.add_mortise"]], "add_subprocessing() (compas_timber.fabrication.stepjointnotch method)": [[730, "compas_timber.fabrication.StepJointNotch.add_subprocessing"]], "apply() (compas_timber.fabrication.stepjointnotch method)": [[731, "compas_timber.fabrication.StepJointNotch.apply"]], "copy() (compas_timber.fabrication.stepjointnotch method)": [[732, "compas_timber.fabrication.StepJointNotch.copy"]], "from_json() (compas_timber.fabrication.stepjointnotch class method)": [[733, "compas_timber.fabrication.StepJointNotch.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjointnotch class method)": [[734, "compas_timber.fabrication.StepJointNotch.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjointnotch class method)": [[735, "compas_timber.fabrication.StepJointNotch.from_plane_and_beam"]], "mortise_volume_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[736, "compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[737, "compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjointnotch method)": [[738, "compas_timber.fabrication.StepJointNotch.scale"]], "scaled() (compas_timber.fabrication.stepjointnotch method)": [[739, "compas_timber.fabrication.StepJointNotch.scaled"]], "sha256() (compas_timber.fabrication.stepjointnotch method)": [[740, "compas_timber.fabrication.StepJointNotch.sha256"]], "to_json() (compas_timber.fabrication.stepjointnotch method)": [[741, "compas_timber.fabrication.StepJointNotch.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjointnotch method)": [[742, "compas_timber.fabrication.StepJointNotch.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjointnotch class method)": [[743, "compas_timber.fabrication.StepJointNotch.validate_data"]], "stepshapetype (class in compas_timber.fabrication)": [[744, "compas_timber.fabrication.StepShapeType"]], "tenon (class in compas_timber.fabrication)": [[745, "compas_timber.fabrication.Tenon"]], "tostring() (compas_timber.fabrication.tenon method)": [[746, "compas_timber.fabrication.Tenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.tenon method)": [[747, "compas_timber.fabrication.Tenon.add_subprocessing"]], "apply() (compas_timber.fabrication.tenon method)": [[748, "compas_timber.fabrication.Tenon.apply"]], "copy() (compas_timber.fabrication.tenon method)": [[749, "compas_timber.fabrication.Tenon.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[750, "compas_timber.fabrication.Tenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.tenon class method)": [[751, "compas_timber.fabrication.Tenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.tenon class method)": [[752, "compas_timber.fabrication.Tenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.tenon class method)": [[753, "compas_timber.fabrication.Tenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.tenon method)": [[754, "compas_timber.fabrication.Tenon.scale"]], "scaled() (compas_timber.fabrication.tenon method)": [[755, "compas_timber.fabrication.Tenon.scaled"]], "sha256() (compas_timber.fabrication.tenon method)": [[756, "compas_timber.fabrication.Tenon.sha256"]], "to_json() (compas_timber.fabrication.tenon method)": [[757, "compas_timber.fabrication.Tenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.tenon method)": [[758, "compas_timber.fabrication.Tenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.tenon class method)": [[759, "compas_timber.fabrication.Tenon.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[760, "compas_timber.fabrication.Tenon.volume_from_params_and_beam"]], "tenonshapetype (class in compas_timber.fabrication)": [[761, "compas_timber.fabrication.TenonShapeType"]], "add_gh_param() (in module compas_timber.ghpython)": [[762, "compas_timber.ghpython.add_gh_param"]], "clear_gh_params() (in module compas_timber.ghpython)": [[763, "compas_timber.ghpython.clear_gh_params"]], "get_leaf_subclasses() (in module compas_timber.ghpython)": [[764, "compas_timber.ghpython.get_leaf_subclasses"]], "item_input_valid() (in module compas_timber.ghpython)": [[765, "compas_timber.ghpython.item_input_valid"]], "list_input_valid() (in module compas_timber.ghpython)": [[766, "compas_timber.ghpython.list_input_valid"]], "manage_dynamic_params() (in module compas_timber.ghpython)": [[767, "compas_timber.ghpython.manage_dynamic_params"]], "rename_gh_input() (in module compas_timber.ghpython)": [[768, "compas_timber.ghpython.rename_gh_input"]], "timbermodel (class in compas_timber.model)": [[769, "compas_timber.model.TimberModel"]], "tostring() (compas_timber.model.timbermodel method)": [[770, "compas_timber.model.TimberModel.ToString"]], "add_element() (compas_timber.model.timbermodel method)": [[771, "compas_timber.model.TimberModel.add_element"]], "add_elements() (compas_timber.model.timbermodel method)": [[772, "compas_timber.model.TimberModel.add_elements"]], "add_group() (compas_timber.model.timbermodel method)": [[773, "compas_timber.model.TimberModel.add_group"]], "add_group_element() (compas_timber.model.timbermodel method)": [[774, "compas_timber.model.TimberModel.add_group_element"]], "add_interaction() (compas_timber.model.timbermodel method)": [[775, "compas_timber.model.TimberModel.add_interaction"]], "add_joint() (compas_timber.model.timbermodel method)": [[776, "compas_timber.model.TimberModel.add_joint"]], "add_material() (compas_timber.model.timbermodel method)": [[777, "compas_timber.model.TimberModel.add_material"]], "assign_material() (compas_timber.model.timbermodel method)": [[778, "compas_timber.model.TimberModel.assign_material"]], "compute_aabb() (compas_timber.model.timbermodel method)": [[779, "compas_timber.model.TimberModel.compute_aabb"]], "compute_obb() (compas_timber.model.timbermodel method)": [[780, "compas_timber.model.TimberModel.compute_obb"]], "connect_adjacent_walls() (compas_timber.model.timbermodel method)": [[781, "compas_timber.model.TimberModel.connect_adjacent_walls"]], "copy() (compas_timber.model.timbermodel method)": [[782, "compas_timber.model.TimberModel.copy"]], "element_by_guid() (compas_timber.model.timbermodel method)": [[783, "compas_timber.model.TimberModel.element_by_guid"]], "elements() (compas_timber.model.timbermodel method)": [[784, "compas_timber.model.TimberModel.elements"]], "elements_connected_by() (compas_timber.model.timbermodel method)": [[785, "compas_timber.model.TimberModel.elements_connected_by"]], "from_json() (compas_timber.model.timbermodel class method)": [[786, "compas_timber.model.TimberModel.from_json"]], "from_jsonstring() (compas_timber.model.timbermodel class method)": [[787, "compas_timber.model.TimberModel.from_jsonstring"]], "get_elements_in_group() (compas_timber.model.timbermodel method)": [[788, "compas_timber.model.TimberModel.get_elements_in_group"]], "get_interactions_for_element() (compas_timber.model.timbermodel method)": [[789, "compas_timber.model.TimberModel.get_interactions_for_element"]], "has_element() (compas_timber.model.timbermodel method)": [[790, "compas_timber.model.TimberModel.has_element"]], "has_group() (compas_timber.model.timbermodel method)": [[791, "compas_timber.model.TimberModel.has_group"]], "has_interaction() (compas_timber.model.timbermodel method)": [[792, "compas_timber.model.TimberModel.has_interaction"]], "has_material() (compas_timber.model.timbermodel method)": [[793, "compas_timber.model.TimberModel.has_material"]], "interactions() (compas_timber.model.timbermodel method)": [[794, "compas_timber.model.TimberModel.interactions"]], "materials() (compas_timber.model.timbermodel method)": [[795, "compas_timber.model.TimberModel.materials"]], "process_joinery() (compas_timber.model.timbermodel method)": [[796, "compas_timber.model.TimberModel.process_joinery"]], "remove_element() (compas_timber.model.timbermodel method)": [[797, "compas_timber.model.TimberModel.remove_element"]], "remove_interaction() (compas_timber.model.timbermodel method)": [[798, "compas_timber.model.TimberModel.remove_interaction"]], "remove_joint() (compas_timber.model.timbermodel method)": [[799, "compas_timber.model.TimberModel.remove_joint"]], "rotate() (compas_timber.model.timbermodel method)": [[800, "compas_timber.model.TimberModel.rotate"]], "rotated() (compas_timber.model.timbermodel method)": [[801, "compas_timber.model.TimberModel.rotated"]], "scale() (compas_timber.model.timbermodel method)": [[802, "compas_timber.model.TimberModel.scale"]], "scaled() (compas_timber.model.timbermodel method)": [[803, "compas_timber.model.TimberModel.scaled"]], "set_topologies() (compas_timber.model.timbermodel method)": [[804, "compas_timber.model.TimberModel.set_topologies"]], "sha256() (compas_timber.model.timbermodel method)": [[805, "compas_timber.model.TimberModel.sha256"]], "to_json() (compas_timber.model.timbermodel method)": [[806, "compas_timber.model.TimberModel.to_json"]], "to_jsonstring() (compas_timber.model.timbermodel method)": [[807, "compas_timber.model.TimberModel.to_jsonstring"]], "transform() (compas_timber.model.timbermodel method)": [[808, "compas_timber.model.TimberModel.transform"]], "transform_numpy() (compas_timber.model.timbermodel method)": [[809, "compas_timber.model.TimberModel.transform_numpy"]], "transformed() (compas_timber.model.timbermodel method)": [[810, "compas_timber.model.TimberModel.transformed"]], "transformed_numpy() (compas_timber.model.timbermodel method)": [[811, "compas_timber.model.TimberModel.transformed_numpy"]], "translate() (compas_timber.model.timbermodel method)": [[812, "compas_timber.model.TimberModel.translate"]], "translated() (compas_timber.model.timbermodel method)": [[813, "compas_timber.model.TimberModel.translated"]], "validate_data() (compas_timber.model.timbermodel class method)": [[814, "compas_timber.model.TimberModel.validate_data"]], "actor (class in compas_timber.planning)": [[815, "compas_timber.planning.Actor"]], "get_name() (compas_timber.planning.actor class method)": [[816, "compas_timber.planning.Actor.get_name"]], "buildingplan (class in compas_timber.planning)": [[817, "compas_timber.planning.BuildingPlan"]], "tostring() (compas_timber.planning.buildingplan method)": [[818, "compas_timber.planning.BuildingPlan.ToString"]], "add_step() (compas_timber.planning.buildingplan method)": [[819, "compas_timber.planning.BuildingPlan.add_step"]], "copy() (compas_timber.planning.buildingplan method)": [[820, "compas_timber.planning.BuildingPlan.copy"]], "from_json() (compas_timber.planning.buildingplan class method)": [[821, "compas_timber.planning.BuildingPlan.from_json"]], "from_jsonstring() (compas_timber.planning.buildingplan class method)": [[822, "compas_timber.planning.BuildingPlan.from_jsonstring"]], "sha256() (compas_timber.planning.buildingplan method)": [[823, "compas_timber.planning.BuildingPlan.sha256"]], "to_json() (compas_timber.planning.buildingplan method)": [[824, "compas_timber.planning.BuildingPlan.to_json"]], "to_jsonstring() (compas_timber.planning.buildingplan method)": [[825, "compas_timber.planning.BuildingPlan.to_jsonstring"]], "validate_data() (compas_timber.planning.buildingplan class method)": [[826, "compas_timber.planning.BuildingPlan.validate_data"]], "buildingplanparser (class in compas_timber.planning)": [[827, "compas_timber.planning.BuildingPlanParser"]], "parse() (compas_timber.planning.buildingplanparser class method)": [[828, "compas_timber.planning.BuildingPlanParser.parse"]], "serialize() (compas_timber.planning.buildingplanparser class method)": [[829, "compas_timber.planning.BuildingPlanParser.serialize"]], "instruction (class in compas_timber.planning)": [[830, "compas_timber.planning.Instruction"]], "tostring() (compas_timber.planning.instruction method)": [[831, "compas_timber.planning.Instruction.ToString"]], "copy() (compas_timber.planning.instruction method)": [[832, "compas_timber.planning.Instruction.copy"]], "from_json() (compas_timber.planning.instruction class method)": [[833, "compas_timber.planning.Instruction.from_json"]], "from_jsonstring() (compas_timber.planning.instruction class method)": [[834, "compas_timber.planning.Instruction.from_jsonstring"]], "sha256() (compas_timber.planning.instruction method)": [[835, "compas_timber.planning.Instruction.sha256"]], "to_json() (compas_timber.planning.instruction method)": [[836, "compas_timber.planning.Instruction.to_json"]], "to_jsonstring() (compas_timber.planning.instruction method)": [[837, "compas_timber.planning.Instruction.to_jsonstring"]], "transform() (compas_timber.planning.instruction method)": [[838, "compas_timber.planning.Instruction.transform"]], "validate_data() (compas_timber.planning.instruction class method)": [[839, "compas_timber.planning.Instruction.validate_data"]], "lineardimension (class in compas_timber.planning)": [[840, "compas_timber.planning.LinearDimension"]], "tostring() (compas_timber.planning.lineardimension method)": [[841, "compas_timber.planning.LinearDimension.ToString"]], "copy() (compas_timber.planning.lineardimension method)": [[842, "compas_timber.planning.LinearDimension.copy"]], "from_json() (compas_timber.planning.lineardimension class method)": [[843, "compas_timber.planning.LinearDimension.from_json"]], "from_jsonstring() (compas_timber.planning.lineardimension class method)": [[844, "compas_timber.planning.LinearDimension.from_jsonstring"]], "sha256() (compas_timber.planning.lineardimension method)": [[845, "compas_timber.planning.LinearDimension.sha256"]], "to_json() (compas_timber.planning.lineardimension method)": [[846, "compas_timber.planning.LinearDimension.to_json"]], "to_jsonstring() (compas_timber.planning.lineardimension method)": [[847, "compas_timber.planning.LinearDimension.to_jsonstring"]], "transform() (compas_timber.planning.lineardimension method)": [[848, "compas_timber.planning.LinearDimension.transform"]], "validate_data() (compas_timber.planning.lineardimension class method)": [[849, "compas_timber.planning.LinearDimension.validate_data"]], "model3d (class in compas_timber.planning)": [[850, "compas_timber.planning.Model3d"]], "tostring() (compas_timber.planning.model3d method)": [[851, "compas_timber.planning.Model3d.ToString"]], "copy() (compas_timber.planning.model3d method)": [[852, "compas_timber.planning.Model3d.copy"]], "from_json() (compas_timber.planning.model3d class method)": [[853, "compas_timber.planning.Model3d.from_json"]], "from_jsonstring() (compas_timber.planning.model3d class method)": [[854, "compas_timber.planning.Model3d.from_jsonstring"]], "sha256() (compas_timber.planning.model3d method)": [[855, "compas_timber.planning.Model3d.sha256"]], "to_json() (compas_timber.planning.model3d method)": [[856, "compas_timber.planning.Model3d.to_json"]], "to_jsonstring() (compas_timber.planning.model3d method)": [[857, "compas_timber.planning.Model3d.to_jsonstring"]], "transform() (compas_timber.planning.model3d method)": [[858, "compas_timber.planning.Model3d.transform"]], "validate_data() (compas_timber.planning.model3d class method)": [[859, "compas_timber.planning.Model3d.validate_data"]], "simplesequencegenerator (class in compas_timber.planning)": [[860, "compas_timber.planning.SimpleSequenceGenerator"]], "step (class in compas_timber.planning)": [[861, "compas_timber.planning.Step"]], "tostring() (compas_timber.planning.step method)": [[862, "compas_timber.planning.Step.ToString"]], "copy() (compas_timber.planning.step method)": [[863, "compas_timber.planning.Step.copy"]], "from_json() (compas_timber.planning.step class method)": [[864, "compas_timber.planning.Step.from_json"]], "from_jsonstring() (compas_timber.planning.step class method)": [[865, "compas_timber.planning.Step.from_jsonstring"]], "sha256() (compas_timber.planning.step method)": [[866, "compas_timber.planning.Step.sha256"]], "to_json() (compas_timber.planning.step method)": [[867, "compas_timber.planning.Step.to_json"]], "to_jsonstring() (compas_timber.planning.step method)": [[868, "compas_timber.planning.Step.to_jsonstring"]], "transform() (compas_timber.planning.step method)": [[869, "compas_timber.planning.Step.transform"]], "validate_data() (compas_timber.planning.step class method)": [[870, "compas_timber.planning.Step.validate_data"]], "text3d (class in compas_timber.planning)": [[871, "compas_timber.planning.Text3d"]], "tostring() (compas_timber.planning.text3d method)": [[872, "compas_timber.planning.Text3d.ToString"]], "copy() (compas_timber.planning.text3d method)": [[873, "compas_timber.planning.Text3d.copy"]], "from_json() (compas_timber.planning.text3d class method)": [[874, "compas_timber.planning.Text3d.from_json"]], "from_jsonstring() (compas_timber.planning.text3d class method)": [[875, "compas_timber.planning.Text3d.from_jsonstring"]], "sha256() (compas_timber.planning.text3d method)": [[876, "compas_timber.planning.Text3d.sha256"]], "to_json() (compas_timber.planning.text3d method)": [[877, "compas_timber.planning.Text3d.to_json"]], "to_jsonstring() (compas_timber.planning.text3d method)": [[878, "compas_timber.planning.Text3d.to_jsonstring"]], "transform() (compas_timber.planning.text3d method)": [[879, "compas_timber.planning.Text3d.transform"]], "validate_data() (compas_timber.planning.text3d class method)": [[880, "compas_timber.planning.Text3d.validate_data"]], "find_neighboring_elements() (in module compas_timber.rhino)": [[881, "compas_timber.rhino.find_neighboring_elements"]]}})