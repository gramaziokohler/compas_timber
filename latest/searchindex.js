Search.setIndex({"docnames": ["api", "api/compas_timber.connections", "api/compas_timber.design", "api/compas_timber.elements", "api/compas_timber.errors", "api/compas_timber.fabrication", "api/compas_timber.ghpython", "api/compas_timber.model", "api/compas_timber.planning", "api/compas_timber.rhino", "api/generated/compas_timber.connections.BallNodeJoint", "api/generated/compas_timber.connections.BallNodeJoint.ToString", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions", "api/generated/compas_timber.connections.BallNodeJoint.add_features", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility", "api/generated/compas_timber.connections.BallNodeJoint.copy", "api/generated/compas_timber.connections.BallNodeJoint.create", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies", "api/generated/compas_timber.connections.BallNodeJoint.from_json", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.promote_cluster", "api/generated/compas_timber.connections.BallNodeJoint.promote_joint_candidate", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.BallNodeJoint.sha256", "api/generated/compas_timber.connections.BallNodeJoint.to_json", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.validate_data", "api/generated/compas_timber.connections.BeamGroupAnalyzer", "api/generated/compas_timber.connections.BeamGroupAnalyzer.find", "api/generated/compas_timber.connections.Cluster", "api/generated/compas_timber.connections.CompositeAnalyzer", "api/generated/compas_timber.connections.CompositeAnalyzer.find", "api/generated/compas_timber.connections.CompositeAnalyzer.from_model", "api/generated/compas_timber.connections.ConnectionSolver", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs", "api/generated/compas_timber.connections.ConnectionSolver.find_topology", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology", "api/generated/compas_timber.connections.Joint", "api/generated/compas_timber.connections.Joint.ToString", "api/generated/compas_timber.connections.Joint.add_extensions", "api/generated/compas_timber.connections.Joint.add_features", "api/generated/compas_timber.connections.Joint.check_elements_compatibility", "api/generated/compas_timber.connections.Joint.copy", "api/generated/compas_timber.connections.Joint.create", "api/generated/compas_timber.connections.Joint.element_count_complies", "api/generated/compas_timber.connections.Joint.from_json", "api/generated/compas_timber.connections.Joint.from_jsonstring", "api/generated/compas_timber.connections.Joint.promote_cluster", "api/generated/compas_timber.connections.Joint.promote_joint_candidate", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys", "api/generated/compas_timber.connections.Joint.sha256", "api/generated/compas_timber.connections.Joint.to_json", "api/generated/compas_timber.connections.Joint.to_jsonstring", "api/generated/compas_timber.connections.Joint.validate_data", "api/generated/compas_timber.connections.JointTopology", "api/generated/compas_timber.connections.JointTopology.get_name", "api/generated/compas_timber.connections.LButtJoint", "api/generated/compas_timber.connections.LButtJoint.ToString", "api/generated/compas_timber.connections.LButtJoint.add_extensions", "api/generated/compas_timber.connections.LButtJoint.add_features", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LButtJoint.copy", "api/generated/compas_timber.connections.LButtJoint.create", "api/generated/compas_timber.connections.LButtJoint.element_count_complies", "api/generated/compas_timber.connections.LButtJoint.from_json", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring", "api/generated/compas_timber.connections.LButtJoint.promote_cluster", "api/generated/compas_timber.connections.LButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LButtJoint.sha256", "api/generated/compas_timber.connections.LButtJoint.to_json", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles", "api/generated/compas_timber.connections.LButtJoint.validate_data", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.promote_cluster", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data", "api/generated/compas_timber.connections.LLapJoint", "api/generated/compas_timber.connections.LLapJoint.ToString", "api/generated/compas_timber.connections.LLapJoint.add_extensions", "api/generated/compas_timber.connections.LLapJoint.add_features", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LLapJoint.copy", "api/generated/compas_timber.connections.LLapJoint.create", "api/generated/compas_timber.connections.LLapJoint.element_count_complies", "api/generated/compas_timber.connections.LLapJoint.from_json", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LLapJoint.promote_cluster", "api/generated/compas_timber.connections.LLapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LLapJoint.sha256", "api/generated/compas_timber.connections.LLapJoint.to_json", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LLapJoint.validate_data", "api/generated/compas_timber.connections.LMiterJoint", "api/generated/compas_timber.connections.LMiterJoint.ToString", "api/generated/compas_timber.connections.LMiterJoint.add_extensions", "api/generated/compas_timber.connections.LMiterJoint.add_features", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LMiterJoint.copy", "api/generated/compas_timber.connections.LMiterJoint.create", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies", "api/generated/compas_timber.connections.LMiterJoint.from_json", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes", "api/generated/compas_timber.connections.LMiterJoint.promote_cluster", "api/generated/compas_timber.connections.LMiterJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LMiterJoint.sha256", "api/generated/compas_timber.connections.LMiterJoint.to_json", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.validate_data", "api/generated/compas_timber.connections.LapJoint", "api/generated/compas_timber.connections.LapJoint.ToString", "api/generated/compas_timber.connections.LapJoint.add_extensions", "api/generated/compas_timber.connections.LapJoint.add_features", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LapJoint.copy", "api/generated/compas_timber.connections.LapJoint.create", "api/generated/compas_timber.connections.LapJoint.element_count_complies", "api/generated/compas_timber.connections.LapJoint.from_json", "api/generated/compas_timber.connections.LapJoint.from_jsonstring", "api/generated/compas_timber.connections.LapJoint.promote_cluster", "api/generated/compas_timber.connections.LapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LapJoint.sha256", "api/generated/compas_timber.connections.LapJoint.to_json", "api/generated/compas_timber.connections.LapJoint.to_jsonstring", "api/generated/compas_timber.connections.LapJoint.validate_data", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.find", "api/generated/compas_timber.connections.QuadAnalyzer", "api/generated/compas_timber.connections.TBirdsmouthJoint", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy", "api/generated/compas_timber.connections.TBirdsmouthJoint.create", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.promote_cluster", "api/generated/compas_timber.connections.TBirdsmouthJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data", "api/generated/compas_timber.connections.TButtJoint", "api/generated/compas_timber.connections.TButtJoint.ToString", "api/generated/compas_timber.connections.TButtJoint.add_extensions", "api/generated/compas_timber.connections.TButtJoint.add_features", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TButtJoint.copy", "api/generated/compas_timber.connections.TButtJoint.create", "api/generated/compas_timber.connections.TButtJoint.element_count_complies", "api/generated/compas_timber.connections.TButtJoint.from_json", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring", "api/generated/compas_timber.connections.TButtJoint.promote_cluster", "api/generated/compas_timber.connections.TButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TButtJoint.sha256", "api/generated/compas_timber.connections.TButtJoint.to_json", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring", "api/generated/compas_timber.connections.TButtJoint.validate_data", "api/generated/compas_timber.connections.TDovetailJoint", "api/generated/compas_timber.connections.TDovetailJoint.ToString", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions", "api/generated/compas_timber.connections.TDovetailJoint.add_features", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TDovetailJoint.copy", "api/generated/compas_timber.connections.TDovetailJoint.create", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies", "api/generated/compas_timber.connections.TDovetailJoint.from_json", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.promote_cluster", "api/generated/compas_timber.connections.TDovetailJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TDovetailJoint.sha256", "api/generated/compas_timber.connections.TDovetailJoint.to_json", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.validate_data", "api/generated/compas_timber.connections.TLapJoint", "api/generated/compas_timber.connections.TLapJoint.ToString", "api/generated/compas_timber.connections.TLapJoint.add_extensions", "api/generated/compas_timber.connections.TLapJoint.add_features", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TLapJoint.copy", "api/generated/compas_timber.connections.TLapJoint.create", "api/generated/compas_timber.connections.TLapJoint.element_count_complies", "api/generated/compas_timber.connections.TLapJoint.from_json", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring", "api/generated/compas_timber.connections.TLapJoint.promote_cluster", "api/generated/compas_timber.connections.TLapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TLapJoint.sha256", "api/generated/compas_timber.connections.TLapJoint.to_json", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring", "api/generated/compas_timber.connections.TLapJoint.validate_data", "api/generated/compas_timber.connections.TStepJoint", "api/generated/compas_timber.connections.TStepJoint.ToString", "api/generated/compas_timber.connections.TStepJoint.add_extensions", "api/generated/compas_timber.connections.TStepJoint.add_features", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TStepJoint.copy", "api/generated/compas_timber.connections.TStepJoint.create", "api/generated/compas_timber.connections.TStepJoint.element_count_complies", "api/generated/compas_timber.connections.TStepJoint.from_json", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring", "api/generated/compas_timber.connections.TStepJoint.promote_cluster", "api/generated/compas_timber.connections.TStepJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TStepJoint.set_step_depths", "api/generated/compas_timber.connections.TStepJoint.sha256", "api/generated/compas_timber.connections.TStepJoint.to_json", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring", "api/generated/compas_timber.connections.TStepJoint.validate_data", "api/generated/compas_timber.connections.TenonMortiseJoint", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TenonMortiseJoint.copy", "api/generated/compas_timber.connections.TenonMortiseJoint.create", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.promote_cluster", "api/generated/compas_timber.connections.TenonMortiseJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data", "api/generated/compas_timber.connections.TripletAnalyzer", "api/generated/compas_timber.connections.XLapJoint", "api/generated/compas_timber.connections.XLapJoint.ToString", "api/generated/compas_timber.connections.XLapJoint.add_extensions", "api/generated/compas_timber.connections.XLapJoint.add_features", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XLapJoint.copy", "api/generated/compas_timber.connections.XLapJoint.create", "api/generated/compas_timber.connections.XLapJoint.element_count_complies", "api/generated/compas_timber.connections.XLapJoint.from_json", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring", "api/generated/compas_timber.connections.XLapJoint.promote_cluster", "api/generated/compas_timber.connections.XLapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XLapJoint.sha256", "api/generated/compas_timber.connections.XLapJoint.to_json", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring", "api/generated/compas_timber.connections.XLapJoint.validate_data", "api/generated/compas_timber.connections.XNotchJoint", "api/generated/compas_timber.connections.XNotchJoint.ToString", "api/generated/compas_timber.connections.XNotchJoint.add_extensions", "api/generated/compas_timber.connections.XNotchJoint.add_features", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XNotchJoint.copy", "api/generated/compas_timber.connections.XNotchJoint.create", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies", "api/generated/compas_timber.connections.XNotchJoint.from_json", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.promote_cluster", "api/generated/compas_timber.connections.XNotchJoint.promote_joint_candidate", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XNotchJoint.sha256", "api/generated/compas_timber.connections.XNotchJoint.to_json", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.validate_data", "api/generated/compas_timber.connections.YButtJoint", "api/generated/compas_timber.connections.YButtJoint.ToString", "api/generated/compas_timber.connections.YButtJoint.add_extensions", "api/generated/compas_timber.connections.YButtJoint.add_features", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.YButtJoint.copy", "api/generated/compas_timber.connections.YButtJoint.create", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.element_count_complies", "api/generated/compas_timber.connections.YButtJoint.from_json", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.promote_cluster", "api/generated/compas_timber.connections.YButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.YButtJoint.sha256", "api/generated/compas_timber.connections.YButtJoint.to_json", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring", "api/generated/compas_timber.connections.YButtJoint.validate_data", "api/generated/compas_timber.connections.find_neighboring_elements", "api/generated/compas_timber.design.CategoryRule", "api/generated/compas_timber.design.CategoryRule.ToString", "api/generated/compas_timber.design.CategoryRule.comply", "api/generated/compas_timber.design.CategoryRule.get_category_rules", "api/generated/compas_timber.design.CategoryRule.get_direct_rules", "api/generated/compas_timber.design.CategoryRule.get_topology_rules", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.CategoryRule.reorder", "api/generated/compas_timber.design.DebugInfomation", "api/generated/compas_timber.design.DebugInfomation.ToString", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error", "api/generated/compas_timber.design.DebugInfomation.add_feature_error", "api/generated/compas_timber.design.DebugInfomation.add_joint_error", "api/generated/compas_timber.design.DirectRule", "api/generated/compas_timber.design.DirectRule.ToString", "api/generated/compas_timber.design.DirectRule.comply", "api/generated/compas_timber.design.DirectRule.contains", "api/generated/compas_timber.design.DirectRule.get_category_rules", "api/generated/compas_timber.design.DirectRule.get_direct_rules", "api/generated/compas_timber.design.DirectRule.get_topology_rules", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.FeatureDefinition", "api/generated/compas_timber.design.FeatureDefinition.ToString", "api/generated/compas_timber.design.JointDefinition", "api/generated/compas_timber.design.JointDefinition.ToString", "api/generated/compas_timber.design.JointDefinition.is_identical", "api/generated/compas_timber.design.JointDefinition.match", "api/generated/compas_timber.design.JointRule", "api/generated/compas_timber.design.JointRule.comply", "api/generated/compas_timber.design.JointRule.get_category_rules", "api/generated/compas_timber.design.JointRule.get_direct_rules", "api/generated/compas_timber.design.JointRule.get_topology_rules", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.SurfaceModel", "api/generated/compas_timber.design.SurfaceModel.beam_category_names", "api/generated/compas_timber.design.SurfaceModel.create_model", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements", "api/generated/compas_timber.design.SurfaceModel.generate_frame", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams", "api/generated/compas_timber.design.SurfaceModel.generate_plates", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines", "api/generated/compas_timber.design.SurfaceModel.generate_studs", "api/generated/compas_timber.design.SurfaceModel.generate_windows", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices", "api/generated/compas_timber.design.SurfaceModel.offset_elements", "api/generated/compas_timber.design.SurfaceModel.parse_loops", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs", "api/generated/compas_timber.design.SurfaceModel.trim_studs", "api/generated/compas_timber.design.TopologyRule", "api/generated/compas_timber.design.TopologyRule.ToString", "api/generated/compas_timber.design.TopologyRule.comply", "api/generated/compas_timber.design.TopologyRule.get_category_rules", "api/generated/compas_timber.design.TopologyRule.get_direct_rules", "api/generated/compas_timber.design.TopologyRule.get_topology_rules", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.guess_joint_topology_2beams", "api/generated/compas_timber.design.set_default_joints", "api/generated/compas_timber.elements.Beam", "api/generated/compas_timber.elements.Beam.ToString", "api/generated/compas_timber.elements.Beam.add_blank_extension", "api/generated/compas_timber.elements.Beam.add_feature", "api/generated/compas_timber.elements.Beam.add_features", "api/generated/compas_timber.elements.Beam.back_side", "api/generated/compas_timber.elements.Beam.compute_aabb", "api/generated/compas_timber.elements.Beam.compute_collision_mesh", "api/generated/compas_timber.elements.Beam.compute_geometry", "api/generated/compas_timber.elements.Beam.compute_obb", "api/generated/compas_timber.elements.Beam.compute_worldtransformation", "api/generated/compas_timber.elements.Beam.copy", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point", "api/generated/compas_timber.elements.Beam.extension_to_plane", "api/generated/compas_timber.elements.Beam.from_centerline", "api/generated/compas_timber.elements.Beam.from_endpoints", "api/generated/compas_timber.elements.Beam.from_json", "api/generated/compas_timber.elements.Beam.from_jsonstring", "api/generated/compas_timber.elements.Beam.front_side", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side", "api/generated/compas_timber.elements.Beam.opp_side", "api/generated/compas_timber.elements.Beam.remove_blank_extension", "api/generated/compas_timber.elements.Beam.remove_features", "api/generated/compas_timber.elements.Beam.reset", "api/generated/compas_timber.elements.Beam.sha256", "api/generated/compas_timber.elements.Beam.side_as_surface", "api/generated/compas_timber.elements.Beam.to_json", "api/generated/compas_timber.elements.Beam.to_jsonstring", "api/generated/compas_timber.elements.Beam.transform", "api/generated/compas_timber.elements.Beam.transformed", "api/generated/compas_timber.elements.Beam.validate_data", "api/generated/compas_timber.elements.Fastener", "api/generated/compas_timber.elements.Fastener.ToString", "api/generated/compas_timber.elements.Fastener.add_feature", "api/generated/compas_timber.elements.Fastener.add_features", "api/generated/compas_timber.elements.Fastener.compute_aabb", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh", "api/generated/compas_timber.elements.Fastener.compute_geometry", "api/generated/compas_timber.elements.Fastener.compute_obb", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation", "api/generated/compas_timber.elements.Fastener.copy", "api/generated/compas_timber.elements.Fastener.from_json", "api/generated/compas_timber.elements.Fastener.from_jsonstring", "api/generated/compas_timber.elements.Fastener.remove_blank_extension", "api/generated/compas_timber.elements.Fastener.remove_features", "api/generated/compas_timber.elements.Fastener.reset", "api/generated/compas_timber.elements.Fastener.sha256", "api/generated/compas_timber.elements.Fastener.to_json", "api/generated/compas_timber.elements.Fastener.to_jsonstring", "api/generated/compas_timber.elements.Fastener.transform", "api/generated/compas_timber.elements.Fastener.transformed", "api/generated/compas_timber.elements.Fastener.validate_data", "api/generated/compas_timber.elements.FastenerTimberInterface", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString", "api/generated/compas_timber.elements.FastenerTimberInterface.copy", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data", "api/generated/compas_timber.elements.Plate", "api/generated/compas_timber.elements.Plate.ToString", "api/generated/compas_timber.elements.Plate.add_feature", "api/generated/compas_timber.elements.Plate.add_features", "api/generated/compas_timber.elements.Plate.add_interface", "api/generated/compas_timber.elements.Plate.check_outlines", "api/generated/compas_timber.elements.Plate.compute_aabb", "api/generated/compas_timber.elements.Plate.compute_collision_mesh", "api/generated/compas_timber.elements.Plate.compute_geometry", "api/generated/compas_timber.elements.Plate.compute_obb", "api/generated/compas_timber.elements.Plate.compute_worldtransformation", "api/generated/compas_timber.elements.Plate.copy", "api/generated/compas_timber.elements.Plate.from_brep", "api/generated/compas_timber.elements.Plate.from_json", "api/generated/compas_timber.elements.Plate.from_jsonstring", "api/generated/compas_timber.elements.Plate.from_outline_thickness", "api/generated/compas_timber.elements.Plate.opp_side", "api/generated/compas_timber.elements.Plate.remove_blank_extension", "api/generated/compas_timber.elements.Plate.remove_features", "api/generated/compas_timber.elements.Plate.reset", "api/generated/compas_timber.elements.Plate.sha256", "api/generated/compas_timber.elements.Plate.side_as_surface", "api/generated/compas_timber.elements.Plate.to_json", "api/generated/compas_timber.elements.Plate.to_jsonstring", "api/generated/compas_timber.elements.Plate.transform", "api/generated/compas_timber.elements.Plate.transformed", "api/generated/compas_timber.elements.Plate.validate_data", "api/generated/compas_timber.elements.TimberElement", "api/generated/compas_timber.elements.TimberElement.ToString", "api/generated/compas_timber.elements.TimberElement.add_feature", "api/generated/compas_timber.elements.TimberElement.add_features", "api/generated/compas_timber.elements.TimberElement.compute_aabb", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh", "api/generated/compas_timber.elements.TimberElement.compute_geometry", "api/generated/compas_timber.elements.TimberElement.compute_obb", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation", "api/generated/compas_timber.elements.TimberElement.copy", "api/generated/compas_timber.elements.TimberElement.from_json", "api/generated/compas_timber.elements.TimberElement.from_jsonstring", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension", "api/generated/compas_timber.elements.TimberElement.remove_features", "api/generated/compas_timber.elements.TimberElement.reset", "api/generated/compas_timber.elements.TimberElement.sha256", "api/generated/compas_timber.elements.TimberElement.to_json", "api/generated/compas_timber.elements.TimberElement.to_jsonstring", "api/generated/compas_timber.elements.TimberElement.transform", "api/generated/compas_timber.elements.TimberElement.transformed", "api/generated/compas_timber.elements.TimberElement.validate_data", "api/generated/compas_timber.elements.Wall", "api/generated/compas_timber.elements.Wall.ToString", "api/generated/compas_timber.elements.Wall.add_feature", "api/generated/compas_timber.elements.Wall.add_features", "api/generated/compas_timber.elements.Wall.compute_aabb", "api/generated/compas_timber.elements.Wall.compute_collision_mesh", "api/generated/compas_timber.elements.Wall.compute_geometry", "api/generated/compas_timber.elements.Wall.compute_obb", "api/generated/compas_timber.elements.Wall.compute_worldtransformation", "api/generated/compas_timber.elements.Wall.copy", "api/generated/compas_timber.elements.Wall.from_boundary", "api/generated/compas_timber.elements.Wall.from_brep", "api/generated/compas_timber.elements.Wall.from_json", "api/generated/compas_timber.elements.Wall.from_jsonstring", "api/generated/compas_timber.elements.Wall.remove_blank_extension", "api/generated/compas_timber.elements.Wall.remove_features", "api/generated/compas_timber.elements.Wall.reset", "api/generated/compas_timber.elements.Wall.rotate", "api/generated/compas_timber.elements.Wall.sha256", "api/generated/compas_timber.elements.Wall.to_json", "api/generated/compas_timber.elements.Wall.to_jsonstring", "api/generated/compas_timber.elements.Wall.transform", "api/generated/compas_timber.elements.Wall.transformed", "api/generated/compas_timber.elements.Wall.validate_data", "api/generated/compas_timber.errors.BeamJoiningError", "api/generated/compas_timber.errors.FastenerApplicationError", "api/generated/compas_timber.errors.FeatureApplicationError", "api/generated/compas_timber.fabrication.BTLxPart", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face", "api/generated/compas_timber.fabrication.BTLxProcessing", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing", "api/generated/compas_timber.fabrication.BTLxProcessing.copy", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data", "api/generated/compas_timber.fabrication.BTLxWriter", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer", "api/generated/compas_timber.fabrication.BTLxWriter.write", "api/generated/compas_timber.fabrication.DoubleCut", "api/generated/compas_timber.fabrication.DoubleCut.ToString", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing", "api/generated/compas_timber.fabrication.DoubleCut.apply", "api/generated/compas_timber.fabrication.DoubleCut.copy", "api/generated/compas_timber.fabrication.DoubleCut.from_json", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.scale", "api/generated/compas_timber.fabrication.DoubleCut.scaled", "api/generated/compas_timber.fabrication.DoubleCut.sha256", "api/generated/compas_timber.fabrication.DoubleCut.to_json", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.validate_data", "api/generated/compas_timber.fabrication.DovetailMortise", "api/generated/compas_timber.fabrication.DovetailMortise.ToString", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailMortise.apply", "api/generated/compas_timber.fabrication.DovetailMortise.copy", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_json", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.scale", "api/generated/compas_timber.fabrication.DovetailMortise.scaled", "api/generated/compas_timber.fabrication.DovetailMortise.sha256", "api/generated/compas_timber.fabrication.DovetailMortise.to_json", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data", "api/generated/compas_timber.fabrication.DovetailTenon", "api/generated/compas_timber.fabrication.DovetailTenon.ToString", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailTenon.apply", "api/generated/compas_timber.fabrication.DovetailTenon.copy", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.from_json", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.scale", "api/generated/compas_timber.fabrication.DovetailTenon.scaled", "api/generated/compas_timber.fabrication.DovetailTenon.sha256", "api/generated/compas_timber.fabrication.DovetailTenon.to_json", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data", "api/generated/compas_timber.fabrication.Drilling", "api/generated/compas_timber.fabrication.Drilling.ToString", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing", "api/generated/compas_timber.fabrication.Drilling.apply", "api/generated/compas_timber.fabrication.Drilling.copy", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element", "api/generated/compas_timber.fabrication.Drilling.from_json", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element", "api/generated/compas_timber.fabrication.Drilling.scale", "api/generated/compas_timber.fabrication.Drilling.scaled", "api/generated/compas_timber.fabrication.Drilling.sha256", "api/generated/compas_timber.fabrication.Drilling.to_json", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring", "api/generated/compas_timber.fabrication.Drilling.validate_data", "api/generated/compas_timber.fabrication.EdgePositionType", "api/generated/compas_timber.fabrication.FrenchRidgeLap", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data", "api/generated/compas_timber.fabrication.JackRafterCut", "api/generated/compas_timber.fabrication.JackRafterCut.ToString", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing", "api/generated/compas_timber.fabrication.JackRafterCut.apply", "api/generated/compas_timber.fabrication.JackRafterCut.copy", "api/generated/compas_timber.fabrication.JackRafterCut.from_json", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.scale", "api/generated/compas_timber.fabrication.JackRafterCut.scaled", "api/generated/compas_timber.fabrication.JackRafterCut.sha256", "api/generated/compas_timber.fabrication.JackRafterCut.to_json", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data", "api/generated/compas_timber.fabrication.Lap", "api/generated/compas_timber.fabrication.Lap.ToString", "api/generated/compas_timber.fabrication.Lap.add_subprocessing", "api/generated/compas_timber.fabrication.Lap.apply", "api/generated/compas_timber.fabrication.Lap.copy", "api/generated/compas_timber.fabrication.Lap.from_json", "api/generated/compas_timber.fabrication.Lap.from_jsonstring", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam", "api/generated/compas_timber.fabrication.Lap.scale", "api/generated/compas_timber.fabrication.Lap.scaled", "api/generated/compas_timber.fabrication.Lap.sha256", "api/generated/compas_timber.fabrication.Lap.to_json", "api/generated/compas_timber.fabrication.Lap.to_jsonstring", "api/generated/compas_timber.fabrication.Lap.validate_data", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.LimitationTopType", "api/generated/compas_timber.fabrication.LongitudinalCut", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing", "api/generated/compas_timber.fabrication.LongitudinalCut.apply", "api/generated/compas_timber.fabrication.LongitudinalCut.copy", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.MachiningLimits", "api/generated/compas_timber.fabrication.Mortise", "api/generated/compas_timber.fabrication.Mortise.ToString", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing", "api/generated/compas_timber.fabrication.Mortise.apply", "api/generated/compas_timber.fabrication.Mortise.copy", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_json", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring", "api/generated/compas_timber.fabrication.Mortise.scale", "api/generated/compas_timber.fabrication.Mortise.scaled", "api/generated/compas_timber.fabrication.Mortise.sha256", "api/generated/compas_timber.fabrication.Mortise.to_json", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring", "api/generated/compas_timber.fabrication.Mortise.validate_data", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.OrientationType", "api/generated/compas_timber.fabrication.Pocket", "api/generated/compas_timber.fabrication.Pocket.ToString", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing", "api/generated/compas_timber.fabrication.Pocket.apply", "api/generated/compas_timber.fabrication.Pocket.copy", "api/generated/compas_timber.fabrication.Pocket.from_json", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element", "api/generated/compas_timber.fabrication.Pocket.scale", "api/generated/compas_timber.fabrication.Pocket.scaled", "api/generated/compas_timber.fabrication.Pocket.sha256", "api/generated/compas_timber.fabrication.Pocket.to_json", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring", "api/generated/compas_timber.fabrication.Pocket.validate_data", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element", "api/generated/compas_timber.fabrication.Slot", "api/generated/compas_timber.fabrication.Slot.ToString", "api/generated/compas_timber.fabrication.Slot.add_subprocessing", "api/generated/compas_timber.fabrication.Slot.apply", "api/generated/compas_timber.fabrication.Slot.copy", "api/generated/compas_timber.fabrication.Slot.from_json", "api/generated/compas_timber.fabrication.Slot.from_jsonstring", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam", "api/generated/compas_timber.fabrication.Slot.scale", "api/generated/compas_timber.fabrication.Slot.scaled", "api/generated/compas_timber.fabrication.Slot.sha256", "api/generated/compas_timber.fabrication.Slot.to_json", "api/generated/compas_timber.fabrication.Slot.to_jsonstring", "api/generated/compas_timber.fabrication.Slot.validate_data", "api/generated/compas_timber.fabrication.StepJoint", "api/generated/compas_timber.fabrication.StepJoint.ToString", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing", "api/generated/compas_timber.fabrication.StepJoint.add_tenon", "api/generated/compas_timber.fabrication.StepJoint.apply", "api/generated/compas_timber.fabrication.StepJoint.copy", "api/generated/compas_timber.fabrication.StepJoint.from_json", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.scale", "api/generated/compas_timber.fabrication.StepJoint.scaled", "api/generated/compas_timber.fabrication.StepJoint.sha256", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.to_json", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.validate_data", "api/generated/compas_timber.fabrication.StepJointNotch", "api/generated/compas_timber.fabrication.StepJointNotch.ToString", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing", "api/generated/compas_timber.fabrication.StepJointNotch.apply", "api/generated/compas_timber.fabrication.StepJointNotch.copy", "api/generated/compas_timber.fabrication.StepJointNotch.from_json", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.scale", "api/generated/compas_timber.fabrication.StepJointNotch.scaled", "api/generated/compas_timber.fabrication.StepJointNotch.sha256", "api/generated/compas_timber.fabrication.StepJointNotch.to_json", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data", "api/generated/compas_timber.fabrication.StepShapeType", "api/generated/compas_timber.fabrication.Tenon", "api/generated/compas_timber.fabrication.Tenon.ToString", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing", "api/generated/compas_timber.fabrication.Tenon.apply", "api/generated/compas_timber.fabrication.Tenon.copy", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Tenon.from_json", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.Tenon.scale", "api/generated/compas_timber.fabrication.Tenon.scaled", "api/generated/compas_timber.fabrication.Tenon.sha256", "api/generated/compas_timber.fabrication.Tenon.to_json", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring", "api/generated/compas_timber.fabrication.Tenon.validate_data", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.TenonShapeType", "api/generated/compas_timber.ghpython.add_gh_param", "api/generated/compas_timber.ghpython.clear_gh_params", "api/generated/compas_timber.ghpython.get_leaf_subclasses", "api/generated/compas_timber.ghpython.item_input_valid", "api/generated/compas_timber.ghpython.list_input_valid", "api/generated/compas_timber.ghpython.manage_dynamic_params", "api/generated/compas_timber.ghpython.rename_gh_input", "api/generated/compas_timber.model.TimberModel", "api/generated/compas_timber.model.TimberModel.ToString", "api/generated/compas_timber.model.TimberModel.add_element", "api/generated/compas_timber.model.TimberModel.add_elements", "api/generated/compas_timber.model.TimberModel.add_group", "api/generated/compas_timber.model.TimberModel.add_group_element", "api/generated/compas_timber.model.TimberModel.add_interaction", "api/generated/compas_timber.model.TimberModel.add_joint", "api/generated/compas_timber.model.TimberModel.add_material", "api/generated/compas_timber.model.TimberModel.assign_material", "api/generated/compas_timber.model.TimberModel.compute_aabb", "api/generated/compas_timber.model.TimberModel.compute_obb", "api/generated/compas_timber.model.TimberModel.connect_adjacent_beams", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls", "api/generated/compas_timber.model.TimberModel.copy", "api/generated/compas_timber.model.TimberModel.element_by_guid", "api/generated/compas_timber.model.TimberModel.elements", "api/generated/compas_timber.model.TimberModel.elements_connected_by", "api/generated/compas_timber.model.TimberModel.from_json", "api/generated/compas_timber.model.TimberModel.from_jsonstring", "api/generated/compas_timber.model.TimberModel.get_elements_in_group", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element", "api/generated/compas_timber.model.TimberModel.has_element", "api/generated/compas_timber.model.TimberModel.has_group", "api/generated/compas_timber.model.TimberModel.has_interaction", "api/generated/compas_timber.model.TimberModel.has_material", "api/generated/compas_timber.model.TimberModel.interactions", "api/generated/compas_timber.model.TimberModel.materials", "api/generated/compas_timber.model.TimberModel.process_joinery", "api/generated/compas_timber.model.TimberModel.remove_element", "api/generated/compas_timber.model.TimberModel.remove_interaction", "api/generated/compas_timber.model.TimberModel.remove_joint", "api/generated/compas_timber.model.TimberModel.rotate", "api/generated/compas_timber.model.TimberModel.rotated", "api/generated/compas_timber.model.TimberModel.scale", "api/generated/compas_timber.model.TimberModel.scaled", "api/generated/compas_timber.model.TimberModel.set_topologies", "api/generated/compas_timber.model.TimberModel.sha256", "api/generated/compas_timber.model.TimberModel.to_json", "api/generated/compas_timber.model.TimberModel.to_jsonstring", "api/generated/compas_timber.model.TimberModel.transform", "api/generated/compas_timber.model.TimberModel.transform_numpy", "api/generated/compas_timber.model.TimberModel.transformed", "api/generated/compas_timber.model.TimberModel.transformed_numpy", "api/generated/compas_timber.model.TimberModel.translate", "api/generated/compas_timber.model.TimberModel.translated", "api/generated/compas_timber.model.TimberModel.validate_data", "api/generated/compas_timber.planning.Actor", "api/generated/compas_timber.planning.Actor.get_name", "api/generated/compas_timber.planning.BuildingPlan", "api/generated/compas_timber.planning.BuildingPlan.ToString", "api/generated/compas_timber.planning.BuildingPlan.add_step", "api/generated/compas_timber.planning.BuildingPlan.copy", "api/generated/compas_timber.planning.BuildingPlan.from_json", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.sha256", "api/generated/compas_timber.planning.BuildingPlan.to_json", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.validate_data", "api/generated/compas_timber.planning.BuildingPlanParser", "api/generated/compas_timber.planning.BuildingPlanParser.parse", "api/generated/compas_timber.planning.BuildingPlanParser.serialize", "api/generated/compas_timber.planning.Instruction", "api/generated/compas_timber.planning.Instruction.ToString", "api/generated/compas_timber.planning.Instruction.copy", "api/generated/compas_timber.planning.Instruction.from_json", "api/generated/compas_timber.planning.Instruction.from_jsonstring", "api/generated/compas_timber.planning.Instruction.sha256", "api/generated/compas_timber.planning.Instruction.to_json", "api/generated/compas_timber.planning.Instruction.to_jsonstring", "api/generated/compas_timber.planning.Instruction.transform", "api/generated/compas_timber.planning.Instruction.validate_data", "api/generated/compas_timber.planning.LinearDimension", "api/generated/compas_timber.planning.LinearDimension.ToString", "api/generated/compas_timber.planning.LinearDimension.copy", "api/generated/compas_timber.planning.LinearDimension.from_json", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring", "api/generated/compas_timber.planning.LinearDimension.sha256", "api/generated/compas_timber.planning.LinearDimension.to_json", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring", "api/generated/compas_timber.planning.LinearDimension.transform", "api/generated/compas_timber.planning.LinearDimension.validate_data", "api/generated/compas_timber.planning.Model3d", "api/generated/compas_timber.planning.Model3d.ToString", "api/generated/compas_timber.planning.Model3d.copy", "api/generated/compas_timber.planning.Model3d.from_json", "api/generated/compas_timber.planning.Model3d.from_jsonstring", "api/generated/compas_timber.planning.Model3d.sha256", "api/generated/compas_timber.planning.Model3d.to_json", "api/generated/compas_timber.planning.Model3d.to_jsonstring", "api/generated/compas_timber.planning.Model3d.transform", "api/generated/compas_timber.planning.Model3d.validate_data", "api/generated/compas_timber.planning.SimpleSequenceGenerator", "api/generated/compas_timber.planning.Step", "api/generated/compas_timber.planning.Step.ToString", "api/generated/compas_timber.planning.Step.copy", "api/generated/compas_timber.planning.Step.from_json", "api/generated/compas_timber.planning.Step.from_jsonstring", "api/generated/compas_timber.planning.Step.sha256", "api/generated/compas_timber.planning.Step.to_json", "api/generated/compas_timber.planning.Step.to_jsonstring", "api/generated/compas_timber.planning.Step.transform", "api/generated/compas_timber.planning.Step.validate_data", "api/generated/compas_timber.planning.Text3d", "api/generated/compas_timber.planning.Text3d.ToString", "api/generated/compas_timber.planning.Text3d.copy", "api/generated/compas_timber.planning.Text3d.from_json", "api/generated/compas_timber.planning.Text3d.from_jsonstring", "api/generated/compas_timber.planning.Text3d.sha256", "api/generated/compas_timber.planning.Text3d.to_json", "api/generated/compas_timber.planning.Text3d.to_jsonstring", "api/generated/compas_timber.planning.Text3d.transform", "api/generated/compas_timber.planning.Text3d.validate_data", "api/generated/compas_timber.rhino.find_neighboring_elements", "citing", "contribution", "contribution/BTLx_contribution_guide", "contribution/joints_contribution_guide", "index", "installation", "license", "tutorials", "tutorials/grasshopper/attributes", "tutorials/grasshopper/beams", "tutorials/grasshopper/design", "tutorials/grasshopper/examples", "tutorials/grasshopper/fabrication", "tutorials/grasshopper/features", "tutorials/grasshopper/installation", "tutorials/grasshopper/joint_rules", "tutorials/grasshopper/model", "tutorials/grasshopper/show", "tutorials/grasshopper/utils", "tutorials/grasshopper/workflow"], "filenames": ["api.rst", "api/compas_timber.connections.rst", "api/compas_timber.design.rst", "api/compas_timber.elements.rst", "api/compas_timber.errors.rst", "api/compas_timber.fabrication.rst", "api/compas_timber.ghpython.rst", "api/compas_timber.model.rst", "api/compas_timber.planning.rst", "api/compas_timber.rhino.rst", "api/generated/compas_timber.connections.BallNodeJoint.rst", "api/generated/compas_timber.connections.BallNodeJoint.ToString.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_features.rst", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.BallNodeJoint.copy.rst", "api/generated/compas_timber.connections.BallNodeJoint.create.rst", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.promote_cluster.rst", "api/generated/compas_timber.connections.BallNodeJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.BallNodeJoint.sha256.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.validate_data.rst", "api/generated/compas_timber.connections.BeamGroupAnalyzer.rst", "api/generated/compas_timber.connections.BeamGroupAnalyzer.find.rst", "api/generated/compas_timber.connections.Cluster.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.find.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.from_model.rst", "api/generated/compas_timber.connections.ConnectionSolver.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_topology.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology.rst", "api/generated/compas_timber.connections.Joint.rst", "api/generated/compas_timber.connections.Joint.ToString.rst", "api/generated/compas_timber.connections.Joint.add_extensions.rst", "api/generated/compas_timber.connections.Joint.add_features.rst", "api/generated/compas_timber.connections.Joint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.Joint.copy.rst", "api/generated/compas_timber.connections.Joint.create.rst", "api/generated/compas_timber.connections.Joint.element_count_complies.rst", "api/generated/compas_timber.connections.Joint.from_json.rst", "api/generated/compas_timber.connections.Joint.from_jsonstring.rst", "api/generated/compas_timber.connections.Joint.promote_cluster.rst", "api/generated/compas_timber.connections.Joint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.Joint.sha256.rst", "api/generated/compas_timber.connections.Joint.to_json.rst", "api/generated/compas_timber.connections.Joint.to_jsonstring.rst", "api/generated/compas_timber.connections.Joint.validate_data.rst", "api/generated/compas_timber.connections.JointTopology.rst", "api/generated/compas_timber.connections.JointTopology.get_name.rst", "api/generated/compas_timber.connections.LButtJoint.rst", "api/generated/compas_timber.connections.LButtJoint.ToString.rst", "api/generated/compas_timber.connections.LButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.LButtJoint.add_features.rst", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LButtJoint.copy.rst", "api/generated/compas_timber.connections.LButtJoint.create.rst", "api/generated/compas_timber.connections.LButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LButtJoint.from_json.rst", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LButtJoint.sha256.rst", "api/generated/compas_timber.connections.LButtJoint.to_json.rst", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles.rst", "api/generated/compas_timber.connections.LButtJoint.validate_data.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LLapJoint.rst", "api/generated/compas_timber.connections.LLapJoint.ToString.rst", "api/generated/compas_timber.connections.LLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LLapJoint.add_features.rst", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LLapJoint.copy.rst", "api/generated/compas_timber.connections.LLapJoint.create.rst", "api/generated/compas_timber.connections.LLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LLapJoint.from_json.rst", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LLapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LLapJoint.sha256.rst", "api/generated/compas_timber.connections.LLapJoint.to_json.rst", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LMiterJoint.rst", "api/generated/compas_timber.connections.LMiterJoint.ToString.rst", "api/generated/compas_timber.connections.LMiterJoint.add_extensions.rst", "api/generated/compas_timber.connections.LMiterJoint.add_features.rst", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LMiterJoint.copy.rst", "api/generated/compas_timber.connections.LMiterJoint.create.rst", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LMiterJoint.from_json.rst", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes.rst", "api/generated/compas_timber.connections.LMiterJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LMiterJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LMiterJoint.sha256.rst", "api/generated/compas_timber.connections.LMiterJoint.to_json.rst", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.validate_data.rst", "api/generated/compas_timber.connections.LapJoint.rst", "api/generated/compas_timber.connections.LapJoint.ToString.rst", "api/generated/compas_timber.connections.LapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LapJoint.add_features.rst", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LapJoint.copy.rst", "api/generated/compas_timber.connections.LapJoint.create.rst", "api/generated/compas_timber.connections.LapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LapJoint.from_json.rst", "api/generated/compas_timber.connections.LapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LapJoint.sha256.rst", "api/generated/compas_timber.connections.LapJoint.to_json.rst", "api/generated/compas_timber.connections.LapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.validate_data.rst", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.rst", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.find.rst", "api/generated/compas_timber.connections.QuadAnalyzer.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.create.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data.rst", "api/generated/compas_timber.connections.TButtJoint.rst", "api/generated/compas_timber.connections.TButtJoint.ToString.rst", "api/generated/compas_timber.connections.TButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.TButtJoint.add_features.rst", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TButtJoint.copy.rst", "api/generated/compas_timber.connections.TButtJoint.create.rst", "api/generated/compas_timber.connections.TButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TButtJoint.from_json.rst", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TButtJoint.sha256.rst", "api/generated/compas_timber.connections.TButtJoint.to_json.rst", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.validate_data.rst", "api/generated/compas_timber.connections.TDovetailJoint.rst", "api/generated/compas_timber.connections.TDovetailJoint.ToString.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_features.rst", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TDovetailJoint.copy.rst", "api/generated/compas_timber.connections.TDovetailJoint.create.rst", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool.rst", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TDovetailJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TDovetailJoint.sha256.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.validate_data.rst", "api/generated/compas_timber.connections.TLapJoint.rst", "api/generated/compas_timber.connections.TLapJoint.ToString.rst", "api/generated/compas_timber.connections.TLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.TLapJoint.add_features.rst", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TLapJoint.copy.rst", "api/generated/compas_timber.connections.TLapJoint.create.rst", "api/generated/compas_timber.connections.TLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TLapJoint.from_json.rst", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TLapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TLapJoint.sha256.rst", "api/generated/compas_timber.connections.TLapJoint.to_json.rst", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.validate_data.rst", "api/generated/compas_timber.connections.TStepJoint.rst", "api/generated/compas_timber.connections.TStepJoint.ToString.rst", "api/generated/compas_timber.connections.TStepJoint.add_extensions.rst", "api/generated/compas_timber.connections.TStepJoint.add_features.rst", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TStepJoint.copy.rst", "api/generated/compas_timber.connections.TStepJoint.create.rst", "api/generated/compas_timber.connections.TStepJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TStepJoint.from_json.rst", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TStepJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TStepJoint.set_step_depths.rst", "api/generated/compas_timber.connections.TStepJoint.sha256.rst", "api/generated/compas_timber.connections.TStepJoint.to_json.rst", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.validate_data.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.copy.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.create.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data.rst", "api/generated/compas_timber.connections.TripletAnalyzer.rst", "api/generated/compas_timber.connections.XLapJoint.rst", "api/generated/compas_timber.connections.XLapJoint.ToString.rst", "api/generated/compas_timber.connections.XLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.XLapJoint.add_features.rst", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XLapJoint.copy.rst", "api/generated/compas_timber.connections.XLapJoint.create.rst", "api/generated/compas_timber.connections.XLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XLapJoint.from_json.rst", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.XLapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XLapJoint.sha256.rst", "api/generated/compas_timber.connections.XLapJoint.to_json.rst", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.validate_data.rst", "api/generated/compas_timber.connections.XNotchJoint.rst", "api/generated/compas_timber.connections.XNotchJoint.ToString.rst", "api/generated/compas_timber.connections.XNotchJoint.add_extensions.rst", "api/generated/compas_timber.connections.XNotchJoint.add_features.rst", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XNotchJoint.copy.rst", "api/generated/compas_timber.connections.XNotchJoint.create.rst", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XNotchJoint.from_json.rst", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.promote_cluster.rst", "api/generated/compas_timber.connections.XNotchJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XNotchJoint.sha256.rst", "api/generated/compas_timber.connections.XNotchJoint.to_json.rst", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.validate_data.rst", "api/generated/compas_timber.connections.YButtJoint.rst", "api/generated/compas_timber.connections.YButtJoint.ToString.rst", "api/generated/compas_timber.connections.YButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.YButtJoint.add_features.rst", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.YButtJoint.copy.rst", "api/generated/compas_timber.connections.YButtJoint.create.rst", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.YButtJoint.from_json.rst", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes.rst", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.YButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.YButtJoint.sha256.rst", "api/generated/compas_timber.connections.YButtJoint.to_json.rst", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.validate_data.rst", "api/generated/compas_timber.connections.find_neighboring_elements.rst", "api/generated/compas_timber.design.CategoryRule.rst", "api/generated/compas_timber.design.CategoryRule.ToString.rst", "api/generated/compas_timber.design.CategoryRule.comply.rst", "api/generated/compas_timber.design.CategoryRule.get_category_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_direct_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_topology_rules.rst", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.CategoryRule.reorder.rst", "api/generated/compas_timber.design.DebugInfomation.rst", "api/generated/compas_timber.design.DebugInfomation.ToString.rst", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_feature_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_joint_error.rst", "api/generated/compas_timber.design.DirectRule.rst", "api/generated/compas_timber.design.DirectRule.ToString.rst", "api/generated/compas_timber.design.DirectRule.comply.rst", "api/generated/compas_timber.design.DirectRule.contains.rst", "api/generated/compas_timber.design.DirectRule.get_category_rules.rst", "api/generated/compas_timber.design.DirectRule.get_direct_rules.rst", "api/generated/compas_timber.design.DirectRule.get_topology_rules.rst", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.FeatureDefinition.rst", "api/generated/compas_timber.design.FeatureDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.rst", "api/generated/compas_timber.design.JointDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.is_identical.rst", "api/generated/compas_timber.design.JointDefinition.match.rst", "api/generated/compas_timber.design.JointRule.rst", "api/generated/compas_timber.design.JointRule.comply.rst", "api/generated/compas_timber.design.JointRule.get_category_rules.rst", "api/generated/compas_timber.design.JointRule.get_direct_rules.rst", "api/generated/compas_timber.design.JointRule.get_topology_rules.rst", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.SurfaceModel.rst", "api/generated/compas_timber.design.SurfaceModel.beam_category_names.rst", "api/generated/compas_timber.design.SurfaceModel.create_model.rst", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps.rst", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements.rst", "api/generated/compas_timber.design.SurfaceModel.generate_frame.rst", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams.rst", "api/generated/compas_timber.design.SurfaceModel.generate_plates.rst", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines.rst", "api/generated/compas_timber.design.SurfaceModel.generate_studs.rst", "api/generated/compas_timber.design.SurfaceModel.generate_windows.rst", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections.rst", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices.rst", "api/generated/compas_timber.design.SurfaceModel.offset_elements.rst", "api/generated/compas_timber.design.SurfaceModel.parse_loops.rst", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_studs.rst", "api/generated/compas_timber.design.TopologyRule.rst", "api/generated/compas_timber.design.TopologyRule.ToString.rst", "api/generated/compas_timber.design.TopologyRule.comply.rst", "api/generated/compas_timber.design.TopologyRule.get_category_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_direct_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_topology_rules.rst", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.guess_joint_topology_2beams.rst", "api/generated/compas_timber.design.set_default_joints.rst", "api/generated/compas_timber.elements.Beam.rst", "api/generated/compas_timber.elements.Beam.ToString.rst", "api/generated/compas_timber.elements.Beam.add_blank_extension.rst", "api/generated/compas_timber.elements.Beam.add_feature.rst", "api/generated/compas_timber.elements.Beam.add_features.rst", "api/generated/compas_timber.elements.Beam.back_side.rst", "api/generated/compas_timber.elements.Beam.compute_aabb.rst", "api/generated/compas_timber.elements.Beam.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Beam.compute_geometry.rst", "api/generated/compas_timber.elements.Beam.compute_obb.rst", "api/generated/compas_timber.elements.Beam.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Beam.copy.rst", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point.rst", "api/generated/compas_timber.elements.Beam.extension_to_plane.rst", "api/generated/compas_timber.elements.Beam.from_centerline.rst", "api/generated/compas_timber.elements.Beam.from_endpoints.rst", "api/generated/compas_timber.elements.Beam.from_json.rst", "api/generated/compas_timber.elements.Beam.from_jsonstring.rst", "api/generated/compas_timber.elements.Beam.front_side.rst", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side.rst", "api/generated/compas_timber.elements.Beam.opp_side.rst", "api/generated/compas_timber.elements.Beam.remove_blank_extension.rst", "api/generated/compas_timber.elements.Beam.remove_features.rst", "api/generated/compas_timber.elements.Beam.reset.rst", "api/generated/compas_timber.elements.Beam.sha256.rst", "api/generated/compas_timber.elements.Beam.side_as_surface.rst", "api/generated/compas_timber.elements.Beam.to_json.rst", "api/generated/compas_timber.elements.Beam.to_jsonstring.rst", "api/generated/compas_timber.elements.Beam.transform.rst", "api/generated/compas_timber.elements.Beam.transformed.rst", "api/generated/compas_timber.elements.Beam.validate_data.rst", "api/generated/compas_timber.elements.Fastener.rst", "api/generated/compas_timber.elements.Fastener.ToString.rst", "api/generated/compas_timber.elements.Fastener.add_feature.rst", "api/generated/compas_timber.elements.Fastener.add_features.rst", "api/generated/compas_timber.elements.Fastener.compute_aabb.rst", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Fastener.compute_geometry.rst", "api/generated/compas_timber.elements.Fastener.compute_obb.rst", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Fastener.copy.rst", "api/generated/compas_timber.elements.Fastener.from_json.rst", "api/generated/compas_timber.elements.Fastener.from_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.remove_blank_extension.rst", "api/generated/compas_timber.elements.Fastener.remove_features.rst", "api/generated/compas_timber.elements.Fastener.reset.rst", "api/generated/compas_timber.elements.Fastener.sha256.rst", "api/generated/compas_timber.elements.Fastener.to_json.rst", "api/generated/compas_timber.elements.Fastener.to_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.transform.rst", "api/generated/compas_timber.elements.Fastener.transformed.rst", "api/generated/compas_timber.elements.Fastener.validate_data.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.copy.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data.rst", "api/generated/compas_timber.elements.Plate.rst", "api/generated/compas_timber.elements.Plate.ToString.rst", "api/generated/compas_timber.elements.Plate.add_feature.rst", "api/generated/compas_timber.elements.Plate.add_features.rst", "api/generated/compas_timber.elements.Plate.add_interface.rst", "api/generated/compas_timber.elements.Plate.check_outlines.rst", "api/generated/compas_timber.elements.Plate.compute_aabb.rst", "api/generated/compas_timber.elements.Plate.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Plate.compute_geometry.rst", "api/generated/compas_timber.elements.Plate.compute_obb.rst", "api/generated/compas_timber.elements.Plate.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Plate.copy.rst", "api/generated/compas_timber.elements.Plate.from_brep.rst", "api/generated/compas_timber.elements.Plate.from_json.rst", "api/generated/compas_timber.elements.Plate.from_jsonstring.rst", "api/generated/compas_timber.elements.Plate.from_outline_thickness.rst", "api/generated/compas_timber.elements.Plate.opp_side.rst", "api/generated/compas_timber.elements.Plate.remove_blank_extension.rst", "api/generated/compas_timber.elements.Plate.remove_features.rst", "api/generated/compas_timber.elements.Plate.reset.rst", "api/generated/compas_timber.elements.Plate.sha256.rst", "api/generated/compas_timber.elements.Plate.side_as_surface.rst", "api/generated/compas_timber.elements.Plate.to_json.rst", "api/generated/compas_timber.elements.Plate.to_jsonstring.rst", "api/generated/compas_timber.elements.Plate.transform.rst", "api/generated/compas_timber.elements.Plate.transformed.rst", "api/generated/compas_timber.elements.Plate.validate_data.rst", "api/generated/compas_timber.elements.TimberElement.rst", "api/generated/compas_timber.elements.TimberElement.ToString.rst", "api/generated/compas_timber.elements.TimberElement.add_feature.rst", "api/generated/compas_timber.elements.TimberElement.add_features.rst", "api/generated/compas_timber.elements.TimberElement.compute_aabb.rst", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh.rst", "api/generated/compas_timber.elements.TimberElement.compute_geometry.rst", "api/generated/compas_timber.elements.TimberElement.compute_obb.rst", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation.rst", "api/generated/compas_timber.elements.TimberElement.copy.rst", "api/generated/compas_timber.elements.TimberElement.from_json.rst", "api/generated/compas_timber.elements.TimberElement.from_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension.rst", "api/generated/compas_timber.elements.TimberElement.remove_features.rst", "api/generated/compas_timber.elements.TimberElement.reset.rst", "api/generated/compas_timber.elements.TimberElement.sha256.rst", "api/generated/compas_timber.elements.TimberElement.to_json.rst", "api/generated/compas_timber.elements.TimberElement.to_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.transform.rst", "api/generated/compas_timber.elements.TimberElement.transformed.rst", "api/generated/compas_timber.elements.TimberElement.validate_data.rst", "api/generated/compas_timber.elements.Wall.rst", "api/generated/compas_timber.elements.Wall.ToString.rst", "api/generated/compas_timber.elements.Wall.add_feature.rst", "api/generated/compas_timber.elements.Wall.add_features.rst", "api/generated/compas_timber.elements.Wall.compute_aabb.rst", "api/generated/compas_timber.elements.Wall.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Wall.compute_geometry.rst", "api/generated/compas_timber.elements.Wall.compute_obb.rst", "api/generated/compas_timber.elements.Wall.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Wall.copy.rst", "api/generated/compas_timber.elements.Wall.from_boundary.rst", "api/generated/compas_timber.elements.Wall.from_brep.rst", "api/generated/compas_timber.elements.Wall.from_json.rst", "api/generated/compas_timber.elements.Wall.from_jsonstring.rst", "api/generated/compas_timber.elements.Wall.remove_blank_extension.rst", "api/generated/compas_timber.elements.Wall.remove_features.rst", "api/generated/compas_timber.elements.Wall.reset.rst", "api/generated/compas_timber.elements.Wall.rotate.rst", "api/generated/compas_timber.elements.Wall.sha256.rst", "api/generated/compas_timber.elements.Wall.to_json.rst", "api/generated/compas_timber.elements.Wall.to_jsonstring.rst", "api/generated/compas_timber.elements.Wall.transform.rst", "api/generated/compas_timber.elements.Wall.transformed.rst", "api/generated/compas_timber.elements.Wall.validate_data.rst", "api/generated/compas_timber.errors.BeamJoiningError.rst", "api/generated/compas_timber.errors.FastenerApplicationError.rst", "api/generated/compas_timber.errors.FeatureApplicationError.rst", "api/generated/compas_timber.fabrication.BTLxPart.rst", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals.rst", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.copy.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data.rst", "api/generated/compas_timber.fabrication.BTLxWriter.rst", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml.rst", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer.rst", "api/generated/compas_timber.fabrication.BTLxWriter.write.rst", "api/generated/compas_timber.fabrication.DoubleCut.rst", "api/generated/compas_timber.fabrication.DoubleCut.ToString.rst", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DoubleCut.apply.rst", "api/generated/compas_timber.fabrication.DoubleCut.copy.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.scale.rst", "api/generated/compas_timber.fabrication.DoubleCut.scaled.rst", "api/generated/compas_timber.fabrication.DoubleCut.sha256.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailMortise.rst", "api/generated/compas_timber.fabrication.DovetailMortise.ToString.rst", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailMortise.apply.rst", "api/generated/compas_timber.fabrication.DovetailMortise.copy.rst", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scale.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scaled.rst", "api/generated/compas_timber.fabrication.DovetailMortise.sha256.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailTenon.rst", "api/generated/compas_timber.fabrication.DovetailTenon.ToString.rst", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailTenon.apply.rst", "api/generated/compas_timber.fabrication.DovetailTenon.copy.rst", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scale.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scaled.rst", "api/generated/compas_timber.fabrication.DovetailTenon.sha256.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data.rst", "api/generated/compas_timber.fabrication.Drilling.rst", "api/generated/compas_timber.fabrication.Drilling.ToString.rst", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Drilling.apply.rst", "api/generated/compas_timber.fabrication.Drilling.copy.rst", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_json.rst", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.scale.rst", "api/generated/compas_timber.fabrication.Drilling.scaled.rst", "api/generated/compas_timber.fabrication.Drilling.sha256.rst", "api/generated/compas_timber.fabrication.Drilling.to_json.rst", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.validate_data.rst", "api/generated/compas_timber.fabrication.EdgePositionType.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data.rst", "api/generated/compas_timber.fabrication.JackRafterCut.rst", "api/generated/compas_timber.fabrication.JackRafterCut.ToString.rst", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.JackRafterCut.apply.rst", "api/generated/compas_timber.fabrication.JackRafterCut.copy.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scale.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scaled.rst", "api/generated/compas_timber.fabrication.JackRafterCut.sha256.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.rst", "api/generated/compas_timber.fabrication.Lap.ToString.rst", "api/generated/compas_timber.fabrication.Lap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Lap.apply.rst", "api/generated/compas_timber.fabrication.Lap.copy.rst", "api/generated/compas_timber.fabrication.Lap.from_json.rst", "api/generated/compas_timber.fabrication.Lap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.scale.rst", "api/generated/compas_timber.fabrication.Lap.scaled.rst", "api/generated/compas_timber.fabrication.Lap.sha256.rst", "api/generated/compas_timber.fabrication.Lap.to_json.rst", "api/generated/compas_timber.fabrication.Lap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LimitationTopType.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.apply.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.copy.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.MachiningLimits.rst", "api/generated/compas_timber.fabrication.Mortise.rst", "api/generated/compas_timber.fabrication.Mortise.ToString.rst", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Mortise.apply.rst", "api/generated/compas_timber.fabrication.Mortise.copy.rst", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_json.rst", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.scale.rst", "api/generated/compas_timber.fabrication.Mortise.scaled.rst", "api/generated/compas_timber.fabrication.Mortise.sha256.rst", "api/generated/compas_timber.fabrication.Mortise.to_json.rst", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.validate_data.rst", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.OrientationType.rst", "api/generated/compas_timber.fabrication.Pocket.rst", "api/generated/compas_timber.fabrication.Pocket.ToString.rst", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Pocket.apply.rst", "api/generated/compas_timber.fabrication.Pocket.copy.rst", "api/generated/compas_timber.fabrication.Pocket.from_json.rst", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.scale.rst", "api/generated/compas_timber.fabrication.Pocket.scaled.rst", "api/generated/compas_timber.fabrication.Pocket.sha256.rst", "api/generated/compas_timber.fabrication.Pocket.to_json.rst", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.validate_data.rst", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Slot.rst", "api/generated/compas_timber.fabrication.Slot.ToString.rst", "api/generated/compas_timber.fabrication.Slot.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Slot.apply.rst", "api/generated/compas_timber.fabrication.Slot.copy.rst", "api/generated/compas_timber.fabrication.Slot.from_json.rst", "api/generated/compas_timber.fabrication.Slot.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Slot.scale.rst", "api/generated/compas_timber.fabrication.Slot.scaled.rst", "api/generated/compas_timber.fabrication.Slot.sha256.rst", "api/generated/compas_timber.fabrication.Slot.to_json.rst", "api/generated/compas_timber.fabrication.Slot.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.validate_data.rst", "api/generated/compas_timber.fabrication.StepJoint.rst", "api/generated/compas_timber.fabrication.StepJoint.ToString.rst", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJoint.add_tenon.rst", "api/generated/compas_timber.fabrication.StepJoint.apply.rst", "api/generated/compas_timber.fabrication.StepJoint.copy.rst", "api/generated/compas_timber.fabrication.StepJoint.from_json.rst", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.scale.rst", "api/generated/compas_timber.fabrication.StepJoint.scaled.rst", "api/generated/compas_timber.fabrication.StepJoint.sha256.rst", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.to_json.rst", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.validate_data.rst", "api/generated/compas_timber.fabrication.StepJointNotch.rst", "api/generated/compas_timber.fabrication.StepJointNotch.ToString.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJointNotch.apply.rst", "api/generated/compas_timber.fabrication.StepJointNotch.copy.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scale.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scaled.rst", "api/generated/compas_timber.fabrication.StepJointNotch.sha256.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data.rst", "api/generated/compas_timber.fabrication.StepShapeType.rst", "api/generated/compas_timber.fabrication.Tenon.rst", "api/generated/compas_timber.fabrication.Tenon.ToString.rst", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Tenon.apply.rst", "api/generated/compas_timber.fabrication.Tenon.copy.rst", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.from_json.rst", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.scale.rst", "api/generated/compas_timber.fabrication.Tenon.scaled.rst", "api/generated/compas_timber.fabrication.Tenon.sha256.rst", "api/generated/compas_timber.fabrication.Tenon.to_json.rst", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.validate_data.rst", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.TenonShapeType.rst", "api/generated/compas_timber.ghpython.add_gh_param.rst", "api/generated/compas_timber.ghpython.clear_gh_params.rst", "api/generated/compas_timber.ghpython.get_leaf_subclasses.rst", "api/generated/compas_timber.ghpython.item_input_valid.rst", "api/generated/compas_timber.ghpython.list_input_valid.rst", "api/generated/compas_timber.ghpython.manage_dynamic_params.rst", "api/generated/compas_timber.ghpython.rename_gh_input.rst", "api/generated/compas_timber.model.TimberModel.rst", "api/generated/compas_timber.model.TimberModel.ToString.rst", "api/generated/compas_timber.model.TimberModel.add_element.rst", "api/generated/compas_timber.model.TimberModel.add_elements.rst", "api/generated/compas_timber.model.TimberModel.add_group.rst", "api/generated/compas_timber.model.TimberModel.add_group_element.rst", "api/generated/compas_timber.model.TimberModel.add_interaction.rst", "api/generated/compas_timber.model.TimberModel.add_joint.rst", "api/generated/compas_timber.model.TimberModel.add_material.rst", "api/generated/compas_timber.model.TimberModel.assign_material.rst", "api/generated/compas_timber.model.TimberModel.compute_aabb.rst", "api/generated/compas_timber.model.TimberModel.compute_obb.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_beams.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls.rst", "api/generated/compas_timber.model.TimberModel.copy.rst", "api/generated/compas_timber.model.TimberModel.element_by_guid.rst", "api/generated/compas_timber.model.TimberModel.elements.rst", "api/generated/compas_timber.model.TimberModel.elements_connected_by.rst", "api/generated/compas_timber.model.TimberModel.from_json.rst", "api/generated/compas_timber.model.TimberModel.from_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.get_elements_in_group.rst", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element.rst", "api/generated/compas_timber.model.TimberModel.has_element.rst", "api/generated/compas_timber.model.TimberModel.has_group.rst", "api/generated/compas_timber.model.TimberModel.has_interaction.rst", "api/generated/compas_timber.model.TimberModel.has_material.rst", "api/generated/compas_timber.model.TimberModel.interactions.rst", "api/generated/compas_timber.model.TimberModel.materials.rst", "api/generated/compas_timber.model.TimberModel.process_joinery.rst", "api/generated/compas_timber.model.TimberModel.remove_element.rst", "api/generated/compas_timber.model.TimberModel.remove_interaction.rst", "api/generated/compas_timber.model.TimberModel.remove_joint.rst", "api/generated/compas_timber.model.TimberModel.rotate.rst", "api/generated/compas_timber.model.TimberModel.rotated.rst", "api/generated/compas_timber.model.TimberModel.scale.rst", "api/generated/compas_timber.model.TimberModel.scaled.rst", "api/generated/compas_timber.model.TimberModel.set_topologies.rst", "api/generated/compas_timber.model.TimberModel.sha256.rst", "api/generated/compas_timber.model.TimberModel.to_json.rst", "api/generated/compas_timber.model.TimberModel.to_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.transform.rst", "api/generated/compas_timber.model.TimberModel.transform_numpy.rst", "api/generated/compas_timber.model.TimberModel.transformed.rst", "api/generated/compas_timber.model.TimberModel.transformed_numpy.rst", "api/generated/compas_timber.model.TimberModel.translate.rst", "api/generated/compas_timber.model.TimberModel.translated.rst", "api/generated/compas_timber.model.TimberModel.validate_data.rst", "api/generated/compas_timber.planning.Actor.rst", "api/generated/compas_timber.planning.Actor.get_name.rst", "api/generated/compas_timber.planning.BuildingPlan.rst", "api/generated/compas_timber.planning.BuildingPlan.ToString.rst", "api/generated/compas_timber.planning.BuildingPlan.add_step.rst", "api/generated/compas_timber.planning.BuildingPlan.copy.rst", "api/generated/compas_timber.planning.BuildingPlan.from_json.rst", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.sha256.rst", "api/generated/compas_timber.planning.BuildingPlan.to_json.rst", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.validate_data.rst", "api/generated/compas_timber.planning.BuildingPlanParser.rst", "api/generated/compas_timber.planning.BuildingPlanParser.parse.rst", "api/generated/compas_timber.planning.BuildingPlanParser.serialize.rst", "api/generated/compas_timber.planning.Instruction.rst", "api/generated/compas_timber.planning.Instruction.ToString.rst", "api/generated/compas_timber.planning.Instruction.copy.rst", "api/generated/compas_timber.planning.Instruction.from_json.rst", "api/generated/compas_timber.planning.Instruction.from_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.sha256.rst", "api/generated/compas_timber.planning.Instruction.to_json.rst", "api/generated/compas_timber.planning.Instruction.to_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.transform.rst", "api/generated/compas_timber.planning.Instruction.validate_data.rst", "api/generated/compas_timber.planning.LinearDimension.rst", "api/generated/compas_timber.planning.LinearDimension.ToString.rst", "api/generated/compas_timber.planning.LinearDimension.copy.rst", "api/generated/compas_timber.planning.LinearDimension.from_json.rst", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.sha256.rst", "api/generated/compas_timber.planning.LinearDimension.to_json.rst", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.transform.rst", "api/generated/compas_timber.planning.LinearDimension.validate_data.rst", "api/generated/compas_timber.planning.Model3d.rst", "api/generated/compas_timber.planning.Model3d.ToString.rst", "api/generated/compas_timber.planning.Model3d.copy.rst", "api/generated/compas_timber.planning.Model3d.from_json.rst", "api/generated/compas_timber.planning.Model3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.sha256.rst", "api/generated/compas_timber.planning.Model3d.to_json.rst", "api/generated/compas_timber.planning.Model3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.transform.rst", "api/generated/compas_timber.planning.Model3d.validate_data.rst", "api/generated/compas_timber.planning.SimpleSequenceGenerator.rst", "api/generated/compas_timber.planning.Step.rst", "api/generated/compas_timber.planning.Step.ToString.rst", "api/generated/compas_timber.planning.Step.copy.rst", "api/generated/compas_timber.planning.Step.from_json.rst", "api/generated/compas_timber.planning.Step.from_jsonstring.rst", "api/generated/compas_timber.planning.Step.sha256.rst", "api/generated/compas_timber.planning.Step.to_json.rst", "api/generated/compas_timber.planning.Step.to_jsonstring.rst", "api/generated/compas_timber.planning.Step.transform.rst", "api/generated/compas_timber.planning.Step.validate_data.rst", "api/generated/compas_timber.planning.Text3d.rst", "api/generated/compas_timber.planning.Text3d.ToString.rst", "api/generated/compas_timber.planning.Text3d.copy.rst", "api/generated/compas_timber.planning.Text3d.from_json.rst", "api/generated/compas_timber.planning.Text3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.sha256.rst", "api/generated/compas_timber.planning.Text3d.to_json.rst", "api/generated/compas_timber.planning.Text3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.transform.rst", "api/generated/compas_timber.planning.Text3d.validate_data.rst", "api/generated/compas_timber.rhino.find_neighboring_elements.rst", "citing.rst", "contribution.rst", "contribution/BTLx_contribution_guide.rst", "contribution/joints_contribution_guide.rst", "index.rst", "installation.rst", "license.rst", "tutorials.rst", "tutorials/grasshopper/attributes.rst", "tutorials/grasshopper/beams.rst", "tutorials/grasshopper/design.rst", "tutorials/grasshopper/examples.rst", "tutorials/grasshopper/fabrication.rst", "tutorials/grasshopper/features.rst", "tutorials/grasshopper/installation.rst", "tutorials/grasshopper/joint_rules.rst", "tutorials/grasshopper/model.rst", "tutorials/grasshopper/show.rst", "tutorials/grasshopper/utils.rst", "tutorials/grasshopper/workflow.rst"], "titles": ["API Reference", "compas_timber.connections", "compas_timber.design", "compas_timber.elements", "compas_timber.errors", "compas_timber.fabrication", "compas_timber.ghpython", "compas_timber.model", "compas_timber.planning", "compas_timber.rhino", "BallNodeJoint", "BallNodeJoint.ToString", "BallNodeJoint.add_extensions", "BallNodeJoint.add_features", "BallNodeJoint.check_elements_compatibility", "BallNodeJoint.copy", "BallNodeJoint.create", "BallNodeJoint.element_count_complies", "BallNodeJoint.from_json", "BallNodeJoint.from_jsonstring", "BallNodeJoint.promote_cluster", "BallNodeJoint.promote_joint_candidate", "BallNodeJoint.restore_beams_from_keys", "BallNodeJoint.sha256", "BallNodeJoint.to_json", "BallNodeJoint.to_jsonstring", "BallNodeJoint.validate_data", "BeamGroupAnalyzer", "BeamGroupAnalyzer.find", "Cluster", "CompositeAnalyzer", "CompositeAnalyzer.find", "CompositeAnalyzer.from_model", "ConnectionSolver", "ConnectionSolver.find_intersecting_pairs", "ConnectionSolver.find_topology", "ConnectionSolver.find_wall_wall_topology", "Joint", "Joint.ToString", "Joint.add_extensions", "Joint.add_features", "Joint.check_elements_compatibility", "Joint.copy", "Joint.create", "Joint.element_count_complies", "Joint.from_json", "Joint.from_jsonstring", "Joint.promote_cluster", "Joint.promote_joint_candidate", "Joint.restore_beams_from_keys", "Joint.sha256", "Joint.to_json", "Joint.to_jsonstring", "Joint.validate_data", "JointTopology", "JointTopology.get_name", "LButtJoint", "LButtJoint.ToString", "LButtJoint.add_extensions", "LButtJoint.add_features", "LButtJoint.check_elements_compatibility", "LButtJoint.copy", "LButtJoint.create", "LButtJoint.element_count_complies", "LButtJoint.from_json", "LButtJoint.from_jsonstring", "LButtJoint.promote_cluster", "LButtJoint.promote_joint_candidate", "LButtJoint.restore_beams_from_keys", "LButtJoint.sha256", "LButtJoint.to_json", "LButtJoint.to_jsonstring", "LButtJoint.update_beam_roles", "LButtJoint.validate_data", "LFrenchRidgeLapJoint", "LFrenchRidgeLapJoint.ToString", "LFrenchRidgeLapJoint.add_extensions", "LFrenchRidgeLapJoint.add_features", "LFrenchRidgeLapJoint.check_elements_compatibility", "LFrenchRidgeLapJoint.copy", "LFrenchRidgeLapJoint.create", "LFrenchRidgeLapJoint.element_count_complies", "LFrenchRidgeLapJoint.from_json", "LFrenchRidgeLapJoint.from_jsonstring", "LFrenchRidgeLapJoint.promote_cluster", "LFrenchRidgeLapJoint.promote_joint_candidate", "LFrenchRidgeLapJoint.restore_beams_from_keys", "LFrenchRidgeLapJoint.sha256", "LFrenchRidgeLapJoint.to_json", "LFrenchRidgeLapJoint.to_jsonstring", "LFrenchRidgeLapJoint.validate_data", "LLapJoint", "LLapJoint.ToString", "LLapJoint.add_extensions", "LLapJoint.add_features", "LLapJoint.check_elements_compatibility", "LLapJoint.copy", "LLapJoint.create", "LLapJoint.element_count_complies", "LLapJoint.from_json", "LLapJoint.from_jsonstring", "LLapJoint.promote_cluster", "LLapJoint.promote_joint_candidate", "LLapJoint.restore_beams_from_keys", "LLapJoint.sha256", "LLapJoint.to_json", "LLapJoint.to_jsonstring", "LLapJoint.validate_data", "LMiterJoint", "LMiterJoint.ToString", "LMiterJoint.add_extensions", "LMiterJoint.add_features", "LMiterJoint.check_elements_compatibility", "LMiterJoint.copy", "LMiterJoint.create", "LMiterJoint.element_count_complies", "LMiterJoint.from_json", "LMiterJoint.from_jsonstring", "LMiterJoint.get_cutoff_plane", "LMiterJoint.get_cutting_planes", "LMiterJoint.promote_cluster", "LMiterJoint.promote_joint_candidate", "LMiterJoint.restore_beams_from_keys", "LMiterJoint.sha256", "LMiterJoint.to_json", "LMiterJoint.to_jsonstring", "LMiterJoint.validate_data", "LapJoint", "LapJoint.ToString", "LapJoint.add_extensions", "LapJoint.add_features", "LapJoint.check_elements_compatibility", "LapJoint.copy", "LapJoint.create", "LapJoint.element_count_complies", "LapJoint.from_json", "LapJoint.from_jsonstring", "LapJoint.promote_cluster", "LapJoint.promote_joint_candidate", "LapJoint.restore_beams_from_keys", "LapJoint.sha256", "LapJoint.to_json", "LapJoint.to_jsonstring", "LapJoint.validate_data", "NBeamKDTreeAnalyzer", "NBeamKDTreeAnalyzer.find", "QuadAnalyzer", "TBirdsmouthJoint", "TBirdsmouthJoint.ToString", "TBirdsmouthJoint.add_extensions", "TBirdsmouthJoint.add_features", "TBirdsmouthJoint.check_elements_compatibility", "TBirdsmouthJoint.copy", "TBirdsmouthJoint.create", "TBirdsmouthJoint.element_count_complies", "TBirdsmouthJoint.from_json", "TBirdsmouthJoint.from_jsonstring", "TBirdsmouthJoint.promote_cluster", "TBirdsmouthJoint.promote_joint_candidate", "TBirdsmouthJoint.restore_beams_from_keys", "TBirdsmouthJoint.sha256", "TBirdsmouthJoint.to_json", "TBirdsmouthJoint.to_jsonstring", "TBirdsmouthJoint.validate_data", "TButtJoint", "TButtJoint.ToString", "TButtJoint.add_extensions", "TButtJoint.add_features", "TButtJoint.check_elements_compatibility", "TButtJoint.copy", "TButtJoint.create", "TButtJoint.element_count_complies", "TButtJoint.from_json", "TButtJoint.from_jsonstring", "TButtJoint.promote_cluster", "TButtJoint.promote_joint_candidate", "TButtJoint.restore_beams_from_keys", "TButtJoint.sha256", "TButtJoint.to_json", "TButtJoint.to_jsonstring", "TButtJoint.validate_data", "TDovetailJoint", "TDovetailJoint.ToString", "TDovetailJoint.add_extensions", "TDovetailJoint.add_features", "TDovetailJoint.check_elements_compatibility", "TDovetailJoint.copy", "TDovetailJoint.create", "TDovetailJoint.define_dovetail_tool", "TDovetailJoint.element_count_complies", "TDovetailJoint.from_json", "TDovetailJoint.from_jsonstring", "TDovetailJoint.promote_cluster", "TDovetailJoint.promote_joint_candidate", "TDovetailJoint.restore_beams_from_keys", "TDovetailJoint.sha256", "TDovetailJoint.to_json", "TDovetailJoint.to_jsonstring", "TDovetailJoint.validate_data", "TLapJoint", "TLapJoint.ToString", "TLapJoint.add_extensions", "TLapJoint.add_features", "TLapJoint.check_elements_compatibility", "TLapJoint.copy", "TLapJoint.create", "TLapJoint.element_count_complies", "TLapJoint.from_json", "TLapJoint.from_jsonstring", "TLapJoint.promote_cluster", "TLapJoint.promote_joint_candidate", "TLapJoint.restore_beams_from_keys", "TLapJoint.sha256", "TLapJoint.to_json", "TLapJoint.to_jsonstring", "TLapJoint.validate_data", "TStepJoint", "TStepJoint.ToString", "TStepJoint.add_extensions", "TStepJoint.add_features", "TStepJoint.check_elements_compatibility", "TStepJoint.copy", "TStepJoint.create", "TStepJoint.element_count_complies", "TStepJoint.from_json", "TStepJoint.from_jsonstring", "TStepJoint.promote_cluster", "TStepJoint.promote_joint_candidate", "TStepJoint.restore_beams_from_keys", "TStepJoint.set_step_depths", "TStepJoint.sha256", "TStepJoint.to_json", "TStepJoint.to_jsonstring", "TStepJoint.validate_data", "TenonMortiseJoint", "TenonMortiseJoint.ToString", "TenonMortiseJoint.add_extensions", "TenonMortiseJoint.add_features", "TenonMortiseJoint.check_elements_compatibility", "TenonMortiseJoint.copy", "TenonMortiseJoint.create", "TenonMortiseJoint.element_count_complies", "TenonMortiseJoint.from_json", "TenonMortiseJoint.from_jsonstring", "TenonMortiseJoint.promote_cluster", "TenonMortiseJoint.promote_joint_candidate", "TenonMortiseJoint.restore_beams_from_keys", "TenonMortiseJoint.set_default_values", "TenonMortiseJoint.sha256", "TenonMortiseJoint.to_json", "TenonMortiseJoint.to_jsonstring", "TenonMortiseJoint.validate_data", "TripletAnalyzer", "XLapJoint", "XLapJoint.ToString", "XLapJoint.add_extensions", "XLapJoint.add_features", "XLapJoint.check_elements_compatibility", "XLapJoint.copy", "XLapJoint.create", "XLapJoint.element_count_complies", "XLapJoint.from_json", "XLapJoint.from_jsonstring", "XLapJoint.promote_cluster", "XLapJoint.promote_joint_candidate", "XLapJoint.restore_beams_from_keys", "XLapJoint.sha256", "XLapJoint.to_json", "XLapJoint.to_jsonstring", "XLapJoint.validate_data", "XNotchJoint", "XNotchJoint.ToString", "XNotchJoint.add_extensions", "XNotchJoint.add_features", "XNotchJoint.check_elements_compatibility", "XNotchJoint.copy", "XNotchJoint.create", "XNotchJoint.element_count_complies", "XNotchJoint.from_json", "XNotchJoint.from_jsonstring", "XNotchJoint.promote_cluster", "XNotchJoint.promote_joint_candidate", "XNotchJoint.restore_beams_from_keys", "XNotchJoint.sha256", "XNotchJoint.to_json", "XNotchJoint.to_jsonstring", "XNotchJoint.validate_data", "YButtJoint", "YButtJoint.ToString", "YButtJoint.add_extensions", "YButtJoint.add_features", "YButtJoint.check_elements_compatibility", "YButtJoint.copy", "YButtJoint.create", "YButtJoint.cross_beam_ref_side_index", "YButtJoint.element_count_complies", "YButtJoint.from_json", "YButtJoint.from_jsonstring", "YButtJoint.get_miter_planes", "YButtJoint.main_beam_ref_side_index", "YButtJoint.promote_cluster", "YButtJoint.promote_joint_candidate", "YButtJoint.restore_beams_from_keys", "YButtJoint.sha256", "YButtJoint.to_json", "YButtJoint.to_jsonstring", "YButtJoint.validate_data", "find_neighboring_elements", "CategoryRule", "CategoryRule.ToString", "CategoryRule.comply", "CategoryRule.get_category_rules", "CategoryRule.get_direct_rules", "CategoryRule.get_topology_rules", "CategoryRule.joints_from_beams_and_rules", "CategoryRule.reorder", "DebugInfomation", "DebugInfomation.ToString", "DebugInfomation.add_fastener_error", "DebugInfomation.add_feature_error", "DebugInfomation.add_joint_error", "DirectRule", "DirectRule.ToString", "DirectRule.comply", "DirectRule.contains", "DirectRule.get_category_rules", "DirectRule.get_direct_rules", "DirectRule.get_topology_rules", "DirectRule.joints_from_beams_and_rules", "FeatureDefinition", "FeatureDefinition.ToString", "JointDefinition", "JointDefinition.ToString", "JointDefinition.is_identical", "JointDefinition.match", "JointRule", "JointRule.comply", "JointRule.get_category_rules", "JointRule.get_direct_rules", "JointRule.get_topology_rules", "JointRule.joints_from_beams_and_rules", "SurfaceModel", "SurfaceModel.beam_category_names", "SurfaceModel.create_model", "SurfaceModel.cull_overlaps", "SurfaceModel.distance_between_elements", "SurfaceModel.generate_frame", "SurfaceModel.generate_perimeter_beams", "SurfaceModel.generate_plates", "SurfaceModel.generate_stud_lines", "SurfaceModel.generate_studs", "SurfaceModel.generate_windows", "SurfaceModel.get_beam_intersections", "SurfaceModel.get_interior_segment_indices", "SurfaceModel.offset_elements", "SurfaceModel.parse_loops", "SurfaceModel.trim_jack_studs", "SurfaceModel.trim_king_studs", "SurfaceModel.trim_studs", "TopologyRule", "TopologyRule.ToString", "TopologyRule.comply", "TopologyRule.get_category_rules", "TopologyRule.get_direct_rules", "TopologyRule.get_topology_rules", "TopologyRule.joints_from_beams_and_rules", "guess_joint_topology_2beams", "set_default_joints", "Beam", "Beam.ToString", "Beam.add_blank_extension", "Beam.add_feature", "Beam.add_features", "Beam.back_side", "Beam.compute_aabb", "Beam.compute_collision_mesh", "Beam.compute_geometry", "Beam.compute_obb", "Beam.compute_worldtransformation", "Beam.copy", "Beam.endpoint_closest_to_point", "Beam.extension_to_plane", "Beam.from_centerline", "Beam.from_endpoints", "Beam.from_json", "Beam.from_jsonstring", "Beam.front_side", "Beam.get_dimensions_relative_to_side", "Beam.opp_side", "Beam.remove_blank_extension", "Beam.remove_features", "Beam.reset", "Beam.sha256", "Beam.side_as_surface", "Beam.to_json", "Beam.to_jsonstring", "Beam.transform", "Beam.transformed", "Beam.validate_data", "Fastener", "Fastener.ToString", "Fastener.add_feature", "Fastener.add_features", "Fastener.compute_aabb", "Fastener.compute_collision_mesh", "Fastener.compute_geometry", "Fastener.compute_obb", "Fastener.compute_worldtransformation", "Fastener.copy", "Fastener.from_json", "Fastener.from_jsonstring", "Fastener.remove_blank_extension", "Fastener.remove_features", "Fastener.reset", "Fastener.sha256", "Fastener.to_json", "Fastener.to_jsonstring", "Fastener.transform", "Fastener.transformed", "Fastener.validate_data", "FastenerTimberInterface", "FastenerTimberInterface.ToString", "FastenerTimberInterface.copy", "FastenerTimberInterface.from_json", "FastenerTimberInterface.from_jsonstring", "FastenerTimberInterface.get_features", "FastenerTimberInterface.sha256", "FastenerTimberInterface.to_json", "FastenerTimberInterface.to_jsonstring", "FastenerTimberInterface.validate_data", "Plate", "Plate.ToString", "Plate.add_feature", "Plate.add_features", "Plate.add_interface", "Plate.check_outlines", "Plate.compute_aabb", "Plate.compute_collision_mesh", "Plate.compute_geometry", "Plate.compute_obb", "Plate.compute_worldtransformation", "Plate.copy", "Plate.from_brep", "Plate.from_json", "Plate.from_jsonstring", "Plate.from_outline_thickness", "Plate.opp_side", "Plate.remove_blank_extension", "Plate.remove_features", "Plate.reset", "Plate.sha256", "Plate.side_as_surface", "Plate.to_json", "Plate.to_jsonstring", "Plate.transform", "Plate.transformed", "Plate.validate_data", "TimberElement", "TimberElement.ToString", "TimberElement.add_feature", "TimberElement.add_features", "TimberElement.compute_aabb", "TimberElement.compute_collision_mesh", "TimberElement.compute_geometry", "TimberElement.compute_obb", "TimberElement.compute_worldtransformation", "TimberElement.copy", "TimberElement.from_json", "TimberElement.from_jsonstring", "TimberElement.remove_blank_extension", "TimberElement.remove_features", "TimberElement.reset", "TimberElement.sha256", "TimberElement.to_json", "TimberElement.to_jsonstring", "TimberElement.transform", "TimberElement.transformed", "TimberElement.validate_data", "Wall", "Wall.ToString", "Wall.add_feature", "Wall.add_features", "Wall.compute_aabb", "Wall.compute_collision_mesh", "Wall.compute_geometry", "Wall.compute_obb", "Wall.compute_worldtransformation", "Wall.copy", "Wall.from_boundary", "Wall.from_brep", "Wall.from_json", "Wall.from_jsonstring", "Wall.remove_blank_extension", "Wall.remove_features", "Wall.reset", "Wall.rotate", "Wall.sha256", "Wall.to_json", "Wall.to_jsonstring", "Wall.transform", "Wall.transformed", "Wall.validate_data", "BeamJoiningError", "FastenerApplicationError", "FeatureApplicationError", "BTLxPart", "BTLxPart.et_point_vals", "BTLxPart.ref_side_from_face", "BTLxProcessing", "BTLxProcessing.ToString", "BTLxProcessing.add_subprocessing", "BTLxProcessing.copy", "BTLxProcessing.from_json", "BTLxProcessing.from_jsonstring", "BTLxProcessing.scaled", "BTLxProcessing.sha256", "BTLxProcessing.to_json", "BTLxProcessing.to_jsonstring", "BTLxProcessing.validate_data", "BTLxWriter", "BTLxWriter.model_to_xml", "BTLxWriter.register_type_serializer", "BTLxWriter.write", "DoubleCut", "DoubleCut.ToString", "DoubleCut.add_subprocessing", "DoubleCut.apply", "DoubleCut.copy", "DoubleCut.from_json", "DoubleCut.from_jsonstring", "DoubleCut.from_planes_and_beam", "DoubleCut.from_shapes_and_element", "DoubleCut.planes_from_params_and_beam", "DoubleCut.scale", "DoubleCut.scaled", "DoubleCut.sha256", "DoubleCut.to_json", "DoubleCut.to_jsonstring", "DoubleCut.validate_data", "DovetailMortise", "DovetailMortise.ToString", "DovetailMortise.add_subprocessing", "DovetailMortise.apply", "DovetailMortise.copy", "DovetailMortise.define_dovetail_tool", "DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "DovetailMortise.dovetail_volume_from_params_and_beam", "DovetailMortise.frame_from_params_and_beam", "DovetailMortise.from_frame_and_beam", "DovetailMortise.from_json", "DovetailMortise.from_jsonstring", "DovetailMortise.scale", "DovetailMortise.scaled", "DovetailMortise.sha256", "DovetailMortise.to_json", "DovetailMortise.to_jsonstring", "DovetailMortise.validate_data", "DovetailTenon", "DovetailTenon.ToString", "DovetailTenon.add_subprocessing", "DovetailTenon.apply", "DovetailTenon.copy", "DovetailTenon.define_dovetail_tool", "DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "DovetailTenon.dovetail_volume_from_params_and_beam", "DovetailTenon.frame_from_params_and_beam", "DovetailTenon.from_json", "DovetailTenon.from_jsonstring", "DovetailTenon.from_plane_and_beam", "DovetailTenon.scale", "DovetailTenon.scaled", "DovetailTenon.sha256", "DovetailTenon.to_json", "DovetailTenon.to_jsonstring", "DovetailTenon.validate_data", "Drilling", "Drilling.ToString", "Drilling.add_subprocessing", "Drilling.apply", "Drilling.copy", "Drilling.cylinder_from_params_and_element", "Drilling.from_json", "Drilling.from_jsonstring", "Drilling.from_line_and_element", "Drilling.from_shapes_and_element", "Drilling.scale", "Drilling.scaled", "Drilling.sha256", "Drilling.to_json", "Drilling.to_jsonstring", "Drilling.validate_data", "EdgePositionType", "FrenchRidgeLap", "FrenchRidgeLap.ToString", "FrenchRidgeLap.add_subprocessing", "FrenchRidgeLap.apply", "FrenchRidgeLap.copy", "FrenchRidgeLap.frame_from_params_and_beam", "FrenchRidgeLap.from_beam_beam_and_plane", "FrenchRidgeLap.from_json", "FrenchRidgeLap.from_jsonstring", "FrenchRidgeLap.lap_volume_from_params_and_beam", "FrenchRidgeLap.scale", "FrenchRidgeLap.scaled", "FrenchRidgeLap.sha256", "FrenchRidgeLap.to_json", "FrenchRidgeLap.to_jsonstring", "FrenchRidgeLap.validate_data", "JackRafterCut", "JackRafterCut.ToString", "JackRafterCut.add_subprocessing", "JackRafterCut.apply", "JackRafterCut.copy", "JackRafterCut.from_json", "JackRafterCut.from_jsonstring", "JackRafterCut.from_plane_and_beam", "JackRafterCut.from_shapes_and_element", "JackRafterCut.plane_from_params_and_beam", "JackRafterCut.scale", "JackRafterCut.scaled", "JackRafterCut.sha256", "JackRafterCut.to_json", "JackRafterCut.to_jsonstring", "JackRafterCut.validate_data", "Lap", "Lap.ToString", "Lap.add_subprocessing", "Lap.apply", "Lap.copy", "Lap.from_json", "Lap.from_jsonstring", "Lap.from_plane_and_beam", "Lap.from_shapes_and_element", "Lap.from_volume_and_beam", "Lap.scale", "Lap.scaled", "Lap.sha256", "Lap.to_json", "Lap.to_jsonstring", "Lap.validate_data", "Lap.volume_from_params_and_beam", "LimitationTopType", "LongitudinalCut", "LongitudinalCut.ToString", "LongitudinalCut.add_subprocessing", "LongitudinalCut.apply", "LongitudinalCut.copy", "LongitudinalCut.from_json", "LongitudinalCut.from_jsonstring", "LongitudinalCut.from_plane_and_beam", "LongitudinalCut.from_shapes_and_element", "LongitudinalCut.plane_from_params_and_beam", "LongitudinalCut.scaled", "LongitudinalCut.sha256", "LongitudinalCut.to_json", "LongitudinalCut.to_jsonstring", "LongitudinalCut.validate_data", "LongitudinalCut.volume_from_params_and_beam", "MachiningLimits", "Mortise", "Mortise.ToString", "Mortise.add_subprocessing", "Mortise.apply", "Mortise.copy", "Mortise.frame_from_params_and_beam", "Mortise.from_frame_and_beam", "Mortise.from_json", "Mortise.from_jsonstring", "Mortise.scale", "Mortise.scaled", "Mortise.sha256", "Mortise.to_json", "Mortise.to_jsonstring", "Mortise.validate_data", "Mortise.volume_from_params_and_beam", "OrientationType", "Pocket", "Pocket.ToString", "Pocket.add_subprocessing", "Pocket.apply", "Pocket.copy", "Pocket.from_json", "Pocket.from_jsonstring", "Pocket.from_shapes_and_element", "Pocket.from_volume_and_element", "Pocket.scale", "Pocket.scaled", "Pocket.sha256", "Pocket.to_json", "Pocket.to_jsonstring", "Pocket.validate_data", "Pocket.volume_from_params_and_element", "Slot", "Slot.ToString", "Slot.add_subprocessing", "Slot.apply", "Slot.copy", "Slot.from_json", "Slot.from_jsonstring", "Slot.from_plane_and_beam", "Slot.scale", "Slot.scaled", "Slot.sha256", "Slot.to_json", "Slot.to_jsonstring", "Slot.validate_data", "StepJoint", "StepJoint.ToString", "StepJoint.add_subprocessing", "StepJoint.add_tenon", "StepJoint.apply", "StepJoint.copy", "StepJoint.from_json", "StepJoint.from_jsonstring", "StepJoint.from_plane_and_beam", "StepJoint.planes_from_params_and_beam", "StepJoint.scale", "StepJoint.scaled", "StepJoint.sha256", "StepJoint.tenon_volume_from_params_and_beam", "StepJoint.to_json", "StepJoint.to_jsonstring", "StepJoint.validate_data", "StepJointNotch", "StepJointNotch.ToString", "StepJointNotch.add_mortise", "StepJointNotch.add_subprocessing", "StepJointNotch.apply", "StepJointNotch.copy", "StepJointNotch.from_json", "StepJointNotch.from_jsonstring", "StepJointNotch.from_plane_and_beam", "StepJointNotch.mortise_volume_from_params_and_beam", "StepJointNotch.planes_from_params_and_beam", "StepJointNotch.scale", "StepJointNotch.scaled", "StepJointNotch.sha256", "StepJointNotch.to_json", "StepJointNotch.to_jsonstring", "StepJointNotch.validate_data", "StepShapeType", "Tenon", "Tenon.ToString", "Tenon.add_subprocessing", "Tenon.apply", "Tenon.copy", "Tenon.frame_from_params_and_beam", "Tenon.from_json", "Tenon.from_jsonstring", "Tenon.from_plane_and_beam", "Tenon.scale", "Tenon.scaled", "Tenon.sha256", "Tenon.to_json", "Tenon.to_jsonstring", "Tenon.validate_data", "Tenon.volume_from_params_and_beam", "TenonShapeType", "add_gh_param", "clear_gh_params", "get_leaf_subclasses", "item_input_valid", "list_input_valid", "manage_dynamic_params", "rename_gh_input", "TimberModel", "TimberModel.ToString", "TimberModel.add_element", "TimberModel.add_elements", "TimberModel.add_group", "TimberModel.add_group_element", "TimberModel.add_interaction", "TimberModel.add_joint", "TimberModel.add_material", "TimberModel.assign_material", "TimberModel.compute_aabb", "TimberModel.compute_obb", "TimberModel.connect_adjacent_beams", "TimberModel.connect_adjacent_walls", "TimberModel.copy", "TimberModel.element_by_guid", "TimberModel.elements", "TimberModel.elements_connected_by", "TimberModel.from_json", "TimberModel.from_jsonstring", "TimberModel.get_elements_in_group", "TimberModel.get_interactions_for_element", "TimberModel.has_element", "TimberModel.has_group", "TimberModel.has_interaction", "TimberModel.has_material", "TimberModel.interactions", "TimberModel.materials", "TimberModel.process_joinery", "TimberModel.remove_element", "TimberModel.remove_interaction", "TimberModel.remove_joint", "TimberModel.rotate", "TimberModel.rotated", "TimberModel.scale", "TimberModel.scaled", "TimberModel.set_topologies", "TimberModel.sha256", "TimberModel.to_json", "TimberModel.to_jsonstring", "TimberModel.transform", "TimberModel.transform_numpy", "TimberModel.transformed", "TimberModel.transformed_numpy", "TimberModel.translate", "TimberModel.translated", "TimberModel.validate_data", "Actor", "Actor.get_name", "BuildingPlan", "BuildingPlan.ToString", "BuildingPlan.add_step", "BuildingPlan.copy", "BuildingPlan.from_json", "BuildingPlan.from_jsonstring", "BuildingPlan.sha256", "BuildingPlan.to_json", "BuildingPlan.to_jsonstring", "BuildingPlan.validate_data", "BuildingPlanParser", "BuildingPlanParser.parse", "BuildingPlanParser.serialize", "Instruction", "Instruction.ToString", "Instruction.copy", "Instruction.from_json", "Instruction.from_jsonstring", "Instruction.sha256", "Instruction.to_json", "Instruction.to_jsonstring", "Instruction.transform", "Instruction.validate_data", "LinearDimension", "LinearDimension.ToString", "LinearDimension.copy", "LinearDimension.from_json", "LinearDimension.from_jsonstring", "LinearDimension.sha256", "LinearDimension.to_json", "LinearDimension.to_jsonstring", "LinearDimension.transform", "LinearDimension.validate_data", "Model3d", "Model3d.ToString", "Model3d.copy", "Model3d.from_json", "Model3d.from_jsonstring", "Model3d.sha256", "Model3d.to_json", "Model3d.to_jsonstring", "Model3d.transform", "Model3d.validate_data", "SimpleSequenceGenerator", "Step", "Step.ToString", "Step.copy", "Step.from_json", "Step.from_jsonstring", "Step.sha256", "Step.to_json", "Step.to_jsonstring", "Step.transform", "Step.validate_data", "Text3d", "Text3d.ToString", "Text3d.copy", "Text3d.from_json", "Text3d.from_jsonstring", "Text3d.sha256", "Text3d.to_json", "Text3d.to_jsonstring", "Text3d.transform", "Text3d.validate_data", "find_neighboring_elements", "Citing", "Developer Guide", "BTLx Contribution Guide", "Joints Contribution Guide", "COMPAS Timber Documentation", "Installation", "License", "Grasshopper plugin", "Attributes", "Beams", "Design", "Examples", "Fabrication", "Features", "Installation Guide", "Joint Rules", "Model", "Show", "Utils", "Workflow"], "terms": {"compas_timb": [0, 10, 16, 20, 21, 22, 27, 29, 30, 33, 37, 43, 47, 48, 49, 54, 56, 62, 66, 67, 74, 80, 84, 85, 91, 97, 101, 102, 108, 114, 120, 121, 127, 133, 137, 138, 144, 146, 147, 153, 157, 158, 164, 170, 174, 175, 181, 187, 192, 193, 199, 205, 209, 210, 216, 222, 226, 227, 234, 240, 244, 245, 252, 253, 259, 263, 264, 270, 276, 280, 281, 287, 293, 300, 301, 307, 308, 316, 321, 329, 331, 335, 341, 359, 366, 367, 368, 399, 420, 430, 442, 457, 478, 502, 503, 504, 505, 508, 519, 523, 526, 531, 532, 539, 542, 545, 546, 547, 557, 560, 564, 565, 575, 578, 580, 583, 584, 591, 592, 595, 597, 601, 608, 611, 616, 617, 624, 627, 640, 641, 642, 645, 650, 651, 657, 658, 659, 662, 664, 674, 675, 676, 679, 691, 692, 695, 706, 710, 715, 719, 723, 727, 732, 733, 740, 741, 744, 746, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 812, 814, 824, 827, 837, 847, 857, 858, 868, 878, 879, 881, 882, 883, 884, 893], "model": [0, 10, 16, 20, 21, 22, 32, 43, 47, 48, 49, 56, 62, 66, 67, 68, 74, 77, 80, 84, 85, 86, 91, 97, 101, 102, 103, 108, 114, 120, 121, 122, 127, 133, 137, 138, 139, 144, 145, 146, 147, 153, 157, 158, 159, 164, 170, 174, 175, 176, 181, 187, 192, 193, 194, 199, 205, 209, 210, 211, 216, 222, 226, 227, 228, 234, 240, 244, 245, 246, 252, 253, 259, 263, 264, 265, 270, 276, 280, 281, 282, 287, 293, 300, 301, 302, 341, 367, 368, 378, 405, 407, 420, 430, 440, 465, 486, 519, 520, 522, 765, 767, 768, 769, 770, 771, 772, 773, 774, 778, 781, 787, 788, 790, 791, 792, 793, 794, 796, 801, 805, 812, 847, 857, 882, 883, 886, 888, 891, 892, 898], "element": [0, 10, 13, 14, 16, 17, 20, 21, 22, 29, 30, 37, 41, 43, 44, 47, 48, 49, 60, 62, 63, 66, 67, 78, 80, 81, 84, 85, 95, 97, 98, 101, 102, 112, 114, 115, 120, 121, 127, 131, 133, 134, 137, 138, 151, 153, 154, 157, 158, 168, 170, 171, 174, 175, 185, 187, 189, 192, 193, 203, 205, 206, 209, 210, 220, 222, 223, 226, 227, 234, 238, 240, 241, 244, 245, 257, 259, 260, 263, 264, 274, 276, 277, 280, 281, 291, 293, 295, 300, 301, 307, 308, 310, 314, 315, 321, 323, 324, 328, 329, 331, 334, 336, 340, 341, 359, 361, 365, 368, 374, 375, 376, 377, 378, 380, 391, 396, 397, 399, 403, 404, 406, 407, 413, 417, 418, 420, 425, 430, 436, 437, 438, 439, 440, 442, 449, 454, 455, 457, 461, 462, 463, 464, 465, 471, 475, 476, 478, 482, 483, 484, 485, 486, 494, 499, 500, 503, 504, 505, 506, 507, 508, 521, 526, 531, 532, 542, 545, 546, 547, 560, 564, 565, 575, 578, 580, 583, 584, 595, 597, 601, 611, 616, 617, 627, 632, 633, 640, 645, 650, 651, 657, 662, 664, 674, 675, 679, 683, 684, 691, 695, 710, 715, 719, 727, 732, 733, 744, 746, 756, 765, 767, 768, 770, 771, 774, 780, 782, 785, 786, 787, 789, 791, 794, 795, 857, 858, 878, 881, 883, 895], "connect": [0, 10, 11, 16, 20, 21, 22, 27, 28, 29, 30, 33, 37, 38, 43, 47, 48, 49, 54, 56, 57, 62, 66, 67, 74, 75, 80, 84, 85, 91, 92, 97, 101, 102, 108, 109, 114, 120, 121, 127, 128, 133, 137, 138, 144, 145, 146, 147, 148, 153, 157, 158, 164, 165, 170, 174, 175, 181, 182, 187, 192, 193, 199, 200, 205, 209, 210, 216, 217, 222, 226, 227, 234, 235, 240, 244, 245, 252, 253, 254, 259, 263, 264, 270, 271, 276, 280, 281, 287, 288, 293, 300, 301, 307, 359, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 778, 782, 815, 828, 838, 848, 859, 869, 882, 883, 885, 894, 895], "fabric": [0, 505, 508, 519, 523, 531, 539, 557, 575, 583, 584, 591, 592, 608, 616, 624, 641, 642, 650, 658, 659, 675, 676, 692, 706, 723, 740, 741, 757, 879, 881, 883, 886], "design": [0, 35, 307, 308, 316, 321, 329, 331, 335, 341, 359, 366, 367, 505, 879, 883, 886, 887, 888], "plan": [0, 812, 814, 824, 825, 826, 827, 837, 847, 857, 858, 868, 883], "error": [0, 1, 30, 316, 318, 319, 320, 374, 377, 403, 406, 436, 461, 464, 482, 485, 502, 503, 504, 578, 793, 881, 882, 883, 887, 889, 895], "ghpython": [0, 758, 759, 760, 761, 762, 763, 764, 883, 886], "rhino": [0, 11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 307, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 878, 883, 884, 887, 888, 894, 897], "The": [1, 9, 10, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 29, 32, 35, 37, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 56, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 113, 114, 115, 116, 117, 120, 121, 124, 125, 126, 127, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 147, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 253, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 292, 293, 295, 296, 297, 300, 301, 304, 305, 306, 307, 308, 310, 314, 315, 321, 323, 328, 340, 341, 359, 361, 365, 368, 370, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 406, 408, 409, 410, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 427, 428, 429, 430, 433, 436, 437, 439, 441, 442, 443, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 460, 461, 462, 464, 466, 467, 468, 470, 473, 474, 475, 476, 477, 481, 482, 483, 485, 487, 490, 491, 493, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 741, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 759, 763, 764, 765, 767, 768, 769, 770, 771, 774, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 817, 818, 819, 821, 822, 823, 829, 830, 831, 833, 834, 836, 839, 840, 841, 843, 844, 846, 849, 850, 851, 853, 854, 856, 860, 861, 862, 864, 865, 867, 870, 871, 872, 874, 875, 877, 878, 881, 882, 885, 886, 887, 888, 892, 894, 895, 897, 898], "follow": [1, 373, 386, 388, 420, 446, 881, 882, 885, 886, 888, 893, 894], "mai": [1, 881, 882, 887, 895], "rais": [1, 12, 14, 16, 18, 19, 39, 40, 41, 45, 46, 58, 60, 64, 65, 76, 78, 82, 83, 93, 95, 99, 100, 110, 112, 116, 117, 129, 130, 131, 135, 136, 149, 151, 155, 156, 166, 168, 172, 173, 183, 185, 190, 191, 201, 203, 207, 208, 218, 220, 224, 225, 236, 238, 242, 243, 255, 257, 261, 262, 272, 274, 278, 279, 289, 291, 296, 297, 384, 385, 409, 410, 423, 424, 443, 444, 467, 468, 490, 491, 503, 504, 512, 513, 526, 528, 529, 542, 549, 550, 560, 566, 567, 578, 581, 582, 595, 599, 600, 611, 613, 614, 627, 629, 630, 645, 647, 648, 662, 666, 667, 679, 681, 682, 695, 697, 698, 710, 712, 713, 727, 729, 730, 744, 747, 748, 767, 770, 771, 774, 783, 784, 793, 818, 819, 830, 831, 840, 841, 850, 851, 861, 862, 871, 872, 881, 882], "thi": [1, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 29, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 120, 121, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 143, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 300, 301, 306, 307, 308, 310, 315, 323, 324, 329, 331, 334, 336, 359, 361, 368, 369, 370, 373, 378, 379, 381, 384, 385, 386, 388, 389, 398, 399, 400, 407, 408, 409, 410, 419, 420, 421, 422, 423, 424, 429, 430, 431, 435, 440, 441, 443, 444, 446, 456, 457, 458, 465, 466, 467, 468, 477, 478, 479, 486, 487, 488, 490, 491, 501, 502, 505, 507, 509, 511, 512, 513, 518, 524, 526, 527, 528, 529, 530, 532, 538, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 556, 558, 560, 561, 563, 564, 565, 566, 567, 568, 574, 576, 579, 580, 581, 582, 583, 585, 590, 593, 595, 596, 597, 598, 599, 600, 601, 602, 607, 609, 611, 612, 613, 614, 615, 617, 618, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 640, 643, 645, 646, 647, 648, 649, 651, 656, 657, 660, 662, 663, 664, 665, 666, 667, 668, 673, 674, 677, 679, 680, 681, 682, 683, 684, 685, 690, 691, 693, 695, 696, 697, 698, 699, 700, 705, 707, 710, 711, 712, 713, 714, 715, 716, 719, 722, 724, 727, 728, 729, 730, 731, 732, 733, 734, 739, 742, 744, 745, 746, 747, 748, 749, 750, 755, 756, 765, 766, 770, 779, 783, 784, 785, 788, 793, 796, 798, 800, 807, 808, 810, 811, 815, 817, 818, 819, 823, 824, 828, 829, 830, 831, 836, 838, 839, 840, 841, 846, 848, 849, 850, 851, 856, 858, 859, 860, 861, 862, 867, 869, 870, 871, 872, 877, 878, 880, 881, 882, 885, 887, 889, 893, 894, 898], "modul": [1, 9, 883], "see": [1, 22, 49, 765, 881, 882, 886, 888, 890, 892, 893, 894, 897], "detail": [1, 886], "beamjoiningerror": [1, 12, 14, 39, 40, 41, 58, 60, 76, 78, 93, 95, 110, 112, 129, 130, 131, 149, 151, 166, 168, 183, 185, 201, 203, 218, 220, 236, 238, 255, 257, 272, 274, 289, 291, 316, 793, 882, 883], "featureapplicationerror": [1, 316, 526, 542, 560, 578, 595, 611, 627, 645, 662, 679, 695, 710, 727, 744, 881, 883], "fastenerapplicationerror": [1, 883], "contain": [9, 16, 18, 19, 20, 34, 37, 45, 46, 47, 64, 65, 66, 82, 83, 84, 99, 100, 101, 116, 117, 120, 135, 136, 137, 145, 155, 156, 157, 172, 173, 174, 190, 191, 192, 207, 208, 209, 224, 225, 226, 242, 243, 244, 261, 262, 263, 278, 279, 280, 296, 297, 300, 307, 310, 315, 316, 323, 329, 331, 361, 368, 384, 385, 409, 410, 423, 424, 430, 443, 444, 457, 467, 468, 478, 490, 491, 502, 512, 513, 528, 529, 549, 550, 566, 567, 581, 582, 599, 600, 613, 614, 629, 630, 647, 648, 666, 667, 681, 682, 697, 698, 712, 713, 729, 730, 747, 748, 765, 767, 770, 781, 783, 784, 787, 790, 792, 805, 814, 818, 819, 830, 831, 840, 841, 850, 851, 858, 861, 862, 871, 872, 878], "function": [9, 127, 307, 521, 785, 886], "type": [9, 10, 11, 15, 18, 19, 26, 32, 35, 38, 42, 45, 46, 53, 56, 57, 61, 64, 65, 73, 74, 75, 79, 82, 83, 90, 91, 92, 96, 99, 100, 107, 108, 109, 113, 116, 117, 126, 127, 128, 132, 135, 136, 143, 147, 148, 152, 155, 156, 163, 164, 165, 169, 172, 173, 180, 181, 182, 186, 190, 191, 198, 199, 200, 204, 207, 208, 215, 216, 217, 221, 224, 225, 229, 233, 234, 235, 239, 242, 243, 251, 253, 254, 258, 261, 262, 269, 270, 271, 275, 278, 279, 286, 287, 288, 292, 296, 297, 306, 308, 321, 331, 359, 369, 379, 384, 385, 398, 400, 408, 409, 410, 419, 421, 422, 423, 424, 429, 431, 441, 443, 444, 456, 458, 466, 467, 468, 477, 479, 487, 490, 491, 501, 509, 511, 512, 513, 518, 521, 524, 527, 528, 529, 538, 539, 540, 543, 549, 550, 556, 558, 561, 566, 567, 574, 576, 579, 581, 582, 590, 593, 596, 599, 600, 607, 609, 612, 613, 614, 623, 625, 628, 629, 630, 639, 643, 646, 647, 648, 656, 660, 663, 666, 667, 673, 677, 680, 681, 682, 690, 693, 696, 697, 698, 705, 707, 711, 712, 713, 722, 724, 728, 729, 730, 739, 742, 745, 747, 748, 755, 766, 779, 782, 783, 784, 811, 812, 815, 817, 818, 819, 823, 828, 829, 830, 831, 836, 838, 839, 840, 841, 846, 848, 849, 850, 851, 856, 858, 859, 860, 861, 862, 867, 869, 870, 871, 872, 877, 881, 882, 883, 889, 893, 898], "meant": 9, "us": [9, 10, 11, 20, 21, 23, 26, 30, 31, 32, 34, 36, 37, 38, 47, 48, 50, 53, 55, 56, 57, 66, 67, 69, 73, 74, 75, 84, 85, 87, 90, 91, 92, 101, 102, 104, 107, 108, 109, 120, 121, 123, 126, 127, 128, 137, 138, 140, 143, 144, 147, 148, 157, 158, 160, 163, 164, 165, 174, 175, 177, 180, 181, 182, 192, 193, 195, 198, 199, 200, 209, 210, 212, 215, 216, 217, 226, 227, 230, 233, 234, 235, 244, 245, 248, 251, 253, 254, 263, 264, 266, 269, 270, 271, 280, 281, 283, 286, 287, 288, 300, 301, 303, 306, 307, 310, 315, 323, 361, 369, 381, 392, 398, 400, 414, 419, 421, 426, 429, 431, 450, 456, 457, 458, 472, 477, 479, 488, 496, 501, 502, 505, 509, 515, 518, 519, 524, 535, 538, 539, 540, 548, 553, 556, 557, 558, 568, 571, 574, 576, 580, 587, 590, 593, 598, 604, 607, 609, 620, 623, 625, 631, 636, 639, 643, 653, 656, 660, 665, 670, 673, 677, 687, 690, 693, 702, 705, 707, 718, 722, 724, 736, 739, 742, 749, 752, 755, 765, 766, 770, 801, 802, 806, 807, 808, 809, 810, 811, 813, 815, 820, 823, 824, 828, 832, 836, 838, 842, 846, 848, 852, 856, 858, 859, 863, 867, 869, 873, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 897], "context": [9, 882], "class": [10, 11, 27, 29, 30, 32, 33, 37, 38, 43, 54, 56, 57, 62, 74, 75, 80, 91, 92, 97, 108, 109, 114, 127, 128, 133, 144, 147, 148, 153, 164, 165, 170, 181, 182, 187, 199, 200, 205, 216, 217, 222, 234, 235, 240, 253, 254, 259, 270, 271, 276, 287, 288, 293, 308, 316, 321, 329, 331, 335, 341, 359, 368, 369, 399, 400, 420, 421, 430, 431, 457, 458, 478, 479, 503, 505, 508, 509, 519, 523, 524, 539, 540, 557, 558, 575, 576, 591, 592, 593, 608, 609, 624, 625, 641, 642, 643, 658, 659, 660, 675, 676, 677, 692, 693, 706, 707, 723, 724, 731, 740, 741, 742, 757, 765, 766, 772, 805, 812, 814, 815, 824, 827, 828, 837, 838, 847, 848, 857, 858, 859, 868, 869, 883], "sourc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 887, 888], "base": [10, 27, 29, 30, 33, 37, 54, 56, 72, 74, 91, 108, 127, 144, 147, 164, 181, 188, 199, 216, 229, 234, 253, 270, 287, 308, 316, 321, 329, 331, 335, 341, 359, 368, 376, 378, 399, 407, 420, 430, 440, 457, 463, 465, 478, 484, 486, 502, 503, 504, 505, 507, 508, 519, 523, 539, 544, 557, 562, 575, 591, 592, 608, 624, 641, 642, 649, 658, 659, 675, 676, 692, 706, 723, 740, 741, 757, 765, 793, 797, 798, 812, 814, 824, 827, 837, 847, 857, 858, 868, 881, 882, 895, 896, 898], "joint": [10, 12, 13, 14, 16, 17, 20, 21, 22, 29, 31, 33, 54, 56, 58, 59, 60, 62, 63, 66, 67, 72, 74, 76, 77, 78, 80, 81, 84, 85, 91, 93, 94, 95, 97, 98, 101, 102, 108, 110, 111, 112, 114, 115, 120, 121, 127, 129, 130, 131, 133, 134, 137, 138, 145, 147, 149, 150, 151, 153, 154, 157, 158, 164, 166, 167, 168, 170, 171, 174, 175, 181, 183, 184, 185, 187, 189, 192, 193, 199, 201, 202, 203, 205, 206, 209, 210, 216, 218, 219, 220, 222, 223, 226, 227, 229, 234, 236, 237, 238, 240, 241, 244, 245, 253, 255, 256, 257, 259, 260, 263, 264, 270, 272, 273, 274, 276, 277, 280, 281, 287, 289, 290, 291, 293, 295, 300, 301, 308, 310, 314, 316, 321, 328, 331, 340, 359, 365, 370, 389, 420, 478, 502, 503, 548, 568, 665, 706, 714, 723, 731, 749, 765, 772, 793, 796, 880, 881, 883, 886, 888, 889, 895, 898], "repres": [10, 56, 74, 91, 108, 147, 164, 181, 199, 216, 234, 253, 270, 287, 368, 399, 420, 430, 435, 442, 445, 478, 505, 519, 523, 539, 557, 575, 592, 608, 624, 642, 657, 659, 676, 706, 723, 741, 765, 771, 812, 882, 888, 894], "ball": 10, "node": [10, 767, 768, 769, 770], "which": [10, 16, 20, 21, 34, 35, 36, 37, 43, 47, 48, 56, 62, 66, 67, 74, 80, 84, 85, 91, 97, 101, 102, 108, 114, 120, 121, 133, 137, 138, 147, 153, 157, 158, 164, 170, 174, 175, 181, 187, 192, 193, 199, 205, 209, 210, 216, 222, 226, 227, 234, 240, 244, 245, 253, 259, 263, 264, 270, 276, 280, 281, 287, 293, 300, 301, 307, 329, 359, 370, 373, 380, 381, 386, 387, 388, 389, 442, 446, 502, 503, 521, 568, 583, 584, 699, 749, 769, 770, 812, 814, 847, 858, 881, 882, 888, 889, 895], "join": [10, 16, 37, 56, 74, 91, 108, 127, 147, 164, 181, 199, 216, 234, 253, 270, 287, 314, 316, 321, 328, 331, 340, 365, 502, 882, 889, 895], "end": [10, 37, 54, 56, 74, 91, 108, 147, 164, 181, 199, 216, 234, 287, 368, 370, 373, 380, 381, 383, 386, 388, 446, 523, 557, 592, 608, 624, 642, 649, 658, 675, 676, 699, 706, 723, 741, 882, 894], "multipl": [10, 30, 321, 768], "beam": [10, 12, 13, 14, 16, 22, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 49, 54, 56, 58, 59, 60, 68, 72, 74, 76, 77, 78, 86, 91, 93, 94, 95, 103, 108, 110, 111, 112, 122, 127, 129, 130, 131, 139, 144, 145, 146, 147, 149, 150, 151, 159, 164, 166, 167, 168, 176, 181, 183, 184, 185, 194, 199, 201, 202, 203, 211, 216, 218, 219, 228, 234, 236, 237, 238, 246, 252, 253, 255, 256, 257, 265, 270, 272, 273, 274, 282, 287, 289, 290, 291, 294, 299, 302, 307, 316, 341, 402, 412, 433, 446, 448, 451, 457, 460, 470, 478, 481, 493, 502, 523, 526, 530, 532, 539, 542, 545, 546, 547, 548, 557, 560, 563, 564, 565, 568, 592, 595, 597, 598, 601, 608, 611, 615, 616, 617, 624, 627, 631, 632, 633, 640, 642, 645, 649, 650, 651, 657, 659, 662, 664, 665, 674, 676, 679, 683, 684, 691, 695, 699, 706, 710, 714, 715, 719, 723, 725, 727, 731, 732, 733, 741, 744, 746, 749, 756, 765, 770, 780, 793, 847, 878, 882, 883, 886, 887, 892, 894, 895, 897, 898], "trim": [10, 56, 59, 108, 111, 150, 164, 167, 184, 202, 219, 237, 256, 273, 287, 290, 601, 892, 895], "main": [10, 22, 35, 49, 56, 68, 72, 74, 86, 103, 122, 127, 139, 147, 159, 164, 176, 181, 194, 199, 211, 216, 228, 234, 246, 265, 282, 287, 302, 568, 665, 714, 731, 749, 882, 894], "pleas": [10, 56, 74, 91, 108, 127, 147, 164, 181, 199, 216, 234, 253, 270, 287, 879, 893], "creat": [10, 13, 20, 21, 30, 32, 37, 47, 48, 56, 58, 59, 66, 67, 74, 76, 84, 85, 91, 93, 94, 101, 102, 108, 110, 111, 120, 121, 127, 137, 138, 147, 149, 150, 157, 158, 164, 166, 167, 174, 175, 181, 183, 184, 192, 193, 199, 201, 202, 209, 210, 216, 218, 219, 226, 227, 234, 236, 237, 244, 245, 253, 256, 263, 264, 270, 273, 280, 281, 287, 289, 290, 300, 301, 321, 329, 341, 382, 383, 397, 418, 442, 455, 476, 489, 500, 530, 542, 548, 560, 568, 598, 615, 631, 649, 662, 665, 710, 714, 727, 731, 744, 749, 884, 886, 887, 888, 889, 891, 894, 895, 898], "properli": [10, 56, 74, 91, 108, 127, 147, 164, 181, 199, 216, 234, 253, 270, 287, 882], "an": [10, 15, 16, 18, 19, 20, 21, 24, 25, 26, 29, 30, 32, 34, 42, 43, 45, 46, 47, 48, 51, 52, 53, 56, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 79, 80, 82, 83, 84, 85, 88, 89, 90, 91, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 113, 114, 116, 117, 120, 121, 124, 125, 126, 127, 132, 133, 135, 136, 137, 138, 141, 142, 143, 147, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 169, 170, 172, 173, 174, 175, 178, 179, 180, 181, 186, 187, 190, 191, 192, 193, 196, 197, 198, 199, 204, 205, 207, 208, 209, 210, 213, 214, 215, 216, 221, 222, 224, 225, 226, 227, 231, 232, 233, 234, 239, 240, 242, 243, 244, 245, 249, 250, 251, 253, 258, 259, 261, 262, 263, 264, 267, 268, 269, 270, 275, 276, 278, 279, 280, 281, 284, 285, 286, 287, 292, 293, 296, 297, 300, 301, 304, 305, 306, 368, 379, 384, 385, 394, 395, 398, 399, 408, 409, 410, 415, 416, 419, 420, 422, 423, 424, 427, 428, 429, 430, 441, 443, 444, 452, 453, 456, 457, 466, 467, 468, 473, 474, 477, 478, 487, 490, 491, 497, 498, 501, 502, 504, 505, 507, 511, 512, 513, 516, 517, 518, 520, 521, 527, 528, 529, 531, 536, 537, 538, 543, 549, 550, 554, 555, 556, 561, 566, 567, 568, 572, 573, 574, 579, 581, 582, 588, 589, 590, 596, 599, 600, 605, 606, 607, 612, 613, 614, 621, 622, 623, 628, 629, 630, 637, 638, 639, 646, 647, 648, 654, 655, 656, 663, 666, 667, 671, 672, 673, 680, 681, 682, 688, 689, 690, 696, 697, 698, 703, 704, 705, 711, 712, 713, 720, 721, 722, 728, 729, 730, 737, 738, 739, 745, 747, 748, 749, 753, 754, 755, 767, 770, 771, 772, 774, 779, 783, 784, 789, 793, 794, 803, 804, 811, 812, 817, 818, 819, 821, 822, 823, 829, 830, 831, 833, 834, 836, 839, 840, 841, 843, 844, 846, 849, 850, 851, 853, 854, 856, 860, 861, 862, 864, 865, 867, 870, 871, 872, 874, 875, 877, 879, 882, 883, 885, 886, 887, 888, 894], "instanc": [10, 11, 16, 18, 19, 20, 21, 29, 30, 32, 38, 43, 45, 46, 47, 48, 56, 57, 62, 64, 65, 66, 67, 74, 75, 80, 82, 83, 84, 85, 91, 92, 97, 99, 100, 101, 102, 108, 109, 114, 116, 117, 120, 121, 127, 128, 133, 135, 136, 137, 138, 147, 148, 153, 155, 156, 157, 158, 164, 165, 170, 172, 173, 174, 175, 181, 182, 187, 190, 191, 192, 193, 199, 200, 205, 207, 208, 209, 210, 216, 217, 222, 224, 225, 226, 227, 234, 235, 240, 242, 243, 244, 245, 253, 254, 259, 261, 262, 263, 264, 270, 271, 276, 278, 279, 280, 281, 287, 288, 293, 296, 297, 300, 301, 336, 369, 384, 385, 400, 409, 410, 420, 421, 423, 424, 431, 443, 444, 458, 467, 468, 479, 490, 491, 509, 512, 513, 514, 521, 524, 526, 528, 529, 530, 532, 534, 540, 542, 545, 546, 547, 548, 549, 550, 552, 558, 560, 563, 564, 565, 566, 567, 568, 570, 576, 580, 581, 582, 586, 593, 595, 597, 598, 599, 600, 601, 603, 609, 611, 613, 614, 615, 617, 619, 625, 627, 629, 630, 631, 632, 633, 635, 640, 643, 645, 647, 648, 649, 651, 652, 657, 660, 662, 664, 665, 666, 667, 669, 674, 677, 679, 681, 682, 683, 684, 686, 691, 693, 695, 697, 698, 699, 701, 707, 709, 710, 712, 713, 714, 715, 717, 719, 724, 725, 727, 729, 730, 731, 732, 733, 735, 742, 744, 746, 747, 748, 749, 751, 756, 766, 772, 783, 784, 815, 818, 819, 828, 830, 831, 838, 840, 841, 848, 850, 851, 859, 861, 862, 869, 871, 872, 881, 882], "associ": [10, 22, 49, 56, 74, 91, 108, 127, 147, 164, 181, 199, 216, 234, 253, 270, 287, 430, 435, 858, 882, 885], "paramet": [10, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 113, 114, 115, 116, 117, 120, 121, 123, 124, 125, 126, 127, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 253, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 292, 293, 295, 296, 297, 300, 301, 303, 304, 305, 306, 307, 308, 310, 314, 315, 321, 323, 328, 336, 340, 341, 359, 361, 365, 368, 371, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 406, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 435, 436, 438, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 463, 464, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 487, 490, 491, 493, 496, 497, 498, 499, 500, 501, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 763, 764, 767, 768, 769, 770, 771, 772, 773, 774, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 817, 818, 819, 820, 821, 822, 823, 825, 826, 829, 830, 831, 832, 833, 834, 836, 839, 840, 841, 842, 843, 844, 846, 849, 850, 851, 852, 853, 854, 856, 857, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 877, 878, 882, 887, 897], "list": [10, 16, 17, 20, 21, 29, 30, 32, 34, 37, 44, 47, 48, 63, 66, 67, 81, 84, 85, 98, 101, 102, 115, 120, 121, 127, 134, 137, 138, 145, 154, 157, 158, 171, 174, 175, 181, 189, 192, 193, 206, 209, 210, 223, 226, 227, 234, 241, 244, 245, 260, 263, 264, 277, 280, 281, 287, 295, 300, 301, 307, 308, 314, 316, 321, 328, 336, 340, 341, 361, 365, 368, 371, 372, 380, 390, 401, 402, 412, 420, 432, 433, 448, 459, 460, 470, 480, 481, 493, 502, 503, 505, 530, 532, 545, 763, 765, 768, 774, 782, 786, 793, 858, 878, 882, 894, 896], "base_interfac": 10, "fastenertimberinterfac": [10, 13, 883], "describ": [10, 882], "interfac": [10, 27, 420, 425, 434, 883], "between": [10, 35, 36, 54, 74, 91, 108, 127, 199, 253, 323, 341, 420, 507, 539, 557, 649, 659, 741, 765, 771, 778, 789, 791, 795, 882, 887, 889, 892, 894, 898], "fasten": [10, 13, 164, 420, 503, 883], "each": [10, 37, 145, 270, 381, 649, 814, 881, 882, 887, 894, 896], "timber": [10, 13, 341, 368, 399, 420, 430, 457, 478, 519, 765, 879, 880, 881, 882, 884, 886, 888, 889, 891, 893, 896, 898], "ball_diamet": 10, "float": [10, 34, 35, 36, 56, 74, 91, 127, 147, 164, 181, 188, 199, 216, 234, 253, 287, 307, 308, 310, 314, 321, 323, 328, 340, 341, 359, 361, 365, 368, 370, 374, 377, 381, 382, 383, 387, 403, 406, 420, 430, 436, 442, 445, 461, 464, 482, 485, 505, 514, 523, 533, 534, 539, 544, 548, 551, 552, 557, 562, 568, 569, 570, 575, 583, 584, 585, 586, 592, 598, 602, 603, 608, 618, 619, 624, 631, 634, 635, 642, 649, 652, 659, 665, 668, 669, 676, 685, 686, 700, 701, 706, 709, 716, 717, 723, 725, 734, 735, 741, 749, 750, 751, 765, 778, 797, 798, 799, 800, 878, 881, 894], "diamet": [10, 74, 181, 188, 420, 544, 562, 575, 583, 584, 592, 598, 892, 894], "attribut": [10, 29, 37, 43, 54, 56, 62, 74, 80, 91, 97, 108, 114, 127, 133, 147, 153, 164, 170, 181, 187, 199, 205, 216, 222, 234, 240, 247, 253, 259, 270, 276, 287, 293, 308, 310, 315, 316, 341, 368, 399, 420, 430, 457, 502, 503, 504, 505, 508, 591, 641, 658, 675, 740, 757, 765, 769, 857, 858, 881, 882, 883, 886, 888], "generated_el": [10, 37], "gener": [10, 13, 16, 21, 36, 37, 48, 67, 85, 102, 121, 138, 158, 175, 193, 210, 216, 227, 245, 264, 281, 301, 399, 420, 765, 785, 857, 882, 888, 889, 894, 898], "method": [10, 11, 16, 22, 27, 30, 33, 35, 37, 38, 43, 49, 54, 56, 57, 58, 59, 62, 74, 75, 76, 77, 78, 80, 91, 92, 93, 94, 97, 108, 109, 110, 111, 114, 127, 128, 133, 144, 147, 148, 149, 150, 153, 164, 165, 166, 167, 170, 181, 182, 183, 184, 187, 199, 200, 201, 202, 205, 216, 217, 218, 219, 222, 234, 235, 236, 237, 240, 253, 254, 256, 259, 270, 271, 273, 276, 287, 288, 289, 290, 291, 293, 308, 316, 321, 329, 331, 335, 341, 359, 368, 369, 373, 386, 388, 399, 400, 420, 421, 430, 431, 446, 457, 458, 478, 479, 505, 508, 509, 519, 523, 524, 539, 540, 557, 558, 568, 575, 576, 592, 593, 608, 609, 624, 625, 631, 642, 643, 659, 660, 676, 677, 692, 693, 706, 707, 723, 724, 741, 742, 749, 765, 766, 793, 812, 814, 815, 824, 827, 828, 837, 838, 847, 848, 858, 859, 868, 869, 883], "inherit": [10, 37, 56, 74, 91, 108, 127, 147, 164, 181, 199, 216, 234, 253, 270, 287, 308, 321, 359, 368, 399, 420, 430, 457, 478, 508, 523, 539, 557, 575, 592, 608, 624, 642, 659, 676, 692, 706, 723, 741, 765, 814, 827, 837, 847, 858, 868, 881, 882, 883], "convert": [11, 21, 24, 25, 38, 48, 51, 52, 57, 67, 70, 71, 75, 85, 88, 89, 92, 102, 105, 106, 109, 121, 124, 125, 128, 138, 141, 142, 148, 158, 161, 162, 165, 175, 178, 179, 182, 193, 196, 197, 200, 210, 213, 214, 217, 227, 231, 232, 235, 245, 249, 250, 254, 264, 267, 268, 271, 281, 284, 285, 288, 301, 304, 305, 329, 369, 394, 395, 400, 415, 416, 421, 427, 428, 431, 452, 453, 458, 473, 474, 479, 497, 498, 506, 509, 516, 517, 520, 524, 536, 537, 540, 554, 555, 558, 572, 573, 576, 588, 589, 593, 605, 606, 609, 621, 622, 625, 637, 638, 643, 654, 655, 660, 671, 672, 677, 688, 689, 693, 703, 704, 707, 720, 721, 724, 737, 738, 742, 753, 754, 766, 803, 804, 815, 821, 822, 828, 833, 834, 838, 843, 844, 848, 853, 854, 859, 864, 865, 869, 874, 875, 881], "string": [11, 19, 25, 38, 46, 52, 55, 57, 65, 71, 75, 83, 89, 92, 100, 106, 109, 117, 125, 128, 136, 142, 148, 156, 162, 165, 173, 179, 182, 191, 197, 200, 208, 214, 217, 225, 232, 235, 243, 250, 254, 262, 268, 271, 279, 285, 288, 297, 305, 369, 385, 395, 400, 410, 416, 421, 424, 428, 431, 444, 453, 458, 468, 474, 479, 491, 498, 502, 509, 513, 517, 520, 522, 524, 529, 537, 540, 550, 555, 558, 567, 573, 576, 582, 589, 593, 600, 606, 609, 614, 622, 625, 630, 638, 643, 648, 655, 660, 667, 672, 677, 682, 689, 693, 698, 704, 707, 713, 721, 724, 730, 738, 742, 748, 754, 766, 784, 804, 813, 815, 819, 822, 828, 831, 834, 838, 841, 844, 848, 851, 854, 859, 862, 865, 869, 872, 875, 881, 887, 888, 894], "exist": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 709, 724, 725, 742, 766, 770, 788, 815, 828, 838, 848, 859, 869, 881], "net": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "compat": [11, 14, 38, 41, 56, 57, 60, 74, 75, 78, 91, 92, 95, 108, 109, 112, 128, 131, 147, 148, 151, 164, 165, 168, 181, 182, 185, 199, 200, 203, 216, 217, 220, 234, 235, 238, 253, 254, 257, 270, 271, 274, 288, 291, 307, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 882], "when": [11, 34, 38, 57, 58, 59, 75, 76, 92, 93, 94, 109, 110, 111, 128, 148, 149, 150, 165, 166, 167, 182, 183, 184, 200, 201, 202, 217, 218, 219, 235, 236, 237, 254, 256, 271, 273, 288, 289, 290, 369, 370, 400, 421, 431, 458, 479, 503, 504, 505, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 881, 882, 887, 894], "ironpython": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "implicit": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "convers": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 881], "usual": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 368, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "take": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 521, 524, 540, 558, 576, 583, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 881, 898], "place": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 805, 815, 828, 838, 848, 859, 869, 894], "cpython": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 884], "kick": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "its": [11, 24, 25, 38, 51, 52, 57, 70, 71, 75, 88, 89, 92, 105, 106, 109, 124, 125, 128, 141, 142, 148, 161, 162, 165, 178, 179, 181, 182, 196, 197, 200, 213, 214, 217, 231, 232, 234, 235, 249, 250, 254, 267, 268, 271, 284, 285, 288, 304, 305, 369, 378, 382, 391, 394, 395, 400, 407, 413, 415, 416, 421, 427, 428, 431, 440, 449, 452, 453, 458, 465, 471, 473, 474, 479, 486, 494, 497, 498, 509, 516, 517, 521, 524, 536, 537, 540, 554, 555, 558, 572, 573, 576, 588, 589, 593, 605, 606, 609, 621, 622, 625, 637, 638, 643, 654, 655, 660, 671, 672, 677, 688, 689, 693, 699, 703, 704, 707, 720, 721, 724, 737, 738, 742, 753, 754, 766, 780, 803, 804, 815, 821, 822, 828, 833, 834, 838, 843, 844, 848, 853, 854, 859, 864, 865, 869, 874, 875, 882, 884, 887, 894], "default": [11, 15, 31, 32, 38, 42, 56, 57, 61, 75, 79, 91, 92, 96, 109, 113, 127, 128, 132, 144, 145, 148, 152, 165, 169, 182, 186, 199, 200, 204, 217, 221, 229, 235, 239, 247, 253, 254, 258, 271, 275, 288, 292, 310, 323, 341, 361, 369, 379, 382, 383, 400, 408, 421, 422, 430, 431, 441, 445, 458, 466, 479, 487, 505, 508, 509, 511, 519, 524, 527, 530, 540, 543, 548, 558, 561, 568, 575, 576, 579, 593, 596, 598, 609, 612, 615, 624, 625, 628, 631, 632, 633, 643, 646, 649, 660, 663, 665, 676, 677, 680, 683, 684, 693, 696, 707, 711, 714, 724, 728, 731, 742, 745, 749, 759, 763, 766, 778, 779, 793, 797, 798, 799, 800, 815, 817, 828, 829, 838, 839, 848, 849, 859, 860, 869, 870, 881, 883, 888, 889, 895, 897], "print": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "self": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 881, 882], "gettyp": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "fullnam": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "similar": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 504, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 882, 884, 894], "overrid": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 359, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 889], "object": [11, 15, 16, 18, 19, 22, 24, 25, 26, 27, 29, 30, 33, 34, 38, 42, 45, 46, 49, 51, 52, 53, 54, 57, 61, 64, 65, 70, 71, 73, 75, 79, 82, 83, 88, 89, 90, 92, 96, 99, 100, 105, 106, 107, 109, 113, 116, 117, 124, 125, 126, 128, 132, 135, 136, 141, 142, 143, 148, 152, 155, 156, 161, 162, 163, 165, 169, 172, 173, 178, 179, 180, 182, 186, 190, 191, 196, 197, 198, 200, 204, 207, 208, 213, 214, 215, 217, 221, 224, 225, 231, 232, 233, 235, 239, 242, 243, 249, 250, 251, 254, 258, 261, 262, 267, 268, 269, 271, 275, 278, 279, 284, 285, 286, 288, 292, 296, 297, 304, 305, 306, 307, 316, 329, 331, 335, 341, 369, 379, 384, 385, 394, 395, 398, 400, 408, 409, 410, 415, 416, 419, 421, 422, 423, 424, 427, 428, 429, 431, 441, 442, 443, 444, 445, 452, 453, 456, 458, 466, 467, 468, 473, 474, 477, 479, 487, 490, 491, 497, 498, 501, 505, 509, 511, 512, 513, 516, 517, 518, 519, 520, 522, 524, 527, 528, 529, 536, 537, 538, 540, 543, 549, 550, 554, 555, 556, 558, 561, 566, 567, 572, 573, 574, 576, 579, 580, 581, 582, 588, 589, 590, 591, 593, 596, 599, 600, 605, 606, 607, 609, 612, 613, 614, 621, 622, 623, 625, 628, 629, 630, 637, 638, 639, 641, 643, 646, 647, 648, 654, 655, 656, 658, 660, 663, 666, 667, 671, 672, 673, 675, 677, 680, 681, 682, 688, 689, 690, 693, 696, 697, 698, 703, 704, 705, 707, 711, 712, 713, 720, 721, 722, 724, 728, 729, 730, 737, 738, 739, 740, 742, 745, 747, 748, 753, 754, 755, 757, 758, 759, 763, 764, 765, 766, 771, 772, 779, 783, 784, 796, 803, 804, 811, 812, 815, 817, 818, 819, 821, 822, 823, 824, 828, 829, 830, 831, 833, 834, 836, 838, 839, 840, 841, 843, 844, 846, 848, 849, 850, 851, 853, 854, 856, 857, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 874, 875, 877, 881, 883, 887, 888, 889, 895, 897], "fix": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "make": [11, 15, 38, 42, 57, 61, 75, 79, 92, 96, 109, 113, 128, 132, 148, 152, 165, 169, 182, 186, 200, 204, 217, 221, 235, 239, 254, 258, 271, 275, 288, 292, 369, 379, 400, 408, 420, 421, 422, 431, 441, 458, 466, 479, 487, 488, 505, 509, 511, 524, 527, 540, 543, 558, 561, 576, 579, 583, 593, 596, 609, 612, 625, 628, 643, 646, 660, 663, 677, 680, 693, 696, 699, 707, 711, 724, 728, 742, 745, 766, 779, 815, 817, 828, 829, 838, 839, 848, 849, 859, 860, 869, 870], "grasshopp": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 758, 759, 763, 764, 766, 815, 828, 838, 848, 859, 869, 883, 884, 888, 893, 894, 898], "displai": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 887, 896], "proper": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869, 882], "represent": [11, 24, 25, 38, 51, 52, 55, 57, 70, 71, 75, 88, 89, 92, 105, 106, 109, 124, 125, 128, 141, 142, 148, 161, 162, 165, 178, 179, 182, 196, 197, 200, 213, 214, 217, 231, 232, 235, 249, 250, 254, 267, 268, 271, 284, 285, 288, 304, 305, 369, 394, 395, 400, 415, 416, 420, 421, 427, 428, 431, 452, 453, 458, 473, 474, 479, 497, 498, 509, 516, 517, 524, 536, 537, 540, 554, 555, 558, 572, 573, 576, 588, 589, 593, 605, 606, 609, 621, 622, 625, 637, 638, 643, 654, 655, 660, 671, 672, 677, 688, 689, 693, 703, 704, 707, 720, 721, 724, 737, 738, 742, 753, 754, 766, 803, 804, 813, 815, 821, 822, 828, 833, 834, 838, 843, 844, 848, 853, 854, 859, 864, 865, 869, 874, 875, 881], "ar": [11, 12, 14, 16, 20, 21, 22, 29, 34, 35, 36, 37, 38, 39, 41, 43, 47, 48, 49, 54, 57, 60, 62, 66, 67, 74, 75, 78, 80, 84, 85, 92, 95, 97, 101, 102, 109, 112, 114, 120, 121, 128, 129, 131, 133, 137, 138, 145, 148, 151, 153, 157, 158, 165, 168, 170, 174, 175, 182, 185, 187, 192, 193, 200, 203, 205, 209, 210, 216, 217, 220, 222, 226, 227, 229, 235, 238, 240, 244, 245, 247, 254, 255, 257, 259, 263, 264, 270, 271, 272, 274, 276, 280, 281, 288, 291, 293, 300, 301, 307, 308, 315, 324, 334, 361, 369, 400, 420, 421, 431, 435, 442, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 741, 742, 749, 766, 771, 774, 815, 828, 838, 848, 858, 859, 869, 881, 882, 884, 887, 888, 891, 892, 894, 895, 897, 898], "panel": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 341, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "other": [11, 37, 38, 54, 57, 74, 75, 91, 92, 109, 127, 128, 147, 148, 165, 181, 182, 199, 200, 216, 217, 234, 235, 253, 254, 270, 271, 288, 333, 369, 400, 421, 430, 431, 457, 458, 478, 479, 505, 509, 524, 540, 558, 576, 593, 598, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 770, 815, 828, 838, 848, 859, 869, 879, 881, 882, 885, 894, 898], "output": [11, 24, 25, 35, 38, 51, 52, 57, 70, 71, 75, 88, 89, 92, 105, 106, 109, 124, 125, 128, 141, 142, 148, 161, 162, 165, 178, 179, 182, 196, 197, 200, 213, 214, 217, 231, 232, 235, 249, 250, 254, 267, 268, 271, 284, 285, 288, 304, 305, 369, 394, 395, 400, 415, 416, 421, 427, 428, 431, 452, 453, 458, 473, 474, 479, 497, 498, 509, 516, 517, 524, 536, 537, 540, 554, 555, 558, 572, 573, 576, 588, 589, 593, 605, 606, 609, 621, 622, 625, 637, 638, 643, 654, 655, 660, 671, 672, 677, 688, 689, 693, 703, 704, 707, 720, 721, 724, 737, 738, 742, 753, 754, 758, 766, 803, 804, 815, 821, 822, 828, 833, 834, 838, 843, 844, 848, 853, 854, 859, 864, 865, 869, 874, 875, 888, 889, 891, 892, 895], "add": [12, 13, 39, 40, 58, 59, 76, 77, 93, 94, 110, 111, 129, 130, 149, 150, 166, 167, 183, 184, 201, 202, 218, 219, 236, 237, 255, 256, 272, 273, 289, 290, 370, 371, 372, 401, 402, 425, 430, 432, 433, 459, 460, 480, 481, 510, 525, 541, 559, 577, 594, 610, 626, 644, 661, 678, 694, 708, 709, 725, 726, 743, 758, 767, 768, 769, 770, 771, 772, 773, 793, 886, 895, 897, 898], "extens": [12, 39, 58, 59, 76, 77, 93, 110, 111, 129, 149, 166, 167, 183, 201, 202, 218, 236, 255, 256, 272, 273, 289, 290, 370, 381, 389, 391, 413, 430, 445, 449, 471, 494, 793, 882], "defin": [12, 20, 21, 39, 40, 47, 48, 66, 67, 84, 85, 101, 102, 120, 121, 129, 130, 137, 138, 157, 158, 174, 175, 181, 188, 192, 193, 209, 210, 226, 227, 234, 244, 245, 255, 263, 264, 272, 280, 281, 300, 301, 324, 334, 336, 382, 420, 430, 530, 544, 562, 568, 631, 749, 881, 887, 888, 889, 894, 897, 898], "affect": [12, 39, 40, 129, 130, 255, 272], "": [12, 17, 20, 21, 26, 39, 40, 43, 44, 47, 48, 53, 62, 63, 66, 67, 73, 78, 80, 81, 84, 85, 90, 97, 98, 101, 102, 107, 114, 115, 120, 121, 126, 129, 130, 133, 134, 137, 138, 143, 147, 153, 154, 157, 158, 163, 170, 171, 174, 175, 180, 181, 187, 189, 192, 193, 198, 205, 206, 209, 210, 215, 216, 222, 223, 226, 227, 233, 234, 240, 241, 244, 245, 251, 255, 259, 260, 263, 264, 269, 272, 276, 277, 280, 281, 286, 293, 295, 300, 301, 306, 368, 373, 380, 382, 383, 386, 388, 398, 399, 419, 420, 429, 446, 456, 477, 501, 505, 518, 538, 548, 556, 574, 590, 607, 623, 639, 649, 656, 665, 673, 690, 705, 722, 723, 739, 755, 770, 811, 823, 836, 846, 856, 867, 877, 881, 882, 887, 888, 893, 894, 897], "i": [12, 14, 16, 18, 19, 20, 21, 22, 26, 32, 34, 35, 37, 39, 41, 43, 45, 46, 47, 48, 49, 53, 54, 56, 58, 59, 60, 62, 64, 65, 66, 67, 72, 73, 74, 76, 77, 80, 82, 83, 84, 85, 90, 91, 93, 94, 95, 97, 99, 100, 101, 102, 107, 108, 110, 111, 112, 114, 116, 117, 118, 120, 121, 126, 127, 129, 131, 133, 135, 136, 137, 138, 143, 144, 147, 149, 150, 151, 153, 155, 156, 157, 158, 163, 164, 166, 167, 168, 170, 172, 173, 174, 175, 180, 181, 183, 184, 185, 187, 190, 191, 192, 193, 198, 199, 201, 202, 203, 205, 207, 208, 209, 210, 215, 216, 218, 219, 222, 224, 225, 226, 227, 233, 234, 236, 237, 238, 240, 242, 243, 244, 245, 251, 253, 255, 256, 257, 259, 261, 262, 263, 264, 269, 270, 272, 273, 274, 276, 278, 279, 280, 281, 286, 289, 290, 293, 296, 297, 300, 301, 306, 307, 310, 323, 341, 359, 361, 368, 370, 380, 381, 384, 385, 388, 398, 399, 409, 410, 419, 420, 423, 424, 429, 430, 442, 443, 444, 445, 446, 456, 457, 467, 468, 477, 478, 488, 490, 491, 501, 505, 508, 512, 513, 518, 519, 526, 528, 529, 530, 532, 538, 539, 542, 545, 546, 547, 548, 549, 550, 556, 557, 560, 564, 565, 566, 567, 568, 574, 575, 581, 582, 583, 584, 590, 595, 597, 598, 599, 600, 601, 607, 611, 613, 614, 615, 617, 623, 624, 627, 629, 630, 631, 632, 633, 639, 640, 642, 645, 647, 648, 649, 651, 656, 657, 659, 662, 664, 665, 666, 667, 673, 674, 675, 676, 679, 681, 682, 683, 684, 690, 691, 695, 697, 698, 699, 705, 710, 712, 713, 714, 715, 719, 722, 723, 727, 729, 730, 731, 732, 733, 739, 741, 744, 746, 747, 748, 749, 755, 756, 759, 763, 765, 767, 770, 774, 778, 783, 784, 793, 805, 811, 814, 818, 819, 823, 830, 831, 836, 840, 841, 846, 850, 851, 856, 857, 861, 862, 867, 871, 872, 877, 879, 881, 882, 883, 885, 886, 887, 888, 889, 891, 892, 894, 895, 897, 898], "option": [12, 14, 15, 20, 21, 23, 24, 25, 34, 35, 36, 39, 41, 42, 47, 48, 50, 51, 52, 56, 60, 61, 66, 67, 69, 70, 71, 79, 84, 85, 87, 88, 89, 95, 96, 101, 102, 104, 105, 106, 108, 112, 113, 120, 121, 123, 124, 125, 129, 131, 132, 137, 138, 140, 141, 142, 151, 152, 157, 158, 160, 161, 162, 164, 168, 169, 174, 175, 177, 178, 179, 181, 185, 186, 192, 193, 195, 196, 197, 203, 204, 209, 210, 212, 213, 214, 221, 226, 227, 230, 231, 232, 238, 239, 244, 245, 248, 249, 250, 255, 257, 258, 263, 264, 266, 267, 268, 272, 274, 275, 280, 281, 283, 284, 285, 292, 300, 301, 303, 304, 305, 307, 308, 310, 314, 321, 323, 328, 340, 341, 359, 361, 365, 368, 374, 376, 379, 392, 394, 395, 403, 408, 414, 415, 416, 420, 422, 426, 427, 428, 430, 436, 438, 441, 442, 445, 450, 452, 453, 461, 463, 466, 472, 473, 474, 482, 484, 487, 496, 497, 498, 505, 511, 515, 516, 517, 519, 527, 530, 535, 536, 537, 543, 548, 553, 554, 555, 561, 568, 571, 572, 573, 579, 587, 588, 589, 596, 598, 604, 605, 606, 612, 615, 620, 621, 622, 624, 628, 631, 632, 633, 636, 637, 638, 646, 649, 653, 654, 655, 663, 665, 670, 671, 672, 676, 680, 683, 684, 687, 688, 689, 696, 702, 703, 704, 711, 714, 718, 720, 721, 728, 731, 736, 737, 738, 745, 749, 752, 753, 754, 759, 763, 767, 768, 769, 770, 771, 774, 778, 779, 785, 793, 795, 797, 798, 799, 800, 802, 803, 804, 817, 820, 821, 822, 829, 832, 833, 834, 839, 842, 843, 844, 849, 852, 853, 854, 860, 863, 864, 865, 870, 873, 874, 875, 888, 898], "should": [12, 14, 22, 36, 37, 39, 40, 41, 49, 60, 91, 95, 112, 127, 129, 130, 131, 151, 168, 185, 199, 203, 238, 253, 255, 257, 272, 274, 307, 329, 370, 373, 381, 386, 387, 388, 399, 420, 430, 446, 457, 502, 504, 530, 539, 548, 568, 592, 615, 649, 665, 714, 731, 749, 759, 763, 767, 881, 882, 893, 894], "onli": [12, 14, 22, 39, 41, 49, 60, 74, 95, 112, 129, 131, 151, 168, 185, 203, 238, 255, 257, 272, 274, 310, 323, 361, 376, 438, 463, 484, 793, 887], "implement": [12, 14, 22, 37, 39, 41, 49, 60, 95, 112, 129, 131, 151, 168, 185, 203, 238, 255, 257, 272, 274, 399, 824, 878, 881, 883], "requir": [12, 14, 17, 39, 41, 44, 59, 60, 63, 81, 94, 95, 98, 111, 112, 115, 129, 131, 134, 150, 151, 154, 167, 168, 171, 184, 185, 189, 202, 203, 206, 219, 223, 237, 238, 241, 255, 256, 257, 260, 272, 273, 274, 277, 290, 295, 329, 370, 389, 881], "whenev": [12, 14, 39, 40, 41, 60, 95, 112, 129, 130, 131, 151, 168, 185, 203, 238, 255, 257, 272, 274], "wa": [12, 39, 40, 129, 130, 255, 272, 502], "abl": [12, 39, 40, 129, 130, 255, 272], "calcul": [12, 36, 39, 40, 58, 76, 93, 110, 129, 130, 149, 166, 183, 201, 218, 236, 255, 272, 289, 373, 386, 387, 388, 446, 502, 532, 545, 546, 547, 563, 564, 565, 597, 601, 617, 640, 649, 651, 657, 664, 674, 691, 715, 719, 732, 733, 746, 756, 765, 793, 801, 881, 882], "appli": [12, 39, 40, 129, 130, 181, 234, 255, 270, 272, 308, 314, 321, 328, 329, 340, 359, 365, 396, 397, 417, 418, 420, 430, 454, 455, 475, 476, 499, 500, 502, 503, 504, 505, 631, 785, 805, 881, 882, 894, 898], "note": [12, 30, 39, 129, 255, 272, 307, 767, 879], "ad": [12, 16, 37, 39, 43, 62, 77, 80, 97, 114, 129, 133, 153, 170, 187, 205, 222, 234, 240, 255, 259, 272, 276, 293, 368, 372, 402, 430, 433, 460, 481, 767, 768, 769, 770, 878, 889, 894], "all": [12, 31, 39, 54, 129, 255, 272, 381, 390, 391, 412, 413, 420, 448, 449, 457, 470, 471, 493, 494, 759, 763, 765, 781, 785, 786, 791, 792, 793, 805, 878, 881, 882, 885, 887, 889, 894, 896], "befor": [12, 16, 39, 43, 62, 80, 97, 114, 129, 133, 153, 170, 187, 205, 222, 240, 255, 259, 272, 276, 293, 329, 373, 430, 767, 882], "featur": [12, 13, 37, 39, 40, 59, 77, 94, 111, 129, 130, 150, 167, 181, 184, 188, 202, 216, 219, 234, 237, 255, 256, 270, 272, 273, 290, 316, 329, 368, 371, 372, 376, 390, 391, 401, 402, 412, 413, 420, 425, 430, 432, 433, 438, 448, 449, 459, 460, 463, 470, 471, 480, 481, 484, 493, 494, 502, 504, 523, 526, 539, 542, 544, 557, 560, 562, 578, 592, 595, 608, 611, 624, 627, 632, 633, 642, 645, 659, 662, 676, 679, 683, 684, 695, 699, 706, 710, 723, 727, 741, 744, 793, 882, 883, 886, 888, 889, 894, 895, 898], "In": [13, 307, 575, 882, 883, 893], "adapt": [13, 329], "therefor": [13, 699], "check": [14, 17, 41, 44, 60, 63, 78, 81, 95, 98, 112, 115, 131, 134, 151, 154, 168, 171, 185, 189, 203, 206, 220, 223, 238, 241, 257, 260, 274, 277, 291, 295, 310, 323, 361, 435, 787, 788, 793, 878, 882, 883], "creation": [14, 41, 60, 78, 95, 112, 131, 151, 168, 185, 203, 220, 238, 257, 274, 291, 882, 894], "did": [14, 41, 60, 95, 112, 131, 151, 168, 185, 203, 238, 257, 274], "compli": [14, 17, 41, 43, 44, 60, 62, 63, 80, 81, 95, 97, 98, 112, 114, 115, 131, 133, 134, 151, 153, 154, 168, 170, 171, 185, 187, 189, 203, 205, 206, 222, 223, 238, 240, 241, 257, 259, 260, 274, 276, 277, 293, 295], "cl": [15, 42, 61, 79, 96, 113, 132, 152, 169, 186, 204, 221, 239, 258, 275, 292, 308, 321, 359, 379, 408, 422, 441, 466, 487, 511, 527, 543, 561, 579, 596, 612, 628, 646, 663, 680, 696, 711, 728, 745, 760, 779, 817, 829, 839, 849, 860, 870, 881], "none": [15, 20, 21, 28, 31, 32, 35, 36, 42, 47, 48, 61, 66, 67, 79, 84, 85, 96, 101, 102, 113, 120, 121, 132, 137, 138, 144, 145, 146, 152, 157, 158, 169, 174, 175, 186, 192, 193, 204, 209, 210, 216, 221, 226, 227, 229, 239, 244, 245, 252, 258, 263, 264, 275, 280, 281, 292, 300, 301, 314, 328, 340, 365, 370, 371, 379, 382, 383, 389, 390, 396, 401, 408, 412, 417, 420, 422, 432, 441, 442, 445, 448, 454, 459, 466, 470, 475, 480, 487, 488, 493, 499, 511, 519, 527, 530, 543, 561, 579, 596, 612, 624, 628, 632, 633, 646, 649, 663, 676, 680, 683, 684, 696, 711, 728, 745, 758, 759, 763, 764, 765, 767, 768, 769, 770, 771, 773, 774, 777, 778, 779, 785, 794, 795, 797, 798, 799, 800, 805, 806, 809, 817, 829, 839, 849, 860, 870, 881, 882, 888, 894], "copy_guid": [15, 42, 61, 79, 96, 113, 132, 152, 169, 186, 204, 221, 239, 258, 275, 292, 379, 408, 422, 441, 466, 487, 511, 527, 543, 561, 579, 596, 612, 628, 646, 663, 680, 696, 711, 728, 745, 779, 817, 829, 839, 849, 860, 870], "fals": [15, 23, 24, 25, 34, 42, 50, 51, 52, 56, 61, 69, 70, 71, 79, 87, 88, 89, 96, 104, 105, 106, 113, 123, 124, 125, 132, 140, 141, 142, 152, 160, 161, 162, 169, 177, 178, 179, 186, 195, 196, 197, 204, 212, 213, 214, 221, 230, 231, 232, 239, 248, 249, 250, 258, 266, 267, 268, 275, 283, 284, 285, 292, 303, 304, 305, 310, 313, 323, 327, 336, 339, 361, 364, 376, 379, 392, 394, 395, 408, 414, 415, 416, 422, 426, 427, 428, 435, 438, 441, 450, 452, 453, 463, 466, 472, 473, 474, 484, 487, 496, 497, 498, 511, 515, 516, 517, 527, 535, 536, 537, 539, 543, 553, 554, 555, 557, 561, 571, 572, 573, 579, 587, 588, 589, 596, 604, 605, 606, 612, 620, 621, 622, 628, 636, 637, 638, 646, 653, 654, 655, 659, 663, 670, 671, 672, 680, 687, 688, 689, 696, 702, 703, 704, 711, 714, 718, 720, 721, 728, 731, 736, 737, 738, 741, 745, 749, 752, 753, 754, 779, 793, 802, 803, 804, 817, 820, 821, 822, 829, 832, 833, 834, 839, 842, 843, 844, 849, 852, 853, 854, 860, 863, 864, 865, 870, 873, 874, 875, 889, 895], "independ": [15, 42, 61, 79, 96, 113, 132, 152, 169, 186, 204, 221, 239, 258, 275, 292, 379, 408, 422, 441, 466, 487, 511, 527, 543, 561, 579, 596, 612, 628, 646, 663, 680, 696, 711, 728, 745, 779, 817, 829, 839, 849, 860, 870], "data": [15, 18, 19, 23, 24, 25, 26, 42, 45, 46, 50, 51, 52, 53, 61, 64, 65, 69, 70, 71, 73, 79, 82, 83, 87, 88, 89, 90, 96, 99, 100, 104, 105, 106, 107, 113, 116, 117, 123, 124, 125, 126, 132, 135, 136, 140, 141, 142, 143, 152, 155, 156, 160, 161, 162, 163, 169, 172, 173, 177, 178, 179, 180, 186, 190, 191, 195, 196, 197, 198, 204, 207, 208, 212, 213, 214, 215, 221, 224, 225, 230, 231, 232, 233, 239, 242, 243, 248, 249, 250, 251, 258, 261, 262, 266, 267, 268, 269, 275, 278, 279, 283, 284, 285, 286, 292, 296, 297, 303, 304, 305, 306, 379, 384, 385, 392, 394, 395, 398, 408, 409, 410, 414, 415, 416, 419, 420, 422, 423, 424, 426, 427, 428, 429, 441, 443, 444, 450, 452, 453, 456, 466, 467, 468, 472, 473, 474, 477, 487, 490, 491, 496, 497, 498, 501, 508, 511, 512, 513, 515, 516, 517, 518, 519, 527, 528, 529, 535, 536, 537, 538, 543, 549, 550, 553, 554, 555, 556, 561, 566, 567, 571, 572, 573, 574, 579, 581, 582, 587, 588, 589, 590, 596, 599, 600, 604, 605, 606, 607, 612, 613, 614, 620, 621, 622, 623, 628, 629, 630, 636, 637, 638, 639, 646, 647, 648, 653, 654, 655, 656, 663, 666, 667, 670, 671, 672, 673, 680, 681, 682, 687, 688, 689, 690, 696, 697, 698, 702, 703, 704, 705, 711, 712, 713, 718, 720, 721, 722, 728, 729, 730, 736, 737, 738, 739, 745, 747, 748, 752, 753, 754, 755, 779, 783, 784, 802, 803, 804, 806, 807, 808, 811, 814, 817, 818, 819, 820, 821, 822, 823, 827, 829, 830, 831, 832, 833, 834, 836, 839, 840, 841, 842, 843, 844, 846, 849, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 877, 881, 882, 891, 896], "compa": [15, 18, 19, 23, 42, 45, 46, 50, 61, 64, 65, 69, 79, 82, 83, 87, 96, 99, 100, 104, 113, 116, 117, 123, 132, 135, 136, 140, 152, 155, 156, 160, 169, 172, 173, 177, 186, 190, 191, 195, 204, 207, 208, 212, 221, 224, 225, 230, 239, 242, 243, 248, 258, 261, 262, 266, 275, 278, 279, 283, 292, 296, 297, 303, 341, 368, 375, 376, 377, 378, 379, 384, 385, 392, 396, 397, 403, 404, 406, 407, 408, 409, 410, 414, 417, 418, 420, 422, 423, 424, 426, 437, 438, 439, 440, 441, 442, 443, 444, 450, 454, 455, 461, 462, 463, 464, 465, 466, 467, 468, 472, 475, 476, 482, 483, 484, 485, 486, 487, 490, 491, 496, 499, 500, 511, 512, 513, 515, 527, 528, 529, 531, 535, 542, 543, 545, 546, 547, 549, 550, 553, 560, 561, 564, 565, 566, 567, 571, 578, 579, 580, 581, 582, 583, 584, 587, 596, 597, 599, 600, 601, 604, 612, 613, 614, 616, 617, 620, 628, 629, 630, 636, 640, 646, 647, 648, 650, 651, 653, 662, 663, 664, 666, 667, 670, 674, 680, 681, 682, 687, 691, 696, 697, 698, 702, 710, 711, 712, 713, 715, 718, 719, 728, 729, 730, 731, 732, 733, 736, 744, 745, 746, 747, 748, 752, 756, 775, 776, 779, 783, 784, 797, 798, 802, 805, 809, 810, 817, 818, 819, 820, 824, 829, 830, 831, 832, 839, 840, 841, 842, 849, 850, 851, 852, 858, 860, 861, 862, 863, 870, 871, 872, 873, 879, 880, 881, 884, 886, 889, 891, 893, 896], "return": [15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 32, 34, 35, 36, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 61, 62, 63, 64, 65, 66, 67, 69, 71, 73, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 145, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 239, 240, 241, 242, 243, 244, 245, 248, 250, 251, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 292, 293, 295, 296, 297, 300, 301, 303, 305, 306, 307, 310, 314, 315, 323, 324, 328, 334, 336, 340, 361, 365, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 414, 416, 417, 418, 419, 420, 422, 423, 424, 426, 428, 429, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 451, 453, 454, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 475, 476, 477, 480, 482, 483, 484, 485, 486, 487, 490, 491, 496, 498, 499, 500, 501, 506, 507, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 560, 561, 564, 565, 566, 567, 568, 570, 571, 573, 574, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 590, 595, 596, 597, 598, 599, 600, 601, 603, 604, 606, 607, 611, 612, 613, 614, 615, 616, 617, 619, 620, 622, 623, 627, 628, 629, 630, 631, 632, 633, 635, 636, 638, 639, 640, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 679, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 695, 696, 697, 698, 699, 701, 702, 704, 705, 710, 711, 712, 713, 714, 715, 717, 718, 719, 721, 722, 727, 728, 729, 730, 731, 732, 733, 735, 736, 738, 739, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 758, 759, 763, 764, 767, 768, 769, 770, 771, 773, 774, 775, 776, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 813, 817, 818, 819, 820, 822, 823, 825, 829, 830, 831, 832, 834, 836, 839, 840, 841, 842, 844, 846, 849, 850, 851, 852, 854, 856, 860, 861, 862, 863, 865, 867, 870, 871, 872, 873, 875, 877, 878, 881, 882], "current": [15, 42, 61, 79, 96, 113, 132, 152, 169, 186, 204, 221, 239, 258, 275, 292, 379, 408, 422, 441, 466, 487, 511, 527, 543, 561, 579, 596, 612, 628, 646, 663, 680, 696, 711, 728, 745, 779, 817, 829, 839, 849, 860, 870, 883], "bool": [15, 17, 23, 24, 25, 34, 42, 44, 50, 51, 52, 56, 61, 63, 69, 70, 71, 74, 79, 81, 87, 88, 89, 91, 96, 98, 104, 105, 106, 108, 113, 115, 123, 124, 125, 127, 132, 134, 140, 141, 142, 152, 154, 160, 161, 162, 169, 171, 177, 178, 179, 186, 189, 195, 196, 197, 199, 204, 206, 212, 213, 214, 216, 221, 223, 230, 231, 232, 239, 241, 248, 249, 250, 253, 258, 260, 266, 267, 268, 275, 277, 283, 284, 285, 292, 295, 303, 304, 305, 310, 323, 336, 361, 376, 379, 392, 394, 395, 408, 414, 415, 416, 420, 422, 426, 427, 428, 435, 438, 441, 450, 452, 453, 457, 463, 466, 472, 473, 474, 484, 487, 496, 497, 498, 508, 511, 515, 516, 517, 527, 535, 536, 537, 539, 543, 553, 554, 555, 557, 561, 571, 572, 573, 575, 579, 587, 588, 589, 592, 596, 604, 605, 606, 612, 620, 621, 622, 624, 628, 636, 637, 638, 642, 646, 653, 654, 655, 658, 659, 663, 670, 671, 672, 680, 687, 688, 689, 696, 702, 703, 704, 711, 718, 720, 721, 723, 728, 736, 737, 738, 741, 745, 749, 752, 753, 754, 779, 787, 788, 789, 790, 793, 802, 803, 804, 817, 820, 821, 822, 829, 832, 833, 834, 839, 842, 843, 844, 849, 852, 853, 854, 858, 860, 863, 864, 865, 870, 873, 874, 875], "If": [15, 18, 19, 20, 21, 23, 24, 25, 32, 35, 42, 45, 46, 47, 48, 50, 51, 52, 56, 58, 61, 64, 65, 66, 67, 69, 70, 71, 74, 76, 78, 79, 82, 83, 84, 85, 87, 88, 89, 91, 93, 96, 99, 100, 101, 102, 104, 105, 106, 108, 110, 113, 116, 117, 120, 121, 123, 124, 125, 127, 132, 135, 136, 137, 138, 140, 141, 142, 144, 149, 152, 155, 156, 157, 158, 160, 161, 162, 164, 166, 169, 172, 173, 174, 175, 177, 178, 179, 183, 186, 190, 191, 192, 193, 195, 196, 197, 199, 201, 204, 207, 208, 209, 210, 212, 213, 214, 216, 218, 220, 221, 224, 225, 226, 227, 230, 231, 232, 236, 239, 242, 243, 244, 245, 248, 249, 250, 253, 258, 261, 262, 263, 264, 266, 267, 268, 275, 278, 279, 280, 281, 283, 284, 285, 289, 291, 292, 296, 297, 300, 301, 303, 304, 305, 361, 376, 379, 384, 385, 390, 392, 394, 395, 408, 409, 410, 412, 414, 415, 416, 422, 423, 424, 426, 427, 428, 438, 441, 443, 444, 445, 448, 450, 452, 453, 463, 466, 467, 468, 470, 472, 473, 474, 484, 487, 490, 491, 493, 496, 497, 498, 508, 511, 512, 513, 515, 516, 517, 526, 527, 528, 529, 535, 536, 537, 542, 543, 549, 550, 553, 554, 555, 560, 561, 566, 567, 571, 572, 573, 575, 578, 579, 581, 582, 587, 588, 589, 595, 596, 599, 600, 604, 605, 606, 611, 612, 613, 614, 620, 621, 622, 627, 628, 629, 630, 636, 637, 638, 642, 645, 646, 647, 648, 653, 654, 655, 662, 663, 666, 667, 670, 671, 672, 679, 680, 681, 682, 687, 688, 689, 695, 696, 697, 698, 702, 703, 704, 710, 711, 712, 713, 718, 720, 721, 723, 727, 728, 729, 730, 736, 737, 738, 744, 745, 747, 748, 752, 753, 754, 767, 768, 770, 771, 774, 779, 783, 784, 793, 802, 803, 804, 817, 818, 819, 820, 821, 822, 829, 830, 831, 832, 833, 834, 839, 840, 841, 842, 843, 844, 849, 850, 851, 852, 853, 854, 860, 861, 862, 863, 864, 865, 870, 871, 872, 873, 874, 875, 878, 879, 884, 888, 889, 893, 894, 895], "true": [15, 23, 24, 25, 34, 42, 50, 51, 52, 56, 61, 69, 70, 71, 72, 74, 79, 87, 88, 89, 91, 96, 104, 105, 106, 108, 113, 123, 124, 125, 127, 132, 140, 141, 142, 152, 160, 161, 162, 169, 177, 178, 179, 186, 195, 196, 197, 199, 204, 212, 213, 214, 216, 221, 230, 231, 232, 239, 248, 249, 250, 253, 258, 266, 267, 268, 275, 283, 284, 285, 292, 303, 304, 305, 310, 323, 324, 334, 336, 361, 376, 379, 381, 392, 394, 395, 408, 414, 415, 416, 420, 422, 426, 427, 428, 435, 438, 441, 450, 452, 453, 457, 463, 466, 472, 473, 474, 484, 487, 496, 497, 498, 508, 511, 515, 516, 517, 527, 535, 536, 537, 539, 543, 553, 554, 555, 557, 561, 571, 572, 573, 575, 579, 587, 588, 589, 596, 604, 605, 606, 612, 620, 621, 622, 628, 636, 637, 638, 642, 646, 653, 654, 655, 659, 663, 670, 671, 672, 680, 687, 688, 689, 696, 702, 703, 704, 711, 718, 720, 721, 723, 728, 736, 737, 738, 741, 745, 749, 752, 753, 754, 763, 770, 779, 787, 788, 789, 793, 802, 803, 804, 817, 820, 821, 822, 829, 832, 833, 834, 839, 842, 843, 844, 849, 852, 853, 854, 860, 863, 864, 865, 870, 873, 874, 875, 888, 889, 891, 894, 895], "have": [15, 16, 42, 43, 61, 62, 74, 77, 79, 80, 96, 97, 113, 114, 132, 133, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 258, 259, 270, 275, 276, 291, 292, 293, 310, 323, 361, 368, 379, 408, 422, 430, 441, 466, 487, 511, 527, 543, 561, 579, 596, 612, 628, 632, 633, 646, 663, 680, 683, 684, 696, 711, 728, 745, 767, 779, 789, 817, 829, 839, 849, 860, 870, 882, 888], "same": [15, 28, 35, 42, 56, 61, 74, 79, 96, 113, 132, 144, 145, 146, 152, 169, 186, 204, 221, 239, 252, 258, 275, 291, 292, 379, 408, 422, 430, 441, 466, 487, 511, 527, 543, 561, 579, 596, 612, 628, 646, 663, 680, 696, 711, 728, 745, 770, 779, 817, 829, 839, 849, 857, 858, 860, 870, 881, 882, 893], "guid": [15, 24, 25, 37, 42, 51, 52, 61, 70, 71, 79, 88, 89, 96, 105, 106, 113, 124, 125, 132, 141, 142, 152, 161, 162, 169, 178, 179, 186, 196, 197, 204, 213, 214, 221, 231, 232, 234, 239, 249, 250, 258, 267, 268, 275, 284, 285, 292, 304, 305, 379, 394, 395, 408, 415, 416, 422, 427, 428, 441, 452, 453, 466, 473, 474, 487, 497, 498, 511, 516, 517, 527, 536, 537, 543, 554, 555, 561, 572, 573, 579, 588, 589, 596, 605, 606, 612, 621, 622, 628, 637, 638, 646, 654, 655, 663, 671, 672, 680, 688, 689, 696, 703, 704, 711, 720, 721, 728, 737, 738, 745, 753, 754, 779, 780, 803, 804, 817, 821, 822, 829, 833, 834, 839, 843, 844, 849, 853, 854, 860, 864, 865, 870, 874, 875, 883, 886, 888, 894], "origin": [15, 42, 61, 79, 96, 113, 132, 152, 169, 186, 204, 221, 239, 258, 275, 292, 368, 379, 408, 422, 441, 466, 487, 511, 527, 543, 561, 579, 596, 612, 628, 646, 663, 680, 696, 711, 728, 745, 779, 797, 798, 817, 829, 839, 849, 860, 870, 888, 897], "classmethod": [16, 17, 18, 19, 20, 21, 26, 32, 34, 43, 44, 45, 46, 47, 48, 53, 55, 62, 63, 64, 65, 66, 67, 73, 80, 81, 82, 83, 84, 85, 90, 97, 98, 99, 100, 101, 102, 107, 114, 115, 116, 117, 120, 121, 126, 133, 134, 135, 136, 137, 138, 143, 153, 154, 155, 156, 157, 158, 163, 170, 171, 172, 173, 174, 175, 180, 187, 189, 190, 191, 192, 193, 198, 205, 206, 207, 208, 209, 210, 215, 222, 223, 224, 225, 226, 227, 233, 240, 241, 242, 243, 244, 245, 251, 259, 260, 261, 262, 263, 264, 269, 276, 277, 278, 279, 280, 281, 286, 293, 295, 296, 297, 300, 301, 306, 342, 382, 383, 384, 385, 398, 409, 410, 419, 423, 424, 429, 442, 443, 444, 445, 456, 467, 468, 477, 488, 489, 490, 491, 501, 512, 513, 518, 521, 528, 529, 530, 531, 538, 544, 548, 549, 550, 556, 562, 566, 567, 568, 574, 581, 582, 583, 584, 590, 598, 599, 600, 607, 613, 614, 615, 616, 623, 629, 630, 631, 632, 633, 639, 647, 648, 649, 650, 656, 665, 666, 667, 673, 681, 682, 683, 684, 690, 697, 698, 699, 705, 712, 713, 714, 722, 729, 730, 731, 739, 747, 748, 749, 755, 783, 784, 811, 813, 818, 819, 823, 825, 826, 830, 831, 836, 840, 841, 846, 850, 851, 856, 861, 862, 867, 871, 872, 877, 881], "kwarg": [16, 20, 21, 43, 47, 48, 62, 66, 67, 80, 84, 85, 97, 101, 102, 114, 120, 121, 133, 137, 138, 153, 157, 158, 170, 174, 175, 187, 192, 193, 205, 209, 210, 222, 226, 227, 240, 244, 245, 259, 263, 264, 276, 280, 281, 293, 300, 301, 308, 321, 359, 442, 445, 488, 489, 530, 531, 548, 584, 615, 616, 632, 633, 649, 650, 683, 767, 769, 881, 882], "new": [16, 43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 514, 534, 552, 570, 586, 603, 619, 635, 652, 669, 686, 701, 717, 735, 751, 764, 884, 888], "differ": [16, 765, 824, 881, 889, 894], "fom": 16, "pass": [16, 20, 21, 36, 43, 47, 48, 62, 66, 67, 80, 84, 85, 97, 101, 102, 114, 120, 121, 133, 137, 138, 153, 157, 158, 170, 174, 175, 187, 192, 193, 205, 209, 210, 222, 226, 227, 240, 244, 245, 259, 263, 264, 276, 280, 281, 293, 300, 301, 308, 321, 359, 381, 442, 445], "constructor": [16, 20, 21, 43, 47, 48, 62, 66, 67, 80, 84, 85, 97, 101, 102, 114, 120, 121, 133, 137, 138, 153, 157, 158, 170, 174, 175, 187, 192, 193, 205, 209, 210, 222, 226, 227, 240, 244, 245, 259, 263, 264, 276, 280, 281, 293, 300, 301, 329, 442, 445, 583, 882], "instead": [16, 37, 583, 888], "separ": [16, 887], "argument": [16, 20, 21, 43, 47, 48, 62, 66, 67, 80, 84, 85, 97, 101, 102, 114, 120, 121, 133, 137, 138, 153, 157, 158, 170, 174, 175, 187, 192, 193, 205, 209, 210, 222, 226, 227, 240, 244, 245, 259, 263, 264, 276, 280, 281, 293, 300, 301, 308, 321, 329, 359, 442, 445, 769, 882], "expect": [16, 43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 310, 658], "been": [16, 43, 62, 77, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 767, 858], "call": [16, 22, 43, 49, 58, 59, 62, 76, 77, 80, 93, 94, 97, 110, 111, 114, 133, 149, 150, 153, 166, 167, 170, 183, 184, 187, 201, 202, 205, 218, 219, 222, 236, 237, 240, 256, 259, 273, 276, 289, 290, 293, 329, 881, 888], "code": [16, 43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 882, 883], "doe": [16, 43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 310, 323, 361, 373, 386, 388, 399, 446, 526, 578, 595, 611, 627, 645, 679, 695, 824, 888], "verifi": [16, 43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 381, 790, 881, 882], "given": [16, 28, 34, 35, 43, 55, 62, 80, 97, 114, 133, 144, 145, 146, 153, 170, 187, 205, 222, 240, 252, 259, 276, 293, 307, 310, 314, 315, 323, 324, 328, 340, 359, 361, 365, 380, 381, 383, 387, 442, 445, 506, 507, 514, 519, 522, 532, 533, 534, 545, 546, 547, 551, 552, 563, 564, 565, 569, 570, 585, 586, 597, 601, 602, 603, 617, 618, 619, 631, 634, 635, 640, 651, 652, 657, 664, 668, 669, 674, 685, 686, 691, 700, 701, 715, 716, 717, 719, 732, 733, 734, 735, 746, 750, 751, 756, 786, 787, 813, 887], "adjac": [16, 43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 778], "lie": [16, 43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293], "topologi": [16, 33, 35, 36, 37, 43, 54, 55, 56, 62, 74, 80, 91, 97, 108, 114, 133, 147, 153, 164, 170, 181, 187, 199, 205, 216, 222, 234, 240, 253, 259, 270, 276, 293, 308, 310, 359, 361, 765, 801, 882, 894, 895, 898], "allow": [16, 43, 62, 80, 91, 97, 114, 127, 133, 153, 170, 187, 199, 205, 222, 240, 253, 259, 276, 293, 315, 316, 329, 331, 381, 765, 858, 889, 894], "them": [16, 43, 62, 74, 80, 97, 108, 114, 133, 147, 153, 170, 181, 187, 205, 216, 222, 234, 240, 259, 276, 293, 478, 778, 789, 881, 882, 887, 894], "respons": [16, 43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 420], "A": [16, 30, 31, 32, 34, 37, 145, 181, 234, 307, 310, 314, 315, 323, 328, 340, 361, 365, 368, 371, 382, 383, 399, 401, 420, 430, 432, 435, 442, 445, 459, 480, 502, 505, 514, 519, 533, 534, 551, 552, 569, 570, 585, 586, 602, 603, 618, 619, 634, 635, 652, 668, 669, 685, 686, 700, 701, 716, 717, 734, 735, 740, 750, 751, 765, 767, 773, 785, 786, 790, 793, 879, 881, 885, 888, 889, 894], "valueerror": [16, 767, 770, 774], "less": [16, 323, 368, 430], "than": [16, 23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 323, 392, 414, 426, 450, 472, 496, 505, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "two": [16, 35, 36, 37, 54, 56, 74, 91, 108, 118, 147, 181, 216, 234, 253, 270, 291, 308, 310, 314, 315, 321, 323, 328, 340, 359, 361, 365, 380, 502, 530, 531, 598, 699, 771, 789, 795, 882, 892, 894], "timbermodel": [16, 20, 21, 22, 32, 43, 47, 48, 49, 62, 66, 67, 80, 84, 85, 97, 101, 102, 114, 120, 121, 133, 137, 138, 144, 153, 157, 158, 170, 174, 175, 187, 192, 193, 205, 209, 210, 222, 226, 227, 240, 244, 245, 259, 263, 264, 276, 280, 281, 293, 300, 301, 520, 522, 883], "jo": 16, "belong": [16, 20, 21, 43, 47, 48, 62, 66, 67, 80, 84, 85, 97, 101, 102, 114, 120, 121, 133, 137, 138, 153, 157, 158, 170, 174, 175, 187, 192, 193, 205, 209, 210, 222, 226, 227, 240, 244, 245, 259, 263, 264, 276, 280, 281, 293, 300, 301], "whould": 16, "togeth": [16, 29, 478, 888], "number": [17, 43, 44, 62, 63, 80, 81, 97, 98, 114, 115, 133, 134, 144, 153, 154, 170, 171, 187, 189, 205, 206, 222, 223, 240, 241, 259, 260, 276, 277, 293, 295, 430, 505, 759, 763, 889, 898], "filepath": [18, 24, 45, 51, 64, 70, 82, 88, 99, 105, 116, 124, 135, 141, 155, 161, 172, 178, 190, 196, 207, 213, 224, 231, 242, 249, 261, 267, 278, 284, 296, 304, 384, 394, 409, 415, 423, 427, 443, 452, 467, 473, 490, 497, 512, 516, 528, 536, 549, 554, 566, 572, 581, 588, 599, 605, 613, 621, 629, 637, 647, 654, 666, 671, 681, 688, 697, 703, 712, 720, 729, 737, 747, 753, 783, 803, 818, 821, 825, 826, 830, 833, 840, 843, 850, 853, 861, 864, 871, 874], "construct": [18, 19, 26, 45, 46, 53, 64, 65, 73, 82, 83, 90, 99, 100, 107, 116, 117, 126, 135, 136, 143, 155, 156, 163, 172, 173, 180, 190, 191, 198, 207, 208, 215, 224, 225, 233, 242, 243, 251, 261, 262, 269, 278, 279, 286, 296, 297, 306, 384, 385, 398, 409, 410, 419, 423, 424, 429, 443, 444, 445, 456, 467, 468, 477, 490, 491, 501, 512, 513, 518, 528, 529, 531, 538, 549, 550, 556, 566, 567, 574, 580, 581, 582, 583, 584, 590, 599, 600, 607, 613, 614, 616, 623, 629, 630, 632, 633, 639, 647, 648, 650, 656, 666, 667, 673, 681, 682, 683, 684, 690, 697, 698, 699, 705, 712, 713, 722, 729, 730, 739, 747, 748, 755, 783, 784, 811, 818, 819, 823, 830, 831, 836, 840, 841, 846, 850, 851, 856, 861, 862, 867, 871, 872, 877, 883, 889], "from": [18, 19, 20, 21, 23, 24, 25, 30, 31, 32, 35, 45, 46, 47, 48, 50, 51, 52, 64, 65, 66, 67, 69, 70, 71, 82, 83, 84, 85, 87, 88, 89, 99, 100, 101, 102, 104, 105, 106, 116, 117, 120, 121, 123, 124, 125, 135, 136, 137, 138, 140, 141, 142, 145, 155, 156, 157, 158, 160, 161, 162, 172, 173, 174, 175, 177, 178, 179, 181, 190, 191, 192, 193, 195, 196, 197, 207, 208, 209, 210, 212, 213, 214, 224, 225, 226, 227, 230, 231, 232, 234, 242, 243, 244, 245, 248, 249, 250, 261, 262, 263, 264, 266, 267, 268, 270, 278, 279, 280, 281, 283, 284, 285, 296, 297, 300, 301, 303, 304, 305, 341, 382, 383, 384, 385, 388, 389, 390, 392, 394, 395, 399, 409, 410, 412, 414, 415, 416, 420, 423, 424, 426, 427, 428, 442, 443, 444, 445, 446, 448, 450, 452, 453, 467, 468, 470, 472, 473, 474, 489, 490, 491, 493, 496, 497, 498, 507, 512, 513, 515, 516, 517, 519, 528, 529, 530, 531, 532, 535, 536, 537, 539, 545, 546, 547, 548, 549, 550, 553, 554, 555, 557, 563, 564, 565, 566, 567, 568, 571, 572, 573, 581, 582, 583, 584, 587, 588, 589, 597, 598, 599, 600, 601, 604, 605, 606, 613, 614, 615, 616, 617, 620, 621, 622, 629, 630, 631, 632, 633, 636, 637, 638, 640, 647, 648, 649, 650, 651, 653, 654, 655, 657, 659, 664, 665, 666, 667, 670, 671, 672, 674, 681, 682, 683, 684, 687, 688, 689, 691, 697, 698, 702, 703, 704, 712, 713, 714, 715, 718, 719, 720, 721, 729, 730, 731, 732, 733, 736, 737, 738, 741, 746, 747, 748, 749, 752, 753, 754, 756, 759, 763, 770, 783, 784, 794, 796, 802, 803, 804, 818, 819, 820, 821, 822, 824, 825, 830, 831, 832, 833, 834, 840, 841, 842, 843, 844, 850, 851, 852, 853, 854, 861, 862, 863, 864, 865, 871, 872, 873, 874, 875, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 894, 896], "json": [18, 19, 24, 25, 45, 46, 51, 52, 64, 65, 70, 71, 82, 83, 88, 89, 99, 100, 105, 106, 116, 117, 124, 125, 135, 136, 141, 142, 155, 156, 161, 162, 172, 173, 178, 179, 190, 191, 196, 197, 207, 208, 213, 214, 224, 225, 231, 232, 242, 243, 249, 250, 261, 262, 267, 268, 278, 279, 284, 285, 296, 297, 304, 305, 384, 385, 394, 395, 409, 410, 415, 416, 423, 424, 427, 428, 443, 444, 452, 453, 467, 468, 473, 474, 490, 491, 497, 498, 512, 513, 516, 517, 528, 529, 536, 537, 549, 550, 554, 555, 566, 567, 572, 573, 581, 582, 588, 589, 599, 600, 605, 606, 613, 614, 621, 622, 629, 630, 637, 638, 647, 648, 654, 655, 666, 667, 671, 672, 681, 682, 688, 689, 697, 698, 703, 704, 712, 713, 720, 721, 729, 730, 737, 738, 747, 748, 753, 754, 783, 784, 803, 804, 818, 819, 821, 822, 824, 825, 826, 830, 831, 833, 834, 840, 841, 843, 844, 850, 851, 853, 854, 861, 862, 864, 865, 871, 872, 874, 875], "file": [18, 24, 45, 51, 64, 70, 82, 88, 99, 105, 116, 124, 135, 141, 155, 161, 172, 178, 190, 196, 207, 213, 224, 231, 242, 249, 261, 267, 278, 284, 296, 304, 384, 394, 409, 415, 423, 427, 443, 452, 467, 473, 490, 497, 512, 516, 519, 520, 522, 528, 536, 549, 554, 566, 572, 581, 588, 599, 605, 613, 621, 629, 637, 647, 654, 666, 671, 681, 688, 697, 703, 712, 720, 729, 737, 747, 753, 783, 803, 818, 821, 824, 825, 826, 830, 833, 840, 843, 850, 853, 861, 864, 871, 874, 885, 890, 891], "str": [18, 19, 23, 24, 25, 37, 45, 46, 50, 51, 52, 55, 64, 65, 69, 70, 71, 82, 83, 87, 88, 89, 99, 100, 104, 105, 106, 116, 117, 123, 124, 125, 135, 136, 140, 141, 142, 155, 156, 160, 161, 162, 172, 173, 177, 178, 179, 190, 191, 195, 196, 197, 207, 208, 212, 213, 214, 224, 225, 230, 231, 232, 234, 242, 243, 248, 249, 250, 261, 262, 266, 267, 268, 278, 279, 283, 284, 285, 296, 297, 303, 304, 305, 308, 380, 384, 385, 392, 394, 395, 409, 410, 414, 415, 416, 423, 424, 426, 427, 428, 443, 444, 450, 452, 453, 467, 468, 472, 473, 474, 490, 491, 496, 497, 498, 502, 503, 504, 507, 508, 512, 513, 515, 516, 517, 519, 520, 522, 528, 529, 535, 536, 537, 539, 548, 549, 550, 553, 554, 555, 557, 566, 567, 568, 571, 572, 573, 581, 582, 587, 588, 589, 599, 600, 604, 605, 606, 613, 614, 620, 621, 622, 629, 630, 636, 637, 638, 647, 648, 653, 654, 655, 659, 665, 666, 667, 670, 671, 672, 681, 682, 687, 688, 689, 697, 698, 702, 703, 704, 706, 712, 713, 718, 720, 721, 723, 729, 730, 736, 737, 738, 741, 747, 748, 749, 752, 753, 754, 758, 763, 764, 769, 770, 780, 783, 784, 785, 788, 802, 803, 804, 813, 818, 819, 820, 821, 822, 825, 826, 830, 831, 832, 833, 834, 840, 841, 842, 843, 844, 850, 851, 852, 853, 854, 858, 861, 862, 863, 864, 865, 871, 872, 873, 874, 875, 882], "path": [18, 24, 45, 51, 64, 70, 82, 88, 99, 105, 116, 124, 135, 141, 155, 161, 172, 178, 190, 196, 207, 213, 224, 231, 242, 249, 261, 267, 278, 284, 296, 304, 384, 394, 409, 415, 423, 427, 443, 452, 467, 473, 490, 497, 512, 516, 519, 522, 528, 536, 549, 554, 566, 572, 581, 588, 599, 605, 613, 621, 629, 637, 647, 654, 666, 671, 681, 688, 697, 703, 712, 720, 729, 737, 747, 753, 783, 803, 818, 821, 825, 826, 830, 833, 840, 843, 850, 853, 861, 864, 871, 874, 891], "ha": [18, 19, 45, 46, 64, 65, 77, 82, 83, 99, 100, 116, 117, 135, 136, 155, 156, 172, 173, 190, 191, 207, 208, 224, 225, 242, 243, 261, 262, 278, 279, 296, 297, 307, 384, 385, 409, 410, 423, 424, 443, 444, 467, 468, 490, 491, 502, 512, 513, 528, 529, 549, 550, 566, 567, 581, 582, 599, 600, 613, 614, 629, 630, 647, 648, 666, 667, 681, 682, 697, 698, 712, 713, 729, 730, 747, 748, 770, 783, 784, 818, 819, 830, 831, 840, 841, 850, 851, 858, 861, 862, 871, 872, 888, 894, 897], "correct": [18, 19, 45, 46, 64, 65, 82, 83, 99, 100, 116, 117, 135, 136, 155, 156, 172, 173, 190, 191, 207, 208, 224, 225, 242, 243, 261, 262, 278, 279, 296, 297, 361, 384, 385, 409, 410, 423, 424, 443, 444, 467, 468, 490, 491, 512, 513, 528, 529, 549, 550, 566, 567, 581, 582, 599, 600, 613, 614, 629, 630, 640, 647, 648, 666, 667, 681, 682, 691, 697, 698, 712, 713, 729, 730, 747, 748, 783, 784, 818, 819, 830, 831, 840, 841, 850, 851, 861, 862, 871, 872, 882], "schema": [18, 19, 26, 45, 46, 53, 64, 65, 73, 82, 83, 90, 99, 100, 107, 116, 117, 126, 135, 136, 143, 155, 156, 163, 172, 173, 180, 190, 191, 198, 207, 208, 215, 224, 225, 233, 242, 243, 251, 261, 262, 269, 278, 279, 286, 296, 297, 306, 384, 385, 398, 409, 410, 419, 423, 424, 429, 443, 444, 456, 467, 468, 477, 490, 491, 501, 512, 513, 518, 528, 529, 538, 549, 550, 556, 566, 567, 574, 581, 582, 590, 599, 600, 607, 613, 614, 623, 629, 630, 639, 647, 648, 656, 666, 667, 673, 681, 682, 690, 697, 698, 705, 712, 713, 722, 729, 730, 739, 747, 748, 755, 783, 784, 811, 818, 819, 823, 830, 831, 836, 840, 841, 846, 850, 851, 856, 861, 862, 867, 871, 872, 877], "typeerror": [18, 19, 45, 46, 64, 65, 82, 83, 99, 100, 116, 117, 135, 136, 155, 156, 172, 173, 190, 191, 207, 208, 224, 225, 242, 243, 261, 262, 278, 279, 296, 297, 384, 385, 409, 410, 423, 424, 443, 444, 467, 468, 490, 491, 512, 513, 528, 529, 549, 550, 566, 567, 581, 582, 599, 600, 613, 614, 629, 630, 647, 648, 666, 667, 681, 682, 697, 698, 712, 713, 729, 730, 747, 748, 783, 784, 818, 819, 830, 831, 840, 841, 850, 851, 861, 862, 871, 872], "cluster": [20, 28, 30, 31, 32, 47, 66, 84, 101, 120, 137, 144, 145, 146, 157, 174, 192, 209, 226, 244, 252, 263, 280, 300, 883], "reordered_el": [20, 21, 47, 48, 66, 67, 84, 85, 101, 102, 120, 121, 137, 138, 157, 158, 174, 175, 192, 193, 209, 210, 226, 227, 244, 245, 263, 264, 280, 281, 300, 301], "provid": [20, 21, 33, 47, 48, 56, 66, 67, 84, 85, 101, 102, 120, 121, 137, 138, 157, 158, 164, 174, 175, 192, 193, 209, 210, 226, 227, 229, 244, 245, 247, 263, 264, 280, 281, 300, 301, 336, 699, 765, 767, 770, 774, 824, 880, 881, 882, 885, 886, 888, 895], "explicitli": [20, 21, 47, 48, 66, 67, 84, 85, 101, 102, 120, 121, 137, 138, 157, 158, 174, 175, 192, 193, 209, 210, 226, 227, 244, 245, 263, 264, 280, 281, 300, 301], "order": [20, 21, 35, 47, 48, 66, 67, 84, 85, 101, 102, 120, 121, 137, 138, 157, 158, 174, 175, 192, 193, 209, 210, 226, 227, 244, 245, 263, 264, 280, 281, 300, 301, 307, 315, 329, 361, 505, 857, 881, 882], "dict": [20, 21, 37, 43, 47, 48, 62, 66, 67, 80, 84, 85, 97, 101, 102, 114, 120, 121, 133, 137, 138, 153, 157, 158, 170, 174, 175, 187, 192, 193, 205, 209, 210, 222, 226, 227, 240, 244, 245, 259, 263, 264, 276, 280, 281, 293, 300, 301, 308, 321, 359, 420, 442, 445, 505, 506, 624, 632, 633, 676, 683, 684, 765, 769], "addit": [20, 21, 34, 43, 47, 48, 62, 66, 67, 80, 84, 85, 97, 101, 102, 114, 120, 121, 133, 137, 138, 153, 157, 158, 170, 174, 175, 187, 192, 193, 205, 209, 210, 222, 226, 227, 240, 244, 245, 259, 263, 264, 276, 280, 281, 293, 300, 301, 442, 445, 769, 886, 887, 888, 892], "keyword": [20, 21, 43, 47, 48, 62, 66, 67, 80, 84, 85, 97, 101, 102, 114, 120, 121, 133, 137, 138, 153, 157, 158, 170, 174, 175, 187, 192, 193, 205, 209, 210, 222, 226, 227, 240, 244, 245, 259, 263, 264, 276, 280, 281, 293, 300, 301, 308, 321, 359, 442, 445, 769], "candid": [21, 48, 67, 85, 102, 121, 138, 158, 175, 193, 210, 227, 245, 264, 281, 301], "jointcandid": [21, 48, 67, 85, 102, 121, 138, 158, 175, 193, 210, 227, 245, 264, 281, 301], "restor": [22, 49, 68, 86, 103, 122, 139, 159, 176, 194, 211, 228, 246, 265, 282, 302, 882], "refer": [22, 49, 68, 86, 103, 122, 139, 159, 176, 194, 211, 228, 246, 265, 282, 302, 368, 373, 386, 387, 388, 393, 430, 446, 451, 478, 507, 508, 523, 530, 539, 548, 557, 568, 575, 583, 591, 592, 598, 608, 615, 624, 631, 632, 633, 642, 649, 659, 665, 676, 683, 684, 706, 714, 723, 731, 741, 749, 881, 882, 883, 886, 887], "dure": [22, 23, 49, 50, 69, 77, 87, 104, 123, 140, 160, 177, 181, 195, 212, 230, 248, 266, 283, 303, 316, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 793, 802, 820, 832, 842, 852, 858, 863, 873, 881, 882], "serial": [22, 49, 68, 86, 103, 122, 139, 159, 176, 194, 211, 228, 246, 265, 282, 302, 521, 824, 881, 882], "part": [22, 29, 49, 505, 597, 598, 767, 774, 878, 883, 888, 892], "To": [22, 49, 884, 886, 893, 895, 898], "avoid": [22, 30, 49, 374, 377, 403, 406, 436, 461, 464, 482, 485, 882], "circular": [22, 49], "store": [22, 49, 882, 887, 888], "kei": [22, 49, 368, 370, 389, 430, 507, 658, 887], "respect": [22, 37, 49], "de": [22, 49, 68, 86, 103, 122, 139, 159, 176, 194, 211, 228, 246, 265, 282, 302, 882], "sinc": [22, 49, 793], "role": [22, 35, 49, 315, 882], "specif": [22, 35, 49, 782, 790, 881, 882, 883, 888, 889, 894], "e": [22, 35, 49, 144, 530, 548, 568, 598, 615, 631, 665, 714, 731, 749, 881, 882, 884, 887, 897], "g": [22, 35, 49, 882, 887], "cross": [22, 35, 49, 56, 68, 72, 74, 86, 103, 122, 127, 139, 147, 159, 164, 176, 181, 194, 199, 211, 216, 228, 234, 246, 265, 282, 287, 291, 302, 368, 382, 383, 548, 568, 665, 714, 723, 731, 749, 882, 888, 889, 894], "concret": [22, 49, 882], "exampl": [22, 23, 49, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 307, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 770, 802, 820, 832, 842, 852, 863, 873, 883, 886, 887, 888, 898], "tbuttjoint": [22, 49, 882, 883], "as_str": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "comput": [23, 36, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 374, 375, 376, 377, 378, 392, 403, 404, 406, 407, 414, 426, 436, 437, 438, 439, 440, 450, 461, 462, 463, 464, 465, 472, 482, 483, 484, 485, 486, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 775, 776, 802, 820, 832, 842, 852, 863, 873], "hash": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "comparison": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "version": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "control": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "algorithm": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 307, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "digest": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "hexadecim": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "format": [23, 24, 25, 50, 51, 52, 69, 70, 71, 87, 88, 89, 104, 105, 106, 123, 124, 125, 140, 141, 142, 160, 161, 162, 177, 178, 179, 195, 196, 197, 212, 213, 214, 230, 231, 232, 248, 249, 250, 266, 267, 268, 283, 284, 285, 303, 304, 305, 392, 394, 395, 414, 415, 416, 426, 427, 428, 450, 452, 453, 472, 473, 474, 496, 497, 498, 506, 515, 516, 517, 519, 535, 536, 537, 553, 554, 555, 571, 572, 573, 587, 588, 589, 604, 605, 606, 620, 621, 622, 636, 637, 638, 653, 654, 655, 670, 671, 672, 687, 688, 689, 702, 703, 704, 718, 720, 721, 736, 737, 738, 752, 753, 754, 802, 803, 804, 820, 821, 822, 824, 832, 833, 834, 842, 843, 844, 852, 853, 854, 863, 864, 865, 873, 874, 875, 881, 887], "rather": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "byte": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "datastructur": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 375, 392, 404, 414, 426, 437, 438, 450, 462, 463, 472, 483, 484, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 775, 776, 797, 799, 802, 807, 808, 809, 810, 820, 832, 842, 852, 863, 873], "import": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 770, 793, 802, 820, 832, 842, 852, 863, 873, 898], "mesh": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 375, 392, 404, 414, 426, 437, 438, 450, 462, 463, 472, 483, 484, 496, 515, 535, 553, 571, 587, 604, 620, 632, 633, 636, 653, 670, 683, 684, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "from_obj": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "get": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 780, 785, 786, 802, 820, 832, 842, 852, 863, 873, 882, 886, 887], "face": [23, 50, 54, 56, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 368, 381, 392, 414, 426, 430, 445, 450, 472, 489, 496, 507, 515, 535, 553, 557, 571, 587, 604, 620, 632, 633, 636, 640, 653, 658, 670, 683, 684, 687, 691, 699, 702, 718, 736, 741, 752, 802, 820, 832, 842, 852, 863, 873, 881, 882, 894], "obj": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 858, 863, 873], "v1": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "v2": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "vertex_attribut": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "vertex_sampl": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "1": [23, 50, 69, 87, 91, 104, 123, 127, 140, 160, 177, 181, 195, 199, 212, 216, 230, 234, 248, 253, 266, 283, 303, 368, 392, 414, 426, 450, 472, 482, 496, 505, 507, 515, 523, 533, 535, 539, 551, 553, 557, 569, 571, 585, 587, 592, 602, 604, 608, 618, 620, 624, 634, 636, 642, 653, 659, 668, 670, 676, 685, 687, 700, 702, 706, 716, 718, 723, 734, 736, 741, 750, 752, 759, 802, 820, 832, 842, 852, 863, 873, 888, 894, 898], "0": [23, 34, 50, 69, 87, 91, 104, 123, 127, 140, 160, 177, 181, 195, 199, 212, 216, 230, 234, 248, 253, 266, 283, 303, 307, 368, 374, 377, 392, 393, 403, 406, 414, 426, 430, 436, 439, 445, 450, 451, 461, 464, 472, 482, 485, 496, 505, 508, 515, 523, 530, 533, 535, 539, 548, 551, 553, 557, 568, 569, 571, 575, 585, 587, 592, 598, 602, 604, 608, 615, 618, 620, 624, 631, 632, 633, 634, 636, 642, 649, 653, 659, 665, 668, 670, 676, 683, 684, 685, 687, 700, 702, 706, 709, 714, 716, 718, 723, 725, 731, 734, 736, 741, 749, 750, 752, 763, 778, 802, 820, 832, 842, 852, 863, 873, 878, 881, 884, 888, 892, 894], "z": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 368, 382, 383, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 575, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 797, 798, 799, 800, 802, 820, 832, 842, 852, 863, 873, 888, 889, 892, 897], "v3": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "pretti": [24, 25, 51, 52, 70, 71, 88, 89, 105, 106, 124, 125, 141, 142, 161, 162, 178, 179, 196, 197, 213, 214, 231, 232, 249, 250, 267, 268, 284, 285, 304, 305, 394, 395, 415, 416, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "compact": [24, 25, 51, 52, 70, 71, 88, 89, 105, 106, 124, 125, 141, 142, 161, 162, 178, 179, 196, 197, 213, 214, 231, 232, 249, 250, 267, 268, 284, 285, 304, 305, 394, 395, 415, 416, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "minim": [24, 25, 51, 52, 70, 71, 88, 89, 105, 106, 124, 125, 141, 142, 161, 162, 178, 179, 196, 197, 213, 214, 231, 232, 249, 250, 267, 268, 284, 285, 304, 305, 394, 395, 415, 416, 420, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "nativ": [24, 25, 51, 52, 70, 71, 88, 89, 105, 106, 124, 125, 141, 142, 161, 162, 178, 179, 196, 197, 213, 214, 231, 232, 249, 250, 267, 268, 284, 285, 304, 305, 394, 395, 415, 416, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "save": [24, 25, 51, 52, 68, 70, 71, 86, 88, 89, 103, 105, 106, 122, 124, 125, 139, 141, 142, 159, 161, 162, 176, 178, 179, 194, 196, 197, 211, 213, 214, 228, 231, 232, 246, 249, 250, 265, 267, 268, 282, 284, 285, 302, 304, 305, 394, 395, 415, 416, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875, 882, 891], "newlin": [24, 25, 51, 52, 70, 71, 88, 89, 105, 106, 124, 125, 141, 142, 161, 162, 178, 179, 196, 197, 213, 214, 231, 232, 249, 250, 267, 268, 284, 285, 304, 305, 394, 395, 415, 416, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "indent": [24, 25, 51, 52, 70, 71, 88, 89, 105, 106, 124, 125, 141, 142, 161, 162, 178, 179, 196, 197, 213, 214, 231, 232, 249, 250, 267, 268, 284, 285, 304, 305, 394, 395, 415, 416, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "without": [24, 25, 51, 52, 70, 71, 88, 89, 91, 105, 106, 124, 125, 127, 141, 142, 161, 162, 178, 179, 196, 197, 199, 213, 214, 231, 232, 249, 250, 253, 267, 268, 284, 285, 304, 305, 394, 395, 415, 416, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875, 885, 888], "ani": [24, 25, 26, 51, 52, 53, 70, 71, 73, 88, 89, 90, 105, 106, 107, 124, 125, 126, 141, 142, 143, 161, 162, 163, 178, 179, 180, 196, 197, 198, 213, 214, 215, 231, 232, 233, 249, 250, 251, 267, 268, 269, 284, 285, 286, 304, 305, 306, 394, 395, 398, 415, 416, 419, 427, 428, 429, 452, 453, 456, 473, 474, 477, 497, 498, 501, 516, 517, 518, 536, 537, 538, 542, 554, 555, 556, 560, 572, 573, 574, 588, 589, 590, 605, 606, 607, 621, 622, 623, 637, 638, 639, 654, 655, 656, 662, 671, 672, 673, 688, 689, 690, 703, 704, 705, 710, 720, 721, 722, 727, 737, 738, 739, 744, 753, 754, 755, 803, 804, 811, 821, 822, 823, 833, 834, 836, 843, 844, 846, 853, 854, 856, 864, 865, 867, 874, 875, 877, 885, 894, 898], "whitespac": [24, 25, 51, 52, 70, 71, 88, 89, 105, 106, 124, 125, 141, 142, 161, 162, 178, 179, 196, 197, 213, 214, 231, 232, 249, 250, 267, 268, 284, 285, 304, 305, 394, 395, 415, 416, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "exclud": [24, 25, 28, 30, 31, 51, 52, 70, 71, 88, 89, 105, 106, 124, 125, 141, 142, 145, 161, 162, 178, 179, 196, 197, 213, 214, 231, 232, 249, 250, 267, 268, 284, 285, 304, 305, 394, 395, 415, 416, 427, 428, 452, 453, 473, 474, 497, 498, 516, 517, 536, 537, 554, 555, 572, 573, 588, 589, 605, 606, 621, 622, 637, 638, 654, 655, 671, 672, 688, 689, 703, 704, 720, 721, 737, 738, 753, 754, 803, 804, 821, 822, 833, 834, 843, 844, 853, 854, 864, 865, 874, 875], "valid": [26, 53, 73, 90, 107, 126, 143, 163, 180, 198, 215, 233, 251, 269, 286, 306, 398, 419, 429, 435, 456, 477, 501, 518, 538, 556, 574, 590, 607, 623, 639, 656, 673, 690, 705, 722, 739, 755, 811, 823, 836, 846, 856, 867, 877, 881, 882], "against": [26, 53, 73, 90, 107, 126, 143, 163, 180, 198, 215, 233, 251, 269, 286, 306, 398, 419, 429, 456, 477, 501, 518, 538, 556, 574, 590, 607, 623, 639, 656, 673, 690, 705, 722, 739, 755, 811, 823, 836, 846, 856, 867, 877], "raw": [26, 53, 73, 90, 107, 126, 143, 163, 180, 198, 215, 233, 251, 269, 286, 306, 398, 419, 429, 456, 477, 501, 518, 538, 556, 574, 590, 607, 623, 639, 656, 673, 690, 705, 722, 739, 755, 811, 823, 836, 846, 856, 867, 877, 888], "can": [26, 53, 73, 74, 90, 107, 126, 143, 163, 180, 181, 198, 215, 233, 251, 269, 286, 306, 314, 328, 340, 365, 398, 419, 420, 429, 456, 457, 477, 501, 502, 518, 538, 556, 568, 574, 583, 590, 607, 623, 639, 642, 649, 656, 673, 690, 705, 722, 739, 749, 755, 767, 811, 814, 823, 836, 846, 856, 858, 867, 877, 881, 882, 884, 886, 888, 894, 898], "__from_data__": [26, 53, 73, 90, 107, 126, 143, 163, 180, 198, 215, 233, 251, 269, 286, 306, 398, 419, 429, 456, 477, 501, 518, 538, 556, 574, 590, 607, 623, 639, 656, 673, 690, 705, 722, 739, 755, 811, 823, 836, 846, 856, 867, 877], "group": [27, 29, 478, 767, 768, 769, 770, 782, 785, 788, 887], "analyz": [27, 29, 30, 31, 32, 144], "pairwis": [28, 144, 145, 146, 252], "point": [28, 29, 37, 118, 144, 145, 146, 252, 368, 374, 377, 380, 383, 403, 406, 420, 430, 436, 461, 464, 482, 485, 506, 539, 557, 575, 583, 659, 741, 765, 797, 798, 883, 894, 897], "within": [28, 35, 144, 145, 146, 252, 324, 334, 858, 881, 888], "toler": [28, 32, 36, 144, 145, 146, 252, 765, 895], "One": [29, 55, 813, 858, 882], "result": [29, 35, 270, 380, 420, 508, 526, 542, 560, 578, 595, 611, 627, 645, 662, 679, 695, 710, 727, 744, 857, 881, 888, 889], "offer": 29, "access": 29, "set": [29, 31, 34, 145, 181, 229, 247, 307, 310, 323, 359, 361, 658, 789, 878, 881, 887, 888, 889, 894, 895], "uniqu": [29, 368, 430, 780], "locat": [29, 37, 368, 858, 888], "approxim": 29, "effect": 29, "first": [29, 35, 36, 91, 108, 147, 181, 216, 234, 253, 270, 308, 315, 380, 523, 531, 771, 789, 793, 881, 882, 892, 894, 898], "combin": [30, 216, 894], "find": [30, 32, 34, 144, 146, 252, 307, 507, 782, 878, 888, 894], "beamgroupanalyz": [30, 32, 144, 883], "prefer": 30, "from_model": 30, "prone": 30, "manual": 30, "instanti": [30, 37, 77, 127, 457], "pair": [30, 34, 35, 307, 878, 887], "handl": [30, 881, 882, 883], "previou": [30, 373], "subsequ": 30, "composit": 31, "analysi": [31, 32, 144, 145, 882, 883], "analyzers_cl": 32, "specifi": [32, 699, 780, 881, 882, 889], "tool": [33, 181, 188, 539, 544, 557, 562, 568, 642, 649, 749, 883, 884, 886, 894, 896, 897], "detect": [33, 895], "intersect": [33, 34, 35, 36, 118, 308, 310, 314, 321, 323, 328, 340, 359, 361, 365, 526, 578, 595, 611, 627, 645, 679, 695, 699, 882], "rtree": [34, 878], "max_dist": [34, 35, 36, 308, 310, 314, 321, 323, 328, 340, 359, 361, 365, 366, 777, 778], "r": [34, 307], "tree": [34, 307, 767], "search": [34, 307, 893], "neighbor": [34, 307, 878], "distanc": [34, 35, 36, 308, 310, 314, 321, 323, 328, 340, 359, 361, 365, 445, 539, 557, 631, 659, 741, 778, 889, 895], "apart": 34, "non": [34, 54], "touch": 34, "still": 34, "consid": [34, 35, 36, 308, 310, 314, 321, 323, 328, 340, 359, 361, 365, 373, 386, 388, 446, 778, 882, 894], "neightbor": [34, 878], "beam_a": [35, 108, 298, 770], "beam_b": [35, 108, 298], "sensit": 35, "consist": [35, 881, 882], "second": [35, 36, 91, 108, 147, 181, 216, 234, 253, 270, 308, 315, 380, 523, 531, 771, 789, 793, 882, 892], "otherwis": [35, 56, 310, 323, 336, 361, 435, 575, 885, 888], "thei": [35, 229, 247, 361, 420, 530, 882, 894, 898], "were": [35, 37, 502, 887], "input": [35, 307, 420, 758, 759, 763, 881, 886, 887, 888, 889, 891, 892, 894, 895], "maximum": [35, 36, 308, 310, 314, 321, 323, 328, 340, 359, 361, 365, 778], "unit": [35, 36, 307, 381, 478, 505, 881, 882], "beamsolverresult": 35, "wall_a": 36, "wall_b": 36, "tol": [36, 310, 323, 361, 366, 765, 881], "1e": [36, 310, 314, 323, 328, 340, 361, 365, 366], "06": [36, 366], "wall": [36, 341, 457, 765, 770, 778, 883, 889], "todo": [36, 329, 381, 399, 420, 430, 478, 504, 505, 583, 770, 785, 788, 801, 894], "through": [36, 37, 91, 127, 199, 253, 270, 381, 420, 575, 583, 649, 879, 894], "rework": 36, "potenti": 36, "mathemat": 36, "desigen": 36, "f": [36, 881], "tupl": [36, 37, 310, 315, 323, 361, 368, 381, 387, 430, 771], "jointtopologi": [36, 37, 308, 323, 359, 765, 882, 883], "interact": [37, 765, 771, 782, 786, 789, 795, 882, 898], "directli": [37, 127, 321, 388, 446, 457, 767, 768, 882, 889, 894], "liter": [37, 591, 641, 675, 740, 757], "one": [37, 54, 78, 91, 127, 147, 181, 199, 216, 234, 253, 270, 315, 372, 402, 433, 460, 481, 507, 699, 771, 774, 857, 858, 881, 888, 894, 896], "estim": 37, "name": [37, 329, 508, 519, 758, 761, 762, 763, 764, 769, 770, 785, 788, 881, 882, 887, 896], "correspond": [37, 181, 234, 368, 380, 508, 521, 881, 882, 887, 888, 894, 897], "map": [37, 886, 897], "start": [37, 181, 234, 368, 370, 373, 380, 381, 383, 386, 388, 446, 523, 539, 548, 557, 568, 575, 592, 608, 624, 642, 649, 658, 659, 665, 675, 676, 706, 723, 741, 749, 886, 888, 894], "depend": [37, 380, 382, 383, 884, 894], "btlxprocess": [37, 523, 534, 539, 548, 552, 557, 570, 575, 586, 592, 603, 608, 619, 624, 635, 642, 652, 659, 665, 669, 676, 686, 692, 701, 706, 717, 723, 735, 741, 751, 881, 882, 883], "must": [43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 341, 523, 539, 557, 592, 608, 624, 632, 633, 649, 659, 683, 684, 699, 706, 723, 741, 793, 881, 889, 892], "min_element_count": [43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293], "max_element_count": [43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293], "enumer": 54, "possibl": [54, 329, 887], "topo_unknown": [54, 55], "topo_i": [54, 55, 882], "parallel": [54, 387, 624, 631, 699, 858, 888, 894], "topo_l": [54, 55, 882], "topo_t": [54, 55, 882], "middl": [54, 368, 894], "topo_x": [54, 55, 882], "three": [54, 287, 894, 898], "more": [54, 216, 372, 402, 420, 433, 460, 481, 502, 882, 883, 886, 888, 894], "where": [54, 888, 891, 894, 897], "meet": [54, 882, 894], "topo_k": [54, 55], "least": [54, 881], "topo_edge_edg": [54, 55], "plate": [54, 341, 420, 457, 679, 683, 684, 691, 765, 883, 889, 895], "edg": [54, 341, 368, 430, 445, 539, 548, 557, 568, 591, 659, 665, 699, 741, 749, 771, 889, 894], "both": [54, 59, 94, 111, 150, 167, 184, 202, 219, 234, 237, 256, 273, 290, 771, 774, 881, 882, 892, 894], "align": [54, 74, 307, 368, 374, 403, 430, 436, 461, 482, 775, 886, 897], "topo_edge_fac": [54, 55], "valu": [55, 91, 127, 199, 247, 253, 307, 368, 430, 506, 533, 548, 551, 569, 585, 602, 618, 634, 665, 668, 685, 700, 716, 723, 734, 750, 813, 881, 887], "For": [55, 291, 307, 793, 813, 881, 882, 883, 897], "log": [55, 813], "int": [55, 144, 181, 216, 234, 368, 370, 373, 386, 387, 388, 389, 393, 430, 446, 451, 505, 508, 523, 530, 548, 557, 568, 592, 598, 608, 615, 624, 631, 632, 633, 649, 665, 683, 684, 706, 714, 723, 731, 741, 749, 759, 763, 764, 771, 813, 858], "buttjoint": [56, 164, 882], "l": [56, 74, 91, 108, 127, 234, 359, 367, 882, 896], "butt": [56, 164, 287, 291, 367, 882, 889], "main_beam": [56, 74, 91, 127, 147, 164, 181, 199, 216, 234, 253, 270, 287, 631, 882], "cross_beam": [56, 74, 91, 127, 147, 164, 181, 199, 216, 234, 253, 270, 287, 882], "mill_depth": [56, 147, 164, 287, 894], "depth": [56, 147, 164, 181, 216, 229, 234, 287, 539, 548, 557, 568, 575, 608, 624, 631, 642, 649, 659, 665, 676, 699, 706, 723, 741, 749, 894], "pocket": [56, 147, 164, 287, 539, 631, 641, 883, 894], "mill": [56, 147, 164, 287, 542, 560, 662, 710, 727, 744, 881, 894], "ignor": 56, "butt_plan": [56, 164], "small_beam_butt": [56, 72, 894], "smaller": [56, 72, 368, 888], "section": [56, 72, 368, 382, 383, 880, 886, 888, 889, 893, 894], "modify_cross": [56, 894], "extend": [56, 370, 381, 793, 882, 894], "opposit": [56, 388, 446, 591, 894], "cut": [56, 91, 127, 164, 181, 188, 199, 216, 253, 287, 508, 523, 526, 530, 531, 532, 539, 542, 544, 545, 546, 547, 548, 557, 560, 562, 563, 564, 565, 568, 578, 591, 592, 595, 597, 598, 601, 608, 611, 615, 616, 617, 624, 627, 631, 632, 633, 640, 641, 642, 645, 649, 650, 651, 657, 658, 659, 662, 664, 665, 674, 675, 676, 679, 683, 684, 691, 695, 699, 706, 710, 714, 715, 719, 723, 727, 731, 732, 733, 740, 741, 744, 746, 749, 756, 757, 881, 882, 886, 888, 894, 895], "plane": [56, 108, 118, 164, 381, 526, 530, 531, 532, 542, 548, 568, 578, 595, 598, 611, 615, 616, 617, 627, 631, 645, 649, 650, 651, 662, 665, 679, 695, 699, 710, 714, 715, 727, 731, 733, 746, 749, 881, 882, 888, 892, 894, 897], "closest": [56, 164, 889], "side": [56, 74, 91, 127, 164, 199, 253, 368, 373, 386, 387, 388, 393, 430, 446, 451, 507, 508, 523, 530, 539, 548, 557, 568, 575, 583, 592, 598, 608, 615, 624, 631, 632, 633, 642, 649, 659, 665, 676, 683, 684, 699, 706, 714, 723, 731, 741, 749, 881, 882, 889, 892, 894], "back_plan": 56, "back": [56, 373, 658, 881], "reject_i": [56, 894], "reject": 56, "necessari": [58, 76, 77, 93, 110, 149, 166, 183, 201, 218, 236, 289, 882, 884], "automat": [58, 59, 76, 93, 94, 110, 111, 149, 150, 166, 167, 181, 183, 184, 201, 202, 218, 219, 234, 236, 237, 256, 273, 289, 290, 539, 548, 557, 568, 659, 665, 741, 749, 757, 881, 894, 897], "could": [58, 76, 93, 110, 149, 166, 183, 201, 218, 236, 289, 503, 504, 548, 568, 665, 714, 731, 749, 812, 881], "after": [68, 77, 86, 103, 122, 139, 159, 176, 194, 211, 228, 246, 265, 282, 302, 386, 526, 542, 560, 578, 595, 611, 627, 645, 662, 679, 695, 710, 727, 744, 882, 893], "flip": [72, 74, 91, 127, 199, 253, 583, 894], "priorit": 72, "lapjoint": [74, 78, 91, 199, 253, 883], "frenchridgelap": [74, 881, 883], "lap": [74, 91, 127, 199, 253, 367, 592, 601, 881, 883], "ridg": [74, 592, 601], "dimens": [74, 78, 291, 368, 387, 505, 837, 882, 888], "flip_lap_sid": [74, 91, 127, 199, 253, 894], "drillhole_diam": [74, 592, 598, 894], "drill": [74, 592, 616, 881, 883], "hole": [74, 420, 592, 886, 892, 894], "made": [74, 181, 216, 234, 523, 539, 557, 583, 584, 592, 608, 624, 642, 659, 676, 706, 723, 741, 894], "process_joineri": 77, "process": [77, 181, 234, 314, 328, 329, 340, 365, 368, 430, 505, 508, 514, 526, 531, 533, 534, 542, 551, 552, 560, 569, 570, 575, 578, 583, 584, 585, 586, 595, 602, 603, 611, 616, 618, 619, 627, 634, 635, 645, 650, 652, 662, 668, 669, 679, 685, 686, 695, 700, 701, 710, 716, 717, 727, 734, 735, 744, 750, 751, 793, 882, 883, 886, 898], "It": [77, 310, 361, 399, 478, 723, 883, 884, 886, 887, 888, 894, 895, 897], "execut": [77, 812, 858], "via": [77, 882, 883], "add_extens": [77, 882], "compar": 78, "addition": [78, 881], "match": [78, 361, 507, 881, 882, 894], "cut_plane_bia": [91, 127, 199, 253, 894], "shift": [91, 127, 199, 253, 894], "deeper": [91, 127, 199, 253], "complet": [91, 127, 199, 253, 478, 882, 893], "either": [91, 127, 199, 253, 380, 523, 539, 557, 592, 608, 624, 659, 706, 723, 741, 758, 889], "5": [91, 127, 199, 253, 368, 393, 451, 508, 539, 557], "miter": [108, 118, 287, 367], "bisector": [108, 894], "angl": [108, 181, 188, 523, 539, 544, 548, 557, 562, 568, 575, 592, 608, 624, 642, 649, 659, 665, 676, 741, 749, 797, 798, 882, 892, 894], "centerlin": [108, 118, 147, 181, 216, 234, 270, 323, 341, 368, 380, 382, 383, 886, 887, 888, 897], "cutoff": [108, 894], "perpendicular": [108, 118, 387, 420, 649, 888], "abstract": [127, 399, 457], "common": [127, 882], "t": [127, 147, 164, 181, 199, 216, 234, 359, 367, 882, 896], "x": [127, 253, 270, 359, 367, 368, 373, 386, 388, 446, 523, 539, 557, 575, 592, 608, 624, 642, 649, 659, 676, 706, 723, 741, 799, 800, 882, 888, 896, 897], "do": [127, 542, 560, 662, 710, 727, 744, 885], "sub": 127, "n": [144, 145, 884], "desir": [144, 882, 897], "size": [144, 533, 551, 569, 585, 602, 618, 634, 668, 685, 700, 716, 734, 750, 888, 897], "found": 145, "4": [146, 181, 234, 368, 894], "birdsmouth": 147, "along": [147, 164, 181, 199, 216, 234, 253, 270, 368, 373, 386, 387, 388, 446, 539, 548, 568, 659, 665, 749, 882, 894], "tbirdsmouth": 147, "length": [164, 181, 199, 234, 253, 270, 341, 368, 382, 430, 505, 539, 548, 557, 568, 624, 631, 642, 649, 659, 665, 676, 699, 741, 749, 882, 894], "anoth": [164, 199, 882], "dovetail": [181, 188, 539, 544, 545, 546, 548, 557, 562, 563, 564, 568, 749], "notch": [181, 216, 270, 723, 894], "fit": [181, 216, 234, 885, 894], "start_i": [181, 234, 523, 539, 557, 568, 575, 608, 624, 642, 659, 676, 723, 731, 741, 749, 894], "posit": [181, 234, 368, 378, 407, 440, 465, 486, 505, 591, 592, 642, 649, 892, 894], "y": [181, 234, 287, 291, 368, 387, 523, 539, 548, 557, 568, 575, 608, 624, 642, 659, 665, 676, 723, 741, 749, 799, 800, 888, 894, 897], "axi": [181, 234, 307, 368, 373, 374, 382, 383, 386, 387, 388, 403, 430, 436, 446, 461, 482, 539, 548, 557, 575, 624, 649, 659, 665, 741, 775, 797, 798, 888, 892, 894, 897], "start_depth": [181, 234, 539, 548, 557, 568, 608, 659, 665, 676, 741, 749, 894], "surfac": [181, 234, 341, 393, 451, 507, 548, 568, 714, 731, 892], "rotat": [181, 234, 557, 568, 575, 741, 749, 799, 800, 809, 810, 888, 894], "around": [181, 234, 430, 445, 575, 888, 894], "width": [181, 234, 341, 368, 382, 383, 430, 505, 539, 548, 557, 568, 624, 659, 665, 676, 706, 709, 723, 725, 741, 749, 882, 887, 888, 889, 894], "cone_angl": [181, 539, 548, 557, 568, 894], "determin": [181, 315, 341, 445, 882, 894], "taper": [181, 216, 740, 894], "dovetail_shap": [181, 894], "shape": [181, 216, 234, 368, 420, 430, 438, 539, 548, 557, 568, 616, 650, 659, 665, 706, 723, 740, 741, 749, 757, 881, 894], "integ": [181, 234, 368, 430, 894], "index": [181, 234, 373, 386, 387, 388, 393, 446, 451, 507, 508, 530, 548, 568, 598, 615, 631, 632, 633, 649, 665, 683, 684, 714, 731, 749, 758, 764, 881, 882, 883, 894], "squar": [181, 234, 539, 557, 659, 741, 757, 894], "2": [181, 216, 234, 368, 533, 551, 569, 585, 602, 618, 634, 668, 685, 700, 716, 734, 750, 894, 898], "round": [181, 234, 539, 557, 659, 741, 757, 894], "3": [181, 234, 252, 368, 884, 894, 898], "radiu": [181, 234, 539, 548, 557, 568, 659, 665, 741, 749, 757, 894], "tool_angl": [181, 188, 544, 562, 894], "tool_diamet": [181, 188, 544, 562, 894], "tool_height": [181, 188, 544, 562, 894], "height": [181, 188, 216, 234, 341, 368, 382, 383, 430, 505, 544, 548, 557, 562, 568, 665, 706, 709, 723, 725, 741, 749, 882, 887, 888, 889, 894], "initi": [181, 391, 413, 449, 471, 494], "later": [181, 881, 887, 888], "flank_angl": [181, 539, 548, 557, 568], "flank": [181, 539, 548, 557, 568], "applic": [181, 234, 316, 881, 882, 894, 896], "shape_radiu": [181, 234, 539, 548, 557, 568, 659, 665, 741, 749, 894], "machin": [181, 234, 368, 430, 532, 545, 546, 547, 563, 564, 565, 597, 601, 617, 624, 632, 633, 640, 651, 657, 658, 664, 674, 676, 683, 684, 691, 715, 719, 732, 733, 746, 756, 881, 891], "cutter": [188, 544, 562], "step": [216, 229, 542, 560, 662, 706, 710, 723, 727, 740, 744, 814, 816, 857, 881, 883, 893], "step_shap": [216, 706, 723, 894], "heel": [216, 229, 706, 723, 740, 894], "doubl": [216, 287, 523, 530, 531, 533, 551, 569, 585, 602, 618, 634, 668, 685, 700, 706, 716, 723, 734, 740, 750, 894], "step_depth": [216, 229, 706, 714, 723, 731, 894], "heel_depth": [216, 229, 706, 714, 723, 731, 894], "tapered_heel": [216, 714, 723, 731, 740, 894], "tenon_mortise_height": [216, 894], "tenon": [216, 234, 557, 563, 564, 568, 665, 706, 709, 719, 757, 883], "mortis": [216, 234, 539, 545, 546, 548, 723, 725, 732, 883], "featru": [216, 894], "tenonmortis": 234, "main_beam_guid": [234, 882], "cross_beam_guid": [234, 882], "somewher": [253, 270, 882], "typic": [270, 858, 881], "whose": 270, "offset": [270, 374, 377, 403, 406, 436, 461, 464, 482, 485, 548, 568, 665, 749, 889], "rest": 270, "top": [270, 430, 445, 539, 557, 641, 658, 659, 741, 749, 886, 894], "No": [270, 641], "coplanar": [291, 882], "inflate_bi": [307, 482, 485, 878], "bound": [307, 368, 374, 377, 403, 406, 430, 436, 439, 461, 464, 482, 485, 775, 776, 878], "box": [307, 368, 374, 377, 403, 406, 430, 436, 439, 461, 464, 482, 485, 505, 732, 775, 776, 858, 878, 886, 888], "aabb": [307, 368, 374, 403, 430, 436, 461, 482], "enlarg": 307, "amount": [307, 370, 381, 878], "identifi": [307, 780, 882], "regard": [307, 548, 665], "inflat": [307, 374, 377, 403, 406, 436, 439, 461, 464, 482, 485, 878], "pluggabl": 307, "plugin": [307, 883], "avail": 307, "jointrul": [308, 314, 321, 328, 359, 365, 883, 895], "categori": [308, 310, 315, 887, 888, 898], "attach": 308, "rule": [308, 310, 311, 312, 313, 314, 321, 323, 325, 326, 327, 328, 336, 337, 338, 339, 340, 341, 359, 361, 362, 363, 364, 365, 373, 386, 388, 446, 883, 886, 888, 889, 895, 898], "assign": [308, 359, 765, 767, 774, 882, 894, 897], "joint_typ": [308, 321, 359], "category_a": 308, "category_b": [308, 315], "topo": [308, 882], "support": [308, 310, 430, 858, 879], "model_max_dist": [310, 323, 361], "09": [310, 314, 323, 328, 340, 361, 365], "exceed": [310, 361, 597, 598], "timberel": [310, 314, 315, 321, 323, 328, 336, 340, 361, 365, 368, 399, 430, 503, 632, 683, 684, 770, 883], "absolut": [310, 323, 361, 881, 882], "alreadi": [310, 323, 361, 767, 770, 881], "static": [311, 312, 313, 314, 325, 326, 327, 328, 337, 338, 339, 340, 362, 363, 364, 365], "use_default": [313, 327, 339, 364], "handled_pair": [314, 328, 340, 365], "definit": [314, 328, 340, 365, 881, 895], "jointdefinit": [314, 328, 340, 365, 883], "sort": 315, "accord": [315, 368, 430, 887], "catergory_a": 315, "debug": [316, 502, 882, 889, 895, 896], "inform": [316, 502, 883, 889, 895, 896, 897], "visual": [316, 502, 814, 858, 881], "inspect": [316, 896], "relat": [316, 478, 568, 749], "feature_error": 316, "occur": [316, 502, 793, 896], "joint_error": 316, "complianc": 323, "link": 329, "delai": [329, 331], "actual": [329, 331, 380], "downstream": [329, 331], "compon": [329, 331, 758, 759, 761, 762, 763, 764, 884, 887, 888, 889, 891, 892, 893, 895, 898], "need": [329, 420, 881, 882, 887, 898], "There": [329, 887, 894, 898], "wai": [329, 824], "altern": [329, 882], "transform": [329, 378, 407, 440, 465, 486, 797, 798, 799, 800, 806, 808, 809, 810], "shall": [331, 770, 885], "assembli": [341, 883, 889, 896], "geometri": [341, 368, 375, 376, 377, 378, 396, 397, 399, 403, 404, 405, 406, 407, 417, 418, 420, 430, 437, 438, 439, 440, 442, 445, 454, 455, 461, 462, 463, 464, 465, 475, 476, 482, 483, 484, 485, 486, 499, 500, 502, 504, 505, 526, 531, 542, 545, 546, 547, 560, 564, 565, 578, 580, 583, 584, 595, 597, 601, 611, 616, 617, 627, 640, 645, 650, 651, 662, 664, 674, 679, 691, 695, 710, 715, 719, 727, 731, 732, 733, 744, 746, 756, 775, 776, 797, 798, 800, 805, 809, 810, 858, 878, 882, 883, 886, 888, 889, 895, 896, 897, 898], "planar": [341, 393, 451, 489, 886, 889, 894], "beam_width": [341, 889], "aka": 341, "thick": [341, 420, 430, 442, 445, 488, 489, 699, 889], "caviti": 341, "normal": [341, 368, 387, 488, 507, 568, 649, 749], "frame_depth": [341, 889], "stud_spac": [341, 889], "space": [341, 523, 539, 557, 568, 592, 608, 624, 642, 649, 659, 676, 706, 723, 741, 749, 881, 889], "stud": [341, 368, 888, 889, 894], "z_axi": 341, "vector": [341, 382, 383, 420, 442, 445, 583, 797, 798, 809, 810, 883, 888, 889], "orient": [341, 377, 382, 383, 406, 439, 464, 485, 488, 523, 557, 592, 608, 624, 640, 675, 691, 699, 706, 723, 741, 776, 897], "post": 341, "insid": [341, 801], "frame": [341, 368, 373, 381, 386, 388, 399, 420, 430, 446, 505, 507, 530, 545, 547, 548, 560, 563, 565, 568, 597, 615, 616, 649, 650, 664, 665, 714, 731, 744, 746, 749, 770, 858, 883, 886, 888, 889, 898], "zaxi": 341, "categoryrul": [341, 883], "line": [341, 368, 382, 430, 435, 583, 584, 882, 883, 887, 888, 889, 892, 893], "panel_length": 341, "panel_height": 341, "jack_stud": [341, 889, 894], "surfaceassembli": 341, "beamdefinit": 341, "jack": [341, 608, 616, 889], "king_stud": [341, 889, 894], "king": [341, 889], "edge_stud": [341, 889, 894], "sill": [341, 889, 894], "header": [341, 889, 894], "element_on": 345, "element_two": 345, "beam_def": 352, "element_lists_to_intersect": 352, "polylin": [353, 420, 430, 435, 445, 488], "element_loop": 354, "k": 359, "topology_typ": 359, "constant": 359, "global": [359, 896], "revers": 361, "beama": 366, "beamb": 366, "x_default": 367, "t_default": 367, "l_default": 367, "slat": 368, "etc": [368, 430, 847, 881, 883, 888], "rectangular": [368, 888], "local": [368, 575, 881, 882, 888], "coordin": [368, 378, 407, 420, 430, 440, 465, 486, 505, 523, 539, 557, 568, 575, 592, 608, 624, 642, 649, 659, 676, 706, 723, 741, 749, 881, 882, 888], "system": [368, 430, 507, 575, 881, 882, 888], "major": [368, 888], "also": [368, 879, 883, 886, 887, 888, 894], "fibr": [368, 886], "direct": [368, 381, 382, 383, 445, 758, 799, 800, 878, 881, 882, 888, 889, 898], "solid": [368, 420, 895], "wood": 368, "larger": [368, 888, 894], "parametr": [368, 393, 451, 523, 539, 557, 568, 592, 608, 624, 642, 649, 659, 676, 706, 723, 741, 749, 883], "blank": [368, 370, 389, 430, 445, 505, 597, 793, 888], "materi": [368, 430, 767, 773, 774, 790, 888, 897], "stock": [368, 430, 888], "produc": [368, 430], "ref_fram": [368, 430], "btlx": [368, 430, 505, 507, 508, 519, 520, 522, 880, 882, 883], "standard": [368, 430, 882, 889], "ref_sid": [368, 430, 548, 568, 649, 665, 714, 731, 749], "6": [368, 430, 507, 632, 633, 683, 684], "ref_edg": 368, "long": [368, 381], "equal": [368, 699, 882], "centerline_start": 368, "centerline_end": 368, "xmin": [368, 430], "ymin": [368, 430], "zmin": [368, 430], "xmax": [368, 430], "ymax": [368, 430], "zmax": [368, 430], "long_edg": 368, "midpoint": 368, "onc": [368, 430, 888], "wide": [368, 430], "joint_kei": [370, 389], "remov": [370, 389, 390, 391, 412, 413, 448, 449, 470, 471, 493, 494, 794, 795, 796, 887, 892, 894], "well": [370, 770, 881], "lement": [371, 401, 432, 459, 480], "ref_side_index": [373, 386, 387, 388, 446, 508, 530, 548, 568, 598, 615, 631, 632, 633, 649, 665, 683, 684, 714, 731, 749, 881, 882], "right": [373, 386, 388, 446, 642, 649, 885, 894], "hand": [373, 386, 388, 446], "thumb": [373, 386, 388, 446], "rs5": [373, 386, 388, 446], "rs6": [373, 386, 388, 446, 508, 881], "rel": [373, 386, 388, 446, 642, 649], "collis": [375, 404, 437, 462, 483], "include_featur": [376, 438, 463, 484], "includ": [376, 438, 463, 484, 519, 881, 882, 885], "brep": [376, 430, 438, 442, 463, 484, 489, 526, 542, 546, 560, 564, 578, 595, 601, 611, 627, 632, 633, 645, 657, 662, 674, 679, 683, 684, 695, 710, 719, 727, 744, 756, 883, 897], "obb": [377, 406, 439, 464, 485], "world": [378, 407, 420, 440, 465, 486, 888, 889], "spatial": [378, 407, 440, 465, 486, 882], "hierarchi": [378, 407, 440, 465, 486, 765, 767, 898], "endpoint": [380, 383], "closer": 380, "interest": 380, "pln": 381, "metric": 381, "minimum": [381, 649, 881, 882], "z_vector": [382, 383], "indic": [382, 383, 502, 592, 887, 888], "worldz": [382, 383], "worldx": [382, 383], "point_start": 383, "point_end": 383, "end_point": 383, "next": 386, "front": [386, 658], "measur": 387, "across": [388, 446, 882], "state": [391, 413, 449, 471, 494], "debug_info": [391, 413, 449, 471, 494, 502, 882], "side_index": [393, 451], "request": [393, 451], "copi": [397, 418, 455, 476, 500, 798, 800, 807, 808, 810, 885], "compas_model": [397, 418, 455, 476, 500, 770, 782, 785, 788, 857], "screw": [399, 847], "dowel": [399, 894], "bracket": 399, "we": [399, 420, 884], "rethink": 399, "entir": [399, 649], "clear": [399, 759, 763, 882], "appropri": [399, 881], "put": [420, 505], "some": [420, 881, 882, 886, 897], "thought": 420, "what": [420, 881], "v": [420, 882], "perhap": [420, 504], "clearli": 420, "prehap": 420, "would": 420, "sens": 420, "move": 420, "stuff": 420, "over": 420, "here": [420, 793, 882, 884, 889, 890, 897], "ballnodejoint": [420, 883], "while": [420, 502, 533, 551, 569, 585, 602, 618, 634, 668, 685, 700, 716, 734, 750, 881, 882, 884, 894, 896], "attempt": [420, 896], "tightli": 420, "coupl": 420, "differec": 420, "outlin": [420, 430, 435, 445], "seem": 420, "just": 420, "outline_point": 420, "structur": [420, 806, 807, 808, 879, 882, 883, 886, 889, 895, 898], "assum": 420, "goe": [420, 642, 649], "extra": 420, "geometr": [420, 881, 883, 892, 895], "These": [420, 442, 881, 882, 887, 894], "boolean": [420, 886, 889, 892, 895], "btlxfromgeometrydefinit": 420, "plywood": 430, "clt": 430, "bottom": [430, 445, 539, 557, 568, 658, 659, 741, 749, 894], "outline_a": [430, 435], "nurbscurv": 430, "princip": [430, 435, 598], "outline_b": [430, 435], "blank_extens": [430, 445], "blank_length": 430, "area": 430, "extrud": 442, "slab": [442, 478], "open": [445, 488, 879, 883, 893], "is_beam": 457, "is_plat": 457, "is_wal": 457, "is_group_el": 457, "singl": [478, 489, 858], "serv": [478, 897], "form": [478, 882], "often": 478, "prefabr": 478, "envelop": 478, "bodi": 478, "docstr": [478, 881], "_": [484, 887], "sure": 488, "correctli": [488, 640, 691, 881, 882, 887], "except": [502, 503, 504, 771, 793, 881, 882], "try": [502, 881, 882], "suppos": 502, "debug_geometri": 502, "about": [502, 883], "cannot": [503, 504, 882, 888, 894], "messag": [503, 504, 881, 882], "renam": [504, 763, 764], "processingvisualizationerror": 504, "someth": 504, "feature_geometri": [504, 881], "element_geometri": [504, 881], "modifi": [504, 805, 881, 882, 884, 885], "act": 505, "wrapper": 505, "realli": 505, "parent": [505, 767, 768, 769, 770], "order_num": 505, "scale_factor": 505, "scale": [505, 797, 798, 809, 810, 881, 897], "factor": [505, 514, 533, 534, 551, 552, 569, 570, 585, 586, 602, 603, 618, 619, 634, 635, 652, 668, 669, 685, 686, 700, 701, 716, 717, 734, 735, 750, 751, 799, 800, 881], "anyth": 505, "mm": [505, 575, 881], "attr": [505, 769], "corner": [505, 894], "et": 506, "element_fac": 507, "essenti": [507, 882], "translat": [507, 797, 798, 799, 800], "zero": [508, 889], "rs1": [508, 530, 548, 568, 598, 615, 631, 665, 714, 731, 749, 881], "prioriti": [508, 858, 894], "process_id": 508, "id": [508, 858], "processing_nam": [508, 881], "is_joineri": 508, "joineri": [508, 793], "subprocess": [510, 525, 541, 559, 577, 594, 610, 626, 644, 661, 678, 694, 708, 726, 743], "nest": [510, 525, 541, 559, 577, 594, 610, 626, 644, 661, 678, 694, 708, 726, 743], "write": [519, 520, 826, 887, 888], "company_nam": 519, "compani": 519, "gramazio": [519, 879, 883, 885], "kohler": [519, 879, 883, 885], "research": [519, 879, 883, 885], "file_nam": 519, "comment": 519, "xml": [520, 521, 522, 881, 891], "type_": 521, "regist": [521, 882], "callabl": [521, 785], "file_path": 522, "model_to_xml": 522, "orientationtyp": [523, 557, 592, 608, 624, 706, 723, 741, 883], "start_x": [523, 539, 557, 575, 592, 608, 624, 642, 649, 659, 676, 706, 723, 741], "100000": [523, 539, 557, 592, 608, 624, 642, 659, 676, 706, 723, 741], "50000": [523, 608, 624, 642, 676, 706, 723], "angle_1": 523, "horizont": [523, 592, 608, 624, 676, 699], "179": [523, 539, 557, 592, 608, 624, 642, 659, 676, 706, 723, 741, 892], "9": [523, 539, 557, 592, 608, 624, 642, 659, 676, 706, 723, 741, 892], "inclination_1": 523, "vertic": [523, 608, 624, 642, 676, 699, 888, 894], "angle_2": 523, "inclination_2": 523, "plane_a": [531, 882, 892], "plane_b": [531, 892], "mean": [533, 551, 569, 585, 602, 618, 634, 668, 685, 700, 716, 734, 750, 881], "5000": [539, 557, 659, 741, 770], "margin": [539, 557, 659, 741], "180": [539, 659], "slope": [539, 624, 659, 676], "reder": [539, 557, 659, 741], "inclin": [539, 557, 575, 608, 624, 642, 659, 676, 706, 723, 741], "limitation_top": 539, "limit": [539, 557, 575, 624, 632, 633, 641, 642, 658, 659, 676, 683, 684, 723, 741, 749, 885], "unlimit": [539, 641], "length_limited_bottom": [539, 557, 659, 741, 749], "whether": [539, 557, 642, 659, 723, 741, 749, 858, 882, 885], "1000": [539, 557, 659, 706, 709, 723, 725, 741], "cone": [539, 548, 557, 568], "30": [539, 557], "use_flank_angl": [539, 557], "35": [539, 557], "volum": [542, 546, 560, 564, 601, 632, 633, 640, 657, 662, 674, 683, 684, 691, 710, 719, 727, 732, 744, 756, 765, 881, 882], "itersect": [542, 560, 662, 710, 727, 744], "fail": [542, 560, 662, 710, 727, 744, 881], "80": [548, 568, 665, 749], "40": [548, 568, 665, 749], "28": [548, 568, 665, 749], "10": [548, 568, 879, 884], "15": [548, 568], "20": [548, 568, 575, 665, 714, 731, 749], "case": [548, 665, 889, 895], "hous": [548, 665], "equival": [548, 665, 881], "dovetailtenon": [548, 749, 883], "length_limited_top": [557, 659, 741, 749], "50": [568, 575, 749], "define_dovetail_tool": [568, 749], "degre": [575, 642, 649], "depth_limit": [575, 642], "go": 575, "cylind": [580, 858], "chang": [583, 894], "too": 583, "fragil": 583, "caus": 583, "issu": [583, 893], "alt": 583, "straight": [583, 882, 888], "enum": [591, 641, 675, 740, 757, 812], "refedg": [591, 592], "oppedg": [591, 592], "french": [592, 601], "ref_posit": 592, "edgepositiontyp": [592, 883], "drillhol": [592, 598], "flag": 592, "other_beam": 598, "furthest": [598, 889], "rafter": [608, 616, 888], "89": 624, "lead_angle_parallel": 624, "lead": 624, "lead_angl": 624, "lead_inclination_parallel": 624, "lead_inclin": 624, "machining_limit": [624, 632, 633, 676, 683, 684], "polyhedron": [632, 633, 640, 683, 684, 691], "subtract": [640, 691, 892, 895], "ensur": [640, 691, 881, 882], "like": [641, 883, 886, 895], "longitudin": [642, 650], "90": [642, 649], "start_limit": 642, "end_limit": 642, "certain": 642, "angle_start": [642, 649], "angle_end": [642, 649], "tool_posit": [642, 649], "alignmenttyp": [642, 649], "left": [642, 649], "center": [642, 649, 765, 879, 894], "so": [649, 881, 882, 885], "chamfer": [649, 741, 749], "chanfer": 649, "logitudin": 650, "neg": 657, "configur": [658, 765], "expected_kei": 658, "dictionari": [658, 881, 882], "face_limited_start": 658, "face_limited_end": 658, "face_limited_front": 658, "face_limited_back": 658, "face_limited_top": 658, "face_limited_bottom": 658, "awai": 675, "internal_angl": 676, "intern": [676, 881], "tilt_ref_sid": 676, "tilt": [676, 894], "tilt_end_sid": 676, "tilt_opp_sid": 676, "oppos": 676, "tilt_start_sid": 676, "full": 699, "accross": 699, "exactli": 699, "small": 699, "strut_inclin": [706, 723], "strut": [706, 723], "taperedheel": [706, 740], "presenc": [706, 723], "ye": [706, 723, 884], "tenon_width": [706, 709], "tenon_height": [706, 709], "stepjointnotch": [709, 883], "notch_limit": [723, 731], "notch_width": [723, 731], "strut_height": [723, 731], "stepshapetyp": [723, 883], "mortise_width": [723, 725], "mortise_height": [723, 725], "plana": 731, "io": 758, "ghenv": [758, 759, 763, 764], "environ": [758, 759, 763, 764, 883, 884, 888], "permanent_param_count": [759, 763], "delet": [759, 763], "param": [761, 762, 881], "input_nam": [763, 764], "rename_count": 763, "keep_connect": 763, "express": [765, 885], "center_of_mass": 765, "mass": 765, "detected_topo": 765, "beam_a_kei": 765, "beam_b_kei": 765, "total": 765, "groupnod": [767, 768, 769, 770], "under": [767, 768], "root": [767, 768], "elementnod": [767, 768], "upstream": [770, 785, 788], "mayb": 770, "wall1_group": 770, "200": 770, "3000": 770, "wall1": 770, "worldxi": 770, "100": 770, "300": 770, "add_el": 770, "has_group": 770, "b": [771, 789, 795], "graph": 771, "neither": 774, "retriev": [780, 882, 887], "yield": [781, 791, 792], "interaction_typ": 782, "group_nam": [785, 788], "filter_": 785, "queri": [785, 786, 788], "filter": [785, 887], "stop_on_first_error": 793, "feasibl": [793, 882], "instruct": [793, 812, 814, 837, 847, 858, 868, 881, 883, 893], "sequenc": [793, 857, 883], "reason": 793, "iter": 793, "encount": [793, 893], "radian": [797, 798], "connectionsolv": [801, 883], "human": [813, 858], "robot": [813, 858], "build": [814, 824, 825, 826, 857, 858, 884, 898], "collect": [814, 878, 895], "pars": 824, "implemet": 824, "your": [824, 879, 881, 882, 884], "own": [824, 894], "you": [824, 879, 881, 882, 884, 886, 889, 893, 894, 898], "want": [824, 881], "buildingplan": [825, 826, 857, 883], "building_plan": 826, "tranform": [835, 845, 855, 876], "3d": [837, 847, 883], "linear": [837, 888], "incorpor": 847, "simpl": [857, 883, 886], "per": 857, "assembl": 858, "actor": [858, 883], "element_id": 858, "cad": 858, "elements_held": 858, "held": 858, "is_built": 858, "is_plan": 858, "increment": 858, "text": [868, 891], "overlai": 868, "prior": 878, "project": [879, 883], "develop": [879, 883], "aleksandra": 879, "apolinarska": 879, "chen": 879, "kasir": 879, "gonzalo": 879, "casa": 879, "eth": [879, 883, 885], "zurich": [879, 883, 885], "swiss": 879, "nation": 879, "scienc": 879, "foundat": 879, "compet": 879, "digit": 879, "nccr": 879, "dfab": 879, "programm": 879, "As": 879, "mani": [879, 883, 884], "contributor": 879, "work": [879, 881, 882, 889], "acknowledg": 879, "misc": 879, "titl": 879, "librari": [879, 883, 886, 893], "author": [879, 885], "anna": 879, "http": [879, 881, 884], "github": [879, 884], "com": [879, 881, 884], "gramaziokohl": 879, "year": 879, "2022": 879, "2023": 879, "doi": 879, "5281": 879, "zenodo": 879, "7934267": 879, "url": 879, "welcom": 880, "comprehens": 880, "guidanc": 880, "contribut": [880, 883, 884], "framework": [880, 881, 883], "oper": [881, 882, 892, 895], "integr": [881, 882], "offici": [881, 893], "design2machin": 881, "btlx_2_3_0": 881, "pdf": 881, "studi": [881, 882], "understand": 881, "constraint": 881, "rang": [881, 894], "src": [881, 882], "__init__": [881, 882], "meaning": [881, 882], "__data__": [881, 882], "properti": [881, 882], "btlxprocessingparam": 881, "as_dict": 881, "ordereddict": 881, "btlxwriter": [881, 883], "newprocess": [881, 882], "hypotheticalprocess": 881, "def": [881, 882], "super": [881, 882], "arg_a": [881, 882], "arg_b": [881, 882], "newprocessingparam": 881, "arga": 881, "prec": 881, "_instanc": 881, "precis": 881, "argb": 881, "jackraftercut": [881, 883, 892], "doublecut": [881, 883, 892, 894], "At": [881, 883], "target": [881, 882], "extract": [881, 888, 896], "relationship": 881, "from_shapes_and_el": 881, "from_anygeometry_and_el": 881, "additional_arg_1": 881, "additional_arg_2": 881, "calculate_arg_a": 881, "calculate_arg_b": 881, "arg_c": 881, "arg_d": 881, "abov": [881, 885, 894], "convent": [881, 888], "descript": 881, "from_plane_and_beam": [881, 882], "from_volume_and_beam": [881, 882], "from_line_and_el": 881, "from_planes_and_beam": 881, "from_beam_beam_and_plan": 881, "invers": 881, "manag": [881, 884, 893], "geometry_from_params_and_el": 881, "feature_geometry_generated_from_param": 881, "modified_element_geometri": 881, "purpos": [881, 885], "plane_from_params_and_beam": 881, "volume_from_params_and_beam": 881, "cylinder_from_params_and_el": 881, "planes_from_params_and_beam": 881, "lap_volume_from_params_and_beam": 881, "py": [881, 882], "cover": [881, 882], "modif": [881, 882], "referencesid": 881, "bidirect": 881, "document": [881, 885, 887, 888, 893, 897], "particip": 882, "achiev": 882, "establish": 882, "how": [882, 886, 893, 894, 898], "involv": 882, "re": 882, "notat": 882, "relev": 882, "distinct": 882, "treat": 882, "differenti": 882, "accordingli": 882, "supported_topologi": 882, "restore_beams_from_kei": 882, "deseri": 882, "share": 882, "logic": 882, "lbuttjoint": [882, 883], "behavior": 882, "tnewjoint": 882, "default_value_a": 882, "default_value_b": 882, "hold": 882, "element_by_guid": 882, "persist": 882, "lmiterjoint": [882, 883], "xlapjoint": [882, 883], "tbirdsmouthjoint": [882, 883], "tstepjoint": [882, 883], "lfrenchridgelapjoint": [882, 883], "dimension": 882, "select": [882, 889, 894, 896], "deriv": 882, "entiti": [882, 883], "consult": [882, 893], "usag": 882, "main_ref_side_index": 882, "cross_ref_side_index": 882, "main_beam_feature_geometri": 882, "feature_geometry_for_main_beam": 882, "cross_beam_feature_geometri": 882, "feature_geometry_for_cross_beam": 882, "add_featur": 882, "accommod": 882, "check_elements_compat": 882, "assert": 882, "main_beam_cutting_plan": 882, "start_a": 882, "end_a": 882, "extension_to_plan": 882, "ex": 882, "add_blank_extens": 882, "main_featur": 882, "cross_featur": 882, "itself": 882, "are_compat": 882, "append": 882, "pattern": 882, "declar": 882, "duplic": 882, "leverag": 882, "maintain": [882, 883], "signatur": 882, "alwai": 882, "failur": 882, "aid": 882, "rebuild": 882, "packag": [883, 884, 893], "written": 883, "python": [883, 884, 886], "ecosystem": 883, "rhinocero": 883, "plug": 883, "activ": [883, 884, 888, 895, 897], "being": 883, "continu": 883, "stage": 883, "encompass": 883, "fast": 883, "intuit": 883, "custom": 883, "semant": 883, "futur": 883, "expand": 883, "entail": [883, 887], "softwar": [883, 885], "specialist": 883, "built": [883, 886], "upon": 883, "basic": 883, "complex": 883, "resolv": 883, "backend": 883, "run": 883, "rhinocommon": 883, "sdk": 883, "opencascad": 883, "occ": 883, "introduct": 883, "instal": [883, 886], "api": [883, 886], "llapjoint": 883, "tdovetailjoint": 883, "tlapjoint": 883, "tenonmortisejoint": 883, "xnotchjoint": 883, "ybuttjoint": 883, "nbeamkdtreeanalyz": 883, "tripletanalyz": 883, "quadanalyz": 883, "compositeanalyz": 883, "find_neighboring_el": 883, "btlxpart": 883, "dovetailmortis": 883, "longitudinalcut": 883, "slot": 883, "stepjoint": 883, "limitationtoptyp": 883, "machininglimit": 883, "tenonshapetyp": 883, "debuginfom": 883, "directrul": 883, "featuredefinit": 883, "surfacemodel": 883, "topologyrul": 883, "guess_joint_topology_2beam": 883, "set_default_joint": 883, "buildingplanpars": 883, "lineardimens": 883, "model3d": 883, "simplesequencegener": 883, "text3d": 883, "clear_gh_param": 883, "add_gh_param": 883, "manage_dynamic_param": 883, "list_input_valid": 883, "item_input_valid": 883, "get_leaf_subclass": 883, "rename_gh_input": 883, "workflow": [883, 886, 887, 888], "show": [883, 886], "util": [883, 886], "licens": 883, "cite": 883, "recommend": 884, "mamba": 884, "myenvnam": 884, "c": [884, 885], "conda": 884, "forg": 884, "7": 884, "m": 884, "compas_rhino": 884, "v7": 884, "wish": 884, "fork": 884, "repositori": 884, "clone": 884, "git": 884, "yourgithub_usernam": 884, "cd": 884, "edit": 884, "mode": 884, "pip": 884, "dev": 884, "compil": 884, "rhino7": [884, 893], "invok": 884, "ghuser": 884, "rhino8": [884, 893], "mit": 885, "copyright": 885, "2025": 885, "permiss": 885, "herebi": 885, "grant": 885, "free": 885, "charg": 885, "person": 885, "obtain": 885, "deal": 885, "restrict": 885, "merg": 885, "publish": 885, "distribut": 885, "sublicens": 885, "sell": 885, "permit": 885, "whom": 885, "furnish": 885, "subject": 885, "condit": 885, "notic": 885, "substanti": 885, "portion": 885, "THE": 885, "AS": 885, "warranti": 885, "OF": 885, "kind": [885, 894], "OR": 885, "impli": [885, 895], "BUT": 885, "NOT": 885, "TO": 885, "merchant": 885, "FOR": 885, "particular": 885, "AND": 885, "noninfring": 885, "IN": 885, "NO": 885, "event": 885, "holder": 885, "BE": 885, "liabl": 885, "claim": 885, "damag": 885, "liabil": 885, "action": 885, "contract": 885, "tort": 885, "aris": 885, "out": 885, "WITH": 885, "easi": 886, "autom": 886, "bake": 886, "textur": [886, 897], "render": [886, 897], "style": 886, "might": [886, 894], "componen": 886, "overal": 886, "idea": 886, "Then": 886, "explain": [886, 893], "concept": 886, "intend": [887, 888], "hybrid": 887, "encod": 887, "concaten": 887, "colon": 887, "entri": 887, "underscor": 887, "attr1nam": 887, "attr1value_attr2nam": 887, "attr2valu": 887, "four": [887, 894], "zvector": [887, 888], "setstandardattribut": 887, "getstandardattribut": 887, "user": [887, 889, 893], "criteria": 887, "setcustomattribut": 887, "getcustomattribut": 887, "checkstandardattribut": 887, "miss": 887, "deleteattribut": 887, "joist": 888, "linecurv": 888, "referenc": [888, 889], "latter": 888, "drawn": 888, "li": [888, 897], "sai": 888, "updaterefobj": 888, "centrelin": 888, "curv": 888, "help": [889, 893], "bit": 889, "vocabulari": 889, "stud_direct": 889, "creategeometri": [889, 895], "debuginfo": [889, 895], "sheeting_outsid": 889, "sheet": 889, "sheeting_insid": 889, "lintel_post": 889, "onto": 889, "edge_stud_offset": 889, "flush": [889, 894], "custom_dimens": 889, "joint_overrid": 889, "dynam": [889, 894], "demo": 890, "content": 891, "ly": 892, "01": [892, 894], "cylindr": 892, "command": 893, "packagemanag": 893, "press": 893, "enter": 893, "window": 893, "click": [893, 894], "restart": 893, "success": 893, "toolbar": 893, "look": 893, "tab": 893, "retart": 893, "seek": 893, "forum": 893, "lower": 894, "hereaft": 894, "lowest": 894, "highest": 894, "level": 894, "canva": 894, "now": 894, "drop": 894, "down": 894, "becaus": 894, "everi": 894, "halflap": 894, "overwrit": [894, 898], "variabl": 894, "highli": 894, "By": [894, 898], "shorten": 894, "clean": 894, "half": 894, "upper": 894, "overlap": 894, "99": 894, "unlik": 894, "present": 894, "centr": 894, "keep": 894, "secur": 894, "prevent": 894, "sequenti": 894, "inner": 894, "third": 894, "outer": 894, "remain": 894, "unchang": 894, "crate": 894, "doblecut": 894, "summaris": 894, "compos": 895, "computation": 895, "expens": 895, "disabl": 895, "maxdist": 895, "max": 895, "visualis": 895, "preview": 896, "recogn": 896, "bakewithboxmap": 897, "layer": 897, "random": 897, "deviat": 897, "mapsiz": 897, "adjust": 897, "imag": 897, "ratio": 897, "bitmap": 897, "care": 898, "final": 898}, "objects": {"compas_timber.connections": [[10, 0, 1, "", "BallNodeJoint"], [27, 0, 1, "", "BeamGroupAnalyzer"], [29, 0, 1, "", "Cluster"], [30, 0, 1, "", "CompositeAnalyzer"], [33, 0, 1, "", "ConnectionSolver"], [37, 0, 1, "", "Joint"], [54, 0, 1, "", "JointTopology"], [56, 0, 1, "", "LButtJoint"], [74, 0, 1, "", "LFrenchRidgeLapJoint"], [91, 0, 1, "", "LLapJoint"], [108, 0, 1, "", "LMiterJoint"], [127, 0, 1, "", "LapJoint"], [144, 0, 1, "", "NBeamKDTreeAnalyzer"], [146, 2, 1, "", "QuadAnalyzer"], [147, 0, 1, "", "TBirdsmouthJoint"], [164, 0, 1, "", "TButtJoint"], [181, 0, 1, "", "TDovetailJoint"], [199, 0, 1, "", "TLapJoint"], [216, 0, 1, "", "TStepJoint"], [234, 0, 1, "", "TenonMortiseJoint"], [252, 2, 1, "", "TripletAnalyzer"], [253, 0, 1, "", "XLapJoint"], [270, 0, 1, "", "XNotchJoint"], [287, 0, 1, "", "YButtJoint"], [307, 2, 1, "", "find_neighboring_elements"]], "compas_timber.connections.BallNodeJoint": [[11, 1, 1, "", "ToString"], [12, 1, 1, "", "add_extensions"], [13, 1, 1, "", "add_features"], [14, 1, 1, "", "check_elements_compatibility"], [15, 1, 1, "", "copy"], [16, 1, 1, "", "create"], [17, 1, 1, "", "element_count_complies"], [18, 1, 1, "", "from_json"], [19, 1, 1, "", "from_jsonstring"], [20, 1, 1, "", "promote_cluster"], [21, 1, 1, "", "promote_joint_candidate"], [22, 1, 1, "", "restore_beams_from_keys"], [23, 1, 1, "", "sha256"], [24, 1, 1, "", "to_json"], [25, 1, 1, "", "to_jsonstring"], [26, 1, 1, "", "validate_data"]], "compas_timber.connections.BeamGroupAnalyzer": [[28, 1, 1, "", "find"]], "compas_timber.connections.CompositeAnalyzer": [[31, 1, 1, "", "find"], [32, 1, 1, "", "from_model"]], "compas_timber.connections.ConnectionSolver": [[34, 1, 1, "", "find_intersecting_pairs"], [35, 1, 1, "", "find_topology"], [36, 1, 1, "", "find_wall_wall_topology"]], "compas_timber.connections.Joint": [[38, 1, 1, "", "ToString"], [39, 1, 1, "", "add_extensions"], [40, 1, 1, "", "add_features"], [41, 1, 1, "", "check_elements_compatibility"], [42, 1, 1, "", "copy"], [43, 1, 1, "", "create"], [44, 1, 1, "", "element_count_complies"], [45, 1, 1, "", "from_json"], [46, 1, 1, "", "from_jsonstring"], [47, 1, 1, "", "promote_cluster"], [48, 1, 1, "", "promote_joint_candidate"], [49, 1, 1, "", "restore_beams_from_keys"], [50, 1, 1, "", "sha256"], [51, 1, 1, "", "to_json"], [52, 1, 1, "", "to_jsonstring"], [53, 1, 1, "", "validate_data"]], "compas_timber.connections.JointTopology": [[55, 1, 1, "", "get_name"]], "compas_timber.connections.LButtJoint": [[57, 1, 1, "", "ToString"], [58, 1, 1, "", "add_extensions"], [59, 1, 1, "", "add_features"], [60, 1, 1, "", "check_elements_compatibility"], [61, 1, 1, "", "copy"], [62, 1, 1, "", "create"], [63, 1, 1, "", "element_count_complies"], [64, 1, 1, "", "from_json"], [65, 1, 1, "", "from_jsonstring"], [66, 1, 1, "", "promote_cluster"], [67, 1, 1, "", "promote_joint_candidate"], [68, 1, 1, "", "restore_beams_from_keys"], [69, 1, 1, "", "sha256"], [70, 1, 1, "", "to_json"], [71, 1, 1, "", "to_jsonstring"], [72, 1, 1, "", "update_beam_roles"], [73, 1, 1, "", "validate_data"]], "compas_timber.connections.LFrenchRidgeLapJoint": [[75, 1, 1, "", "ToString"], [76, 1, 1, "", "add_extensions"], [77, 1, 1, "", "add_features"], [78, 1, 1, "", "check_elements_compatibility"], [79, 1, 1, "", "copy"], [80, 1, 1, "", "create"], [81, 1, 1, "", "element_count_complies"], [82, 1, 1, "", "from_json"], [83, 1, 1, "", "from_jsonstring"], [84, 1, 1, "", "promote_cluster"], [85, 1, 1, "", "promote_joint_candidate"], [86, 1, 1, "", "restore_beams_from_keys"], [87, 1, 1, "", "sha256"], [88, 1, 1, "", "to_json"], [89, 1, 1, "", "to_jsonstring"], [90, 1, 1, "", "validate_data"]], "compas_timber.connections.LLapJoint": [[92, 1, 1, "", "ToString"], [93, 1, 1, "", "add_extensions"], [94, 1, 1, "", "add_features"], [95, 1, 1, "", "check_elements_compatibility"], [96, 1, 1, "", "copy"], [97, 1, 1, "", "create"], [98, 1, 1, "", "element_count_complies"], [99, 1, 1, "", "from_json"], [100, 1, 1, "", "from_jsonstring"], [101, 1, 1, "", "promote_cluster"], [102, 1, 1, "", "promote_joint_candidate"], [103, 1, 1, "", "restore_beams_from_keys"], [104, 1, 1, "", "sha256"], [105, 1, 1, "", "to_json"], [106, 1, 1, "", "to_jsonstring"], [107, 1, 1, "", "validate_data"]], "compas_timber.connections.LMiterJoint": [[109, 1, 1, "", "ToString"], [110, 1, 1, "", "add_extensions"], [111, 1, 1, "", "add_features"], [112, 1, 1, "", "check_elements_compatibility"], [113, 1, 1, "", "copy"], [114, 1, 1, "", "create"], [115, 1, 1, "", "element_count_complies"], [116, 1, 1, "", "from_json"], [117, 1, 1, "", "from_jsonstring"], [118, 1, 1, "", "get_cutoff_plane"], [119, 1, 1, "", "get_cutting_planes"], [120, 1, 1, "", "promote_cluster"], [121, 1, 1, "", "promote_joint_candidate"], [122, 1, 1, "", "restore_beams_from_keys"], [123, 1, 1, "", "sha256"], [124, 1, 1, "", "to_json"], [125, 1, 1, "", "to_jsonstring"], [126, 1, 1, "", "validate_data"]], "compas_timber.connections.LapJoint": [[128, 1, 1, "", "ToString"], [129, 1, 1, "", "add_extensions"], [130, 1, 1, "", "add_features"], [131, 1, 1, "", "check_elements_compatibility"], [132, 1, 1, "", "copy"], [133, 1, 1, "", "create"], [134, 1, 1, "", "element_count_complies"], [135, 1, 1, "", "from_json"], [136, 1, 1, "", "from_jsonstring"], [137, 1, 1, "", "promote_cluster"], [138, 1, 1, "", "promote_joint_candidate"], [139, 1, 1, "", "restore_beams_from_keys"], [140, 1, 1, "", "sha256"], [141, 1, 1, "", "to_json"], [142, 1, 1, "", "to_jsonstring"], [143, 1, 1, "", "validate_data"]], "compas_timber.connections.NBeamKDTreeAnalyzer": [[145, 1, 1, "", "find"]], "compas_timber.connections.TBirdsmouthJoint": [[148, 1, 1, "", "ToString"], [149, 1, 1, "", "add_extensions"], [150, 1, 1, "", "add_features"], [151, 1, 1, "", "check_elements_compatibility"], [152, 1, 1, "", "copy"], [153, 1, 1, "", "create"], [154, 1, 1, "", "element_count_complies"], [155, 1, 1, "", "from_json"], [156, 1, 1, "", "from_jsonstring"], [157, 1, 1, "", "promote_cluster"], [158, 1, 1, "", "promote_joint_candidate"], [159, 1, 1, "", "restore_beams_from_keys"], [160, 1, 1, "", "sha256"], [161, 1, 1, "", "to_json"], [162, 1, 1, "", "to_jsonstring"], [163, 1, 1, "", "validate_data"]], "compas_timber.connections.TButtJoint": [[165, 1, 1, "", "ToString"], [166, 1, 1, "", "add_extensions"], [167, 1, 1, "", "add_features"], [168, 1, 1, "", "check_elements_compatibility"], [169, 1, 1, "", "copy"], [170, 1, 1, "", "create"], [171, 1, 1, "", "element_count_complies"], [172, 1, 1, "", "from_json"], [173, 1, 1, "", "from_jsonstring"], [174, 1, 1, "", "promote_cluster"], [175, 1, 1, "", "promote_joint_candidate"], [176, 1, 1, "", "restore_beams_from_keys"], [177, 1, 1, "", "sha256"], [178, 1, 1, "", "to_json"], [179, 1, 1, "", "to_jsonstring"], [180, 1, 1, "", "validate_data"]], "compas_timber.connections.TDovetailJoint": [[182, 1, 1, "", "ToString"], [183, 1, 1, "", "add_extensions"], [184, 1, 1, "", "add_features"], [185, 1, 1, "", "check_elements_compatibility"], [186, 1, 1, "", "copy"], [187, 1, 1, "", "create"], [188, 1, 1, "", "define_dovetail_tool"], [189, 1, 1, "", "element_count_complies"], [190, 1, 1, "", "from_json"], [191, 1, 1, "", "from_jsonstring"], [192, 1, 1, "", "promote_cluster"], [193, 1, 1, "", "promote_joint_candidate"], [194, 1, 1, "", "restore_beams_from_keys"], [195, 1, 1, "", "sha256"], [196, 1, 1, "", "to_json"], [197, 1, 1, "", "to_jsonstring"], [198, 1, 1, "", "validate_data"]], "compas_timber.connections.TLapJoint": [[200, 1, 1, "", "ToString"], [201, 1, 1, "", "add_extensions"], [202, 1, 1, "", "add_features"], [203, 1, 1, "", "check_elements_compatibility"], [204, 1, 1, "", "copy"], [205, 1, 1, "", "create"], [206, 1, 1, "", "element_count_complies"], [207, 1, 1, "", "from_json"], [208, 1, 1, "", "from_jsonstring"], [209, 1, 1, "", "promote_cluster"], [210, 1, 1, "", "promote_joint_candidate"], [211, 1, 1, "", "restore_beams_from_keys"], [212, 1, 1, "", "sha256"], [213, 1, 1, "", "to_json"], [214, 1, 1, "", "to_jsonstring"], [215, 1, 1, "", "validate_data"]], "compas_timber.connections.TStepJoint": [[217, 1, 1, "", "ToString"], [218, 1, 1, "", "add_extensions"], [219, 1, 1, "", "add_features"], [220, 1, 1, "", "check_elements_compatibility"], [221, 1, 1, "", "copy"], [222, 1, 1, "", "create"], [223, 1, 1, "", "element_count_complies"], [224, 1, 1, "", "from_json"], [225, 1, 1, "", "from_jsonstring"], [226, 1, 1, "", "promote_cluster"], [227, 1, 1, "", "promote_joint_candidate"], [228, 1, 1, "", "restore_beams_from_keys"], [229, 1, 1, "", "set_step_depths"], [230, 1, 1, "", "sha256"], [231, 1, 1, "", "to_json"], [232, 1, 1, "", "to_jsonstring"], [233, 1, 1, "", "validate_data"]], "compas_timber.connections.TenonMortiseJoint": [[235, 1, 1, "", "ToString"], [236, 1, 1, "", "add_extensions"], [237, 1, 1, "", "add_features"], [238, 1, 1, "", "check_elements_compatibility"], [239, 1, 1, "", "copy"], [240, 1, 1, "", "create"], [241, 1, 1, "", "element_count_complies"], [242, 1, 1, "", "from_json"], [243, 1, 1, "", "from_jsonstring"], [244, 1, 1, "", "promote_cluster"], [245, 1, 1, "", "promote_joint_candidate"], [246, 1, 1, "", "restore_beams_from_keys"], [247, 1, 1, "", "set_default_values"], [248, 1, 1, "", "sha256"], [249, 1, 1, "", "to_json"], [250, 1, 1, "", "to_jsonstring"], [251, 1, 1, "", "validate_data"]], "compas_timber.connections.XLapJoint": [[254, 1, 1, "", "ToString"], [255, 1, 1, "", "add_extensions"], [256, 1, 1, "", "add_features"], [257, 1, 1, "", "check_elements_compatibility"], [258, 1, 1, "", "copy"], [259, 1, 1, "", "create"], [260, 1, 1, "", "element_count_complies"], [261, 1, 1, "", "from_json"], [262, 1, 1, "", "from_jsonstring"], [263, 1, 1, "", "promote_cluster"], [264, 1, 1, "", "promote_joint_candidate"], [265, 1, 1, "", "restore_beams_from_keys"], [266, 1, 1, "", "sha256"], [267, 1, 1, "", "to_json"], [268, 1, 1, "", "to_jsonstring"], [269, 1, 1, "", "validate_data"]], "compas_timber.connections.XNotchJoint": [[271, 1, 1, "", "ToString"], [272, 1, 1, "", "add_extensions"], [273, 1, 1, "", "add_features"], [274, 1, 1, "", "check_elements_compatibility"], [275, 1, 1, "", "copy"], [276, 1, 1, "", "create"], [277, 1, 1, "", "element_count_complies"], [278, 1, 1, "", "from_json"], [279, 1, 1, "", "from_jsonstring"], [280, 1, 1, "", "promote_cluster"], [281, 1, 1, "", "promote_joint_candidate"], [282, 1, 1, "", "restore_beams_from_keys"], [283, 1, 1, "", "sha256"], [284, 1, 1, "", "to_json"], [285, 1, 1, "", "to_jsonstring"], [286, 1, 1, "", "validate_data"]], "compas_timber.connections.YButtJoint": [[288, 1, 1, "", "ToString"], [289, 1, 1, "", "add_extensions"], [290, 1, 1, "", "add_features"], [291, 1, 1, "", "check_elements_compatibility"], [292, 1, 1, "", "copy"], [293, 1, 1, "", "create"], [294, 1, 1, "", "cross_beam_ref_side_index"], [295, 1, 1, "", "element_count_complies"], [296, 1, 1, "", "from_json"], [297, 1, 1, "", "from_jsonstring"], [298, 1, 1, "", "get_miter_planes"], [299, 1, 1, "", "main_beam_ref_side_index"], [300, 1, 1, "", "promote_cluster"], [301, 1, 1, "", "promote_joint_candidate"], [302, 1, 1, "", "restore_beams_from_keys"], [303, 1, 1, "", "sha256"], [304, 1, 1, "", "to_json"], [305, 1, 1, "", "to_jsonstring"], [306, 1, 1, "", "validate_data"]], "compas_timber.design": [[308, 0, 1, "", "CategoryRule"], [316, 0, 1, "", "DebugInfomation"], [321, 0, 1, "", "DirectRule"], [329, 0, 1, "", "FeatureDefinition"], [331, 0, 1, "", "JointDefinition"], [335, 0, 1, "", "JointRule"], [341, 0, 1, "", "SurfaceModel"], [359, 0, 1, "", "TopologyRule"], [366, 2, 1, "", "guess_joint_topology_2beams"], [367, 2, 1, "", "set_default_joints"]], "compas_timber.design.CategoryRule": [[309, 1, 1, "", "ToString"], [310, 1, 1, "", "comply"], [311, 1, 1, "", "get_category_rules"], [312, 1, 1, "", "get_direct_rules"], [313, 1, 1, "", "get_topology_rules"], [314, 1, 1, "", "joints_from_beams_and_rules"], [315, 1, 1, "", "reorder"]], "compas_timber.design.DebugInfomation": [[317, 1, 1, "", "ToString"], [318, 1, 1, "", "add_fastener_error"], [319, 1, 1, "", "add_feature_error"], [320, 1, 1, "", "add_joint_error"]], "compas_timber.design.DirectRule": [[322, 1, 1, "", "ToString"], [323, 1, 1, "", "comply"], [324, 1, 1, "", "contains"], [325, 1, 1, "", "get_category_rules"], [326, 1, 1, "", "get_direct_rules"], [327, 1, 1, "", "get_topology_rules"], [328, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.FeatureDefinition": [[330, 1, 1, "", "ToString"]], "compas_timber.design.JointDefinition": [[332, 1, 1, "", "ToString"], [333, 1, 1, "", "is_identical"], [334, 1, 1, "", "match"]], "compas_timber.design.JointRule": [[336, 1, 1, "", "comply"], [337, 1, 1, "", "get_category_rules"], [338, 1, 1, "", "get_direct_rules"], [339, 1, 1, "", "get_topology_rules"], [340, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.SurfaceModel": [[342, 1, 1, "", "beam_category_names"], [343, 1, 1, "", "create_model"], [344, 1, 1, "", "cull_overlaps"], [345, 1, 1, "", "distance_between_elements"], [346, 1, 1, "", "generate_frame"], [347, 1, 1, "", "generate_perimeter_beams"], [348, 1, 1, "", "generate_plates"], [349, 1, 1, "", "generate_stud_lines"], [350, 1, 1, "", "generate_studs"], [351, 1, 1, "", "generate_windows"], [352, 1, 1, "", "get_beam_intersections"], [353, 1, 1, "", "get_interior_segment_indices"], [354, 1, 1, "", "offset_elements"], [355, 1, 1, "", "parse_loops"], [356, 1, 1, "", "trim_jack_studs"], [357, 1, 1, "", "trim_king_studs"], [358, 1, 1, "", "trim_studs"]], "compas_timber.design.TopologyRule": [[360, 1, 1, "", "ToString"], [361, 1, 1, "", "comply"], [362, 1, 1, "", "get_category_rules"], [363, 1, 1, "", "get_direct_rules"], [364, 1, 1, "", "get_topology_rules"], [365, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.elements": [[368, 0, 1, "", "Beam"], [399, 0, 1, "", "Fastener"], [420, 0, 1, "", "FastenerTimberInterface"], [430, 0, 1, "", "Plate"], [457, 0, 1, "", "TimberElement"], [478, 0, 1, "", "Wall"]], "compas_timber.elements.Beam": [[369, 1, 1, "", "ToString"], [370, 1, 1, "", "add_blank_extension"], [371, 1, 1, "", "add_feature"], [372, 1, 1, "", "add_features"], [373, 1, 1, "", "back_side"], [374, 1, 1, "", "compute_aabb"], [375, 1, 1, "", "compute_collision_mesh"], [376, 1, 1, "", "compute_geometry"], [377, 1, 1, "", "compute_obb"], [378, 1, 1, "", "compute_worldtransformation"], [379, 1, 1, "", "copy"], [380, 1, 1, "", "endpoint_closest_to_point"], [381, 1, 1, "", "extension_to_plane"], [382, 1, 1, "", "from_centerline"], [383, 1, 1, "", "from_endpoints"], [384, 1, 1, "", "from_json"], [385, 1, 1, "", "from_jsonstring"], [386, 1, 1, "", "front_side"], [387, 1, 1, "", "get_dimensions_relative_to_side"], [388, 1, 1, "", "opp_side"], [389, 1, 1, "", "remove_blank_extension"], [390, 1, 1, "", "remove_features"], [391, 1, 1, "", "reset"], [392, 1, 1, "", "sha256"], [393, 1, 1, "", "side_as_surface"], [394, 1, 1, "", "to_json"], [395, 1, 1, "", "to_jsonstring"], [396, 1, 1, "", "transform"], [397, 1, 1, "", "transformed"], [398, 1, 1, "", "validate_data"]], "compas_timber.elements.Fastener": [[400, 1, 1, "", "ToString"], [401, 1, 1, "", "add_feature"], [402, 1, 1, "", "add_features"], [403, 1, 1, "", "compute_aabb"], [404, 1, 1, "", "compute_collision_mesh"], [405, 1, 1, "", "compute_geometry"], [406, 1, 1, "", "compute_obb"], [407, 1, 1, "", "compute_worldtransformation"], [408, 1, 1, "", "copy"], [409, 1, 1, "", "from_json"], [410, 1, 1, "", "from_jsonstring"], [411, 1, 1, "", "remove_blank_extension"], [412, 1, 1, "", "remove_features"], [413, 1, 1, "", "reset"], [414, 1, 1, "", "sha256"], [415, 1, 1, "", "to_json"], [416, 1, 1, "", "to_jsonstring"], [417, 1, 1, "", "transform"], [418, 1, 1, "", "transformed"], [419, 1, 1, "", "validate_data"]], "compas_timber.elements.FastenerTimberInterface": [[421, 1, 1, "", "ToString"], [422, 1, 1, "", "copy"], [423, 1, 1, "", "from_json"], [424, 1, 1, "", "from_jsonstring"], [425, 1, 1, "", "get_features"], [426, 1, 1, "", "sha256"], [427, 1, 1, "", "to_json"], [428, 1, 1, "", "to_jsonstring"], [429, 1, 1, "", "validate_data"]], "compas_timber.elements.Plate": [[431, 1, 1, "", "ToString"], [432, 1, 1, "", "add_feature"], [433, 1, 1, "", "add_features"], [434, 1, 1, "", "add_interface"], [435, 1, 1, "", "check_outlines"], [436, 1, 1, "", "compute_aabb"], [437, 1, 1, "", "compute_collision_mesh"], [438, 1, 1, "", "compute_geometry"], [439, 1, 1, "", "compute_obb"], [440, 1, 1, "", "compute_worldtransformation"], [441, 1, 1, "", "copy"], [442, 1, 1, "", "from_brep"], [443, 1, 1, "", "from_json"], [444, 1, 1, "", "from_jsonstring"], [445, 1, 1, "", "from_outline_thickness"], [446, 1, 1, "", "opp_side"], [447, 1, 1, "", "remove_blank_extension"], [448, 1, 1, "", "remove_features"], [449, 1, 1, "", "reset"], [450, 1, 1, "", "sha256"], [451, 1, 1, "", "side_as_surface"], [452, 1, 1, "", "to_json"], [453, 1, 1, "", "to_jsonstring"], [454, 1, 1, "", "transform"], [455, 1, 1, "", "transformed"], [456, 1, 1, "", "validate_data"]], "compas_timber.elements.TimberElement": [[458, 1, 1, "", "ToString"], [459, 1, 1, "", "add_feature"], [460, 1, 1, "", "add_features"], [461, 1, 1, "", "compute_aabb"], [462, 1, 1, "", "compute_collision_mesh"], [463, 1, 1, "", "compute_geometry"], [464, 1, 1, "", "compute_obb"], [465, 1, 1, "", "compute_worldtransformation"], [466, 1, 1, "", "copy"], [467, 1, 1, "", "from_json"], [468, 1, 1, "", "from_jsonstring"], [469, 1, 1, "", "remove_blank_extension"], [470, 1, 1, "", "remove_features"], [471, 1, 1, "", "reset"], [472, 1, 1, "", "sha256"], [473, 1, 1, "", "to_json"], [474, 1, 1, "", "to_jsonstring"], [475, 1, 1, "", "transform"], [476, 1, 1, "", "transformed"], [477, 1, 1, "", "validate_data"]], "compas_timber.elements.Wall": [[479, 1, 1, "", "ToString"], [480, 1, 1, "", "add_feature"], [481, 1, 1, "", "add_features"], [482, 1, 1, "", "compute_aabb"], [483, 1, 1, "", "compute_collision_mesh"], [484, 1, 1, "", "compute_geometry"], [485, 1, 1, "", "compute_obb"], [486, 1, 1, "", "compute_worldtransformation"], [487, 1, 1, "", "copy"], [488, 1, 1, "", "from_boundary"], [489, 1, 1, "", "from_brep"], [490, 1, 1, "", "from_json"], [491, 1, 1, "", "from_jsonstring"], [492, 1, 1, "", "remove_blank_extension"], [493, 1, 1, "", "remove_features"], [494, 1, 1, "", "reset"], [495, 1, 1, "", "rotate"], [496, 1, 1, "", "sha256"], [497, 1, 1, "", "to_json"], [498, 1, 1, "", "to_jsonstring"], [499, 1, 1, "", "transform"], [500, 1, 1, "", "transformed"], [501, 1, 1, "", "validate_data"]], "compas_timber.errors": [[502, 3, 1, "", "BeamJoiningError"], [503, 3, 1, "", "FastenerApplicationError"], [504, 3, 1, "", "FeatureApplicationError"]], "compas_timber.fabrication": [[505, 0, 1, "", "BTLxPart"], [508, 0, 1, "", "BTLxProcessing"], [519, 0, 1, "", "BTLxWriter"], [523, 0, 1, "", "DoubleCut"], [539, 0, 1, "", "DovetailMortise"], [557, 0, 1, "", "DovetailTenon"], [575, 0, 1, "", "Drilling"], [591, 0, 1, "", "EdgePositionType"], [592, 0, 1, "", "FrenchRidgeLap"], [608, 0, 1, "", "JackRafterCut"], [624, 0, 1, "", "Lap"], [641, 0, 1, "", "LimitationTopType"], [642, 0, 1, "", "LongitudinalCut"], [658, 0, 1, "", "MachiningLimits"], [659, 0, 1, "", "Mortise"], [675, 0, 1, "", "OrientationType"], [676, 0, 1, "", "Pocket"], [692, 0, 1, "", "Slot"], [706, 0, 1, "", "StepJoint"], [723, 0, 1, "", "StepJointNotch"], [740, 0, 1, "", "StepShapeType"], [741, 0, 1, "", "Tenon"], [757, 0, 1, "", "TenonShapeType"]], "compas_timber.fabrication.BTLxPart": [[506, 1, 1, "", "et_point_vals"], [507, 1, 1, "", "ref_side_from_face"]], "compas_timber.fabrication.BTLxProcessing": [[509, 1, 1, "", "ToString"], [510, 1, 1, "", "add_subprocessing"], [511, 1, 1, "", "copy"], [512, 1, 1, "", "from_json"], [513, 1, 1, "", "from_jsonstring"], [514, 1, 1, "", "scaled"], [515, 1, 1, "", "sha256"], [516, 1, 1, "", "to_json"], [517, 1, 1, "", "to_jsonstring"], [518, 1, 1, "", "validate_data"]], "compas_timber.fabrication.BTLxWriter": [[520, 1, 1, "", "model_to_xml"], [521, 1, 1, "", "register_type_serializer"], [522, 1, 1, "", "write"]], "compas_timber.fabrication.DoubleCut": [[524, 1, 1, "", "ToString"], [525, 1, 1, "", "add_subprocessing"], [526, 1, 1, "", "apply"], [527, 1, 1, "", "copy"], [528, 1, 1, "", "from_json"], [529, 1, 1, "", "from_jsonstring"], [530, 1, 1, "", "from_planes_and_beam"], [531, 1, 1, "", "from_shapes_and_element"], [532, 1, 1, "", "planes_from_params_and_beam"], [533, 1, 1, "", "scale"], [534, 1, 1, "", "scaled"], [535, 1, 1, "", "sha256"], [536, 1, 1, "", "to_json"], [537, 1, 1, "", "to_jsonstring"], [538, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailMortise": [[540, 1, 1, "", "ToString"], [541, 1, 1, "", "add_subprocessing"], [542, 1, 1, "", "apply"], [543, 1, 1, "", "copy"], [544, 1, 1, "", "define_dovetail_tool"], [545, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [546, 1, 1, "", "dovetail_volume_from_params_and_beam"], [547, 1, 1, "", "frame_from_params_and_beam"], [548, 1, 1, "", "from_frame_and_beam"], [549, 1, 1, "", "from_json"], [550, 1, 1, "", "from_jsonstring"], [551, 1, 1, "", "scale"], [552, 1, 1, "", "scaled"], [553, 1, 1, "", "sha256"], [554, 1, 1, "", "to_json"], [555, 1, 1, "", "to_jsonstring"], [556, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailTenon": [[558, 1, 1, "", "ToString"], [559, 1, 1, "", "add_subprocessing"], [560, 1, 1, "", "apply"], [561, 1, 1, "", "copy"], [562, 1, 1, "", "define_dovetail_tool"], [563, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [564, 1, 1, "", "dovetail_volume_from_params_and_beam"], [565, 1, 1, "", "frame_from_params_and_beam"], [566, 1, 1, "", "from_json"], [567, 1, 1, "", "from_jsonstring"], [568, 1, 1, "", "from_plane_and_beam"], [569, 1, 1, "", "scale"], [570, 1, 1, "", "scaled"], [571, 1, 1, "", "sha256"], [572, 1, 1, "", "to_json"], [573, 1, 1, "", "to_jsonstring"], [574, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Drilling": [[576, 1, 1, "", "ToString"], [577, 1, 1, "", "add_subprocessing"], [578, 1, 1, "", "apply"], [579, 1, 1, "", "copy"], [580, 1, 1, "", "cylinder_from_params_and_element"], [581, 1, 1, "", "from_json"], [582, 1, 1, "", "from_jsonstring"], [583, 1, 1, "", "from_line_and_element"], [584, 1, 1, "", "from_shapes_and_element"], [585, 1, 1, "", "scale"], [586, 1, 1, "", "scaled"], [587, 1, 1, "", "sha256"], [588, 1, 1, "", "to_json"], [589, 1, 1, "", "to_jsonstring"], [590, 1, 1, "", "validate_data"]], "compas_timber.fabrication.FrenchRidgeLap": [[593, 1, 1, "", "ToString"], [594, 1, 1, "", "add_subprocessing"], [595, 1, 1, "", "apply"], [596, 1, 1, "", "copy"], [597, 1, 1, "", "frame_from_params_and_beam"], [598, 1, 1, "", "from_beam_beam_and_plane"], [599, 1, 1, "", "from_json"], [600, 1, 1, "", "from_jsonstring"], [601, 1, 1, "", "lap_volume_from_params_and_beam"], [602, 1, 1, "", "scale"], [603, 1, 1, "", "scaled"], [604, 1, 1, "", "sha256"], [605, 1, 1, "", "to_json"], [606, 1, 1, "", "to_jsonstring"], [607, 1, 1, "", "validate_data"]], "compas_timber.fabrication.JackRafterCut": [[609, 1, 1, "", "ToString"], [610, 1, 1, "", "add_subprocessing"], [611, 1, 1, "", "apply"], [612, 1, 1, "", "copy"], [613, 1, 1, "", "from_json"], [614, 1, 1, "", "from_jsonstring"], [615, 1, 1, "", "from_plane_and_beam"], [616, 1, 1, "", "from_shapes_and_element"], [617, 1, 1, "", "plane_from_params_and_beam"], [618, 1, 1, "", "scale"], [619, 1, 1, "", "scaled"], [620, 1, 1, "", "sha256"], [621, 1, 1, "", "to_json"], [622, 1, 1, "", "to_jsonstring"], [623, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Lap": [[625, 1, 1, "", "ToString"], [626, 1, 1, "", "add_subprocessing"], [627, 1, 1, "", "apply"], [628, 1, 1, "", "copy"], [629, 1, 1, "", "from_json"], [630, 1, 1, "", "from_jsonstring"], [631, 1, 1, "", "from_plane_and_beam"], [632, 1, 1, "", "from_shapes_and_element"], [633, 1, 1, "", "from_volume_and_beam"], [634, 1, 1, "", "scale"], [635, 1, 1, "", "scaled"], [636, 1, 1, "", "sha256"], [637, 1, 1, "", "to_json"], [638, 1, 1, "", "to_jsonstring"], [639, 1, 1, "", "validate_data"], [640, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.LongitudinalCut": [[643, 1, 1, "", "ToString"], [644, 1, 1, "", "add_subprocessing"], [645, 1, 1, "", "apply"], [646, 1, 1, "", "copy"], [647, 1, 1, "", "from_json"], [648, 1, 1, "", "from_jsonstring"], [649, 1, 1, "", "from_plane_and_beam"], [650, 1, 1, "", "from_shapes_and_element"], [651, 1, 1, "", "plane_from_params_and_beam"], [652, 1, 1, "", "scaled"], [653, 1, 1, "", "sha256"], [654, 1, 1, "", "to_json"], [655, 1, 1, "", "to_jsonstring"], [656, 1, 1, "", "validate_data"], [657, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Mortise": [[660, 1, 1, "", "ToString"], [661, 1, 1, "", "add_subprocessing"], [662, 1, 1, "", "apply"], [663, 1, 1, "", "copy"], [664, 1, 1, "", "frame_from_params_and_beam"], [665, 1, 1, "", "from_frame_and_beam"], [666, 1, 1, "", "from_json"], [667, 1, 1, "", "from_jsonstring"], [668, 1, 1, "", "scale"], [669, 1, 1, "", "scaled"], [670, 1, 1, "", "sha256"], [671, 1, 1, "", "to_json"], [672, 1, 1, "", "to_jsonstring"], [673, 1, 1, "", "validate_data"], [674, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Pocket": [[677, 1, 1, "", "ToString"], [678, 1, 1, "", "add_subprocessing"], [679, 1, 1, "", "apply"], [680, 1, 1, "", "copy"], [681, 1, 1, "", "from_json"], [682, 1, 1, "", "from_jsonstring"], [683, 1, 1, "", "from_shapes_and_element"], [684, 1, 1, "", "from_volume_and_element"], [685, 1, 1, "", "scale"], [686, 1, 1, "", "scaled"], [687, 1, 1, "", "sha256"], [688, 1, 1, "", "to_json"], [689, 1, 1, "", "to_jsonstring"], [690, 1, 1, "", "validate_data"], [691, 1, 1, "", "volume_from_params_and_element"]], "compas_timber.fabrication.Slot": [[693, 1, 1, "", "ToString"], [694, 1, 1, "", "add_subprocessing"], [695, 1, 1, "", "apply"], [696, 1, 1, "", "copy"], [697, 1, 1, "", "from_json"], [698, 1, 1, "", "from_jsonstring"], [699, 1, 1, "", "from_plane_and_beam"], [700, 1, 1, "", "scale"], [701, 1, 1, "", "scaled"], [702, 1, 1, "", "sha256"], [703, 1, 1, "", "to_json"], [704, 1, 1, "", "to_jsonstring"], [705, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJoint": [[707, 1, 1, "", "ToString"], [708, 1, 1, "", "add_subprocessing"], [709, 1, 1, "", "add_tenon"], [710, 1, 1, "", "apply"], [711, 1, 1, "", "copy"], [712, 1, 1, "", "from_json"], [713, 1, 1, "", "from_jsonstring"], [714, 1, 1, "", "from_plane_and_beam"], [715, 1, 1, "", "planes_from_params_and_beam"], [716, 1, 1, "", "scale"], [717, 1, 1, "", "scaled"], [718, 1, 1, "", "sha256"], [719, 1, 1, "", "tenon_volume_from_params_and_beam"], [720, 1, 1, "", "to_json"], [721, 1, 1, "", "to_jsonstring"], [722, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJointNotch": [[724, 1, 1, "", "ToString"], [725, 1, 1, "", "add_mortise"], [726, 1, 1, "", "add_subprocessing"], [727, 1, 1, "", "apply"], [728, 1, 1, "", "copy"], [729, 1, 1, "", "from_json"], [730, 1, 1, "", "from_jsonstring"], [731, 1, 1, "", "from_plane_and_beam"], [732, 1, 1, "", "mortise_volume_from_params_and_beam"], [733, 1, 1, "", "planes_from_params_and_beam"], [734, 1, 1, "", "scale"], [735, 1, 1, "", "scaled"], [736, 1, 1, "", "sha256"], [737, 1, 1, "", "to_json"], [738, 1, 1, "", "to_jsonstring"], [739, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Tenon": [[742, 1, 1, "", "ToString"], [743, 1, 1, "", "add_subprocessing"], [744, 1, 1, "", "apply"], [745, 1, 1, "", "copy"], [746, 1, 1, "", "frame_from_params_and_beam"], [747, 1, 1, "", "from_json"], [748, 1, 1, "", "from_jsonstring"], [749, 1, 1, "", "from_plane_and_beam"], [750, 1, 1, "", "scale"], [751, 1, 1, "", "scaled"], [752, 1, 1, "", "sha256"], [753, 1, 1, "", "to_json"], [754, 1, 1, "", "to_jsonstring"], [755, 1, 1, "", "validate_data"], [756, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.ghpython": [[758, 2, 1, "", "add_gh_param"], [759, 2, 1, "", "clear_gh_params"], [760, 2, 1, "", "get_leaf_subclasses"], [761, 2, 1, "", "item_input_valid"], [762, 2, 1, "", "list_input_valid"], [763, 2, 1, "", "manage_dynamic_params"], [764, 2, 1, "", "rename_gh_input"]], "compas_timber.model": [[765, 0, 1, "", "TimberModel"]], "compas_timber.model.TimberModel": [[766, 1, 1, "", "ToString"], [767, 1, 1, "", "add_element"], [768, 1, 1, "", "add_elements"], [769, 1, 1, "", "add_group"], [770, 1, 1, "", "add_group_element"], [771, 1, 1, "", "add_interaction"], [772, 1, 1, "", "add_joint"], [773, 1, 1, "", "add_material"], [774, 1, 1, "", "assign_material"], [775, 1, 1, "", "compute_aabb"], [776, 1, 1, "", "compute_obb"], [777, 1, 1, "", "connect_adjacent_beams"], [778, 1, 1, "", "connect_adjacent_walls"], [779, 1, 1, "", "copy"], [780, 1, 1, "", "element_by_guid"], [781, 1, 1, "", "elements"], [782, 1, 1, "", "elements_connected_by"], [783, 1, 1, "", "from_json"], [784, 1, 1, "", "from_jsonstring"], [785, 1, 1, "", "get_elements_in_group"], [786, 1, 1, "", "get_interactions_for_element"], [787, 1, 1, "", "has_element"], [788, 1, 1, "", "has_group"], [789, 1, 1, "", "has_interaction"], [790, 1, 1, "", "has_material"], [791, 1, 1, "", "interactions"], [792, 1, 1, "", "materials"], [793, 1, 1, "", "process_joinery"], [794, 1, 1, "", "remove_element"], [795, 1, 1, "", "remove_interaction"], [796, 1, 1, "", "remove_joint"], [797, 1, 1, "", "rotate"], [798, 1, 1, "", "rotated"], [799, 1, 1, "", "scale"], [800, 1, 1, "", "scaled"], [801, 1, 1, "", "set_topologies"], [802, 1, 1, "", "sha256"], [803, 1, 1, "", "to_json"], [804, 1, 1, "", "to_jsonstring"], [805, 1, 1, "", "transform"], [806, 1, 1, "", "transform_numpy"], [807, 1, 1, "", "transformed"], [808, 1, 1, "", "transformed_numpy"], [809, 1, 1, "", "translate"], [810, 1, 1, "", "translated"], [811, 1, 1, "", "validate_data"]], "compas_timber.planning": [[812, 0, 1, "", "Actor"], [814, 0, 1, "", "BuildingPlan"], [824, 0, 1, "", "BuildingPlanParser"], [827, 0, 1, "", "Instruction"], [837, 0, 1, "", "LinearDimension"], [847, 0, 1, "", "Model3d"], [857, 0, 1, "", "SimpleSequenceGenerator"], [858, 0, 1, "", "Step"], [868, 0, 1, "", "Text3d"]], "compas_timber.planning.Actor": [[813, 1, 1, "", "get_name"]], "compas_timber.planning.BuildingPlan": [[815, 1, 1, "", "ToString"], [816, 1, 1, "", "add_step"], [817, 1, 1, "", "copy"], [818, 1, 1, "", "from_json"], [819, 1, 1, "", "from_jsonstring"], [820, 1, 1, "", "sha256"], [821, 1, 1, "", "to_json"], [822, 1, 1, "", "to_jsonstring"], [823, 1, 1, "", "validate_data"]], "compas_timber.planning.BuildingPlanParser": [[825, 1, 1, "", "parse"], [826, 1, 1, "", "serialize"]], "compas_timber.planning.Instruction": [[828, 1, 1, "", "ToString"], [829, 1, 1, "", "copy"], [830, 1, 1, "", "from_json"], [831, 1, 1, "", "from_jsonstring"], [832, 1, 1, "", "sha256"], [833, 1, 1, "", "to_json"], [834, 1, 1, "", "to_jsonstring"], [835, 1, 1, "", "transform"], [836, 1, 1, "", "validate_data"]], "compas_timber.planning.LinearDimension": [[838, 1, 1, "", "ToString"], [839, 1, 1, "", "copy"], [840, 1, 1, "", "from_json"], [841, 1, 1, "", "from_jsonstring"], [842, 1, 1, "", "sha256"], [843, 1, 1, "", "to_json"], [844, 1, 1, "", "to_jsonstring"], [845, 1, 1, "", "transform"], [846, 1, 1, "", "validate_data"]], "compas_timber.planning.Model3d": [[848, 1, 1, "", "ToString"], [849, 1, 1, "", "copy"], [850, 1, 1, "", "from_json"], [851, 1, 1, "", "from_jsonstring"], [852, 1, 1, "", "sha256"], [853, 1, 1, "", "to_json"], [854, 1, 1, "", "to_jsonstring"], [855, 1, 1, "", "transform"], [856, 1, 1, "", "validate_data"]], "compas_timber.planning.Step": [[859, 1, 1, "", "ToString"], [860, 1, 1, "", "copy"], [861, 1, 1, "", "from_json"], [862, 1, 1, "", "from_jsonstring"], [863, 1, 1, "", "sha256"], [864, 1, 1, "", "to_json"], [865, 1, 1, "", "to_jsonstring"], [866, 1, 1, "", "transform"], [867, 1, 1, "", "validate_data"]], "compas_timber.planning.Text3d": [[869, 1, 1, "", "ToString"], [870, 1, 1, "", "copy"], [871, 1, 1, "", "from_json"], [872, 1, 1, "", "from_jsonstring"], [873, 1, 1, "", "sha256"], [874, 1, 1, "", "to_json"], [875, 1, 1, "", "to_jsonstring"], [876, 1, 1, "", "transform"], [877, 1, 1, "", "validate_data"]], "compas_timber.rhino": [[878, 2, 1, "", "find_neighboring_elements"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"]}, "titleterms": {"api": 0, "refer": 0, "packag": 0, "compas_timb": [1, 2, 3, 4, 5, 6, 7, 8, 9], "connect": 1, "joint": [1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 882, 894, 896], "solver": 1, "function": [1, 2, 6], "except": 1, "design": [2, 889], "class": [2, 3, 4, 5, 7, 8, 881, 882], "element": [3, 781, 882], "error": [4, 896], "fabric": [5, 891], "ghpython": 6, "model": [7, 889, 894, 895, 896], "plan": 8, "rhino": [9, 893], "plugin": [9, 886], "ballnodejoint": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "tostr": [11, 38, 57, 75, 92, 109, 128, 148, 165, 182, 200, 217, 235, 254, 271, 288, 309, 317, 322, 330, 332, 360, 369, 400, 421, 431, 458, 479, 509, 524, 540, 558, 576, 593, 609, 625, 643, 660, 677, 693, 707, 724, 742, 766, 815, 828, 838, 848, 859, 869], "add_extens": [12, 39, 58, 76, 93, 110, 129, 149, 166, 183, 201, 218, 236, 255, 272, 289], "add_featur": [13, 40, 59, 77, 94, 111, 130, 150, 167, 184, 202, 219, 237, 256, 273, 290, 371, 372, 401, 402, 432, 433, 459, 460, 480, 481], "check_elements_compat": [14, 41, 60, 78, 95, 112, 131, 151, 168, 185, 203, 220, 238, 257, 274, 291], "copi": [15, 42, 61, 79, 96, 113, 132, 152, 169, 186, 204, 221, 239, 258, 275, 292, 379, 408, 422, 441, 466, 487, 511, 527, 543, 561, 579, 596, 612, 628, 646, 663, 680, 696, 711, 728, 745, 779, 817, 829, 839, 849, 860, 870], "creat": [16, 43, 62, 80, 97, 114, 133, 153, 170, 187, 205, 222, 240, 259, 276, 293, 881, 882], "element_count_compli": [17, 44, 63, 81, 98, 115, 134, 154, 171, 189, 206, 223, 241, 260, 277, 295], "from_json": [18, 45, 64, 82, 99, 116, 135, 155, 172, 190, 207, 224, 242, 261, 278, 296, 384, 409, 423, 443, 467, 490, 512, 528, 549, 566, 581, 599, 613, 629, 647, 666, 681, 697, 712, 729, 747, 783, 818, 830, 840, 850, 861, 871], "from_jsonstr": [19, 46, 65, 83, 100, 117, 136, 156, 173, 191, 208, 225, 243, 262, 279, 297, 385, 410, 424, 444, 468, 491, 513, 529, 550, 567, 582, 600, 614, 630, 648, 667, 682, 698, 713, 730, 748, 784, 819, 831, 841, 851, 862, 872], "promote_clust": [20, 47, 66, 84, 101, 120, 137, 157, 174, 192, 209, 226, 244, 263, 280, 300], "promote_joint_candid": [21, 48, 67, 85, 102, 121, 138, 158, 175, 193, 210, 227, 245, 264, 281, 301], "restore_beams_from_kei": [22, 49, 68, 86, 103, 122, 139, 159, 176, 194, 211, 228, 246, 265, 282, 302], "sha256": [23, 50, 69, 87, 104, 123, 140, 160, 177, 195, 212, 230, 248, 266, 283, 303, 392, 414, 426, 450, 472, 496, 515, 535, 553, 571, 587, 604, 620, 636, 653, 670, 687, 702, 718, 736, 752, 802, 820, 832, 842, 852, 863, 873], "to_json": [24, 51, 70, 88, 105, 124, 141, 161, 178, 196, 213, 231, 249, 267, 284, 304, 394, 415, 427, 452, 473, 497, 516, 536, 554, 572, 588, 605, 621, 637, 654, 671, 688, 703, 720, 737, 753, 803, 821, 833, 843, 853, 864, 874], "to_jsonstr": [25, 52, 71, 89, 106, 125, 142, 162, 179, 197, 214, 232, 250, 268, 285, 305, 395, 416, 428, 453, 474, 498, 517, 537, 555, 573, 589, 606, 622, 638, 655, 672, 689, 704, 721, 738, 754, 804, 822, 834, 844, 854, 865, 875], "validate_data": [26, 53, 73, 90, 107, 126, 143, 163, 180, 198, 215, 233, 251, 269, 286, 306, 398, 419, 429, 456, 477, 501, 518, 538, 556, 574, 590, 607, 623, 639, 656, 673, 690, 705, 722, 739, 755, 811, 823, 836, 846, 856, 867, 877], "beamgroupanalyz": [27, 28], "find": [28, 31, 145], "cluster": 29, "compositeanalyz": [30, 31, 32], "from_model": 32, "connectionsolv": [33, 34, 35, 36], "find_intersecting_pair": 34, "find_topologi": 35, "find_wall_wall_topologi": 36, "jointtopologi": [54, 55], "get_nam": [55, 813], "lbuttjoint": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], "update_beam_rol": 72, "lfrenchridgelapjoint": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "llapjoint": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "lmiterjoint": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "get_cutoff_plan": 118, "get_cutting_plan": 119, "lapjoint": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143], "nbeamkdtreeanalyz": [144, 145], "quadanalyz": 146, "tbirdsmouthjoint": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "tbuttjoint": [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], "tdovetailjoint": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "define_dovetail_tool": [188, 544, 562], "tlapjoint": [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "tstepjoint": [216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "set_step_depth": 229, "tenonmortisejoint": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "set_default_valu": 247, "tripletanalyz": 252, "xlapjoint": [253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], "xnotchjoint": [270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286], "ybuttjoint": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "cross_beam_ref_side_index": 294, "get_miter_plan": 298, "main_beam_ref_side_index": 299, "find_neighboring_el": [307, 878], "categoryrul": [308, 309, 310, 311, 312, 313, 314, 315], "compli": [310, 323, 336, 361], "get_category_rul": [311, 325, 337, 362], "get_direct_rul": [312, 326, 338, 363], "get_topology_rul": [313, 327, 339, 364], "joints_from_beams_and_rul": [314, 328, 340, 365], "reorder": 315, "debuginfom": [316, 317, 318, 319, 320], "add_fastener_error": 318, "add_feature_error": 319, "add_joint_error": 320, "directrul": [321, 322, 323, 324, 325, 326, 327, 328], "contain": 324, "featuredefinit": [329, 330], "jointdefinit": [331, 332, 333, 334], "is_ident": 333, "match": 334, "jointrul": [335, 336, 337, 338, 339, 340], "surfacemodel": [341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "beam_category_nam": 342, "create_model": 343, "cull_overlap": 344, "distance_between_el": 345, "generate_fram": 346, "generate_perimeter_beam": 347, "generate_pl": 348, "generate_stud_lin": 349, "generate_stud": 350, "generate_window": 351, "get_beam_intersect": 352, "get_interior_segment_indic": 353, "offset_el": 354, "parse_loop": 355, "trim_jack_stud": 356, "trim_king_stud": 357, "trim_stud": 358, "topologyrul": [359, 360, 361, 362, 363, 364, 365], "guess_joint_topology_2beam": 366, "set_default_joint": 367, "beam": [368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 888, 889, 896], "add_blank_extens": 370, "back_sid": 373, "compute_aabb": [374, 403, 436, 461, 482, 775], "compute_collision_mesh": [375, 404, 437, 462, 483], "compute_geometri": [376, 405, 438, 463, 484], "compute_obb": [377, 406, 439, 464, 485, 776], "compute_worldtransform": [378, 407, 440, 465, 486], "endpoint_closest_to_point": 380, "extension_to_plan": 381, "from_centerlin": 382, "from_endpoint": 383, "front_sid": 386, "get_dimensions_relative_to_sid": 387, "opp_sid": [388, 446], "remove_blank_extens": [389, 411, 447, 469, 492], "remove_featur": [390, 412, 448, 470, 493], "reset": [391, 413, 449, 471, 494], "side_as_surfac": [393, 451], "transform": [396, 397, 417, 418, 454, 455, 475, 476, 499, 500, 805, 807, 835, 845, 855, 866, 876], "fasten": [399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "fastenertimberinterfac": [420, 421, 422, 423, 424, 425, 426, 427, 428, 429], "get_featur": 425, "plate": [430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "add_interfac": 434, "check_outlin": 435, "from_brep": [442, 489], "from_outline_thick": 445, "timberel": [457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "wall": [478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "from_boundari": 488, "rotat": [495, 797, 798], "beamjoiningerror": 502, "fastenerapplicationerror": 503, "featureapplicationerror": 504, "btlxpart": [505, 506, 507], "et_point_v": 506, "ref_side_from_fac": 507, "btlxprocess": [508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "add_subprocess": [510, 525, 541, 559, 577, 594, 610, 626, 644, 661, 678, 694, 708, 726, 743], "scale": [514, 533, 534, 551, 552, 569, 570, 585, 586, 602, 603, 618, 619, 634, 635, 652, 668, 669, 685, 686, 700, 701, 716, 717, 734, 735, 750, 751, 799, 800], "btlxwriter": [519, 520, 521, 522], "model_to_xml": 520, "register_type_seri": 521, "write": [522, 891], "doublecut": [523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538], "appli": [526, 542, 560, 578, 595, 611, 627, 645, 662, 679, 695, 710, 727, 744], "from_planes_and_beam": 530, "from_shapes_and_el": [531, 584, 616, 632, 650, 683], "planes_from_params_and_beam": [532, 715, 733], "dovetailmortis": [539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556], "dovetail_cutting_frames_from_params_and_beam": [545, 563], "dovetail_volume_from_params_and_beam": [546, 564], "frame_from_params_and_beam": [547, 565, 597, 664, 746], "from_frame_and_beam": [548, 665], "dovetailtenon": [557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], "from_plane_and_beam": [568, 615, 631, 649, 699, 714, 731, 749], "drill": [575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 892], "cylinder_from_params_and_el": 580, "from_line_and_el": 583, "edgepositiontyp": 591, "frenchridgelap": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607], "from_beam_beam_and_plan": 598, "lap_volume_from_params_and_beam": 601, "jackraftercut": [608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623], "plane_from_params_and_beam": [617, 651], "lap": [624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 894], "from_volume_and_beam": 633, "volume_from_params_and_beam": [640, 657, 674, 756], "limitationtoptyp": 641, "longitudinalcut": [642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657], "machininglimit": 658, "mortis": [659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 894], "orientationtyp": 675, "pocket": [676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691], "from_volume_and_el": 684, "volume_from_params_and_el": 691, "slot": [692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705], "stepjoint": [706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722], "add_tenon": 709, "tenon_volume_from_params_and_beam": 719, "stepjointnotch": [723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "add_mortis": 725, "mortise_volume_from_params_and_beam": 732, "stepshapetyp": 740, "tenon": [741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 894], "tenonshapetyp": 757, "add_gh_param": 758, "clear_gh_param": 759, "get_leaf_subclass": 760, "item_input_valid": 761, "list_input_valid": 762, "manage_dynamic_param": 763, "rename_gh_input": 764, "timbermodel": [765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "add_el": [767, 768], "add_group": 769, "add_group_el": 770, "add_interact": 771, "add_joint": 772, "add_materi": 773, "assign_materi": 774, "connect_adjacent_beam": 777, "connect_adjacent_wal": 778, "element_by_guid": 780, "elements_connected_bi": 782, "get_elements_in_group": 785, "get_interactions_for_el": 786, "has_el": 787, "has_group": 788, "has_interact": 789, "has_materi": 790, "interact": 791, "materi": 792, "process_joineri": 793, "remove_el": 794, "remove_interact": 795, "remove_joint": 796, "set_topologi": 801, "transform_numpi": 806, "transformed_numpi": 808, "translat": [809, 810], "actor": [812, 813], "buildingplan": [814, 815, 816, 817, 818, 819, 820, 821, 822, 823], "add_step": 816, "buildingplanpars": [824, 825, 826], "pars": 825, "serial": 826, "instruct": [827, 828, 829, 830, 831, 832, 833, 834, 835, 836], "lineardimens": [837, 838, 839, 840, 841, 842, 843, 844, 845, 846], "model3d": [847, 848, 849, 850, 851, 852, 853, 854, 855, 856], "simplesequencegener": 857, "step": [858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 894], "text3d": [868, 869, 870, 871, 872, 873, 874, 875, 876, 877], "cite": 879, "develop": [880, 884], "guid": [880, 881, 882, 893], "btlx": [881, 891], "contribut": [881, 882], "ad": 881, "new": [881, 882], "process": 881, "1": [881, 882], "identifi": 881, "paramet": 881, "2": [881, 882], "exampl": [881, 882, 890], "3": [881, 882], "add": [881, 882], "altern": 881, "constructor": 881, "4": [881, 882], "geometri": 881, "gener": 881, "method": [881, 882], "5": [881, 882], "updat": [881, 882], "modul": [881, 882], "import": [881, 882], "6": 881, "test": [881, 882], "kei": [881, 882], "consider": [881, 882], "defin": 882, "requir": 882, "analyz": 882, "relationship": 882, "extract": 882, "geometr": 882, "inform": 882, "implement": 882, "core": 882, "compa": 883, "timber": 883, "document": 883, "depend": 883, "tabl": [883, 894], "content": 883, "indic": 883, "instal": [884, 893], "user": 884, "licens": 885, "grasshopp": 886, "attribut": 887, "standard": 887, "custom": [887, 889], "check": 887, "delet": 887, "decomposebeam": 888, "findbeambyrhinoguid": 888, "surfac": [889, 894, 896], "option": 889, "dimens": 889, "featur": [892, 896], "jack": 892, "rafter": 892, "cut": 892, "doubl": 892, "8": 893, "7": 893, "troubleshoot": 893, "rule": 894, "compon": 894, "default": 894, "topolog": 894, "categori": 894, "direct": 894, "overrid": 894, "type": [894, 896], "l": 894, "butt": 894, "miter": 894, "french": 894, "ridg": 894, "t": 894, "birdsmouth": 894, "dovetail": 894, "x": 894, "summari": 894, "show": 896, "face": 896, "index": 896, "join": 896, "topologi": 896, "util": 897, "bake": 897, "boxmap": 897, "workflow": 898}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Packages": [[0, "packages"]], "compas_timber.connections": [[1, "compas-timber-connections"]], "Joints": [[1, "joints"]], "Solvers": [[1, "solvers"]], "Functions": [[1, "functions"], [2, "functions"], [6, "functions"]], "Exceptions": [[1, "exceptions"]], "compas_timber.design": [[2, "compas-timber-design"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"]], "compas_timber.elements": [[3, "compas-timber-elements"]], "compas_timber.errors": [[4, "compas-timber-errors"]], "compas_timber.fabrication": [[5, "compas-timber-fabrication"]], "compas_timber.ghpython": [[6, "compas-timber-ghpython"]], "compas_timber.model": [[7, "compas-timber-model"]], "compas_timber.planning": [[8, "compas-timber-planning"]], "compas_timber.rhino": [[9, "compas-timber-rhino"]], "Plugins": [[9, "plugins"]], "BallNodeJoint": [[10, "ballnodejoint"]], "BallNodeJoint.ToString": [[11, "ballnodejoint-tostring"]], "BallNodeJoint.add_extensions": [[12, "ballnodejoint-add-extensions"]], "BallNodeJoint.add_features": [[13, "ballnodejoint-add-features"]], "BallNodeJoint.check_elements_compatibility": [[14, "ballnodejoint-check-elements-compatibility"]], "BallNodeJoint.copy": [[15, "ballnodejoint-copy"]], "BallNodeJoint.create": [[16, "ballnodejoint-create"]], "BallNodeJoint.element_count_complies": [[17, "ballnodejoint-element-count-complies"]], "BallNodeJoint.from_json": [[18, "ballnodejoint-from-json"]], "BallNodeJoint.from_jsonstring": [[19, "ballnodejoint-from-jsonstring"]], "BallNodeJoint.promote_cluster": [[20, "ballnodejoint-promote-cluster"]], "BallNodeJoint.promote_joint_candidate": [[21, "ballnodejoint-promote-joint-candidate"]], "BallNodeJoint.restore_beams_from_keys": [[22, "ballnodejoint-restore-beams-from-keys"]], "BallNodeJoint.sha256": [[23, "ballnodejoint-sha256"]], "BallNodeJoint.to_json": [[24, "ballnodejoint-to-json"]], "BallNodeJoint.to_jsonstring": [[25, "ballnodejoint-to-jsonstring"]], "BallNodeJoint.validate_data": [[26, "ballnodejoint-validate-data"]], "BeamGroupAnalyzer": [[27, "beamgroupanalyzer"]], "BeamGroupAnalyzer.find": [[28, "beamgroupanalyzer-find"]], "Cluster": [[29, "cluster"]], "CompositeAnalyzer": [[30, "compositeanalyzer"]], "CompositeAnalyzer.find": [[31, "compositeanalyzer-find"]], "CompositeAnalyzer.from_model": [[32, "compositeanalyzer-from-model"]], "ConnectionSolver": [[33, "connectionsolver"]], "ConnectionSolver.find_intersecting_pairs": [[34, "connectionsolver-find-intersecting-pairs"]], "ConnectionSolver.find_topology": [[35, "connectionsolver-find-topology"]], "ConnectionSolver.find_wall_wall_topology": [[36, "connectionsolver-find-wall-wall-topology"]], "Joint": [[37, "joint"]], "Joint.ToString": [[38, "joint-tostring"]], "Joint.add_extensions": [[39, "joint-add-extensions"]], "Joint.add_features": [[40, "joint-add-features"]], "Joint.check_elements_compatibility": [[41, "joint-check-elements-compatibility"]], "Joint.copy": [[42, "joint-copy"]], "Joint.create": [[43, "joint-create"]], "Joint.element_count_complies": [[44, "joint-element-count-complies"]], "Joint.from_json": [[45, "joint-from-json"]], "Joint.from_jsonstring": [[46, "joint-from-jsonstring"]], "Joint.promote_cluster": [[47, "joint-promote-cluster"]], "Joint.promote_joint_candidate": [[48, "joint-promote-joint-candidate"]], "Joint.restore_beams_from_keys": [[49, "joint-restore-beams-from-keys"]], "Joint.sha256": [[50, "joint-sha256"]], "Joint.to_json": [[51, "joint-to-json"]], "Joint.to_jsonstring": [[52, "joint-to-jsonstring"]], "Joint.validate_data": [[53, "joint-validate-data"]], "JointTopology": [[54, "jointtopology"]], "JointTopology.get_name": [[55, "jointtopology-get-name"]], "LButtJoint": [[56, "lbuttjoint"]], "LButtJoint.ToString": [[57, "lbuttjoint-tostring"]], "LButtJoint.add_extensions": [[58, "lbuttjoint-add-extensions"]], "LButtJoint.add_features": [[59, "lbuttjoint-add-features"]], "LButtJoint.check_elements_compatibility": [[60, "lbuttjoint-check-elements-compatibility"]], "LButtJoint.copy": [[61, "lbuttjoint-copy"]], "LButtJoint.create": [[62, "lbuttjoint-create"]], "LButtJoint.element_count_complies": [[63, "lbuttjoint-element-count-complies"]], "LButtJoint.from_json": [[64, "lbuttjoint-from-json"]], "LButtJoint.from_jsonstring": [[65, "lbuttjoint-from-jsonstring"]], "LButtJoint.promote_cluster": [[66, "lbuttjoint-promote-cluster"]], "LButtJoint.promote_joint_candidate": [[67, "lbuttjoint-promote-joint-candidate"]], "LButtJoint.restore_beams_from_keys": [[68, "lbuttjoint-restore-beams-from-keys"]], "LButtJoint.sha256": [[69, "lbuttjoint-sha256"]], "LButtJoint.to_json": [[70, "lbuttjoint-to-json"]], "LButtJoint.to_jsonstring": [[71, "lbuttjoint-to-jsonstring"]], "LButtJoint.update_beam_roles": [[72, "lbuttjoint-update-beam-roles"]], "LButtJoint.validate_data": [[73, "lbuttjoint-validate-data"]], "LFrenchRidgeLapJoint": [[74, "lfrenchridgelapjoint"]], "LFrenchRidgeLapJoint.ToString": [[75, "lfrenchridgelapjoint-tostring"]], "LFrenchRidgeLapJoint.add_extensions": [[76, "lfrenchridgelapjoint-add-extensions"]], "LFrenchRidgeLapJoint.add_features": [[77, "lfrenchridgelapjoint-add-features"]], "LFrenchRidgeLapJoint.check_elements_compatibility": [[78, "lfrenchridgelapjoint-check-elements-compatibility"]], "LFrenchRidgeLapJoint.copy": [[79, "lfrenchridgelapjoint-copy"]], "LFrenchRidgeLapJoint.create": [[80, "lfrenchridgelapjoint-create"]], "LFrenchRidgeLapJoint.element_count_complies": [[81, "lfrenchridgelapjoint-element-count-complies"]], "LFrenchRidgeLapJoint.from_json": [[82, "lfrenchridgelapjoint-from-json"]], "LFrenchRidgeLapJoint.from_jsonstring": [[83, "lfrenchridgelapjoint-from-jsonstring"]], "LFrenchRidgeLapJoint.promote_cluster": [[84, "lfrenchridgelapjoint-promote-cluster"]], "LFrenchRidgeLapJoint.promote_joint_candidate": [[85, "lfrenchridgelapjoint-promote-joint-candidate"]], "LFrenchRidgeLapJoint.restore_beams_from_keys": [[86, "lfrenchridgelapjoint-restore-beams-from-keys"]], "LFrenchRidgeLapJoint.sha256": [[87, "lfrenchridgelapjoint-sha256"]], "LFrenchRidgeLapJoint.to_json": [[88, "lfrenchridgelapjoint-to-json"]], "LFrenchRidgeLapJoint.to_jsonstring": [[89, "lfrenchridgelapjoint-to-jsonstring"]], "LFrenchRidgeLapJoint.validate_data": [[90, "lfrenchridgelapjoint-validate-data"]], "LLapJoint": [[91, "llapjoint"]], "LLapJoint.ToString": [[92, "llapjoint-tostring"]], "LLapJoint.add_extensions": [[93, "llapjoint-add-extensions"]], "LLapJoint.add_features": [[94, "llapjoint-add-features"]], "LLapJoint.check_elements_compatibility": [[95, "llapjoint-check-elements-compatibility"]], "LLapJoint.copy": [[96, "llapjoint-copy"]], "LLapJoint.create": [[97, "llapjoint-create"]], "LLapJoint.element_count_complies": [[98, "llapjoint-element-count-complies"]], "LLapJoint.from_json": [[99, "llapjoint-from-json"]], "LLapJoint.from_jsonstring": [[100, "llapjoint-from-jsonstring"]], "LLapJoint.promote_cluster": [[101, "llapjoint-promote-cluster"]], "LLapJoint.promote_joint_candidate": [[102, "llapjoint-promote-joint-candidate"]], "LLapJoint.restore_beams_from_keys": [[103, "llapjoint-restore-beams-from-keys"]], "LLapJoint.sha256": [[104, "llapjoint-sha256"]], "LLapJoint.to_json": [[105, "llapjoint-to-json"]], "LLapJoint.to_jsonstring": [[106, "llapjoint-to-jsonstring"]], "LLapJoint.validate_data": [[107, "llapjoint-validate-data"]], "LMiterJoint": [[108, "lmiterjoint"]], "LMiterJoint.ToString": [[109, "lmiterjoint-tostring"]], "LMiterJoint.add_extensions": [[110, "lmiterjoint-add-extensions"]], "LMiterJoint.add_features": [[111, "lmiterjoint-add-features"]], "LMiterJoint.check_elements_compatibility": [[112, "lmiterjoint-check-elements-compatibility"]], "LMiterJoint.copy": [[113, "lmiterjoint-copy"]], "LMiterJoint.create": [[114, "lmiterjoint-create"]], "LMiterJoint.element_count_complies": [[115, "lmiterjoint-element-count-complies"]], "LMiterJoint.from_json": [[116, "lmiterjoint-from-json"]], "LMiterJoint.from_jsonstring": [[117, "lmiterjoint-from-jsonstring"]], "LMiterJoint.get_cutoff_plane": [[118, "lmiterjoint-get-cutoff-plane"]], "LMiterJoint.get_cutting_planes": [[119, "lmiterjoint-get-cutting-planes"]], "LMiterJoint.promote_cluster": [[120, "lmiterjoint-promote-cluster"]], "LMiterJoint.promote_joint_candidate": [[121, "lmiterjoint-promote-joint-candidate"]], "LMiterJoint.restore_beams_from_keys": [[122, "lmiterjoint-restore-beams-from-keys"]], "LMiterJoint.sha256": [[123, "lmiterjoint-sha256"]], "LMiterJoint.to_json": [[124, "lmiterjoint-to-json"]], "LMiterJoint.to_jsonstring": [[125, "lmiterjoint-to-jsonstring"]], "LMiterJoint.validate_data": [[126, "lmiterjoint-validate-data"]], "LapJoint": [[127, "lapjoint"]], "LapJoint.ToString": [[128, "lapjoint-tostring"]], "LapJoint.add_extensions": [[129, "lapjoint-add-extensions"]], "LapJoint.add_features": [[130, "lapjoint-add-features"]], "LapJoint.check_elements_compatibility": [[131, "lapjoint-check-elements-compatibility"]], "LapJoint.copy": [[132, "lapjoint-copy"]], "LapJoint.create": [[133, "lapjoint-create"]], "LapJoint.element_count_complies": [[134, "lapjoint-element-count-complies"]], "LapJoint.from_json": [[135, "lapjoint-from-json"]], "LapJoint.from_jsonstring": [[136, "lapjoint-from-jsonstring"]], "LapJoint.promote_cluster": [[137, "lapjoint-promote-cluster"]], "LapJoint.promote_joint_candidate": [[138, "lapjoint-promote-joint-candidate"]], "LapJoint.restore_beams_from_keys": [[139, "lapjoint-restore-beams-from-keys"]], "LapJoint.sha256": [[140, "lapjoint-sha256"]], "LapJoint.to_json": [[141, "lapjoint-to-json"]], "LapJoint.to_jsonstring": [[142, "lapjoint-to-jsonstring"]], "LapJoint.validate_data": [[143, "lapjoint-validate-data"]], "NBeamKDTreeAnalyzer": [[144, "nbeamkdtreeanalyzer"]], "NBeamKDTreeAnalyzer.find": [[145, "nbeamkdtreeanalyzer-find"]], "QuadAnalyzer": [[146, "quadanalyzer"]], "TBirdsmouthJoint": [[147, "tbirdsmouthjoint"]], "TBirdsmouthJoint.ToString": [[148, "tbirdsmouthjoint-tostring"]], "TBirdsmouthJoint.add_extensions": [[149, "tbirdsmouthjoint-add-extensions"]], "TBirdsmouthJoint.add_features": [[150, "tbirdsmouthjoint-add-features"]], "TBirdsmouthJoint.check_elements_compatibility": [[151, "tbirdsmouthjoint-check-elements-compatibility"]], "TBirdsmouthJoint.copy": [[152, "tbirdsmouthjoint-copy"]], "TBirdsmouthJoint.create": [[153, "tbirdsmouthjoint-create"]], "TBirdsmouthJoint.element_count_complies": [[154, "tbirdsmouthjoint-element-count-complies"]], "TBirdsmouthJoint.from_json": [[155, "tbirdsmouthjoint-from-json"]], "TBirdsmouthJoint.from_jsonstring": [[156, "tbirdsmouthjoint-from-jsonstring"]], "TBirdsmouthJoint.promote_cluster": [[157, "tbirdsmouthjoint-promote-cluster"]], "TBirdsmouthJoint.promote_joint_candidate": [[158, "tbirdsmouthjoint-promote-joint-candidate"]], "TBirdsmouthJoint.restore_beams_from_keys": [[159, "tbirdsmouthjoint-restore-beams-from-keys"]], "TBirdsmouthJoint.sha256": [[160, "tbirdsmouthjoint-sha256"]], "TBirdsmouthJoint.to_json": [[161, "tbirdsmouthjoint-to-json"]], "TBirdsmouthJoint.to_jsonstring": [[162, "tbirdsmouthjoint-to-jsonstring"]], "TBirdsmouthJoint.validate_data": [[163, "tbirdsmouthjoint-validate-data"]], "TButtJoint": [[164, "tbuttjoint"]], "TButtJoint.ToString": [[165, "tbuttjoint-tostring"]], "TButtJoint.add_extensions": [[166, "tbuttjoint-add-extensions"]], "TButtJoint.add_features": [[167, "tbuttjoint-add-features"]], "TButtJoint.check_elements_compatibility": [[168, "tbuttjoint-check-elements-compatibility"]], "TButtJoint.copy": [[169, "tbuttjoint-copy"]], "TButtJoint.create": [[170, "tbuttjoint-create"]], "TButtJoint.element_count_complies": [[171, "tbuttjoint-element-count-complies"]], "TButtJoint.from_json": [[172, "tbuttjoint-from-json"]], "TButtJoint.from_jsonstring": [[173, "tbuttjoint-from-jsonstring"]], "TButtJoint.promote_cluster": [[174, "tbuttjoint-promote-cluster"]], "TButtJoint.promote_joint_candidate": [[175, "tbuttjoint-promote-joint-candidate"]], "TButtJoint.restore_beams_from_keys": [[176, "tbuttjoint-restore-beams-from-keys"]], "TButtJoint.sha256": [[177, "tbuttjoint-sha256"]], "TButtJoint.to_json": [[178, "tbuttjoint-to-json"]], "TButtJoint.to_jsonstring": [[179, "tbuttjoint-to-jsonstring"]], "TButtJoint.validate_data": [[180, "tbuttjoint-validate-data"]], "TDovetailJoint": [[181, "tdovetailjoint"]], "TDovetailJoint.ToString": [[182, "tdovetailjoint-tostring"]], "TDovetailJoint.add_extensions": [[183, "tdovetailjoint-add-extensions"]], "TDovetailJoint.add_features": [[184, "tdovetailjoint-add-features"]], "TDovetailJoint.check_elements_compatibility": [[185, "tdovetailjoint-check-elements-compatibility"]], "TDovetailJoint.copy": [[186, "tdovetailjoint-copy"]], "TDovetailJoint.create": [[187, "tdovetailjoint-create"]], "TDovetailJoint.define_dovetail_tool": [[188, "tdovetailjoint-define-dovetail-tool"]], "TDovetailJoint.element_count_complies": [[189, "tdovetailjoint-element-count-complies"]], "TDovetailJoint.from_json": [[190, "tdovetailjoint-from-json"]], "TDovetailJoint.from_jsonstring": [[191, "tdovetailjoint-from-jsonstring"]], "TDovetailJoint.promote_cluster": [[192, "tdovetailjoint-promote-cluster"]], "TDovetailJoint.promote_joint_candidate": [[193, "tdovetailjoint-promote-joint-candidate"]], "TDovetailJoint.restore_beams_from_keys": [[194, "tdovetailjoint-restore-beams-from-keys"]], "TDovetailJoint.sha256": [[195, "tdovetailjoint-sha256"]], "TDovetailJoint.to_json": [[196, "tdovetailjoint-to-json"]], "TDovetailJoint.to_jsonstring": [[197, "tdovetailjoint-to-jsonstring"]], "TDovetailJoint.validate_data": [[198, "tdovetailjoint-validate-data"]], "TLapJoint": [[199, "tlapjoint"]], "TLapJoint.ToString": [[200, "tlapjoint-tostring"]], "TLapJoint.add_extensions": [[201, "tlapjoint-add-extensions"]], "TLapJoint.add_features": [[202, "tlapjoint-add-features"]], "TLapJoint.check_elements_compatibility": [[203, "tlapjoint-check-elements-compatibility"]], "TLapJoint.copy": [[204, "tlapjoint-copy"]], "TLapJoint.create": [[205, "tlapjoint-create"]], "TLapJoint.element_count_complies": [[206, "tlapjoint-element-count-complies"]], "TLapJoint.from_json": [[207, "tlapjoint-from-json"]], "TLapJoint.from_jsonstring": [[208, "tlapjoint-from-jsonstring"]], "TLapJoint.promote_cluster": [[209, "tlapjoint-promote-cluster"]], "TLapJoint.promote_joint_candidate": [[210, "tlapjoint-promote-joint-candidate"]], "TLapJoint.restore_beams_from_keys": [[211, "tlapjoint-restore-beams-from-keys"]], "TLapJoint.sha256": [[212, "tlapjoint-sha256"]], "TLapJoint.to_json": [[213, "tlapjoint-to-json"]], "TLapJoint.to_jsonstring": [[214, "tlapjoint-to-jsonstring"]], "TLapJoint.validate_data": [[215, "tlapjoint-validate-data"]], "TStepJoint": [[216, "tstepjoint"]], "TStepJoint.ToString": [[217, "tstepjoint-tostring"]], "TStepJoint.add_extensions": [[218, "tstepjoint-add-extensions"]], "TStepJoint.add_features": [[219, "tstepjoint-add-features"]], "TStepJoint.check_elements_compatibility": [[220, "tstepjoint-check-elements-compatibility"]], "TStepJoint.copy": [[221, "tstepjoint-copy"]], "TStepJoint.create": [[222, "tstepjoint-create"]], "TStepJoint.element_count_complies": [[223, "tstepjoint-element-count-complies"]], "TStepJoint.from_json": [[224, "tstepjoint-from-json"]], "TStepJoint.from_jsonstring": [[225, "tstepjoint-from-jsonstring"]], "TStepJoint.promote_cluster": [[226, "tstepjoint-promote-cluster"]], "TStepJoint.promote_joint_candidate": [[227, "tstepjoint-promote-joint-candidate"]], "TStepJoint.restore_beams_from_keys": [[228, "tstepjoint-restore-beams-from-keys"]], "TStepJoint.set_step_depths": [[229, "tstepjoint-set-step-depths"]], "TStepJoint.sha256": [[230, "tstepjoint-sha256"]], "TStepJoint.to_json": [[231, "tstepjoint-to-json"]], "TStepJoint.to_jsonstring": [[232, "tstepjoint-to-jsonstring"]], "TStepJoint.validate_data": [[233, "tstepjoint-validate-data"]], "TenonMortiseJoint": [[234, "tenonmortisejoint"]], "TenonMortiseJoint.ToString": [[235, "tenonmortisejoint-tostring"]], "TenonMortiseJoint.add_extensions": [[236, "tenonmortisejoint-add-extensions"]], "TenonMortiseJoint.add_features": [[237, "tenonmortisejoint-add-features"]], "TenonMortiseJoint.check_elements_compatibility": [[238, "tenonmortisejoint-check-elements-compatibility"]], "TenonMortiseJoint.copy": [[239, "tenonmortisejoint-copy"]], "TenonMortiseJoint.create": [[240, "tenonmortisejoint-create"]], "TenonMortiseJoint.element_count_complies": [[241, "tenonmortisejoint-element-count-complies"]], "TenonMortiseJoint.from_json": [[242, "tenonmortisejoint-from-json"]], "TenonMortiseJoint.from_jsonstring": [[243, "tenonmortisejoint-from-jsonstring"]], "TenonMortiseJoint.promote_cluster": [[244, "tenonmortisejoint-promote-cluster"]], "TenonMortiseJoint.promote_joint_candidate": [[245, "tenonmortisejoint-promote-joint-candidate"]], "TenonMortiseJoint.restore_beams_from_keys": [[246, "tenonmortisejoint-restore-beams-from-keys"]], "TenonMortiseJoint.set_default_values": [[247, "tenonmortisejoint-set-default-values"]], "TenonMortiseJoint.sha256": [[248, "tenonmortisejoint-sha256"]], "TenonMortiseJoint.to_json": [[249, "tenonmortisejoint-to-json"]], "TenonMortiseJoint.to_jsonstring": [[250, "tenonmortisejoint-to-jsonstring"]], "TenonMortiseJoint.validate_data": [[251, "tenonmortisejoint-validate-data"]], "TripletAnalyzer": [[252, "tripletanalyzer"]], "XLapJoint": [[253, "xlapjoint"]], "XLapJoint.ToString": [[254, "xlapjoint-tostring"]], "XLapJoint.add_extensions": [[255, "xlapjoint-add-extensions"]], "XLapJoint.add_features": [[256, "xlapjoint-add-features"]], "XLapJoint.check_elements_compatibility": [[257, "xlapjoint-check-elements-compatibility"]], "XLapJoint.copy": [[258, "xlapjoint-copy"]], "XLapJoint.create": [[259, "xlapjoint-create"]], "XLapJoint.element_count_complies": [[260, "xlapjoint-element-count-complies"]], "XLapJoint.from_json": [[261, "xlapjoint-from-json"]], "XLapJoint.from_jsonstring": [[262, "xlapjoint-from-jsonstring"]], "XLapJoint.promote_cluster": [[263, "xlapjoint-promote-cluster"]], "XLapJoint.promote_joint_candidate": [[264, "xlapjoint-promote-joint-candidate"]], "XLapJoint.restore_beams_from_keys": [[265, "xlapjoint-restore-beams-from-keys"]], "XLapJoint.sha256": [[266, "xlapjoint-sha256"]], "XLapJoint.to_json": [[267, "xlapjoint-to-json"]], "XLapJoint.to_jsonstring": [[268, "xlapjoint-to-jsonstring"]], "XLapJoint.validate_data": [[269, "xlapjoint-validate-data"]], "XNotchJoint": [[270, "xnotchjoint"]], "XNotchJoint.ToString": [[271, "xnotchjoint-tostring"]], "XNotchJoint.add_extensions": [[272, "xnotchjoint-add-extensions"]], "XNotchJoint.add_features": [[273, "xnotchjoint-add-features"]], "XNotchJoint.check_elements_compatibility": [[274, "xnotchjoint-check-elements-compatibility"]], "XNotchJoint.copy": [[275, "xnotchjoint-copy"]], "XNotchJoint.create": [[276, "xnotchjoint-create"]], "XNotchJoint.element_count_complies": [[277, "xnotchjoint-element-count-complies"]], "XNotchJoint.from_json": [[278, "xnotchjoint-from-json"]], "XNotchJoint.from_jsonstring": [[279, "xnotchjoint-from-jsonstring"]], "XNotchJoint.promote_cluster": [[280, "xnotchjoint-promote-cluster"]], "XNotchJoint.promote_joint_candidate": [[281, "xnotchjoint-promote-joint-candidate"]], "XNotchJoint.restore_beams_from_keys": [[282, "xnotchjoint-restore-beams-from-keys"]], "XNotchJoint.sha256": [[283, "xnotchjoint-sha256"]], "XNotchJoint.to_json": [[284, "xnotchjoint-to-json"]], "XNotchJoint.to_jsonstring": [[285, "xnotchjoint-to-jsonstring"]], "XNotchJoint.validate_data": [[286, "xnotchjoint-validate-data"]], "YButtJoint": [[287, "ybuttjoint"]], "YButtJoint.ToString": [[288, "ybuttjoint-tostring"]], "YButtJoint.add_extensions": [[289, "ybuttjoint-add-extensions"]], "YButtJoint.add_features": [[290, "ybuttjoint-add-features"]], "YButtJoint.check_elements_compatibility": [[291, "ybuttjoint-check-elements-compatibility"]], "YButtJoint.copy": [[292, "ybuttjoint-copy"]], "YButtJoint.create": [[293, "ybuttjoint-create"]], "YButtJoint.cross_beam_ref_side_index": [[294, "ybuttjoint-cross-beam-ref-side-index"]], "YButtJoint.element_count_complies": [[295, "ybuttjoint-element-count-complies"]], "YButtJoint.from_json": [[296, "ybuttjoint-from-json"]], "YButtJoint.from_jsonstring": [[297, "ybuttjoint-from-jsonstring"]], "YButtJoint.get_miter_planes": [[298, "ybuttjoint-get-miter-planes"]], "YButtJoint.main_beam_ref_side_index": [[299, "ybuttjoint-main-beam-ref-side-index"]], "YButtJoint.promote_cluster": [[300, "ybuttjoint-promote-cluster"]], "YButtJoint.promote_joint_candidate": [[301, "ybuttjoint-promote-joint-candidate"]], "YButtJoint.restore_beams_from_keys": [[302, "ybuttjoint-restore-beams-from-keys"]], "YButtJoint.sha256": [[303, "ybuttjoint-sha256"]], "YButtJoint.to_json": [[304, "ybuttjoint-to-json"]], "YButtJoint.to_jsonstring": [[305, "ybuttjoint-to-jsonstring"]], "YButtJoint.validate_data": [[306, "ybuttjoint-validate-data"]], "find_neighboring_elements": [[307, "find-neighboring-elements"], [878, "find-neighboring-elements"]], "CategoryRule": [[308, "categoryrule"]], "CategoryRule.ToString": [[309, "categoryrule-tostring"]], "CategoryRule.comply": [[310, "categoryrule-comply"]], "CategoryRule.get_category_rules": [[311, "categoryrule-get-category-rules"]], "CategoryRule.get_direct_rules": [[312, "categoryrule-get-direct-rules"]], "CategoryRule.get_topology_rules": [[313, "categoryrule-get-topology-rules"]], "CategoryRule.joints_from_beams_and_rules": [[314, "categoryrule-joints-from-beams-and-rules"]], "CategoryRule.reorder": [[315, "categoryrule-reorder"]], "DebugInfomation": [[316, "debuginfomation"]], "DebugInfomation.ToString": [[317, "debuginfomation-tostring"]], "DebugInfomation.add_fastener_error": [[318, "debuginfomation-add-fastener-error"]], "DebugInfomation.add_feature_error": [[319, "debuginfomation-add-feature-error"]], "DebugInfomation.add_joint_error": [[320, "debuginfomation-add-joint-error"]], "DirectRule": [[321, "directrule"]], "DirectRule.ToString": [[322, "directrule-tostring"]], "DirectRule.comply": [[323, "directrule-comply"]], "DirectRule.contains": [[324, "directrule-contains"]], "DirectRule.get_category_rules": [[325, "directrule-get-category-rules"]], "DirectRule.get_direct_rules": [[326, "directrule-get-direct-rules"]], "DirectRule.get_topology_rules": [[327, "directrule-get-topology-rules"]], "DirectRule.joints_from_beams_and_rules": [[328, "directrule-joints-from-beams-and-rules"]], "FeatureDefinition": [[329, "featuredefinition"]], "FeatureDefinition.ToString": [[330, "featuredefinition-tostring"]], "JointDefinition": [[331, "jointdefinition"]], "JointDefinition.ToString": [[332, "jointdefinition-tostring"]], "JointDefinition.is_identical": [[333, "jointdefinition-is-identical"]], "JointDefinition.match": [[334, "jointdefinition-match"]], "JointRule": [[335, "jointrule"]], "JointRule.comply": [[336, "jointrule-comply"]], "JointRule.get_category_rules": [[337, "jointrule-get-category-rules"]], "JointRule.get_direct_rules": [[338, "jointrule-get-direct-rules"]], "JointRule.get_topology_rules": [[339, "jointrule-get-topology-rules"]], "JointRule.joints_from_beams_and_rules": [[340, "jointrule-joints-from-beams-and-rules"]], "SurfaceModel": [[341, "surfacemodel"]], "SurfaceModel.beam_category_names": [[342, "surfacemodel-beam-category-names"]], "SurfaceModel.create_model": [[343, "surfacemodel-create-model"]], "SurfaceModel.cull_overlaps": [[344, "surfacemodel-cull-overlaps"]], "SurfaceModel.distance_between_elements": [[345, "surfacemodel-distance-between-elements"]], "SurfaceModel.generate_frame": [[346, "surfacemodel-generate-frame"]], "SurfaceModel.generate_perimeter_beams": [[347, "surfacemodel-generate-perimeter-beams"]], "SurfaceModel.generate_plates": [[348, "surfacemodel-generate-plates"]], "SurfaceModel.generate_stud_lines": [[349, "surfacemodel-generate-stud-lines"]], "SurfaceModel.generate_studs": [[350, "surfacemodel-generate-studs"]], "SurfaceModel.generate_windows": [[351, "surfacemodel-generate-windows"]], "SurfaceModel.get_beam_intersections": [[352, "surfacemodel-get-beam-intersections"]], "SurfaceModel.get_interior_segment_indices": [[353, "surfacemodel-get-interior-segment-indices"]], "SurfaceModel.offset_elements": [[354, "surfacemodel-offset-elements"]], "SurfaceModel.parse_loops": [[355, "surfacemodel-parse-loops"]], "SurfaceModel.trim_jack_studs": [[356, "surfacemodel-trim-jack-studs"]], "SurfaceModel.trim_king_studs": [[357, "surfacemodel-trim-king-studs"]], "SurfaceModel.trim_studs": [[358, "surfacemodel-trim-studs"]], "TopologyRule": [[359, "topologyrule"]], "TopologyRule.ToString": [[360, "topologyrule-tostring"]], "TopologyRule.comply": [[361, "topologyrule-comply"]], "TopologyRule.get_category_rules": [[362, "topologyrule-get-category-rules"]], "TopologyRule.get_direct_rules": [[363, "topologyrule-get-direct-rules"]], "TopologyRule.get_topology_rules": [[364, "topologyrule-get-topology-rules"]], "TopologyRule.joints_from_beams_and_rules": [[365, "topologyrule-joints-from-beams-and-rules"]], "guess_joint_topology_2beams": [[366, "guess-joint-topology-2beams"]], "set_default_joints": [[367, "set-default-joints"]], "Beam": [[368, "beam"]], "Beam.ToString": [[369, "beam-tostring"]], "Beam.add_blank_extension": [[370, "beam-add-blank-extension"]], "Beam.add_feature": [[371, "beam-add-feature"]], "Beam.add_features": [[372, "beam-add-features"]], "Beam.back_side": [[373, "beam-back-side"]], "Beam.compute_aabb": [[374, "beam-compute-aabb"]], "Beam.compute_collision_mesh": [[375, "beam-compute-collision-mesh"]], "Beam.compute_geometry": [[376, "beam-compute-geometry"]], "Beam.compute_obb": [[377, "beam-compute-obb"]], "Beam.compute_worldtransformation": [[378, "beam-compute-worldtransformation"]], "Beam.copy": [[379, "beam-copy"]], "Beam.endpoint_closest_to_point": [[380, "beam-endpoint-closest-to-point"]], "Beam.extension_to_plane": [[381, "beam-extension-to-plane"]], "Beam.from_centerline": [[382, "beam-from-centerline"]], "Beam.from_endpoints": [[383, "beam-from-endpoints"]], "Beam.from_json": [[384, "beam-from-json"]], "Beam.from_jsonstring": [[385, "beam-from-jsonstring"]], "Beam.front_side": [[386, "beam-front-side"]], "Beam.get_dimensions_relative_to_side": [[387, "beam-get-dimensions-relative-to-side"]], "Beam.opp_side": [[388, "beam-opp-side"]], "Beam.remove_blank_extension": [[389, "beam-remove-blank-extension"]], "Beam.remove_features": [[390, "beam-remove-features"]], "Beam.reset": [[391, "beam-reset"]], "Beam.sha256": [[392, "beam-sha256"]], "Beam.side_as_surface": [[393, "beam-side-as-surface"]], "Beam.to_json": [[394, "beam-to-json"]], "Beam.to_jsonstring": [[395, "beam-to-jsonstring"]], "Beam.transform": [[396, "beam-transform"]], "Beam.transformed": [[397, "beam-transformed"]], "Beam.validate_data": [[398, "beam-validate-data"]], "Fastener": [[399, "fastener"]], "Fastener.ToString": [[400, "fastener-tostring"]], "Fastener.add_feature": [[401, "fastener-add-feature"]], "Fastener.add_features": [[402, "fastener-add-features"]], "Fastener.compute_aabb": [[403, "fastener-compute-aabb"]], "Fastener.compute_collision_mesh": [[404, "fastener-compute-collision-mesh"]], "Fastener.compute_geometry": [[405, "fastener-compute-geometry"]], "Fastener.compute_obb": [[406, "fastener-compute-obb"]], "Fastener.compute_worldtransformation": [[407, "fastener-compute-worldtransformation"]], "Fastener.copy": [[408, "fastener-copy"]], "Fastener.from_json": [[409, "fastener-from-json"]], "Fastener.from_jsonstring": [[410, "fastener-from-jsonstring"]], "Fastener.remove_blank_extension": [[411, "fastener-remove-blank-extension"]], "Fastener.remove_features": [[412, "fastener-remove-features"]], "Fastener.reset": [[413, "fastener-reset"]], "Fastener.sha256": [[414, "fastener-sha256"]], "Fastener.to_json": [[415, "fastener-to-json"]], "Fastener.to_jsonstring": [[416, "fastener-to-jsonstring"]], "Fastener.transform": [[417, "fastener-transform"]], "Fastener.transformed": [[418, "fastener-transformed"]], "Fastener.validate_data": [[419, "fastener-validate-data"]], "FastenerTimberInterface": [[420, "fastenertimberinterface"]], "FastenerTimberInterface.ToString": [[421, "fastenertimberinterface-tostring"]], "FastenerTimberInterface.copy": [[422, "fastenertimberinterface-copy"]], "FastenerTimberInterface.from_json": [[423, "fastenertimberinterface-from-json"]], "FastenerTimberInterface.from_jsonstring": [[424, "fastenertimberinterface-from-jsonstring"]], "FastenerTimberInterface.get_features": [[425, "fastenertimberinterface-get-features"]], "FastenerTimberInterface.sha256": [[426, "fastenertimberinterface-sha256"]], "FastenerTimberInterface.to_json": [[427, "fastenertimberinterface-to-json"]], "FastenerTimberInterface.to_jsonstring": [[428, "fastenertimberinterface-to-jsonstring"]], "FastenerTimberInterface.validate_data": [[429, "fastenertimberinterface-validate-data"]], "Plate": [[430, "plate"]], "Plate.ToString": [[431, "plate-tostring"]], "Plate.add_feature": [[432, "plate-add-feature"]], "Plate.add_features": [[433, "plate-add-features"]], "Plate.add_interface": [[434, "plate-add-interface"]], "Plate.check_outlines": [[435, "plate-check-outlines"]], "Plate.compute_aabb": [[436, "plate-compute-aabb"]], "Plate.compute_collision_mesh": [[437, "plate-compute-collision-mesh"]], "Plate.compute_geometry": [[438, "plate-compute-geometry"]], "Plate.compute_obb": [[439, "plate-compute-obb"]], "Plate.compute_worldtransformation": [[440, "plate-compute-worldtransformation"]], "Plate.copy": [[441, "plate-copy"]], "Plate.from_brep": [[442, "plate-from-brep"]], "Plate.from_json": [[443, "plate-from-json"]], "Plate.from_jsonstring": [[444, "plate-from-jsonstring"]], "Plate.from_outline_thickness": [[445, "plate-from-outline-thickness"]], "Plate.opp_side": [[446, "plate-opp-side"]], "Plate.remove_blank_extension": [[447, "plate-remove-blank-extension"]], "Plate.remove_features": [[448, "plate-remove-features"]], "Plate.reset": [[449, "plate-reset"]], "Plate.sha256": [[450, "plate-sha256"]], "Plate.side_as_surface": [[451, "plate-side-as-surface"]], "Plate.to_json": [[452, "plate-to-json"]], "Plate.to_jsonstring": [[453, "plate-to-jsonstring"]], "Plate.transform": [[454, "plate-transform"]], "Plate.transformed": [[455, "plate-transformed"]], "Plate.validate_data": [[456, "plate-validate-data"]], "TimberElement": [[457, "timberelement"]], "TimberElement.ToString": [[458, "timberelement-tostring"]], "TimberElement.add_feature": [[459, "timberelement-add-feature"]], "TimberElement.add_features": [[460, "timberelement-add-features"]], "TimberElement.compute_aabb": [[461, "timberelement-compute-aabb"]], "TimberElement.compute_collision_mesh": [[462, "timberelement-compute-collision-mesh"]], "TimberElement.compute_geometry": [[463, "timberelement-compute-geometry"]], "TimberElement.compute_obb": [[464, "timberelement-compute-obb"]], "TimberElement.compute_worldtransformation": [[465, "timberelement-compute-worldtransformation"]], "TimberElement.copy": [[466, "timberelement-copy"]], "TimberElement.from_json": [[467, "timberelement-from-json"]], "TimberElement.from_jsonstring": [[468, "timberelement-from-jsonstring"]], "TimberElement.remove_blank_extension": [[469, "timberelement-remove-blank-extension"]], "TimberElement.remove_features": [[470, "timberelement-remove-features"]], "TimberElement.reset": [[471, "timberelement-reset"]], "TimberElement.sha256": [[472, "timberelement-sha256"]], "TimberElement.to_json": [[473, "timberelement-to-json"]], "TimberElement.to_jsonstring": [[474, "timberelement-to-jsonstring"]], "TimberElement.transform": [[475, "timberelement-transform"]], "TimberElement.transformed": [[476, "timberelement-transformed"]], "TimberElement.validate_data": [[477, "timberelement-validate-data"]], "Wall": [[478, "wall"]], "Wall.ToString": [[479, "wall-tostring"]], "Wall.add_feature": [[480, "wall-add-feature"]], "Wall.add_features": [[481, "wall-add-features"]], "Wall.compute_aabb": [[482, "wall-compute-aabb"]], "Wall.compute_collision_mesh": [[483, "wall-compute-collision-mesh"]], "Wall.compute_geometry": [[484, "wall-compute-geometry"]], "Wall.compute_obb": [[485, "wall-compute-obb"]], "Wall.compute_worldtransformation": [[486, "wall-compute-worldtransformation"]], "Wall.copy": [[487, "wall-copy"]], "Wall.from_boundary": [[488, "wall-from-boundary"]], "Wall.from_brep": [[489, "wall-from-brep"]], "Wall.from_json": [[490, "wall-from-json"]], "Wall.from_jsonstring": [[491, "wall-from-jsonstring"]], "Wall.remove_blank_extension": [[492, "wall-remove-blank-extension"]], "Wall.remove_features": [[493, "wall-remove-features"]], "Wall.reset": [[494, "wall-reset"]], "Wall.rotate": [[495, "wall-rotate"]], "Wall.sha256": [[496, "wall-sha256"]], "Wall.to_json": [[497, "wall-to-json"]], "Wall.to_jsonstring": [[498, "wall-to-jsonstring"]], "Wall.transform": [[499, "wall-transform"]], "Wall.transformed": [[500, "wall-transformed"]], "Wall.validate_data": [[501, "wall-validate-data"]], "BeamJoiningError": [[502, "beamjoiningerror"]], "FastenerApplicationError": [[503, "fastenerapplicationerror"]], "FeatureApplicationError": [[504, "featureapplicationerror"]], "BTLxPart": [[505, "btlxpart"]], "BTLxPart.et_point_vals": [[506, "btlxpart-et-point-vals"]], "BTLxPart.ref_side_from_face": [[507, "btlxpart-ref-side-from-face"]], "BTLxProcessing": [[508, "btlxprocessing"]], "BTLxProcessing.ToString": [[509, "btlxprocessing-tostring"]], "BTLxProcessing.add_subprocessing": [[510, "btlxprocessing-add-subprocessing"]], "BTLxProcessing.copy": [[511, "btlxprocessing-copy"]], "BTLxProcessing.from_json": [[512, "btlxprocessing-from-json"]], "BTLxProcessing.from_jsonstring": [[513, "btlxprocessing-from-jsonstring"]], "BTLxProcessing.scaled": [[514, "btlxprocessing-scaled"]], "BTLxProcessing.sha256": [[515, "btlxprocessing-sha256"]], "BTLxProcessing.to_json": [[516, "btlxprocessing-to-json"]], "BTLxProcessing.to_jsonstring": [[517, "btlxprocessing-to-jsonstring"]], "BTLxProcessing.validate_data": [[518, "btlxprocessing-validate-data"]], "BTLxWriter": [[519, "btlxwriter"]], "BTLxWriter.model_to_xml": [[520, "btlxwriter-model-to-xml"]], "BTLxWriter.register_type_serializer": [[521, "btlxwriter-register-type-serializer"]], "BTLxWriter.write": [[522, "btlxwriter-write"]], "DoubleCut": [[523, "doublecut"]], "DoubleCut.ToString": [[524, "doublecut-tostring"]], "DoubleCut.add_subprocessing": [[525, "doublecut-add-subprocessing"]], "DoubleCut.apply": [[526, "doublecut-apply"]], "DoubleCut.copy": [[527, "doublecut-copy"]], "DoubleCut.from_json": [[528, "doublecut-from-json"]], "DoubleCut.from_jsonstring": [[529, "doublecut-from-jsonstring"]], "DoubleCut.from_planes_and_beam": [[530, "doublecut-from-planes-and-beam"]], "DoubleCut.from_shapes_and_element": [[531, "doublecut-from-shapes-and-element"]], "DoubleCut.planes_from_params_and_beam": [[532, "doublecut-planes-from-params-and-beam"]], "DoubleCut.scale": [[533, "doublecut-scale"]], "DoubleCut.scaled": [[534, "doublecut-scaled"]], "DoubleCut.sha256": [[535, "doublecut-sha256"]], "DoubleCut.to_json": [[536, "doublecut-to-json"]], "DoubleCut.to_jsonstring": [[537, "doublecut-to-jsonstring"]], "DoubleCut.validate_data": [[538, "doublecut-validate-data"]], "DovetailMortise": [[539, "dovetailmortise"]], "DovetailMortise.ToString": [[540, "dovetailmortise-tostring"]], "DovetailMortise.add_subprocessing": [[541, "dovetailmortise-add-subprocessing"]], "DovetailMortise.apply": [[542, "dovetailmortise-apply"]], "DovetailMortise.copy": [[543, "dovetailmortise-copy"]], "DovetailMortise.define_dovetail_tool": [[544, "dovetailmortise-define-dovetail-tool"]], "DovetailMortise.dovetail_cutting_frames_from_params_and_beam": [[545, "dovetailmortise-dovetail-cutting-frames-from-params-and-beam"]], "DovetailMortise.dovetail_volume_from_params_and_beam": [[546, "dovetailmortise-dovetail-volume-from-params-and-beam"]], "DovetailMortise.frame_from_params_and_beam": [[547, "dovetailmortise-frame-from-params-and-beam"]], "DovetailMortise.from_frame_and_beam": [[548, "dovetailmortise-from-frame-and-beam"]], "DovetailMortise.from_json": [[549, "dovetailmortise-from-json"]], "DovetailMortise.from_jsonstring": [[550, "dovetailmortise-from-jsonstring"]], "DovetailMortise.scale": [[551, "dovetailmortise-scale"]], "DovetailMortise.scaled": [[552, "dovetailmortise-scaled"]], "DovetailMortise.sha256": [[553, "dovetailmortise-sha256"]], "DovetailMortise.to_json": [[554, "dovetailmortise-to-json"]], "DovetailMortise.to_jsonstring": [[555, "dovetailmortise-to-jsonstring"]], "DovetailMortise.validate_data": [[556, "dovetailmortise-validate-data"]], "DovetailTenon": [[557, "dovetailtenon"]], "DovetailTenon.ToString": [[558, "dovetailtenon-tostring"]], "DovetailTenon.add_subprocessing": [[559, "dovetailtenon-add-subprocessing"]], "DovetailTenon.apply": [[560, "dovetailtenon-apply"]], "DovetailTenon.copy": [[561, "dovetailtenon-copy"]], "DovetailTenon.define_dovetail_tool": [[562, "dovetailtenon-define-dovetail-tool"]], "DovetailTenon.dovetail_cutting_frames_from_params_and_beam": [[563, "dovetailtenon-dovetail-cutting-frames-from-params-and-beam"]], "DovetailTenon.dovetail_volume_from_params_and_beam": [[564, "dovetailtenon-dovetail-volume-from-params-and-beam"]], "DovetailTenon.frame_from_params_and_beam": [[565, "dovetailtenon-frame-from-params-and-beam"]], "DovetailTenon.from_json": [[566, "dovetailtenon-from-json"]], "DovetailTenon.from_jsonstring": [[567, "dovetailtenon-from-jsonstring"]], "DovetailTenon.from_plane_and_beam": [[568, "dovetailtenon-from-plane-and-beam"]], "DovetailTenon.scale": [[569, "dovetailtenon-scale"]], "DovetailTenon.scaled": [[570, "dovetailtenon-scaled"]], "DovetailTenon.sha256": [[571, "dovetailtenon-sha256"]], "DovetailTenon.to_json": [[572, "dovetailtenon-to-json"]], "DovetailTenon.to_jsonstring": [[573, "dovetailtenon-to-jsonstring"]], "DovetailTenon.validate_data": [[574, "dovetailtenon-validate-data"]], "Drilling": [[575, "drilling"]], "Drilling.ToString": [[576, "drilling-tostring"]], "Drilling.add_subprocessing": [[577, "drilling-add-subprocessing"]], "Drilling.apply": [[578, "drilling-apply"]], "Drilling.copy": [[579, "drilling-copy"]], "Drilling.cylinder_from_params_and_element": [[580, "drilling-cylinder-from-params-and-element"]], "Drilling.from_json": [[581, "drilling-from-json"]], "Drilling.from_jsonstring": [[582, "drilling-from-jsonstring"]], "Drilling.from_line_and_element": [[583, "drilling-from-line-and-element"]], "Drilling.from_shapes_and_element": [[584, "drilling-from-shapes-and-element"]], "Drilling.scale": [[585, "drilling-scale"]], "Drilling.scaled": [[586, "drilling-scaled"]], "Drilling.sha256": [[587, "drilling-sha256"]], "Drilling.to_json": [[588, "drilling-to-json"]], "Drilling.to_jsonstring": [[589, "drilling-to-jsonstring"]], "Drilling.validate_data": [[590, "drilling-validate-data"]], "EdgePositionType": [[591, "edgepositiontype"]], "FrenchRidgeLap": [[592, "frenchridgelap"]], "FrenchRidgeLap.ToString": [[593, "frenchridgelap-tostring"]], "FrenchRidgeLap.add_subprocessing": [[594, "frenchridgelap-add-subprocessing"]], "FrenchRidgeLap.apply": [[595, "frenchridgelap-apply"]], "FrenchRidgeLap.copy": [[596, "frenchridgelap-copy"]], "FrenchRidgeLap.frame_from_params_and_beam": [[597, "frenchridgelap-frame-from-params-and-beam"]], "FrenchRidgeLap.from_beam_beam_and_plane": [[598, "frenchridgelap-from-beam-beam-and-plane"]], "FrenchRidgeLap.from_json": [[599, "frenchridgelap-from-json"]], "FrenchRidgeLap.from_jsonstring": [[600, "frenchridgelap-from-jsonstring"]], "FrenchRidgeLap.lap_volume_from_params_and_beam": [[601, "frenchridgelap-lap-volume-from-params-and-beam"]], "FrenchRidgeLap.scale": [[602, "frenchridgelap-scale"]], "FrenchRidgeLap.scaled": [[603, "frenchridgelap-scaled"]], "FrenchRidgeLap.sha256": [[604, "frenchridgelap-sha256"]], "FrenchRidgeLap.to_json": [[605, "frenchridgelap-to-json"]], "FrenchRidgeLap.to_jsonstring": [[606, "frenchridgelap-to-jsonstring"]], "FrenchRidgeLap.validate_data": [[607, "frenchridgelap-validate-data"]], "JackRafterCut": [[608, "jackraftercut"]], "JackRafterCut.ToString": [[609, "jackraftercut-tostring"]], "JackRafterCut.add_subprocessing": [[610, "jackraftercut-add-subprocessing"]], "JackRafterCut.apply": [[611, "jackraftercut-apply"]], "JackRafterCut.copy": [[612, "jackraftercut-copy"]], "JackRafterCut.from_json": [[613, "jackraftercut-from-json"]], "JackRafterCut.from_jsonstring": [[614, "jackraftercut-from-jsonstring"]], "JackRafterCut.from_plane_and_beam": [[615, "jackraftercut-from-plane-and-beam"]], "JackRafterCut.from_shapes_and_element": [[616, "jackraftercut-from-shapes-and-element"]], "JackRafterCut.plane_from_params_and_beam": [[617, "jackraftercut-plane-from-params-and-beam"]], "JackRafterCut.scale": [[618, "jackraftercut-scale"]], "JackRafterCut.scaled": [[619, "jackraftercut-scaled"]], "JackRafterCut.sha256": [[620, "jackraftercut-sha256"]], "JackRafterCut.to_json": [[621, "jackraftercut-to-json"]], "JackRafterCut.to_jsonstring": [[622, "jackraftercut-to-jsonstring"]], "JackRafterCut.validate_data": [[623, "jackraftercut-validate-data"]], "Lap": [[624, "lap"]], "Lap.ToString": [[625, "lap-tostring"]], "Lap.add_subprocessing": [[626, "lap-add-subprocessing"]], "Lap.apply": [[627, "lap-apply"]], "Lap.copy": [[628, "lap-copy"]], "Lap.from_json": [[629, "lap-from-json"]], "Lap.from_jsonstring": [[630, "lap-from-jsonstring"]], "Lap.from_plane_and_beam": [[631, "lap-from-plane-and-beam"]], "Lap.from_shapes_and_element": [[632, "lap-from-shapes-and-element"]], "Lap.from_volume_and_beam": [[633, "lap-from-volume-and-beam"]], "Lap.scale": [[634, "lap-scale"]], "Lap.scaled": [[635, "lap-scaled"]], "Lap.sha256": [[636, "lap-sha256"]], "Lap.to_json": [[637, "lap-to-json"]], "Lap.to_jsonstring": [[638, "lap-to-jsonstring"]], "Lap.validate_data": [[639, "lap-validate-data"]], "Lap.volume_from_params_and_beam": [[640, "lap-volume-from-params-and-beam"]], "LimitationTopType": [[641, "limitationtoptype"]], "LongitudinalCut": [[642, "longitudinalcut"]], "LongitudinalCut.ToString": [[643, "longitudinalcut-tostring"]], "LongitudinalCut.add_subprocessing": [[644, "longitudinalcut-add-subprocessing"]], "LongitudinalCut.apply": [[645, "longitudinalcut-apply"]], "LongitudinalCut.copy": [[646, "longitudinalcut-copy"]], "LongitudinalCut.from_json": [[647, "longitudinalcut-from-json"]], "LongitudinalCut.from_jsonstring": [[648, "longitudinalcut-from-jsonstring"]], "LongitudinalCut.from_plane_and_beam": [[649, "longitudinalcut-from-plane-and-beam"]], "LongitudinalCut.from_shapes_and_element": [[650, "longitudinalcut-from-shapes-and-element"]], "LongitudinalCut.plane_from_params_and_beam": [[651, "longitudinalcut-plane-from-params-and-beam"]], "LongitudinalCut.scaled": [[652, "longitudinalcut-scaled"]], "LongitudinalCut.sha256": [[653, "longitudinalcut-sha256"]], "LongitudinalCut.to_json": [[654, "longitudinalcut-to-json"]], "LongitudinalCut.to_jsonstring": [[655, "longitudinalcut-to-jsonstring"]], "LongitudinalCut.validate_data": [[656, "longitudinalcut-validate-data"]], "LongitudinalCut.volume_from_params_and_beam": [[657, "longitudinalcut-volume-from-params-and-beam"]], "MachiningLimits": [[658, "machininglimits"]], "Mortise": [[659, "mortise"]], "Mortise.ToString": [[660, "mortise-tostring"]], "Mortise.add_subprocessing": [[661, "mortise-add-subprocessing"]], "Mortise.apply": [[662, "mortise-apply"]], "Mortise.copy": [[663, "mortise-copy"]], "Mortise.frame_from_params_and_beam": [[664, "mortise-frame-from-params-and-beam"]], "Mortise.from_frame_and_beam": [[665, "mortise-from-frame-and-beam"]], "Mortise.from_json": [[666, "mortise-from-json"]], "Mortise.from_jsonstring": [[667, "mortise-from-jsonstring"]], "Mortise.scale": [[668, "mortise-scale"]], "Mortise.scaled": [[669, "mortise-scaled"]], "Mortise.sha256": [[670, "mortise-sha256"]], "Mortise.to_json": [[671, "mortise-to-json"]], "Mortise.to_jsonstring": [[672, "mortise-to-jsonstring"]], "Mortise.validate_data": [[673, "mortise-validate-data"]], "Mortise.volume_from_params_and_beam": [[674, "mortise-volume-from-params-and-beam"]], "OrientationType": [[675, "orientationtype"]], "Pocket": [[676, "pocket"]], "Pocket.ToString": [[677, "pocket-tostring"]], "Pocket.add_subprocessing": [[678, "pocket-add-subprocessing"]], "Pocket.apply": [[679, "pocket-apply"]], "Pocket.copy": [[680, "pocket-copy"]], "Pocket.from_json": [[681, "pocket-from-json"]], "Pocket.from_jsonstring": [[682, "pocket-from-jsonstring"]], "Pocket.from_shapes_and_element": [[683, "pocket-from-shapes-and-element"]], "Pocket.from_volume_and_element": [[684, "pocket-from-volume-and-element"]], "Pocket.scale": [[685, "pocket-scale"]], "Pocket.scaled": [[686, "pocket-scaled"]], "Pocket.sha256": [[687, "pocket-sha256"]], "Pocket.to_json": [[688, "pocket-to-json"]], "Pocket.to_jsonstring": [[689, "pocket-to-jsonstring"]], "Pocket.validate_data": [[690, "pocket-validate-data"]], "Pocket.volume_from_params_and_element": [[691, "pocket-volume-from-params-and-element"]], "Slot": [[692, "slot"]], "Slot.ToString": [[693, "slot-tostring"]], "Slot.add_subprocessing": [[694, "slot-add-subprocessing"]], "Slot.apply": [[695, "slot-apply"]], "Slot.copy": [[696, "slot-copy"]], "Slot.from_json": [[697, "slot-from-json"]], "Slot.from_jsonstring": [[698, "slot-from-jsonstring"]], "Slot.from_plane_and_beam": [[699, "slot-from-plane-and-beam"]], "Slot.scale": [[700, "slot-scale"]], "Slot.scaled": [[701, "slot-scaled"]], "Slot.sha256": [[702, "slot-sha256"]], "Slot.to_json": [[703, "slot-to-json"]], "Slot.to_jsonstring": [[704, "slot-to-jsonstring"]], "Slot.validate_data": [[705, "slot-validate-data"]], "StepJoint": [[706, "stepjoint"]], "StepJoint.ToString": [[707, "stepjoint-tostring"]], "StepJoint.add_subprocessing": [[708, "stepjoint-add-subprocessing"]], "StepJoint.add_tenon": [[709, "stepjoint-add-tenon"]], "StepJoint.apply": [[710, "stepjoint-apply"]], "StepJoint.copy": [[711, "stepjoint-copy"]], "StepJoint.from_json": [[712, "stepjoint-from-json"]], "StepJoint.from_jsonstring": [[713, "stepjoint-from-jsonstring"]], "StepJoint.from_plane_and_beam": [[714, "stepjoint-from-plane-and-beam"]], "StepJoint.planes_from_params_and_beam": [[715, "stepjoint-planes-from-params-and-beam"]], "StepJoint.scale": [[716, "stepjoint-scale"]], "StepJoint.scaled": [[717, "stepjoint-scaled"]], "StepJoint.sha256": [[718, "stepjoint-sha256"]], "StepJoint.tenon_volume_from_params_and_beam": [[719, "stepjoint-tenon-volume-from-params-and-beam"]], "StepJoint.to_json": [[720, "stepjoint-to-json"]], "StepJoint.to_jsonstring": [[721, "stepjoint-to-jsonstring"]], "StepJoint.validate_data": [[722, "stepjoint-validate-data"]], "StepJointNotch": [[723, "stepjointnotch"]], "StepJointNotch.ToString": [[724, "stepjointnotch-tostring"]], "StepJointNotch.add_mortise": [[725, "stepjointnotch-add-mortise"]], "StepJointNotch.add_subprocessing": [[726, "stepjointnotch-add-subprocessing"]], "StepJointNotch.apply": [[727, "stepjointnotch-apply"]], "StepJointNotch.copy": [[728, "stepjointnotch-copy"]], "StepJointNotch.from_json": [[729, "stepjointnotch-from-json"]], "StepJointNotch.from_jsonstring": [[730, "stepjointnotch-from-jsonstring"]], "StepJointNotch.from_plane_and_beam": [[731, "stepjointnotch-from-plane-and-beam"]], "StepJointNotch.mortise_volume_from_params_and_beam": [[732, "stepjointnotch-mortise-volume-from-params-and-beam"]], "StepJointNotch.planes_from_params_and_beam": [[733, "stepjointnotch-planes-from-params-and-beam"]], "StepJointNotch.scale": [[734, "stepjointnotch-scale"]], "StepJointNotch.scaled": [[735, "stepjointnotch-scaled"]], "StepJointNotch.sha256": [[736, "stepjointnotch-sha256"]], "StepJointNotch.to_json": [[737, "stepjointnotch-to-json"]], "StepJointNotch.to_jsonstring": [[738, "stepjointnotch-to-jsonstring"]], "StepJointNotch.validate_data": [[739, "stepjointnotch-validate-data"]], "StepShapeType": [[740, "stepshapetype"]], "Tenon": [[741, "tenon"]], "Tenon.ToString": [[742, "tenon-tostring"]], "Tenon.add_subprocessing": [[743, "tenon-add-subprocessing"]], "Tenon.apply": [[744, "tenon-apply"]], "Tenon.copy": [[745, "tenon-copy"]], "Tenon.frame_from_params_and_beam": [[746, "tenon-frame-from-params-and-beam"]], "Tenon.from_json": [[747, "tenon-from-json"]], "Tenon.from_jsonstring": [[748, "tenon-from-jsonstring"]], "Tenon.from_plane_and_beam": [[749, "tenon-from-plane-and-beam"]], "Tenon.scale": [[750, "tenon-scale"]], "Tenon.scaled": [[751, "tenon-scaled"]], "Tenon.sha256": [[752, "tenon-sha256"]], "Tenon.to_json": [[753, "tenon-to-json"]], "Tenon.to_jsonstring": [[754, "tenon-to-jsonstring"]], "Tenon.validate_data": [[755, "tenon-validate-data"]], "Tenon.volume_from_params_and_beam": [[756, "tenon-volume-from-params-and-beam"]], "TenonShapeType": [[757, "tenonshapetype"]], "add_gh_param": [[758, "add-gh-param"]], "clear_gh_params": [[759, "clear-gh-params"]], "get_leaf_subclasses": [[760, "get-leaf-subclasses"]], "item_input_valid": [[761, "item-input-valid"]], "list_input_valid": [[762, "list-input-valid"]], "manage_dynamic_params": [[763, "manage-dynamic-params"]], "rename_gh_input": [[764, "rename-gh-input"]], "TimberModel": [[765, "timbermodel"]], "TimberModel.ToString": [[766, "timbermodel-tostring"]], "TimberModel.add_element": [[767, "timbermodel-add-element"]], "TimberModel.add_elements": [[768, "timbermodel-add-elements"]], "TimberModel.add_group": [[769, "timbermodel-add-group"]], "TimberModel.add_group_element": [[770, "timbermodel-add-group-element"]], "TimberModel.add_interaction": [[771, "timbermodel-add-interaction"]], "TimberModel.add_joint": [[772, "timbermodel-add-joint"]], "TimberModel.add_material": [[773, "timbermodel-add-material"]], "TimberModel.assign_material": [[774, "timbermodel-assign-material"]], "TimberModel.compute_aabb": [[775, "timbermodel-compute-aabb"]], "TimberModel.compute_obb": [[776, "timbermodel-compute-obb"]], "TimberModel.connect_adjacent_beams": [[777, "timbermodel-connect-adjacent-beams"]], "TimberModel.connect_adjacent_walls": [[778, "timbermodel-connect-adjacent-walls"]], "TimberModel.copy": [[779, "timbermodel-copy"]], "TimberModel.element_by_guid": [[780, "timbermodel-element-by-guid"]], "TimberModel.elements": [[781, "timbermodel-elements"]], "TimberModel.elements_connected_by": [[782, "timbermodel-elements-connected-by"]], "TimberModel.from_json": [[783, "timbermodel-from-json"]], "TimberModel.from_jsonstring": [[784, "timbermodel-from-jsonstring"]], "TimberModel.get_elements_in_group": [[785, "timbermodel-get-elements-in-group"]], "TimberModel.get_interactions_for_element": [[786, "timbermodel-get-interactions-for-element"]], "TimberModel.has_element": [[787, "timbermodel-has-element"]], "TimberModel.has_group": [[788, "timbermodel-has-group"]], "TimberModel.has_interaction": [[789, "timbermodel-has-interaction"]], "TimberModel.has_material": [[790, "timbermodel-has-material"]], "TimberModel.interactions": [[791, "timbermodel-interactions"]], "TimberModel.materials": [[792, "timbermodel-materials"]], "TimberModel.process_joinery": [[793, "timbermodel-process-joinery"]], "TimberModel.remove_element": [[794, "timbermodel-remove-element"]], "TimberModel.remove_interaction": [[795, "timbermodel-remove-interaction"]], "TimberModel.remove_joint": [[796, "timbermodel-remove-joint"]], "TimberModel.rotate": [[797, "timbermodel-rotate"]], "TimberModel.rotated": [[798, "timbermodel-rotated"]], "TimberModel.scale": [[799, "timbermodel-scale"]], "TimberModel.scaled": [[800, "timbermodel-scaled"]], "TimberModel.set_topologies": [[801, "timbermodel-set-topologies"]], "TimberModel.sha256": [[802, "timbermodel-sha256"]], "TimberModel.to_json": [[803, "timbermodel-to-json"]], "TimberModel.to_jsonstring": [[804, "timbermodel-to-jsonstring"]], "TimberModel.transform": [[805, "timbermodel-transform"]], "TimberModel.transform_numpy": [[806, "timbermodel-transform-numpy"]], "TimberModel.transformed": [[807, "timbermodel-transformed"]], "TimberModel.transformed_numpy": [[808, "timbermodel-transformed-numpy"]], "TimberModel.translate": [[809, "timbermodel-translate"]], "TimberModel.translated": [[810, "timbermodel-translated"]], "TimberModel.validate_data": [[811, "timbermodel-validate-data"]], "Actor": [[812, "actor"]], "Actor.get_name": [[813, "actor-get-name"]], "BuildingPlan": [[814, "buildingplan"]], "BuildingPlan.ToString": [[815, "buildingplan-tostring"]], "BuildingPlan.add_step": [[816, "buildingplan-add-step"]], "BuildingPlan.copy": [[817, "buildingplan-copy"]], "BuildingPlan.from_json": [[818, "buildingplan-from-json"]], "BuildingPlan.from_jsonstring": [[819, "buildingplan-from-jsonstring"]], "BuildingPlan.sha256": [[820, "buildingplan-sha256"]], "BuildingPlan.to_json": [[821, "buildingplan-to-json"]], "BuildingPlan.to_jsonstring": [[822, "buildingplan-to-jsonstring"]], "BuildingPlan.validate_data": [[823, "buildingplan-validate-data"]], "BuildingPlanParser": [[824, "buildingplanparser"]], "BuildingPlanParser.parse": [[825, "buildingplanparser-parse"]], "BuildingPlanParser.serialize": [[826, "buildingplanparser-serialize"]], "Instruction": [[827, "instruction"]], "Instruction.ToString": [[828, "instruction-tostring"]], "Instruction.copy": [[829, "instruction-copy"]], "Instruction.from_json": [[830, "instruction-from-json"]], "Instruction.from_jsonstring": [[831, "instruction-from-jsonstring"]], "Instruction.sha256": [[832, "instruction-sha256"]], "Instruction.to_json": [[833, "instruction-to-json"]], "Instruction.to_jsonstring": [[834, "instruction-to-jsonstring"]], "Instruction.transform": [[835, "instruction-transform"]], "Instruction.validate_data": [[836, "instruction-validate-data"]], "LinearDimension": [[837, "lineardimension"]], "LinearDimension.ToString": [[838, "lineardimension-tostring"]], "LinearDimension.copy": [[839, "lineardimension-copy"]], "LinearDimension.from_json": [[840, "lineardimension-from-json"]], "LinearDimension.from_jsonstring": [[841, "lineardimension-from-jsonstring"]], "LinearDimension.sha256": [[842, "lineardimension-sha256"]], "LinearDimension.to_json": [[843, "lineardimension-to-json"]], "LinearDimension.to_jsonstring": [[844, "lineardimension-to-jsonstring"]], "LinearDimension.transform": [[845, "lineardimension-transform"]], "LinearDimension.validate_data": [[846, "lineardimension-validate-data"]], "Model3d": [[847, "model3d"]], "Model3d.ToString": [[848, "model3d-tostring"]], "Model3d.copy": [[849, "model3d-copy"]], "Model3d.from_json": [[850, "model3d-from-json"]], "Model3d.from_jsonstring": [[851, "model3d-from-jsonstring"]], "Model3d.sha256": [[852, "model3d-sha256"]], "Model3d.to_json": [[853, "model3d-to-json"]], "Model3d.to_jsonstring": [[854, "model3d-to-jsonstring"]], "Model3d.transform": [[855, "model3d-transform"]], "Model3d.validate_data": [[856, "model3d-validate-data"]], "SimpleSequenceGenerator": [[857, "simplesequencegenerator"]], "Step": [[858, "step"]], "Step.ToString": [[859, "step-tostring"]], "Step.copy": [[860, "step-copy"]], "Step.from_json": [[861, "step-from-json"]], "Step.from_jsonstring": [[862, "step-from-jsonstring"]], "Step.sha256": [[863, "step-sha256"]], "Step.to_json": [[864, "step-to-json"]], "Step.to_jsonstring": [[865, "step-to-jsonstring"]], "Step.transform": [[866, "step-transform"]], "Step.validate_data": [[867, "step-validate-data"]], "Text3d": [[868, "text3d"]], "Text3d.ToString": [[869, "text3d-tostring"]], "Text3d.copy": [[870, "text3d-copy"]], "Text3d.from_json": [[871, "text3d-from-json"]], "Text3d.from_jsonstring": [[872, "text3d-from-jsonstring"]], "Text3d.sha256": [[873, "text3d-sha256"]], "Text3d.to_json": [[874, "text3d-to-json"]], "Text3d.to_jsonstring": [[875, "text3d-to-jsonstring"]], "Text3d.transform": [[876, "text3d-transform"]], "Text3d.validate_data": [[877, "text3d-validate-data"]], "Citing": [[879, "citing"]], "Developer Guide": [[880, "developer-guide"]], "BTLx Contribution Guide": [[881, "btlx-contribution-guide"]], "Adding a new BTLx Processing": [[881, "adding-a-new-btlx-processing"]], "1. Identify the BTLx Processing and Parameters": [[881, "identify-the-btlx-processing-and-parameters"]], "2. Create the Processing Class": [[881, "create-the-processing-class"]], "Example:": [[881, "example"], [881, "id1"], [881, "id2"], [882, "example"], [882, "id1"], [882, "id2"]], "3. Add Alternative Constructors in Processing Class": [[881, "add-alternative-constructors-in-processing-class"]], "4. Add Geometry Generation Method in Processing Class": [[881, "add-geometry-generation-method-in-processing-class"]], "5. Update Module Imports": [[881, "update-module-imports"]], "6. Add Tests": [[881, "add-tests"]], "Key Considerations": [[881, "key-considerations"], [882, "key-considerations"]], "Joints Contribution Guide": [[882, "joints-contribution-guide"]], "Creating a New Joint": [[882, "creating-a-new-joint"]], "1. Define Joint Requirements and Analyze Element Relationships": [[882, "define-joint-requirements-and-analyze-element-relationships"]], "2. Create the Joint Class": [[882, "create-the-joint-class"]], "2. Extract Geometric Information": [[882, "extract-geometric-information"]], "3. Implement Core Methods": [[882, "implement-core-methods"]], "4. Update Module Imports": [[882, "update-module-imports"]], "5. Add Tests": [[882, "add-tests"]], "COMPAS Timber Documentation": [[883, "compas-timber-documentation"]], "Dependencies": [[883, "dependencies"]], "Table of Contents": [[883, "table-of-contents"]], "Indices and tables": [[883, "indices-and-tables"]], "Installation": [[884, "installation"]], "User": [[884, "user"]], "Developer": [[884, "developer"]], "License": [[885, "license"]], "Grasshopper plugin": [[886, "grasshopper-plugin"]], "Attributes": [[887, "attributes"]], "Standard Attributes": [[887, "standard-attributes"]], "Custom Attributes": [[887, "custom-attributes"]], "Check Attributes": [[887, "check-attributes"]], "Delete Attributes": [[887, "delete-attributes"]], "Beams": [[888, "beams"]], "DecomposeBeam": [[888, "decomposebeam"]], "FindBeamByRhinoGuid": [[888, "findbeambyrhinoguid"]], "Design": [[889, "design"]], "Surface Model": [[889, "surface-model"]], "Surface Model Options": [[889, "surface-model-options"]], "Custom Beam Dimensions": [[889, "custom-beam-dimensions"]], "Examples": [[890, "examples"]], "Fabrication": [[891, "fabrication"]], "Write BTLx": [[891, "write-btlx"]], "Features": [[892, "features"]], "Jack Rafter Cut Feature": [[892, "jack-rafter-cut-feature"]], "Double Cut Feature": [[892, "double-cut-feature"]], "Drilling Feature": [[892, "drilling-feature"]], "Installation Guide": [[893, "installation-guide"]], "Rhino 8 Installation": [[893, "rhino-8-installation"]], "Rhino 7 Installation": [[893, "rhino-7-installation"]], "Troubleshooting": [[893, "troubleshooting"]], "Joint Rules": [[894, "joint-rules"]], "Joint Rules Components": [[894, "joint-rules-components"]], "Default Joint Rules": [[894, "default-joint-rules"]], "Topological Joint Rules": [[894, "topological-joint-rules"]], "Category Joint Rules": [[894, "category-joint-rules"]], "Direct Joint Rules": [[894, "direct-joint-rules"]], "Surface Model Joint Override": [[894, "surface-model-joint-override"]], "Joint Types": [[894, "joint-types"]], "L-Butt": [[894, "l-butt"]], "L-Lap": [[894, "l-lap"]], "L-Miter": [[894, "l-miter"]], "French Ridge Lap": [[894, "french-ridge-lap"]], "Tenon and Mortise": [[894, "tenon-and-mortise"], [894, "id1"]], "T-Butt": [[894, "t-butt"]], "T-Lap": [[894, "t-lap"]], "T-Step": [[894, "t-step"]], "T-Birdsmouth": [[894, "t-birdsmouth"]], "T-Dovetail": [[894, "t-dovetail"]], "X-Lap": [[894, "x-lap"]], "Summary Table": [[894, "summary-table"]], "Model": [[895, "model"]], "Show": [[896, "show"]], "Show Beam Face Index": [[896, "show-beam-face-index"]], "Show Beam Index": [[896, "show-beam-index"]], "Show Surface Model Beam Types": [[896, "show-surface-model-beam-types"]], "Show Feature Errors": [[896, "show-feature-errors"]], "Show Joining Errors": [[896, "show-joining-errors"]], "Show Joint Types": [[896, "show-joint-types"]], "Show Topology Types": [[896, "show-topology-types"]], "Utils": [[897, "utils"]], "Bake with BoxMap": [[897, "bake-with-boxmap"]], "Workflow": [[898, "workflow"]]}, "indexentries": {"ballnodejoint (class in compas_timber.connections)": [[10, "compas_timber.connections.BallNodeJoint"]], "tostring() (compas_timber.connections.ballnodejoint method)": [[11, "compas_timber.connections.BallNodeJoint.ToString"]], "add_extensions() (compas_timber.connections.ballnodejoint method)": [[12, "compas_timber.connections.BallNodeJoint.add_extensions"]], "add_features() (compas_timber.connections.ballnodejoint method)": [[13, "compas_timber.connections.BallNodeJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ballnodejoint method)": [[14, "compas_timber.connections.BallNodeJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ballnodejoint method)": [[15, "compas_timber.connections.BallNodeJoint.copy"]], "create() (compas_timber.connections.ballnodejoint class method)": [[16, "compas_timber.connections.BallNodeJoint.create"]], "element_count_complies() (compas_timber.connections.ballnodejoint class method)": [[17, "compas_timber.connections.BallNodeJoint.element_count_complies"]], "from_json() (compas_timber.connections.ballnodejoint class method)": [[18, "compas_timber.connections.BallNodeJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ballnodejoint class method)": [[19, "compas_timber.connections.BallNodeJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.ballnodejoint class method)": [[20, "compas_timber.connections.BallNodeJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.ballnodejoint class method)": [[21, "compas_timber.connections.BallNodeJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.ballnodejoint method)": [[22, "compas_timber.connections.BallNodeJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ballnodejoint method)": [[23, "compas_timber.connections.BallNodeJoint.sha256"]], "to_json() (compas_timber.connections.ballnodejoint method)": [[24, "compas_timber.connections.BallNodeJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ballnodejoint method)": [[25, "compas_timber.connections.BallNodeJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ballnodejoint class method)": [[26, "compas_timber.connections.BallNodeJoint.validate_data"]], "beamgroupanalyzer (class in compas_timber.connections)": [[27, "compas_timber.connections.BeamGroupAnalyzer"]], "find() (compas_timber.connections.beamgroupanalyzer method)": [[28, "compas_timber.connections.BeamGroupAnalyzer.find"]], "cluster (class in compas_timber.connections)": [[29, "compas_timber.connections.Cluster"]], "compositeanalyzer (class in compas_timber.connections)": [[30, "compas_timber.connections.CompositeAnalyzer"]], "find() (compas_timber.connections.compositeanalyzer method)": [[31, "compas_timber.connections.CompositeAnalyzer.find"]], "from_model() (compas_timber.connections.compositeanalyzer class method)": [[32, "compas_timber.connections.CompositeAnalyzer.from_model"]], "connectionsolver (class in compas_timber.connections)": [[33, "compas_timber.connections.ConnectionSolver"]], "find_intersecting_pairs() (compas_timber.connections.connectionsolver class method)": [[34, "compas_timber.connections.ConnectionSolver.find_intersecting_pairs"]], "find_topology() (compas_timber.connections.connectionsolver method)": [[35, "compas_timber.connections.ConnectionSolver.find_topology"]], "find_wall_wall_topology() (compas_timber.connections.connectionsolver method)": [[36, "compas_timber.connections.ConnectionSolver.find_wall_wall_topology"]], "joint (class in compas_timber.connections)": [[37, "compas_timber.connections.Joint"]], "tostring() (compas_timber.connections.joint method)": [[38, "compas_timber.connections.Joint.ToString"]], "add_extensions() (compas_timber.connections.joint method)": [[39, "compas_timber.connections.Joint.add_extensions"]], "add_features() (compas_timber.connections.joint method)": [[40, "compas_timber.connections.Joint.add_features"]], "check_elements_compatibility() (compas_timber.connections.joint method)": [[41, "compas_timber.connections.Joint.check_elements_compatibility"]], "copy() (compas_timber.connections.joint method)": [[42, "compas_timber.connections.Joint.copy"]], "create() (compas_timber.connections.joint class method)": [[43, "compas_timber.connections.Joint.create"]], "element_count_complies() (compas_timber.connections.joint class method)": [[44, "compas_timber.connections.Joint.element_count_complies"]], "from_json() (compas_timber.connections.joint class method)": [[45, "compas_timber.connections.Joint.from_json"]], "from_jsonstring() (compas_timber.connections.joint class method)": [[46, "compas_timber.connections.Joint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.joint class method)": [[47, "compas_timber.connections.Joint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.joint class method)": [[48, "compas_timber.connections.Joint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.joint method)": [[49, "compas_timber.connections.Joint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.joint method)": [[50, "compas_timber.connections.Joint.sha256"]], "to_json() (compas_timber.connections.joint method)": [[51, "compas_timber.connections.Joint.to_json"]], "to_jsonstring() (compas_timber.connections.joint method)": [[52, "compas_timber.connections.Joint.to_jsonstring"]], "validate_data() (compas_timber.connections.joint class method)": [[53, "compas_timber.connections.Joint.validate_data"]], "jointtopology (class in compas_timber.connections)": [[54, "compas_timber.connections.JointTopology"]], "get_name() (compas_timber.connections.jointtopology class method)": [[55, "compas_timber.connections.JointTopology.get_name"]], "lbuttjoint (class in compas_timber.connections)": [[56, "compas_timber.connections.LButtJoint"]], "tostring() (compas_timber.connections.lbuttjoint method)": [[57, "compas_timber.connections.LButtJoint.ToString"]], "add_extensions() (compas_timber.connections.lbuttjoint method)": [[58, "compas_timber.connections.LButtJoint.add_extensions"]], "add_features() (compas_timber.connections.lbuttjoint method)": [[59, "compas_timber.connections.LButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lbuttjoint method)": [[60, "compas_timber.connections.LButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lbuttjoint method)": [[61, "compas_timber.connections.LButtJoint.copy"]], "create() (compas_timber.connections.lbuttjoint class method)": [[62, "compas_timber.connections.LButtJoint.create"]], "element_count_complies() (compas_timber.connections.lbuttjoint class method)": [[63, "compas_timber.connections.LButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.lbuttjoint class method)": [[64, "compas_timber.connections.LButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lbuttjoint class method)": [[65, "compas_timber.connections.LButtJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.lbuttjoint class method)": [[66, "compas_timber.connections.LButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.lbuttjoint class method)": [[67, "compas_timber.connections.LButtJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.lbuttjoint method)": [[68, "compas_timber.connections.LButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lbuttjoint method)": [[69, "compas_timber.connections.LButtJoint.sha256"]], "to_json() (compas_timber.connections.lbuttjoint method)": [[70, "compas_timber.connections.LButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lbuttjoint method)": [[71, "compas_timber.connections.LButtJoint.to_jsonstring"]], "update_beam_roles() (compas_timber.connections.lbuttjoint method)": [[72, "compas_timber.connections.LButtJoint.update_beam_roles"]], "validate_data() (compas_timber.connections.lbuttjoint class method)": [[73, "compas_timber.connections.LButtJoint.validate_data"]], "lfrenchridgelapjoint (class in compas_timber.connections)": [[74, "compas_timber.connections.LFrenchRidgeLapJoint"]], "tostring() (compas_timber.connections.lfrenchridgelapjoint method)": [[75, "compas_timber.connections.LFrenchRidgeLapJoint.ToString"]], "add_extensions() (compas_timber.connections.lfrenchridgelapjoint method)": [[76, "compas_timber.connections.LFrenchRidgeLapJoint.add_extensions"]], "add_features() (compas_timber.connections.lfrenchridgelapjoint method)": [[77, "compas_timber.connections.LFrenchRidgeLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lfrenchridgelapjoint method)": [[78, "compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lfrenchridgelapjoint method)": [[79, "compas_timber.connections.LFrenchRidgeLapJoint.copy"]], "create() (compas_timber.connections.lfrenchridgelapjoint class method)": [[80, "compas_timber.connections.LFrenchRidgeLapJoint.create"]], "element_count_complies() (compas_timber.connections.lfrenchridgelapjoint class method)": [[81, "compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lfrenchridgelapjoint class method)": [[82, "compas_timber.connections.LFrenchRidgeLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lfrenchridgelapjoint class method)": [[83, "compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.lfrenchridgelapjoint class method)": [[84, "compas_timber.connections.LFrenchRidgeLapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.lfrenchridgelapjoint class method)": [[85, "compas_timber.connections.LFrenchRidgeLapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.lfrenchridgelapjoint method)": [[86, "compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lfrenchridgelapjoint method)": [[87, "compas_timber.connections.LFrenchRidgeLapJoint.sha256"]], "to_json() (compas_timber.connections.lfrenchridgelapjoint method)": [[88, "compas_timber.connections.LFrenchRidgeLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lfrenchridgelapjoint method)": [[89, "compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lfrenchridgelapjoint class method)": [[90, "compas_timber.connections.LFrenchRidgeLapJoint.validate_data"]], "llapjoint (class in compas_timber.connections)": [[91, "compas_timber.connections.LLapJoint"]], "tostring() (compas_timber.connections.llapjoint method)": [[92, "compas_timber.connections.LLapJoint.ToString"]], "add_extensions() (compas_timber.connections.llapjoint method)": [[93, "compas_timber.connections.LLapJoint.add_extensions"]], "add_features() (compas_timber.connections.llapjoint method)": [[94, "compas_timber.connections.LLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.llapjoint method)": [[95, "compas_timber.connections.LLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.llapjoint method)": [[96, "compas_timber.connections.LLapJoint.copy"]], "create() (compas_timber.connections.llapjoint class method)": [[97, "compas_timber.connections.LLapJoint.create"]], "element_count_complies() (compas_timber.connections.llapjoint class method)": [[98, "compas_timber.connections.LLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.llapjoint class method)": [[99, "compas_timber.connections.LLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.llapjoint class method)": [[100, "compas_timber.connections.LLapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.llapjoint class method)": [[101, "compas_timber.connections.LLapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.llapjoint class method)": [[102, "compas_timber.connections.LLapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.llapjoint method)": [[103, "compas_timber.connections.LLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.llapjoint method)": [[104, "compas_timber.connections.LLapJoint.sha256"]], "to_json() (compas_timber.connections.llapjoint method)": [[105, "compas_timber.connections.LLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.llapjoint method)": [[106, "compas_timber.connections.LLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.llapjoint class method)": [[107, "compas_timber.connections.LLapJoint.validate_data"]], "lmiterjoint (class in compas_timber.connections)": [[108, "compas_timber.connections.LMiterJoint"]], "tostring() (compas_timber.connections.lmiterjoint method)": [[109, "compas_timber.connections.LMiterJoint.ToString"]], "add_extensions() (compas_timber.connections.lmiterjoint method)": [[110, "compas_timber.connections.LMiterJoint.add_extensions"]], "add_features() (compas_timber.connections.lmiterjoint method)": [[111, "compas_timber.connections.LMiterJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lmiterjoint method)": [[112, "compas_timber.connections.LMiterJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lmiterjoint method)": [[113, "compas_timber.connections.LMiterJoint.copy"]], "create() (compas_timber.connections.lmiterjoint class method)": [[114, "compas_timber.connections.LMiterJoint.create"]], "element_count_complies() (compas_timber.connections.lmiterjoint class method)": [[115, "compas_timber.connections.LMiterJoint.element_count_complies"]], "from_json() (compas_timber.connections.lmiterjoint class method)": [[116, "compas_timber.connections.LMiterJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lmiterjoint class method)": [[117, "compas_timber.connections.LMiterJoint.from_jsonstring"]], "get_cutoff_plane() (compas_timber.connections.lmiterjoint method)": [[118, "compas_timber.connections.LMiterJoint.get_cutoff_plane"]], "get_cutting_planes() (compas_timber.connections.lmiterjoint method)": [[119, "compas_timber.connections.LMiterJoint.get_cutting_planes"]], "promote_cluster() (compas_timber.connections.lmiterjoint class method)": [[120, "compas_timber.connections.LMiterJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.lmiterjoint class method)": [[121, "compas_timber.connections.LMiterJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.lmiterjoint method)": [[122, "compas_timber.connections.LMiterJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lmiterjoint method)": [[123, "compas_timber.connections.LMiterJoint.sha256"]], "to_json() (compas_timber.connections.lmiterjoint method)": [[124, "compas_timber.connections.LMiterJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lmiterjoint method)": [[125, "compas_timber.connections.LMiterJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lmiterjoint class method)": [[126, "compas_timber.connections.LMiterJoint.validate_data"]], "lapjoint (class in compas_timber.connections)": [[127, "compas_timber.connections.LapJoint"]], "tostring() (compas_timber.connections.lapjoint method)": [[128, "compas_timber.connections.LapJoint.ToString"]], "add_extensions() (compas_timber.connections.lapjoint method)": [[129, "compas_timber.connections.LapJoint.add_extensions"]], "add_features() (compas_timber.connections.lapjoint method)": [[130, "compas_timber.connections.LapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lapjoint method)": [[131, "compas_timber.connections.LapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lapjoint method)": [[132, "compas_timber.connections.LapJoint.copy"]], "create() (compas_timber.connections.lapjoint class method)": [[133, "compas_timber.connections.LapJoint.create"]], "element_count_complies() (compas_timber.connections.lapjoint class method)": [[134, "compas_timber.connections.LapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lapjoint class method)": [[135, "compas_timber.connections.LapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lapjoint class method)": [[136, "compas_timber.connections.LapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.lapjoint class method)": [[137, "compas_timber.connections.LapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.lapjoint class method)": [[138, "compas_timber.connections.LapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.lapjoint method)": [[139, "compas_timber.connections.LapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lapjoint method)": [[140, "compas_timber.connections.LapJoint.sha256"]], "to_json() (compas_timber.connections.lapjoint method)": [[141, "compas_timber.connections.LapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lapjoint method)": [[142, "compas_timber.connections.LapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lapjoint class method)": [[143, "compas_timber.connections.LapJoint.validate_data"]], "nbeamkdtreeanalyzer (class in compas_timber.connections)": [[144, "compas_timber.connections.NBeamKDTreeAnalyzer"]], "find() (compas_timber.connections.nbeamkdtreeanalyzer method)": [[145, "compas_timber.connections.NBeamKDTreeAnalyzer.find"]], "quadanalyzer() (in module compas_timber.connections)": [[146, "compas_timber.connections.QuadAnalyzer"]], "tbirdsmouthjoint (class in compas_timber.connections)": [[147, "compas_timber.connections.TBirdsmouthJoint"]], "tostring() (compas_timber.connections.tbirdsmouthjoint method)": [[148, "compas_timber.connections.TBirdsmouthJoint.ToString"]], "add_extensions() (compas_timber.connections.tbirdsmouthjoint method)": [[149, "compas_timber.connections.TBirdsmouthJoint.add_extensions"]], "add_features() (compas_timber.connections.tbirdsmouthjoint method)": [[150, "compas_timber.connections.TBirdsmouthJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbirdsmouthjoint method)": [[151, "compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbirdsmouthjoint method)": [[152, "compas_timber.connections.TBirdsmouthJoint.copy"]], "create() (compas_timber.connections.tbirdsmouthjoint class method)": [[153, "compas_timber.connections.TBirdsmouthJoint.create"]], "element_count_complies() (compas_timber.connections.tbirdsmouthjoint class method)": [[154, "compas_timber.connections.TBirdsmouthJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbirdsmouthjoint class method)": [[155, "compas_timber.connections.TBirdsmouthJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbirdsmouthjoint class method)": [[156, "compas_timber.connections.TBirdsmouthJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tbirdsmouthjoint class method)": [[157, "compas_timber.connections.TBirdsmouthJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tbirdsmouthjoint class method)": [[158, "compas_timber.connections.TBirdsmouthJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tbirdsmouthjoint method)": [[159, "compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbirdsmouthjoint method)": [[160, "compas_timber.connections.TBirdsmouthJoint.sha256"]], "to_json() (compas_timber.connections.tbirdsmouthjoint method)": [[161, "compas_timber.connections.TBirdsmouthJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbirdsmouthjoint method)": [[162, "compas_timber.connections.TBirdsmouthJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbirdsmouthjoint class method)": [[163, "compas_timber.connections.TBirdsmouthJoint.validate_data"]], "tbuttjoint (class in compas_timber.connections)": [[164, "compas_timber.connections.TButtJoint"]], "tostring() (compas_timber.connections.tbuttjoint method)": [[165, "compas_timber.connections.TButtJoint.ToString"]], "add_extensions() (compas_timber.connections.tbuttjoint method)": [[166, "compas_timber.connections.TButtJoint.add_extensions"]], "add_features() (compas_timber.connections.tbuttjoint method)": [[167, "compas_timber.connections.TButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbuttjoint method)": [[168, "compas_timber.connections.TButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbuttjoint method)": [[169, "compas_timber.connections.TButtJoint.copy"]], "create() (compas_timber.connections.tbuttjoint class method)": [[170, "compas_timber.connections.TButtJoint.create"]], "element_count_complies() (compas_timber.connections.tbuttjoint class method)": [[171, "compas_timber.connections.TButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbuttjoint class method)": [[172, "compas_timber.connections.TButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbuttjoint class method)": [[173, "compas_timber.connections.TButtJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tbuttjoint class method)": [[174, "compas_timber.connections.TButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tbuttjoint class method)": [[175, "compas_timber.connections.TButtJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tbuttjoint method)": [[176, "compas_timber.connections.TButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbuttjoint method)": [[177, "compas_timber.connections.TButtJoint.sha256"]], "to_json() (compas_timber.connections.tbuttjoint method)": [[178, "compas_timber.connections.TButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbuttjoint method)": [[179, "compas_timber.connections.TButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbuttjoint class method)": [[180, "compas_timber.connections.TButtJoint.validate_data"]], "tdovetailjoint (class in compas_timber.connections)": [[181, "compas_timber.connections.TDovetailJoint"]], "tostring() (compas_timber.connections.tdovetailjoint method)": [[182, "compas_timber.connections.TDovetailJoint.ToString"]], "add_extensions() (compas_timber.connections.tdovetailjoint method)": [[183, "compas_timber.connections.TDovetailJoint.add_extensions"]], "add_features() (compas_timber.connections.tdovetailjoint method)": [[184, "compas_timber.connections.TDovetailJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tdovetailjoint method)": [[185, "compas_timber.connections.TDovetailJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tdovetailjoint method)": [[186, "compas_timber.connections.TDovetailJoint.copy"]], "create() (compas_timber.connections.tdovetailjoint class method)": [[187, "compas_timber.connections.TDovetailJoint.create"]], "define_dovetail_tool() (compas_timber.connections.tdovetailjoint method)": [[188, "compas_timber.connections.TDovetailJoint.define_dovetail_tool"]], "element_count_complies() (compas_timber.connections.tdovetailjoint class method)": [[189, "compas_timber.connections.TDovetailJoint.element_count_complies"]], "from_json() (compas_timber.connections.tdovetailjoint class method)": [[190, "compas_timber.connections.TDovetailJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tdovetailjoint class method)": [[191, "compas_timber.connections.TDovetailJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tdovetailjoint class method)": [[192, "compas_timber.connections.TDovetailJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tdovetailjoint class method)": [[193, "compas_timber.connections.TDovetailJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tdovetailjoint method)": [[194, "compas_timber.connections.TDovetailJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tdovetailjoint method)": [[195, "compas_timber.connections.TDovetailJoint.sha256"]], "to_json() (compas_timber.connections.tdovetailjoint method)": [[196, "compas_timber.connections.TDovetailJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tdovetailjoint method)": [[197, "compas_timber.connections.TDovetailJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tdovetailjoint class method)": [[198, "compas_timber.connections.TDovetailJoint.validate_data"]], "tlapjoint (class in compas_timber.connections)": [[199, "compas_timber.connections.TLapJoint"]], "tostring() (compas_timber.connections.tlapjoint method)": [[200, "compas_timber.connections.TLapJoint.ToString"]], "add_extensions() (compas_timber.connections.tlapjoint method)": [[201, "compas_timber.connections.TLapJoint.add_extensions"]], "add_features() (compas_timber.connections.tlapjoint method)": [[202, "compas_timber.connections.TLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tlapjoint method)": [[203, "compas_timber.connections.TLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tlapjoint method)": [[204, "compas_timber.connections.TLapJoint.copy"]], "create() (compas_timber.connections.tlapjoint class method)": [[205, "compas_timber.connections.TLapJoint.create"]], "element_count_complies() (compas_timber.connections.tlapjoint class method)": [[206, "compas_timber.connections.TLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.tlapjoint class method)": [[207, "compas_timber.connections.TLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tlapjoint class method)": [[208, "compas_timber.connections.TLapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tlapjoint class method)": [[209, "compas_timber.connections.TLapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tlapjoint class method)": [[210, "compas_timber.connections.TLapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tlapjoint method)": [[211, "compas_timber.connections.TLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tlapjoint method)": [[212, "compas_timber.connections.TLapJoint.sha256"]], "to_json() (compas_timber.connections.tlapjoint method)": [[213, "compas_timber.connections.TLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tlapjoint method)": [[214, "compas_timber.connections.TLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tlapjoint class method)": [[215, "compas_timber.connections.TLapJoint.validate_data"]], "tstepjoint (class in compas_timber.connections)": [[216, "compas_timber.connections.TStepJoint"]], "tostring() (compas_timber.connections.tstepjoint method)": [[217, "compas_timber.connections.TStepJoint.ToString"]], "add_extensions() (compas_timber.connections.tstepjoint method)": [[218, "compas_timber.connections.TStepJoint.add_extensions"]], "add_features() (compas_timber.connections.tstepjoint method)": [[219, "compas_timber.connections.TStepJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tstepjoint method)": [[220, "compas_timber.connections.TStepJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tstepjoint method)": [[221, "compas_timber.connections.TStepJoint.copy"]], "create() (compas_timber.connections.tstepjoint class method)": [[222, "compas_timber.connections.TStepJoint.create"]], "element_count_complies() (compas_timber.connections.tstepjoint class method)": [[223, "compas_timber.connections.TStepJoint.element_count_complies"]], "from_json() (compas_timber.connections.tstepjoint class method)": [[224, "compas_timber.connections.TStepJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tstepjoint class method)": [[225, "compas_timber.connections.TStepJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tstepjoint class method)": [[226, "compas_timber.connections.TStepJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tstepjoint class method)": [[227, "compas_timber.connections.TStepJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tstepjoint method)": [[228, "compas_timber.connections.TStepJoint.restore_beams_from_keys"]], "set_step_depths() (compas_timber.connections.tstepjoint method)": [[229, "compas_timber.connections.TStepJoint.set_step_depths"]], "sha256() (compas_timber.connections.tstepjoint method)": [[230, "compas_timber.connections.TStepJoint.sha256"]], "to_json() (compas_timber.connections.tstepjoint method)": [[231, "compas_timber.connections.TStepJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tstepjoint method)": [[232, "compas_timber.connections.TStepJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tstepjoint class method)": [[233, "compas_timber.connections.TStepJoint.validate_data"]], "tenonmortisejoint (class in compas_timber.connections)": [[234, "compas_timber.connections.TenonMortiseJoint"]], "tostring() (compas_timber.connections.tenonmortisejoint method)": [[235, "compas_timber.connections.TenonMortiseJoint.ToString"]], "add_extensions() (compas_timber.connections.tenonmortisejoint method)": [[236, "compas_timber.connections.TenonMortiseJoint.add_extensions"]], "add_features() (compas_timber.connections.tenonmortisejoint method)": [[237, "compas_timber.connections.TenonMortiseJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tenonmortisejoint method)": [[238, "compas_timber.connections.TenonMortiseJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tenonmortisejoint method)": [[239, "compas_timber.connections.TenonMortiseJoint.copy"]], "create() (compas_timber.connections.tenonmortisejoint class method)": [[240, "compas_timber.connections.TenonMortiseJoint.create"]], "element_count_complies() (compas_timber.connections.tenonmortisejoint class method)": [[241, "compas_timber.connections.TenonMortiseJoint.element_count_complies"]], "from_json() (compas_timber.connections.tenonmortisejoint class method)": [[242, "compas_timber.connections.TenonMortiseJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tenonmortisejoint class method)": [[243, "compas_timber.connections.TenonMortiseJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tenonmortisejoint class method)": [[244, "compas_timber.connections.TenonMortiseJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tenonmortisejoint class method)": [[245, "compas_timber.connections.TenonMortiseJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tenonmortisejoint method)": [[246, "compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys"]], "set_default_values() (compas_timber.connections.tenonmortisejoint method)": [[247, "compas_timber.connections.TenonMortiseJoint.set_default_values"]], "sha256() (compas_timber.connections.tenonmortisejoint method)": [[248, "compas_timber.connections.TenonMortiseJoint.sha256"]], "to_json() (compas_timber.connections.tenonmortisejoint method)": [[249, "compas_timber.connections.TenonMortiseJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tenonmortisejoint method)": [[250, "compas_timber.connections.TenonMortiseJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tenonmortisejoint class method)": [[251, "compas_timber.connections.TenonMortiseJoint.validate_data"]], "tripletanalyzer() (in module compas_timber.connections)": [[252, "compas_timber.connections.TripletAnalyzer"]], "xlapjoint (class in compas_timber.connections)": [[253, "compas_timber.connections.XLapJoint"]], "tostring() (compas_timber.connections.xlapjoint method)": [[254, "compas_timber.connections.XLapJoint.ToString"]], "add_extensions() (compas_timber.connections.xlapjoint method)": [[255, "compas_timber.connections.XLapJoint.add_extensions"]], "add_features() (compas_timber.connections.xlapjoint method)": [[256, "compas_timber.connections.XLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xlapjoint method)": [[257, "compas_timber.connections.XLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xlapjoint method)": [[258, "compas_timber.connections.XLapJoint.copy"]], "create() (compas_timber.connections.xlapjoint class method)": [[259, "compas_timber.connections.XLapJoint.create"]], "element_count_complies() (compas_timber.connections.xlapjoint class method)": [[260, "compas_timber.connections.XLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.xlapjoint class method)": [[261, "compas_timber.connections.XLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xlapjoint class method)": [[262, "compas_timber.connections.XLapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.xlapjoint class method)": [[263, "compas_timber.connections.XLapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.xlapjoint class method)": [[264, "compas_timber.connections.XLapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.xlapjoint method)": [[265, "compas_timber.connections.XLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xlapjoint method)": [[266, "compas_timber.connections.XLapJoint.sha256"]], "to_json() (compas_timber.connections.xlapjoint method)": [[267, "compas_timber.connections.XLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xlapjoint method)": [[268, "compas_timber.connections.XLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xlapjoint class method)": [[269, "compas_timber.connections.XLapJoint.validate_data"]], "xnotchjoint (class in compas_timber.connections)": [[270, "compas_timber.connections.XNotchJoint"]], "tostring() (compas_timber.connections.xnotchjoint method)": [[271, "compas_timber.connections.XNotchJoint.ToString"]], "add_extensions() (compas_timber.connections.xnotchjoint method)": [[272, "compas_timber.connections.XNotchJoint.add_extensions"]], "add_features() (compas_timber.connections.xnotchjoint method)": [[273, "compas_timber.connections.XNotchJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xnotchjoint method)": [[274, "compas_timber.connections.XNotchJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xnotchjoint method)": [[275, "compas_timber.connections.XNotchJoint.copy"]], "create() (compas_timber.connections.xnotchjoint class method)": [[276, "compas_timber.connections.XNotchJoint.create"]], "element_count_complies() (compas_timber.connections.xnotchjoint class method)": [[277, "compas_timber.connections.XNotchJoint.element_count_complies"]], "from_json() (compas_timber.connections.xnotchjoint class method)": [[278, "compas_timber.connections.XNotchJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xnotchjoint class method)": [[279, "compas_timber.connections.XNotchJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.xnotchjoint class method)": [[280, "compas_timber.connections.XNotchJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.xnotchjoint class method)": [[281, "compas_timber.connections.XNotchJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.xnotchjoint method)": [[282, "compas_timber.connections.XNotchJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xnotchjoint method)": [[283, "compas_timber.connections.XNotchJoint.sha256"]], "to_json() (compas_timber.connections.xnotchjoint method)": [[284, "compas_timber.connections.XNotchJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xnotchjoint method)": [[285, "compas_timber.connections.XNotchJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xnotchjoint class method)": [[286, "compas_timber.connections.XNotchJoint.validate_data"]], "ybuttjoint (class in compas_timber.connections)": [[287, "compas_timber.connections.YButtJoint"]], "tostring() (compas_timber.connections.ybuttjoint method)": [[288, "compas_timber.connections.YButtJoint.ToString"]], "add_extensions() (compas_timber.connections.ybuttjoint method)": [[289, "compas_timber.connections.YButtJoint.add_extensions"]], "add_features() (compas_timber.connections.ybuttjoint method)": [[290, "compas_timber.connections.YButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ybuttjoint method)": [[291, "compas_timber.connections.YButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ybuttjoint method)": [[292, "compas_timber.connections.YButtJoint.copy"]], "create() (compas_timber.connections.ybuttjoint class method)": [[293, "compas_timber.connections.YButtJoint.create"]], "cross_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[294, "compas_timber.connections.YButtJoint.cross_beam_ref_side_index"]], "element_count_complies() (compas_timber.connections.ybuttjoint class method)": [[295, "compas_timber.connections.YButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.ybuttjoint class method)": [[296, "compas_timber.connections.YButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ybuttjoint class method)": [[297, "compas_timber.connections.YButtJoint.from_jsonstring"]], "get_miter_planes() (compas_timber.connections.ybuttjoint method)": [[298, "compas_timber.connections.YButtJoint.get_miter_planes"]], "main_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[299, "compas_timber.connections.YButtJoint.main_beam_ref_side_index"]], "promote_cluster() (compas_timber.connections.ybuttjoint class method)": [[300, "compas_timber.connections.YButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.ybuttjoint class method)": [[301, "compas_timber.connections.YButtJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.ybuttjoint method)": [[302, "compas_timber.connections.YButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ybuttjoint method)": [[303, "compas_timber.connections.YButtJoint.sha256"]], "to_json() (compas_timber.connections.ybuttjoint method)": [[304, "compas_timber.connections.YButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ybuttjoint method)": [[305, "compas_timber.connections.YButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ybuttjoint class method)": [[306, "compas_timber.connections.YButtJoint.validate_data"]], "find_neighboring_elements() (in module compas_timber.connections)": [[307, "compas_timber.connections.find_neighboring_elements"]], "categoryrule (class in compas_timber.design)": [[308, "compas_timber.design.CategoryRule"]], "tostring() (compas_timber.design.categoryrule method)": [[309, "compas_timber.design.CategoryRule.ToString"]], "comply() (compas_timber.design.categoryrule method)": [[310, "compas_timber.design.CategoryRule.comply"]], "get_category_rules() (compas_timber.design.categoryrule static method)": [[311, "compas_timber.design.CategoryRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.categoryrule static method)": [[312, "compas_timber.design.CategoryRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.categoryrule static method)": [[313, "compas_timber.design.CategoryRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.categoryrule static method)": [[314, "compas_timber.design.CategoryRule.joints_from_beams_and_rules"]], "reorder() (compas_timber.design.categoryrule method)": [[315, "compas_timber.design.CategoryRule.reorder"]], "debuginfomation (class in compas_timber.design)": [[316, "compas_timber.design.DebugInfomation"]], "tostring() (compas_timber.design.debuginfomation method)": [[317, "compas_timber.design.DebugInfomation.ToString"]], "add_fastener_error() (compas_timber.design.debuginfomation method)": [[318, "compas_timber.design.DebugInfomation.add_fastener_error"]], "add_feature_error() (compas_timber.design.debuginfomation method)": [[319, "compas_timber.design.DebugInfomation.add_feature_error"]], "add_joint_error() (compas_timber.design.debuginfomation method)": [[320, "compas_timber.design.DebugInfomation.add_joint_error"]], "directrule (class in compas_timber.design)": [[321, "compas_timber.design.DirectRule"]], "tostring() (compas_timber.design.directrule method)": [[322, "compas_timber.design.DirectRule.ToString"]], "comply() (compas_timber.design.directrule method)": [[323, "compas_timber.design.DirectRule.comply"]], "contains() (compas_timber.design.directrule method)": [[324, "compas_timber.design.DirectRule.contains"]], "get_category_rules() (compas_timber.design.directrule static method)": [[325, "compas_timber.design.DirectRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.directrule static method)": [[326, "compas_timber.design.DirectRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.directrule static method)": [[327, "compas_timber.design.DirectRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.directrule static method)": [[328, "compas_timber.design.DirectRule.joints_from_beams_and_rules"]], "featuredefinition (class in compas_timber.design)": [[329, "compas_timber.design.FeatureDefinition"]], "tostring() (compas_timber.design.featuredefinition method)": [[330, "compas_timber.design.FeatureDefinition.ToString"]], "jointdefinition (class in compas_timber.design)": [[331, "compas_timber.design.JointDefinition"]], "tostring() (compas_timber.design.jointdefinition method)": [[332, "compas_timber.design.JointDefinition.ToString"]], "is_identical() (compas_timber.design.jointdefinition method)": [[333, "compas_timber.design.JointDefinition.is_identical"]], "match() (compas_timber.design.jointdefinition method)": [[334, "compas_timber.design.JointDefinition.match"]], "jointrule (class in compas_timber.design)": [[335, "compas_timber.design.JointRule"]], "comply() (compas_timber.design.jointrule method)": [[336, "compas_timber.design.JointRule.comply"]], "get_category_rules() (compas_timber.design.jointrule static method)": [[337, "compas_timber.design.JointRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.jointrule static method)": [[338, "compas_timber.design.JointRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.jointrule static method)": [[339, "compas_timber.design.JointRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.jointrule static method)": [[340, "compas_timber.design.JointRule.joints_from_beams_and_rules"]], "surfacemodel (class in compas_timber.design)": [[341, "compas_timber.design.SurfaceModel"]], "beam_category_names() (compas_timber.design.surfacemodel class method)": [[342, "compas_timber.design.SurfaceModel.beam_category_names"]], "create_model() (compas_timber.design.surfacemodel method)": [[343, "compas_timber.design.SurfaceModel.create_model"]], "cull_overlaps() (compas_timber.design.surfacemodel method)": [[344, "compas_timber.design.SurfaceModel.cull_overlaps"]], "distance_between_elements() (compas_timber.design.surfacemodel method)": [[345, "compas_timber.design.SurfaceModel.distance_between_elements"]], "generate_frame() (compas_timber.design.surfacemodel method)": [[346, "compas_timber.design.SurfaceModel.generate_frame"]], "generate_perimeter_beams() (compas_timber.design.surfacemodel method)": [[347, "compas_timber.design.SurfaceModel.generate_perimeter_beams"]], "generate_plates() (compas_timber.design.surfacemodel method)": [[348, "compas_timber.design.SurfaceModel.generate_plates"]], "generate_stud_lines() (compas_timber.design.surfacemodel method)": [[349, "compas_timber.design.SurfaceModel.generate_stud_lines"]], "generate_studs() (compas_timber.design.surfacemodel method)": [[350, "compas_timber.design.SurfaceModel.generate_studs"]], "generate_windows() (compas_timber.design.surfacemodel method)": [[351, "compas_timber.design.SurfaceModel.generate_windows"]], "get_beam_intersections() (compas_timber.design.surfacemodel method)": [[352, "compas_timber.design.SurfaceModel.get_beam_intersections"]], "get_interior_segment_indices() (compas_timber.design.surfacemodel method)": [[353, "compas_timber.design.SurfaceModel.get_interior_segment_indices"]], "offset_elements() (compas_timber.design.surfacemodel method)": [[354, "compas_timber.design.SurfaceModel.offset_elements"]], "parse_loops() (compas_timber.design.surfacemodel method)": [[355, "compas_timber.design.SurfaceModel.parse_loops"]], "trim_jack_studs() (compas_timber.design.surfacemodel method)": [[356, "compas_timber.design.SurfaceModel.trim_jack_studs"]], "trim_king_studs() (compas_timber.design.surfacemodel method)": [[357, "compas_timber.design.SurfaceModel.trim_king_studs"]], "trim_studs() (compas_timber.design.surfacemodel method)": [[358, "compas_timber.design.SurfaceModel.trim_studs"]], "topologyrule (class in compas_timber.design)": [[359, "compas_timber.design.TopologyRule"]], "tostring() (compas_timber.design.topologyrule method)": [[360, "compas_timber.design.TopologyRule.ToString"]], "comply() (compas_timber.design.topologyrule method)": [[361, "compas_timber.design.TopologyRule.comply"]], "get_category_rules() (compas_timber.design.topologyrule static method)": [[362, "compas_timber.design.TopologyRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.topologyrule static method)": [[363, "compas_timber.design.TopologyRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.topologyrule static method)": [[364, "compas_timber.design.TopologyRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.topologyrule static method)": [[365, "compas_timber.design.TopologyRule.joints_from_beams_and_rules"]], "guess_joint_topology_2beams() (in module compas_timber.design)": [[366, "compas_timber.design.guess_joint_topology_2beams"]], "set_default_joints() (in module compas_timber.design)": [[367, "compas_timber.design.set_default_joints"]], "beam (class in compas_timber.elements)": [[368, "compas_timber.elements.Beam"]], "tostring() (compas_timber.elements.beam method)": [[369, "compas_timber.elements.Beam.ToString"]], "add_blank_extension() (compas_timber.elements.beam method)": [[370, "compas_timber.elements.Beam.add_blank_extension"]], "add_feature() (compas_timber.elements.beam method)": [[371, "compas_timber.elements.Beam.add_feature"]], "add_features() (compas_timber.elements.beam method)": [[372, "compas_timber.elements.Beam.add_features"]], "back_side() (compas_timber.elements.beam method)": [[373, "compas_timber.elements.Beam.back_side"]], "compute_aabb() (compas_timber.elements.beam method)": [[374, "compas_timber.elements.Beam.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.beam method)": [[375, "compas_timber.elements.Beam.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.beam method)": [[376, "compas_timber.elements.Beam.compute_geometry"]], "compute_obb() (compas_timber.elements.beam method)": [[377, "compas_timber.elements.Beam.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.beam method)": [[378, "compas_timber.elements.Beam.compute_worldtransformation"]], "copy() (compas_timber.elements.beam method)": [[379, "compas_timber.elements.Beam.copy"]], "endpoint_closest_to_point() (compas_timber.elements.beam method)": [[380, "compas_timber.elements.Beam.endpoint_closest_to_point"]], "extension_to_plane() (compas_timber.elements.beam method)": [[381, "compas_timber.elements.Beam.extension_to_plane"]], "from_centerline() (compas_timber.elements.beam class method)": [[382, "compas_timber.elements.Beam.from_centerline"]], "from_endpoints() (compas_timber.elements.beam class method)": [[383, "compas_timber.elements.Beam.from_endpoints"]], "from_json() (compas_timber.elements.beam class method)": [[384, "compas_timber.elements.Beam.from_json"]], "from_jsonstring() (compas_timber.elements.beam class method)": [[385, "compas_timber.elements.Beam.from_jsonstring"]], "front_side() (compas_timber.elements.beam method)": [[386, "compas_timber.elements.Beam.front_side"]], "get_dimensions_relative_to_side() (compas_timber.elements.beam method)": [[387, "compas_timber.elements.Beam.get_dimensions_relative_to_side"]], "opp_side() (compas_timber.elements.beam method)": [[388, "compas_timber.elements.Beam.opp_side"]], "remove_blank_extension() (compas_timber.elements.beam method)": [[389, "compas_timber.elements.Beam.remove_blank_extension"]], "remove_features() (compas_timber.elements.beam method)": [[390, "compas_timber.elements.Beam.remove_features"]], "reset() (compas_timber.elements.beam method)": [[391, "compas_timber.elements.Beam.reset"]], "sha256() (compas_timber.elements.beam method)": [[392, "compas_timber.elements.Beam.sha256"]], "side_as_surface() (compas_timber.elements.beam method)": [[393, "compas_timber.elements.Beam.side_as_surface"]], "to_json() (compas_timber.elements.beam method)": [[394, "compas_timber.elements.Beam.to_json"]], "to_jsonstring() (compas_timber.elements.beam method)": [[395, "compas_timber.elements.Beam.to_jsonstring"]], "transform() (compas_timber.elements.beam method)": [[396, "compas_timber.elements.Beam.transform"]], "transformed() (compas_timber.elements.beam method)": [[397, "compas_timber.elements.Beam.transformed"]], "validate_data() (compas_timber.elements.beam class method)": [[398, "compas_timber.elements.Beam.validate_data"]], "fastener (class in compas_timber.elements)": [[399, "compas_timber.elements.Fastener"]], "tostring() (compas_timber.elements.fastener method)": [[400, "compas_timber.elements.Fastener.ToString"]], "add_feature() (compas_timber.elements.fastener method)": [[401, "compas_timber.elements.Fastener.add_feature"]], "add_features() (compas_timber.elements.fastener method)": [[402, "compas_timber.elements.Fastener.add_features"]], "compute_aabb() (compas_timber.elements.fastener method)": [[403, "compas_timber.elements.Fastener.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.fastener method)": [[404, "compas_timber.elements.Fastener.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.fastener method)": [[405, "compas_timber.elements.Fastener.compute_geometry"]], "compute_obb() (compas_timber.elements.fastener method)": [[406, "compas_timber.elements.Fastener.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.fastener method)": [[407, "compas_timber.elements.Fastener.compute_worldtransformation"]], "copy() (compas_timber.elements.fastener method)": [[408, "compas_timber.elements.Fastener.copy"]], "from_json() (compas_timber.elements.fastener class method)": [[409, "compas_timber.elements.Fastener.from_json"]], "from_jsonstring() (compas_timber.elements.fastener class method)": [[410, "compas_timber.elements.Fastener.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.fastener method)": [[411, "compas_timber.elements.Fastener.remove_blank_extension"]], "remove_features() (compas_timber.elements.fastener method)": [[412, "compas_timber.elements.Fastener.remove_features"]], "reset() (compas_timber.elements.fastener method)": [[413, "compas_timber.elements.Fastener.reset"]], "sha256() (compas_timber.elements.fastener method)": [[414, "compas_timber.elements.Fastener.sha256"]], "to_json() (compas_timber.elements.fastener method)": [[415, "compas_timber.elements.Fastener.to_json"]], "to_jsonstring() (compas_timber.elements.fastener method)": [[416, "compas_timber.elements.Fastener.to_jsonstring"]], "transform() (compas_timber.elements.fastener method)": [[417, "compas_timber.elements.Fastener.transform"]], "transformed() (compas_timber.elements.fastener method)": [[418, "compas_timber.elements.Fastener.transformed"]], "validate_data() (compas_timber.elements.fastener class method)": [[419, "compas_timber.elements.Fastener.validate_data"]], "fastenertimberinterface (class in compas_timber.elements)": [[420, "compas_timber.elements.FastenerTimberInterface"]], "tostring() (compas_timber.elements.fastenertimberinterface method)": [[421, "compas_timber.elements.FastenerTimberInterface.ToString"]], "copy() (compas_timber.elements.fastenertimberinterface method)": [[422, "compas_timber.elements.FastenerTimberInterface.copy"]], "from_json() (compas_timber.elements.fastenertimberinterface class method)": [[423, "compas_timber.elements.FastenerTimberInterface.from_json"]], "from_jsonstring() (compas_timber.elements.fastenertimberinterface class method)": [[424, "compas_timber.elements.FastenerTimberInterface.from_jsonstring"]], "get_features() (compas_timber.elements.fastenertimberinterface method)": [[425, "compas_timber.elements.FastenerTimberInterface.get_features"]], "sha256() (compas_timber.elements.fastenertimberinterface method)": [[426, "compas_timber.elements.FastenerTimberInterface.sha256"]], "to_json() (compas_timber.elements.fastenertimberinterface method)": [[427, "compas_timber.elements.FastenerTimberInterface.to_json"]], "to_jsonstring() (compas_timber.elements.fastenertimberinterface method)": [[428, "compas_timber.elements.FastenerTimberInterface.to_jsonstring"]], "validate_data() (compas_timber.elements.fastenertimberinterface class method)": [[429, "compas_timber.elements.FastenerTimberInterface.validate_data"]], "plate (class in compas_timber.elements)": [[430, "compas_timber.elements.Plate"]], "tostring() (compas_timber.elements.plate method)": [[431, "compas_timber.elements.Plate.ToString"]], "add_feature() (compas_timber.elements.plate method)": [[432, "compas_timber.elements.Plate.add_feature"]], "add_features() (compas_timber.elements.plate method)": [[433, "compas_timber.elements.Plate.add_features"]], "add_interface() (compas_timber.elements.plate method)": [[434, "compas_timber.elements.Plate.add_interface"]], "check_outlines() (compas_timber.elements.plate method)": [[435, "compas_timber.elements.Plate.check_outlines"]], "compute_aabb() (compas_timber.elements.plate method)": [[436, "compas_timber.elements.Plate.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.plate method)": [[437, "compas_timber.elements.Plate.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.plate method)": [[438, "compas_timber.elements.Plate.compute_geometry"]], "compute_obb() (compas_timber.elements.plate method)": [[439, "compas_timber.elements.Plate.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.plate method)": [[440, "compas_timber.elements.Plate.compute_worldtransformation"]], "copy() (compas_timber.elements.plate method)": [[441, "compas_timber.elements.Plate.copy"]], "from_brep() (compas_timber.elements.plate class method)": [[442, "compas_timber.elements.Plate.from_brep"]], "from_json() (compas_timber.elements.plate class method)": [[443, "compas_timber.elements.Plate.from_json"]], "from_jsonstring() (compas_timber.elements.plate class method)": [[444, "compas_timber.elements.Plate.from_jsonstring"]], "from_outline_thickness() (compas_timber.elements.plate class method)": [[445, "compas_timber.elements.Plate.from_outline_thickness"]], "opp_side() (compas_timber.elements.plate method)": [[446, "compas_timber.elements.Plate.opp_side"]], "remove_blank_extension() (compas_timber.elements.plate method)": [[447, "compas_timber.elements.Plate.remove_blank_extension"]], "remove_features() (compas_timber.elements.plate method)": [[448, "compas_timber.elements.Plate.remove_features"]], "reset() (compas_timber.elements.plate method)": [[449, "compas_timber.elements.Plate.reset"]], "sha256() (compas_timber.elements.plate method)": [[450, "compas_timber.elements.Plate.sha256"]], "side_as_surface() (compas_timber.elements.plate method)": [[451, "compas_timber.elements.Plate.side_as_surface"]], "to_json() (compas_timber.elements.plate method)": [[452, "compas_timber.elements.Plate.to_json"]], "to_jsonstring() (compas_timber.elements.plate method)": [[453, "compas_timber.elements.Plate.to_jsonstring"]], "transform() (compas_timber.elements.plate method)": [[454, "compas_timber.elements.Plate.transform"]], "transformed() (compas_timber.elements.plate method)": [[455, "compas_timber.elements.Plate.transformed"]], "validate_data() (compas_timber.elements.plate class method)": [[456, "compas_timber.elements.Plate.validate_data"]], "timberelement (class in compas_timber.elements)": [[457, "compas_timber.elements.TimberElement"]], "tostring() (compas_timber.elements.timberelement method)": [[458, "compas_timber.elements.TimberElement.ToString"]], "add_feature() (compas_timber.elements.timberelement method)": [[459, "compas_timber.elements.TimberElement.add_feature"]], "add_features() (compas_timber.elements.timberelement method)": [[460, "compas_timber.elements.TimberElement.add_features"]], "compute_aabb() (compas_timber.elements.timberelement method)": [[461, "compas_timber.elements.TimberElement.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.timberelement method)": [[462, "compas_timber.elements.TimberElement.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.timberelement method)": [[463, "compas_timber.elements.TimberElement.compute_geometry"]], "compute_obb() (compas_timber.elements.timberelement method)": [[464, "compas_timber.elements.TimberElement.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.timberelement method)": [[465, "compas_timber.elements.TimberElement.compute_worldtransformation"]], "copy() (compas_timber.elements.timberelement method)": [[466, "compas_timber.elements.TimberElement.copy"]], "from_json() (compas_timber.elements.timberelement class method)": [[467, "compas_timber.elements.TimberElement.from_json"]], "from_jsonstring() (compas_timber.elements.timberelement class method)": [[468, "compas_timber.elements.TimberElement.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.timberelement method)": [[469, "compas_timber.elements.TimberElement.remove_blank_extension"]], "remove_features() (compas_timber.elements.timberelement method)": [[470, "compas_timber.elements.TimberElement.remove_features"]], "reset() (compas_timber.elements.timberelement method)": [[471, "compas_timber.elements.TimberElement.reset"]], "sha256() (compas_timber.elements.timberelement method)": [[472, "compas_timber.elements.TimberElement.sha256"]], "to_json() (compas_timber.elements.timberelement method)": [[473, "compas_timber.elements.TimberElement.to_json"]], "to_jsonstring() (compas_timber.elements.timberelement method)": [[474, "compas_timber.elements.TimberElement.to_jsonstring"]], "transform() (compas_timber.elements.timberelement method)": [[475, "compas_timber.elements.TimberElement.transform"]], "transformed() (compas_timber.elements.timberelement method)": [[476, "compas_timber.elements.TimberElement.transformed"]], "validate_data() (compas_timber.elements.timberelement class method)": [[477, "compas_timber.elements.TimberElement.validate_data"]], "wall (class in compas_timber.elements)": [[478, "compas_timber.elements.Wall"]], "tostring() (compas_timber.elements.wall method)": [[479, "compas_timber.elements.Wall.ToString"]], "add_feature() (compas_timber.elements.wall method)": [[480, "compas_timber.elements.Wall.add_feature"]], "add_features() (compas_timber.elements.wall method)": [[481, "compas_timber.elements.Wall.add_features"]], "compute_aabb() (compas_timber.elements.wall method)": [[482, "compas_timber.elements.Wall.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.wall method)": [[483, "compas_timber.elements.Wall.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.wall method)": [[484, "compas_timber.elements.Wall.compute_geometry"]], "compute_obb() (compas_timber.elements.wall method)": [[485, "compas_timber.elements.Wall.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.wall method)": [[486, "compas_timber.elements.Wall.compute_worldtransformation"]], "copy() (compas_timber.elements.wall method)": [[487, "compas_timber.elements.Wall.copy"]], "from_boundary() (compas_timber.elements.wall class method)": [[488, "compas_timber.elements.Wall.from_boundary"]], "from_brep() (compas_timber.elements.wall class method)": [[489, "compas_timber.elements.Wall.from_brep"]], "from_json() (compas_timber.elements.wall class method)": [[490, "compas_timber.elements.Wall.from_json"]], "from_jsonstring() (compas_timber.elements.wall class method)": [[491, "compas_timber.elements.Wall.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.wall method)": [[492, "compas_timber.elements.Wall.remove_blank_extension"]], "remove_features() (compas_timber.elements.wall method)": [[493, "compas_timber.elements.Wall.remove_features"]], "reset() (compas_timber.elements.wall method)": [[494, "compas_timber.elements.Wall.reset"]], "rotate() (compas_timber.elements.wall method)": [[495, "compas_timber.elements.Wall.rotate"]], "sha256() (compas_timber.elements.wall method)": [[496, "compas_timber.elements.Wall.sha256"]], "to_json() (compas_timber.elements.wall method)": [[497, "compas_timber.elements.Wall.to_json"]], "to_jsonstring() (compas_timber.elements.wall method)": [[498, "compas_timber.elements.Wall.to_jsonstring"]], "transform() (compas_timber.elements.wall method)": [[499, "compas_timber.elements.Wall.transform"]], "transformed() (compas_timber.elements.wall method)": [[500, "compas_timber.elements.Wall.transformed"]], "validate_data() (compas_timber.elements.wall class method)": [[501, "compas_timber.elements.Wall.validate_data"]], "beamjoiningerror": [[502, "compas_timber.errors.BeamJoiningError"]], "fastenerapplicationerror": [[503, "compas_timber.errors.FastenerApplicationError"]], "featureapplicationerror": [[504, "compas_timber.errors.FeatureApplicationError"]], "btlxpart (class in compas_timber.fabrication)": [[505, "compas_timber.fabrication.BTLxPart"]], "et_point_vals() (compas_timber.fabrication.btlxpart method)": [[506, "compas_timber.fabrication.BTLxPart.et_point_vals"]], "ref_side_from_face() (compas_timber.fabrication.btlxpart method)": [[507, "compas_timber.fabrication.BTLxPart.ref_side_from_face"]], "btlxprocessing (class in compas_timber.fabrication)": [[508, "compas_timber.fabrication.BTLxProcessing"]], "tostring() (compas_timber.fabrication.btlxprocessing method)": [[509, "compas_timber.fabrication.BTLxProcessing.ToString"]], "add_subprocessing() (compas_timber.fabrication.btlxprocessing method)": [[510, "compas_timber.fabrication.BTLxProcessing.add_subprocessing"]], "copy() (compas_timber.fabrication.btlxprocessing method)": [[511, "compas_timber.fabrication.BTLxProcessing.copy"]], "from_json() (compas_timber.fabrication.btlxprocessing class method)": [[512, "compas_timber.fabrication.BTLxProcessing.from_json"]], "from_jsonstring() (compas_timber.fabrication.btlxprocessing class method)": [[513, "compas_timber.fabrication.BTLxProcessing.from_jsonstring"]], "scaled() (compas_timber.fabrication.btlxprocessing method)": [[514, "compas_timber.fabrication.BTLxProcessing.scaled"]], "sha256() (compas_timber.fabrication.btlxprocessing method)": [[515, "compas_timber.fabrication.BTLxProcessing.sha256"]], "to_json() (compas_timber.fabrication.btlxprocessing method)": [[516, "compas_timber.fabrication.BTLxProcessing.to_json"]], "to_jsonstring() (compas_timber.fabrication.btlxprocessing method)": [[517, "compas_timber.fabrication.BTLxProcessing.to_jsonstring"]], "validate_data() (compas_timber.fabrication.btlxprocessing class method)": [[518, "compas_timber.fabrication.BTLxProcessing.validate_data"]], "btlxwriter (class in compas_timber.fabrication)": [[519, "compas_timber.fabrication.BTLxWriter"]], "model_to_xml() (compas_timber.fabrication.btlxwriter method)": [[520, "compas_timber.fabrication.BTLxWriter.model_to_xml"]], "register_type_serializer() (compas_timber.fabrication.btlxwriter class method)": [[521, "compas_timber.fabrication.BTLxWriter.register_type_serializer"]], "write() (compas_timber.fabrication.btlxwriter method)": [[522, "compas_timber.fabrication.BTLxWriter.write"]], "doublecut (class in compas_timber.fabrication)": [[523, "compas_timber.fabrication.DoubleCut"]], "tostring() (compas_timber.fabrication.doublecut method)": [[524, "compas_timber.fabrication.DoubleCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.doublecut method)": [[525, "compas_timber.fabrication.DoubleCut.add_subprocessing"]], "apply() (compas_timber.fabrication.doublecut method)": [[526, "compas_timber.fabrication.DoubleCut.apply"]], "copy() (compas_timber.fabrication.doublecut method)": [[527, "compas_timber.fabrication.DoubleCut.copy"]], "from_json() (compas_timber.fabrication.doublecut class method)": [[528, "compas_timber.fabrication.DoubleCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.doublecut class method)": [[529, "compas_timber.fabrication.DoubleCut.from_jsonstring"]], "from_planes_and_beam() (compas_timber.fabrication.doublecut class method)": [[530, "compas_timber.fabrication.DoubleCut.from_planes_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.doublecut class method)": [[531, "compas_timber.fabrication.DoubleCut.from_shapes_and_element"]], "planes_from_params_and_beam() (compas_timber.fabrication.doublecut method)": [[532, "compas_timber.fabrication.DoubleCut.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.doublecut method)": [[533, "compas_timber.fabrication.DoubleCut.scale"]], "scaled() (compas_timber.fabrication.doublecut method)": [[534, "compas_timber.fabrication.DoubleCut.scaled"]], "sha256() (compas_timber.fabrication.doublecut method)": [[535, "compas_timber.fabrication.DoubleCut.sha256"]], "to_json() (compas_timber.fabrication.doublecut method)": [[536, "compas_timber.fabrication.DoubleCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.doublecut method)": [[537, "compas_timber.fabrication.DoubleCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.doublecut class method)": [[538, "compas_timber.fabrication.DoubleCut.validate_data"]], "dovetailmortise (class in compas_timber.fabrication)": [[539, "compas_timber.fabrication.DovetailMortise"]], "tostring() (compas_timber.fabrication.dovetailmortise method)": [[540, "compas_timber.fabrication.DovetailMortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailmortise method)": [[541, "compas_timber.fabrication.DovetailMortise.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailmortise method)": [[542, "compas_timber.fabrication.DovetailMortise.apply"]], "copy() (compas_timber.fabrication.dovetailmortise method)": [[543, "compas_timber.fabrication.DovetailMortise.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailmortise class method)": [[544, "compas_timber.fabrication.DovetailMortise.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[545, "compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[546, "compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[547, "compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.dovetailmortise class method)": [[548, "compas_timber.fabrication.DovetailMortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.dovetailmortise class method)": [[549, "compas_timber.fabrication.DovetailMortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailmortise class method)": [[550, "compas_timber.fabrication.DovetailMortise.from_jsonstring"]], "scale() (compas_timber.fabrication.dovetailmortise method)": [[551, "compas_timber.fabrication.DovetailMortise.scale"]], "scaled() (compas_timber.fabrication.dovetailmortise method)": [[552, "compas_timber.fabrication.DovetailMortise.scaled"]], "sha256() (compas_timber.fabrication.dovetailmortise method)": [[553, "compas_timber.fabrication.DovetailMortise.sha256"]], "to_json() (compas_timber.fabrication.dovetailmortise method)": [[554, "compas_timber.fabrication.DovetailMortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailmortise method)": [[555, "compas_timber.fabrication.DovetailMortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailmortise class method)": [[556, "compas_timber.fabrication.DovetailMortise.validate_data"]], "dovetailtenon (class in compas_timber.fabrication)": [[557, "compas_timber.fabrication.DovetailTenon"]], "tostring() (compas_timber.fabrication.dovetailtenon method)": [[558, "compas_timber.fabrication.DovetailTenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailtenon method)": [[559, "compas_timber.fabrication.DovetailTenon.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailtenon method)": [[560, "compas_timber.fabrication.DovetailTenon.apply"]], "copy() (compas_timber.fabrication.dovetailtenon method)": [[561, "compas_timber.fabrication.DovetailTenon.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailtenon class method)": [[562, "compas_timber.fabrication.DovetailTenon.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[563, "compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[564, "compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[565, "compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.dovetailtenon class method)": [[566, "compas_timber.fabrication.DovetailTenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailtenon class method)": [[567, "compas_timber.fabrication.DovetailTenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.dovetailtenon class method)": [[568, "compas_timber.fabrication.DovetailTenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.dovetailtenon method)": [[569, "compas_timber.fabrication.DovetailTenon.scale"]], "scaled() (compas_timber.fabrication.dovetailtenon method)": [[570, "compas_timber.fabrication.DovetailTenon.scaled"]], "sha256() (compas_timber.fabrication.dovetailtenon method)": [[571, "compas_timber.fabrication.DovetailTenon.sha256"]], "to_json() (compas_timber.fabrication.dovetailtenon method)": [[572, "compas_timber.fabrication.DovetailTenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailtenon method)": [[573, "compas_timber.fabrication.DovetailTenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailtenon class method)": [[574, "compas_timber.fabrication.DovetailTenon.validate_data"]], "drilling (class in compas_timber.fabrication)": [[575, "compas_timber.fabrication.Drilling"]], "tostring() (compas_timber.fabrication.drilling method)": [[576, "compas_timber.fabrication.Drilling.ToString"]], "add_subprocessing() (compas_timber.fabrication.drilling method)": [[577, "compas_timber.fabrication.Drilling.add_subprocessing"]], "apply() (compas_timber.fabrication.drilling method)": [[578, "compas_timber.fabrication.Drilling.apply"]], "copy() (compas_timber.fabrication.drilling method)": [[579, "compas_timber.fabrication.Drilling.copy"]], "cylinder_from_params_and_element() (compas_timber.fabrication.drilling method)": [[580, "compas_timber.fabrication.Drilling.cylinder_from_params_and_element"]], "from_json() (compas_timber.fabrication.drilling class method)": [[581, "compas_timber.fabrication.Drilling.from_json"]], "from_jsonstring() (compas_timber.fabrication.drilling class method)": [[582, "compas_timber.fabrication.Drilling.from_jsonstring"]], "from_line_and_element() (compas_timber.fabrication.drilling class method)": [[583, "compas_timber.fabrication.Drilling.from_line_and_element"]], "from_shapes_and_element() (compas_timber.fabrication.drilling class method)": [[584, "compas_timber.fabrication.Drilling.from_shapes_and_element"]], "scale() (compas_timber.fabrication.drilling method)": [[585, "compas_timber.fabrication.Drilling.scale"]], "scaled() (compas_timber.fabrication.drilling method)": [[586, "compas_timber.fabrication.Drilling.scaled"]], "sha256() (compas_timber.fabrication.drilling method)": [[587, "compas_timber.fabrication.Drilling.sha256"]], "to_json() (compas_timber.fabrication.drilling method)": [[588, "compas_timber.fabrication.Drilling.to_json"]], "to_jsonstring() (compas_timber.fabrication.drilling method)": [[589, "compas_timber.fabrication.Drilling.to_jsonstring"]], "validate_data() (compas_timber.fabrication.drilling class method)": [[590, "compas_timber.fabrication.Drilling.validate_data"]], "edgepositiontype (class in compas_timber.fabrication)": [[591, "compas_timber.fabrication.EdgePositionType"]], "frenchridgelap (class in compas_timber.fabrication)": [[592, "compas_timber.fabrication.FrenchRidgeLap"]], "tostring() (compas_timber.fabrication.frenchridgelap method)": [[593, "compas_timber.fabrication.FrenchRidgeLap.ToString"]], "add_subprocessing() (compas_timber.fabrication.frenchridgelap method)": [[594, "compas_timber.fabrication.FrenchRidgeLap.add_subprocessing"]], "apply() (compas_timber.fabrication.frenchridgelap method)": [[595, "compas_timber.fabrication.FrenchRidgeLap.apply"]], "copy() (compas_timber.fabrication.frenchridgelap method)": [[596, "compas_timber.fabrication.FrenchRidgeLap.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[597, "compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam"]], "from_beam_beam_and_plane() (compas_timber.fabrication.frenchridgelap class method)": [[598, "compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane"]], "from_json() (compas_timber.fabrication.frenchridgelap class method)": [[599, "compas_timber.fabrication.FrenchRidgeLap.from_json"]], "from_jsonstring() (compas_timber.fabrication.frenchridgelap class method)": [[600, "compas_timber.fabrication.FrenchRidgeLap.from_jsonstring"]], "lap_volume_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[601, "compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam"]], "scale() (compas_timber.fabrication.frenchridgelap method)": [[602, "compas_timber.fabrication.FrenchRidgeLap.scale"]], "scaled() (compas_timber.fabrication.frenchridgelap method)": [[603, "compas_timber.fabrication.FrenchRidgeLap.scaled"]], "sha256() (compas_timber.fabrication.frenchridgelap method)": [[604, "compas_timber.fabrication.FrenchRidgeLap.sha256"]], "to_json() (compas_timber.fabrication.frenchridgelap method)": [[605, "compas_timber.fabrication.FrenchRidgeLap.to_json"]], "to_jsonstring() (compas_timber.fabrication.frenchridgelap method)": [[606, "compas_timber.fabrication.FrenchRidgeLap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.frenchridgelap class method)": [[607, "compas_timber.fabrication.FrenchRidgeLap.validate_data"]], "jackraftercut (class in compas_timber.fabrication)": [[608, "compas_timber.fabrication.JackRafterCut"]], "tostring() (compas_timber.fabrication.jackraftercut method)": [[609, "compas_timber.fabrication.JackRafterCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.jackraftercut method)": [[610, "compas_timber.fabrication.JackRafterCut.add_subprocessing"]], "apply() (compas_timber.fabrication.jackraftercut method)": [[611, "compas_timber.fabrication.JackRafterCut.apply"]], "copy() (compas_timber.fabrication.jackraftercut method)": [[612, "compas_timber.fabrication.JackRafterCut.copy"]], "from_json() (compas_timber.fabrication.jackraftercut class method)": [[613, "compas_timber.fabrication.JackRafterCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.jackraftercut class method)": [[614, "compas_timber.fabrication.JackRafterCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.jackraftercut class method)": [[615, "compas_timber.fabrication.JackRafterCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.jackraftercut class method)": [[616, "compas_timber.fabrication.JackRafterCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.jackraftercut method)": [[617, "compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam"]], "scale() (compas_timber.fabrication.jackraftercut method)": [[618, "compas_timber.fabrication.JackRafterCut.scale"]], "scaled() (compas_timber.fabrication.jackraftercut method)": [[619, "compas_timber.fabrication.JackRafterCut.scaled"]], "sha256() (compas_timber.fabrication.jackraftercut method)": [[620, "compas_timber.fabrication.JackRafterCut.sha256"]], "to_json() (compas_timber.fabrication.jackraftercut method)": [[621, "compas_timber.fabrication.JackRafterCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.jackraftercut method)": [[622, "compas_timber.fabrication.JackRafterCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.jackraftercut class method)": [[623, "compas_timber.fabrication.JackRafterCut.validate_data"]], "lap (class in compas_timber.fabrication)": [[624, "compas_timber.fabrication.Lap"]], "tostring() (compas_timber.fabrication.lap method)": [[625, "compas_timber.fabrication.Lap.ToString"]], "add_subprocessing() (compas_timber.fabrication.lap method)": [[626, "compas_timber.fabrication.Lap.add_subprocessing"]], "apply() (compas_timber.fabrication.lap method)": [[627, "compas_timber.fabrication.Lap.apply"]], "copy() (compas_timber.fabrication.lap method)": [[628, "compas_timber.fabrication.Lap.copy"]], "from_json() (compas_timber.fabrication.lap class method)": [[629, "compas_timber.fabrication.Lap.from_json"]], "from_jsonstring() (compas_timber.fabrication.lap class method)": [[630, "compas_timber.fabrication.Lap.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.lap class method)": [[631, "compas_timber.fabrication.Lap.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.lap class method)": [[632, "compas_timber.fabrication.Lap.from_shapes_and_element"]], "from_volume_and_beam() (compas_timber.fabrication.lap class method)": [[633, "compas_timber.fabrication.Lap.from_volume_and_beam"]], "scale() (compas_timber.fabrication.lap method)": [[634, "compas_timber.fabrication.Lap.scale"]], "scaled() (compas_timber.fabrication.lap method)": [[635, "compas_timber.fabrication.Lap.scaled"]], "sha256() (compas_timber.fabrication.lap method)": [[636, "compas_timber.fabrication.Lap.sha256"]], "to_json() (compas_timber.fabrication.lap method)": [[637, "compas_timber.fabrication.Lap.to_json"]], "to_jsonstring() (compas_timber.fabrication.lap method)": [[638, "compas_timber.fabrication.Lap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.lap class method)": [[639, "compas_timber.fabrication.Lap.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.lap method)": [[640, "compas_timber.fabrication.Lap.volume_from_params_and_beam"]], "limitationtoptype (class in compas_timber.fabrication)": [[641, "compas_timber.fabrication.LimitationTopType"]], "longitudinalcut (class in compas_timber.fabrication)": [[642, "compas_timber.fabrication.LongitudinalCut"]], "tostring() (compas_timber.fabrication.longitudinalcut method)": [[643, "compas_timber.fabrication.LongitudinalCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.longitudinalcut method)": [[644, "compas_timber.fabrication.LongitudinalCut.add_subprocessing"]], "apply() (compas_timber.fabrication.longitudinalcut method)": [[645, "compas_timber.fabrication.LongitudinalCut.apply"]], "copy() (compas_timber.fabrication.longitudinalcut method)": [[646, "compas_timber.fabrication.LongitudinalCut.copy"]], "from_json() (compas_timber.fabrication.longitudinalcut class method)": [[647, "compas_timber.fabrication.LongitudinalCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.longitudinalcut class method)": [[648, "compas_timber.fabrication.LongitudinalCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.longitudinalcut class method)": [[649, "compas_timber.fabrication.LongitudinalCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.longitudinalcut class method)": [[650, "compas_timber.fabrication.LongitudinalCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[651, "compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam"]], "scaled() (compas_timber.fabrication.longitudinalcut method)": [[652, "compas_timber.fabrication.LongitudinalCut.scaled"]], "sha256() (compas_timber.fabrication.longitudinalcut method)": [[653, "compas_timber.fabrication.LongitudinalCut.sha256"]], "to_json() (compas_timber.fabrication.longitudinalcut method)": [[654, "compas_timber.fabrication.LongitudinalCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.longitudinalcut method)": [[655, "compas_timber.fabrication.LongitudinalCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.longitudinalcut class method)": [[656, "compas_timber.fabrication.LongitudinalCut.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[657, "compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam"]], "machininglimits (class in compas_timber.fabrication)": [[658, "compas_timber.fabrication.MachiningLimits"]], "mortise (class in compas_timber.fabrication)": [[659, "compas_timber.fabrication.Mortise"]], "tostring() (compas_timber.fabrication.mortise method)": [[660, "compas_timber.fabrication.Mortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.mortise method)": [[661, "compas_timber.fabrication.Mortise.add_subprocessing"]], "apply() (compas_timber.fabrication.mortise method)": [[662, "compas_timber.fabrication.Mortise.apply"]], "copy() (compas_timber.fabrication.mortise method)": [[663, "compas_timber.fabrication.Mortise.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[664, "compas_timber.fabrication.Mortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.mortise class method)": [[665, "compas_timber.fabrication.Mortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.mortise class method)": [[666, "compas_timber.fabrication.Mortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.mortise class method)": [[667, "compas_timber.fabrication.Mortise.from_jsonstring"]], "scale() (compas_timber.fabrication.mortise method)": [[668, "compas_timber.fabrication.Mortise.scale"]], "scaled() (compas_timber.fabrication.mortise method)": [[669, "compas_timber.fabrication.Mortise.scaled"]], "sha256() (compas_timber.fabrication.mortise method)": [[670, "compas_timber.fabrication.Mortise.sha256"]], "to_json() (compas_timber.fabrication.mortise method)": [[671, "compas_timber.fabrication.Mortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.mortise method)": [[672, "compas_timber.fabrication.Mortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.mortise class method)": [[673, "compas_timber.fabrication.Mortise.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[674, "compas_timber.fabrication.Mortise.volume_from_params_and_beam"]], "orientationtype (class in compas_timber.fabrication)": [[675, "compas_timber.fabrication.OrientationType"]], "pocket (class in compas_timber.fabrication)": [[676, "compas_timber.fabrication.Pocket"]], "tostring() (compas_timber.fabrication.pocket method)": [[677, "compas_timber.fabrication.Pocket.ToString"]], "add_subprocessing() (compas_timber.fabrication.pocket method)": [[678, "compas_timber.fabrication.Pocket.add_subprocessing"]], "apply() (compas_timber.fabrication.pocket method)": [[679, "compas_timber.fabrication.Pocket.apply"]], "copy() (compas_timber.fabrication.pocket method)": [[680, "compas_timber.fabrication.Pocket.copy"]], "from_json() (compas_timber.fabrication.pocket class method)": [[681, "compas_timber.fabrication.Pocket.from_json"]], "from_jsonstring() (compas_timber.fabrication.pocket class method)": [[682, "compas_timber.fabrication.Pocket.from_jsonstring"]], "from_shapes_and_element() (compas_timber.fabrication.pocket class method)": [[683, "compas_timber.fabrication.Pocket.from_shapes_and_element"]], "from_volume_and_element() (compas_timber.fabrication.pocket class method)": [[684, "compas_timber.fabrication.Pocket.from_volume_and_element"]], "scale() (compas_timber.fabrication.pocket method)": [[685, "compas_timber.fabrication.Pocket.scale"]], "scaled() (compas_timber.fabrication.pocket method)": [[686, "compas_timber.fabrication.Pocket.scaled"]], "sha256() (compas_timber.fabrication.pocket method)": [[687, "compas_timber.fabrication.Pocket.sha256"]], "to_json() (compas_timber.fabrication.pocket method)": [[688, "compas_timber.fabrication.Pocket.to_json"]], "to_jsonstring() (compas_timber.fabrication.pocket method)": [[689, "compas_timber.fabrication.Pocket.to_jsonstring"]], "validate_data() (compas_timber.fabrication.pocket class method)": [[690, "compas_timber.fabrication.Pocket.validate_data"]], "volume_from_params_and_element() (compas_timber.fabrication.pocket method)": [[691, "compas_timber.fabrication.Pocket.volume_from_params_and_element"]], "slot (class in compas_timber.fabrication)": [[692, "compas_timber.fabrication.Slot"]], "tostring() (compas_timber.fabrication.slot method)": [[693, "compas_timber.fabrication.Slot.ToString"]], "add_subprocessing() (compas_timber.fabrication.slot method)": [[694, "compas_timber.fabrication.Slot.add_subprocessing"]], "apply() (compas_timber.fabrication.slot method)": [[695, "compas_timber.fabrication.Slot.apply"]], "copy() (compas_timber.fabrication.slot method)": [[696, "compas_timber.fabrication.Slot.copy"]], "from_json() (compas_timber.fabrication.slot class method)": [[697, "compas_timber.fabrication.Slot.from_json"]], "from_jsonstring() (compas_timber.fabrication.slot class method)": [[698, "compas_timber.fabrication.Slot.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.slot class method)": [[699, "compas_timber.fabrication.Slot.from_plane_and_beam"]], "scale() (compas_timber.fabrication.slot method)": [[700, "compas_timber.fabrication.Slot.scale"]], "scaled() (compas_timber.fabrication.slot method)": [[701, "compas_timber.fabrication.Slot.scaled"]], "sha256() (compas_timber.fabrication.slot method)": [[702, "compas_timber.fabrication.Slot.sha256"]], "to_json() (compas_timber.fabrication.slot method)": [[703, "compas_timber.fabrication.Slot.to_json"]], "to_jsonstring() (compas_timber.fabrication.slot method)": [[704, "compas_timber.fabrication.Slot.to_jsonstring"]], "validate_data() (compas_timber.fabrication.slot class method)": [[705, "compas_timber.fabrication.Slot.validate_data"]], "stepjoint (class in compas_timber.fabrication)": [[706, "compas_timber.fabrication.StepJoint"]], "tostring() (compas_timber.fabrication.stepjoint method)": [[707, "compas_timber.fabrication.StepJoint.ToString"]], "add_subprocessing() (compas_timber.fabrication.stepjoint method)": [[708, "compas_timber.fabrication.StepJoint.add_subprocessing"]], "add_tenon() (compas_timber.fabrication.stepjoint method)": [[709, "compas_timber.fabrication.StepJoint.add_tenon"]], "apply() (compas_timber.fabrication.stepjoint method)": [[710, "compas_timber.fabrication.StepJoint.apply"]], "copy() (compas_timber.fabrication.stepjoint method)": [[711, "compas_timber.fabrication.StepJoint.copy"]], "from_json() (compas_timber.fabrication.stepjoint class method)": [[712, "compas_timber.fabrication.StepJoint.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjoint class method)": [[713, "compas_timber.fabrication.StepJoint.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjoint class method)": [[714, "compas_timber.fabrication.StepJoint.from_plane_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[715, "compas_timber.fabrication.StepJoint.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjoint method)": [[716, "compas_timber.fabrication.StepJoint.scale"]], "scaled() (compas_timber.fabrication.stepjoint method)": [[717, "compas_timber.fabrication.StepJoint.scaled"]], "sha256() (compas_timber.fabrication.stepjoint method)": [[718, "compas_timber.fabrication.StepJoint.sha256"]], "tenon_volume_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[719, "compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam"]], "to_json() (compas_timber.fabrication.stepjoint method)": [[720, "compas_timber.fabrication.StepJoint.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjoint method)": [[721, "compas_timber.fabrication.StepJoint.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjoint class method)": [[722, "compas_timber.fabrication.StepJoint.validate_data"]], "stepjointnotch (class in compas_timber.fabrication)": [[723, "compas_timber.fabrication.StepJointNotch"]], "tostring() (compas_timber.fabrication.stepjointnotch method)": [[724, "compas_timber.fabrication.StepJointNotch.ToString"]], "add_mortise() (compas_timber.fabrication.stepjointnotch method)": [[725, "compas_timber.fabrication.StepJointNotch.add_mortise"]], "add_subprocessing() (compas_timber.fabrication.stepjointnotch method)": [[726, "compas_timber.fabrication.StepJointNotch.add_subprocessing"]], "apply() (compas_timber.fabrication.stepjointnotch method)": [[727, "compas_timber.fabrication.StepJointNotch.apply"]], "copy() (compas_timber.fabrication.stepjointnotch method)": [[728, "compas_timber.fabrication.StepJointNotch.copy"]], "from_json() (compas_timber.fabrication.stepjointnotch class method)": [[729, "compas_timber.fabrication.StepJointNotch.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjointnotch class method)": [[730, "compas_timber.fabrication.StepJointNotch.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjointnotch class method)": [[731, "compas_timber.fabrication.StepJointNotch.from_plane_and_beam"]], "mortise_volume_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[732, "compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[733, "compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjointnotch method)": [[734, "compas_timber.fabrication.StepJointNotch.scale"]], "scaled() (compas_timber.fabrication.stepjointnotch method)": [[735, "compas_timber.fabrication.StepJointNotch.scaled"]], "sha256() (compas_timber.fabrication.stepjointnotch method)": [[736, "compas_timber.fabrication.StepJointNotch.sha256"]], "to_json() (compas_timber.fabrication.stepjointnotch method)": [[737, "compas_timber.fabrication.StepJointNotch.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjointnotch method)": [[738, "compas_timber.fabrication.StepJointNotch.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjointnotch class method)": [[739, "compas_timber.fabrication.StepJointNotch.validate_data"]], "stepshapetype (class in compas_timber.fabrication)": [[740, "compas_timber.fabrication.StepShapeType"]], "tenon (class in compas_timber.fabrication)": [[741, "compas_timber.fabrication.Tenon"]], "tostring() (compas_timber.fabrication.tenon method)": [[742, "compas_timber.fabrication.Tenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.tenon method)": [[743, "compas_timber.fabrication.Tenon.add_subprocessing"]], "apply() (compas_timber.fabrication.tenon method)": [[744, "compas_timber.fabrication.Tenon.apply"]], "copy() (compas_timber.fabrication.tenon method)": [[745, "compas_timber.fabrication.Tenon.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[746, "compas_timber.fabrication.Tenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.tenon class method)": [[747, "compas_timber.fabrication.Tenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.tenon class method)": [[748, "compas_timber.fabrication.Tenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.tenon class method)": [[749, "compas_timber.fabrication.Tenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.tenon method)": [[750, "compas_timber.fabrication.Tenon.scale"]], "scaled() (compas_timber.fabrication.tenon method)": [[751, "compas_timber.fabrication.Tenon.scaled"]], "sha256() (compas_timber.fabrication.tenon method)": [[752, "compas_timber.fabrication.Tenon.sha256"]], "to_json() (compas_timber.fabrication.tenon method)": [[753, "compas_timber.fabrication.Tenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.tenon method)": [[754, "compas_timber.fabrication.Tenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.tenon class method)": [[755, "compas_timber.fabrication.Tenon.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[756, "compas_timber.fabrication.Tenon.volume_from_params_and_beam"]], "tenonshapetype (class in compas_timber.fabrication)": [[757, "compas_timber.fabrication.TenonShapeType"]], "add_gh_param() (in module compas_timber.ghpython)": [[758, "compas_timber.ghpython.add_gh_param"]], "clear_gh_params() (in module compas_timber.ghpython)": [[759, "compas_timber.ghpython.clear_gh_params"]], "get_leaf_subclasses() (in module compas_timber.ghpython)": [[760, "compas_timber.ghpython.get_leaf_subclasses"]], "item_input_valid() (in module compas_timber.ghpython)": [[761, "compas_timber.ghpython.item_input_valid"]], "list_input_valid() (in module compas_timber.ghpython)": [[762, "compas_timber.ghpython.list_input_valid"]], "manage_dynamic_params() (in module compas_timber.ghpython)": [[763, "compas_timber.ghpython.manage_dynamic_params"]], "rename_gh_input() (in module compas_timber.ghpython)": [[764, "compas_timber.ghpython.rename_gh_input"]], "timbermodel (class in compas_timber.model)": [[765, "compas_timber.model.TimberModel"]], "tostring() (compas_timber.model.timbermodel method)": [[766, "compas_timber.model.TimberModel.ToString"]], "add_element() (compas_timber.model.timbermodel method)": [[767, "compas_timber.model.TimberModel.add_element"]], "add_elements() (compas_timber.model.timbermodel method)": [[768, "compas_timber.model.TimberModel.add_elements"]], "add_group() (compas_timber.model.timbermodel method)": [[769, "compas_timber.model.TimberModel.add_group"]], "add_group_element() (compas_timber.model.timbermodel method)": [[770, "compas_timber.model.TimberModel.add_group_element"]], "add_interaction() (compas_timber.model.timbermodel method)": [[771, "compas_timber.model.TimberModel.add_interaction"]], "add_joint() (compas_timber.model.timbermodel method)": [[772, "compas_timber.model.TimberModel.add_joint"]], "add_material() (compas_timber.model.timbermodel method)": [[773, "compas_timber.model.TimberModel.add_material"]], "assign_material() (compas_timber.model.timbermodel method)": [[774, "compas_timber.model.TimberModel.assign_material"]], "compute_aabb() (compas_timber.model.timbermodel method)": [[775, "compas_timber.model.TimberModel.compute_aabb"]], "compute_obb() (compas_timber.model.timbermodel method)": [[776, "compas_timber.model.TimberModel.compute_obb"]], "connect_adjacent_beams() (compas_timber.model.timbermodel method)": [[777, "compas_timber.model.TimberModel.connect_adjacent_beams"]], "connect_adjacent_walls() (compas_timber.model.timbermodel method)": [[778, "compas_timber.model.TimberModel.connect_adjacent_walls"]], "copy() (compas_timber.model.timbermodel method)": [[779, "compas_timber.model.TimberModel.copy"]], "element_by_guid() (compas_timber.model.timbermodel method)": [[780, "compas_timber.model.TimberModel.element_by_guid"]], "elements() (compas_timber.model.timbermodel method)": [[781, "compas_timber.model.TimberModel.elements"]], "elements_connected_by() (compas_timber.model.timbermodel method)": [[782, "compas_timber.model.TimberModel.elements_connected_by"]], "from_json() (compas_timber.model.timbermodel class method)": [[783, "compas_timber.model.TimberModel.from_json"]], "from_jsonstring() (compas_timber.model.timbermodel class method)": [[784, "compas_timber.model.TimberModel.from_jsonstring"]], "get_elements_in_group() (compas_timber.model.timbermodel method)": [[785, "compas_timber.model.TimberModel.get_elements_in_group"]], "get_interactions_for_element() (compas_timber.model.timbermodel method)": [[786, "compas_timber.model.TimberModel.get_interactions_for_element"]], "has_element() (compas_timber.model.timbermodel method)": [[787, "compas_timber.model.TimberModel.has_element"]], "has_group() (compas_timber.model.timbermodel method)": [[788, "compas_timber.model.TimberModel.has_group"]], "has_interaction() (compas_timber.model.timbermodel method)": [[789, "compas_timber.model.TimberModel.has_interaction"]], "has_material() (compas_timber.model.timbermodel method)": [[790, "compas_timber.model.TimberModel.has_material"]], "interactions() (compas_timber.model.timbermodel method)": [[791, "compas_timber.model.TimberModel.interactions"]], "materials() (compas_timber.model.timbermodel method)": [[792, "compas_timber.model.TimberModel.materials"]], "process_joinery() (compas_timber.model.timbermodel method)": [[793, "compas_timber.model.TimberModel.process_joinery"]], "remove_element() (compas_timber.model.timbermodel method)": [[794, "compas_timber.model.TimberModel.remove_element"]], "remove_interaction() (compas_timber.model.timbermodel method)": [[795, "compas_timber.model.TimberModel.remove_interaction"]], "remove_joint() (compas_timber.model.timbermodel method)": [[796, "compas_timber.model.TimberModel.remove_joint"]], "rotate() (compas_timber.model.timbermodel method)": [[797, "compas_timber.model.TimberModel.rotate"]], "rotated() (compas_timber.model.timbermodel method)": [[798, "compas_timber.model.TimberModel.rotated"]], "scale() (compas_timber.model.timbermodel method)": [[799, "compas_timber.model.TimberModel.scale"]], "scaled() (compas_timber.model.timbermodel method)": [[800, "compas_timber.model.TimberModel.scaled"]], "set_topologies() (compas_timber.model.timbermodel method)": [[801, "compas_timber.model.TimberModel.set_topologies"]], "sha256() (compas_timber.model.timbermodel method)": [[802, "compas_timber.model.TimberModel.sha256"]], "to_json() (compas_timber.model.timbermodel method)": [[803, "compas_timber.model.TimberModel.to_json"]], "to_jsonstring() (compas_timber.model.timbermodel method)": [[804, "compas_timber.model.TimberModel.to_jsonstring"]], "transform() (compas_timber.model.timbermodel method)": [[805, "compas_timber.model.TimberModel.transform"]], "transform_numpy() (compas_timber.model.timbermodel method)": [[806, "compas_timber.model.TimberModel.transform_numpy"]], "transformed() (compas_timber.model.timbermodel method)": [[807, "compas_timber.model.TimberModel.transformed"]], "transformed_numpy() (compas_timber.model.timbermodel method)": [[808, "compas_timber.model.TimberModel.transformed_numpy"]], "translate() (compas_timber.model.timbermodel method)": [[809, "compas_timber.model.TimberModel.translate"]], "translated() (compas_timber.model.timbermodel method)": [[810, "compas_timber.model.TimberModel.translated"]], "validate_data() (compas_timber.model.timbermodel class method)": [[811, "compas_timber.model.TimberModel.validate_data"]], "actor (class in compas_timber.planning)": [[812, "compas_timber.planning.Actor"]], "get_name() (compas_timber.planning.actor class method)": [[813, "compas_timber.planning.Actor.get_name"]], "buildingplan (class in compas_timber.planning)": [[814, "compas_timber.planning.BuildingPlan"]], "tostring() (compas_timber.planning.buildingplan method)": [[815, "compas_timber.planning.BuildingPlan.ToString"]], "add_step() (compas_timber.planning.buildingplan method)": [[816, "compas_timber.planning.BuildingPlan.add_step"]], "copy() (compas_timber.planning.buildingplan method)": [[817, "compas_timber.planning.BuildingPlan.copy"]], "from_json() (compas_timber.planning.buildingplan class method)": [[818, "compas_timber.planning.BuildingPlan.from_json"]], "from_jsonstring() (compas_timber.planning.buildingplan class method)": [[819, "compas_timber.planning.BuildingPlan.from_jsonstring"]], "sha256() (compas_timber.planning.buildingplan method)": [[820, "compas_timber.planning.BuildingPlan.sha256"]], "to_json() (compas_timber.planning.buildingplan method)": [[821, "compas_timber.planning.BuildingPlan.to_json"]], "to_jsonstring() (compas_timber.planning.buildingplan method)": [[822, "compas_timber.planning.BuildingPlan.to_jsonstring"]], "validate_data() (compas_timber.planning.buildingplan class method)": [[823, "compas_timber.planning.BuildingPlan.validate_data"]], "buildingplanparser (class in compas_timber.planning)": [[824, "compas_timber.planning.BuildingPlanParser"]], "parse() (compas_timber.planning.buildingplanparser class method)": [[825, "compas_timber.planning.BuildingPlanParser.parse"]], "serialize() (compas_timber.planning.buildingplanparser class method)": [[826, "compas_timber.planning.BuildingPlanParser.serialize"]], "instruction (class in compas_timber.planning)": [[827, "compas_timber.planning.Instruction"]], "tostring() (compas_timber.planning.instruction method)": [[828, "compas_timber.planning.Instruction.ToString"]], "copy() (compas_timber.planning.instruction method)": [[829, "compas_timber.planning.Instruction.copy"]], "from_json() (compas_timber.planning.instruction class method)": [[830, "compas_timber.planning.Instruction.from_json"]], "from_jsonstring() (compas_timber.planning.instruction class method)": [[831, "compas_timber.planning.Instruction.from_jsonstring"]], "sha256() (compas_timber.planning.instruction method)": [[832, "compas_timber.planning.Instruction.sha256"]], "to_json() (compas_timber.planning.instruction method)": [[833, "compas_timber.planning.Instruction.to_json"]], "to_jsonstring() (compas_timber.planning.instruction method)": [[834, "compas_timber.planning.Instruction.to_jsonstring"]], "transform() (compas_timber.planning.instruction method)": [[835, "compas_timber.planning.Instruction.transform"]], "validate_data() (compas_timber.planning.instruction class method)": [[836, "compas_timber.planning.Instruction.validate_data"]], "lineardimension (class in compas_timber.planning)": [[837, "compas_timber.planning.LinearDimension"]], "tostring() (compas_timber.planning.lineardimension method)": [[838, "compas_timber.planning.LinearDimension.ToString"]], "copy() (compas_timber.planning.lineardimension method)": [[839, "compas_timber.planning.LinearDimension.copy"]], "from_json() (compas_timber.planning.lineardimension class method)": [[840, "compas_timber.planning.LinearDimension.from_json"]], "from_jsonstring() (compas_timber.planning.lineardimension class method)": [[841, "compas_timber.planning.LinearDimension.from_jsonstring"]], "sha256() (compas_timber.planning.lineardimension method)": [[842, "compas_timber.planning.LinearDimension.sha256"]], "to_json() (compas_timber.planning.lineardimension method)": [[843, "compas_timber.planning.LinearDimension.to_json"]], "to_jsonstring() (compas_timber.planning.lineardimension method)": [[844, "compas_timber.planning.LinearDimension.to_jsonstring"]], "transform() (compas_timber.planning.lineardimension method)": [[845, "compas_timber.planning.LinearDimension.transform"]], "validate_data() (compas_timber.planning.lineardimension class method)": [[846, "compas_timber.planning.LinearDimension.validate_data"]], "model3d (class in compas_timber.planning)": [[847, "compas_timber.planning.Model3d"]], "tostring() (compas_timber.planning.model3d method)": [[848, "compas_timber.planning.Model3d.ToString"]], "copy() (compas_timber.planning.model3d method)": [[849, "compas_timber.planning.Model3d.copy"]], "from_json() (compas_timber.planning.model3d class method)": [[850, "compas_timber.planning.Model3d.from_json"]], "from_jsonstring() (compas_timber.planning.model3d class method)": [[851, "compas_timber.planning.Model3d.from_jsonstring"]], "sha256() (compas_timber.planning.model3d method)": [[852, "compas_timber.planning.Model3d.sha256"]], "to_json() (compas_timber.planning.model3d method)": [[853, "compas_timber.planning.Model3d.to_json"]], "to_jsonstring() (compas_timber.planning.model3d method)": [[854, "compas_timber.planning.Model3d.to_jsonstring"]], "transform() (compas_timber.planning.model3d method)": [[855, "compas_timber.planning.Model3d.transform"]], "validate_data() (compas_timber.planning.model3d class method)": [[856, "compas_timber.planning.Model3d.validate_data"]], "simplesequencegenerator (class in compas_timber.planning)": [[857, "compas_timber.planning.SimpleSequenceGenerator"]], "step (class in compas_timber.planning)": [[858, "compas_timber.planning.Step"]], "tostring() (compas_timber.planning.step method)": [[859, "compas_timber.planning.Step.ToString"]], "copy() (compas_timber.planning.step method)": [[860, "compas_timber.planning.Step.copy"]], "from_json() (compas_timber.planning.step class method)": [[861, "compas_timber.planning.Step.from_json"]], "from_jsonstring() (compas_timber.planning.step class method)": [[862, "compas_timber.planning.Step.from_jsonstring"]], "sha256() (compas_timber.planning.step method)": [[863, "compas_timber.planning.Step.sha256"]], "to_json() (compas_timber.planning.step method)": [[864, "compas_timber.planning.Step.to_json"]], "to_jsonstring() (compas_timber.planning.step method)": [[865, "compas_timber.planning.Step.to_jsonstring"]], "transform() (compas_timber.planning.step method)": [[866, "compas_timber.planning.Step.transform"]], "validate_data() (compas_timber.planning.step class method)": [[867, "compas_timber.planning.Step.validate_data"]], "text3d (class in compas_timber.planning)": [[868, "compas_timber.planning.Text3d"]], "tostring() (compas_timber.planning.text3d method)": [[869, "compas_timber.planning.Text3d.ToString"]], "copy() (compas_timber.planning.text3d method)": [[870, "compas_timber.planning.Text3d.copy"]], "from_json() (compas_timber.planning.text3d class method)": [[871, "compas_timber.planning.Text3d.from_json"]], "from_jsonstring() (compas_timber.planning.text3d class method)": [[872, "compas_timber.planning.Text3d.from_jsonstring"]], "sha256() (compas_timber.planning.text3d method)": [[873, "compas_timber.planning.Text3d.sha256"]], "to_json() (compas_timber.planning.text3d method)": [[874, "compas_timber.planning.Text3d.to_json"]], "to_jsonstring() (compas_timber.planning.text3d method)": [[875, "compas_timber.planning.Text3d.to_jsonstring"]], "transform() (compas_timber.planning.text3d method)": [[876, "compas_timber.planning.Text3d.transform"]], "validate_data() (compas_timber.planning.text3d class method)": [[877, "compas_timber.planning.Text3d.validate_data"]], "find_neighboring_elements() (in module compas_timber.rhino)": [[878, "compas_timber.rhino.find_neighboring_elements"]]}})