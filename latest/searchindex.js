Search.setIndex({"docnames": ["api", "api/compas_timber.connections", "api/compas_timber.design", "api/compas_timber.elements", "api/compas_timber.errors", "api/compas_timber.fabrication", "api/compas_timber.ghpython", "api/compas_timber.model", "api/compas_timber.planning", "api/compas_timber.rhino", "api/generated/compas_timber.connections.BallNodeJoint", "api/generated/compas_timber.connections.BallNodeJoint.ToString", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions", "api/generated/compas_timber.connections.BallNodeJoint.add_features", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility", "api/generated/compas_timber.connections.BallNodeJoint.copy", "api/generated/compas_timber.connections.BallNodeJoint.create", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies", "api/generated/compas_timber.connections.BallNodeJoint.from_json", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.BallNodeJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.BallNodeJoint.sha256", "api/generated/compas_timber.connections.BallNodeJoint.to_json", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.validate_data", "api/generated/compas_timber.connections.ConnectionSolver", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs", "api/generated/compas_timber.connections.ConnectionSolver.find_topology", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology", "api/generated/compas_timber.connections.Joint", "api/generated/compas_timber.connections.Joint.ToString", "api/generated/compas_timber.connections.Joint.add_extensions", "api/generated/compas_timber.connections.Joint.add_features", "api/generated/compas_timber.connections.Joint.check_elements_compatibility", "api/generated/compas_timber.connections.Joint.copy", "api/generated/compas_timber.connections.Joint.create", "api/generated/compas_timber.connections.Joint.element_count_complies", "api/generated/compas_timber.connections.Joint.from_json", "api/generated/compas_timber.connections.Joint.from_jsonstring", "api/generated/compas_timber.connections.Joint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.Joint.get_face_most_towards_beam", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys", "api/generated/compas_timber.connections.Joint.sha256", "api/generated/compas_timber.connections.Joint.to_json", "api/generated/compas_timber.connections.Joint.to_jsonstring", "api/generated/compas_timber.connections.Joint.validate_data", "api/generated/compas_timber.connections.JointTopology", "api/generated/compas_timber.connections.JointTopology.get_name", "api/generated/compas_timber.connections.LButtJoint", "api/generated/compas_timber.connections.LButtJoint.ToString", "api/generated/compas_timber.connections.LButtJoint.add_extensions", "api/generated/compas_timber.connections.LButtJoint.add_features", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LButtJoint.copy", "api/generated/compas_timber.connections.LButtJoint.create", "api/generated/compas_timber.connections.LButtJoint.element_count_complies", "api/generated/compas_timber.connections.LButtJoint.from_json", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring", "api/generated/compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LButtJoint.sha256", "api/generated/compas_timber.connections.LButtJoint.to_json", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles", "api/generated/compas_timber.connections.LButtJoint.validate_data", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data", "api/generated/compas_timber.connections.LLapJoint", "api/generated/compas_timber.connections.LLapJoint.ToString", "api/generated/compas_timber.connections.LLapJoint.add_extensions", "api/generated/compas_timber.connections.LLapJoint.add_features", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LLapJoint.copy", "api/generated/compas_timber.connections.LLapJoint.create", "api/generated/compas_timber.connections.LLapJoint.element_count_complies", "api/generated/compas_timber.connections.LLapJoint.from_json", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LLapJoint.sha256", "api/generated/compas_timber.connections.LLapJoint.to_json", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LLapJoint.validate_data", "api/generated/compas_timber.connections.LMiterJoint", "api/generated/compas_timber.connections.LMiterJoint.ToString", "api/generated/compas_timber.connections.LMiterJoint.add_extensions", "api/generated/compas_timber.connections.LMiterJoint.add_features", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LMiterJoint.copy", "api/generated/compas_timber.connections.LMiterJoint.create", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies", "api/generated/compas_timber.connections.LMiterJoint.from_json", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LMiterJoint.sha256", "api/generated/compas_timber.connections.LMiterJoint.to_json", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.validate_data", "api/generated/compas_timber.connections.LapJoint", "api/generated/compas_timber.connections.LapJoint.ToString", "api/generated/compas_timber.connections.LapJoint.add_extensions", "api/generated/compas_timber.connections.LapJoint.add_features", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LapJoint.copy", "api/generated/compas_timber.connections.LapJoint.create", "api/generated/compas_timber.connections.LapJoint.element_count_complies", "api/generated/compas_timber.connections.LapJoint.from_json", "api/generated/compas_timber.connections.LapJoint.from_jsonstring", "api/generated/compas_timber.connections.LapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LapJoint.sha256", "api/generated/compas_timber.connections.LapJoint.to_json", "api/generated/compas_timber.connections.LapJoint.to_jsonstring", "api/generated/compas_timber.connections.LapJoint.validate_data", "api/generated/compas_timber.connections.NullJoint", "api/generated/compas_timber.connections.NullJoint.ToString", "api/generated/compas_timber.connections.NullJoint.add_extensions", "api/generated/compas_timber.connections.NullJoint.add_features", "api/generated/compas_timber.connections.NullJoint.check_elements_compatibility", "api/generated/compas_timber.connections.NullJoint.copy", "api/generated/compas_timber.connections.NullJoint.create", "api/generated/compas_timber.connections.NullJoint.element_count_complies", "api/generated/compas_timber.connections.NullJoint.from_json", "api/generated/compas_timber.connections.NullJoint.from_jsonstring", "api/generated/compas_timber.connections.NullJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.NullJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.NullJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.NullJoint.sha256", "api/generated/compas_timber.connections.NullJoint.to_json", "api/generated/compas_timber.connections.NullJoint.to_jsonstring", "api/generated/compas_timber.connections.NullJoint.validate_data", "api/generated/compas_timber.connections.TBirdsmouthJoint", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy", "api/generated/compas_timber.connections.TBirdsmouthJoint.create", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TBirdsmouthJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data", "api/generated/compas_timber.connections.TButtJoint", "api/generated/compas_timber.connections.TButtJoint.ToString", "api/generated/compas_timber.connections.TButtJoint.add_extensions", "api/generated/compas_timber.connections.TButtJoint.add_features", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TButtJoint.copy", "api/generated/compas_timber.connections.TButtJoint.create", "api/generated/compas_timber.connections.TButtJoint.element_count_complies", "api/generated/compas_timber.connections.TButtJoint.from_json", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring", "api/generated/compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TButtJoint.sha256", "api/generated/compas_timber.connections.TButtJoint.to_json", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring", "api/generated/compas_timber.connections.TButtJoint.validate_data", "api/generated/compas_timber.connections.TDovetailJoint", "api/generated/compas_timber.connections.TDovetailJoint.ToString", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions", "api/generated/compas_timber.connections.TDovetailJoint.add_features", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TDovetailJoint.copy", "api/generated/compas_timber.connections.TDovetailJoint.create", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies", "api/generated/compas_timber.connections.TDovetailJoint.from_json", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TDovetailJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TDovetailJoint.sha256", "api/generated/compas_timber.connections.TDovetailJoint.to_json", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.validate_data", "api/generated/compas_timber.connections.TLapJoint", "api/generated/compas_timber.connections.TLapJoint.ToString", "api/generated/compas_timber.connections.TLapJoint.add_extensions", "api/generated/compas_timber.connections.TLapJoint.add_features", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TLapJoint.copy", "api/generated/compas_timber.connections.TLapJoint.create", "api/generated/compas_timber.connections.TLapJoint.element_count_complies", "api/generated/compas_timber.connections.TLapJoint.from_json", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring", "api/generated/compas_timber.connections.TLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TLapJoint.sha256", "api/generated/compas_timber.connections.TLapJoint.to_json", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring", "api/generated/compas_timber.connections.TLapJoint.validate_data", "api/generated/compas_timber.connections.TStepJoint", "api/generated/compas_timber.connections.TStepJoint.ToString", "api/generated/compas_timber.connections.TStepJoint.add_extensions", "api/generated/compas_timber.connections.TStepJoint.add_features", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TStepJoint.copy", "api/generated/compas_timber.connections.TStepJoint.create", "api/generated/compas_timber.connections.TStepJoint.element_count_complies", "api/generated/compas_timber.connections.TStepJoint.from_json", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring", "api/generated/compas_timber.connections.TStepJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TStepJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TStepJoint.set_step_depths", "api/generated/compas_timber.connections.TStepJoint.sha256", "api/generated/compas_timber.connections.TStepJoint.to_json", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring", "api/generated/compas_timber.connections.TStepJoint.validate_data", "api/generated/compas_timber.connections.TenonMortiseJoint", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TenonMortiseJoint.copy", "api/generated/compas_timber.connections.TenonMortiseJoint.create", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TenonMortiseJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data", "api/generated/compas_timber.connections.XLapJoint", "api/generated/compas_timber.connections.XLapJoint.ToString", "api/generated/compas_timber.connections.XLapJoint.add_extensions", "api/generated/compas_timber.connections.XLapJoint.add_features", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XLapJoint.copy", "api/generated/compas_timber.connections.XLapJoint.create", "api/generated/compas_timber.connections.XLapJoint.element_count_complies", "api/generated/compas_timber.connections.XLapJoint.from_json", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring", "api/generated/compas_timber.connections.XLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.XLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XLapJoint.sha256", "api/generated/compas_timber.connections.XLapJoint.to_json", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring", "api/generated/compas_timber.connections.XLapJoint.validate_data", "api/generated/compas_timber.connections.YButtJoint", "api/generated/compas_timber.connections.YButtJoint.ToString", "api/generated/compas_timber.connections.YButtJoint.add_extensions", "api/generated/compas_timber.connections.YButtJoint.add_features", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.YButtJoint.copy", "api/generated/compas_timber.connections.YButtJoint.create", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.element_count_complies", "api/generated/compas_timber.connections.YButtJoint.from_json", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring", "api/generated/compas_timber.connections.YButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.YButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.YButtJoint.sha256", "api/generated/compas_timber.connections.YButtJoint.to_json", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring", "api/generated/compas_timber.connections.YButtJoint.validate_data", "api/generated/compas_timber.connections.find_neighboring_elements", "api/generated/compas_timber.design.CategoryRule", "api/generated/compas_timber.design.CategoryRule.ToString", "api/generated/compas_timber.design.CategoryRule.comply", "api/generated/compas_timber.design.CategoryRule.get_category_rules", "api/generated/compas_timber.design.CategoryRule.get_direct_rules", "api/generated/compas_timber.design.CategoryRule.get_topology_rules", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.CategoryRule.reorder", "api/generated/compas_timber.design.DebugInfomation", "api/generated/compas_timber.design.DebugInfomation.ToString", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error", "api/generated/compas_timber.design.DebugInfomation.add_feature_error", "api/generated/compas_timber.design.DebugInfomation.add_joint_error", "api/generated/compas_timber.design.DirectRule", "api/generated/compas_timber.design.DirectRule.ToString", "api/generated/compas_timber.design.DirectRule.comply", "api/generated/compas_timber.design.DirectRule.contains", "api/generated/compas_timber.design.DirectRule.get_category_rules", "api/generated/compas_timber.design.DirectRule.get_direct_rules", "api/generated/compas_timber.design.DirectRule.get_topology_rules", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.FeatureDefinition", "api/generated/compas_timber.design.FeatureDefinition.ToString", "api/generated/compas_timber.design.JointDefinition", "api/generated/compas_timber.design.JointDefinition.ToString", "api/generated/compas_timber.design.JointDefinition.is_identical", "api/generated/compas_timber.design.JointDefinition.match", "api/generated/compas_timber.design.JointRule", "api/generated/compas_timber.design.JointRule.comply", "api/generated/compas_timber.design.JointRule.get_category_rules", "api/generated/compas_timber.design.JointRule.get_direct_rules", "api/generated/compas_timber.design.JointRule.get_topology_rules", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.SurfaceModel", "api/generated/compas_timber.design.SurfaceModel.beam_category_names", "api/generated/compas_timber.design.SurfaceModel.create_model", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements", "api/generated/compas_timber.design.SurfaceModel.generate_frame", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams", "api/generated/compas_timber.design.SurfaceModel.generate_plates", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines", "api/generated/compas_timber.design.SurfaceModel.generate_studs", "api/generated/compas_timber.design.SurfaceModel.generate_windows", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices", "api/generated/compas_timber.design.SurfaceModel.offset_elements", "api/generated/compas_timber.design.SurfaceModel.parse_loops", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs", "api/generated/compas_timber.design.SurfaceModel.trim_studs", "api/generated/compas_timber.design.TopologyRule", "api/generated/compas_timber.design.TopologyRule.ToString", "api/generated/compas_timber.design.TopologyRule.comply", "api/generated/compas_timber.design.TopologyRule.get_category_rules", "api/generated/compas_timber.design.TopologyRule.get_direct_rules", "api/generated/compas_timber.design.TopologyRule.get_topology_rules", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.guess_joint_topology_2beams", "api/generated/compas_timber.design.set_default_joints", "api/generated/compas_timber.elements.Beam", "api/generated/compas_timber.elements.Beam.ToString", "api/generated/compas_timber.elements.Beam.add_blank_extension", "api/generated/compas_timber.elements.Beam.add_feature", "api/generated/compas_timber.elements.Beam.add_features", "api/generated/compas_timber.elements.Beam.back_side", "api/generated/compas_timber.elements.Beam.compute_aabb", "api/generated/compas_timber.elements.Beam.compute_collision_mesh", "api/generated/compas_timber.elements.Beam.compute_geometry", "api/generated/compas_timber.elements.Beam.compute_obb", "api/generated/compas_timber.elements.Beam.compute_worldtransformation", "api/generated/compas_timber.elements.Beam.copy", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point", "api/generated/compas_timber.elements.Beam.extension_to_plane", "api/generated/compas_timber.elements.Beam.from_centerline", "api/generated/compas_timber.elements.Beam.from_endpoints", "api/generated/compas_timber.elements.Beam.from_json", "api/generated/compas_timber.elements.Beam.from_jsonstring", "api/generated/compas_timber.elements.Beam.front_side", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side", "api/generated/compas_timber.elements.Beam.opp_side", "api/generated/compas_timber.elements.Beam.remove_blank_extension", "api/generated/compas_timber.elements.Beam.remove_features", "api/generated/compas_timber.elements.Beam.reset", "api/generated/compas_timber.elements.Beam.sha256", "api/generated/compas_timber.elements.Beam.side_as_surface", "api/generated/compas_timber.elements.Beam.to_json", "api/generated/compas_timber.elements.Beam.to_jsonstring", "api/generated/compas_timber.elements.Beam.transform", "api/generated/compas_timber.elements.Beam.transformed", "api/generated/compas_timber.elements.Beam.validate_data", "api/generated/compas_timber.elements.Fastener", "api/generated/compas_timber.elements.Fastener.ToString", "api/generated/compas_timber.elements.Fastener.add_feature", "api/generated/compas_timber.elements.Fastener.compute_aabb", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh", "api/generated/compas_timber.elements.Fastener.compute_geometry", "api/generated/compas_timber.elements.Fastener.compute_obb", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation", "api/generated/compas_timber.elements.Fastener.copy", "api/generated/compas_timber.elements.Fastener.from_json", "api/generated/compas_timber.elements.Fastener.from_jsonstring", "api/generated/compas_timber.elements.Fastener.remove_blank_extension", "api/generated/compas_timber.elements.Fastener.remove_features", "api/generated/compas_timber.elements.Fastener.reset", "api/generated/compas_timber.elements.Fastener.sha256", "api/generated/compas_timber.elements.Fastener.to_json", "api/generated/compas_timber.elements.Fastener.to_jsonstring", "api/generated/compas_timber.elements.Fastener.transform", "api/generated/compas_timber.elements.Fastener.transformed", "api/generated/compas_timber.elements.Fastener.validate_data", "api/generated/compas_timber.elements.FastenerTimberInterface", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString", "api/generated/compas_timber.elements.FastenerTimberInterface.copy", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data", "api/generated/compas_timber.elements.Plate", "api/generated/compas_timber.elements.Plate.ToString", "api/generated/compas_timber.elements.Plate.add_feature", "api/generated/compas_timber.elements.Plate.add_features", "api/generated/compas_timber.elements.Plate.compute_aabb", "api/generated/compas_timber.elements.Plate.compute_collision_mesh", "api/generated/compas_timber.elements.Plate.compute_geometry", "api/generated/compas_timber.elements.Plate.compute_obb", "api/generated/compas_timber.elements.Plate.compute_worldtransformation", "api/generated/compas_timber.elements.Plate.copy", "api/generated/compas_timber.elements.Plate.from_json", "api/generated/compas_timber.elements.Plate.from_jsonstring", "api/generated/compas_timber.elements.Plate.from_outline_thickness", "api/generated/compas_timber.elements.Plate.remove_blank_extension", "api/generated/compas_timber.elements.Plate.remove_features", "api/generated/compas_timber.elements.Plate.reset", "api/generated/compas_timber.elements.Plate.sha256", "api/generated/compas_timber.elements.Plate.shape", "api/generated/compas_timber.elements.Plate.side_as_surface", "api/generated/compas_timber.elements.Plate.to_json", "api/generated/compas_timber.elements.Plate.to_jsonstring", "api/generated/compas_timber.elements.Plate.transform", "api/generated/compas_timber.elements.Plate.transformed", "api/generated/compas_timber.elements.Plate.validate_data", "api/generated/compas_timber.elements.TimberElement", "api/generated/compas_timber.elements.TimberElement.ToString", "api/generated/compas_timber.elements.TimberElement.add_feature", "api/generated/compas_timber.elements.TimberElement.compute_aabb", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh", "api/generated/compas_timber.elements.TimberElement.compute_geometry", "api/generated/compas_timber.elements.TimberElement.compute_obb", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation", "api/generated/compas_timber.elements.TimberElement.copy", "api/generated/compas_timber.elements.TimberElement.from_json", "api/generated/compas_timber.elements.TimberElement.from_jsonstring", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension", "api/generated/compas_timber.elements.TimberElement.remove_features", "api/generated/compas_timber.elements.TimberElement.reset", "api/generated/compas_timber.elements.TimberElement.sha256", "api/generated/compas_timber.elements.TimberElement.to_json", "api/generated/compas_timber.elements.TimberElement.to_jsonstring", "api/generated/compas_timber.elements.TimberElement.transform", "api/generated/compas_timber.elements.TimberElement.transformed", "api/generated/compas_timber.elements.TimberElement.validate_data", "api/generated/compas_timber.elements.Wall", "api/generated/compas_timber.elements.Wall.ToString", "api/generated/compas_timber.elements.Wall.add_feature", "api/generated/compas_timber.elements.Wall.compute_aabb", "api/generated/compas_timber.elements.Wall.compute_collision_mesh", "api/generated/compas_timber.elements.Wall.compute_geometry", "api/generated/compas_timber.elements.Wall.compute_obb", "api/generated/compas_timber.elements.Wall.compute_worldtransformation", "api/generated/compas_timber.elements.Wall.copy", "api/generated/compas_timber.elements.Wall.from_boundary", "api/generated/compas_timber.elements.Wall.from_brep", "api/generated/compas_timber.elements.Wall.from_json", "api/generated/compas_timber.elements.Wall.from_jsonstring", "api/generated/compas_timber.elements.Wall.remove_blank_extension", "api/generated/compas_timber.elements.Wall.remove_features", "api/generated/compas_timber.elements.Wall.reset", "api/generated/compas_timber.elements.Wall.rotate", "api/generated/compas_timber.elements.Wall.sha256", "api/generated/compas_timber.elements.Wall.to_json", "api/generated/compas_timber.elements.Wall.to_jsonstring", "api/generated/compas_timber.elements.Wall.transform", "api/generated/compas_timber.elements.Wall.transformed", "api/generated/compas_timber.elements.Wall.validate_data", "api/generated/compas_timber.errors.BeamJoiningError", "api/generated/compas_timber.errors.FastenerApplicationError", "api/generated/compas_timber.errors.FeatureApplicationError", "api/generated/compas_timber.fabrication.BTLxPart", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face", "api/generated/compas_timber.fabrication.BTLxProcessing", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing", "api/generated/compas_timber.fabrication.BTLxProcessing.copy", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data", "api/generated/compas_timber.fabrication.BTLxWriter", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer", "api/generated/compas_timber.fabrication.BTLxWriter.write", "api/generated/compas_timber.fabrication.DoubleCut", "api/generated/compas_timber.fabrication.DoubleCut.ToString", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing", "api/generated/compas_timber.fabrication.DoubleCut.apply", "api/generated/compas_timber.fabrication.DoubleCut.copy", "api/generated/compas_timber.fabrication.DoubleCut.from_json", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.sha256", "api/generated/compas_timber.fabrication.DoubleCut.to_json", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.validate_data", "api/generated/compas_timber.fabrication.DovetailMortise", "api/generated/compas_timber.fabrication.DovetailMortise.ToString", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailMortise.apply", "api/generated/compas_timber.fabrication.DovetailMortise.copy", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_json", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.sha256", "api/generated/compas_timber.fabrication.DovetailMortise.to_json", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data", "api/generated/compas_timber.fabrication.DovetailTenon", "api/generated/compas_timber.fabrication.DovetailTenon.ToString", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailTenon.apply", "api/generated/compas_timber.fabrication.DovetailTenon.copy", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.from_json", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.sha256", "api/generated/compas_timber.fabrication.DovetailTenon.to_json", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data", "api/generated/compas_timber.fabrication.Drilling", "api/generated/compas_timber.fabrication.Drilling.ToString", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing", "api/generated/compas_timber.fabrication.Drilling.apply", "api/generated/compas_timber.fabrication.Drilling.copy", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element", "api/generated/compas_timber.fabrication.Drilling.from_json", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element", "api/generated/compas_timber.fabrication.Drilling.sha256", "api/generated/compas_timber.fabrication.Drilling.to_json", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring", "api/generated/compas_timber.fabrication.Drilling.validate_data", "api/generated/compas_timber.fabrication.EdgePositionType", "api/generated/compas_timber.fabrication.FrenchRidgeLap", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data", "api/generated/compas_timber.fabrication.JackRafterCut", "api/generated/compas_timber.fabrication.JackRafterCut.ToString", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing", "api/generated/compas_timber.fabrication.JackRafterCut.apply", "api/generated/compas_timber.fabrication.JackRafterCut.copy", "api/generated/compas_timber.fabrication.JackRafterCut.from_json", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.sha256", "api/generated/compas_timber.fabrication.JackRafterCut.to_json", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data", "api/generated/compas_timber.fabrication.Lap", "api/generated/compas_timber.fabrication.Lap.ToString", "api/generated/compas_timber.fabrication.Lap.add_subprocessing", "api/generated/compas_timber.fabrication.Lap.apply", "api/generated/compas_timber.fabrication.Lap.copy", "api/generated/compas_timber.fabrication.Lap.from_json", "api/generated/compas_timber.fabrication.Lap.from_jsonstring", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam", "api/generated/compas_timber.fabrication.Lap.sha256", "api/generated/compas_timber.fabrication.Lap.to_json", "api/generated/compas_timber.fabrication.Lap.to_jsonstring", "api/generated/compas_timber.fabrication.Lap.validate_data", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.LimitationTopType", "api/generated/compas_timber.fabrication.MachiningLimits", "api/generated/compas_timber.fabrication.Mortise", "api/generated/compas_timber.fabrication.Mortise.ToString", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing", "api/generated/compas_timber.fabrication.Mortise.apply", "api/generated/compas_timber.fabrication.Mortise.copy", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_json", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring", "api/generated/compas_timber.fabrication.Mortise.sha256", "api/generated/compas_timber.fabrication.Mortise.to_json", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring", "api/generated/compas_timber.fabrication.Mortise.validate_data", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.OrientationType", "api/generated/compas_timber.fabrication.Pocket", "api/generated/compas_timber.fabrication.Pocket.ToString", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing", "api/generated/compas_timber.fabrication.Pocket.apply", "api/generated/compas_timber.fabrication.Pocket.copy", "api/generated/compas_timber.fabrication.Pocket.from_json", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element", "api/generated/compas_timber.fabrication.Pocket.sha256", "api/generated/compas_timber.fabrication.Pocket.to_json", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring", "api/generated/compas_timber.fabrication.Pocket.validate_data", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element", "api/generated/compas_timber.fabrication.Slot", "api/generated/compas_timber.fabrication.Slot.ToString", "api/generated/compas_timber.fabrication.Slot.add_subprocessing", "api/generated/compas_timber.fabrication.Slot.apply", "api/generated/compas_timber.fabrication.Slot.copy", "api/generated/compas_timber.fabrication.Slot.from_json", "api/generated/compas_timber.fabrication.Slot.from_jsonstring", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam", "api/generated/compas_timber.fabrication.Slot.sha256", "api/generated/compas_timber.fabrication.Slot.to_json", "api/generated/compas_timber.fabrication.Slot.to_jsonstring", "api/generated/compas_timber.fabrication.Slot.validate_data", "api/generated/compas_timber.fabrication.StepJoint", "api/generated/compas_timber.fabrication.StepJoint.ToString", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing", "api/generated/compas_timber.fabrication.StepJoint.add_tenon", "api/generated/compas_timber.fabrication.StepJoint.apply", "api/generated/compas_timber.fabrication.StepJoint.copy", "api/generated/compas_timber.fabrication.StepJoint.from_json", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.sha256", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.to_json", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.validate_data", "api/generated/compas_timber.fabrication.StepJointNotch", "api/generated/compas_timber.fabrication.StepJointNotch.ToString", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing", "api/generated/compas_timber.fabrication.StepJointNotch.apply", "api/generated/compas_timber.fabrication.StepJointNotch.copy", "api/generated/compas_timber.fabrication.StepJointNotch.from_json", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.sha256", "api/generated/compas_timber.fabrication.StepJointNotch.to_json", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data", "api/generated/compas_timber.fabrication.StepShapeType", "api/generated/compas_timber.fabrication.Tenon", "api/generated/compas_timber.fabrication.Tenon.ToString", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing", "api/generated/compas_timber.fabrication.Tenon.apply", "api/generated/compas_timber.fabrication.Tenon.copy", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Tenon.from_json", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.Tenon.sha256", "api/generated/compas_timber.fabrication.Tenon.to_json", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring", "api/generated/compas_timber.fabrication.Tenon.validate_data", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.TenonShapeType", "api/generated/compas_timber.ghpython.add_gh_param", "api/generated/compas_timber.ghpython.clear_gh_params", "api/generated/compas_timber.ghpython.get_leaf_subclasses", "api/generated/compas_timber.ghpython.item_input_valid", "api/generated/compas_timber.ghpython.list_input_valid", "api/generated/compas_timber.ghpython.manage_dynamic_params", "api/generated/compas_timber.ghpython.rename_gh_input", "api/generated/compas_timber.model.TimberModel", "api/generated/compas_timber.model.TimberModel.ToString", "api/generated/compas_timber.model.TimberModel.add_element", "api/generated/compas_timber.model.TimberModel.add_elements", "api/generated/compas_timber.model.TimberModel.add_group", "api/generated/compas_timber.model.TimberModel.add_group_element", "api/generated/compas_timber.model.TimberModel.add_interaction", "api/generated/compas_timber.model.TimberModel.add_joint", "api/generated/compas_timber.model.TimberModel.add_material", "api/generated/compas_timber.model.TimberModel.assign_material", "api/generated/compas_timber.model.TimberModel.compute_aabb", "api/generated/compas_timber.model.TimberModel.compute_obb", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls", "api/generated/compas_timber.model.TimberModel.copy", "api/generated/compas_timber.model.TimberModel.element_by_guid", "api/generated/compas_timber.model.TimberModel.elements", "api/generated/compas_timber.model.TimberModel.elements_connected_by", "api/generated/compas_timber.model.TimberModel.from_json", "api/generated/compas_timber.model.TimberModel.from_jsonstring", "api/generated/compas_timber.model.TimberModel.get_elements_in_group", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element", "api/generated/compas_timber.model.TimberModel.has_element", "api/generated/compas_timber.model.TimberModel.has_group", "api/generated/compas_timber.model.TimberModel.has_interaction", "api/generated/compas_timber.model.TimberModel.has_material", "api/generated/compas_timber.model.TimberModel.interactions", "api/generated/compas_timber.model.TimberModel.materials", "api/generated/compas_timber.model.TimberModel.process_joinery", "api/generated/compas_timber.model.TimberModel.remove_element", "api/generated/compas_timber.model.TimberModel.remove_interaction", "api/generated/compas_timber.model.TimberModel.remove_joint", "api/generated/compas_timber.model.TimberModel.rotate", "api/generated/compas_timber.model.TimberModel.rotated", "api/generated/compas_timber.model.TimberModel.scale", "api/generated/compas_timber.model.TimberModel.scaled", "api/generated/compas_timber.model.TimberModel.set_topologies", "api/generated/compas_timber.model.TimberModel.sha256", "api/generated/compas_timber.model.TimberModel.to_json", "api/generated/compas_timber.model.TimberModel.to_jsonstring", "api/generated/compas_timber.model.TimberModel.transform", "api/generated/compas_timber.model.TimberModel.transform_numpy", "api/generated/compas_timber.model.TimberModel.transformed", "api/generated/compas_timber.model.TimberModel.transformed_numpy", "api/generated/compas_timber.model.TimberModel.translate", "api/generated/compas_timber.model.TimberModel.translated", "api/generated/compas_timber.model.TimberModel.validate_data", "api/generated/compas_timber.planning.Actor", "api/generated/compas_timber.planning.Actor.get_name", "api/generated/compas_timber.planning.BuildingPlan", "api/generated/compas_timber.planning.BuildingPlan.ToString", "api/generated/compas_timber.planning.BuildingPlan.add_step", "api/generated/compas_timber.planning.BuildingPlan.copy", "api/generated/compas_timber.planning.BuildingPlan.from_json", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.sha256", "api/generated/compas_timber.planning.BuildingPlan.to_json", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.validate_data", "api/generated/compas_timber.planning.BuildingPlanParser", "api/generated/compas_timber.planning.BuildingPlanParser.parse", "api/generated/compas_timber.planning.BuildingPlanParser.serialize", "api/generated/compas_timber.planning.Instruction", "api/generated/compas_timber.planning.Instruction.ToString", "api/generated/compas_timber.planning.Instruction.copy", "api/generated/compas_timber.planning.Instruction.from_json", "api/generated/compas_timber.planning.Instruction.from_jsonstring", "api/generated/compas_timber.planning.Instruction.sha256", "api/generated/compas_timber.planning.Instruction.to_json", "api/generated/compas_timber.planning.Instruction.to_jsonstring", "api/generated/compas_timber.planning.Instruction.transform", "api/generated/compas_timber.planning.Instruction.validate_data", "api/generated/compas_timber.planning.LinearDimension", "api/generated/compas_timber.planning.LinearDimension.ToString", "api/generated/compas_timber.planning.LinearDimension.copy", "api/generated/compas_timber.planning.LinearDimension.from_json", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring", "api/generated/compas_timber.planning.LinearDimension.sha256", "api/generated/compas_timber.planning.LinearDimension.to_json", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring", "api/generated/compas_timber.planning.LinearDimension.transform", "api/generated/compas_timber.planning.LinearDimension.validate_data", "api/generated/compas_timber.planning.Model3d", "api/generated/compas_timber.planning.Model3d.ToString", "api/generated/compas_timber.planning.Model3d.copy", "api/generated/compas_timber.planning.Model3d.from_json", "api/generated/compas_timber.planning.Model3d.from_jsonstring", "api/generated/compas_timber.planning.Model3d.sha256", "api/generated/compas_timber.planning.Model3d.to_json", "api/generated/compas_timber.planning.Model3d.to_jsonstring", "api/generated/compas_timber.planning.Model3d.transform", "api/generated/compas_timber.planning.Model3d.validate_data", "api/generated/compas_timber.planning.SimpleSequenceGenerator", "api/generated/compas_timber.planning.Step", "api/generated/compas_timber.planning.Step.ToString", "api/generated/compas_timber.planning.Step.copy", "api/generated/compas_timber.planning.Step.from_json", "api/generated/compas_timber.planning.Step.from_jsonstring", "api/generated/compas_timber.planning.Step.sha256", "api/generated/compas_timber.planning.Step.to_json", "api/generated/compas_timber.planning.Step.to_jsonstring", "api/generated/compas_timber.planning.Step.transform", "api/generated/compas_timber.planning.Step.validate_data", "api/generated/compas_timber.planning.Text3d", "api/generated/compas_timber.planning.Text3d.ToString", "api/generated/compas_timber.planning.Text3d.copy", "api/generated/compas_timber.planning.Text3d.from_json", "api/generated/compas_timber.planning.Text3d.from_jsonstring", "api/generated/compas_timber.planning.Text3d.sha256", "api/generated/compas_timber.planning.Text3d.to_json", "api/generated/compas_timber.planning.Text3d.to_jsonstring", "api/generated/compas_timber.planning.Text3d.transform", "api/generated/compas_timber.planning.Text3d.validate_data", "api/generated/compas_timber.rhino.find_neighboring_elements", "citing", "examples", "examples/create_joint", "index", "installation", "license", "tutorials", "tutorials/BTLx_contribution_guide", "tutorials/grasshopper/attributes", "tutorials/grasshopper/beams", "tutorials/grasshopper/design", "tutorials/grasshopper/examples", "tutorials/grasshopper/fabrication", "tutorials/grasshopper/features", "tutorials/grasshopper/joint_rules", "tutorials/grasshopper/model", "tutorials/grasshopper/show", "tutorials/grasshopper/utils", "tutorials/grasshopper/workflow"], "filenames": ["api.rst", "api/compas_timber.connections.rst", "api/compas_timber.design.rst", "api/compas_timber.elements.rst", "api/compas_timber.errors.rst", "api/compas_timber.fabrication.rst", "api/compas_timber.ghpython.rst", "api/compas_timber.model.rst", "api/compas_timber.planning.rst", "api/compas_timber.rhino.rst", "api/generated/compas_timber.connections.BallNodeJoint.rst", "api/generated/compas_timber.connections.BallNodeJoint.ToString.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_features.rst", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.BallNodeJoint.copy.rst", "api/generated/compas_timber.connections.BallNodeJoint.create.rst", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.BallNodeJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.BallNodeJoint.sha256.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.validate_data.rst", "api/generated/compas_timber.connections.ConnectionSolver.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_topology.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology.rst", "api/generated/compas_timber.connections.Joint.rst", "api/generated/compas_timber.connections.Joint.ToString.rst", "api/generated/compas_timber.connections.Joint.add_extensions.rst", "api/generated/compas_timber.connections.Joint.add_features.rst", "api/generated/compas_timber.connections.Joint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.Joint.copy.rst", "api/generated/compas_timber.connections.Joint.create.rst", "api/generated/compas_timber.connections.Joint.element_count_complies.rst", "api/generated/compas_timber.connections.Joint.from_json.rst", "api/generated/compas_timber.connections.Joint.from_jsonstring.rst", "api/generated/compas_timber.connections.Joint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.Joint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.Joint.sha256.rst", "api/generated/compas_timber.connections.Joint.to_json.rst", "api/generated/compas_timber.connections.Joint.to_jsonstring.rst", "api/generated/compas_timber.connections.Joint.validate_data.rst", "api/generated/compas_timber.connections.JointTopology.rst", "api/generated/compas_timber.connections.JointTopology.get_name.rst", "api/generated/compas_timber.connections.LButtJoint.rst", "api/generated/compas_timber.connections.LButtJoint.ToString.rst", "api/generated/compas_timber.connections.LButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.LButtJoint.add_features.rst", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LButtJoint.copy.rst", "api/generated/compas_timber.connections.LButtJoint.create.rst", "api/generated/compas_timber.connections.LButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LButtJoint.from_json.rst", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LButtJoint.sha256.rst", "api/generated/compas_timber.connections.LButtJoint.to_json.rst", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles.rst", "api/generated/compas_timber.connections.LButtJoint.validate_data.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LLapJoint.rst", "api/generated/compas_timber.connections.LLapJoint.ToString.rst", "api/generated/compas_timber.connections.LLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LLapJoint.add_features.rst", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LLapJoint.copy.rst", "api/generated/compas_timber.connections.LLapJoint.create.rst", "api/generated/compas_timber.connections.LLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LLapJoint.from_json.rst", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LLapJoint.sha256.rst", "api/generated/compas_timber.connections.LLapJoint.to_json.rst", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LMiterJoint.rst", "api/generated/compas_timber.connections.LMiterJoint.ToString.rst", "api/generated/compas_timber.connections.LMiterJoint.add_extensions.rst", "api/generated/compas_timber.connections.LMiterJoint.add_features.rst", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LMiterJoint.copy.rst", "api/generated/compas_timber.connections.LMiterJoint.create.rst", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LMiterJoint.from_json.rst", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes.rst", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LMiterJoint.sha256.rst", "api/generated/compas_timber.connections.LMiterJoint.to_json.rst", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.validate_data.rst", "api/generated/compas_timber.connections.LapJoint.rst", "api/generated/compas_timber.connections.LapJoint.ToString.rst", "api/generated/compas_timber.connections.LapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LapJoint.add_features.rst", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LapJoint.copy.rst", "api/generated/compas_timber.connections.LapJoint.create.rst", "api/generated/compas_timber.connections.LapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LapJoint.from_json.rst", "api/generated/compas_timber.connections.LapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LapJoint.sha256.rst", "api/generated/compas_timber.connections.LapJoint.to_json.rst", "api/generated/compas_timber.connections.LapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.validate_data.rst", "api/generated/compas_timber.connections.NullJoint.rst", "api/generated/compas_timber.connections.NullJoint.ToString.rst", "api/generated/compas_timber.connections.NullJoint.add_extensions.rst", "api/generated/compas_timber.connections.NullJoint.add_features.rst", "api/generated/compas_timber.connections.NullJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.NullJoint.copy.rst", "api/generated/compas_timber.connections.NullJoint.create.rst", "api/generated/compas_timber.connections.NullJoint.element_count_complies.rst", "api/generated/compas_timber.connections.NullJoint.from_json.rst", "api/generated/compas_timber.connections.NullJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.NullJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.NullJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.NullJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.NullJoint.sha256.rst", "api/generated/compas_timber.connections.NullJoint.to_json.rst", "api/generated/compas_timber.connections.NullJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.NullJoint.validate_data.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.create.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data.rst", "api/generated/compas_timber.connections.TButtJoint.rst", "api/generated/compas_timber.connections.TButtJoint.ToString.rst", "api/generated/compas_timber.connections.TButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.TButtJoint.add_features.rst", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TButtJoint.copy.rst", "api/generated/compas_timber.connections.TButtJoint.create.rst", "api/generated/compas_timber.connections.TButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TButtJoint.from_json.rst", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TButtJoint.sha256.rst", "api/generated/compas_timber.connections.TButtJoint.to_json.rst", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.validate_data.rst", "api/generated/compas_timber.connections.TDovetailJoint.rst", "api/generated/compas_timber.connections.TDovetailJoint.ToString.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_features.rst", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TDovetailJoint.copy.rst", "api/generated/compas_timber.connections.TDovetailJoint.create.rst", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool.rst", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TDovetailJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TDovetailJoint.sha256.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.validate_data.rst", "api/generated/compas_timber.connections.TLapJoint.rst", "api/generated/compas_timber.connections.TLapJoint.ToString.rst", "api/generated/compas_timber.connections.TLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.TLapJoint.add_features.rst", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TLapJoint.copy.rst", "api/generated/compas_timber.connections.TLapJoint.create.rst", "api/generated/compas_timber.connections.TLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TLapJoint.from_json.rst", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TLapJoint.sha256.rst", "api/generated/compas_timber.connections.TLapJoint.to_json.rst", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.validate_data.rst", "api/generated/compas_timber.connections.TStepJoint.rst", "api/generated/compas_timber.connections.TStepJoint.ToString.rst", "api/generated/compas_timber.connections.TStepJoint.add_extensions.rst", "api/generated/compas_timber.connections.TStepJoint.add_features.rst", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TStepJoint.copy.rst", "api/generated/compas_timber.connections.TStepJoint.create.rst", "api/generated/compas_timber.connections.TStepJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TStepJoint.from_json.rst", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TStepJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TStepJoint.set_step_depths.rst", "api/generated/compas_timber.connections.TStepJoint.sha256.rst", "api/generated/compas_timber.connections.TStepJoint.to_json.rst", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.validate_data.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.copy.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.create.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data.rst", "api/generated/compas_timber.connections.XLapJoint.rst", "api/generated/compas_timber.connections.XLapJoint.ToString.rst", "api/generated/compas_timber.connections.XLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.XLapJoint.add_features.rst", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XLapJoint.copy.rst", "api/generated/compas_timber.connections.XLapJoint.create.rst", "api/generated/compas_timber.connections.XLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XLapJoint.from_json.rst", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.XLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XLapJoint.sha256.rst", "api/generated/compas_timber.connections.XLapJoint.to_json.rst", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.validate_data.rst", "api/generated/compas_timber.connections.YButtJoint.rst", "api/generated/compas_timber.connections.YButtJoint.ToString.rst", "api/generated/compas_timber.connections.YButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.YButtJoint.add_features.rst", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.YButtJoint.copy.rst", "api/generated/compas_timber.connections.YButtJoint.create.rst", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.YButtJoint.from_json.rst", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.YButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes.rst", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.YButtJoint.sha256.rst", "api/generated/compas_timber.connections.YButtJoint.to_json.rst", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.validate_data.rst", "api/generated/compas_timber.connections.find_neighboring_elements.rst", "api/generated/compas_timber.design.CategoryRule.rst", "api/generated/compas_timber.design.CategoryRule.ToString.rst", "api/generated/compas_timber.design.CategoryRule.comply.rst", "api/generated/compas_timber.design.CategoryRule.get_category_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_direct_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_topology_rules.rst", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.CategoryRule.reorder.rst", "api/generated/compas_timber.design.DebugInfomation.rst", "api/generated/compas_timber.design.DebugInfomation.ToString.rst", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_feature_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_joint_error.rst", "api/generated/compas_timber.design.DirectRule.rst", "api/generated/compas_timber.design.DirectRule.ToString.rst", "api/generated/compas_timber.design.DirectRule.comply.rst", "api/generated/compas_timber.design.DirectRule.contains.rst", "api/generated/compas_timber.design.DirectRule.get_category_rules.rst", "api/generated/compas_timber.design.DirectRule.get_direct_rules.rst", "api/generated/compas_timber.design.DirectRule.get_topology_rules.rst", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.FeatureDefinition.rst", "api/generated/compas_timber.design.FeatureDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.rst", "api/generated/compas_timber.design.JointDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.is_identical.rst", "api/generated/compas_timber.design.JointDefinition.match.rst", "api/generated/compas_timber.design.JointRule.rst", "api/generated/compas_timber.design.JointRule.comply.rst", "api/generated/compas_timber.design.JointRule.get_category_rules.rst", "api/generated/compas_timber.design.JointRule.get_direct_rules.rst", "api/generated/compas_timber.design.JointRule.get_topology_rules.rst", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.SurfaceModel.rst", "api/generated/compas_timber.design.SurfaceModel.beam_category_names.rst", "api/generated/compas_timber.design.SurfaceModel.create_model.rst", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps.rst", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements.rst", "api/generated/compas_timber.design.SurfaceModel.generate_frame.rst", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams.rst", "api/generated/compas_timber.design.SurfaceModel.generate_plates.rst", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines.rst", "api/generated/compas_timber.design.SurfaceModel.generate_studs.rst", "api/generated/compas_timber.design.SurfaceModel.generate_windows.rst", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections.rst", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices.rst", "api/generated/compas_timber.design.SurfaceModel.offset_elements.rst", "api/generated/compas_timber.design.SurfaceModel.parse_loops.rst", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_studs.rst", "api/generated/compas_timber.design.TopologyRule.rst", "api/generated/compas_timber.design.TopologyRule.ToString.rst", "api/generated/compas_timber.design.TopologyRule.comply.rst", "api/generated/compas_timber.design.TopologyRule.get_category_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_direct_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_topology_rules.rst", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.guess_joint_topology_2beams.rst", "api/generated/compas_timber.design.set_default_joints.rst", "api/generated/compas_timber.elements.Beam.rst", "api/generated/compas_timber.elements.Beam.ToString.rst", "api/generated/compas_timber.elements.Beam.add_blank_extension.rst", "api/generated/compas_timber.elements.Beam.add_feature.rst", "api/generated/compas_timber.elements.Beam.add_features.rst", "api/generated/compas_timber.elements.Beam.back_side.rst", "api/generated/compas_timber.elements.Beam.compute_aabb.rst", "api/generated/compas_timber.elements.Beam.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Beam.compute_geometry.rst", "api/generated/compas_timber.elements.Beam.compute_obb.rst", "api/generated/compas_timber.elements.Beam.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Beam.copy.rst", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point.rst", "api/generated/compas_timber.elements.Beam.extension_to_plane.rst", "api/generated/compas_timber.elements.Beam.from_centerline.rst", "api/generated/compas_timber.elements.Beam.from_endpoints.rst", "api/generated/compas_timber.elements.Beam.from_json.rst", "api/generated/compas_timber.elements.Beam.from_jsonstring.rst", "api/generated/compas_timber.elements.Beam.front_side.rst", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side.rst", "api/generated/compas_timber.elements.Beam.opp_side.rst", "api/generated/compas_timber.elements.Beam.remove_blank_extension.rst", "api/generated/compas_timber.elements.Beam.remove_features.rst", "api/generated/compas_timber.elements.Beam.reset.rst", "api/generated/compas_timber.elements.Beam.sha256.rst", "api/generated/compas_timber.elements.Beam.side_as_surface.rst", "api/generated/compas_timber.elements.Beam.to_json.rst", "api/generated/compas_timber.elements.Beam.to_jsonstring.rst", "api/generated/compas_timber.elements.Beam.transform.rst", "api/generated/compas_timber.elements.Beam.transformed.rst", "api/generated/compas_timber.elements.Beam.validate_data.rst", "api/generated/compas_timber.elements.Fastener.rst", "api/generated/compas_timber.elements.Fastener.ToString.rst", "api/generated/compas_timber.elements.Fastener.add_feature.rst", "api/generated/compas_timber.elements.Fastener.compute_aabb.rst", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Fastener.compute_geometry.rst", "api/generated/compas_timber.elements.Fastener.compute_obb.rst", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Fastener.copy.rst", "api/generated/compas_timber.elements.Fastener.from_json.rst", "api/generated/compas_timber.elements.Fastener.from_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.remove_blank_extension.rst", "api/generated/compas_timber.elements.Fastener.remove_features.rst", "api/generated/compas_timber.elements.Fastener.reset.rst", "api/generated/compas_timber.elements.Fastener.sha256.rst", "api/generated/compas_timber.elements.Fastener.to_json.rst", "api/generated/compas_timber.elements.Fastener.to_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.transform.rst", "api/generated/compas_timber.elements.Fastener.transformed.rst", "api/generated/compas_timber.elements.Fastener.validate_data.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.copy.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data.rst", "api/generated/compas_timber.elements.Plate.rst", "api/generated/compas_timber.elements.Plate.ToString.rst", "api/generated/compas_timber.elements.Plate.add_feature.rst", "api/generated/compas_timber.elements.Plate.add_features.rst", "api/generated/compas_timber.elements.Plate.compute_aabb.rst", "api/generated/compas_timber.elements.Plate.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Plate.compute_geometry.rst", "api/generated/compas_timber.elements.Plate.compute_obb.rst", "api/generated/compas_timber.elements.Plate.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Plate.copy.rst", "api/generated/compas_timber.elements.Plate.from_json.rst", "api/generated/compas_timber.elements.Plate.from_jsonstring.rst", "api/generated/compas_timber.elements.Plate.from_outline_thickness.rst", "api/generated/compas_timber.elements.Plate.remove_blank_extension.rst", "api/generated/compas_timber.elements.Plate.remove_features.rst", "api/generated/compas_timber.elements.Plate.reset.rst", "api/generated/compas_timber.elements.Plate.sha256.rst", "api/generated/compas_timber.elements.Plate.shape.rst", "api/generated/compas_timber.elements.Plate.side_as_surface.rst", "api/generated/compas_timber.elements.Plate.to_json.rst", "api/generated/compas_timber.elements.Plate.to_jsonstring.rst", "api/generated/compas_timber.elements.Plate.transform.rst", "api/generated/compas_timber.elements.Plate.transformed.rst", "api/generated/compas_timber.elements.Plate.validate_data.rst", "api/generated/compas_timber.elements.TimberElement.rst", "api/generated/compas_timber.elements.TimberElement.ToString.rst", "api/generated/compas_timber.elements.TimberElement.add_feature.rst", "api/generated/compas_timber.elements.TimberElement.compute_aabb.rst", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh.rst", "api/generated/compas_timber.elements.TimberElement.compute_geometry.rst", "api/generated/compas_timber.elements.TimberElement.compute_obb.rst", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation.rst", "api/generated/compas_timber.elements.TimberElement.copy.rst", "api/generated/compas_timber.elements.TimberElement.from_json.rst", "api/generated/compas_timber.elements.TimberElement.from_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension.rst", "api/generated/compas_timber.elements.TimberElement.remove_features.rst", "api/generated/compas_timber.elements.TimberElement.reset.rst", "api/generated/compas_timber.elements.TimberElement.sha256.rst", "api/generated/compas_timber.elements.TimberElement.to_json.rst", "api/generated/compas_timber.elements.TimberElement.to_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.transform.rst", "api/generated/compas_timber.elements.TimberElement.transformed.rst", "api/generated/compas_timber.elements.TimberElement.validate_data.rst", "api/generated/compas_timber.elements.Wall.rst", "api/generated/compas_timber.elements.Wall.ToString.rst", "api/generated/compas_timber.elements.Wall.add_feature.rst", "api/generated/compas_timber.elements.Wall.compute_aabb.rst", "api/generated/compas_timber.elements.Wall.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Wall.compute_geometry.rst", "api/generated/compas_timber.elements.Wall.compute_obb.rst", "api/generated/compas_timber.elements.Wall.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Wall.copy.rst", "api/generated/compas_timber.elements.Wall.from_boundary.rst", "api/generated/compas_timber.elements.Wall.from_brep.rst", "api/generated/compas_timber.elements.Wall.from_json.rst", "api/generated/compas_timber.elements.Wall.from_jsonstring.rst", "api/generated/compas_timber.elements.Wall.remove_blank_extension.rst", "api/generated/compas_timber.elements.Wall.remove_features.rst", "api/generated/compas_timber.elements.Wall.reset.rst", "api/generated/compas_timber.elements.Wall.rotate.rst", "api/generated/compas_timber.elements.Wall.sha256.rst", "api/generated/compas_timber.elements.Wall.to_json.rst", "api/generated/compas_timber.elements.Wall.to_jsonstring.rst", "api/generated/compas_timber.elements.Wall.transform.rst", "api/generated/compas_timber.elements.Wall.transformed.rst", "api/generated/compas_timber.elements.Wall.validate_data.rst", "api/generated/compas_timber.errors.BeamJoiningError.rst", "api/generated/compas_timber.errors.FastenerApplicationError.rst", "api/generated/compas_timber.errors.FeatureApplicationError.rst", "api/generated/compas_timber.fabrication.BTLxPart.rst", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals.rst", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.copy.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data.rst", "api/generated/compas_timber.fabrication.BTLxWriter.rst", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml.rst", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer.rst", "api/generated/compas_timber.fabrication.BTLxWriter.write.rst", "api/generated/compas_timber.fabrication.DoubleCut.rst", "api/generated/compas_timber.fabrication.DoubleCut.ToString.rst", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DoubleCut.apply.rst", "api/generated/compas_timber.fabrication.DoubleCut.copy.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.sha256.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailMortise.rst", "api/generated/compas_timber.fabrication.DovetailMortise.ToString.rst", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailMortise.apply.rst", "api/generated/compas_timber.fabrication.DovetailMortise.copy.rst", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.sha256.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailTenon.rst", "api/generated/compas_timber.fabrication.DovetailTenon.ToString.rst", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailTenon.apply.rst", "api/generated/compas_timber.fabrication.DovetailTenon.copy.rst", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.sha256.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data.rst", "api/generated/compas_timber.fabrication.Drilling.rst", "api/generated/compas_timber.fabrication.Drilling.ToString.rst", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Drilling.apply.rst", "api/generated/compas_timber.fabrication.Drilling.copy.rst", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_json.rst", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.sha256.rst", "api/generated/compas_timber.fabrication.Drilling.to_json.rst", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.validate_data.rst", "api/generated/compas_timber.fabrication.EdgePositionType.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data.rst", "api/generated/compas_timber.fabrication.JackRafterCut.rst", "api/generated/compas_timber.fabrication.JackRafterCut.ToString.rst", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.JackRafterCut.apply.rst", "api/generated/compas_timber.fabrication.JackRafterCut.copy.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.sha256.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.rst", "api/generated/compas_timber.fabrication.Lap.ToString.rst", "api/generated/compas_timber.fabrication.Lap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Lap.apply.rst", "api/generated/compas_timber.fabrication.Lap.copy.rst", "api/generated/compas_timber.fabrication.Lap.from_json.rst", "api/generated/compas_timber.fabrication.Lap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.sha256.rst", "api/generated/compas_timber.fabrication.Lap.to_json.rst", "api/generated/compas_timber.fabrication.Lap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LimitationTopType.rst", "api/generated/compas_timber.fabrication.MachiningLimits.rst", "api/generated/compas_timber.fabrication.Mortise.rst", "api/generated/compas_timber.fabrication.Mortise.ToString.rst", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Mortise.apply.rst", "api/generated/compas_timber.fabrication.Mortise.copy.rst", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_json.rst", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.sha256.rst", "api/generated/compas_timber.fabrication.Mortise.to_json.rst", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.validate_data.rst", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.OrientationType.rst", "api/generated/compas_timber.fabrication.Pocket.rst", "api/generated/compas_timber.fabrication.Pocket.ToString.rst", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Pocket.apply.rst", "api/generated/compas_timber.fabrication.Pocket.copy.rst", "api/generated/compas_timber.fabrication.Pocket.from_json.rst", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.sha256.rst", "api/generated/compas_timber.fabrication.Pocket.to_json.rst", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.validate_data.rst", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Slot.rst", "api/generated/compas_timber.fabrication.Slot.ToString.rst", "api/generated/compas_timber.fabrication.Slot.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Slot.apply.rst", "api/generated/compas_timber.fabrication.Slot.copy.rst", "api/generated/compas_timber.fabrication.Slot.from_json.rst", "api/generated/compas_timber.fabrication.Slot.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Slot.sha256.rst", "api/generated/compas_timber.fabrication.Slot.to_json.rst", "api/generated/compas_timber.fabrication.Slot.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.validate_data.rst", "api/generated/compas_timber.fabrication.StepJoint.rst", "api/generated/compas_timber.fabrication.StepJoint.ToString.rst", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJoint.add_tenon.rst", "api/generated/compas_timber.fabrication.StepJoint.apply.rst", "api/generated/compas_timber.fabrication.StepJoint.copy.rst", "api/generated/compas_timber.fabrication.StepJoint.from_json.rst", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.sha256.rst", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.to_json.rst", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.validate_data.rst", "api/generated/compas_timber.fabrication.StepJointNotch.rst", "api/generated/compas_timber.fabrication.StepJointNotch.ToString.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJointNotch.apply.rst", "api/generated/compas_timber.fabrication.StepJointNotch.copy.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.sha256.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data.rst", "api/generated/compas_timber.fabrication.StepShapeType.rst", "api/generated/compas_timber.fabrication.Tenon.rst", "api/generated/compas_timber.fabrication.Tenon.ToString.rst", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Tenon.apply.rst", "api/generated/compas_timber.fabrication.Tenon.copy.rst", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.from_json.rst", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.sha256.rst", "api/generated/compas_timber.fabrication.Tenon.to_json.rst", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.validate_data.rst", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.TenonShapeType.rst", "api/generated/compas_timber.ghpython.add_gh_param.rst", "api/generated/compas_timber.ghpython.clear_gh_params.rst", "api/generated/compas_timber.ghpython.get_leaf_subclasses.rst", "api/generated/compas_timber.ghpython.item_input_valid.rst", "api/generated/compas_timber.ghpython.list_input_valid.rst", "api/generated/compas_timber.ghpython.manage_dynamic_params.rst", "api/generated/compas_timber.ghpython.rename_gh_input.rst", "api/generated/compas_timber.model.TimberModel.rst", "api/generated/compas_timber.model.TimberModel.ToString.rst", "api/generated/compas_timber.model.TimberModel.add_element.rst", "api/generated/compas_timber.model.TimberModel.add_elements.rst", "api/generated/compas_timber.model.TimberModel.add_group.rst", "api/generated/compas_timber.model.TimberModel.add_group_element.rst", "api/generated/compas_timber.model.TimberModel.add_interaction.rst", "api/generated/compas_timber.model.TimberModel.add_joint.rst", "api/generated/compas_timber.model.TimberModel.add_material.rst", "api/generated/compas_timber.model.TimberModel.assign_material.rst", "api/generated/compas_timber.model.TimberModel.compute_aabb.rst", "api/generated/compas_timber.model.TimberModel.compute_obb.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls.rst", "api/generated/compas_timber.model.TimberModel.copy.rst", "api/generated/compas_timber.model.TimberModel.element_by_guid.rst", "api/generated/compas_timber.model.TimberModel.elements.rst", "api/generated/compas_timber.model.TimberModel.elements_connected_by.rst", "api/generated/compas_timber.model.TimberModel.from_json.rst", "api/generated/compas_timber.model.TimberModel.from_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.get_elements_in_group.rst", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element.rst", "api/generated/compas_timber.model.TimberModel.has_element.rst", "api/generated/compas_timber.model.TimberModel.has_group.rst", "api/generated/compas_timber.model.TimberModel.has_interaction.rst", "api/generated/compas_timber.model.TimberModel.has_material.rst", "api/generated/compas_timber.model.TimberModel.interactions.rst", "api/generated/compas_timber.model.TimberModel.materials.rst", "api/generated/compas_timber.model.TimberModel.process_joinery.rst", "api/generated/compas_timber.model.TimberModel.remove_element.rst", "api/generated/compas_timber.model.TimberModel.remove_interaction.rst", "api/generated/compas_timber.model.TimberModel.remove_joint.rst", "api/generated/compas_timber.model.TimberModel.rotate.rst", "api/generated/compas_timber.model.TimberModel.rotated.rst", "api/generated/compas_timber.model.TimberModel.scale.rst", "api/generated/compas_timber.model.TimberModel.scaled.rst", "api/generated/compas_timber.model.TimberModel.set_topologies.rst", "api/generated/compas_timber.model.TimberModel.sha256.rst", "api/generated/compas_timber.model.TimberModel.to_json.rst", "api/generated/compas_timber.model.TimberModel.to_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.transform.rst", "api/generated/compas_timber.model.TimberModel.transform_numpy.rst", "api/generated/compas_timber.model.TimberModel.transformed.rst", "api/generated/compas_timber.model.TimberModel.transformed_numpy.rst", "api/generated/compas_timber.model.TimberModel.translate.rst", "api/generated/compas_timber.model.TimberModel.translated.rst", "api/generated/compas_timber.model.TimberModel.validate_data.rst", "api/generated/compas_timber.planning.Actor.rst", "api/generated/compas_timber.planning.Actor.get_name.rst", "api/generated/compas_timber.planning.BuildingPlan.rst", "api/generated/compas_timber.planning.BuildingPlan.ToString.rst", "api/generated/compas_timber.planning.BuildingPlan.add_step.rst", "api/generated/compas_timber.planning.BuildingPlan.copy.rst", "api/generated/compas_timber.planning.BuildingPlan.from_json.rst", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.sha256.rst", "api/generated/compas_timber.planning.BuildingPlan.to_json.rst", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.validate_data.rst", "api/generated/compas_timber.planning.BuildingPlanParser.rst", "api/generated/compas_timber.planning.BuildingPlanParser.parse.rst", "api/generated/compas_timber.planning.BuildingPlanParser.serialize.rst", "api/generated/compas_timber.planning.Instruction.rst", "api/generated/compas_timber.planning.Instruction.ToString.rst", "api/generated/compas_timber.planning.Instruction.copy.rst", "api/generated/compas_timber.planning.Instruction.from_json.rst", "api/generated/compas_timber.planning.Instruction.from_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.sha256.rst", "api/generated/compas_timber.planning.Instruction.to_json.rst", "api/generated/compas_timber.planning.Instruction.to_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.transform.rst", "api/generated/compas_timber.planning.Instruction.validate_data.rst", "api/generated/compas_timber.planning.LinearDimension.rst", "api/generated/compas_timber.planning.LinearDimension.ToString.rst", "api/generated/compas_timber.planning.LinearDimension.copy.rst", "api/generated/compas_timber.planning.LinearDimension.from_json.rst", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.sha256.rst", "api/generated/compas_timber.planning.LinearDimension.to_json.rst", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.transform.rst", "api/generated/compas_timber.planning.LinearDimension.validate_data.rst", "api/generated/compas_timber.planning.Model3d.rst", "api/generated/compas_timber.planning.Model3d.ToString.rst", "api/generated/compas_timber.planning.Model3d.copy.rst", "api/generated/compas_timber.planning.Model3d.from_json.rst", "api/generated/compas_timber.planning.Model3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.sha256.rst", "api/generated/compas_timber.planning.Model3d.to_json.rst", "api/generated/compas_timber.planning.Model3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.transform.rst", "api/generated/compas_timber.planning.Model3d.validate_data.rst", "api/generated/compas_timber.planning.SimpleSequenceGenerator.rst", "api/generated/compas_timber.planning.Step.rst", "api/generated/compas_timber.planning.Step.ToString.rst", "api/generated/compas_timber.planning.Step.copy.rst", "api/generated/compas_timber.planning.Step.from_json.rst", "api/generated/compas_timber.planning.Step.from_jsonstring.rst", "api/generated/compas_timber.planning.Step.sha256.rst", "api/generated/compas_timber.planning.Step.to_json.rst", "api/generated/compas_timber.planning.Step.to_jsonstring.rst", "api/generated/compas_timber.planning.Step.transform.rst", "api/generated/compas_timber.planning.Step.validate_data.rst", "api/generated/compas_timber.planning.Text3d.rst", "api/generated/compas_timber.planning.Text3d.ToString.rst", "api/generated/compas_timber.planning.Text3d.copy.rst", "api/generated/compas_timber.planning.Text3d.from_json.rst", "api/generated/compas_timber.planning.Text3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.sha256.rst", "api/generated/compas_timber.planning.Text3d.to_json.rst", "api/generated/compas_timber.planning.Text3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.transform.rst", "api/generated/compas_timber.planning.Text3d.validate_data.rst", "api/generated/compas_timber.rhino.find_neighboring_elements.rst", "citing.rst", "examples.rst", "examples/create_joint.rst", "index.rst", "installation.rst", "license.rst", "tutorials.rst", "tutorials/BTLx_contribution_guide.rst", "tutorials/grasshopper/attributes.rst", "tutorials/grasshopper/beams.rst", "tutorials/grasshopper/design.rst", "tutorials/grasshopper/examples.rst", "tutorials/grasshopper/fabrication.rst", "tutorials/grasshopper/features.rst", "tutorials/grasshopper/joint_rules.rst", "tutorials/grasshopper/model.rst", "tutorials/grasshopper/show.rst", "tutorials/grasshopper/utils.rst", "tutorials/grasshopper/workflow.rst"], "titles": ["API Reference", "compas_timber.connections", "compas_timber.design", "compas_timber.elements", "compas_timber.errors", "compas_timber.fabrication", "compas_timber.ghpython", "compas_timber.model", "compas_timber.planning", "compas_timber.rhino", "BallNodeJoint", "BallNodeJoint.ToString", "BallNodeJoint.add_extensions", "BallNodeJoint.add_features", "BallNodeJoint.check_elements_compatibility", "BallNodeJoint.copy", "BallNodeJoint.create", "BallNodeJoint.element_count_complies", "BallNodeJoint.from_json", "BallNodeJoint.from_jsonstring", "BallNodeJoint.get_face_most_ortho_to_beam", "BallNodeJoint.get_face_most_towards_beam", "BallNodeJoint.restore_beams_from_keys", "BallNodeJoint.sha256", "BallNodeJoint.to_json", "BallNodeJoint.to_jsonstring", "BallNodeJoint.validate_data", "ConnectionSolver", "ConnectionSolver.find_intersecting_pairs", "ConnectionSolver.find_topology", "ConnectionSolver.find_wall_wall_topology", "Joint", "Joint.ToString", "Joint.add_extensions", "Joint.add_features", "Joint.check_elements_compatibility", "Joint.copy", "Joint.create", "Joint.element_count_complies", "Joint.from_json", "Joint.from_jsonstring", "Joint.get_face_most_ortho_to_beam", "Joint.get_face_most_towards_beam", "Joint.restore_beams_from_keys", "Joint.sha256", "Joint.to_json", "Joint.to_jsonstring", "Joint.validate_data", "JointTopology", "JointTopology.get_name", "LButtJoint", "LButtJoint.ToString", "LButtJoint.add_extensions", "LButtJoint.add_features", "LButtJoint.check_elements_compatibility", "LButtJoint.copy", "LButtJoint.create", "LButtJoint.element_count_complies", "LButtJoint.from_json", "LButtJoint.from_jsonstring", "LButtJoint.get_face_most_ortho_to_beam", "LButtJoint.get_face_most_towards_beam", "LButtJoint.restore_beams_from_keys", "LButtJoint.sha256", "LButtJoint.to_json", "LButtJoint.to_jsonstring", "LButtJoint.update_beam_roles", "LButtJoint.validate_data", "LFrenchRidgeLapJoint", "LFrenchRidgeLapJoint.ToString", "LFrenchRidgeLapJoint.add_extensions", "LFrenchRidgeLapJoint.add_features", "LFrenchRidgeLapJoint.check_elements_compatibility", "LFrenchRidgeLapJoint.copy", "LFrenchRidgeLapJoint.create", "LFrenchRidgeLapJoint.element_count_complies", "LFrenchRidgeLapJoint.from_json", "LFrenchRidgeLapJoint.from_jsonstring", "LFrenchRidgeLapJoint.get_face_most_ortho_to_beam", "LFrenchRidgeLapJoint.get_face_most_towards_beam", "LFrenchRidgeLapJoint.restore_beams_from_keys", "LFrenchRidgeLapJoint.sha256", "LFrenchRidgeLapJoint.to_json", "LFrenchRidgeLapJoint.to_jsonstring", "LFrenchRidgeLapJoint.validate_data", "LLapJoint", "LLapJoint.ToString", "LLapJoint.add_extensions", "LLapJoint.add_features", "LLapJoint.check_elements_compatibility", "LLapJoint.copy", "LLapJoint.create", "LLapJoint.element_count_complies", "LLapJoint.from_json", "LLapJoint.from_jsonstring", "LLapJoint.get_face_most_ortho_to_beam", "LLapJoint.get_face_most_towards_beam", "LLapJoint.restore_beams_from_keys", "LLapJoint.sha256", "LLapJoint.to_json", "LLapJoint.to_jsonstring", "LLapJoint.validate_data", "LMiterJoint", "LMiterJoint.ToString", "LMiterJoint.add_extensions", "LMiterJoint.add_features", "LMiterJoint.check_elements_compatibility", "LMiterJoint.copy", "LMiterJoint.create", "LMiterJoint.element_count_complies", "LMiterJoint.from_json", "LMiterJoint.from_jsonstring", "LMiterJoint.get_cutoff_plane", "LMiterJoint.get_cutting_planes", "LMiterJoint.get_face_most_ortho_to_beam", "LMiterJoint.get_face_most_towards_beam", "LMiterJoint.restore_beams_from_keys", "LMiterJoint.sha256", "LMiterJoint.to_json", "LMiterJoint.to_jsonstring", "LMiterJoint.validate_data", "LapJoint", "LapJoint.ToString", "LapJoint.add_extensions", "LapJoint.add_features", "LapJoint.check_elements_compatibility", "LapJoint.copy", "LapJoint.create", "LapJoint.element_count_complies", "LapJoint.from_json", "LapJoint.from_jsonstring", "LapJoint.get_face_most_ortho_to_beam", "LapJoint.get_face_most_towards_beam", "LapJoint.restore_beams_from_keys", "LapJoint.sha256", "LapJoint.to_json", "LapJoint.to_jsonstring", "LapJoint.validate_data", "NullJoint", "NullJoint.ToString", "NullJoint.add_extensions", "NullJoint.add_features", "NullJoint.check_elements_compatibility", "NullJoint.copy", "NullJoint.create", "NullJoint.element_count_complies", "NullJoint.from_json", "NullJoint.from_jsonstring", "NullJoint.get_face_most_ortho_to_beam", "NullJoint.get_face_most_towards_beam", "NullJoint.restore_beams_from_keys", "NullJoint.sha256", "NullJoint.to_json", "NullJoint.to_jsonstring", "NullJoint.validate_data", "TBirdsmouthJoint", "TBirdsmouthJoint.ToString", "TBirdsmouthJoint.add_extensions", "TBirdsmouthJoint.add_features", "TBirdsmouthJoint.check_elements_compatibility", "TBirdsmouthJoint.copy", "TBirdsmouthJoint.create", "TBirdsmouthJoint.element_count_complies", "TBirdsmouthJoint.from_json", "TBirdsmouthJoint.from_jsonstring", "TBirdsmouthJoint.get_face_most_ortho_to_beam", "TBirdsmouthJoint.get_face_most_towards_beam", "TBirdsmouthJoint.restore_beams_from_keys", "TBirdsmouthJoint.sha256", "TBirdsmouthJoint.to_json", "TBirdsmouthJoint.to_jsonstring", "TBirdsmouthJoint.validate_data", "TButtJoint", "TButtJoint.ToString", "TButtJoint.add_extensions", "TButtJoint.add_features", "TButtJoint.check_elements_compatibility", "TButtJoint.copy", "TButtJoint.create", "TButtJoint.element_count_complies", "TButtJoint.from_json", "TButtJoint.from_jsonstring", "TButtJoint.get_face_most_ortho_to_beam", "TButtJoint.get_face_most_towards_beam", "TButtJoint.restore_beams_from_keys", "TButtJoint.sha256", "TButtJoint.to_json", "TButtJoint.to_jsonstring", "TButtJoint.validate_data", "TDovetailJoint", "TDovetailJoint.ToString", "TDovetailJoint.add_extensions", "TDovetailJoint.add_features", "TDovetailJoint.check_elements_compatibility", "TDovetailJoint.copy", "TDovetailJoint.create", "TDovetailJoint.define_dovetail_tool", "TDovetailJoint.element_count_complies", "TDovetailJoint.from_json", "TDovetailJoint.from_jsonstring", "TDovetailJoint.get_face_most_ortho_to_beam", "TDovetailJoint.get_face_most_towards_beam", "TDovetailJoint.restore_beams_from_keys", "TDovetailJoint.sha256", "TDovetailJoint.to_json", "TDovetailJoint.to_jsonstring", "TDovetailJoint.validate_data", "TLapJoint", "TLapJoint.ToString", "TLapJoint.add_extensions", "TLapJoint.add_features", "TLapJoint.check_elements_compatibility", "TLapJoint.copy", "TLapJoint.create", "TLapJoint.element_count_complies", "TLapJoint.from_json", "TLapJoint.from_jsonstring", "TLapJoint.get_face_most_ortho_to_beam", "TLapJoint.get_face_most_towards_beam", "TLapJoint.restore_beams_from_keys", "TLapJoint.sha256", "TLapJoint.to_json", "TLapJoint.to_jsonstring", "TLapJoint.validate_data", "TStepJoint", "TStepJoint.ToString", "TStepJoint.add_extensions", "TStepJoint.add_features", "TStepJoint.check_elements_compatibility", "TStepJoint.copy", "TStepJoint.create", "TStepJoint.element_count_complies", "TStepJoint.from_json", "TStepJoint.from_jsonstring", "TStepJoint.get_face_most_ortho_to_beam", "TStepJoint.get_face_most_towards_beam", "TStepJoint.restore_beams_from_keys", "TStepJoint.set_step_depths", "TStepJoint.sha256", "TStepJoint.to_json", "TStepJoint.to_jsonstring", "TStepJoint.validate_data", "TenonMortiseJoint", "TenonMortiseJoint.ToString", "TenonMortiseJoint.add_extensions", "TenonMortiseJoint.add_features", "TenonMortiseJoint.check_elements_compatibility", "TenonMortiseJoint.copy", "TenonMortiseJoint.create", "TenonMortiseJoint.element_count_complies", "TenonMortiseJoint.from_json", "TenonMortiseJoint.from_jsonstring", "TenonMortiseJoint.get_face_most_ortho_to_beam", "TenonMortiseJoint.get_face_most_towards_beam", "TenonMortiseJoint.restore_beams_from_keys", "TenonMortiseJoint.set_default_values", "TenonMortiseJoint.sha256", "TenonMortiseJoint.to_json", "TenonMortiseJoint.to_jsonstring", "TenonMortiseJoint.validate_data", "XLapJoint", "XLapJoint.ToString", "XLapJoint.add_extensions", "XLapJoint.add_features", "XLapJoint.check_elements_compatibility", "XLapJoint.copy", "XLapJoint.create", "XLapJoint.element_count_complies", "XLapJoint.from_json", "XLapJoint.from_jsonstring", "XLapJoint.get_face_most_ortho_to_beam", "XLapJoint.get_face_most_towards_beam", "XLapJoint.restore_beams_from_keys", "XLapJoint.sha256", "XLapJoint.to_json", "XLapJoint.to_jsonstring", "XLapJoint.validate_data", "YButtJoint", "YButtJoint.ToString", "YButtJoint.add_extensions", "YButtJoint.add_features", "YButtJoint.check_elements_compatibility", "YButtJoint.copy", "YButtJoint.create", "YButtJoint.cross_beam_ref_side_index", "YButtJoint.element_count_complies", "YButtJoint.from_json", "YButtJoint.from_jsonstring", "YButtJoint.get_face_most_ortho_to_beam", "YButtJoint.get_face_most_towards_beam", "YButtJoint.get_miter_planes", "YButtJoint.main_beam_ref_side_index", "YButtJoint.restore_beams_from_keys", "YButtJoint.sha256", "YButtJoint.to_json", "YButtJoint.to_jsonstring", "YButtJoint.validate_data", "find_neighboring_elements", "CategoryRule", "CategoryRule.ToString", "CategoryRule.comply", "CategoryRule.get_category_rules", "CategoryRule.get_direct_rules", "CategoryRule.get_topology_rules", "CategoryRule.joints_from_beams_and_rules", "CategoryRule.reorder", "DebugInfomation", "DebugInfomation.ToString", "DebugInfomation.add_fastener_error", "DebugInfomation.add_feature_error", "DebugInfomation.add_joint_error", "DirectRule", "DirectRule.ToString", "DirectRule.comply", "DirectRule.contains", "DirectRule.get_category_rules", "DirectRule.get_direct_rules", "DirectRule.get_topology_rules", "DirectRule.joints_from_beams_and_rules", "FeatureDefinition", "FeatureDefinition.ToString", "JointDefinition", "JointDefinition.ToString", "JointDefinition.is_identical", "JointDefinition.match", "JointRule", "JointRule.comply", "JointRule.get_category_rules", "JointRule.get_direct_rules", "JointRule.get_topology_rules", "JointRule.joints_from_beams_and_rules", "SurfaceModel", "SurfaceModel.beam_category_names", "SurfaceModel.create_model", "SurfaceModel.cull_overlaps", "SurfaceModel.distance_between_elements", "SurfaceModel.generate_frame", "SurfaceModel.generate_perimeter_beams", "SurfaceModel.generate_plates", "SurfaceModel.generate_stud_lines", "SurfaceModel.generate_studs", "SurfaceModel.generate_windows", "SurfaceModel.get_beam_intersections", "SurfaceModel.get_interior_segment_indices", "SurfaceModel.offset_elements", "SurfaceModel.parse_loops", "SurfaceModel.trim_jack_studs", "SurfaceModel.trim_king_studs", "SurfaceModel.trim_studs", "TopologyRule", "TopologyRule.ToString", "TopologyRule.comply", "TopologyRule.get_category_rules", "TopologyRule.get_direct_rules", "TopologyRule.get_topology_rules", "TopologyRule.joints_from_beams_and_rules", "guess_joint_topology_2beams", "set_default_joints", "Beam", "Beam.ToString", "Beam.add_blank_extension", "Beam.add_feature", "Beam.add_features", "Beam.back_side", "Beam.compute_aabb", "Beam.compute_collision_mesh", "Beam.compute_geometry", "Beam.compute_obb", "Beam.compute_worldtransformation", "Beam.copy", "Beam.endpoint_closest_to_point", "Beam.extension_to_plane", "Beam.from_centerline", "Beam.from_endpoints", "Beam.from_json", "Beam.from_jsonstring", "Beam.front_side", "Beam.get_dimensions_relative_to_side", "Beam.opp_side", "Beam.remove_blank_extension", "Beam.remove_features", "Beam.reset", "Beam.sha256", "Beam.side_as_surface", "Beam.to_json", "Beam.to_jsonstring", "Beam.transform", "Beam.transformed", "Beam.validate_data", "Fastener", "Fastener.ToString", "Fastener.add_feature", "Fastener.compute_aabb", "Fastener.compute_collision_mesh", "Fastener.compute_geometry", "Fastener.compute_obb", "Fastener.compute_worldtransformation", "Fastener.copy", "Fastener.from_json", "Fastener.from_jsonstring", "Fastener.remove_blank_extension", "Fastener.remove_features", "Fastener.reset", "Fastener.sha256", "Fastener.to_json", "Fastener.to_jsonstring", "Fastener.transform", "Fastener.transformed", "Fastener.validate_data", "FastenerTimberInterface", "FastenerTimberInterface.ToString", "FastenerTimberInterface.copy", "FastenerTimberInterface.from_json", "FastenerTimberInterface.from_jsonstring", "FastenerTimberInterface.get_features", "FastenerTimberInterface.sha256", "FastenerTimberInterface.to_json", "FastenerTimberInterface.to_jsonstring", "FastenerTimberInterface.validate_data", "Plate", "Plate.ToString", "Plate.add_feature", "Plate.add_features", "Plate.compute_aabb", "Plate.compute_collision_mesh", "Plate.compute_geometry", "Plate.compute_obb", "Plate.compute_worldtransformation", "Plate.copy", "Plate.from_json", "Plate.from_jsonstring", "Plate.from_outline_thickness", "Plate.remove_blank_extension", "Plate.remove_features", "Plate.reset", "Plate.sha256", "Plate.shape", "Plate.side_as_surface", "Plate.to_json", "Plate.to_jsonstring", "Plate.transform", "Plate.transformed", "Plate.validate_data", "TimberElement", "TimberElement.ToString", "TimberElement.add_feature", "TimberElement.compute_aabb", "TimberElement.compute_collision_mesh", "TimberElement.compute_geometry", "TimberElement.compute_obb", "TimberElement.compute_worldtransformation", "TimberElement.copy", "TimberElement.from_json", "TimberElement.from_jsonstring", "TimberElement.remove_blank_extension", "TimberElement.remove_features", "TimberElement.reset", "TimberElement.sha256", "TimberElement.to_json", "TimberElement.to_jsonstring", "TimberElement.transform", "TimberElement.transformed", "TimberElement.validate_data", "Wall", "Wall.ToString", "Wall.add_feature", "Wall.compute_aabb", "Wall.compute_collision_mesh", "Wall.compute_geometry", "Wall.compute_obb", "Wall.compute_worldtransformation", "Wall.copy", "Wall.from_boundary", "Wall.from_brep", "Wall.from_json", "Wall.from_jsonstring", "Wall.remove_blank_extension", "Wall.remove_features", "Wall.reset", "Wall.rotate", "Wall.sha256", "Wall.to_json", "Wall.to_jsonstring", "Wall.transform", "Wall.transformed", "Wall.validate_data", "BeamJoiningError", "FastenerApplicationError", "FeatureApplicationError", "BTLxPart", "BTLxPart.et_point_vals", "BTLxPart.ref_side_from_face", "BTLxProcessing", "BTLxProcessing.ToString", "BTLxProcessing.add_subprocessing", "BTLxProcessing.copy", "BTLxProcessing.from_json", "BTLxProcessing.from_jsonstring", "BTLxProcessing.sha256", "BTLxProcessing.to_json", "BTLxProcessing.to_jsonstring", "BTLxProcessing.validate_data", "BTLxWriter", "BTLxWriter.model_to_xml", "BTLxWriter.register_type_serializer", "BTLxWriter.write", "DoubleCut", "DoubleCut.ToString", "DoubleCut.add_subprocessing", "DoubleCut.apply", "DoubleCut.copy", "DoubleCut.from_json", "DoubleCut.from_jsonstring", "DoubleCut.from_planes_and_beam", "DoubleCut.from_shapes_and_element", "DoubleCut.planes_from_params_and_beam", "DoubleCut.sha256", "DoubleCut.to_json", "DoubleCut.to_jsonstring", "DoubleCut.validate_data", "DovetailMortise", "DovetailMortise.ToString", "DovetailMortise.add_subprocessing", "DovetailMortise.apply", "DovetailMortise.copy", "DovetailMortise.define_dovetail_tool", "DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "DovetailMortise.dovetail_volume_from_params_and_beam", "DovetailMortise.frame_from_params_and_beam", "DovetailMortise.from_frame_and_beam", "DovetailMortise.from_json", "DovetailMortise.from_jsonstring", "DovetailMortise.sha256", "DovetailMortise.to_json", "DovetailMortise.to_jsonstring", "DovetailMortise.validate_data", "DovetailTenon", "DovetailTenon.ToString", "DovetailTenon.add_subprocessing", "DovetailTenon.apply", "DovetailTenon.copy", "DovetailTenon.define_dovetail_tool", "DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "DovetailTenon.dovetail_volume_from_params_and_beam", "DovetailTenon.frame_from_params_and_beam", "DovetailTenon.from_json", "DovetailTenon.from_jsonstring", "DovetailTenon.from_plane_and_beam", "DovetailTenon.sha256", "DovetailTenon.to_json", "DovetailTenon.to_jsonstring", "DovetailTenon.validate_data", "Drilling", "Drilling.ToString", "Drilling.add_subprocessing", "Drilling.apply", "Drilling.copy", "Drilling.cylinder_from_params_and_element", "Drilling.from_json", "Drilling.from_jsonstring", "Drilling.from_line_and_element", "Drilling.from_shapes_and_element", "Drilling.sha256", "Drilling.to_json", "Drilling.to_jsonstring", "Drilling.validate_data", "EdgePositionType", "FrenchRidgeLap", "FrenchRidgeLap.ToString", "FrenchRidgeLap.add_subprocessing", "FrenchRidgeLap.apply", "FrenchRidgeLap.copy", "FrenchRidgeLap.frame_from_params_and_beam", "FrenchRidgeLap.from_beam_beam_and_plane", "FrenchRidgeLap.from_json", "FrenchRidgeLap.from_jsonstring", "FrenchRidgeLap.lap_volume_from_params_and_beam", "FrenchRidgeLap.sha256", "FrenchRidgeLap.to_json", "FrenchRidgeLap.to_jsonstring", "FrenchRidgeLap.validate_data", "JackRafterCut", "JackRafterCut.ToString", "JackRafterCut.add_subprocessing", "JackRafterCut.apply", "JackRafterCut.copy", "JackRafterCut.from_json", "JackRafterCut.from_jsonstring", "JackRafterCut.from_plane_and_beam", "JackRafterCut.from_shapes_and_element", "JackRafterCut.plane_from_params_and_beam", "JackRafterCut.sha256", "JackRafterCut.to_json", "JackRafterCut.to_jsonstring", "JackRafterCut.validate_data", "Lap", "Lap.ToString", "Lap.add_subprocessing", "Lap.apply", "Lap.copy", "Lap.from_json", "Lap.from_jsonstring", "Lap.from_plane_and_beam", "Lap.from_shapes_and_element", "Lap.from_volume_and_beam", "Lap.sha256", "Lap.to_json", "Lap.to_jsonstring", "Lap.validate_data", "Lap.volume_from_params_and_beam", "LimitationTopType", "MachiningLimits", "Mortise", "Mortise.ToString", "Mortise.add_subprocessing", "Mortise.apply", "Mortise.copy", "Mortise.frame_from_params_and_beam", "Mortise.from_frame_and_beam", "Mortise.from_json", "Mortise.from_jsonstring", "Mortise.sha256", "Mortise.to_json", "Mortise.to_jsonstring", "Mortise.validate_data", "Mortise.volume_from_params_and_beam", "OrientationType", "Pocket", "Pocket.ToString", "Pocket.add_subprocessing", "Pocket.apply", "Pocket.copy", "Pocket.from_json", "Pocket.from_jsonstring", "Pocket.from_shapes_and_element", "Pocket.from_volume_and_element", "Pocket.sha256", "Pocket.to_json", "Pocket.to_jsonstring", "Pocket.validate_data", "Pocket.volume_from_params_and_element", "Slot", "Slot.ToString", "Slot.add_subprocessing", "Slot.apply", "Slot.copy", "Slot.from_json", "Slot.from_jsonstring", "Slot.from_plane_and_beam", "Slot.sha256", "Slot.to_json", "Slot.to_jsonstring", "Slot.validate_data", "StepJoint", "StepJoint.ToString", "StepJoint.add_subprocessing", "StepJoint.add_tenon", "StepJoint.apply", "StepJoint.copy", "StepJoint.from_json", "StepJoint.from_jsonstring", "StepJoint.from_plane_and_beam", "StepJoint.planes_from_params_and_beam", "StepJoint.sha256", "StepJoint.tenon_volume_from_params_and_beam", "StepJoint.to_json", "StepJoint.to_jsonstring", "StepJoint.validate_data", "StepJointNotch", "StepJointNotch.ToString", "StepJointNotch.add_mortise", "StepJointNotch.add_subprocessing", "StepJointNotch.apply", "StepJointNotch.copy", "StepJointNotch.from_json", "StepJointNotch.from_jsonstring", "StepJointNotch.from_plane_and_beam", "StepJointNotch.mortise_volume_from_params_and_beam", "StepJointNotch.planes_from_params_and_beam", "StepJointNotch.sha256", "StepJointNotch.to_json", "StepJointNotch.to_jsonstring", "StepJointNotch.validate_data", "StepShapeType", "Tenon", "Tenon.ToString", "Tenon.add_subprocessing", "Tenon.apply", "Tenon.copy", "Tenon.frame_from_params_and_beam", "Tenon.from_json", "Tenon.from_jsonstring", "Tenon.from_plane_and_beam", "Tenon.sha256", "Tenon.to_json", "Tenon.to_jsonstring", "Tenon.validate_data", "Tenon.volume_from_params_and_beam", "TenonShapeType", "add_gh_param", "clear_gh_params", "get_leaf_subclasses", "item_input_valid", "list_input_valid", "manage_dynamic_params", "rename_gh_input", "TimberModel", "TimberModel.ToString", "TimberModel.add_element", "TimberModel.add_elements", "TimberModel.add_group", "TimberModel.add_group_element", "TimberModel.add_interaction", "TimberModel.add_joint", "TimberModel.add_material", "TimberModel.assign_material", "TimberModel.compute_aabb", "TimberModel.compute_obb", "TimberModel.connect_adjacent_walls", "TimberModel.copy", "TimberModel.element_by_guid", "TimberModel.elements", "TimberModel.elements_connected_by", "TimberModel.from_json", "TimberModel.from_jsonstring", "TimberModel.get_elements_in_group", "TimberModel.get_interactions_for_element", "TimberModel.has_element", "TimberModel.has_group", "TimberModel.has_interaction", "TimberModel.has_material", "TimberModel.interactions", "TimberModel.materials", "TimberModel.process_joinery", "TimberModel.remove_element", "TimberModel.remove_interaction", "TimberModel.remove_joint", "TimberModel.rotate", "TimberModel.rotated", "TimberModel.scale", "TimberModel.scaled", "TimberModel.set_topologies", "TimberModel.sha256", "TimberModel.to_json", "TimberModel.to_jsonstring", "TimberModel.transform", "TimberModel.transform_numpy", "TimberModel.transformed", "TimberModel.transformed_numpy", "TimberModel.translate", "TimberModel.translated", "TimberModel.validate_data", "Actor", "Actor.get_name", "BuildingPlan", "BuildingPlan.ToString", "BuildingPlan.add_step", "BuildingPlan.copy", "BuildingPlan.from_json", "BuildingPlan.from_jsonstring", "BuildingPlan.sha256", "BuildingPlan.to_json", "BuildingPlan.to_jsonstring", "BuildingPlan.validate_data", "BuildingPlanParser", "BuildingPlanParser.parse", "BuildingPlanParser.serialize", "Instruction", "Instruction.ToString", "Instruction.copy", "Instruction.from_json", "Instruction.from_jsonstring", "Instruction.sha256", "Instruction.to_json", "Instruction.to_jsonstring", "Instruction.transform", "Instruction.validate_data", "LinearDimension", "LinearDimension.ToString", "LinearDimension.copy", "LinearDimension.from_json", "LinearDimension.from_jsonstring", "LinearDimension.sha256", "LinearDimension.to_json", "LinearDimension.to_jsonstring", "LinearDimension.transform", "LinearDimension.validate_data", "Model3d", "Model3d.ToString", "Model3d.copy", "Model3d.from_json", "Model3d.from_jsonstring", "Model3d.sha256", "Model3d.to_json", "Model3d.to_jsonstring", "Model3d.transform", "Model3d.validate_data", "SimpleSequenceGenerator", "Step", "Step.ToString", "Step.copy", "Step.from_json", "Step.from_jsonstring", "Step.sha256", "Step.to_json", "Step.to_jsonstring", "Step.transform", "Step.validate_data", "Text3d", "Text3d.ToString", "Text3d.copy", "Text3d.from_json", "Text3d.from_jsonstring", "Text3d.sha256", "Text3d.to_json", "Text3d.to_jsonstring", "Text3d.transform", "Text3d.validate_data", "find_neighboring_elements", "Citing", "Examples", "Create Joint", "COMPAS Timber Documentation", "Installation", "License", "Grasshopper plugin", "BTLx Contribution Guide", "Attributes", "Beams", "Design", "Examples", "Fabrication", "Features", "Joint Rules", "Model", "Show", "Utils", "Workflow"], "terms": {"compas_timb": [0, 10, 16, 22, 27, 31, 37, 43, 48, 50, 56, 68, 74, 85, 91, 102, 108, 121, 127, 138, 144, 155, 161, 172, 178, 189, 195, 207, 213, 224, 230, 242, 248, 260, 266, 277, 283, 297, 298, 306, 311, 319, 321, 325, 331, 349, 356, 357, 358, 389, 409, 419, 443, 463, 486, 487, 488, 489, 492, 502, 506, 509, 514, 515, 520, 523, 526, 527, 528, 536, 539, 543, 544, 552, 555, 557, 560, 561, 566, 567, 570, 572, 576, 581, 584, 589, 590, 595, 598, 609, 610, 611, 612, 615, 617, 625, 626, 627, 630, 640, 641, 644, 653, 657, 662, 664, 668, 672, 677, 678, 683, 684, 687, 689, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 711, 752, 754, 764, 767, 777, 787, 797, 798, 808, 818, 819, 822, 823], "model": [0, 10, 16, 22, 37, 43, 50, 56, 62, 68, 71, 74, 80, 85, 91, 97, 102, 108, 116, 121, 127, 133, 138, 144, 150, 155, 161, 167, 172, 178, 184, 189, 195, 202, 207, 213, 219, 224, 230, 236, 242, 248, 254, 260, 266, 272, 277, 283, 292, 331, 357, 358, 368, 394, 396, 409, 419, 427, 450, 470, 502, 503, 505, 706, 708, 709, 710, 711, 712, 713, 714, 715, 718, 721, 727, 728, 730, 731, 732, 733, 734, 736, 741, 745, 752, 787, 797, 822, 825, 828, 831, 832, 837], "element": [0, 10, 13, 14, 16, 17, 35, 37, 38, 54, 56, 57, 72, 74, 75, 89, 91, 92, 106, 108, 109, 121, 125, 127, 128, 142, 144, 145, 159, 161, 162, 176, 178, 179, 193, 195, 197, 211, 213, 214, 228, 230, 231, 242, 246, 248, 249, 264, 266, 267, 281, 283, 285, 297, 298, 300, 304, 305, 311, 313, 314, 318, 319, 321, 324, 326, 330, 331, 349, 351, 355, 358, 364, 365, 366, 367, 368, 370, 381, 386, 387, 389, 392, 393, 395, 396, 402, 406, 407, 409, 414, 419, 423, 424, 425, 426, 427, 434, 436, 440, 441, 443, 446, 447, 448, 449, 450, 456, 460, 461, 463, 466, 467, 468, 469, 470, 478, 483, 484, 487, 488, 489, 490, 491, 492, 504, 509, 514, 515, 523, 526, 527, 528, 539, 543, 544, 552, 555, 557, 560, 561, 570, 572, 576, 584, 589, 590, 598, 603, 604, 609, 615, 617, 625, 626, 630, 634, 635, 640, 644, 657, 662, 664, 672, 677, 678, 687, 689, 697, 706, 708, 709, 711, 712, 715, 720, 722, 725, 726, 727, 729, 731, 734, 735, 797, 798, 818, 822, 834], "connect": [0, 10, 11, 16, 22, 27, 31, 32, 37, 43, 48, 50, 51, 56, 68, 69, 74, 85, 86, 91, 102, 103, 108, 121, 122, 127, 138, 139, 144, 155, 156, 161, 172, 173, 178, 189, 190, 195, 207, 208, 213, 224, 225, 230, 242, 243, 248, 260, 261, 266, 277, 278, 283, 297, 349, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 718, 722, 755, 768, 778, 788, 799, 809, 822, 824, 833, 834], "fabric": [0, 409, 489, 492, 502, 506, 514, 520, 536, 552, 560, 561, 566, 567, 581, 589, 595, 610, 611, 612, 626, 627, 641, 653, 668, 683, 684, 698, 819, 822, 825], "design": [0, 297, 298, 306, 311, 319, 321, 325, 331, 349, 356, 357, 819, 822, 825, 827, 828], "plan": [0, 752, 754, 764, 765, 766, 767, 777, 787, 797, 798, 808, 822], "error": [0, 1, 306, 308, 309, 310, 364, 367, 392, 395, 423, 446, 449, 466, 469, 486, 487, 488, 555, 733, 822, 827, 829, 834], "ghpython": [0, 699, 700, 701, 702, 703, 704, 705, 822, 825], "rhino": [0, 11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 297, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809, 818, 820, 822, 823, 827, 828, 833, 836], "The": [1, 9, 10, 15, 16, 18, 19, 20, 21, 24, 25, 26, 31, 36, 37, 39, 40, 41, 42, 45, 46, 47, 50, 55, 56, 58, 59, 60, 61, 64, 65, 67, 68, 73, 74, 76, 77, 78, 79, 82, 83, 84, 85, 90, 91, 93, 94, 95, 96, 99, 100, 101, 107, 108, 110, 111, 114, 115, 118, 119, 120, 121, 126, 127, 129, 130, 131, 132, 135, 136, 137, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 163, 164, 165, 166, 169, 170, 171, 172, 177, 178, 180, 181, 182, 183, 186, 187, 188, 189, 194, 195, 196, 198, 199, 200, 201, 204, 205, 206, 207, 212, 213, 215, 216, 217, 218, 221, 222, 223, 229, 230, 232, 233, 234, 235, 239, 240, 241, 242, 247, 248, 250, 251, 252, 253, 257, 258, 259, 260, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 282, 283, 286, 287, 288, 289, 294, 295, 296, 297, 298, 300, 304, 305, 311, 313, 318, 330, 331, 349, 351, 355, 358, 360, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 395, 397, 398, 399, 404, 405, 406, 407, 408, 409, 411, 412, 413, 416, 417, 418, 419, 421, 422, 423, 424, 426, 428, 429, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 446, 447, 449, 451, 452, 453, 458, 459, 460, 461, 462, 466, 467, 469, 471, 474, 475, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 644, 645, 646, 647, 648, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 699, 700, 704, 705, 706, 708, 709, 710, 711, 712, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 757, 758, 759, 761, 762, 763, 769, 770, 771, 773, 774, 776, 779, 780, 781, 783, 784, 786, 789, 790, 791, 793, 794, 796, 800, 801, 802, 804, 805, 807, 810, 811, 812, 814, 815, 817, 818, 824, 825, 827, 828, 832, 833, 834, 836, 837], "follow": [1, 363, 376, 378, 409, 824, 825, 826, 828, 833], "mai": [1, 827, 834], "rais": [1, 12, 14, 16, 18, 19, 33, 34, 35, 37, 39, 40, 52, 54, 56, 58, 59, 70, 72, 74, 76, 77, 87, 89, 91, 93, 94, 104, 106, 108, 110, 111, 123, 124, 125, 127, 129, 130, 140, 142, 144, 146, 147, 157, 159, 161, 163, 164, 174, 176, 178, 180, 181, 191, 193, 195, 198, 199, 209, 211, 213, 215, 216, 226, 228, 230, 232, 233, 244, 246, 248, 250, 251, 262, 264, 266, 268, 269, 279, 281, 283, 286, 287, 374, 375, 398, 399, 412, 413, 429, 430, 452, 453, 474, 475, 487, 488, 496, 497, 509, 511, 512, 523, 530, 531, 539, 545, 546, 555, 558, 559, 570, 574, 575, 584, 586, 587, 598, 600, 601, 615, 619, 620, 630, 632, 633, 644, 646, 647, 657, 659, 660, 672, 674, 675, 687, 690, 691, 708, 711, 712, 715, 723, 724, 733, 758, 759, 770, 771, 780, 781, 790, 791, 801, 802, 811, 812], "thi": [1, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 114, 115, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 296, 297, 298, 300, 305, 313, 314, 319, 321, 324, 326, 349, 351, 358, 359, 360, 363, 368, 369, 371, 374, 375, 376, 378, 379, 388, 389, 390, 396, 397, 398, 399, 408, 409, 410, 411, 412, 413, 418, 419, 420, 427, 428, 429, 430, 442, 443, 444, 450, 451, 452, 453, 462, 463, 464, 470, 471, 472, 474, 475, 485, 486, 489, 491, 493, 495, 496, 497, 501, 507, 509, 510, 511, 512, 513, 515, 519, 521, 523, 524, 526, 527, 528, 529, 530, 531, 535, 537, 539, 540, 542, 543, 544, 545, 546, 547, 551, 553, 556, 557, 558, 559, 560, 565, 568, 570, 571, 572, 573, 574, 575, 576, 580, 582, 584, 585, 586, 587, 588, 590, 594, 596, 598, 599, 600, 601, 602, 603, 604, 608, 609, 613, 615, 616, 617, 618, 619, 620, 624, 625, 628, 630, 631, 632, 633, 634, 635, 639, 640, 642, 644, 645, 646, 647, 648, 652, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 672, 673, 674, 675, 676, 677, 678, 682, 685, 687, 688, 689, 690, 691, 692, 696, 697, 706, 707, 711, 719, 723, 724, 725, 728, 733, 736, 738, 740, 747, 748, 750, 751, 755, 757, 758, 759, 763, 764, 768, 769, 770, 771, 776, 778, 779, 780, 781, 786, 788, 789, 790, 791, 796, 798, 799, 800, 801, 802, 807, 809, 810, 811, 812, 817, 818, 820, 824, 826, 827, 829, 833, 837], "modul": [1, 9, 822, 826], "see": [1, 22, 43, 706, 825, 828, 830, 832, 833, 836], "detail": [1, 825], "beamjoiningerror": [1, 12, 14, 33, 34, 35, 52, 54, 70, 72, 87, 89, 104, 106, 123, 124, 125, 140, 142, 157, 159, 174, 176, 191, 193, 209, 211, 226, 228, 244, 246, 262, 264, 279, 281, 306, 733, 822], "featureapplicationerror": [1, 306, 509, 523, 539, 555, 570, 584, 598, 615, 630, 644, 657, 672, 687, 822], "fastenerapplicationerror": [1, 822], "contain": [9, 16, 18, 19, 20, 21, 28, 37, 39, 40, 41, 42, 56, 58, 59, 60, 61, 74, 76, 77, 78, 79, 91, 93, 94, 95, 96, 108, 110, 111, 114, 115, 127, 129, 130, 131, 132, 144, 146, 147, 148, 149, 161, 163, 164, 165, 166, 178, 180, 181, 182, 183, 195, 198, 199, 200, 201, 213, 215, 216, 217, 218, 230, 232, 233, 234, 235, 248, 250, 251, 252, 253, 266, 268, 269, 270, 271, 283, 286, 287, 288, 289, 297, 300, 305, 306, 313, 319, 321, 351, 358, 374, 375, 398, 399, 412, 413, 419, 429, 430, 443, 452, 453, 463, 474, 475, 486, 496, 497, 511, 512, 530, 531, 545, 546, 558, 559, 574, 575, 586, 587, 600, 601, 619, 620, 632, 633, 646, 647, 659, 660, 674, 675, 690, 691, 706, 708, 711, 721, 723, 724, 727, 730, 732, 745, 754, 758, 759, 770, 771, 780, 781, 790, 791, 798, 801, 802, 811, 812, 818], "function": [9, 121, 297, 504, 725, 825, 826], "type": [9, 10, 11, 15, 18, 19, 26, 29, 32, 36, 39, 40, 47, 50, 51, 55, 58, 59, 67, 68, 69, 73, 76, 77, 84, 85, 86, 90, 93, 94, 101, 102, 103, 107, 110, 111, 120, 121, 122, 126, 129, 130, 137, 139, 143, 146, 147, 154, 155, 156, 160, 163, 164, 171, 172, 173, 177, 180, 181, 188, 189, 190, 194, 198, 199, 206, 207, 208, 212, 215, 216, 223, 224, 225, 229, 232, 233, 237, 241, 242, 243, 247, 250, 251, 259, 260, 261, 265, 268, 269, 276, 277, 278, 282, 286, 287, 296, 298, 311, 321, 349, 359, 369, 374, 375, 388, 390, 397, 398, 399, 408, 410, 411, 412, 413, 418, 420, 428, 429, 430, 442, 444, 451, 452, 453, 462, 464, 471, 474, 475, 485, 493, 495, 496, 497, 501, 504, 507, 510, 511, 512, 519, 520, 521, 524, 530, 531, 535, 537, 540, 545, 546, 551, 553, 556, 558, 559, 565, 568, 571, 574, 575, 580, 582, 585, 586, 587, 594, 596, 599, 600, 601, 608, 613, 616, 619, 620, 624, 628, 631, 632, 633, 639, 642, 645, 646, 647, 652, 654, 658, 659, 660, 667, 669, 673, 674, 675, 682, 685, 688, 690, 691, 696, 707, 719, 722, 723, 724, 751, 752, 755, 757, 758, 759, 763, 768, 769, 770, 771, 776, 778, 779, 780, 781, 786, 788, 789, 790, 791, 796, 798, 799, 800, 801, 802, 807, 809, 810, 811, 812, 817, 822, 826, 829, 837], "meant": 9, "us": [9, 10, 11, 23, 26, 28, 29, 30, 31, 32, 44, 47, 49, 50, 51, 63, 67, 68, 69, 81, 84, 85, 86, 98, 101, 102, 103, 117, 120, 121, 122, 134, 137, 138, 139, 151, 154, 155, 156, 168, 171, 172, 173, 185, 188, 189, 190, 203, 206, 207, 208, 220, 223, 224, 225, 238, 241, 242, 243, 256, 259, 260, 261, 273, 276, 277, 278, 293, 296, 297, 300, 305, 313, 351, 359, 371, 382, 388, 390, 403, 408, 410, 415, 418, 420, 435, 442, 443, 444, 457, 462, 464, 472, 480, 485, 486, 493, 498, 501, 502, 507, 516, 519, 520, 521, 529, 532, 535, 536, 537, 547, 548, 551, 553, 557, 562, 565, 568, 573, 577, 580, 582, 591, 594, 596, 602, 605, 608, 613, 618, 621, 624, 628, 636, 639, 642, 649, 652, 654, 663, 667, 669, 679, 682, 685, 692, 693, 696, 707, 711, 741, 742, 746, 747, 748, 749, 750, 751, 753, 755, 760, 763, 764, 768, 772, 776, 778, 782, 786, 788, 792, 796, 798, 799, 803, 807, 809, 813, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836], "context": 9, "class": [10, 11, 27, 31, 32, 48, 50, 51, 68, 69, 85, 86, 102, 103, 121, 122, 138, 139, 155, 156, 172, 173, 189, 190, 207, 208, 224, 225, 242, 243, 260, 261, 277, 278, 298, 306, 311, 319, 321, 325, 331, 349, 358, 359, 389, 390, 409, 410, 419, 420, 443, 444, 463, 464, 487, 489, 492, 493, 502, 506, 507, 520, 521, 536, 537, 552, 553, 566, 567, 568, 581, 582, 595, 596, 610, 611, 612, 613, 626, 627, 628, 641, 642, 653, 654, 668, 669, 676, 683, 684, 685, 698, 706, 707, 713, 745, 752, 754, 755, 764, 767, 768, 777, 778, 787, 788, 797, 798, 799, 808, 809, 822, 826], "sourc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 827, 828], "base": [10, 27, 31, 48, 50, 66, 68, 85, 102, 121, 138, 155, 172, 189, 196, 207, 224, 237, 242, 260, 277, 298, 306, 311, 319, 321, 325, 331, 349, 358, 366, 368, 389, 396, 409, 419, 427, 443, 448, 450, 463, 468, 470, 486, 487, 488, 489, 491, 492, 502, 506, 520, 525, 536, 541, 552, 566, 567, 581, 595, 610, 611, 612, 626, 627, 641, 653, 668, 683, 684, 698, 706, 733, 737, 738, 752, 754, 764, 767, 777, 787, 797, 798, 808, 834, 835, 837], "joint": [10, 12, 13, 14, 16, 22, 27, 48, 50, 52, 53, 54, 56, 66, 68, 70, 71, 72, 74, 85, 87, 88, 89, 91, 102, 104, 105, 106, 108, 121, 123, 124, 125, 127, 138, 140, 141, 142, 144, 155, 157, 158, 159, 161, 172, 174, 175, 176, 178, 189, 191, 192, 193, 195, 207, 209, 210, 211, 213, 224, 226, 227, 228, 230, 237, 242, 244, 245, 246, 248, 260, 262, 263, 264, 266, 277, 279, 280, 281, 283, 298, 300, 304, 306, 311, 318, 321, 330, 349, 355, 360, 379, 409, 463, 486, 487, 529, 547, 618, 653, 661, 668, 676, 692, 706, 713, 733, 736, 820, 822, 825, 826, 828, 829, 834, 837], "repres": [10, 50, 68, 85, 102, 155, 172, 189, 207, 224, 242, 260, 277, 358, 389, 409, 419, 431, 463, 489, 502, 506, 520, 536, 552, 567, 581, 595, 612, 627, 653, 668, 684, 706, 712, 752, 828, 833], "ball": 10, "node": [10, 708, 709, 710, 711], "which": [10, 16, 20, 21, 28, 29, 30, 31, 37, 41, 42, 50, 56, 60, 61, 68, 74, 78, 79, 85, 91, 95, 96, 102, 108, 114, 115, 127, 131, 132, 138, 144, 148, 149, 155, 161, 165, 166, 172, 178, 182, 183, 189, 195, 200, 201, 207, 213, 217, 218, 224, 230, 234, 235, 242, 248, 252, 253, 260, 266, 270, 271, 277, 283, 288, 289, 297, 319, 349, 360, 363, 370, 371, 376, 377, 378, 379, 486, 487, 504, 547, 560, 561, 648, 692, 710, 711, 752, 754, 787, 798, 826, 828, 829, 834], "join": [10, 16, 31, 37, 50, 56, 68, 74, 85, 91, 102, 108, 121, 127, 138, 144, 155, 161, 172, 178, 189, 195, 207, 213, 224, 230, 242, 248, 260, 266, 277, 283, 304, 306, 311, 318, 321, 330, 355, 486, 829, 834], "end": [10, 20, 21, 31, 41, 42, 50, 60, 61, 68, 78, 79, 85, 95, 96, 102, 114, 115, 131, 132, 148, 149, 155, 165, 166, 172, 182, 183, 189, 200, 201, 207, 217, 218, 224, 234, 235, 242, 252, 253, 270, 271, 277, 288, 289, 358, 360, 363, 370, 371, 373, 376, 378, 506, 536, 567, 581, 595, 611, 626, 627, 648, 653, 668, 684, 833], "multipl": [10, 311, 709, 820, 826], "beam": [10, 12, 13, 14, 16, 20, 21, 22, 27, 28, 29, 30, 31, 33, 34, 35, 37, 41, 42, 43, 50, 52, 53, 54, 56, 60, 61, 62, 66, 68, 70, 71, 72, 74, 78, 79, 80, 85, 87, 88, 89, 91, 95, 96, 97, 102, 104, 105, 106, 108, 114, 115, 116, 121, 123, 124, 125, 127, 131, 132, 133, 138, 140, 141, 142, 144, 148, 149, 150, 155, 157, 158, 159, 161, 165, 166, 167, 172, 174, 175, 176, 178, 182, 183, 184, 189, 191, 192, 193, 195, 200, 201, 202, 207, 209, 210, 211, 213, 217, 218, 219, 224, 226, 227, 230, 234, 235, 236, 242, 244, 245, 246, 248, 252, 253, 254, 260, 262, 263, 264, 266, 270, 271, 272, 277, 279, 280, 281, 283, 284, 288, 289, 291, 292, 297, 306, 331, 437, 443, 463, 486, 506, 509, 513, 515, 520, 523, 526, 527, 528, 529, 536, 539, 542, 543, 544, 547, 567, 570, 572, 573, 576, 581, 584, 588, 589, 590, 595, 598, 602, 603, 604, 609, 612, 615, 617, 618, 625, 627, 630, 634, 635, 640, 644, 648, 653, 657, 661, 662, 664, 668, 670, 672, 676, 677, 678, 684, 687, 689, 692, 697, 706, 711, 720, 733, 787, 818, 821, 822, 825, 827, 832, 833, 834, 836, 837], "trim": [10, 50, 53, 102, 105, 158, 172, 175, 192, 210, 227, 245, 263, 277, 280, 576, 832, 834], "main": [10, 22, 29, 43, 50, 62, 66, 68, 80, 97, 116, 121, 133, 150, 155, 167, 172, 184, 189, 202, 207, 219, 224, 236, 242, 254, 272, 277, 292, 547, 618, 661, 676, 692, 833], "pleas": [10, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 260, 277, 819], "creat": [10, 13, 31, 50, 52, 53, 68, 70, 85, 87, 88, 102, 104, 105, 121, 138, 155, 157, 158, 172, 174, 175, 189, 191, 192, 207, 209, 210, 224, 226, 227, 242, 244, 245, 260, 263, 277, 279, 280, 311, 319, 331, 372, 373, 387, 407, 441, 461, 473, 484, 513, 523, 529, 539, 547, 573, 588, 602, 615, 618, 657, 661, 672, 676, 687, 692, 820, 822, 823, 825, 826, 827, 828, 829, 831, 833, 834, 837], "properli": [10, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 260, 277], "an": [10, 15, 16, 18, 19, 24, 25, 26, 28, 36, 37, 39, 40, 45, 46, 47, 50, 55, 56, 58, 59, 64, 65, 67, 68, 73, 74, 76, 77, 82, 83, 84, 85, 90, 91, 93, 94, 99, 100, 101, 102, 107, 108, 110, 111, 118, 119, 120, 121, 126, 127, 129, 130, 135, 136, 137, 138, 143, 144, 146, 147, 152, 153, 154, 155, 160, 161, 163, 164, 169, 170, 171, 172, 177, 178, 180, 181, 186, 187, 188, 189, 194, 195, 198, 199, 204, 205, 206, 207, 212, 213, 215, 216, 221, 222, 223, 224, 229, 230, 232, 233, 239, 240, 241, 242, 247, 248, 250, 251, 257, 258, 259, 260, 265, 266, 268, 269, 274, 275, 276, 277, 282, 283, 286, 287, 294, 295, 296, 358, 369, 374, 375, 384, 385, 388, 389, 397, 398, 399, 404, 405, 408, 409, 411, 412, 413, 416, 417, 418, 419, 428, 429, 430, 438, 439, 442, 443, 451, 452, 453, 458, 459, 462, 463, 471, 474, 475, 481, 482, 485, 486, 488, 489, 491, 495, 496, 497, 499, 500, 501, 503, 504, 510, 511, 512, 514, 517, 518, 519, 524, 530, 531, 533, 534, 535, 540, 545, 546, 547, 549, 550, 551, 556, 558, 559, 563, 564, 565, 571, 574, 575, 578, 579, 580, 585, 586, 587, 592, 593, 594, 599, 600, 601, 606, 607, 608, 616, 619, 620, 622, 623, 624, 631, 632, 633, 637, 638, 639, 645, 646, 647, 650, 651, 652, 658, 659, 660, 665, 666, 667, 673, 674, 675, 680, 681, 682, 688, 690, 691, 692, 694, 695, 696, 708, 711, 712, 713, 715, 719, 723, 724, 729, 733, 734, 743, 744, 751, 752, 757, 758, 759, 761, 762, 763, 769, 770, 771, 773, 774, 776, 779, 780, 781, 783, 784, 786, 789, 790, 791, 793, 794, 796, 800, 801, 802, 804, 805, 807, 810, 811, 812, 814, 815, 817, 819, 820, 822, 823, 824, 825, 827, 828, 833], "instanc": [10, 11, 16, 18, 19, 32, 37, 39, 40, 50, 51, 56, 58, 59, 68, 69, 74, 76, 77, 85, 86, 91, 93, 94, 102, 103, 108, 110, 111, 121, 122, 127, 129, 130, 138, 139, 144, 146, 147, 155, 156, 161, 163, 164, 172, 173, 178, 180, 181, 189, 190, 195, 198, 199, 207, 208, 213, 215, 216, 224, 225, 230, 232, 233, 242, 243, 248, 250, 251, 260, 261, 266, 268, 269, 277, 278, 283, 286, 287, 326, 359, 374, 375, 390, 398, 399, 409, 410, 412, 413, 420, 429, 430, 444, 452, 453, 464, 474, 475, 493, 496, 497, 504, 507, 509, 511, 512, 513, 515, 521, 523, 526, 527, 528, 529, 530, 531, 537, 539, 542, 543, 544, 545, 546, 547, 553, 557, 558, 559, 568, 570, 572, 573, 574, 575, 576, 582, 584, 586, 587, 588, 590, 596, 598, 600, 601, 602, 603, 604, 609, 613, 615, 617, 618, 619, 620, 625, 628, 630, 632, 633, 634, 635, 640, 642, 644, 646, 647, 648, 654, 656, 657, 659, 660, 661, 662, 664, 669, 670, 672, 674, 675, 676, 677, 678, 685, 687, 689, 690, 691, 692, 697, 707, 713, 723, 724, 755, 758, 759, 768, 770, 771, 778, 780, 781, 788, 790, 791, 799, 801, 802, 809, 811, 812, 820, 826], "associ": [10, 22, 43, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 260, 277, 419, 798, 824], "paramet": [10, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 107, 108, 110, 111, 114, 115, 117, 118, 119, 120, 121, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 212, 213, 215, 216, 217, 218, 220, 221, 222, 223, 224, 229, 230, 232, 233, 234, 235, 238, 239, 240, 241, 242, 247, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 282, 283, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 300, 304, 305, 311, 313, 318, 326, 330, 331, 349, 351, 355, 358, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 395, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 425, 428, 429, 430, 431, 433, 435, 437, 438, 439, 440, 441, 442, 445, 446, 448, 449, 451, 452, 453, 457, 458, 459, 460, 461, 462, 465, 466, 468, 469, 471, 474, 475, 480, 481, 482, 483, 484, 485, 489, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 757, 758, 759, 760, 761, 762, 763, 765, 766, 769, 770, 771, 772, 773, 774, 776, 779, 780, 781, 782, 783, 784, 786, 789, 790, 791, 792, 793, 794, 796, 797, 800, 801, 802, 803, 804, 805, 807, 810, 811, 812, 813, 814, 815, 817, 818, 826, 827, 836], "list": [10, 16, 28, 31, 37, 56, 74, 91, 108, 121, 127, 144, 161, 178, 189, 195, 213, 230, 242, 248, 266, 277, 283, 297, 298, 304, 306, 311, 318, 326, 330, 331, 351, 355, 358, 361, 362, 370, 380, 391, 409, 422, 433, 445, 465, 486, 487, 489, 513, 515, 526, 704, 706, 709, 715, 722, 726, 733, 798, 818, 826, 833, 835], "base_interfac": 10, "fastenertimberinterfac": [10, 13, 822], "describ": [10, 826], "interfac": [10, 409, 414, 822], "between": [10, 30, 68, 85, 102, 121, 207, 260, 313, 331, 409, 491, 520, 536, 612, 684, 706, 712, 718, 729, 731, 735, 827, 829, 832, 833, 837], "fasten": [10, 13, 409, 487, 822], "each": [10, 20, 21, 31, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 371, 754, 826, 827, 833, 835], "timber": [10, 13, 331, 358, 389, 409, 419, 443, 463, 502, 706, 819, 825, 828, 829, 831, 835, 837], "ball_diamet": 10, "float": [10, 28, 29, 30, 50, 68, 85, 121, 155, 172, 189, 196, 207, 224, 242, 260, 277, 297, 298, 300, 304, 311, 313, 318, 330, 331, 349, 351, 355, 358, 360, 364, 367, 371, 372, 373, 377, 392, 395, 409, 419, 423, 431, 446, 449, 466, 469, 489, 506, 520, 525, 529, 536, 541, 547, 552, 560, 561, 567, 573, 581, 595, 602, 612, 618, 627, 653, 656, 668, 670, 684, 692, 706, 718, 737, 738, 739, 740, 818, 833], "diamet": [10, 68, 189, 196, 409, 525, 541, 552, 560, 561, 567, 573, 832, 833], "attribut": [10, 31, 48, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 255, 260, 277, 298, 300, 305, 306, 331, 358, 389, 409, 419, 443, 486, 487, 488, 489, 492, 566, 610, 611, 626, 683, 698, 706, 710, 797, 798, 822, 825, 826, 828], "generated_el": 10, "gener": [10, 13, 16, 29, 30, 224, 389, 409, 706, 725, 797, 826, 828, 829, 833, 837], "method": [10, 11, 16, 22, 27, 29, 31, 32, 37, 43, 48, 50, 51, 52, 53, 56, 68, 69, 70, 71, 72, 74, 85, 86, 87, 88, 91, 102, 103, 104, 105, 108, 121, 122, 127, 138, 139, 144, 155, 156, 157, 158, 161, 172, 173, 174, 175, 178, 189, 190, 191, 192, 195, 207, 208, 209, 210, 213, 224, 225, 226, 227, 230, 242, 243, 244, 245, 248, 260, 261, 263, 266, 277, 278, 279, 280, 281, 283, 298, 306, 311, 319, 321, 325, 331, 349, 358, 359, 363, 376, 378, 389, 390, 409, 410, 419, 420, 443, 444, 463, 464, 489, 492, 493, 502, 506, 507, 520, 521, 536, 537, 547, 552, 553, 567, 568, 581, 582, 595, 596, 602, 612, 613, 627, 628, 641, 642, 653, 654, 668, 669, 684, 685, 692, 706, 707, 733, 752, 754, 755, 764, 767, 768, 777, 778, 787, 788, 798, 799, 808, 809, 822, 826], "inherit": [10, 31, 50, 68, 85, 102, 121, 138, 155, 172, 189, 207, 224, 242, 260, 277, 298, 311, 349, 358, 389, 409, 419, 443, 463, 492, 506, 520, 536, 552, 567, 581, 595, 612, 627, 641, 653, 668, 684, 706, 754, 767, 777, 787, 798, 808, 822, 826], "convert": [11, 24, 25, 32, 45, 46, 51, 64, 65, 69, 82, 83, 86, 99, 100, 103, 118, 119, 122, 135, 136, 139, 152, 153, 156, 169, 170, 173, 186, 187, 190, 204, 205, 208, 221, 222, 225, 239, 240, 243, 257, 258, 261, 274, 275, 278, 294, 295, 319, 359, 384, 385, 390, 404, 405, 410, 416, 417, 420, 438, 439, 444, 458, 459, 464, 481, 482, 490, 493, 499, 500, 503, 507, 517, 518, 521, 533, 534, 537, 549, 550, 553, 563, 564, 568, 578, 579, 582, 592, 593, 596, 606, 607, 613, 622, 623, 628, 637, 638, 642, 650, 651, 654, 665, 666, 669, 680, 681, 685, 694, 695, 707, 743, 744, 755, 761, 762, 768, 773, 774, 778, 783, 784, 788, 793, 794, 799, 804, 805, 809, 814, 815], "string": [11, 19, 25, 32, 40, 46, 49, 51, 59, 65, 69, 77, 83, 86, 94, 100, 103, 111, 119, 122, 130, 136, 139, 147, 153, 156, 164, 170, 173, 181, 187, 190, 199, 205, 208, 216, 222, 225, 233, 240, 243, 251, 258, 261, 269, 275, 278, 287, 295, 359, 375, 385, 390, 399, 405, 410, 413, 417, 420, 430, 439, 444, 453, 459, 464, 475, 482, 486, 493, 497, 500, 503, 505, 507, 512, 518, 521, 531, 534, 537, 546, 550, 553, 559, 564, 568, 575, 579, 582, 587, 593, 596, 601, 607, 613, 620, 623, 628, 633, 638, 642, 647, 651, 654, 660, 666, 669, 675, 681, 685, 691, 695, 707, 724, 744, 753, 755, 759, 762, 768, 771, 774, 778, 781, 784, 788, 791, 794, 799, 802, 805, 809, 812, 815, 827, 828, 833], "exist": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 656, 669, 670, 685, 707, 711, 728, 755, 768, 778, 788, 799, 809, 826], "net": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "compat": [11, 14, 32, 35, 50, 51, 54, 68, 69, 72, 85, 86, 89, 102, 103, 106, 122, 125, 139, 142, 155, 156, 159, 172, 173, 176, 189, 190, 193, 207, 208, 211, 224, 225, 228, 242, 243, 246, 260, 261, 264, 278, 281, 297, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "when": [11, 28, 32, 51, 52, 53, 69, 70, 86, 87, 88, 103, 104, 105, 122, 139, 156, 157, 158, 173, 174, 175, 190, 191, 192, 208, 209, 210, 225, 226, 227, 243, 244, 245, 261, 263, 278, 279, 280, 359, 360, 390, 410, 420, 444, 464, 487, 488, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809, 827, 833], "ironpython": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "implicit": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "convers": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "usual": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 358, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "take": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 504, 507, 521, 537, 553, 560, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809, 826, 837], "place": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 745, 755, 768, 778, 788, 799, 809, 833], "cpython": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "kick": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "its": [11, 20, 21, 24, 25, 32, 41, 42, 45, 46, 51, 60, 61, 64, 65, 69, 78, 79, 82, 83, 86, 95, 96, 99, 100, 103, 114, 115, 118, 119, 122, 131, 132, 135, 136, 139, 148, 149, 152, 153, 156, 165, 166, 169, 170, 173, 182, 183, 186, 187, 189, 190, 200, 201, 204, 205, 208, 217, 218, 221, 222, 225, 234, 235, 239, 240, 242, 243, 252, 253, 257, 258, 261, 270, 271, 274, 275, 278, 288, 289, 294, 295, 359, 368, 372, 381, 384, 385, 390, 396, 402, 404, 405, 410, 416, 417, 420, 427, 434, 438, 439, 444, 450, 456, 458, 459, 464, 470, 478, 481, 482, 493, 499, 500, 504, 507, 517, 518, 521, 533, 534, 537, 549, 550, 553, 563, 564, 568, 578, 579, 582, 592, 593, 596, 606, 607, 613, 622, 623, 628, 637, 638, 642, 648, 650, 651, 654, 665, 666, 669, 680, 681, 685, 694, 695, 707, 720, 743, 744, 755, 761, 762, 768, 773, 774, 778, 783, 784, 788, 793, 794, 799, 804, 805, 809, 814, 815, 823, 827, 833], "default": [11, 15, 32, 36, 50, 51, 55, 69, 73, 85, 86, 90, 103, 107, 121, 122, 126, 139, 143, 156, 160, 173, 177, 190, 194, 207, 208, 212, 225, 229, 237, 243, 247, 255, 260, 261, 265, 278, 282, 300, 313, 331, 351, 359, 369, 372, 373, 390, 397, 410, 411, 419, 420, 428, 431, 444, 451, 464, 471, 493, 495, 502, 507, 510, 513, 521, 524, 529, 537, 540, 547, 552, 553, 556, 568, 571, 573, 582, 585, 588, 595, 596, 599, 602, 603, 604, 613, 616, 618, 627, 628, 631, 634, 635, 642, 645, 654, 658, 661, 669, 673, 676, 685, 688, 692, 700, 704, 707, 718, 719, 733, 737, 738, 739, 740, 755, 757, 768, 769, 778, 779, 788, 789, 799, 800, 809, 810, 822, 828, 829, 834, 836], "print": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "self": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809, 826], "gettyp": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "fullnam": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "similar": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809, 833], "overrid": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 349, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809, 829], "object": [11, 15, 16, 18, 19, 22, 24, 25, 26, 27, 28, 32, 36, 37, 39, 40, 43, 45, 46, 47, 48, 51, 55, 56, 58, 59, 64, 65, 67, 69, 73, 74, 76, 77, 82, 83, 84, 86, 90, 91, 93, 94, 99, 100, 101, 103, 107, 108, 110, 111, 118, 119, 120, 122, 126, 127, 129, 130, 135, 136, 137, 139, 143, 144, 146, 147, 152, 153, 154, 156, 160, 161, 163, 164, 169, 170, 171, 173, 177, 178, 180, 181, 186, 187, 188, 190, 194, 195, 198, 199, 204, 205, 206, 208, 212, 213, 215, 216, 221, 222, 223, 225, 229, 230, 232, 233, 239, 240, 241, 243, 247, 248, 250, 251, 257, 258, 259, 261, 265, 266, 268, 269, 274, 275, 276, 278, 282, 283, 286, 287, 294, 295, 296, 297, 306, 319, 321, 325, 331, 359, 369, 374, 375, 384, 385, 388, 390, 397, 398, 399, 404, 405, 408, 410, 411, 412, 413, 416, 417, 418, 420, 428, 429, 430, 431, 438, 439, 442, 444, 451, 452, 453, 458, 459, 462, 464, 471, 474, 475, 481, 482, 485, 489, 493, 495, 496, 497, 499, 500, 501, 502, 503, 505, 507, 510, 511, 512, 517, 518, 519, 521, 524, 530, 531, 533, 534, 535, 537, 540, 545, 546, 549, 550, 551, 553, 556, 557, 558, 559, 563, 564, 565, 566, 568, 571, 574, 575, 578, 579, 580, 582, 585, 586, 587, 592, 593, 594, 596, 599, 600, 601, 606, 607, 608, 610, 611, 613, 616, 619, 620, 622, 623, 624, 626, 628, 631, 632, 633, 637, 638, 639, 642, 645, 646, 647, 650, 651, 652, 654, 658, 659, 660, 665, 666, 667, 669, 673, 674, 675, 680, 681, 682, 683, 685, 688, 690, 691, 694, 695, 696, 698, 699, 700, 704, 705, 706, 707, 712, 713, 719, 723, 724, 736, 743, 744, 751, 752, 755, 757, 758, 759, 761, 762, 763, 764, 768, 769, 770, 771, 773, 774, 776, 778, 779, 780, 781, 783, 784, 786, 788, 789, 790, 791, 793, 794, 796, 797, 799, 800, 801, 802, 804, 805, 807, 809, 810, 811, 812, 814, 815, 817, 822, 827, 828, 829, 834, 836], "fix": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "make": [11, 15, 32, 36, 51, 55, 69, 73, 86, 90, 103, 107, 122, 126, 139, 143, 156, 160, 173, 177, 190, 194, 208, 212, 225, 229, 243, 247, 261, 265, 278, 282, 359, 369, 390, 397, 409, 410, 411, 420, 428, 444, 451, 464, 471, 472, 489, 493, 495, 507, 510, 521, 524, 537, 540, 553, 556, 560, 568, 571, 582, 585, 596, 599, 613, 616, 628, 631, 642, 645, 648, 654, 658, 669, 673, 685, 688, 707, 719, 755, 757, 768, 769, 778, 779, 788, 789, 799, 800, 809, 810], "grasshopp": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 699, 700, 704, 705, 707, 755, 768, 778, 788, 799, 809, 820, 822, 823, 828, 833, 837], "displai": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809, 827, 835], "proper": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "represent": [11, 24, 25, 32, 45, 46, 49, 51, 64, 65, 69, 82, 83, 86, 99, 100, 103, 118, 119, 122, 135, 136, 139, 152, 153, 156, 169, 170, 173, 186, 187, 190, 204, 205, 208, 221, 222, 225, 239, 240, 243, 257, 258, 261, 274, 275, 278, 294, 295, 359, 384, 385, 390, 404, 405, 409, 410, 416, 417, 420, 438, 439, 444, 458, 459, 464, 481, 482, 493, 499, 500, 507, 517, 518, 521, 533, 534, 537, 549, 550, 553, 563, 564, 568, 578, 579, 582, 592, 593, 596, 606, 607, 613, 622, 623, 628, 637, 638, 642, 650, 651, 654, 665, 666, 669, 680, 681, 685, 694, 695, 707, 743, 744, 753, 755, 761, 762, 768, 773, 774, 778, 783, 784, 788, 793, 794, 799, 804, 805, 809, 814, 815, 826], "ar": [11, 12, 14, 16, 20, 21, 22, 28, 29, 30, 32, 33, 35, 37, 41, 42, 43, 51, 54, 56, 60, 61, 68, 69, 72, 74, 78, 79, 86, 89, 91, 95, 96, 103, 106, 108, 114, 115, 122, 123, 125, 127, 131, 132, 139, 140, 142, 144, 148, 149, 156, 159, 161, 165, 166, 173, 176, 178, 182, 183, 190, 193, 195, 200, 201, 208, 211, 213, 217, 218, 224, 225, 228, 230, 234, 235, 237, 243, 246, 248, 252, 253, 255, 261, 262, 264, 266, 270, 271, 278, 281, 283, 288, 289, 297, 298, 305, 314, 324, 351, 359, 390, 409, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 684, 685, 692, 707, 712, 715, 755, 768, 778, 788, 798, 799, 809, 820, 826, 827, 828, 831, 832, 833, 834, 836, 837], "panel": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 331, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "other": [11, 20, 21, 32, 41, 42, 51, 60, 61, 68, 69, 78, 79, 85, 86, 95, 96, 103, 114, 115, 121, 122, 131, 132, 139, 148, 149, 155, 156, 165, 166, 173, 182, 183, 189, 190, 200, 201, 207, 208, 217, 218, 224, 225, 234, 235, 242, 243, 252, 253, 260, 261, 270, 271, 278, 288, 289, 323, 359, 390, 410, 419, 420, 436, 443, 444, 463, 464, 493, 507, 521, 537, 553, 568, 573, 582, 596, 613, 628, 642, 654, 669, 685, 707, 711, 755, 768, 778, 788, 799, 809, 819, 824, 833, 837], "output": [11, 24, 25, 29, 32, 45, 46, 51, 64, 65, 69, 82, 83, 86, 99, 100, 103, 118, 119, 122, 135, 136, 139, 152, 153, 156, 169, 170, 173, 186, 187, 190, 204, 205, 208, 221, 222, 225, 239, 240, 243, 257, 258, 261, 274, 275, 278, 294, 295, 359, 384, 385, 390, 404, 405, 410, 416, 417, 420, 438, 439, 444, 458, 459, 464, 481, 482, 493, 499, 500, 507, 517, 518, 521, 533, 534, 537, 549, 550, 553, 563, 564, 568, 578, 579, 582, 592, 593, 596, 606, 607, 613, 622, 623, 628, 637, 638, 642, 650, 651, 654, 665, 666, 669, 680, 681, 685, 694, 695, 699, 707, 743, 744, 755, 761, 762, 768, 773, 774, 778, 783, 784, 788, 793, 794, 799, 804, 805, 809, 814, 815, 828, 829, 831, 832, 834], "add": [12, 13, 33, 34, 52, 53, 70, 71, 87, 88, 104, 105, 123, 124, 140, 141, 157, 158, 174, 175, 191, 192, 209, 210, 226, 227, 244, 245, 262, 263, 279, 280, 360, 361, 362, 391, 414, 419, 421, 422, 445, 465, 494, 508, 522, 538, 554, 569, 583, 597, 614, 629, 643, 655, 656, 670, 671, 686, 699, 708, 709, 710, 711, 712, 713, 714, 733, 825, 826, 834, 836, 837], "extens": [12, 33, 52, 53, 70, 71, 87, 104, 105, 123, 140, 157, 174, 175, 191, 209, 210, 226, 244, 262, 263, 279, 280, 360, 371, 379, 381, 402, 419, 431, 434, 456, 478, 733], "defin": [12, 33, 34, 123, 124, 140, 189, 196, 242, 262, 314, 324, 326, 372, 409, 419, 513, 525, 541, 547, 602, 692, 827, 828, 829, 833, 836, 837], "affect": [12, 33, 34, 123, 124, 140, 262], "": [12, 20, 21, 26, 33, 34, 41, 42, 47, 60, 61, 67, 72, 78, 79, 84, 95, 96, 101, 114, 115, 120, 123, 124, 131, 132, 137, 140, 148, 149, 154, 155, 165, 166, 171, 182, 183, 188, 189, 200, 201, 206, 217, 218, 223, 224, 234, 235, 241, 242, 252, 253, 259, 262, 270, 271, 276, 288, 289, 296, 358, 363, 370, 372, 373, 376, 378, 388, 389, 408, 409, 418, 442, 462, 485, 501, 519, 529, 535, 551, 565, 580, 594, 608, 618, 624, 639, 652, 667, 668, 682, 696, 711, 751, 763, 776, 786, 796, 807, 817, 827, 828, 833, 836], "i": [12, 14, 16, 18, 19, 20, 21, 22, 26, 28, 29, 31, 33, 35, 37, 39, 40, 41, 42, 43, 47, 50, 52, 53, 54, 56, 58, 59, 60, 61, 66, 67, 68, 70, 71, 74, 76, 77, 78, 79, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 101, 102, 104, 105, 106, 108, 110, 111, 112, 114, 115, 120, 121, 123, 125, 127, 129, 130, 131, 132, 137, 138, 140, 142, 144, 146, 147, 148, 149, 154, 155, 157, 158, 159, 161, 163, 164, 165, 166, 171, 172, 174, 175, 176, 178, 180, 181, 182, 183, 188, 189, 191, 192, 193, 195, 198, 199, 200, 201, 206, 207, 209, 210, 211, 213, 215, 216, 217, 218, 223, 224, 226, 227, 230, 232, 233, 234, 235, 241, 242, 244, 245, 246, 248, 250, 251, 252, 253, 259, 260, 262, 263, 264, 266, 268, 269, 270, 271, 276, 279, 280, 283, 286, 287, 288, 289, 296, 297, 300, 313, 331, 349, 351, 358, 360, 370, 371, 374, 375, 378, 388, 389, 398, 399, 408, 409, 412, 413, 418, 419, 429, 430, 431, 442, 443, 452, 453, 462, 463, 472, 474, 475, 485, 496, 497, 501, 502, 509, 511, 512, 513, 515, 519, 520, 523, 526, 527, 528, 529, 530, 531, 535, 536, 539, 543, 544, 545, 546, 547, 551, 552, 558, 559, 560, 561, 565, 570, 572, 573, 574, 575, 576, 580, 584, 586, 587, 588, 590, 594, 595, 598, 600, 601, 602, 603, 604, 608, 609, 612, 615, 617, 618, 619, 620, 624, 625, 626, 627, 630, 632, 633, 634, 635, 639, 640, 644, 646, 647, 648, 652, 657, 659, 660, 661, 662, 664, 667, 668, 672, 674, 675, 676, 677, 678, 682, 684, 687, 689, 690, 691, 692, 696, 697, 700, 704, 706, 708, 711, 715, 718, 723, 724, 733, 745, 751, 754, 758, 759, 763, 770, 771, 776, 780, 781, 786, 790, 791, 796, 797, 801, 802, 807, 811, 812, 817, 819, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837], "option": [12, 14, 15, 20, 21, 23, 24, 25, 28, 29, 30, 33, 35, 36, 41, 42, 44, 45, 46, 54, 55, 60, 61, 63, 64, 65, 73, 78, 79, 81, 82, 83, 89, 90, 95, 96, 98, 99, 100, 102, 106, 107, 114, 115, 117, 118, 119, 123, 125, 126, 131, 132, 134, 135, 136, 140, 142, 143, 148, 149, 151, 152, 153, 159, 160, 165, 166, 168, 169, 170, 176, 177, 182, 183, 185, 186, 187, 189, 193, 194, 200, 201, 203, 204, 205, 211, 212, 217, 218, 220, 221, 222, 229, 234, 235, 238, 239, 240, 246, 247, 252, 253, 256, 257, 258, 262, 264, 265, 270, 271, 273, 274, 275, 282, 288, 289, 293, 294, 295, 297, 298, 300, 304, 311, 313, 318, 330, 331, 349, 351, 355, 358, 364, 366, 369, 382, 384, 385, 392, 397, 403, 404, 405, 409, 411, 415, 416, 417, 419, 423, 425, 428, 431, 435, 438, 439, 446, 448, 451, 457, 458, 459, 466, 468, 471, 480, 481, 482, 495, 498, 499, 500, 502, 510, 513, 516, 517, 518, 524, 529, 532, 533, 534, 540, 547, 548, 549, 550, 556, 562, 563, 564, 571, 573, 577, 578, 579, 585, 588, 591, 592, 593, 595, 599, 602, 603, 604, 605, 606, 607, 616, 618, 621, 622, 623, 627, 631, 634, 635, 636, 637, 638, 645, 649, 650, 651, 658, 661, 663, 665, 666, 673, 676, 679, 680, 681, 688, 692, 693, 694, 695, 700, 704, 708, 709, 710, 711, 712, 715, 718, 719, 725, 733, 735, 737, 738, 739, 740, 742, 743, 744, 757, 760, 761, 762, 769, 772, 773, 774, 779, 782, 783, 784, 789, 792, 793, 794, 800, 803, 804, 805, 810, 813, 814, 815, 828, 837], "should": [12, 14, 22, 30, 31, 33, 34, 35, 43, 54, 85, 89, 106, 121, 123, 124, 125, 140, 142, 159, 176, 193, 207, 211, 246, 260, 262, 264, 297, 319, 360, 363, 371, 376, 377, 378, 389, 409, 419, 443, 486, 513, 520, 529, 547, 567, 588, 618, 661, 676, 692, 700, 704, 708, 826, 833], "onli": [12, 14, 22, 33, 35, 43, 54, 68, 89, 106, 123, 125, 140, 142, 159, 176, 193, 211, 246, 262, 264, 300, 313, 351, 366, 425, 448, 468, 733, 827], "implement": [12, 14, 22, 31, 33, 35, 43, 54, 89, 106, 123, 125, 140, 142, 159, 176, 193, 211, 246, 262, 264, 389, 764, 818, 822], "requir": [12, 14, 33, 35, 53, 54, 88, 89, 105, 106, 123, 125, 140, 142, 158, 159, 175, 176, 192, 193, 210, 211, 227, 245, 246, 262, 263, 264, 280, 319, 360, 379, 823], "whenev": [12, 14, 33, 34, 35, 54, 89, 106, 123, 124, 125, 140, 142, 159, 176, 193, 211, 246, 262, 264], "wa": [12, 33, 34, 123, 124, 140, 262, 486], "abl": [12, 33, 34, 123, 124, 140, 262], "calcul": [12, 20, 21, 30, 33, 34, 41, 42, 52, 60, 61, 70, 78, 79, 87, 95, 96, 104, 114, 115, 123, 124, 131, 132, 140, 148, 149, 157, 165, 166, 174, 182, 183, 191, 200, 201, 209, 217, 218, 226, 234, 235, 244, 252, 253, 262, 270, 271, 279, 288, 289, 363, 376, 377, 378, 486, 515, 526, 527, 528, 542, 543, 544, 572, 576, 590, 609, 617, 625, 640, 662, 664, 677, 678, 689, 697, 706, 733, 741], "appli": [12, 33, 34, 123, 124, 140, 189, 242, 262, 298, 304, 311, 318, 319, 330, 349, 355, 386, 387, 406, 407, 409, 419, 436, 440, 441, 460, 461, 483, 484, 486, 487, 488, 489, 602, 725, 745, 826, 833, 837], "note": [12, 33, 123, 140, 262, 297, 708, 819], "ad": [12, 16, 31, 33, 37, 56, 71, 74, 91, 108, 123, 127, 140, 144, 161, 178, 195, 213, 230, 242, 248, 262, 266, 283, 358, 362, 419, 421, 422, 708, 709, 710, 711, 818, 829, 833], "all": [12, 20, 21, 33, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 123, 131, 132, 140, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 262, 270, 271, 288, 289, 371, 380, 381, 402, 409, 433, 434, 443, 456, 478, 700, 704, 706, 721, 725, 726, 731, 732, 733, 745, 818, 824, 827, 829, 833, 835], "befor": [12, 16, 33, 37, 56, 74, 91, 108, 123, 127, 140, 144, 161, 178, 195, 213, 230, 248, 262, 266, 283, 319, 363, 419, 436, 708], "featur": [12, 13, 31, 33, 34, 53, 71, 88, 105, 123, 124, 138, 140, 141, 158, 175, 189, 192, 196, 210, 224, 227, 242, 245, 262, 263, 280, 306, 319, 358, 361, 362, 366, 380, 381, 391, 402, 409, 414, 419, 421, 422, 425, 433, 434, 436, 445, 448, 456, 465, 468, 478, 486, 488, 506, 509, 520, 523, 525, 536, 539, 541, 555, 567, 570, 581, 584, 595, 598, 603, 604, 612, 615, 627, 630, 634, 635, 644, 648, 653, 657, 668, 672, 684, 687, 733, 822, 825, 828, 829, 833, 834, 837], "In": [13, 297, 552, 822, 823], "adapt": [13, 319], "therefor": [13, 648], "check": [14, 35, 54, 72, 89, 106, 125, 142, 159, 176, 193, 211, 228, 246, 264, 281, 300, 313, 351, 727, 728, 733, 818, 822], "creation": [14, 35, 54, 72, 89, 106, 125, 142, 159, 176, 193, 211, 228, 246, 264, 281, 833], "did": [14, 35, 54, 89, 106, 125, 142, 159, 176, 193, 211, 246, 264], "compli": [14, 35, 54, 89, 106, 125, 142, 159, 176, 193, 211, 246, 264], "cl": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 298, 311, 349, 369, 397, 411, 428, 451, 471, 495, 510, 524, 540, 556, 571, 585, 599, 616, 631, 645, 658, 673, 688, 701, 719, 757, 769, 779, 789, 800, 810], "none": [15, 29, 30, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 224, 229, 237, 247, 265, 282, 304, 318, 330, 355, 360, 361, 369, 372, 373, 379, 380, 386, 391, 397, 406, 409, 411, 428, 431, 433, 440, 445, 451, 460, 465, 471, 472, 483, 495, 502, 510, 513, 524, 540, 556, 571, 585, 595, 599, 603, 604, 616, 627, 631, 634, 635, 645, 658, 673, 688, 699, 700, 704, 705, 708, 709, 710, 711, 712, 714, 715, 718, 719, 725, 734, 735, 737, 738, 739, 740, 745, 746, 749, 757, 769, 779, 789, 800, 810, 828, 833], "copy_guid": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 369, 397, 411, 428, 451, 471, 495, 510, 524, 540, 556, 571, 585, 599, 616, 631, 645, 658, 673, 688, 719, 757, 769, 779, 789, 800, 810], "fals": [15, 23, 24, 25, 28, 36, 44, 45, 46, 50, 55, 63, 64, 65, 73, 81, 82, 83, 90, 98, 99, 100, 107, 117, 118, 119, 126, 134, 135, 136, 143, 151, 152, 153, 160, 168, 169, 170, 177, 185, 186, 187, 194, 203, 204, 205, 212, 220, 221, 222, 229, 238, 239, 240, 247, 256, 257, 258, 265, 273, 274, 275, 282, 293, 294, 295, 300, 303, 313, 317, 326, 329, 351, 354, 366, 369, 382, 384, 385, 397, 403, 404, 405, 411, 415, 416, 417, 425, 428, 435, 438, 439, 448, 451, 457, 458, 459, 468, 471, 480, 481, 482, 495, 498, 499, 500, 510, 516, 517, 518, 520, 524, 532, 533, 534, 536, 540, 548, 549, 550, 556, 562, 563, 564, 571, 577, 578, 579, 585, 591, 592, 593, 599, 605, 606, 607, 612, 616, 621, 622, 623, 631, 636, 637, 638, 645, 649, 650, 651, 658, 661, 663, 665, 666, 673, 676, 679, 680, 681, 684, 688, 692, 693, 694, 695, 719, 733, 742, 743, 744, 757, 760, 761, 762, 769, 772, 773, 774, 779, 782, 783, 784, 789, 792, 793, 794, 800, 803, 804, 805, 810, 813, 814, 815, 829, 834], "independ": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 369, 397, 411, 428, 451, 471, 495, 510, 524, 540, 556, 571, 585, 599, 616, 631, 645, 658, 673, 688, 719, 757, 769, 779, 789, 800, 810], "data": [15, 18, 19, 23, 24, 25, 26, 36, 39, 40, 44, 45, 46, 47, 55, 58, 59, 63, 64, 65, 67, 73, 76, 77, 81, 82, 83, 84, 90, 93, 94, 98, 99, 100, 101, 107, 110, 111, 117, 118, 119, 120, 126, 129, 130, 134, 135, 136, 137, 143, 146, 147, 151, 152, 153, 154, 160, 163, 164, 168, 169, 170, 171, 177, 180, 181, 185, 186, 187, 188, 194, 198, 199, 203, 204, 205, 206, 212, 215, 216, 220, 221, 222, 223, 229, 232, 233, 238, 239, 240, 241, 247, 250, 251, 256, 257, 258, 259, 265, 268, 269, 273, 274, 275, 276, 282, 286, 287, 293, 294, 295, 296, 369, 374, 375, 382, 384, 385, 388, 397, 398, 399, 403, 404, 405, 408, 409, 411, 412, 413, 415, 416, 417, 418, 428, 429, 430, 435, 438, 439, 442, 451, 452, 453, 457, 458, 459, 462, 471, 474, 475, 480, 481, 482, 485, 492, 495, 496, 497, 498, 499, 500, 501, 502, 510, 511, 512, 516, 517, 518, 519, 524, 530, 531, 532, 533, 534, 535, 540, 545, 546, 548, 549, 550, 551, 556, 558, 559, 562, 563, 564, 565, 571, 574, 575, 577, 578, 579, 580, 585, 586, 587, 591, 592, 593, 594, 599, 600, 601, 605, 606, 607, 608, 616, 619, 620, 621, 622, 623, 624, 631, 632, 633, 636, 637, 638, 639, 645, 646, 647, 649, 650, 651, 652, 658, 659, 660, 663, 665, 666, 667, 673, 674, 675, 679, 680, 681, 682, 688, 690, 691, 693, 694, 695, 696, 719, 723, 724, 742, 743, 744, 746, 747, 748, 751, 754, 757, 758, 759, 760, 761, 762, 763, 767, 769, 770, 771, 772, 773, 774, 776, 779, 780, 781, 782, 783, 784, 786, 789, 790, 791, 792, 793, 794, 796, 798, 800, 801, 802, 803, 804, 805, 807, 810, 811, 812, 813, 814, 815, 817, 831, 835], "compa": [15, 18, 19, 23, 36, 39, 40, 44, 55, 58, 59, 63, 73, 76, 77, 81, 90, 93, 94, 98, 107, 110, 111, 117, 126, 129, 130, 134, 143, 146, 147, 151, 160, 163, 164, 168, 177, 180, 181, 185, 194, 198, 199, 203, 212, 215, 216, 220, 229, 232, 233, 238, 247, 250, 251, 256, 265, 268, 269, 273, 282, 286, 287, 293, 331, 358, 365, 366, 367, 368, 369, 374, 375, 382, 386, 387, 392, 393, 395, 396, 397, 398, 399, 403, 406, 407, 409, 411, 412, 413, 415, 424, 425, 426, 427, 428, 429, 430, 435, 440, 441, 446, 447, 448, 449, 450, 451, 452, 453, 457, 460, 461, 466, 467, 468, 469, 470, 471, 474, 475, 480, 483, 484, 495, 496, 497, 498, 510, 511, 512, 514, 516, 523, 524, 526, 527, 528, 530, 531, 532, 539, 540, 543, 544, 545, 546, 548, 555, 556, 557, 558, 559, 560, 561, 562, 571, 572, 574, 575, 576, 577, 585, 586, 587, 589, 590, 591, 599, 600, 601, 605, 609, 615, 616, 617, 619, 620, 621, 625, 631, 632, 633, 636, 640, 645, 646, 647, 649, 657, 658, 659, 660, 662, 663, 664, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 693, 697, 716, 717, 719, 723, 724, 737, 738, 742, 745, 749, 750, 757, 758, 759, 760, 764, 769, 770, 771, 772, 779, 780, 781, 782, 789, 790, 791, 792, 798, 800, 801, 802, 803, 810, 811, 812, 813, 819, 825, 829, 831, 835], "return": [15, 16, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 36, 37, 39, 40, 41, 42, 44, 46, 47, 49, 55, 56, 58, 59, 60, 61, 63, 65, 67, 73, 74, 76, 77, 78, 79, 81, 83, 84, 90, 91, 93, 94, 95, 96, 98, 100, 101, 107, 108, 110, 111, 112, 114, 115, 117, 119, 120, 126, 127, 129, 130, 131, 132, 134, 136, 137, 143, 144, 146, 147, 148, 149, 151, 153, 154, 160, 161, 163, 164, 165, 166, 168, 170, 171, 177, 178, 180, 181, 182, 183, 185, 187, 188, 194, 195, 198, 199, 200, 201, 203, 205, 206, 212, 213, 215, 216, 217, 218, 220, 222, 223, 229, 230, 232, 233, 234, 235, 238, 240, 241, 247, 248, 250, 251, 252, 253, 256, 258, 259, 265, 266, 268, 269, 270, 271, 273, 275, 276, 282, 283, 286, 287, 288, 289, 293, 295, 296, 297, 300, 304, 305, 313, 314, 318, 324, 326, 330, 351, 355, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 405, 406, 407, 408, 409, 411, 412, 413, 415, 417, 418, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 474, 475, 480, 482, 483, 484, 485, 490, 491, 495, 496, 497, 498, 500, 501, 503, 504, 505, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 539, 540, 543, 544, 545, 546, 547, 548, 550, 551, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 644, 645, 646, 647, 648, 649, 651, 652, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 699, 700, 704, 705, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 753, 757, 758, 759, 760, 762, 763, 765, 769, 770, 771, 772, 774, 776, 779, 780, 781, 782, 784, 786, 789, 790, 791, 792, 794, 796, 800, 801, 802, 803, 805, 807, 810, 811, 812, 813, 815, 817, 818], "current": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 369, 397, 411, 428, 451, 471, 495, 510, 524, 540, 556, 571, 585, 599, 616, 631, 645, 658, 673, 688, 719, 757, 769, 779, 789, 800, 810, 822], "bool": [15, 20, 21, 23, 24, 25, 28, 36, 41, 42, 44, 45, 46, 50, 55, 60, 61, 63, 64, 65, 68, 73, 78, 79, 81, 82, 83, 85, 90, 95, 96, 98, 99, 100, 102, 107, 114, 115, 117, 118, 119, 121, 126, 131, 132, 134, 135, 136, 143, 148, 149, 151, 152, 153, 160, 165, 166, 168, 169, 170, 177, 182, 183, 185, 186, 187, 194, 200, 201, 203, 204, 205, 207, 212, 217, 218, 220, 221, 222, 224, 229, 234, 235, 238, 239, 240, 247, 252, 253, 256, 257, 258, 260, 265, 270, 271, 273, 274, 275, 282, 288, 289, 293, 294, 295, 300, 313, 326, 351, 366, 369, 382, 384, 385, 397, 403, 404, 405, 409, 411, 415, 416, 417, 425, 428, 435, 438, 439, 443, 448, 451, 457, 458, 459, 468, 471, 480, 481, 482, 495, 498, 499, 500, 510, 516, 517, 518, 520, 524, 532, 533, 534, 536, 540, 548, 549, 550, 552, 556, 562, 563, 564, 567, 571, 577, 578, 579, 585, 591, 592, 593, 595, 599, 605, 606, 607, 611, 612, 616, 621, 622, 623, 631, 636, 637, 638, 645, 649, 650, 651, 658, 663, 665, 666, 668, 673, 679, 680, 681, 684, 688, 692, 693, 694, 695, 719, 727, 728, 729, 730, 733, 742, 743, 744, 757, 760, 761, 762, 769, 772, 773, 774, 779, 782, 783, 784, 789, 792, 793, 794, 798, 800, 803, 804, 805, 810, 813, 814, 815], "If": [15, 18, 19, 20, 21, 23, 24, 25, 29, 36, 39, 40, 41, 42, 44, 45, 46, 50, 52, 55, 58, 59, 60, 61, 63, 64, 65, 68, 70, 72, 73, 76, 77, 78, 79, 81, 82, 83, 85, 87, 90, 93, 94, 95, 96, 98, 99, 100, 102, 104, 107, 110, 111, 114, 115, 117, 118, 119, 121, 126, 129, 130, 131, 132, 134, 135, 136, 143, 146, 147, 148, 149, 151, 152, 153, 157, 160, 163, 164, 165, 166, 168, 169, 170, 174, 177, 180, 181, 182, 183, 185, 186, 187, 191, 194, 198, 199, 200, 201, 203, 204, 205, 207, 209, 212, 215, 216, 217, 218, 220, 221, 222, 224, 226, 228, 229, 232, 233, 234, 235, 238, 239, 240, 244, 247, 250, 251, 252, 253, 256, 257, 258, 260, 265, 268, 269, 270, 271, 273, 274, 275, 279, 281, 282, 286, 287, 288, 289, 293, 294, 295, 351, 366, 369, 374, 375, 380, 382, 384, 385, 397, 398, 399, 403, 404, 405, 411, 412, 413, 415, 416, 417, 425, 428, 429, 430, 431, 433, 435, 438, 439, 448, 451, 452, 453, 457, 458, 459, 468, 471, 474, 475, 480, 481, 482, 495, 496, 497, 498, 499, 500, 509, 510, 511, 512, 516, 517, 518, 523, 524, 530, 531, 532, 533, 534, 539, 540, 545, 546, 548, 549, 550, 552, 555, 556, 558, 559, 562, 563, 564, 570, 571, 574, 575, 577, 578, 579, 584, 585, 586, 587, 591, 592, 593, 598, 599, 600, 601, 605, 606, 607, 615, 616, 619, 620, 621, 622, 623, 630, 631, 632, 633, 636, 637, 638, 644, 645, 646, 647, 649, 650, 651, 657, 658, 659, 660, 663, 665, 666, 668, 672, 673, 674, 675, 679, 680, 681, 687, 688, 690, 691, 693, 694, 695, 708, 709, 711, 712, 715, 719, 723, 724, 733, 742, 743, 744, 757, 758, 759, 760, 761, 762, 769, 770, 771, 772, 773, 774, 779, 780, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 800, 801, 802, 803, 804, 805, 810, 811, 812, 813, 814, 815, 818, 819, 828, 829, 833, 834], "true": [15, 20, 21, 23, 24, 25, 28, 36, 41, 42, 44, 45, 46, 50, 55, 60, 61, 63, 64, 65, 66, 68, 73, 78, 79, 81, 82, 83, 85, 90, 95, 96, 98, 99, 100, 102, 107, 114, 115, 117, 118, 119, 121, 126, 131, 132, 134, 135, 136, 143, 148, 149, 151, 152, 153, 160, 165, 166, 168, 169, 170, 177, 182, 183, 185, 186, 187, 194, 200, 201, 203, 204, 205, 207, 212, 217, 218, 220, 221, 222, 224, 229, 234, 235, 238, 239, 240, 247, 252, 253, 256, 257, 258, 260, 265, 270, 271, 273, 274, 275, 282, 288, 289, 293, 294, 295, 300, 313, 314, 324, 326, 351, 366, 369, 371, 382, 384, 385, 397, 403, 404, 405, 409, 411, 415, 416, 417, 425, 428, 435, 438, 439, 443, 448, 451, 457, 458, 459, 468, 471, 480, 481, 482, 495, 498, 499, 500, 510, 516, 517, 518, 520, 524, 532, 533, 534, 536, 540, 548, 549, 550, 552, 556, 562, 563, 564, 571, 577, 578, 579, 585, 591, 592, 593, 599, 605, 606, 607, 612, 616, 621, 622, 623, 631, 636, 637, 638, 645, 649, 650, 651, 658, 663, 665, 666, 668, 673, 679, 680, 681, 684, 688, 692, 693, 694, 695, 704, 711, 719, 727, 728, 729, 733, 742, 743, 744, 757, 760, 761, 762, 769, 772, 773, 774, 779, 782, 783, 784, 789, 792, 793, 794, 800, 803, 804, 805, 810, 813, 814, 815, 828, 829, 831, 833, 834], "have": [15, 16, 36, 37, 55, 56, 68, 71, 73, 74, 90, 91, 107, 108, 126, 127, 138, 143, 144, 160, 161, 177, 178, 194, 195, 212, 213, 229, 230, 247, 248, 265, 266, 281, 282, 283, 300, 313, 351, 358, 369, 397, 411, 419, 428, 451, 471, 495, 510, 524, 540, 556, 571, 585, 599, 603, 604, 616, 631, 634, 635, 645, 658, 673, 688, 708, 719, 729, 757, 769, 779, 789, 800, 810, 828], "same": [15, 29, 36, 50, 55, 68, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 281, 282, 369, 397, 411, 419, 428, 451, 471, 495, 510, 524, 540, 556, 571, 585, 599, 616, 631, 645, 658, 673, 688, 711, 719, 757, 769, 779, 789, 797, 798, 800, 810], "guid": [15, 24, 25, 36, 45, 46, 55, 64, 65, 73, 82, 83, 90, 99, 100, 107, 118, 119, 126, 135, 136, 143, 152, 153, 160, 169, 170, 177, 186, 187, 194, 204, 205, 212, 221, 222, 229, 239, 240, 242, 247, 257, 258, 265, 274, 275, 282, 294, 295, 369, 384, 385, 397, 404, 405, 411, 416, 417, 428, 438, 439, 451, 458, 459, 471, 481, 482, 495, 499, 500, 510, 517, 518, 524, 533, 534, 540, 549, 550, 556, 563, 564, 571, 578, 579, 585, 592, 593, 599, 606, 607, 616, 622, 623, 631, 637, 638, 645, 650, 651, 658, 665, 666, 673, 680, 681, 688, 694, 695, 719, 720, 743, 744, 757, 761, 762, 769, 773, 774, 779, 783, 784, 789, 793, 794, 800, 804, 805, 810, 814, 815, 822, 825, 828, 833], "origin": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 358, 369, 397, 411, 428, 451, 471, 495, 510, 524, 540, 556, 571, 585, 599, 616, 631, 645, 658, 673, 688, 719, 737, 738, 757, 769, 779, 789, 800, 810, 828, 836], "classmethod": [16, 17, 18, 19, 26, 28, 37, 38, 39, 40, 47, 49, 56, 57, 58, 59, 67, 74, 75, 76, 77, 84, 91, 92, 93, 94, 101, 108, 109, 110, 111, 120, 127, 128, 129, 130, 137, 144, 145, 146, 147, 154, 161, 162, 163, 164, 171, 178, 179, 180, 181, 188, 195, 197, 198, 199, 206, 213, 214, 215, 216, 223, 230, 231, 232, 233, 241, 248, 249, 250, 251, 259, 266, 267, 268, 269, 276, 283, 285, 286, 287, 296, 332, 372, 373, 374, 375, 388, 398, 399, 408, 412, 413, 418, 429, 430, 431, 442, 452, 453, 462, 472, 473, 474, 475, 485, 496, 497, 501, 504, 511, 512, 513, 514, 519, 525, 529, 530, 531, 535, 541, 545, 546, 547, 551, 558, 559, 560, 561, 565, 573, 574, 575, 580, 586, 587, 588, 589, 594, 600, 601, 602, 603, 604, 608, 618, 619, 620, 624, 632, 633, 634, 635, 639, 646, 647, 648, 652, 659, 660, 661, 667, 674, 675, 676, 682, 690, 691, 692, 696, 723, 724, 751, 753, 758, 759, 763, 765, 766, 770, 771, 776, 780, 781, 786, 790, 791, 796, 801, 802, 807, 811, 812, 817], "kwarg": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 298, 311, 349, 431, 472, 473, 514, 561, 589, 603, 634, 708, 710], "new": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 705, 823, 826, 828], "differ": [16, 706, 764, 820, 826, 829, 833], "fom": 16, "pass": [16, 30, 298, 311, 349, 371, 431], "constructor": [16, 319, 431, 560], "instead": [16, 31, 560, 828], "separ": [16, 827], "argument": [16, 298, 311, 319, 349, 431, 710], "expect": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 611], "been": [16, 37, 56, 71, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 708, 798], "call": [16, 22, 37, 43, 52, 53, 56, 70, 71, 74, 87, 88, 91, 104, 105, 108, 127, 144, 157, 158, 161, 174, 175, 178, 191, 192, 195, 209, 210, 213, 226, 227, 230, 244, 245, 248, 263, 266, 279, 280, 283, 319, 826, 828], "code": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 820, 822], "doe": [16, 37, 56, 74, 91, 108, 127, 138, 141, 144, 161, 178, 195, 213, 230, 248, 266, 283, 300, 313, 351, 363, 376, 378, 389, 509, 555, 570, 584, 598, 630, 644, 764, 826, 828], "verifi": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 371, 730], "given": [16, 28, 29, 37, 49, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 297, 300, 304, 305, 313, 314, 318, 330, 349, 351, 355, 370, 371, 373, 377, 431, 490, 491, 502, 505, 515, 526, 527, 528, 542, 543, 544, 572, 576, 590, 602, 609, 617, 625, 640, 662, 664, 677, 678, 689, 697, 726, 727, 753, 827], "adjac": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 718], "lie": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283], "topologi": [16, 27, 29, 30, 37, 48, 49, 50, 56, 68, 74, 85, 91, 102, 108, 127, 144, 155, 161, 172, 178, 189, 195, 207, 213, 224, 230, 242, 248, 260, 266, 283, 298, 300, 349, 351, 706, 741, 833, 834, 837], "allow": [16, 37, 56, 74, 85, 91, 108, 121, 127, 144, 161, 178, 195, 207, 213, 230, 248, 260, 266, 283, 305, 306, 319, 321, 371, 706, 798, 829, 833], "them": [16, 37, 56, 68, 74, 91, 102, 108, 127, 144, 155, 161, 178, 189, 195, 213, 224, 230, 242, 248, 266, 283, 463, 718, 729, 820, 826, 827, 833], "respons": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 409], "A": [16, 28, 31, 37, 56, 74, 91, 108, 127, 138, 144, 161, 178, 189, 195, 213, 230, 242, 248, 266, 283, 297, 300, 304, 305, 313, 318, 330, 351, 355, 358, 361, 372, 373, 389, 391, 409, 419, 431, 445, 465, 486, 489, 502, 683, 706, 708, 714, 725, 726, 730, 733, 819, 824, 828, 829, 833], "valueerror": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 708, 711, 715], "less": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 313, 358, 419], "than": [16, 23, 37, 44, 56, 63, 74, 81, 91, 98, 108, 117, 127, 134, 144, 151, 161, 168, 178, 185, 195, 203, 213, 220, 230, 238, 248, 256, 266, 273, 283, 293, 313, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "two": [16, 29, 30, 31, 37, 50, 56, 68, 74, 85, 91, 102, 108, 112, 127, 144, 155, 161, 178, 189, 195, 213, 224, 230, 242, 248, 260, 266, 281, 283, 298, 300, 304, 305, 311, 313, 318, 330, 349, 351, 355, 370, 486, 513, 514, 573, 648, 712, 729, 735, 832, 833], "timbermodel": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 503, 505, 822], "jo": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283], "belong": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283], "whould": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283], "togeth": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 463, 828], "filepath": [18, 24, 39, 45, 58, 64, 76, 82, 93, 99, 110, 118, 129, 135, 146, 152, 163, 169, 180, 186, 198, 204, 215, 221, 232, 239, 250, 257, 268, 274, 286, 294, 374, 384, 398, 404, 412, 416, 429, 438, 452, 458, 474, 481, 496, 499, 511, 517, 530, 533, 545, 549, 558, 563, 574, 578, 586, 592, 600, 606, 619, 622, 632, 637, 646, 650, 659, 665, 674, 680, 690, 694, 723, 743, 758, 761, 765, 766, 770, 773, 780, 783, 790, 793, 801, 804, 811, 814], "construct": [18, 19, 26, 39, 40, 47, 58, 59, 67, 76, 77, 84, 93, 94, 101, 110, 111, 120, 129, 130, 137, 146, 147, 154, 163, 164, 171, 180, 181, 188, 198, 199, 206, 215, 216, 223, 232, 233, 241, 250, 251, 259, 268, 269, 276, 286, 287, 296, 374, 375, 388, 398, 399, 408, 412, 413, 418, 429, 430, 431, 442, 452, 453, 462, 474, 475, 485, 496, 497, 501, 511, 512, 514, 519, 530, 531, 535, 545, 546, 551, 557, 558, 559, 560, 561, 565, 574, 575, 580, 586, 587, 589, 594, 600, 601, 603, 604, 608, 619, 620, 624, 632, 633, 634, 635, 639, 646, 647, 648, 652, 659, 660, 667, 674, 675, 682, 690, 691, 696, 723, 724, 751, 758, 759, 763, 770, 771, 776, 780, 781, 786, 790, 791, 796, 801, 802, 807, 811, 812, 817, 822, 829], "from": [18, 19, 23, 24, 25, 29, 39, 40, 44, 45, 46, 58, 59, 63, 64, 65, 76, 77, 81, 82, 83, 93, 94, 98, 99, 100, 110, 111, 117, 118, 119, 129, 130, 134, 135, 136, 146, 147, 151, 152, 153, 163, 164, 168, 169, 170, 180, 181, 185, 186, 187, 189, 198, 199, 203, 204, 205, 215, 216, 220, 221, 222, 232, 233, 238, 239, 240, 242, 250, 251, 256, 257, 258, 268, 269, 273, 274, 275, 286, 287, 293, 294, 295, 331, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 389, 398, 399, 403, 404, 405, 409, 412, 413, 415, 416, 417, 429, 430, 431, 433, 435, 438, 439, 452, 453, 457, 458, 459, 473, 474, 475, 480, 481, 482, 491, 496, 497, 498, 499, 500, 502, 511, 512, 513, 514, 515, 516, 517, 518, 520, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 542, 543, 544, 545, 546, 547, 548, 549, 550, 558, 559, 560, 561, 562, 563, 564, 572, 573, 574, 575, 576, 577, 578, 579, 586, 587, 588, 589, 590, 591, 592, 593, 600, 601, 602, 603, 604, 605, 606, 607, 609, 612, 617, 618, 619, 620, 621, 622, 623, 625, 632, 633, 634, 635, 636, 637, 638, 640, 646, 647, 649, 650, 651, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 679, 680, 681, 684, 689, 690, 691, 692, 693, 694, 695, 697, 700, 704, 711, 723, 724, 734, 736, 742, 743, 744, 758, 759, 760, 761, 762, 764, 765, 770, 771, 772, 773, 774, 780, 781, 782, 783, 784, 790, 791, 792, 793, 794, 801, 802, 803, 804, 805, 811, 812, 813, 814, 815, 820, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835], "json": [18, 19, 24, 25, 39, 40, 45, 46, 58, 59, 64, 65, 76, 77, 82, 83, 93, 94, 99, 100, 110, 111, 118, 119, 129, 130, 135, 136, 146, 147, 152, 153, 163, 164, 169, 170, 180, 181, 186, 187, 198, 199, 204, 205, 215, 216, 221, 222, 232, 233, 239, 240, 250, 251, 257, 258, 268, 269, 274, 275, 286, 287, 294, 295, 374, 375, 384, 385, 398, 399, 404, 405, 412, 413, 416, 417, 429, 430, 438, 439, 452, 453, 458, 459, 474, 475, 481, 482, 496, 497, 499, 500, 511, 512, 517, 518, 530, 531, 533, 534, 545, 546, 549, 550, 558, 559, 563, 564, 574, 575, 578, 579, 586, 587, 592, 593, 600, 601, 606, 607, 619, 620, 622, 623, 632, 633, 637, 638, 646, 647, 650, 651, 659, 660, 665, 666, 674, 675, 680, 681, 690, 691, 694, 695, 723, 724, 743, 744, 758, 759, 761, 762, 764, 765, 766, 770, 771, 773, 774, 780, 781, 783, 784, 790, 791, 793, 794, 801, 802, 804, 805, 811, 812, 814, 815], "file": [18, 24, 39, 45, 58, 64, 76, 82, 93, 99, 110, 118, 129, 135, 146, 152, 163, 169, 180, 186, 198, 204, 215, 221, 232, 239, 250, 257, 268, 274, 286, 294, 374, 384, 398, 404, 412, 416, 429, 438, 452, 458, 474, 481, 496, 499, 502, 503, 505, 511, 517, 530, 533, 545, 549, 558, 563, 574, 578, 586, 592, 600, 606, 619, 622, 632, 637, 646, 650, 659, 665, 674, 680, 690, 694, 723, 743, 758, 761, 764, 765, 766, 770, 773, 780, 783, 790, 793, 801, 804, 811, 814, 824, 826, 830, 831], "str": [18, 19, 23, 24, 25, 31, 39, 40, 44, 45, 46, 49, 58, 59, 63, 64, 65, 76, 77, 81, 82, 83, 93, 94, 98, 99, 100, 110, 111, 117, 118, 119, 129, 130, 134, 135, 136, 146, 147, 151, 152, 153, 163, 164, 168, 169, 170, 180, 181, 185, 186, 187, 198, 199, 203, 204, 205, 215, 216, 220, 221, 222, 232, 233, 238, 239, 240, 242, 250, 251, 256, 257, 258, 268, 269, 273, 274, 275, 286, 287, 293, 294, 295, 298, 370, 374, 375, 382, 384, 385, 398, 399, 403, 404, 405, 412, 413, 415, 416, 417, 429, 430, 435, 438, 439, 452, 453, 457, 458, 459, 474, 475, 480, 481, 482, 486, 487, 488, 489, 491, 492, 496, 497, 498, 499, 500, 502, 503, 505, 511, 512, 516, 517, 518, 520, 529, 530, 531, 532, 533, 534, 536, 545, 546, 547, 548, 549, 550, 558, 559, 562, 563, 564, 574, 575, 577, 578, 579, 586, 587, 591, 592, 593, 600, 601, 605, 606, 607, 612, 618, 619, 620, 621, 622, 623, 632, 633, 636, 637, 638, 646, 647, 649, 650, 651, 653, 659, 660, 663, 665, 666, 668, 674, 675, 679, 680, 681, 684, 690, 691, 692, 693, 694, 695, 699, 704, 705, 710, 711, 720, 723, 724, 725, 728, 742, 743, 744, 753, 758, 759, 760, 761, 762, 765, 766, 770, 771, 772, 773, 774, 780, 781, 782, 783, 784, 790, 791, 792, 793, 794, 798, 801, 802, 803, 804, 805, 811, 812, 813, 814, 815], "path": [18, 24, 39, 45, 58, 64, 76, 82, 93, 99, 110, 118, 129, 135, 146, 152, 163, 169, 180, 186, 198, 204, 215, 221, 232, 239, 250, 257, 268, 274, 286, 294, 374, 384, 398, 404, 412, 416, 429, 438, 452, 458, 474, 481, 496, 499, 502, 505, 511, 517, 530, 533, 545, 549, 558, 563, 574, 578, 586, 592, 600, 606, 619, 622, 632, 637, 646, 650, 659, 665, 674, 680, 690, 694, 723, 743, 758, 761, 765, 766, 770, 773, 780, 783, 790, 793, 801, 804, 811, 814, 831], "ha": [18, 19, 39, 40, 58, 59, 71, 76, 77, 93, 94, 110, 111, 129, 130, 146, 147, 163, 164, 180, 181, 198, 199, 215, 216, 232, 233, 250, 251, 268, 269, 286, 287, 297, 374, 375, 398, 399, 412, 413, 429, 430, 452, 453, 474, 475, 486, 496, 497, 511, 512, 530, 531, 545, 546, 558, 559, 574, 575, 586, 587, 600, 601, 619, 620, 632, 633, 646, 647, 659, 660, 674, 675, 690, 691, 711, 723, 724, 758, 759, 770, 771, 780, 781, 790, 791, 798, 801, 802, 811, 812, 828, 833, 836], "correct": [18, 19, 39, 40, 58, 59, 76, 77, 93, 94, 110, 111, 129, 130, 146, 147, 163, 164, 180, 181, 198, 199, 215, 216, 232, 233, 250, 251, 268, 269, 286, 287, 351, 374, 375, 398, 399, 412, 413, 429, 430, 452, 453, 474, 475, 496, 497, 511, 512, 530, 531, 545, 546, 558, 559, 574, 575, 586, 587, 600, 601, 609, 619, 620, 632, 633, 640, 646, 647, 659, 660, 674, 675, 690, 691, 723, 724, 758, 759, 770, 771, 780, 781, 790, 791, 801, 802, 811, 812], "schema": [18, 19, 26, 39, 40, 47, 58, 59, 67, 76, 77, 84, 93, 94, 101, 110, 111, 120, 129, 130, 137, 146, 147, 154, 163, 164, 171, 180, 181, 188, 198, 199, 206, 215, 216, 223, 232, 233, 241, 250, 251, 259, 268, 269, 276, 286, 287, 296, 374, 375, 388, 398, 399, 408, 412, 413, 418, 429, 430, 442, 452, 453, 462, 474, 475, 485, 496, 497, 501, 511, 512, 519, 530, 531, 535, 545, 546, 551, 558, 559, 565, 574, 575, 580, 586, 587, 594, 600, 601, 608, 619, 620, 624, 632, 633, 639, 646, 647, 652, 659, 660, 667, 674, 675, 682, 690, 691, 696, 723, 724, 751, 758, 759, 763, 770, 771, 776, 780, 781, 786, 790, 791, 796, 801, 802, 807, 811, 812, 817], "typeerror": [18, 19, 39, 40, 58, 59, 76, 77, 93, 94, 110, 111, 129, 130, 146, 147, 163, 164, 180, 181, 198, 199, 215, 216, 232, 233, 250, 251, 268, 269, 286, 287, 374, 375, 398, 399, 412, 413, 429, 430, 452, 453, 474, 475, 496, 497, 511, 512, 530, 531, 545, 546, 558, 559, 574, 575, 586, 587, 600, 601, 619, 620, 632, 633, 646, 647, 659, 660, 674, 675, 690, 691, 723, 724, 758, 759, 770, 771, 780, 781, 790, 791, 801, 802, 811, 812], "static": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 301, 302, 303, 304, 315, 316, 317, 318, 327, 328, 329, 330, 352, 353, 354, 355], "beam_a": [20, 21, 29, 41, 42, 60, 61, 78, 79, 95, 96, 102, 114, 115, 131, 132, 138, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 290, 711], "beam_b": [20, 21, 29, 41, 42, 60, 61, 78, 79, 95, 96, 102, 114, 115, 131, 132, 138, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 290], "ignore_end": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289], "Of": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289], "face": [20, 21, 23, 41, 42, 44, 50, 60, 61, 63, 78, 79, 81, 95, 96, 98, 114, 115, 117, 131, 132, 134, 148, 149, 151, 165, 166, 168, 182, 183, 185, 200, 201, 203, 217, 218, 220, 234, 235, 238, 252, 253, 256, 270, 271, 273, 288, 289, 293, 358, 371, 382, 403, 415, 419, 431, 435, 457, 473, 480, 491, 498, 516, 532, 536, 548, 562, 577, 591, 603, 604, 605, 609, 611, 621, 634, 635, 636, 640, 648, 649, 663, 679, 684, 693, 742, 760, 772, 782, 792, 803, 813, 833], "one": [20, 21, 41, 42, 60, 61, 72, 78, 79, 85, 95, 96, 114, 115, 121, 131, 132, 148, 149, 155, 165, 166, 182, 183, 189, 200, 201, 207, 217, 218, 224, 234, 235, 242, 252, 253, 260, 270, 271, 288, 289, 305, 362, 422, 491, 648, 712, 715, 797, 798, 826, 828, 833, 835], "whose": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289], "normal": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 331, 358, 377, 472, 491, 547, 692], "most": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289], "orthogon": [20, 41, 60, 78, 95, 114, 131, 148, 165, 182, 200, 217, 234, 252, 270, 288], "done": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289], "inner": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 833], "product": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289], "centerlin": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 102, 112, 114, 115, 131, 132, 148, 149, 155, 165, 166, 182, 183, 189, 200, 201, 217, 218, 224, 234, 235, 242, 252, 253, 270, 271, 288, 289, 313, 331, 358, 370, 372, 373, 825, 827, 828, 836], "result": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 370, 409, 509, 523, 539, 555, 570, 584, 598, 615, 630, 644, 657, 672, 687, 797, 828, 829], "closest": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 829], "0": [20, 23, 28, 41, 44, 60, 63, 78, 81, 85, 95, 98, 114, 117, 121, 131, 134, 148, 151, 165, 168, 182, 185, 189, 200, 203, 207, 217, 220, 224, 234, 238, 242, 252, 256, 260, 270, 273, 288, 293, 297, 358, 364, 367, 382, 383, 392, 395, 403, 415, 419, 423, 426, 431, 435, 437, 446, 449, 457, 466, 469, 480, 492, 498, 506, 513, 516, 520, 529, 532, 536, 547, 548, 552, 562, 567, 573, 577, 581, 588, 591, 595, 602, 603, 604, 605, 612, 618, 621, 627, 634, 635, 636, 649, 653, 656, 661, 663, 668, 670, 676, 679, 684, 692, 693, 704, 718, 742, 760, 772, 782, 792, 803, 813, 818, 821, 823, 828, 832, 833], "chosen": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289], "attach": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 298], "ignor": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289], "tupl": [20, 21, 29, 30, 31, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 300, 305, 313, 351, 358, 371, 377, 419, 712], "face_index": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289], "frame": [20, 21, 31, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 331, 358, 363, 371, 376, 378, 389, 409, 419, 489, 491, 513, 526, 528, 529, 539, 542, 544, 547, 572, 588, 589, 617, 618, 661, 676, 687, 689, 692, 711, 798, 821, 822, 825, 828, 829, 837], "index": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 189, 200, 201, 217, 218, 234, 235, 242, 252, 253, 270, 271, 288, 289, 363, 376, 377, 378, 383, 437, 491, 492, 513, 529, 547, 573, 588, 602, 603, 604, 618, 634, 635, 661, 676, 692, 699, 705, 822, 833], "center": [20, 21, 41, 42, 60, 61, 78, 79, 95, 96, 114, 115, 131, 132, 148, 149, 165, 166, 182, 183, 200, 201, 217, 218, 234, 235, 252, 253, 270, 271, 288, 289, 706, 819, 833], "1": [21, 23, 42, 44, 61, 63, 79, 81, 85, 96, 98, 115, 117, 121, 132, 134, 149, 151, 166, 168, 183, 185, 189, 201, 203, 207, 218, 220, 224, 235, 238, 242, 253, 256, 260, 271, 273, 289, 293, 358, 382, 403, 415, 435, 457, 466, 480, 491, 498, 506, 516, 520, 532, 536, 548, 562, 567, 577, 581, 591, 595, 605, 612, 621, 627, 636, 649, 653, 663, 668, 679, 684, 693, 700, 742, 760, 772, 782, 792, 803, 813, 821, 826, 828, 833, 837], "restor": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 292], "refer": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 292, 358, 363, 376, 377, 378, 383, 419, 437, 463, 491, 492, 506, 513, 520, 529, 536, 547, 552, 560, 566, 567, 573, 581, 588, 595, 602, 603, 604, 612, 618, 627, 634, 635, 653, 661, 668, 676, 684, 692, 822, 825, 826, 827], "dure": [22, 23, 43, 44, 63, 71, 81, 98, 117, 134, 151, 168, 185, 189, 203, 220, 238, 256, 273, 293, 306, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 733, 742, 760, 772, 782, 792, 798, 803, 813], "serial": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 292, 504, 764], "part": [22, 43, 489, 572, 573, 708, 715, 818, 822, 826, 828, 832], "To": [22, 43, 823, 825, 826, 834, 837], "avoid": [22, 43, 364, 367, 392, 395, 423, 446, 449, 466, 469], "circular": [22, 43], "store": [22, 43, 827, 828], "kei": [22, 31, 43, 358, 360, 379, 419, 489, 491, 611, 827], "respect": [22, 31, 43], "de": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 292], "sinc": [22, 43, 733], "role": [22, 29, 43, 305], "specif": [22, 29, 43, 722, 730, 822, 826, 828, 829, 833], "e": [22, 29, 43, 513, 529, 547, 573, 588, 602, 618, 661, 676, 692, 820, 827, 836], "g": [22, 29, 43, 820, 827], "cross": [22, 29, 43, 50, 62, 66, 68, 80, 97, 116, 121, 133, 150, 155, 167, 172, 184, 189, 202, 207, 219, 224, 236, 242, 254, 272, 277, 281, 292, 358, 372, 373, 529, 547, 618, 661, 668, 676, 692, 828, 829, 833], "concret": [22, 43], "exampl": [22, 23, 43, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 297, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 711, 742, 760, 772, 782, 792, 803, 813, 822, 825, 827, 828, 837], "tbuttjoint": [22, 43, 821, 822], "as_str": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "comput": [23, 29, 30, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 364, 365, 366, 367, 368, 382, 392, 393, 395, 396, 403, 415, 423, 424, 425, 426, 427, 435, 446, 447, 448, 449, 450, 457, 466, 467, 468, 469, 470, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 716, 717, 742, 760, 772, 782, 792, 803, 813], "hash": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "comparison": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "version": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813, 823], "control": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "algorithm": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 297, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "digest": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "hexadecim": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "format": [23, 24, 25, 44, 45, 46, 63, 64, 65, 81, 82, 83, 98, 99, 100, 117, 118, 119, 134, 135, 136, 151, 152, 153, 168, 169, 170, 185, 186, 187, 203, 204, 205, 220, 221, 222, 238, 239, 240, 256, 257, 258, 273, 274, 275, 293, 294, 295, 382, 384, 385, 403, 404, 405, 415, 416, 417, 435, 438, 439, 457, 458, 459, 480, 481, 482, 490, 498, 499, 500, 502, 516, 517, 518, 532, 533, 534, 548, 549, 550, 562, 563, 564, 577, 578, 579, 591, 592, 593, 605, 606, 607, 621, 622, 623, 636, 637, 638, 649, 650, 651, 663, 665, 666, 679, 680, 681, 693, 694, 695, 742, 743, 744, 760, 761, 762, 764, 772, 773, 774, 782, 783, 784, 792, 793, 794, 803, 804, 805, 813, 814, 815, 827], "rather": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "byte": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "datastructur": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 365, 382, 393, 403, 415, 424, 425, 435, 447, 448, 457, 467, 468, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 716, 717, 737, 739, 742, 747, 748, 749, 750, 760, 772, 782, 792, 803, 813], "import": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 711, 733, 742, 760, 772, 782, 792, 803, 813, 826, 837], "mesh": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 365, 382, 393, 403, 415, 424, 425, 435, 447, 448, 457, 467, 468, 480, 498, 516, 532, 548, 562, 577, 591, 603, 604, 605, 621, 634, 635, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813, 821], "from_obj": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "get": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 720, 725, 726, 742, 760, 772, 782, 792, 803, 813, 823, 825, 827], "obj": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 798, 803, 813], "v1": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "v2": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "vertex_attribut": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "vertex_sampl": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "z": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 358, 372, 373, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 552, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 737, 738, 739, 740, 742, 760, 772, 782, 792, 803, 813, 828, 829, 832, 836], "v3": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "pretti": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 294, 295, 384, 385, 404, 405, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815], "compact": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 294, 295, 384, 385, 404, 405, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815], "minim": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 294, 295, 384, 385, 404, 405, 409, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815], "nativ": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 294, 295, 384, 385, 404, 405, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815], "save": [24, 25, 45, 46, 62, 64, 65, 80, 82, 83, 97, 99, 100, 116, 118, 119, 133, 135, 136, 150, 152, 153, 167, 169, 170, 184, 186, 187, 202, 204, 205, 219, 221, 222, 236, 239, 240, 254, 257, 258, 272, 274, 275, 292, 294, 295, 384, 385, 404, 405, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815, 831], "newlin": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 294, 295, 384, 385, 404, 405, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815], "indent": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 294, 295, 384, 385, 404, 405, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815], "without": [24, 25, 45, 46, 64, 65, 82, 83, 85, 99, 100, 118, 119, 121, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 207, 221, 222, 239, 240, 257, 258, 260, 274, 275, 294, 295, 384, 385, 404, 405, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815, 824, 828], "ani": [24, 25, 26, 45, 46, 47, 64, 65, 67, 82, 83, 84, 99, 100, 101, 118, 119, 120, 135, 136, 137, 138, 141, 152, 153, 154, 169, 170, 171, 186, 187, 188, 204, 205, 206, 221, 222, 223, 239, 240, 241, 257, 258, 259, 274, 275, 276, 294, 295, 296, 384, 385, 388, 404, 405, 408, 416, 417, 418, 438, 439, 442, 458, 459, 462, 481, 482, 485, 499, 500, 501, 517, 518, 519, 523, 533, 534, 535, 539, 549, 550, 551, 563, 564, 565, 578, 579, 580, 592, 593, 594, 606, 607, 608, 615, 622, 623, 624, 637, 638, 639, 650, 651, 652, 657, 665, 666, 667, 672, 680, 681, 682, 687, 694, 695, 696, 743, 744, 751, 761, 762, 763, 773, 774, 776, 783, 784, 786, 793, 794, 796, 804, 805, 807, 814, 815, 817, 820, 824, 833, 837], "whitespac": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 294, 295, 384, 385, 404, 405, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815], "exclud": [24, 25, 45, 46, 64, 65, 82, 83, 99, 100, 118, 119, 135, 136, 152, 153, 169, 170, 186, 187, 204, 205, 221, 222, 239, 240, 257, 258, 274, 275, 294, 295, 384, 385, 404, 405, 416, 417, 438, 439, 458, 459, 481, 482, 499, 500, 517, 518, 533, 534, 549, 550, 563, 564, 578, 579, 592, 593, 606, 607, 622, 623, 637, 638, 650, 651, 665, 666, 680, 681, 694, 695, 743, 744, 761, 762, 773, 774, 783, 784, 793, 794, 804, 805, 814, 815], "valid": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 296, 388, 408, 418, 442, 462, 485, 501, 519, 535, 551, 565, 580, 594, 608, 624, 639, 652, 667, 682, 696, 751, 763, 776, 786, 796, 807, 817], "against": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 296, 388, 408, 418, 442, 462, 485, 501, 519, 535, 551, 565, 580, 594, 608, 624, 639, 652, 667, 682, 696, 751, 763, 776, 786, 796, 807, 817], "raw": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 296, 388, 408, 418, 442, 462, 485, 501, 519, 535, 551, 565, 580, 594, 608, 624, 639, 652, 667, 682, 696, 751, 763, 776, 786, 796, 807, 817, 828], "can": [26, 47, 67, 68, 84, 101, 120, 137, 138, 154, 171, 188, 189, 206, 223, 241, 259, 276, 296, 304, 318, 330, 355, 388, 408, 409, 418, 442, 443, 462, 485, 486, 501, 519, 535, 547, 551, 560, 565, 580, 594, 608, 624, 639, 652, 667, 682, 692, 696, 708, 751, 754, 763, 776, 786, 796, 798, 807, 817, 820, 825, 826, 828, 833, 837], "__from_data__": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 296, 388, 408, 418, 442, 462, 485, 501, 519, 535, 551, 565, 580, 594, 608, 624, 639, 652, 667, 682, 696, 751, 763, 776, 786, 796, 807, 817], "provid": [27, 237, 255, 326, 648, 708, 711, 715, 764, 824, 825, 828, 834], "tool": [27, 189, 196, 520, 525, 536, 541, 547, 692, 822, 825, 833, 835, 836], "detect": [27, 834], "intersect": [27, 28, 29, 30, 112, 298, 300, 304, 311, 313, 318, 330, 349, 351, 355, 509, 555, 570, 584, 598, 630, 644, 648], "rtree": [28, 818], "max_dist": [28, 29, 30, 298, 300, 304, 311, 313, 318, 330, 349, 351, 355, 356, 718], "find": [28, 297, 491, 722, 818, 828, 833], "pair": [28, 29, 297, 818, 827], "set": [28, 189, 237, 255, 297, 300, 313, 349, 351, 611, 729, 818, 827, 828, 829, 833, 834], "r": [28, 297, 823], "tree": [28, 297, 708], "search": [28, 297], "neighbor": [28, 297, 818], "addit": [28, 31, 431, 710, 825, 827, 828, 832], "distanc": [28, 29, 30, 298, 300, 304, 311, 313, 318, 330, 349, 351, 355, 431, 520, 536, 602, 612, 684, 718, 829, 834], "apart": 28, "non": 28, "touch": 28, "still": 28, "consid": [28, 29, 30, 298, 300, 304, 311, 313, 318, 330, 349, 351, 355, 363, 376, 378, 718, 833], "neightbor": [28, 818], "tol": [29, 30, 300, 313, 351, 356], "1e": [29, 30, 300, 304, 313, 318, 330, 351, 355, 356], "06": [29, 30, 356], "within": [29, 314, 324, 798, 828], "sensit": 29, "consist": 29, "order": [29, 297, 305, 319, 351, 797], "first": [29, 30, 85, 102, 138, 155, 189, 224, 242, 260, 298, 305, 370, 506, 514, 712, 729, 733, 832, 833, 837], "second": [29, 30, 85, 102, 138, 155, 189, 224, 242, 260, 298, 305, 370, 506, 514, 712, 729, 733, 832], "otherwis": [29, 50, 300, 313, 326, 351, 552, 824, 828], "thei": [29, 237, 255, 351, 409, 513, 833, 837], "were": [29, 31, 486, 827], "input": [29, 297, 409, 699, 700, 704, 825, 826, 827, 828, 829, 831, 832, 833, 834], "todo": [29, 30, 319, 371, 389, 409, 419, 463, 489, 560, 711, 725, 728, 741, 833], "need": [29, 319, 409, 826, 827, 837], "rework": [29, 30], "asap": 29, "toler": [29, 30, 834], "mathemat": [29, 30], "maximum": [29, 30, 298, 300, 304, 311, 313, 318, 330, 349, 351, 355, 718], "desigen": [29, 30], "unit": [29, 30, 297, 371, 463], "jointtopologi": [29, 30, 298, 313, 349, 706, 822], "wall_a": 30, "wall_b": 30, "wall": [30, 331, 443, 706, 711, 718, 822, 829], "through": [30, 85, 121, 207, 260, 371, 409, 552, 560, 819, 833], "potenti": 30, "f": 30, "interact": [31, 706, 712, 722, 726, 729, 735, 820, 837], "instanti": [31, 71, 121, 443, 826], "directli": [31, 121, 311, 378, 443, 708, 709, 829, 833], "dict": [31, 298, 311, 349, 409, 431, 489, 490, 595, 603, 604, 627, 634, 635, 706, 710, 826], "map": [31, 825, 836], "uniqu": [31, 358, 419, 720], "identifi": [31, 297, 720], "dictionari": [31, 611], "enumer": 48, "possibl": [48, 319, 827], "topo_unknown": [48, 49], "topo_i": 48, "topo_l": [48, 49], "topo_t": [48, 49], "topo_x": [48, 49], "valu": [49, 85, 121, 207, 255, 260, 297, 358, 419, 490, 529, 618, 668, 753, 827], "For": [49, 281, 297, 733, 753, 822, 836], "log": [49, 753], "int": [49, 189, 224, 242, 358, 360, 363, 376, 377, 378, 379, 383, 419, 437, 492, 506, 513, 529, 536, 547, 567, 573, 581, 588, 595, 602, 603, 604, 618, 634, 635, 653, 661, 668, 676, 684, 692, 700, 704, 705, 712, 753, 798], "One": [49, 753, 798], "l": [50, 68, 85, 102, 121, 242, 349, 357, 835], "butt": [50, 172, 277, 281, 357, 829], "main_beam": [50, 68, 85, 121, 155, 172, 189, 207, 224, 242, 260, 277, 602, 821], "cross_beam": [50, 68, 85, 121, 155, 172, 189, 207, 224, 242, 260, 277, 821], "mill_depth": [50, 155, 172, 277, 833], "depth": [50, 155, 172, 189, 224, 237, 242, 277, 520, 529, 536, 547, 552, 581, 595, 602, 612, 618, 627, 648, 653, 668, 684, 692, 821, 833], "pocket": [50, 155, 172, 277, 520, 602, 610, 822, 833], "mill": [50, 155, 172, 277, 523, 539, 615, 657, 672, 687, 833], "small_beam_butt": [50, 66, 833], "smaller": [50, 66, 358, 828], "section": [50, 66, 358, 372, 373, 820, 825, 828, 829, 833], "modify_cross": [50, 833], "extend": [50, 360, 371, 733, 833], "opposit": [50, 378, 566, 833], "cut": [50, 85, 121, 189, 196, 207, 224, 260, 277, 492, 506, 509, 513, 514, 515, 520, 523, 525, 526, 527, 528, 529, 536, 539, 541, 542, 543, 544, 547, 555, 566, 567, 570, 572, 573, 576, 581, 584, 588, 589, 590, 595, 598, 602, 603, 604, 609, 610, 611, 612, 615, 617, 618, 625, 626, 627, 630, 634, 635, 640, 644, 648, 653, 657, 661, 662, 664, 668, 672, 676, 677, 678, 683, 684, 687, 689, 692, 697, 698, 825, 828, 833, 834], "plane": [50, 102, 112, 371, 509, 513, 514, 515, 523, 529, 547, 555, 570, 573, 584, 588, 589, 590, 598, 602, 615, 618, 630, 644, 648, 657, 661, 662, 672, 676, 678, 689, 692, 828, 832, 833, 836], "reject_i": [50, 833], "reject": 50, "necessari": [52, 70, 71, 87, 104, 157, 174, 191, 209, 226, 244, 279, 823, 826], "automat": [52, 53, 70, 87, 88, 104, 105, 157, 158, 174, 175, 189, 191, 192, 209, 210, 226, 227, 242, 244, 245, 263, 279, 280, 520, 529, 536, 547, 612, 618, 684, 692, 698, 833, 836], "could": [52, 70, 87, 104, 157, 174, 191, 209, 226, 244, 279, 487, 488, 529, 547, 618, 661, 676, 692, 752], "both": [53, 88, 105, 158, 175, 192, 210, 227, 242, 245, 263, 280, 712, 715, 832, 833], "after": [62, 71, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 292, 376, 509, 523, 539, 555, 570, 584, 598, 615, 630, 644, 657, 672, 687], "flip": [66, 68, 85, 121, 207, 260, 560, 833], "priorit": 66, "lapjoint": [68, 72, 85, 207, 260, 822], "frenchridgelap": [68, 822], "lap": [68, 85, 121, 207, 260, 357, 567, 576, 822], "ridg": [68, 567, 576], "align": [68, 297, 358, 364, 392, 419, 423, 446, 466, 716, 825, 836], "dimens": [68, 72, 281, 358, 377, 777, 828], "flip_lap_sid": [68, 85, 121, 207, 260, 833], "side": [68, 85, 121, 207, 260, 358, 363, 376, 377, 378, 383, 419, 437, 491, 492, 506, 513, 520, 529, 536, 547, 552, 560, 567, 573, 581, 588, 595, 602, 603, 604, 612, 618, 627, 634, 635, 648, 653, 661, 668, 676, 684, 692, 829, 832, 833], "drillhole_diam": [68, 567, 573, 833], "drill": [68, 567, 589, 822], "hole": [68, 409, 567, 825, 832, 833], "made": [68, 189, 224, 242, 506, 520, 536, 560, 561, 567, 581, 595, 612, 627, 653, 668, 684, 833], "process_joineri": 71, "process": [71, 189, 242, 304, 318, 319, 330, 355, 358, 419, 489, 492, 509, 514, 523, 539, 552, 555, 560, 561, 570, 584, 589, 598, 615, 630, 644, 657, 672, 687, 733, 822, 825, 826, 837], "It": [71, 300, 351, 389, 463, 668, 822, 825, 827, 828, 833, 834, 836], "execut": [71, 752, 798, 820], "via": [71, 822], "add_extens": 71, "compar": 72, "addition": 72, "match": [72, 351, 491, 826, 833], "cut_plane_bia": [85, 121, 207, 260, 833], "shift": [85, 121, 207, 260, 833], "deeper": [85, 121, 207, 260], "complet": [85, 121, 207, 260, 463], "either": [85, 121, 207, 260, 370, 506, 520, 536, 567, 581, 595, 612, 653, 668, 684, 699, 829], "5": [85, 121, 207, 260, 358, 383, 437, 492, 520, 536], "miter": [102, 112, 277, 357], "bisector": [102, 833], "angl": [102, 189, 196, 506, 520, 525, 529, 536, 541, 547, 552, 567, 581, 595, 612, 618, 627, 684, 692, 737, 738, 832, 833], "cutoff": [102, 833], "perpendicular": [102, 112, 377, 409, 828], "point": [112, 358, 364, 367, 370, 373, 392, 395, 409, 419, 423, 446, 449, 466, 469, 490, 520, 536, 552, 560, 612, 684, 706, 737, 738, 822, 833, 836], "abstract": [121, 389, 443], "common": 121, "t": [121, 138, 155, 172, 189, 207, 224, 242, 349, 357, 835], "x": [121, 260, 349, 357, 358, 363, 376, 378, 506, 520, 536, 552, 567, 581, 595, 612, 627, 653, 668, 684, 739, 740, 828, 835, 836], "do": [121, 523, 539, 615, 657, 672, 687, 824, 826], "sub": 121, "null": 138, "shouldn": 138, "birdsmouth": 155, "along": [155, 172, 189, 207, 224, 242, 260, 358, 363, 376, 377, 378, 520, 529, 547, 612, 618, 692, 833], "tbirdsmouth": 155, "length": [172, 189, 207, 242, 260, 331, 358, 372, 419, 489, 520, 529, 536, 547, 595, 602, 612, 618, 627, 648, 684, 692, 833], "anoth": [172, 207], "dovetail": [189, 196, 520, 525, 526, 527, 529, 536, 541, 542, 543, 547, 692], "correspond": [189, 242, 358, 370, 492, 504, 827, 828, 833, 836], "notch": [189, 224, 668, 833], "fit": [189, 224, 242, 824, 833], "start_i": [189, 242, 506, 520, 536, 547, 552, 581, 595, 612, 627, 668, 676, 684, 692, 833], "start": [189, 242, 358, 360, 363, 370, 371, 373, 376, 378, 506, 520, 529, 536, 547, 552, 567, 581, 595, 611, 612, 618, 626, 627, 653, 668, 684, 692, 825, 828, 833], "posit": [189, 242, 358, 368, 396, 427, 450, 470, 489, 566, 567, 832, 833], "y": [189, 242, 277, 281, 358, 377, 506, 520, 529, 536, 547, 552, 581, 595, 612, 618, 627, 668, 684, 692, 739, 740, 828, 833, 836], "axi": [189, 242, 297, 358, 363, 364, 372, 373, 376, 377, 378, 392, 419, 423, 446, 466, 520, 529, 536, 552, 595, 612, 618, 684, 716, 737, 738, 828, 832, 833, 836], "start_depth": [189, 242, 520, 529, 536, 547, 581, 612, 618, 627, 684, 692, 833], "surfac": [189, 242, 331, 383, 437, 491, 529, 547, 661, 676, 826, 832], "rotat": [189, 242, 536, 547, 552, 684, 692, 739, 740, 749, 750, 828, 833], "around": [189, 242, 419, 431, 552, 828, 833], "width": [189, 242, 331, 358, 372, 373, 419, 489, 520, 529, 536, 547, 595, 612, 618, 627, 653, 656, 668, 670, 684, 692, 821, 827, 828, 829, 833], "cone_angl": [189, 520, 529, 536, 547, 833], "determin": [189, 305, 331, 431, 833], "taper": [189, 224, 683, 833], "dovetail_shap": [189, 833], "shape": [189, 224, 242, 358, 409, 419, 425, 520, 529, 536, 547, 589, 612, 618, 653, 668, 683, 684, 692, 698, 833], "integ": [189, 242, 358, 419, 833], "squar": [189, 242, 520, 536, 612, 684, 698, 833], "2": [189, 224, 242, 358, 821, 826, 833, 837], "round": [189, 242, 520, 536, 612, 684, 698, 833], "3": [189, 242, 358, 823, 826, 833, 837], "4": [189, 242, 358, 821, 826, 833], "radiu": [189, 242, 520, 529, 536, 547, 612, 618, 684, 692, 698, 833], "tool_angl": [189, 196, 525, 541, 833], "tool_diamet": [189, 196, 525, 541, 833], "tool_height": [189, 196, 525, 541, 833], "height": [189, 196, 224, 242, 331, 358, 372, 373, 419, 489, 525, 529, 536, 541, 547, 618, 653, 656, 668, 670, 684, 692, 821, 827, 828, 829, 833], "initi": [189, 381, 402, 434, 456, 478], "later": [189, 827, 828], "flank_angl": [189, 520, 529, 536, 547], "flank": [189, 520, 529, 536, 547], "applic": [189, 242, 306, 833, 835], "shape_radiu": [189, 242, 520, 529, 536, 547, 612, 618, 684, 692, 833], "machin": [189, 242, 358, 419, 515, 526, 527, 528, 542, 543, 544, 572, 576, 590, 595, 603, 604, 609, 611, 617, 625, 627, 634, 635, 640, 662, 664, 677, 678, 689, 697, 826, 831], "cutter": [196, 525, 541], "step": [224, 237, 523, 539, 615, 653, 657, 668, 672, 683, 687, 754, 756, 797, 822, 826], "more": [224, 362, 409, 422, 486, 822, 825, 826, 828, 833], "step_shap": [224, 653, 668, 833], "heel": [224, 237, 653, 668, 683, 833], "doubl": [224, 277, 506, 513, 514, 653, 668, 683, 833], "step_depth": [224, 237, 653, 661, 668, 676, 833], "combin": [224, 833], "heel_depth": [224, 237, 653, 661, 668, 676, 833], "tapered_heel": [224, 661, 668, 676, 683, 833], "tenon_mortise_height": [224, 833], "tenon": [224, 242, 536, 542, 543, 547, 618, 653, 656, 664, 698, 822], "mortis": [224, 242, 520, 526, 527, 529, 668, 670, 677, 822], "featru": [224, 833], "tenonmortis": 242, "main_beam_guid": 242, "cross_beam_guid": 242, "somewher": 260, "three": [277, 833, 837], "coplanar": 281, "inflate_bi": [297, 466, 469, 818], "bound": [297, 358, 364, 367, 392, 395, 419, 423, 426, 446, 449, 466, 469, 716, 717, 818], "box": [297, 358, 364, 367, 392, 395, 419, 423, 426, 446, 449, 466, 469, 489, 677, 716, 717, 798, 818, 825, 828], "aabb": [297, 358, 364, 392, 419, 423, 446, 466], "enlarg": 297, "amount": [297, 360, 371, 818], "regard": [297, 529, 618], "inflat": [297, 364, 367, 392, 395, 423, 426, 446, 449, 466, 469, 818], "pluggabl": 297, "plugin": [297, 822], "avail": 297, "jointrul": [298, 304, 311, 318, 349, 355, 822, 834], "categori": [298, 300, 305, 827, 828, 837], "rule": [298, 300, 301, 302, 303, 304, 311, 313, 315, 316, 317, 318, 326, 327, 328, 329, 330, 331, 349, 351, 352, 353, 354, 355, 363, 376, 378, 822, 825, 828, 829, 834, 837], "assign": [298, 349, 706, 708, 715, 833, 836], "joint_typ": [298, 311, 349], "category_a": 298, "category_b": [298, 305], "topo": 298, "support": [298, 300, 419, 798, 819, 820], "keyword": [298, 311, 349, 431, 710], "model_max_dist": [300, 313, 351], "09": [300, 304, 313, 318, 330, 351, 355], "exceed": [300, 351, 572, 573], "timberel": [300, 304, 305, 311, 313, 318, 326, 330, 351, 355, 358, 389, 419, 487, 603, 634, 635, 711, 822], "absolut": [300, 313, 351], "alreadi": [300, 313, 351, 708, 711], "use_default": [303, 317, 329, 354], "handled_pair": [304, 318, 330, 355], "definit": [304, 318, 330, 355, 826, 834], "jointdefinit": [304, 318, 330, 355, 822], "sort": 305, "accord": [305, 358, 419, 827], "catergory_a": 305, "debug": [306, 486, 829, 834, 835], "inform": [306, 486, 822, 829, 834, 835, 836], "visual": [306, 486, 754, 798, 820], "inspect": [306, 835], "relat": [306, 463, 547, 692, 826], "feature_error": 306, "occur": [306, 486, 733, 835], "joint_error": 306, "complianc": 313, "link": 319, "delai": [319, 321], "actual": [319, 321, 370], "downstream": [319, 321], "compon": [319, 321, 699, 700, 702, 703, 704, 705, 823, 827, 828, 829, 831, 832, 834, 837], "There": [319, 820, 827, 833, 837], "wai": [319, 764, 820], "name": [319, 492, 502, 699, 702, 703, 704, 705, 710, 711, 725, 728, 826, 827, 835], "altern": 319, "transform": [319, 368, 396, 427, 450, 470, 737, 738, 739, 740, 746, 748, 749, 750], "shall": [321, 711, 824], "assembli": [331, 821, 822, 829, 835], "geometri": [331, 358, 365, 366, 367, 368, 386, 387, 389, 392, 393, 394, 395, 396, 406, 407, 409, 419, 424, 425, 426, 427, 431, 440, 441, 446, 447, 448, 449, 450, 460, 461, 466, 467, 468, 469, 470, 483, 484, 486, 488, 489, 509, 514, 523, 526, 527, 528, 539, 543, 544, 555, 557, 560, 561, 570, 572, 576, 584, 589, 590, 598, 609, 615, 617, 625, 630, 640, 644, 657, 662, 664, 672, 676, 677, 678, 687, 689, 697, 716, 717, 737, 738, 740, 745, 749, 750, 798, 818, 822, 825, 828, 829, 834, 835, 836, 837], "must": [331, 506, 520, 536, 567, 581, 595, 603, 604, 612, 634, 635, 648, 653, 668, 684, 733, 829, 832], "planar": [331, 383, 437, 473, 825, 829, 833], "beam_width": [331, 829], "aka": 331, "thick": [331, 409, 419, 431, 472, 473, 648, 829], "caviti": 331, "frame_depth": [331, 829], "stud_spac": [331, 829], "space": [331, 506, 520, 536, 547, 567, 581, 595, 612, 627, 653, 668, 684, 692, 829], "stud": [331, 358, 828, 829, 833], "z_axi": 331, "vector": [331, 372, 373, 409, 431, 560, 737, 738, 749, 750, 822, 828, 829], "orient": [331, 367, 372, 373, 395, 426, 449, 469, 472, 506, 536, 567, 581, 595, 609, 626, 640, 648, 653, 668, 684, 717, 836], "post": 331, "insid": [331, 741, 820], "zaxi": 331, "categoryrul": [331, 822], "line": [331, 358, 372, 419, 560, 561, 822, 827, 828, 829, 832], "panel_length": 331, "panel_height": 331, "jack_stud": [331, 829, 833], "surfaceassembli": 331, "beamdefinit": 331, "jack": [331, 581, 589, 829], "king_stud": [331, 829, 833], "king": [331, 829], "edge_stud": [331, 829, 833], "edg": [331, 358, 419, 431, 520, 529, 536, 547, 566, 612, 618, 648, 684, 692, 712, 829, 833], "sill": [331, 829, 833], "header": [331, 829, 833], "plate": [331, 409, 443, 630, 634, 635, 640, 706, 822, 829, 834], "element_on": 335, "element_two": 335, "beam_def": 342, "element_lists_to_intersect": 342, "polylin": [343, 409, 419, 431, 472], "element_loop": 344, "k": 349, "topology_typ": 349, "constant": 349, "global": [349, 835], "revers": 351, "beama": 356, "beamb": 356, "x_default": 357, "t_default": 357, "l_default": 357, "slat": 358, "etc": [358, 419, 787, 820, 822, 828], "rectangular": [358, 828], "local": [358, 552, 828], "coordin": [358, 368, 396, 409, 419, 427, 450, 470, 489, 506, 520, 536, 547, 552, 567, 581, 595, 612, 627, 653, 668, 684, 692, 828], "system": [358, 419, 491, 552, 828], "locat": [358, 798, 828], "major": [358, 828], "also": [358, 819, 822, 825, 827, 828, 833], "fibr": [358, 825], "direct": [358, 371, 372, 373, 431, 699, 739, 740, 818, 828, 829, 837], "solid": [358, 409, 834], "wood": 358, "larger": [358, 828, 833], "parametr": [358, 383, 437, 506, 520, 536, 547, 567, 581, 595, 612, 627, 653, 668, 684, 692, 822], "blank": [358, 360, 379, 419, 431, 489, 572, 733, 828], "materi": [358, 419, 708, 714, 715, 730, 828, 836], "stock": [358, 419, 828], "produc": [358, 419], "ref_fram": [358, 419], "btlx": [358, 419, 489, 491, 492, 502, 503, 505, 822, 825], "standard": [358, 419, 829], "ref_sid": [358, 419, 529, 547, 618, 661, 676, 692], "6": [358, 419, 491, 603, 604, 634, 635], "ref_edg": 358, "long": [358, 371], "equal": [358, 648], "centerline_start": 358, "centerline_end": 358, "xmin": [358, 419], "ymin": [358, 419], "zmin": [358, 419], "xmax": [358, 419], "ymax": [358, 419], "zmax": [358, 419], "long_edg": 358, "midpoint": 358, "middl": [358, 833], "onc": [358, 419, 828], "wide": [358, 419], "joint_kei": [360, 379], "remov": [360, 379, 380, 381, 402, 433, 434, 456, 478, 734, 735, 736, 827, 832, 833], "well": [360, 711], "lement": [361, 391, 445, 465], "ref_side_index": [363, 376, 377, 378, 492, 513, 529, 547, 573, 588, 602, 603, 604, 618, 634, 635, 661, 676, 692], "previou": 363, "right": [363, 376, 378, 824, 833], "hand": [363, 376, 378], "thumb": [363, 376, 378], "rs5": [363, 376, 378], "rs6": [363, 376, 378, 492], "back": [363, 611], "rel": [363, 376, 378], "offset": [364, 367, 392, 395, 423, 446, 449, 466, 469, 529, 547, 618, 692, 829], "collis": [365, 393, 424, 447, 467], "include_featur": [366, 425, 448, 468], "includ": [366, 425, 448, 468, 502, 824, 826], "brep": [366, 419, 425, 436, 448, 468, 473, 509, 523, 527, 539, 543, 555, 570, 576, 584, 598, 603, 604, 615, 625, 630, 634, 635, 644, 657, 664, 672, 687, 697, 822, 836], "obb": [367, 395, 426, 449, 469], "world": [368, 396, 409, 427, 450, 470, 828, 829], "spatial": [368, 396, 427, 450, 470], "hierarchi": [368, 396, 427, 450, 470, 706, 708, 837], "endpoint": [370, 373], "closer": 370, "interest": 370, "depend": [370, 372, 373, 823, 826, 833], "pln": 371, "metric": 371, "minimum": 371, "z_vector": [372, 373], "indic": [372, 373, 486, 567, 827, 828], "worldz": [372, 373], "worldx": [372, 373], "point_start": 373, "point_end": 373, "end_point": 373, "next": 376, "front": [376, 611], "parallel": [377, 595, 602, 648, 798, 828, 833], "measur": 377, "across": 378, "state": [381, 402, 434, 456, 478], "debug_info": [381, 402, 434, 456, 478, 486], "side_index": [383, 437], "request": [383, 437], "copi": [387, 407, 441, 461, 484, 738, 740, 747, 748, 750, 824], "compas_model": [387, 407, 441, 461, 484, 711, 722, 725, 728, 797], "screw": [389, 787], "dowel": [389, 833], "bracket": 389, "we": [389, 409], "rethink": 389, "entir": 389, "clear": [389, 700, 704], "appropri": 389, "put": [409, 489], "some": [409, 825, 836], "thought": 409, "what": 409, "v": 409, "perhap": 409, "clearli": 409, "prehap": 409, "would": 409, "sens": 409, "move": 409, "stuff": 409, "over": 409, "here": [409, 733, 826, 829, 830, 836], "ballnodejoint": [409, 822], "while": [409, 486, 833, 835], "attempt": [409, 835], "tightli": 409, "coupl": 409, "differec": 409, "outlin": [409, 419, 431], "seem": 409, "just": 409, "outline_point": 409, "structur": [409, 746, 747, 748, 819, 822, 825, 829, 834, 837], "assum": 409, "goe": 409, "extra": 409, "geometr": [409, 822, 826, 832, 834], "These": [409, 827, 833], "boolean": [409, 825, 829, 832, 834], "btlxfromgeometrydefinit": 409, "plywood": 419, "clt": 419, "top": [419, 431, 520, 536, 610, 611, 612, 684, 692, 825, 833], "bottom": [419, 431, 520, 536, 547, 611, 612, 684, 692, 833], "outline_a": 419, "nurbscurv": 419, "princip": [419, 573], "outline_b": 419, "number": [419, 700, 704, 829, 837], "blank_extens": [419, 431], "blank_length": [419, 489], "area": [419, 436], "is_beam": 443, "is_plat": 443, "is_wal": 443, "is_group_el": 443, "slab": 463, "singl": [463, 473, 798, 826], "serv": [463, 836], "group": [463, 708, 709, 710, 711, 722, 725, 728, 827], "form": 463, "often": 463, "prefabr": 463, "envelop": 463, "bodi": 463, "docstr": 463, "_": [468, 827], "open": [472, 819, 822], "sure": 472, "correctli": [472, 609, 640, 827], "except": [486, 487, 488, 712, 733], "try": 486, "suppos": 486, "debug_geometri": 486, "about": [486, 822], "cannot": [487, 488, 828, 833], "messag": [487, 488], "feature_geometri": 488, "element_geometri": 488, "modifi": [488, 745, 824], "act": 489, "wrapper": 489, "realli": 489, "parent": [489, 708, 709, 710, 711], "attr": [489, 710], "corner": [489, 833], "blank_fram": 489, "et": 490, "element_fac": 491, "essenti": 491, "translat": [491, 737, 738, 739, 740], "zero": [492, 829], "rs1": [492, 513, 529, 547, 573, 588, 602, 618, 661, 676, 692], "prioriti": [492, 798, 833], "process_id": 492, "id": [492, 798, 820], "processing_nam": 492, "subprocess": [494, 508, 522, 538, 554, 569, 583, 597, 614, 629, 643, 655, 671, 686], "nest": [494, 508, 522, 538, 554, 569, 583, 597, 614, 629, 643, 655, 671, 686], "write": [502, 503, 766, 827, 828], "company_nam": 502, "compani": 502, "gramazio": [502, 819, 822, 824], "kohler": [502, 819, 822, 824], "research": [502, 819, 822, 824], "file_nam": 502, "comment": 502, "xml": [503, 504, 505, 831], "type_": 504, "regist": 504, "callabl": [504, 725], "file_path": 505, "model_to_xml": 505, "btlxprocess": [506, 520, 529, 536, 552, 567, 581, 595, 612, 618, 627, 641, 653, 668, 684, 822, 826], "orientationtyp": [506, 536, 567, 581, 595, 653, 668, 684, 822], "start_x": [506, 520, 536, 552, 567, 581, 595, 612, 627, 653, 668, 684], "100000": [506, 520, 536, 567, 581, 595, 612, 627, 653, 668, 684], "50000": [506, 581, 595, 627, 653, 668], "angle_1": 506, "horizont": [506, 567, 581, 595, 627, 648], "179": [506, 520, 536, 567, 581, 595, 612, 627, 653, 668, 684, 832], "9": [506, 520, 536, 567, 581, 595, 612, 627, 653, 668, 684, 832], "inclination_1": 506, "vertic": [506, 581, 595, 627, 648, 828, 833], "angle_2": 506, "inclination_2": 506, "plane_a": [514, 832], "plane_b": [514, 832], "5000": [520, 536, 612, 684, 711], "margin": [520, 536, 612, 684], "180": [520, 612], "slope": [520, 595, 612, 627], "reder": [520, 536, 612, 684], "inclin": [520, 536, 552, 581, 595, 612, 627, 653, 668, 684], "limitation_top": 520, "limit": [520, 536, 552, 595, 603, 604, 610, 611, 612, 627, 634, 635, 668, 684, 692, 824], "unlimit": [520, 610], "length_limited_bottom": [520, 536, 612, 684, 692], "whether": [520, 536, 612, 668, 684, 692, 798, 824], "1000": [520, 536, 612, 653, 656, 668, 670, 684], "cone": [520, 529, 536, 547], "30": [520, 536], "use_flank_angl": [520, 536], "35": [520, 536], "volum": [523, 527, 539, 543, 576, 603, 604, 609, 615, 625, 634, 635, 640, 657, 664, 672, 677, 687, 697, 706], "itersect": [523, 539, 615, 657, 672, 687], "fail": [523, 539, 615, 657, 672, 687], "80": [529, 547, 618, 692], "40": [529, 547, 618, 692], "28": [529, 547, 618, 692], "10": [529, 547, 819, 823], "15": [529, 547], "20": [529, 547, 552, 618, 661, 676, 692], "case": [529, 618, 829, 834], "hous": [529, 618], "equival": [529, 618], "dovetailtenon": [529, 692, 822], "length_limited_top": [536, 612, 684, 692], "50": [547, 552, 692], "define_dovetail_tool": [547, 692], "degre": 552, "depth_limit": 552, "go": 552, "mm": 552, "cylind": [557, 798], "chang": [560, 833], "too": 560, "fragil": 560, "caus": 560, "issu": 560, "alt": 560, "straight": [560, 828], "enum": [566, 610, 626, 683, 698, 752], "refedg": [566, 567], "liter": [566, 610, 626, 683, 698], "oppedg": [566, 567], "french": [567, 576], "ref_posit": 567, "edgepositiontyp": [567, 822], "drillhol": [567, 573], "flag": 567, "other_beam": 573, "furthest": [573, 829], "rafter": [581, 589, 828], "89": 595, "lead_angle_parallel": 595, "lead": 595, "lead_angl": 595, "lead_inclination_parallel": 595, "lead_inclin": 595, "machining_limit": [595, 603, 604, 627, 634, 635], "polyhedron": [603, 604, 609, 634, 635, 640], "subtract": [609, 640, 832, 834], "ensur": [609, 640], "No": 610, "like": [610, 822, 825, 834], "configur": 611, "expected_kei": 611, "face_limited_start": 611, "face_limited_end": 611, "face_limited_front": 611, "face_limited_back": 611, "face_limited_top": 611, "face_limited_bottom": 611, "awai": 626, "internal_angl": 627, "intern": 627, "tilt_ref_sid": 627, "tilt": [627, 833], "tilt_end_sid": 627, "tilt_opp_sid": 627, "oppos": 627, "tilt_start_sid": 627, "full": 648, "accross": 648, "exactli": 648, "small": 648, "specifi": [648, 720, 829], "strut_inclin": [653, 668], "strut": [653, 668], "taperedheel": [653, 683], "presenc": [653, 668], "ye": [653, 668, 823], "tenon_width": [653, 656], "tenon_height": [653, 656], "stepjointnotch": [656, 822], "notch_limit": [668, 676], "notch_width": [668, 676], "strut_height": [668, 676], "stepshapetyp": [668, 822], "mortise_width": [668, 670], "mortise_height": [668, 670], "plana": 676, "chamfer": [684, 692], "io": 699, "ghenv": [699, 700, 704, 705], "environ": [699, 700, 704, 705, 820, 822, 823, 828], "permanent_param_count": [700, 704], "delet": [700, 704], "param": [702, 703], "input_nam": [704, 705], "rename_count": 704, "keep_connect": 704, "renam": [704, 705], "express": [706, 824], "center_of_mass": 706, "mass": 706, "detected_topo": 706, "beam_a_kei": 706, "beam_b_kei": 706, "total": 706, "groupnod": [708, 709, 710, 711], "under": [708, 709], "root": [708, 709], "elementnod": [708, 709], "upstream": [711, 725, 728], "mayb": 711, "wall1_group": 711, "200": 711, "3000": 711, "wall1": 711, "worldxi": [711, 821], "100": 711, "300": 711, "add_el": 711, "has_group": 711, "b": [712, 729, 735], "graph": 712, "neither": 715, "retriev": [720, 827], "yield": [721, 731, 732], "interaction_typ": 722, "group_nam": [725, 728], "filter_": 725, "queri": [725, 726, 728], "filter": [725, 827], "stop_on_first_error": 733, "joineri": 733, "feasibl": 733, "instruct": [733, 752, 754, 777, 787, 798, 808, 822], "sequenc": [733, 797, 822], "reason": 733, "iter": 733, "encount": 733, "radian": [737, 738], "scale": [737, 738, 749, 750, 836], "factor": [739, 740], "connectionsolv": [741, 822], "human": [753, 798], "robot": [753, 798], "build": [754, 764, 765, 766, 797, 798, 823, 837], "collect": [754, 818, 834], "pars": 764, "implemet": 764, "your": [764, 819], "own": [764, 833], "you": [764, 819, 825, 829, 833, 837], "want": 764, "buildingplan": [765, 766, 797, 822], "building_plan": 766, "tranform": [775, 785, 795, 816], "3d": [777, 787, 822], "linear": [777, 828], "incorpor": 787, "simpl": [797, 822, 825], "per": 797, "assembl": 798, "actor": [798, 822], "element_id": 798, "cad": [798, 820], "elements_held": 798, "held": 798, "typic": [798, 826], "is_built": 798, "is_plan": 798, "increment": 798, "text": [808, 820, 831], "overlai": 808, "prior": 818, "project": [819, 822], "develop": [819, 822], "aleksandra": 819, "apolinarska": 819, "chen": 819, "kasir": 819, "gonzalo": 819, "casa": 819, "eth": [819, 822, 824], "zurich": [819, 822, 824], "swiss": 819, "nation": 819, "scienc": 819, "foundat": 819, "compet": 819, "digit": 819, "nccr": 819, "dfab": 819, "programm": 819, "As": 819, "mani": [819, 820, 822], "contributor": 819, "work": [819, 829], "acknowledg": 819, "misc": 819, "titl": 819, "librari": [819, 820, 822, 825], "author": [819, 824], "anna": 819, "http": [819, 823, 826], "github": [819, 823], "com": [819, 823, 826], "gramaziokohl": 819, "year": 819, "2022": 819, "2023": 819, "doi": 819, "5281": 819, "zenodo": 819, "7934267": 819, "url": 819, "present": [820, 833], "concept": [820, 825], "run": [820, 822], "python": [820, 822, 823, 825], "session": 820, "editor": 820, "sublim": 820, "studio": 820, "eclips": 820, "blender": 820, "timberassembli": 821, "geometry_typ": 821, "add_beam": 821, "packag": [822, 823, 826], "written": 822, "ecosystem": 822, "rhinocero": 822, "plug": 822, "activ": [822, 823, 828, 834, 836], "being": 822, "continu": 822, "At": 822, "stage": 822, "encompass": 822, "fast": 822, "intuit": 822, "custom": 822, "entiti": 822, "maintain": 822, "semant": 822, "futur": 822, "expand": 822, "entail": [822, 827], "analysi": 822, "softwar": [822, 824], "specialist": 822, "built": [822, 825], "upon": 822, "framework": 822, "basic": 822, "complex": 822, "resolv": 822, "backend": 822, "rhinocommon": 822, "sdk": 822, "handl": 822, "opencascad": 822, "occ": 822, "introduct": 822, "instal": 822, "api": [822, 825], "lbuttjoint": 822, "lfrenchridgelapjoint": 822, "llapjoint": 822, "lmiterjoint": 822, "nulljoint": 822, "tbirdsmouthjoint": 822, "tdovetailjoint": 822, "tlapjoint": 822, "tstepjoint": 822, "tenonmortisejoint": 822, "xlapjoint": 822, "ybuttjoint": 822, "find_neighboring_el": 822, "btlxwriter": 822, "btlxpart": [822, 826], "doublecut": [822, 832, 833], "dovetailmortis": 822, "jackraftercut": [822, 832], "slot": 822, "stepjoint": 822, "limitationtoptyp": 822, "machininglimit": 822, "tenonshapetyp": 822, "debuginfom": 822, "directrul": 822, "featuredefinit": 822, "surfacemodel": 822, "topologyrul": 822, "guess_joint_topology_2beam": 822, "set_default_joint": 822, "buildingplanpars": 822, "lineardimens": 822, "model3d": 822, "simplesequencegener": 822, "text3d": 822, "clear_gh_param": 822, "add_gh_param": 822, "manage_dynamic_param": 822, "list_input_valid": 822, "item_input_valid": 822, "get_leaf_subclass": 822, "rename_gh_input": 822, "workflow": [822, 825, 827, 828], "show": [822, 825], "util": [822, 825], "contribut": [822, 825], "licens": 822, "cite": 822, "n": 823, "myenvnam": 823, "c": [823, 824], "forg": 823, "7": 823, "m": 823, "compas_rhino": 823, "v7": 823, "latest": 823, "fork": 823, "repositori": 823, "clone": 823, "git": 823, "yourgithub_usernam": 823, "cd": 823, "edit": 823, "mode": 823, "pip": 823, "dev": 823, "txt": 823, "compil": 823, "invok": 823, "ghuser": 823, "mit": 824, "copyright": 824, "2025": 824, "permiss": 824, "herebi": 824, "grant": 824, "free": 824, "charg": 824, "person": 824, "obtain": 824, "document": [824, 826, 827, 828, 836], "deal": 824, "restrict": 824, "merg": 824, "publish": 824, "distribut": 824, "sublicens": 824, "sell": 824, "permit": 824, "whom": 824, "furnish": 824, "so": [824, 826], "subject": 824, "condit": 824, "abov": [824, 833], "notic": 824, "substanti": 824, "portion": 824, "THE": 824, "AS": 824, "warranti": 824, "OF": 824, "kind": [824, 833], "OR": 824, "impli": [824, 834], "BUT": 824, "NOT": 824, "TO": 824, "merchant": 824, "FOR": 824, "particular": 824, "purpos": 824, "AND": 824, "noninfring": 824, "IN": 824, "NO": 824, "event": 824, "holder": 824, "BE": 824, "liabl": 824, "claim": 824, "damag": 824, "liabil": 824, "action": 824, "contract": 824, "tort": 824, "aris": 824, "out": 824, "WITH": 824, "easi": 825, "autom": 825, "bake": 825, "textur": [825, 836], "render": [825, 836], "style": 825, "might": [825, 833], "componen": 825, "overal": 825, "idea": 825, "how": [825, 833, 837], "Then": 825, "explain": 825, "requr": 826, "btlx_process": 826, "found": 826, "design2machin": 826, "btlx_2_1_0": 826, "pdf": 826, "joint_factori": 826, "append": 826, "process_typ": 826, "header_attribut": 826, "process_param": 826, "where": [826, 828, 831, 833, 836], "factori": 826, "btlxjoint": 826, "register_joint": 826, "deriv": 826, "__init__": 826, "py": 826, "mind": 826, "intend": [827, 828], "hybrid": 827, "encod": 827, "concaten": 827, "colon": 827, "entri": 827, "underscor": 827, "attr1nam": 827, "attr1value_attr2nam": 827, "attr2valu": 827, "four": [827, 833], "zvector": [827, 828], "setstandardattribut": 827, "getstandardattribut": 827, "user": [827, 829], "criteria": 827, "setcustomattribut": 827, "getcustomattribut": 827, "checkstandardattribut": 827, "miss": 827, "deleteattribut": 827, "joist": 828, "linecurv": 828, "referenc": [828, 829], "latter": 828, "drawn": 828, "li": [828, 836], "sai": 828, "convent": 828, "updaterefobj": 828, "size": [828, 836], "extract": [828, 835], "centrelin": 828, "curv": 828, "help": 829, "bit": 829, "vocabulari": 829, "stud_direct": 829, "creategeometri": [829, 834], "debuginfo": [829, 834], "sheeting_outsid": 829, "sheet": 829, "sheeting_insid": 829, "lintel_post": 829, "onto": 829, "edge_stud_offset": 829, "flush": [829, 833], "custom_dimens": 829, "joint_overrid": 829, "dynam": [829, 833], "select": [829, 833, 835], "demo": 830, "content": 831, "oper": [832, 834], "ly": 832, "01": [832, 833], "cylindr": 832, "lower": 833, "hereaft": 833, "lowest": 833, "highest": 833, "level": 833, "canva": 833, "now": 833, "click": 833, "drop": 833, "down": 833, "becaus": 833, "everi": 833, "halflap": 833, "overwrit": [833, 837], "variabl": 833, "highli": 833, "By": [833, 837], "shorten": 833, "clean": 833, "meet": 833, "half": 833, "upper": 833, "overlap": 833, "rang": 833, "99": 833, "unlik": 833, "centr": 833, "keep": 833, "secur": 833, "prevent": 833, "sequenti": 833, "third": 833, "outer": 833, "remain": 833, "unchang": 833, "crate": 833, "doblecut": 833, "summaris": 833, "compos": 834, "computation": 834, "expens": 834, "disabl": 834, "maxdist": 834, "max": 834, "visualis": 834, "preview": 835, "recogn": 835, "bakewithboxmap": 836, "layer": 836, "desir": 836, "random": 836, "deviat": 836, "mapsiz": 836, "adjust": 836, "imag": 836, "ratio": 836, "bitmap": 836, "care": 837, "final": 837}, "objects": {"compas_timber.connections": [[10, 0, 1, "", "BallNodeJoint"], [27, 0, 1, "", "ConnectionSolver"], [31, 0, 1, "", "Joint"], [48, 0, 1, "", "JointTopology"], [50, 0, 1, "", "LButtJoint"], [68, 0, 1, "", "LFrenchRidgeLapJoint"], [85, 0, 1, "", "LLapJoint"], [102, 0, 1, "", "LMiterJoint"], [121, 0, 1, "", "LapJoint"], [138, 0, 1, "", "NullJoint"], [155, 0, 1, "", "TBirdsmouthJoint"], [172, 0, 1, "", "TButtJoint"], [189, 0, 1, "", "TDovetailJoint"], [207, 0, 1, "", "TLapJoint"], [224, 0, 1, "", "TStepJoint"], [242, 0, 1, "", "TenonMortiseJoint"], [260, 0, 1, "", "XLapJoint"], [277, 0, 1, "", "YButtJoint"], [297, 2, 1, "", "find_neighboring_elements"]], "compas_timber.connections.BallNodeJoint": [[11, 1, 1, "", "ToString"], [12, 1, 1, "", "add_extensions"], [13, 1, 1, "", "add_features"], [14, 1, 1, "", "check_elements_compatibility"], [15, 1, 1, "", "copy"], [16, 1, 1, "", "create"], [17, 1, 1, "", "element_count_complies"], [18, 1, 1, "", "from_json"], [19, 1, 1, "", "from_jsonstring"], [20, 1, 1, "", "get_face_most_ortho_to_beam"], [21, 1, 1, "", "get_face_most_towards_beam"], [22, 1, 1, "", "restore_beams_from_keys"], [23, 1, 1, "", "sha256"], [24, 1, 1, "", "to_json"], [25, 1, 1, "", "to_jsonstring"], [26, 1, 1, "", "validate_data"]], "compas_timber.connections.ConnectionSolver": [[28, 1, 1, "", "find_intersecting_pairs"], [29, 1, 1, "", "find_topology"], [30, 1, 1, "", "find_wall_wall_topology"]], "compas_timber.connections.Joint": [[32, 1, 1, "", "ToString"], [33, 1, 1, "", "add_extensions"], [34, 1, 1, "", "add_features"], [35, 1, 1, "", "check_elements_compatibility"], [36, 1, 1, "", "copy"], [37, 1, 1, "", "create"], [38, 1, 1, "", "element_count_complies"], [39, 1, 1, "", "from_json"], [40, 1, 1, "", "from_jsonstring"], [41, 1, 1, "", "get_face_most_ortho_to_beam"], [42, 1, 1, "", "get_face_most_towards_beam"], [43, 1, 1, "", "restore_beams_from_keys"], [44, 1, 1, "", "sha256"], [45, 1, 1, "", "to_json"], [46, 1, 1, "", "to_jsonstring"], [47, 1, 1, "", "validate_data"]], "compas_timber.connections.JointTopology": [[49, 1, 1, "", "get_name"]], "compas_timber.connections.LButtJoint": [[51, 1, 1, "", "ToString"], [52, 1, 1, "", "add_extensions"], [53, 1, 1, "", "add_features"], [54, 1, 1, "", "check_elements_compatibility"], [55, 1, 1, "", "copy"], [56, 1, 1, "", "create"], [57, 1, 1, "", "element_count_complies"], [58, 1, 1, "", "from_json"], [59, 1, 1, "", "from_jsonstring"], [60, 1, 1, "", "get_face_most_ortho_to_beam"], [61, 1, 1, "", "get_face_most_towards_beam"], [62, 1, 1, "", "restore_beams_from_keys"], [63, 1, 1, "", "sha256"], [64, 1, 1, "", "to_json"], [65, 1, 1, "", "to_jsonstring"], [66, 1, 1, "", "update_beam_roles"], [67, 1, 1, "", "validate_data"]], "compas_timber.connections.LFrenchRidgeLapJoint": [[69, 1, 1, "", "ToString"], [70, 1, 1, "", "add_extensions"], [71, 1, 1, "", "add_features"], [72, 1, 1, "", "check_elements_compatibility"], [73, 1, 1, "", "copy"], [74, 1, 1, "", "create"], [75, 1, 1, "", "element_count_complies"], [76, 1, 1, "", "from_json"], [77, 1, 1, "", "from_jsonstring"], [78, 1, 1, "", "get_face_most_ortho_to_beam"], [79, 1, 1, "", "get_face_most_towards_beam"], [80, 1, 1, "", "restore_beams_from_keys"], [81, 1, 1, "", "sha256"], [82, 1, 1, "", "to_json"], [83, 1, 1, "", "to_jsonstring"], [84, 1, 1, "", "validate_data"]], "compas_timber.connections.LLapJoint": [[86, 1, 1, "", "ToString"], [87, 1, 1, "", "add_extensions"], [88, 1, 1, "", "add_features"], [89, 1, 1, "", "check_elements_compatibility"], [90, 1, 1, "", "copy"], [91, 1, 1, "", "create"], [92, 1, 1, "", "element_count_complies"], [93, 1, 1, "", "from_json"], [94, 1, 1, "", "from_jsonstring"], [95, 1, 1, "", "get_face_most_ortho_to_beam"], [96, 1, 1, "", "get_face_most_towards_beam"], [97, 1, 1, "", "restore_beams_from_keys"], [98, 1, 1, "", "sha256"], [99, 1, 1, "", "to_json"], [100, 1, 1, "", "to_jsonstring"], [101, 1, 1, "", "validate_data"]], "compas_timber.connections.LMiterJoint": [[103, 1, 1, "", "ToString"], [104, 1, 1, "", "add_extensions"], [105, 1, 1, "", "add_features"], [106, 1, 1, "", "check_elements_compatibility"], [107, 1, 1, "", "copy"], [108, 1, 1, "", "create"], [109, 1, 1, "", "element_count_complies"], [110, 1, 1, "", "from_json"], [111, 1, 1, "", "from_jsonstring"], [112, 1, 1, "", "get_cutoff_plane"], [113, 1, 1, "", "get_cutting_planes"], [114, 1, 1, "", "get_face_most_ortho_to_beam"], [115, 1, 1, "", "get_face_most_towards_beam"], [116, 1, 1, "", "restore_beams_from_keys"], [117, 1, 1, "", "sha256"], [118, 1, 1, "", "to_json"], [119, 1, 1, "", "to_jsonstring"], [120, 1, 1, "", "validate_data"]], "compas_timber.connections.LapJoint": [[122, 1, 1, "", "ToString"], [123, 1, 1, "", "add_extensions"], [124, 1, 1, "", "add_features"], [125, 1, 1, "", "check_elements_compatibility"], [126, 1, 1, "", "copy"], [127, 1, 1, "", "create"], [128, 1, 1, "", "element_count_complies"], [129, 1, 1, "", "from_json"], [130, 1, 1, "", "from_jsonstring"], [131, 1, 1, "", "get_face_most_ortho_to_beam"], [132, 1, 1, "", "get_face_most_towards_beam"], [133, 1, 1, "", "restore_beams_from_keys"], [134, 1, 1, "", "sha256"], [135, 1, 1, "", "to_json"], [136, 1, 1, "", "to_jsonstring"], [137, 1, 1, "", "validate_data"]], "compas_timber.connections.NullJoint": [[139, 1, 1, "", "ToString"], [140, 1, 1, "", "add_extensions"], [141, 1, 1, "", "add_features"], [142, 1, 1, "", "check_elements_compatibility"], [143, 1, 1, "", "copy"], [144, 1, 1, "", "create"], [145, 1, 1, "", "element_count_complies"], [146, 1, 1, "", "from_json"], [147, 1, 1, "", "from_jsonstring"], [148, 1, 1, "", "get_face_most_ortho_to_beam"], [149, 1, 1, "", "get_face_most_towards_beam"], [150, 1, 1, "", "restore_beams_from_keys"], [151, 1, 1, "", "sha256"], [152, 1, 1, "", "to_json"], [153, 1, 1, "", "to_jsonstring"], [154, 1, 1, "", "validate_data"]], "compas_timber.connections.TBirdsmouthJoint": [[156, 1, 1, "", "ToString"], [157, 1, 1, "", "add_extensions"], [158, 1, 1, "", "add_features"], [159, 1, 1, "", "check_elements_compatibility"], [160, 1, 1, "", "copy"], [161, 1, 1, "", "create"], [162, 1, 1, "", "element_count_complies"], [163, 1, 1, "", "from_json"], [164, 1, 1, "", "from_jsonstring"], [165, 1, 1, "", "get_face_most_ortho_to_beam"], [166, 1, 1, "", "get_face_most_towards_beam"], [167, 1, 1, "", "restore_beams_from_keys"], [168, 1, 1, "", "sha256"], [169, 1, 1, "", "to_json"], [170, 1, 1, "", "to_jsonstring"], [171, 1, 1, "", "validate_data"]], "compas_timber.connections.TButtJoint": [[173, 1, 1, "", "ToString"], [174, 1, 1, "", "add_extensions"], [175, 1, 1, "", "add_features"], [176, 1, 1, "", "check_elements_compatibility"], [177, 1, 1, "", "copy"], [178, 1, 1, "", "create"], [179, 1, 1, "", "element_count_complies"], [180, 1, 1, "", "from_json"], [181, 1, 1, "", "from_jsonstring"], [182, 1, 1, "", "get_face_most_ortho_to_beam"], [183, 1, 1, "", "get_face_most_towards_beam"], [184, 1, 1, "", "restore_beams_from_keys"], [185, 1, 1, "", "sha256"], [186, 1, 1, "", "to_json"], [187, 1, 1, "", "to_jsonstring"], [188, 1, 1, "", "validate_data"]], "compas_timber.connections.TDovetailJoint": [[190, 1, 1, "", "ToString"], [191, 1, 1, "", "add_extensions"], [192, 1, 1, "", "add_features"], [193, 1, 1, "", "check_elements_compatibility"], [194, 1, 1, "", "copy"], [195, 1, 1, "", "create"], [196, 1, 1, "", "define_dovetail_tool"], [197, 1, 1, "", "element_count_complies"], [198, 1, 1, "", "from_json"], [199, 1, 1, "", "from_jsonstring"], [200, 1, 1, "", "get_face_most_ortho_to_beam"], [201, 1, 1, "", "get_face_most_towards_beam"], [202, 1, 1, "", "restore_beams_from_keys"], [203, 1, 1, "", "sha256"], [204, 1, 1, "", "to_json"], [205, 1, 1, "", "to_jsonstring"], [206, 1, 1, "", "validate_data"]], "compas_timber.connections.TLapJoint": [[208, 1, 1, "", "ToString"], [209, 1, 1, "", "add_extensions"], [210, 1, 1, "", "add_features"], [211, 1, 1, "", "check_elements_compatibility"], [212, 1, 1, "", "copy"], [213, 1, 1, "", "create"], [214, 1, 1, "", "element_count_complies"], [215, 1, 1, "", "from_json"], [216, 1, 1, "", "from_jsonstring"], [217, 1, 1, "", "get_face_most_ortho_to_beam"], [218, 1, 1, "", "get_face_most_towards_beam"], [219, 1, 1, "", "restore_beams_from_keys"], [220, 1, 1, "", "sha256"], [221, 1, 1, "", "to_json"], [222, 1, 1, "", "to_jsonstring"], [223, 1, 1, "", "validate_data"]], "compas_timber.connections.TStepJoint": [[225, 1, 1, "", "ToString"], [226, 1, 1, "", "add_extensions"], [227, 1, 1, "", "add_features"], [228, 1, 1, "", "check_elements_compatibility"], [229, 1, 1, "", "copy"], [230, 1, 1, "", "create"], [231, 1, 1, "", "element_count_complies"], [232, 1, 1, "", "from_json"], [233, 1, 1, "", "from_jsonstring"], [234, 1, 1, "", "get_face_most_ortho_to_beam"], [235, 1, 1, "", "get_face_most_towards_beam"], [236, 1, 1, "", "restore_beams_from_keys"], [237, 1, 1, "", "set_step_depths"], [238, 1, 1, "", "sha256"], [239, 1, 1, "", "to_json"], [240, 1, 1, "", "to_jsonstring"], [241, 1, 1, "", "validate_data"]], "compas_timber.connections.TenonMortiseJoint": [[243, 1, 1, "", "ToString"], [244, 1, 1, "", "add_extensions"], [245, 1, 1, "", "add_features"], [246, 1, 1, "", "check_elements_compatibility"], [247, 1, 1, "", "copy"], [248, 1, 1, "", "create"], [249, 1, 1, "", "element_count_complies"], [250, 1, 1, "", "from_json"], [251, 1, 1, "", "from_jsonstring"], [252, 1, 1, "", "get_face_most_ortho_to_beam"], [253, 1, 1, "", "get_face_most_towards_beam"], [254, 1, 1, "", "restore_beams_from_keys"], [255, 1, 1, "", "set_default_values"], [256, 1, 1, "", "sha256"], [257, 1, 1, "", "to_json"], [258, 1, 1, "", "to_jsonstring"], [259, 1, 1, "", "validate_data"]], "compas_timber.connections.XLapJoint": [[261, 1, 1, "", "ToString"], [262, 1, 1, "", "add_extensions"], [263, 1, 1, "", "add_features"], [264, 1, 1, "", "check_elements_compatibility"], [265, 1, 1, "", "copy"], [266, 1, 1, "", "create"], [267, 1, 1, "", "element_count_complies"], [268, 1, 1, "", "from_json"], [269, 1, 1, "", "from_jsonstring"], [270, 1, 1, "", "get_face_most_ortho_to_beam"], [271, 1, 1, "", "get_face_most_towards_beam"], [272, 1, 1, "", "restore_beams_from_keys"], [273, 1, 1, "", "sha256"], [274, 1, 1, "", "to_json"], [275, 1, 1, "", "to_jsonstring"], [276, 1, 1, "", "validate_data"]], "compas_timber.connections.YButtJoint": [[278, 1, 1, "", "ToString"], [279, 1, 1, "", "add_extensions"], [280, 1, 1, "", "add_features"], [281, 1, 1, "", "check_elements_compatibility"], [282, 1, 1, "", "copy"], [283, 1, 1, "", "create"], [284, 1, 1, "", "cross_beam_ref_side_index"], [285, 1, 1, "", "element_count_complies"], [286, 1, 1, "", "from_json"], [287, 1, 1, "", "from_jsonstring"], [288, 1, 1, "", "get_face_most_ortho_to_beam"], [289, 1, 1, "", "get_face_most_towards_beam"], [290, 1, 1, "", "get_miter_planes"], [291, 1, 1, "", "main_beam_ref_side_index"], [292, 1, 1, "", "restore_beams_from_keys"], [293, 1, 1, "", "sha256"], [294, 1, 1, "", "to_json"], [295, 1, 1, "", "to_jsonstring"], [296, 1, 1, "", "validate_data"]], "compas_timber.design": [[298, 0, 1, "", "CategoryRule"], [306, 0, 1, "", "DebugInfomation"], [311, 0, 1, "", "DirectRule"], [319, 0, 1, "", "FeatureDefinition"], [321, 0, 1, "", "JointDefinition"], [325, 0, 1, "", "JointRule"], [331, 0, 1, "", "SurfaceModel"], [349, 0, 1, "", "TopologyRule"], [356, 2, 1, "", "guess_joint_topology_2beams"], [357, 2, 1, "", "set_default_joints"]], "compas_timber.design.CategoryRule": [[299, 1, 1, "", "ToString"], [300, 1, 1, "", "comply"], [301, 1, 1, "", "get_category_rules"], [302, 1, 1, "", "get_direct_rules"], [303, 1, 1, "", "get_topology_rules"], [304, 1, 1, "", "joints_from_beams_and_rules"], [305, 1, 1, "", "reorder"]], "compas_timber.design.DebugInfomation": [[307, 1, 1, "", "ToString"], [308, 1, 1, "", "add_fastener_error"], [309, 1, 1, "", "add_feature_error"], [310, 1, 1, "", "add_joint_error"]], "compas_timber.design.DirectRule": [[312, 1, 1, "", "ToString"], [313, 1, 1, "", "comply"], [314, 1, 1, "", "contains"], [315, 1, 1, "", "get_category_rules"], [316, 1, 1, "", "get_direct_rules"], [317, 1, 1, "", "get_topology_rules"], [318, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.FeatureDefinition": [[320, 1, 1, "", "ToString"]], "compas_timber.design.JointDefinition": [[322, 1, 1, "", "ToString"], [323, 1, 1, "", "is_identical"], [324, 1, 1, "", "match"]], "compas_timber.design.JointRule": [[326, 1, 1, "", "comply"], [327, 1, 1, "", "get_category_rules"], [328, 1, 1, "", "get_direct_rules"], [329, 1, 1, "", "get_topology_rules"], [330, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.SurfaceModel": [[332, 1, 1, "", "beam_category_names"], [333, 1, 1, "", "create_model"], [334, 1, 1, "", "cull_overlaps"], [335, 1, 1, "", "distance_between_elements"], [336, 1, 1, "", "generate_frame"], [337, 1, 1, "", "generate_perimeter_beams"], [338, 1, 1, "", "generate_plates"], [339, 1, 1, "", "generate_stud_lines"], [340, 1, 1, "", "generate_studs"], [341, 1, 1, "", "generate_windows"], [342, 1, 1, "", "get_beam_intersections"], [343, 1, 1, "", "get_interior_segment_indices"], [344, 1, 1, "", "offset_elements"], [345, 1, 1, "", "parse_loops"], [346, 1, 1, "", "trim_jack_studs"], [347, 1, 1, "", "trim_king_studs"], [348, 1, 1, "", "trim_studs"]], "compas_timber.design.TopologyRule": [[350, 1, 1, "", "ToString"], [351, 1, 1, "", "comply"], [352, 1, 1, "", "get_category_rules"], [353, 1, 1, "", "get_direct_rules"], [354, 1, 1, "", "get_topology_rules"], [355, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.elements": [[358, 0, 1, "", "Beam"], [389, 0, 1, "", "Fastener"], [409, 0, 1, "", "FastenerTimberInterface"], [419, 0, 1, "", "Plate"], [443, 0, 1, "", "TimberElement"], [463, 0, 1, "", "Wall"]], "compas_timber.elements.Beam": [[359, 1, 1, "", "ToString"], [360, 1, 1, "", "add_blank_extension"], [361, 1, 1, "", "add_feature"], [362, 1, 1, "", "add_features"], [363, 1, 1, "", "back_side"], [364, 1, 1, "", "compute_aabb"], [365, 1, 1, "", "compute_collision_mesh"], [366, 1, 1, "", "compute_geometry"], [367, 1, 1, "", "compute_obb"], [368, 1, 1, "", "compute_worldtransformation"], [369, 1, 1, "", "copy"], [370, 1, 1, "", "endpoint_closest_to_point"], [371, 1, 1, "", "extension_to_plane"], [372, 1, 1, "", "from_centerline"], [373, 1, 1, "", "from_endpoints"], [374, 1, 1, "", "from_json"], [375, 1, 1, "", "from_jsonstring"], [376, 1, 1, "", "front_side"], [377, 1, 1, "", "get_dimensions_relative_to_side"], [378, 1, 1, "", "opp_side"], [379, 1, 1, "", "remove_blank_extension"], [380, 1, 1, "", "remove_features"], [381, 1, 1, "", "reset"], [382, 1, 1, "", "sha256"], [383, 1, 1, "", "side_as_surface"], [384, 1, 1, "", "to_json"], [385, 1, 1, "", "to_jsonstring"], [386, 1, 1, "", "transform"], [387, 1, 1, "", "transformed"], [388, 1, 1, "", "validate_data"]], "compas_timber.elements.Fastener": [[390, 1, 1, "", "ToString"], [391, 1, 1, "", "add_feature"], [392, 1, 1, "", "compute_aabb"], [393, 1, 1, "", "compute_collision_mesh"], [394, 1, 1, "", "compute_geometry"], [395, 1, 1, "", "compute_obb"], [396, 1, 1, "", "compute_worldtransformation"], [397, 1, 1, "", "copy"], [398, 1, 1, "", "from_json"], [399, 1, 1, "", "from_jsonstring"], [400, 1, 1, "", "remove_blank_extension"], [401, 1, 1, "", "remove_features"], [402, 1, 1, "", "reset"], [403, 1, 1, "", "sha256"], [404, 1, 1, "", "to_json"], [405, 1, 1, "", "to_jsonstring"], [406, 1, 1, "", "transform"], [407, 1, 1, "", "transformed"], [408, 1, 1, "", "validate_data"]], "compas_timber.elements.FastenerTimberInterface": [[410, 1, 1, "", "ToString"], [411, 1, 1, "", "copy"], [412, 1, 1, "", "from_json"], [413, 1, 1, "", "from_jsonstring"], [414, 1, 1, "", "get_features"], [415, 1, 1, "", "sha256"], [416, 1, 1, "", "to_json"], [417, 1, 1, "", "to_jsonstring"], [418, 1, 1, "", "validate_data"]], "compas_timber.elements.Plate": [[420, 1, 1, "", "ToString"], [421, 1, 1, "", "add_feature"], [422, 1, 1, "", "add_features"], [423, 1, 1, "", "compute_aabb"], [424, 1, 1, "", "compute_collision_mesh"], [425, 1, 1, "", "compute_geometry"], [426, 1, 1, "", "compute_obb"], [427, 1, 1, "", "compute_worldtransformation"], [428, 1, 1, "", "copy"], [429, 1, 1, "", "from_json"], [430, 1, 1, "", "from_jsonstring"], [431, 1, 1, "", "from_outline_thickness"], [432, 1, 1, "", "remove_blank_extension"], [433, 1, 1, "", "remove_features"], [434, 1, 1, "", "reset"], [435, 1, 1, "", "sha256"], [436, 1, 1, "", "shape"], [437, 1, 1, "", "side_as_surface"], [438, 1, 1, "", "to_json"], [439, 1, 1, "", "to_jsonstring"], [440, 1, 1, "", "transform"], [441, 1, 1, "", "transformed"], [442, 1, 1, "", "validate_data"]], "compas_timber.elements.TimberElement": [[444, 1, 1, "", "ToString"], [445, 1, 1, "", "add_feature"], [446, 1, 1, "", "compute_aabb"], [447, 1, 1, "", "compute_collision_mesh"], [448, 1, 1, "", "compute_geometry"], [449, 1, 1, "", "compute_obb"], [450, 1, 1, "", "compute_worldtransformation"], [451, 1, 1, "", "copy"], [452, 1, 1, "", "from_json"], [453, 1, 1, "", "from_jsonstring"], [454, 1, 1, "", "remove_blank_extension"], [455, 1, 1, "", "remove_features"], [456, 1, 1, "", "reset"], [457, 1, 1, "", "sha256"], [458, 1, 1, "", "to_json"], [459, 1, 1, "", "to_jsonstring"], [460, 1, 1, "", "transform"], [461, 1, 1, "", "transformed"], [462, 1, 1, "", "validate_data"]], "compas_timber.elements.Wall": [[464, 1, 1, "", "ToString"], [465, 1, 1, "", "add_feature"], [466, 1, 1, "", "compute_aabb"], [467, 1, 1, "", "compute_collision_mesh"], [468, 1, 1, "", "compute_geometry"], [469, 1, 1, "", "compute_obb"], [470, 1, 1, "", "compute_worldtransformation"], [471, 1, 1, "", "copy"], [472, 1, 1, "", "from_boundary"], [473, 1, 1, "", "from_brep"], [474, 1, 1, "", "from_json"], [475, 1, 1, "", "from_jsonstring"], [476, 1, 1, "", "remove_blank_extension"], [477, 1, 1, "", "remove_features"], [478, 1, 1, "", "reset"], [479, 1, 1, "", "rotate"], [480, 1, 1, "", "sha256"], [481, 1, 1, "", "to_json"], [482, 1, 1, "", "to_jsonstring"], [483, 1, 1, "", "transform"], [484, 1, 1, "", "transformed"], [485, 1, 1, "", "validate_data"]], "compas_timber.errors": [[486, 3, 1, "", "BeamJoiningError"], [487, 3, 1, "", "FastenerApplicationError"], [488, 3, 1, "", "FeatureApplicationError"]], "compas_timber.fabrication": [[489, 0, 1, "", "BTLxPart"], [492, 0, 1, "", "BTLxProcessing"], [502, 0, 1, "", "BTLxWriter"], [506, 0, 1, "", "DoubleCut"], [520, 0, 1, "", "DovetailMortise"], [536, 0, 1, "", "DovetailTenon"], [552, 0, 1, "", "Drilling"], [566, 0, 1, "", "EdgePositionType"], [567, 0, 1, "", "FrenchRidgeLap"], [581, 0, 1, "", "JackRafterCut"], [595, 0, 1, "", "Lap"], [610, 0, 1, "", "LimitationTopType"], [611, 0, 1, "", "MachiningLimits"], [612, 0, 1, "", "Mortise"], [626, 0, 1, "", "OrientationType"], [627, 0, 1, "", "Pocket"], [641, 0, 1, "", "Slot"], [653, 0, 1, "", "StepJoint"], [668, 0, 1, "", "StepJointNotch"], [683, 0, 1, "", "StepShapeType"], [684, 0, 1, "", "Tenon"], [698, 0, 1, "", "TenonShapeType"]], "compas_timber.fabrication.BTLxPart": [[490, 1, 1, "", "et_point_vals"], [491, 1, 1, "", "ref_side_from_face"]], "compas_timber.fabrication.BTLxProcessing": [[493, 1, 1, "", "ToString"], [494, 1, 1, "", "add_subprocessing"], [495, 1, 1, "", "copy"], [496, 1, 1, "", "from_json"], [497, 1, 1, "", "from_jsonstring"], [498, 1, 1, "", "sha256"], [499, 1, 1, "", "to_json"], [500, 1, 1, "", "to_jsonstring"], [501, 1, 1, "", "validate_data"]], "compas_timber.fabrication.BTLxWriter": [[503, 1, 1, "", "model_to_xml"], [504, 1, 1, "", "register_type_serializer"], [505, 1, 1, "", "write"]], "compas_timber.fabrication.DoubleCut": [[507, 1, 1, "", "ToString"], [508, 1, 1, "", "add_subprocessing"], [509, 1, 1, "", "apply"], [510, 1, 1, "", "copy"], [511, 1, 1, "", "from_json"], [512, 1, 1, "", "from_jsonstring"], [513, 1, 1, "", "from_planes_and_beam"], [514, 1, 1, "", "from_shapes_and_element"], [515, 1, 1, "", "planes_from_params_and_beam"], [516, 1, 1, "", "sha256"], [517, 1, 1, "", "to_json"], [518, 1, 1, "", "to_jsonstring"], [519, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailMortise": [[521, 1, 1, "", "ToString"], [522, 1, 1, "", "add_subprocessing"], [523, 1, 1, "", "apply"], [524, 1, 1, "", "copy"], [525, 1, 1, "", "define_dovetail_tool"], [526, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [527, 1, 1, "", "dovetail_volume_from_params_and_beam"], [528, 1, 1, "", "frame_from_params_and_beam"], [529, 1, 1, "", "from_frame_and_beam"], [530, 1, 1, "", "from_json"], [531, 1, 1, "", "from_jsonstring"], [532, 1, 1, "", "sha256"], [533, 1, 1, "", "to_json"], [534, 1, 1, "", "to_jsonstring"], [535, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailTenon": [[537, 1, 1, "", "ToString"], [538, 1, 1, "", "add_subprocessing"], [539, 1, 1, "", "apply"], [540, 1, 1, "", "copy"], [541, 1, 1, "", "define_dovetail_tool"], [542, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [543, 1, 1, "", "dovetail_volume_from_params_and_beam"], [544, 1, 1, "", "frame_from_params_and_beam"], [545, 1, 1, "", "from_json"], [546, 1, 1, "", "from_jsonstring"], [547, 1, 1, "", "from_plane_and_beam"], [548, 1, 1, "", "sha256"], [549, 1, 1, "", "to_json"], [550, 1, 1, "", "to_jsonstring"], [551, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Drilling": [[553, 1, 1, "", "ToString"], [554, 1, 1, "", "add_subprocessing"], [555, 1, 1, "", "apply"], [556, 1, 1, "", "copy"], [557, 1, 1, "", "cylinder_from_params_and_element"], [558, 1, 1, "", "from_json"], [559, 1, 1, "", "from_jsonstring"], [560, 1, 1, "", "from_line_and_element"], [561, 1, 1, "", "from_shapes_and_element"], [562, 1, 1, "", "sha256"], [563, 1, 1, "", "to_json"], [564, 1, 1, "", "to_jsonstring"], [565, 1, 1, "", "validate_data"]], "compas_timber.fabrication.FrenchRidgeLap": [[568, 1, 1, "", "ToString"], [569, 1, 1, "", "add_subprocessing"], [570, 1, 1, "", "apply"], [571, 1, 1, "", "copy"], [572, 1, 1, "", "frame_from_params_and_beam"], [573, 1, 1, "", "from_beam_beam_and_plane"], [574, 1, 1, "", "from_json"], [575, 1, 1, "", "from_jsonstring"], [576, 1, 1, "", "lap_volume_from_params_and_beam"], [577, 1, 1, "", "sha256"], [578, 1, 1, "", "to_json"], [579, 1, 1, "", "to_jsonstring"], [580, 1, 1, "", "validate_data"]], "compas_timber.fabrication.JackRafterCut": [[582, 1, 1, "", "ToString"], [583, 1, 1, "", "add_subprocessing"], [584, 1, 1, "", "apply"], [585, 1, 1, "", "copy"], [586, 1, 1, "", "from_json"], [587, 1, 1, "", "from_jsonstring"], [588, 1, 1, "", "from_plane_and_beam"], [589, 1, 1, "", "from_shapes_and_element"], [590, 1, 1, "", "plane_from_params_and_beam"], [591, 1, 1, "", "sha256"], [592, 1, 1, "", "to_json"], [593, 1, 1, "", "to_jsonstring"], [594, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Lap": [[596, 1, 1, "", "ToString"], [597, 1, 1, "", "add_subprocessing"], [598, 1, 1, "", "apply"], [599, 1, 1, "", "copy"], [600, 1, 1, "", "from_json"], [601, 1, 1, "", "from_jsonstring"], [602, 1, 1, "", "from_plane_and_beam"], [603, 1, 1, "", "from_shapes_and_element"], [604, 1, 1, "", "from_volume_and_beam"], [605, 1, 1, "", "sha256"], [606, 1, 1, "", "to_json"], [607, 1, 1, "", "to_jsonstring"], [608, 1, 1, "", "validate_data"], [609, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Mortise": [[613, 1, 1, "", "ToString"], [614, 1, 1, "", "add_subprocessing"], [615, 1, 1, "", "apply"], [616, 1, 1, "", "copy"], [617, 1, 1, "", "frame_from_params_and_beam"], [618, 1, 1, "", "from_frame_and_beam"], [619, 1, 1, "", "from_json"], [620, 1, 1, "", "from_jsonstring"], [621, 1, 1, "", "sha256"], [622, 1, 1, "", "to_json"], [623, 1, 1, "", "to_jsonstring"], [624, 1, 1, "", "validate_data"], [625, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Pocket": [[628, 1, 1, "", "ToString"], [629, 1, 1, "", "add_subprocessing"], [630, 1, 1, "", "apply"], [631, 1, 1, "", "copy"], [632, 1, 1, "", "from_json"], [633, 1, 1, "", "from_jsonstring"], [634, 1, 1, "", "from_shapes_and_element"], [635, 1, 1, "", "from_volume_and_element"], [636, 1, 1, "", "sha256"], [637, 1, 1, "", "to_json"], [638, 1, 1, "", "to_jsonstring"], [639, 1, 1, "", "validate_data"], [640, 1, 1, "", "volume_from_params_and_element"]], "compas_timber.fabrication.Slot": [[642, 1, 1, "", "ToString"], [643, 1, 1, "", "add_subprocessing"], [644, 1, 1, "", "apply"], [645, 1, 1, "", "copy"], [646, 1, 1, "", "from_json"], [647, 1, 1, "", "from_jsonstring"], [648, 1, 1, "", "from_plane_and_beam"], [649, 1, 1, "", "sha256"], [650, 1, 1, "", "to_json"], [651, 1, 1, "", "to_jsonstring"], [652, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJoint": [[654, 1, 1, "", "ToString"], [655, 1, 1, "", "add_subprocessing"], [656, 1, 1, "", "add_tenon"], [657, 1, 1, "", "apply"], [658, 1, 1, "", "copy"], [659, 1, 1, "", "from_json"], [660, 1, 1, "", "from_jsonstring"], [661, 1, 1, "", "from_plane_and_beam"], [662, 1, 1, "", "planes_from_params_and_beam"], [663, 1, 1, "", "sha256"], [664, 1, 1, "", "tenon_volume_from_params_and_beam"], [665, 1, 1, "", "to_json"], [666, 1, 1, "", "to_jsonstring"], [667, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJointNotch": [[669, 1, 1, "", "ToString"], [670, 1, 1, "", "add_mortise"], [671, 1, 1, "", "add_subprocessing"], [672, 1, 1, "", "apply"], [673, 1, 1, "", "copy"], [674, 1, 1, "", "from_json"], [675, 1, 1, "", "from_jsonstring"], [676, 1, 1, "", "from_plane_and_beam"], [677, 1, 1, "", "mortise_volume_from_params_and_beam"], [678, 1, 1, "", "planes_from_params_and_beam"], [679, 1, 1, "", "sha256"], [680, 1, 1, "", "to_json"], [681, 1, 1, "", "to_jsonstring"], [682, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Tenon": [[685, 1, 1, "", "ToString"], [686, 1, 1, "", "add_subprocessing"], [687, 1, 1, "", "apply"], [688, 1, 1, "", "copy"], [689, 1, 1, "", "frame_from_params_and_beam"], [690, 1, 1, "", "from_json"], [691, 1, 1, "", "from_jsonstring"], [692, 1, 1, "", "from_plane_and_beam"], [693, 1, 1, "", "sha256"], [694, 1, 1, "", "to_json"], [695, 1, 1, "", "to_jsonstring"], [696, 1, 1, "", "validate_data"], [697, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.ghpython": [[699, 2, 1, "", "add_gh_param"], [700, 2, 1, "", "clear_gh_params"], [701, 2, 1, "", "get_leaf_subclasses"], [702, 2, 1, "", "item_input_valid"], [703, 2, 1, "", "list_input_valid"], [704, 2, 1, "", "manage_dynamic_params"], [705, 2, 1, "", "rename_gh_input"]], "compas_timber.model": [[706, 0, 1, "", "TimberModel"]], "compas_timber.model.TimberModel": [[707, 1, 1, "", "ToString"], [708, 1, 1, "", "add_element"], [709, 1, 1, "", "add_elements"], [710, 1, 1, "", "add_group"], [711, 1, 1, "", "add_group_element"], [712, 1, 1, "", "add_interaction"], [713, 1, 1, "", "add_joint"], [714, 1, 1, "", "add_material"], [715, 1, 1, "", "assign_material"], [716, 1, 1, "", "compute_aabb"], [717, 1, 1, "", "compute_obb"], [718, 1, 1, "", "connect_adjacent_walls"], [719, 1, 1, "", "copy"], [720, 1, 1, "", "element_by_guid"], [721, 1, 1, "", "elements"], [722, 1, 1, "", "elements_connected_by"], [723, 1, 1, "", "from_json"], [724, 1, 1, "", "from_jsonstring"], [725, 1, 1, "", "get_elements_in_group"], [726, 1, 1, "", "get_interactions_for_element"], [727, 1, 1, "", "has_element"], [728, 1, 1, "", "has_group"], [729, 1, 1, "", "has_interaction"], [730, 1, 1, "", "has_material"], [731, 1, 1, "", "interactions"], [732, 1, 1, "", "materials"], [733, 1, 1, "", "process_joinery"], [734, 1, 1, "", "remove_element"], [735, 1, 1, "", "remove_interaction"], [736, 1, 1, "", "remove_joint"], [737, 1, 1, "", "rotate"], [738, 1, 1, "", "rotated"], [739, 1, 1, "", "scale"], [740, 1, 1, "", "scaled"], [741, 1, 1, "", "set_topologies"], [742, 1, 1, "", "sha256"], [743, 1, 1, "", "to_json"], [744, 1, 1, "", "to_jsonstring"], [745, 1, 1, "", "transform"], [746, 1, 1, "", "transform_numpy"], [747, 1, 1, "", "transformed"], [748, 1, 1, "", "transformed_numpy"], [749, 1, 1, "", "translate"], [750, 1, 1, "", "translated"], [751, 1, 1, "", "validate_data"]], "compas_timber.planning": [[752, 0, 1, "", "Actor"], [754, 0, 1, "", "BuildingPlan"], [764, 0, 1, "", "BuildingPlanParser"], [767, 0, 1, "", "Instruction"], [777, 0, 1, "", "LinearDimension"], [787, 0, 1, "", "Model3d"], [797, 0, 1, "", "SimpleSequenceGenerator"], [798, 0, 1, "", "Step"], [808, 0, 1, "", "Text3d"]], "compas_timber.planning.Actor": [[753, 1, 1, "", "get_name"]], "compas_timber.planning.BuildingPlan": [[755, 1, 1, "", "ToString"], [756, 1, 1, "", "add_step"], [757, 1, 1, "", "copy"], [758, 1, 1, "", "from_json"], [759, 1, 1, "", "from_jsonstring"], [760, 1, 1, "", "sha256"], [761, 1, 1, "", "to_json"], [762, 1, 1, "", "to_jsonstring"], [763, 1, 1, "", "validate_data"]], "compas_timber.planning.BuildingPlanParser": [[765, 1, 1, "", "parse"], [766, 1, 1, "", "serialize"]], "compas_timber.planning.Instruction": [[768, 1, 1, "", "ToString"], [769, 1, 1, "", "copy"], [770, 1, 1, "", "from_json"], [771, 1, 1, "", "from_jsonstring"], [772, 1, 1, "", "sha256"], [773, 1, 1, "", "to_json"], [774, 1, 1, "", "to_jsonstring"], [775, 1, 1, "", "transform"], [776, 1, 1, "", "validate_data"]], "compas_timber.planning.LinearDimension": [[778, 1, 1, "", "ToString"], [779, 1, 1, "", "copy"], [780, 1, 1, "", "from_json"], [781, 1, 1, "", "from_jsonstring"], [782, 1, 1, "", "sha256"], [783, 1, 1, "", "to_json"], [784, 1, 1, "", "to_jsonstring"], [785, 1, 1, "", "transform"], [786, 1, 1, "", "validate_data"]], "compas_timber.planning.Model3d": [[788, 1, 1, "", "ToString"], [789, 1, 1, "", "copy"], [790, 1, 1, "", "from_json"], [791, 1, 1, "", "from_jsonstring"], [792, 1, 1, "", "sha256"], [793, 1, 1, "", "to_json"], [794, 1, 1, "", "to_jsonstring"], [795, 1, 1, "", "transform"], [796, 1, 1, "", "validate_data"]], "compas_timber.planning.Step": [[799, 1, 1, "", "ToString"], [800, 1, 1, "", "copy"], [801, 1, 1, "", "from_json"], [802, 1, 1, "", "from_jsonstring"], [803, 1, 1, "", "sha256"], [804, 1, 1, "", "to_json"], [805, 1, 1, "", "to_jsonstring"], [806, 1, 1, "", "transform"], [807, 1, 1, "", "validate_data"]], "compas_timber.planning.Text3d": [[809, 1, 1, "", "ToString"], [810, 1, 1, "", "copy"], [811, 1, 1, "", "from_json"], [812, 1, 1, "", "from_jsonstring"], [813, 1, 1, "", "sha256"], [814, 1, 1, "", "to_json"], [815, 1, 1, "", "to_jsonstring"], [816, 1, 1, "", "transform"], [817, 1, 1, "", "validate_data"]], "compas_timber.rhino": [[818, 2, 1, "", "find_neighboring_elements"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"]}, "titleterms": {"api": 0, "refer": 0, "packag": 0, "compas_timb": [1, 2, 3, 4, 5, 6, 7, 8, 9], "connect": 1, "class": [1, 2, 3, 4, 5, 7, 8], "function": [1, 2, 6], "except": 1, "design": [2, 829], "element": [3, 721], "error": [4, 835], "fabric": [5, 831], "ghpython": 6, "model": [7, 829, 833, 834, 835], "plan": 8, "rhino": 9, "plugin": [9, 825], "ballnodejoint": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "tostr": [11, 32, 51, 69, 86, 103, 122, 139, 156, 173, 190, 208, 225, 243, 261, 278, 299, 307, 312, 320, 322, 350, 359, 390, 410, 420, 444, 464, 493, 507, 521, 537, 553, 568, 582, 596, 613, 628, 642, 654, 669, 685, 707, 755, 768, 778, 788, 799, 809], "add_extens": [12, 33, 52, 70, 87, 104, 123, 140, 157, 174, 191, 209, 226, 244, 262, 279], "add_featur": [13, 34, 53, 71, 88, 105, 124, 141, 158, 175, 192, 210, 227, 245, 263, 280, 361, 362, 391, 421, 422, 445, 465], "check_elements_compat": [14, 35, 54, 72, 89, 106, 125, 142, 159, 176, 193, 211, 228, 246, 264, 281], "copi": [15, 36, 55, 73, 90, 107, 126, 143, 160, 177, 194, 212, 229, 247, 265, 282, 369, 397, 411, 428, 451, 471, 495, 510, 524, 540, 556, 571, 585, 599, 616, 631, 645, 658, 673, 688, 719, 757, 769, 779, 789, 800, 810], "creat": [16, 37, 56, 74, 91, 108, 127, 144, 161, 178, 195, 213, 230, 248, 266, 283, 821], "element_count_compli": [17, 38, 57, 75, 92, 109, 128, 145, 162, 179, 197, 214, 231, 249, 267, 285], "from_json": [18, 39, 58, 76, 93, 110, 129, 146, 163, 180, 198, 215, 232, 250, 268, 286, 374, 398, 412, 429, 452, 474, 496, 511, 530, 545, 558, 574, 586, 600, 619, 632, 646, 659, 674, 690, 723, 758, 770, 780, 790, 801, 811], "from_jsonstr": [19, 40, 59, 77, 94, 111, 130, 147, 164, 181, 199, 216, 233, 251, 269, 287, 375, 399, 413, 430, 453, 475, 497, 512, 531, 546, 559, 575, 587, 601, 620, 633, 647, 660, 675, 691, 724, 759, 771, 781, 791, 802, 812], "get_face_most_ortho_to_beam": [20, 41, 60, 78, 95, 114, 131, 148, 165, 182, 200, 217, 234, 252, 270, 288], "get_face_most_towards_beam": [21, 42, 61, 79, 96, 115, 132, 149, 166, 183, 201, 218, 235, 253, 271, 289], "restore_beams_from_kei": [22, 43, 62, 80, 97, 116, 133, 150, 167, 184, 202, 219, 236, 254, 272, 292], "sha256": [23, 44, 63, 81, 98, 117, 134, 151, 168, 185, 203, 220, 238, 256, 273, 293, 382, 403, 415, 435, 457, 480, 498, 516, 532, 548, 562, 577, 591, 605, 621, 636, 649, 663, 679, 693, 742, 760, 772, 782, 792, 803, 813], "to_json": [24, 45, 64, 82, 99, 118, 135, 152, 169, 186, 204, 221, 239, 257, 274, 294, 384, 404, 416, 438, 458, 481, 499, 517, 533, 549, 563, 578, 592, 606, 622, 637, 650, 665, 680, 694, 743, 761, 773, 783, 793, 804, 814], "to_jsonstr": [25, 46, 65, 83, 100, 119, 136, 153, 170, 187, 205, 222, 240, 258, 275, 295, 385, 405, 417, 439, 459, 482, 500, 518, 534, 550, 564, 579, 593, 607, 623, 638, 651, 666, 681, 695, 744, 762, 774, 784, 794, 805, 815], "validate_data": [26, 47, 67, 84, 101, 120, 137, 154, 171, 188, 206, 223, 241, 259, 276, 296, 388, 408, 418, 442, 462, 485, 501, 519, 535, 551, 565, 580, 594, 608, 624, 639, 652, 667, 682, 696, 751, 763, 776, 786, 796, 807, 817], "connectionsolv": [27, 28, 29, 30], "find_intersecting_pair": 28, "find_topologi": 29, "find_wall_wall_topologi": 30, "joint": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 821, 833, 835], "jointtopologi": [48, 49], "get_nam": [49, 753], "lbuttjoint": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "update_beam_rol": 66, "lfrenchridgelapjoint": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "llapjoint": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "lmiterjoint": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "get_cutoff_plan": 112, "get_cutting_plan": 113, "lapjoint": [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "nulljoint": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "tbirdsmouthjoint": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "tbuttjoint": [172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "tdovetailjoint": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "define_dovetail_tool": [196, 525, 541], "tlapjoint": [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223], "tstepjoint": [224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], "set_step_depth": 237, "tenonmortisejoint": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "set_default_valu": 255, "xlapjoint": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "ybuttjoint": [277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], "cross_beam_ref_side_index": 284, "get_miter_plan": 290, "main_beam_ref_side_index": 291, "find_neighboring_el": [297, 818], "categoryrul": [298, 299, 300, 301, 302, 303, 304, 305], "compli": [300, 313, 326, 351], "get_category_rul": [301, 315, 327, 352], "get_direct_rul": [302, 316, 328, 353], "get_topology_rul": [303, 317, 329, 354], "joints_from_beams_and_rul": [304, 318, 330, 355], "reorder": 305, "debuginfom": [306, 307, 308, 309, 310], "add_fastener_error": 308, "add_feature_error": 309, "add_joint_error": 310, "directrul": [311, 312, 313, 314, 315, 316, 317, 318], "contain": 314, "featuredefinit": [319, 320], "jointdefinit": [321, 322, 323, 324], "is_ident": 323, "match": 324, "jointrul": [325, 326, 327, 328, 329, 330], "surfacemodel": [331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348], "beam_category_nam": 332, "create_model": 333, "cull_overlap": 334, "distance_between_el": 335, "generate_fram": 336, "generate_perimeter_beam": 337, "generate_pl": 338, "generate_stud_lin": 339, "generate_stud": 340, "generate_window": 341, "get_beam_intersect": 342, "get_interior_segment_indic": 343, "offset_el": 344, "parse_loop": 345, "trim_jack_stud": 346, "trim_king_stud": 347, "trim_stud": 348, "topologyrul": [349, 350, 351, 352, 353, 354, 355], "guess_joint_topology_2beam": 356, "set_default_joint": 357, "beam": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 828, 829, 835], "add_blank_extens": 360, "back_sid": 363, "compute_aabb": [364, 392, 423, 446, 466, 716], "compute_collision_mesh": [365, 393, 424, 447, 467], "compute_geometri": [366, 394, 425, 448, 468], "compute_obb": [367, 395, 426, 449, 469, 717], "compute_worldtransform": [368, 396, 427, 450, 470], "endpoint_closest_to_point": 370, "extension_to_plan": 371, "from_centerlin": 372, "from_endpoint": 373, "front_sid": 376, "get_dimensions_relative_to_sid": 377, "opp_sid": 378, "remove_blank_extens": [379, 400, 432, 454, 476], "remove_featur": [380, 401, 433, 455, 477], "reset": [381, 402, 434, 456, 478], "side_as_surfac": [383, 437], "transform": [386, 387, 406, 407, 440, 441, 460, 461, 483, 484, 745, 747, 775, 785, 795, 806, 816], "fasten": [389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408], "fastenertimberinterfac": [409, 410, 411, 412, 413, 414, 415, 416, 417, 418], "get_featur": 414, "plate": [419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442], "from_outline_thick": 431, "shape": 436, "timberel": [443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462], "wall": [463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "from_boundari": 472, "from_brep": 473, "rotat": [479, 737, 738], "beamjoiningerror": 486, "fastenerapplicationerror": 487, "featureapplicationerror": 488, "btlxpart": [489, 490, 491], "et_point_v": 490, "ref_side_from_fac": 491, "btlxprocess": [492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "add_subprocess": [494, 508, 522, 538, 554, 569, 583, 597, 614, 629, 643, 655, 671, 686], "btlxwriter": [502, 503, 504, 505], "model_to_xml": 503, "register_type_seri": 504, "write": [505, 831], "doublecut": [506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519], "appli": [509, 523, 539, 555, 570, 584, 598, 615, 630, 644, 657, 672, 687], "from_planes_and_beam": 513, "from_shapes_and_el": [514, 561, 589, 603, 634], "planes_from_params_and_beam": [515, 662, 678], "dovetailmortis": [520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535], "dovetail_cutting_frames_from_params_and_beam": [526, 542], "dovetail_volume_from_params_and_beam": [527, 543], "frame_from_params_and_beam": [528, 544, 572, 617, 689], "from_frame_and_beam": [529, 618], "dovetailtenon": [536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551], "from_plane_and_beam": [547, 588, 602, 648, 661, 676, 692], "drill": [552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 832], "cylinder_from_params_and_el": 557, "from_line_and_el": 560, "edgepositiontyp": 566, "frenchridgelap": [567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580], "from_beam_beam_and_plan": 573, "lap_volume_from_params_and_beam": 576, "jackraftercut": [581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594], "plane_from_params_and_beam": 590, "lap": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 833], "from_volume_and_beam": 604, "volume_from_params_and_beam": [609, 625, 697], "limitationtoptyp": 610, "machininglimit": 611, "mortis": [612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 833], "orientationtyp": 626, "pocket": [627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "from_volume_and_el": 635, "volume_from_params_and_el": 640, "slot": [641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652], "stepjoint": [653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667], "add_tenon": 656, "tenon_volume_from_params_and_beam": 664, "stepjointnotch": [668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682], "add_mortis": 670, "mortise_volume_from_params_and_beam": 677, "stepshapetyp": 683, "tenon": [684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 833], "tenonshapetyp": 698, "add_gh_param": 699, "clear_gh_param": 700, "get_leaf_subclass": 701, "item_input_valid": 702, "list_input_valid": 703, "manage_dynamic_param": 704, "rename_gh_input": 705, "timbermodel": [706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751], "add_el": [708, 709], "add_group": 710, "add_group_el": 711, "add_interact": 712, "add_joint": 713, "add_materi": 714, "assign_materi": 715, "connect_adjacent_wal": 718, "element_by_guid": 720, "elements_connected_bi": 722, "get_elements_in_group": 725, "get_interactions_for_el": 726, "has_el": 727, "has_group": 728, "has_interact": 729, "has_materi": 730, "interact": 731, "materi": 732, "process_joineri": 733, "remove_el": 734, "remove_interact": 735, "remove_joint": 736, "scale": [739, 740], "set_topologi": 741, "transform_numpi": 746, "transformed_numpi": 748, "translat": [749, 750], "actor": [752, 753], "buildingplan": [754, 755, 756, 757, 758, 759, 760, 761, 762, 763], "add_step": 756, "buildingplanpars": [764, 765, 766], "pars": 765, "serial": 766, "instruct": [767, 768, 769, 770, 771, 772, 773, 774, 775, 776], "lineardimens": [777, 778, 779, 780, 781, 782, 783, 784, 785, 786], "model3d": [787, 788, 789, 790, 791, 792, 793, 794, 795, 796], "simplesequencegener": 797, "step": [798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 833], "text3d": [808, 809, 810, 811, 812, 813, 814, 815, 816, 817], "cite": 819, "exampl": [820, 830], "timber": [820, 822], "assembli": 820, "compa": 822, "document": 822, "depend": 822, "tabl": [822, 833], "content": 822, "indic": 822, "instal": 823, "stabl": 823, "conda": 823, "develop": 823, "licens": 824, "grasshopp": 825, "btlx": [826, 831], "contribut": 826, "guid": 826, "attribut": 827, "standard": 827, "custom": [827, 829], "check": 827, "delet": 827, "decomposebeam": 828, "findbeambyrhinoguid": 828, "surfac": [829, 833, 835], "option": 829, "dimens": 829, "featur": [832, 835], "jack": 832, "rafter": 832, "cut": 832, "doubl": 832, "rule": 833, "compon": 833, "default": 833, "topolog": 833, "categori": 833, "direct": 833, "overrid": 833, "type": [833, 835], "l": 833, "butt": 833, "miter": 833, "french": 833, "ridg": 833, "t": 833, "birdsmouth": 833, "dovetail": 833, "x": 833, "summari": 833, "show": 835, "face": 835, "index": 835, "join": 835, "topologi": 835, "util": 836, "bake": 836, "boxmap": 836, "workflow": 837}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Packages": [[0, "packages"]], "compas_timber.connections": [[1, "compas-timber-connections"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"]], "Functions": [[1, "functions"], [2, "functions"], [6, "functions"]], "Exceptions": [[1, "exceptions"]], "compas_timber.design": [[2, "compas-timber-design"]], "compas_timber.elements": [[3, "compas-timber-elements"]], "compas_timber.errors": [[4, "compas-timber-errors"]], "compas_timber.fabrication": [[5, "compas-timber-fabrication"]], "compas_timber.ghpython": [[6, "compas-timber-ghpython"]], "compas_timber.model": [[7, "compas-timber-model"]], "compas_timber.planning": [[8, "compas-timber-planning"]], "compas_timber.rhino": [[9, "compas-timber-rhino"]], "Plugins": [[9, "plugins"]], "BallNodeJoint": [[10, "ballnodejoint"]], "BallNodeJoint.ToString": [[11, "ballnodejoint-tostring"]], "BallNodeJoint.add_extensions": [[12, "ballnodejoint-add-extensions"]], "BallNodeJoint.add_features": [[13, "ballnodejoint-add-features"]], "BallNodeJoint.check_elements_compatibility": [[14, "ballnodejoint-check-elements-compatibility"]], "BallNodeJoint.copy": [[15, "ballnodejoint-copy"]], "BallNodeJoint.create": [[16, "ballnodejoint-create"]], "BallNodeJoint.element_count_complies": [[17, "ballnodejoint-element-count-complies"]], "BallNodeJoint.from_json": [[18, "ballnodejoint-from-json"]], "BallNodeJoint.from_jsonstring": [[19, "ballnodejoint-from-jsonstring"]], "BallNodeJoint.get_face_most_ortho_to_beam": [[20, "ballnodejoint-get-face-most-ortho-to-beam"]], "BallNodeJoint.get_face_most_towards_beam": [[21, "ballnodejoint-get-face-most-towards-beam"]], "BallNodeJoint.restore_beams_from_keys": [[22, "ballnodejoint-restore-beams-from-keys"]], "BallNodeJoint.sha256": [[23, "ballnodejoint-sha256"]], "BallNodeJoint.to_json": [[24, "ballnodejoint-to-json"]], "BallNodeJoint.to_jsonstring": [[25, "ballnodejoint-to-jsonstring"]], "BallNodeJoint.validate_data": [[26, "ballnodejoint-validate-data"]], "ConnectionSolver": [[27, "connectionsolver"]], "ConnectionSolver.find_intersecting_pairs": [[28, "connectionsolver-find-intersecting-pairs"]], "ConnectionSolver.find_topology": [[29, "connectionsolver-find-topology"]], "ConnectionSolver.find_wall_wall_topology": [[30, "connectionsolver-find-wall-wall-topology"]], "Joint": [[31, "joint"]], "Joint.ToString": [[32, "joint-tostring"]], "Joint.add_extensions": [[33, "joint-add-extensions"]], "Joint.add_features": [[34, "joint-add-features"]], "Joint.check_elements_compatibility": [[35, "joint-check-elements-compatibility"]], "Joint.copy": [[36, "joint-copy"]], "Joint.create": [[37, "joint-create"]], "Joint.element_count_complies": [[38, "joint-element-count-complies"]], "Joint.from_json": [[39, "joint-from-json"]], "Joint.from_jsonstring": [[40, "joint-from-jsonstring"]], "Joint.get_face_most_ortho_to_beam": [[41, "joint-get-face-most-ortho-to-beam"]], "Joint.get_face_most_towards_beam": [[42, "joint-get-face-most-towards-beam"]], "Joint.restore_beams_from_keys": [[43, "joint-restore-beams-from-keys"]], "Joint.sha256": [[44, "joint-sha256"]], "Joint.to_json": [[45, "joint-to-json"]], "Joint.to_jsonstring": [[46, "joint-to-jsonstring"]], "Joint.validate_data": [[47, "joint-validate-data"]], "JointTopology": [[48, "jointtopology"]], "JointTopology.get_name": [[49, "jointtopology-get-name"]], "LButtJoint": [[50, "lbuttjoint"]], "LButtJoint.ToString": [[51, "lbuttjoint-tostring"]], "LButtJoint.add_extensions": [[52, "lbuttjoint-add-extensions"]], "LButtJoint.add_features": [[53, "lbuttjoint-add-features"]], "LButtJoint.check_elements_compatibility": [[54, "lbuttjoint-check-elements-compatibility"]], "LButtJoint.copy": [[55, "lbuttjoint-copy"]], "LButtJoint.create": [[56, "lbuttjoint-create"]], "LButtJoint.element_count_complies": [[57, "lbuttjoint-element-count-complies"]], "LButtJoint.from_json": [[58, "lbuttjoint-from-json"]], "LButtJoint.from_jsonstring": [[59, "lbuttjoint-from-jsonstring"]], "LButtJoint.get_face_most_ortho_to_beam": [[60, "lbuttjoint-get-face-most-ortho-to-beam"]], "LButtJoint.get_face_most_towards_beam": [[61, "lbuttjoint-get-face-most-towards-beam"]], "LButtJoint.restore_beams_from_keys": [[62, "lbuttjoint-restore-beams-from-keys"]], "LButtJoint.sha256": [[63, "lbuttjoint-sha256"]], "LButtJoint.to_json": [[64, "lbuttjoint-to-json"]], "LButtJoint.to_jsonstring": [[65, "lbuttjoint-to-jsonstring"]], "LButtJoint.update_beam_roles": [[66, "lbuttjoint-update-beam-roles"]], "LButtJoint.validate_data": [[67, "lbuttjoint-validate-data"]], "LFrenchRidgeLapJoint": [[68, "lfrenchridgelapjoint"]], "LFrenchRidgeLapJoint.ToString": [[69, "lfrenchridgelapjoint-tostring"]], "LFrenchRidgeLapJoint.add_extensions": [[70, "lfrenchridgelapjoint-add-extensions"]], "LFrenchRidgeLapJoint.add_features": [[71, "lfrenchridgelapjoint-add-features"]], "LFrenchRidgeLapJoint.check_elements_compatibility": [[72, "lfrenchridgelapjoint-check-elements-compatibility"]], "LFrenchRidgeLapJoint.copy": [[73, "lfrenchridgelapjoint-copy"]], "LFrenchRidgeLapJoint.create": [[74, "lfrenchridgelapjoint-create"]], "LFrenchRidgeLapJoint.element_count_complies": [[75, "lfrenchridgelapjoint-element-count-complies"]], "LFrenchRidgeLapJoint.from_json": [[76, "lfrenchridgelapjoint-from-json"]], "LFrenchRidgeLapJoint.from_jsonstring": [[77, "lfrenchridgelapjoint-from-jsonstring"]], "LFrenchRidgeLapJoint.get_face_most_ortho_to_beam": [[78, "lfrenchridgelapjoint-get-face-most-ortho-to-beam"]], "LFrenchRidgeLapJoint.get_face_most_towards_beam": [[79, "lfrenchridgelapjoint-get-face-most-towards-beam"]], "LFrenchRidgeLapJoint.restore_beams_from_keys": [[80, "lfrenchridgelapjoint-restore-beams-from-keys"]], "LFrenchRidgeLapJoint.sha256": [[81, "lfrenchridgelapjoint-sha256"]], "LFrenchRidgeLapJoint.to_json": [[82, "lfrenchridgelapjoint-to-json"]], "LFrenchRidgeLapJoint.to_jsonstring": [[83, "lfrenchridgelapjoint-to-jsonstring"]], "LFrenchRidgeLapJoint.validate_data": [[84, "lfrenchridgelapjoint-validate-data"]], "LLapJoint": [[85, "llapjoint"]], "LLapJoint.ToString": [[86, "llapjoint-tostring"]], "LLapJoint.add_extensions": [[87, "llapjoint-add-extensions"]], "LLapJoint.add_features": [[88, "llapjoint-add-features"]], "LLapJoint.check_elements_compatibility": [[89, "llapjoint-check-elements-compatibility"]], "LLapJoint.copy": [[90, "llapjoint-copy"]], "LLapJoint.create": [[91, "llapjoint-create"]], "LLapJoint.element_count_complies": [[92, "llapjoint-element-count-complies"]], "LLapJoint.from_json": [[93, "llapjoint-from-json"]], "LLapJoint.from_jsonstring": [[94, "llapjoint-from-jsonstring"]], "LLapJoint.get_face_most_ortho_to_beam": [[95, "llapjoint-get-face-most-ortho-to-beam"]], "LLapJoint.get_face_most_towards_beam": [[96, "llapjoint-get-face-most-towards-beam"]], "LLapJoint.restore_beams_from_keys": [[97, "llapjoint-restore-beams-from-keys"]], "LLapJoint.sha256": [[98, "llapjoint-sha256"]], "LLapJoint.to_json": [[99, "llapjoint-to-json"]], "LLapJoint.to_jsonstring": [[100, "llapjoint-to-jsonstring"]], "LLapJoint.validate_data": [[101, "llapjoint-validate-data"]], "LMiterJoint": [[102, "lmiterjoint"]], "LMiterJoint.ToString": [[103, "lmiterjoint-tostring"]], "LMiterJoint.add_extensions": [[104, "lmiterjoint-add-extensions"]], "LMiterJoint.add_features": [[105, "lmiterjoint-add-features"]], "LMiterJoint.check_elements_compatibility": [[106, "lmiterjoint-check-elements-compatibility"]], "LMiterJoint.copy": [[107, "lmiterjoint-copy"]], "LMiterJoint.create": [[108, "lmiterjoint-create"]], "LMiterJoint.element_count_complies": [[109, "lmiterjoint-element-count-complies"]], "LMiterJoint.from_json": [[110, "lmiterjoint-from-json"]], "LMiterJoint.from_jsonstring": [[111, "lmiterjoint-from-jsonstring"]], "LMiterJoint.get_cutoff_plane": [[112, "lmiterjoint-get-cutoff-plane"]], "LMiterJoint.get_cutting_planes": [[113, "lmiterjoint-get-cutting-planes"]], "LMiterJoint.get_face_most_ortho_to_beam": [[114, "lmiterjoint-get-face-most-ortho-to-beam"]], "LMiterJoint.get_face_most_towards_beam": [[115, "lmiterjoint-get-face-most-towards-beam"]], "LMiterJoint.restore_beams_from_keys": [[116, "lmiterjoint-restore-beams-from-keys"]], "LMiterJoint.sha256": [[117, "lmiterjoint-sha256"]], "LMiterJoint.to_json": [[118, "lmiterjoint-to-json"]], "LMiterJoint.to_jsonstring": [[119, "lmiterjoint-to-jsonstring"]], "LMiterJoint.validate_data": [[120, "lmiterjoint-validate-data"]], "LapJoint": [[121, "lapjoint"]], "LapJoint.ToString": [[122, "lapjoint-tostring"]], "LapJoint.add_extensions": [[123, "lapjoint-add-extensions"]], "LapJoint.add_features": [[124, "lapjoint-add-features"]], "LapJoint.check_elements_compatibility": [[125, "lapjoint-check-elements-compatibility"]], "LapJoint.copy": [[126, "lapjoint-copy"]], "LapJoint.create": [[127, "lapjoint-create"]], "LapJoint.element_count_complies": [[128, "lapjoint-element-count-complies"]], "LapJoint.from_json": [[129, "lapjoint-from-json"]], "LapJoint.from_jsonstring": [[130, "lapjoint-from-jsonstring"]], "LapJoint.get_face_most_ortho_to_beam": [[131, "lapjoint-get-face-most-ortho-to-beam"]], "LapJoint.get_face_most_towards_beam": [[132, "lapjoint-get-face-most-towards-beam"]], "LapJoint.restore_beams_from_keys": [[133, "lapjoint-restore-beams-from-keys"]], "LapJoint.sha256": [[134, "lapjoint-sha256"]], "LapJoint.to_json": [[135, "lapjoint-to-json"]], "LapJoint.to_jsonstring": [[136, "lapjoint-to-jsonstring"]], "LapJoint.validate_data": [[137, "lapjoint-validate-data"]], "NullJoint": [[138, "nulljoint"]], "NullJoint.ToString": [[139, "nulljoint-tostring"]], "NullJoint.add_extensions": [[140, "nulljoint-add-extensions"]], "NullJoint.add_features": [[141, "nulljoint-add-features"]], "NullJoint.check_elements_compatibility": [[142, "nulljoint-check-elements-compatibility"]], "NullJoint.copy": [[143, "nulljoint-copy"]], "NullJoint.create": [[144, "nulljoint-create"]], "NullJoint.element_count_complies": [[145, "nulljoint-element-count-complies"]], "NullJoint.from_json": [[146, "nulljoint-from-json"]], "NullJoint.from_jsonstring": [[147, "nulljoint-from-jsonstring"]], "NullJoint.get_face_most_ortho_to_beam": [[148, "nulljoint-get-face-most-ortho-to-beam"]], "NullJoint.get_face_most_towards_beam": [[149, "nulljoint-get-face-most-towards-beam"]], "NullJoint.restore_beams_from_keys": [[150, "nulljoint-restore-beams-from-keys"]], "NullJoint.sha256": [[151, "nulljoint-sha256"]], "NullJoint.to_json": [[152, "nulljoint-to-json"]], "NullJoint.to_jsonstring": [[153, "nulljoint-to-jsonstring"]], "NullJoint.validate_data": [[154, "nulljoint-validate-data"]], "TBirdsmouthJoint": [[155, "tbirdsmouthjoint"]], "TBirdsmouthJoint.ToString": [[156, "tbirdsmouthjoint-tostring"]], "TBirdsmouthJoint.add_extensions": [[157, "tbirdsmouthjoint-add-extensions"]], "TBirdsmouthJoint.add_features": [[158, "tbirdsmouthjoint-add-features"]], "TBirdsmouthJoint.check_elements_compatibility": [[159, "tbirdsmouthjoint-check-elements-compatibility"]], "TBirdsmouthJoint.copy": [[160, "tbirdsmouthjoint-copy"]], "TBirdsmouthJoint.create": [[161, "tbirdsmouthjoint-create"]], "TBirdsmouthJoint.element_count_complies": [[162, "tbirdsmouthjoint-element-count-complies"]], "TBirdsmouthJoint.from_json": [[163, "tbirdsmouthjoint-from-json"]], "TBirdsmouthJoint.from_jsonstring": [[164, "tbirdsmouthjoint-from-jsonstring"]], "TBirdsmouthJoint.get_face_most_ortho_to_beam": [[165, "tbirdsmouthjoint-get-face-most-ortho-to-beam"]], "TBirdsmouthJoint.get_face_most_towards_beam": [[166, "tbirdsmouthjoint-get-face-most-towards-beam"]], "TBirdsmouthJoint.restore_beams_from_keys": [[167, "tbirdsmouthjoint-restore-beams-from-keys"]], "TBirdsmouthJoint.sha256": [[168, "tbirdsmouthjoint-sha256"]], "TBirdsmouthJoint.to_json": [[169, "tbirdsmouthjoint-to-json"]], "TBirdsmouthJoint.to_jsonstring": [[170, "tbirdsmouthjoint-to-jsonstring"]], "TBirdsmouthJoint.validate_data": [[171, "tbirdsmouthjoint-validate-data"]], "TButtJoint": [[172, "tbuttjoint"]], "TButtJoint.ToString": [[173, "tbuttjoint-tostring"]], "TButtJoint.add_extensions": [[174, "tbuttjoint-add-extensions"]], "TButtJoint.add_features": [[175, "tbuttjoint-add-features"]], "TButtJoint.check_elements_compatibility": [[176, "tbuttjoint-check-elements-compatibility"]], "TButtJoint.copy": [[177, "tbuttjoint-copy"]], "TButtJoint.create": [[178, "tbuttjoint-create"]], "TButtJoint.element_count_complies": [[179, "tbuttjoint-element-count-complies"]], "TButtJoint.from_json": [[180, "tbuttjoint-from-json"]], "TButtJoint.from_jsonstring": [[181, "tbuttjoint-from-jsonstring"]], "TButtJoint.get_face_most_ortho_to_beam": [[182, "tbuttjoint-get-face-most-ortho-to-beam"]], "TButtJoint.get_face_most_towards_beam": [[183, "tbuttjoint-get-face-most-towards-beam"]], "TButtJoint.restore_beams_from_keys": [[184, "tbuttjoint-restore-beams-from-keys"]], "TButtJoint.sha256": [[185, "tbuttjoint-sha256"]], "TButtJoint.to_json": [[186, "tbuttjoint-to-json"]], "TButtJoint.to_jsonstring": [[187, "tbuttjoint-to-jsonstring"]], "TButtJoint.validate_data": [[188, "tbuttjoint-validate-data"]], "TDovetailJoint": [[189, "tdovetailjoint"]], "TDovetailJoint.ToString": [[190, "tdovetailjoint-tostring"]], "TDovetailJoint.add_extensions": [[191, "tdovetailjoint-add-extensions"]], "TDovetailJoint.add_features": [[192, "tdovetailjoint-add-features"]], "TDovetailJoint.check_elements_compatibility": [[193, "tdovetailjoint-check-elements-compatibility"]], "TDovetailJoint.copy": [[194, "tdovetailjoint-copy"]], "TDovetailJoint.create": [[195, "tdovetailjoint-create"]], "TDovetailJoint.define_dovetail_tool": [[196, "tdovetailjoint-define-dovetail-tool"]], "TDovetailJoint.element_count_complies": [[197, "tdovetailjoint-element-count-complies"]], "TDovetailJoint.from_json": [[198, "tdovetailjoint-from-json"]], "TDovetailJoint.from_jsonstring": [[199, "tdovetailjoint-from-jsonstring"]], "TDovetailJoint.get_face_most_ortho_to_beam": [[200, "tdovetailjoint-get-face-most-ortho-to-beam"]], "TDovetailJoint.get_face_most_towards_beam": [[201, "tdovetailjoint-get-face-most-towards-beam"]], "TDovetailJoint.restore_beams_from_keys": [[202, "tdovetailjoint-restore-beams-from-keys"]], "TDovetailJoint.sha256": [[203, "tdovetailjoint-sha256"]], "TDovetailJoint.to_json": [[204, "tdovetailjoint-to-json"]], "TDovetailJoint.to_jsonstring": [[205, "tdovetailjoint-to-jsonstring"]], "TDovetailJoint.validate_data": [[206, "tdovetailjoint-validate-data"]], "TLapJoint": [[207, "tlapjoint"]], "TLapJoint.ToString": [[208, "tlapjoint-tostring"]], "TLapJoint.add_extensions": [[209, "tlapjoint-add-extensions"]], "TLapJoint.add_features": [[210, "tlapjoint-add-features"]], "TLapJoint.check_elements_compatibility": [[211, "tlapjoint-check-elements-compatibility"]], "TLapJoint.copy": [[212, "tlapjoint-copy"]], "TLapJoint.create": [[213, "tlapjoint-create"]], "TLapJoint.element_count_complies": [[214, "tlapjoint-element-count-complies"]], "TLapJoint.from_json": [[215, "tlapjoint-from-json"]], "TLapJoint.from_jsonstring": [[216, "tlapjoint-from-jsonstring"]], "TLapJoint.get_face_most_ortho_to_beam": [[217, "tlapjoint-get-face-most-ortho-to-beam"]], "TLapJoint.get_face_most_towards_beam": [[218, "tlapjoint-get-face-most-towards-beam"]], "TLapJoint.restore_beams_from_keys": [[219, "tlapjoint-restore-beams-from-keys"]], "TLapJoint.sha256": [[220, "tlapjoint-sha256"]], "TLapJoint.to_json": [[221, "tlapjoint-to-json"]], "TLapJoint.to_jsonstring": [[222, "tlapjoint-to-jsonstring"]], "TLapJoint.validate_data": [[223, "tlapjoint-validate-data"]], "TStepJoint": [[224, "tstepjoint"]], "TStepJoint.ToString": [[225, "tstepjoint-tostring"]], "TStepJoint.add_extensions": [[226, "tstepjoint-add-extensions"]], "TStepJoint.add_features": [[227, "tstepjoint-add-features"]], "TStepJoint.check_elements_compatibility": [[228, "tstepjoint-check-elements-compatibility"]], "TStepJoint.copy": [[229, "tstepjoint-copy"]], "TStepJoint.create": [[230, "tstepjoint-create"]], "TStepJoint.element_count_complies": [[231, "tstepjoint-element-count-complies"]], "TStepJoint.from_json": [[232, "tstepjoint-from-json"]], "TStepJoint.from_jsonstring": [[233, "tstepjoint-from-jsonstring"]], "TStepJoint.get_face_most_ortho_to_beam": [[234, "tstepjoint-get-face-most-ortho-to-beam"]], "TStepJoint.get_face_most_towards_beam": [[235, "tstepjoint-get-face-most-towards-beam"]], "TStepJoint.restore_beams_from_keys": [[236, "tstepjoint-restore-beams-from-keys"]], "TStepJoint.set_step_depths": [[237, "tstepjoint-set-step-depths"]], "TStepJoint.sha256": [[238, "tstepjoint-sha256"]], "TStepJoint.to_json": [[239, "tstepjoint-to-json"]], "TStepJoint.to_jsonstring": [[240, "tstepjoint-to-jsonstring"]], "TStepJoint.validate_data": [[241, "tstepjoint-validate-data"]], "TenonMortiseJoint": [[242, "tenonmortisejoint"]], "TenonMortiseJoint.ToString": [[243, "tenonmortisejoint-tostring"]], "TenonMortiseJoint.add_extensions": [[244, "tenonmortisejoint-add-extensions"]], "TenonMortiseJoint.add_features": [[245, "tenonmortisejoint-add-features"]], "TenonMortiseJoint.check_elements_compatibility": [[246, "tenonmortisejoint-check-elements-compatibility"]], "TenonMortiseJoint.copy": [[247, "tenonmortisejoint-copy"]], "TenonMortiseJoint.create": [[248, "tenonmortisejoint-create"]], "TenonMortiseJoint.element_count_complies": [[249, "tenonmortisejoint-element-count-complies"]], "TenonMortiseJoint.from_json": [[250, "tenonmortisejoint-from-json"]], "TenonMortiseJoint.from_jsonstring": [[251, "tenonmortisejoint-from-jsonstring"]], "TenonMortiseJoint.get_face_most_ortho_to_beam": [[252, "tenonmortisejoint-get-face-most-ortho-to-beam"]], "TenonMortiseJoint.get_face_most_towards_beam": [[253, "tenonmortisejoint-get-face-most-towards-beam"]], "TenonMortiseJoint.restore_beams_from_keys": [[254, "tenonmortisejoint-restore-beams-from-keys"]], "TenonMortiseJoint.set_default_values": [[255, "tenonmortisejoint-set-default-values"]], "TenonMortiseJoint.sha256": [[256, "tenonmortisejoint-sha256"]], "TenonMortiseJoint.to_json": [[257, "tenonmortisejoint-to-json"]], "TenonMortiseJoint.to_jsonstring": [[258, "tenonmortisejoint-to-jsonstring"]], "TenonMortiseJoint.validate_data": [[259, "tenonmortisejoint-validate-data"]], "XLapJoint": [[260, "xlapjoint"]], "XLapJoint.ToString": [[261, "xlapjoint-tostring"]], "XLapJoint.add_extensions": [[262, "xlapjoint-add-extensions"]], "XLapJoint.add_features": [[263, "xlapjoint-add-features"]], "XLapJoint.check_elements_compatibility": [[264, "xlapjoint-check-elements-compatibility"]], "XLapJoint.copy": [[265, "xlapjoint-copy"]], "XLapJoint.create": [[266, "xlapjoint-create"]], "XLapJoint.element_count_complies": [[267, "xlapjoint-element-count-complies"]], "XLapJoint.from_json": [[268, "xlapjoint-from-json"]], "XLapJoint.from_jsonstring": [[269, "xlapjoint-from-jsonstring"]], "XLapJoint.get_face_most_ortho_to_beam": [[270, "xlapjoint-get-face-most-ortho-to-beam"]], "XLapJoint.get_face_most_towards_beam": [[271, "xlapjoint-get-face-most-towards-beam"]], "XLapJoint.restore_beams_from_keys": [[272, "xlapjoint-restore-beams-from-keys"]], "XLapJoint.sha256": [[273, "xlapjoint-sha256"]], "XLapJoint.to_json": [[274, "xlapjoint-to-json"]], "XLapJoint.to_jsonstring": [[275, "xlapjoint-to-jsonstring"]], "XLapJoint.validate_data": [[276, "xlapjoint-validate-data"]], "YButtJoint": [[277, "ybuttjoint"]], "YButtJoint.ToString": [[278, "ybuttjoint-tostring"]], "YButtJoint.add_extensions": [[279, "ybuttjoint-add-extensions"]], "YButtJoint.add_features": [[280, "ybuttjoint-add-features"]], "YButtJoint.check_elements_compatibility": [[281, "ybuttjoint-check-elements-compatibility"]], "YButtJoint.copy": [[282, "ybuttjoint-copy"]], "YButtJoint.create": [[283, "ybuttjoint-create"]], "YButtJoint.cross_beam_ref_side_index": [[284, "ybuttjoint-cross-beam-ref-side-index"]], "YButtJoint.element_count_complies": [[285, "ybuttjoint-element-count-complies"]], "YButtJoint.from_json": [[286, "ybuttjoint-from-json"]], "YButtJoint.from_jsonstring": [[287, "ybuttjoint-from-jsonstring"]], "YButtJoint.get_face_most_ortho_to_beam": [[288, "ybuttjoint-get-face-most-ortho-to-beam"]], "YButtJoint.get_face_most_towards_beam": [[289, "ybuttjoint-get-face-most-towards-beam"]], "YButtJoint.get_miter_planes": [[290, "ybuttjoint-get-miter-planes"]], "YButtJoint.main_beam_ref_side_index": [[291, "ybuttjoint-main-beam-ref-side-index"]], "YButtJoint.restore_beams_from_keys": [[292, "ybuttjoint-restore-beams-from-keys"]], "YButtJoint.sha256": [[293, "ybuttjoint-sha256"]], "YButtJoint.to_json": [[294, "ybuttjoint-to-json"]], "YButtJoint.to_jsonstring": [[295, "ybuttjoint-to-jsonstring"]], "YButtJoint.validate_data": [[296, "ybuttjoint-validate-data"]], "find_neighboring_elements": [[297, "find-neighboring-elements"], [818, "find-neighboring-elements"]], "CategoryRule": [[298, "categoryrule"]], "CategoryRule.ToString": [[299, "categoryrule-tostring"]], "CategoryRule.comply": [[300, "categoryrule-comply"]], "CategoryRule.get_category_rules": [[301, "categoryrule-get-category-rules"]], "CategoryRule.get_direct_rules": [[302, "categoryrule-get-direct-rules"]], "CategoryRule.get_topology_rules": [[303, "categoryrule-get-topology-rules"]], "CategoryRule.joints_from_beams_and_rules": [[304, "categoryrule-joints-from-beams-and-rules"]], "CategoryRule.reorder": [[305, "categoryrule-reorder"]], "DebugInfomation": [[306, "debuginfomation"]], "DebugInfomation.ToString": [[307, "debuginfomation-tostring"]], "DebugInfomation.add_fastener_error": [[308, "debuginfomation-add-fastener-error"]], "DebugInfomation.add_feature_error": [[309, "debuginfomation-add-feature-error"]], "DebugInfomation.add_joint_error": [[310, "debuginfomation-add-joint-error"]], "DirectRule": [[311, "directrule"]], "DirectRule.ToString": [[312, "directrule-tostring"]], "DirectRule.comply": [[313, "directrule-comply"]], "DirectRule.contains": [[314, "directrule-contains"]], "DirectRule.get_category_rules": [[315, "directrule-get-category-rules"]], "DirectRule.get_direct_rules": [[316, "directrule-get-direct-rules"]], "DirectRule.get_topology_rules": [[317, "directrule-get-topology-rules"]], "DirectRule.joints_from_beams_and_rules": [[318, "directrule-joints-from-beams-and-rules"]], "FeatureDefinition": [[319, "featuredefinition"]], "FeatureDefinition.ToString": [[320, "featuredefinition-tostring"]], "JointDefinition": [[321, "jointdefinition"]], "JointDefinition.ToString": [[322, "jointdefinition-tostring"]], "JointDefinition.is_identical": [[323, "jointdefinition-is-identical"]], "JointDefinition.match": [[324, "jointdefinition-match"]], "JointRule": [[325, "jointrule"]], "JointRule.comply": [[326, "jointrule-comply"]], "JointRule.get_category_rules": [[327, "jointrule-get-category-rules"]], "JointRule.get_direct_rules": [[328, "jointrule-get-direct-rules"]], "JointRule.get_topology_rules": [[329, "jointrule-get-topology-rules"]], "JointRule.joints_from_beams_and_rules": [[330, "jointrule-joints-from-beams-and-rules"]], "SurfaceModel": [[331, "surfacemodel"]], "SurfaceModel.beam_category_names": [[332, "surfacemodel-beam-category-names"]], "SurfaceModel.create_model": [[333, "surfacemodel-create-model"]], "SurfaceModel.cull_overlaps": [[334, "surfacemodel-cull-overlaps"]], "SurfaceModel.distance_between_elements": [[335, "surfacemodel-distance-between-elements"]], "SurfaceModel.generate_frame": [[336, "surfacemodel-generate-frame"]], "SurfaceModel.generate_perimeter_beams": [[337, "surfacemodel-generate-perimeter-beams"]], "SurfaceModel.generate_plates": [[338, "surfacemodel-generate-plates"]], "SurfaceModel.generate_stud_lines": [[339, "surfacemodel-generate-stud-lines"]], "SurfaceModel.generate_studs": [[340, "surfacemodel-generate-studs"]], "SurfaceModel.generate_windows": [[341, "surfacemodel-generate-windows"]], "SurfaceModel.get_beam_intersections": [[342, "surfacemodel-get-beam-intersections"]], "SurfaceModel.get_interior_segment_indices": [[343, "surfacemodel-get-interior-segment-indices"]], "SurfaceModel.offset_elements": [[344, "surfacemodel-offset-elements"]], "SurfaceModel.parse_loops": [[345, "surfacemodel-parse-loops"]], "SurfaceModel.trim_jack_studs": [[346, "surfacemodel-trim-jack-studs"]], "SurfaceModel.trim_king_studs": [[347, "surfacemodel-trim-king-studs"]], "SurfaceModel.trim_studs": [[348, "surfacemodel-trim-studs"]], "TopologyRule": [[349, "topologyrule"]], "TopologyRule.ToString": [[350, "topologyrule-tostring"]], "TopologyRule.comply": [[351, "topologyrule-comply"]], "TopologyRule.get_category_rules": [[352, "topologyrule-get-category-rules"]], "TopologyRule.get_direct_rules": [[353, "topologyrule-get-direct-rules"]], "TopologyRule.get_topology_rules": [[354, "topologyrule-get-topology-rules"]], "TopologyRule.joints_from_beams_and_rules": [[355, "topologyrule-joints-from-beams-and-rules"]], "guess_joint_topology_2beams": [[356, "guess-joint-topology-2beams"]], "set_default_joints": [[357, "set-default-joints"]], "Beam": [[358, "beam"]], "Beam.ToString": [[359, "beam-tostring"]], "Beam.add_blank_extension": [[360, "beam-add-blank-extension"]], "Beam.add_feature": [[361, "beam-add-feature"]], "Beam.add_features": [[362, "beam-add-features"]], "Beam.back_side": [[363, "beam-back-side"]], "Beam.compute_aabb": [[364, "beam-compute-aabb"]], "Beam.compute_collision_mesh": [[365, "beam-compute-collision-mesh"]], "Beam.compute_geometry": [[366, "beam-compute-geometry"]], "Beam.compute_obb": [[367, "beam-compute-obb"]], "Beam.compute_worldtransformation": [[368, "beam-compute-worldtransformation"]], "Beam.copy": [[369, "beam-copy"]], "Beam.endpoint_closest_to_point": [[370, "beam-endpoint-closest-to-point"]], "Beam.extension_to_plane": [[371, "beam-extension-to-plane"]], "Beam.from_centerline": [[372, "beam-from-centerline"]], "Beam.from_endpoints": [[373, "beam-from-endpoints"]], "Beam.from_json": [[374, "beam-from-json"]], "Beam.from_jsonstring": [[375, "beam-from-jsonstring"]], "Beam.front_side": [[376, "beam-front-side"]], "Beam.get_dimensions_relative_to_side": [[377, "beam-get-dimensions-relative-to-side"]], "Beam.opp_side": [[378, "beam-opp-side"]], "Beam.remove_blank_extension": [[379, "beam-remove-blank-extension"]], "Beam.remove_features": [[380, "beam-remove-features"]], "Beam.reset": [[381, "beam-reset"]], "Beam.sha256": [[382, "beam-sha256"]], "Beam.side_as_surface": [[383, "beam-side-as-surface"]], "Beam.to_json": [[384, "beam-to-json"]], "Beam.to_jsonstring": [[385, "beam-to-jsonstring"]], "Beam.transform": [[386, "beam-transform"]], "Beam.transformed": [[387, "beam-transformed"]], "Beam.validate_data": [[388, "beam-validate-data"]], "Fastener": [[389, "fastener"]], "Fastener.ToString": [[390, "fastener-tostring"]], "Fastener.add_feature": [[391, "fastener-add-feature"]], "Fastener.compute_aabb": [[392, "fastener-compute-aabb"]], "Fastener.compute_collision_mesh": [[393, "fastener-compute-collision-mesh"]], "Fastener.compute_geometry": [[394, "fastener-compute-geometry"]], "Fastener.compute_obb": [[395, "fastener-compute-obb"]], "Fastener.compute_worldtransformation": [[396, "fastener-compute-worldtransformation"]], "Fastener.copy": [[397, "fastener-copy"]], "Fastener.from_json": [[398, "fastener-from-json"]], "Fastener.from_jsonstring": [[399, "fastener-from-jsonstring"]], "Fastener.remove_blank_extension": [[400, "fastener-remove-blank-extension"]], "Fastener.remove_features": [[401, "fastener-remove-features"]], "Fastener.reset": [[402, "fastener-reset"]], "Fastener.sha256": [[403, "fastener-sha256"]], "Fastener.to_json": [[404, "fastener-to-json"]], "Fastener.to_jsonstring": [[405, "fastener-to-jsonstring"]], "Fastener.transform": [[406, "fastener-transform"]], "Fastener.transformed": [[407, "fastener-transformed"]], "Fastener.validate_data": [[408, "fastener-validate-data"]], "FastenerTimberInterface": [[409, "fastenertimberinterface"]], "FastenerTimberInterface.ToString": [[410, "fastenertimberinterface-tostring"]], "FastenerTimberInterface.copy": [[411, "fastenertimberinterface-copy"]], "FastenerTimberInterface.from_json": [[412, "fastenertimberinterface-from-json"]], "FastenerTimberInterface.from_jsonstring": [[413, "fastenertimberinterface-from-jsonstring"]], "FastenerTimberInterface.get_features": [[414, "fastenertimberinterface-get-features"]], "FastenerTimberInterface.sha256": [[415, "fastenertimberinterface-sha256"]], "FastenerTimberInterface.to_json": [[416, "fastenertimberinterface-to-json"]], "FastenerTimberInterface.to_jsonstring": [[417, "fastenertimberinterface-to-jsonstring"]], "FastenerTimberInterface.validate_data": [[418, "fastenertimberinterface-validate-data"]], "Plate": [[419, "plate"]], "Plate.ToString": [[420, "plate-tostring"]], "Plate.add_feature": [[421, "plate-add-feature"]], "Plate.add_features": [[422, "plate-add-features"]], "Plate.compute_aabb": [[423, "plate-compute-aabb"]], "Plate.compute_collision_mesh": [[424, "plate-compute-collision-mesh"]], "Plate.compute_geometry": [[425, "plate-compute-geometry"]], "Plate.compute_obb": [[426, "plate-compute-obb"]], "Plate.compute_worldtransformation": [[427, "plate-compute-worldtransformation"]], "Plate.copy": [[428, "plate-copy"]], "Plate.from_json": [[429, "plate-from-json"]], "Plate.from_jsonstring": [[430, "plate-from-jsonstring"]], "Plate.from_outline_thickness": [[431, "plate-from-outline-thickness"]], "Plate.remove_blank_extension": [[432, "plate-remove-blank-extension"]], "Plate.remove_features": [[433, "plate-remove-features"]], "Plate.reset": [[434, "plate-reset"]], "Plate.sha256": [[435, "plate-sha256"]], "Plate.shape": [[436, "plate-shape"]], "Plate.side_as_surface": [[437, "plate-side-as-surface"]], "Plate.to_json": [[438, "plate-to-json"]], "Plate.to_jsonstring": [[439, "plate-to-jsonstring"]], "Plate.transform": [[440, "plate-transform"]], "Plate.transformed": [[441, "plate-transformed"]], "Plate.validate_data": [[442, "plate-validate-data"]], "TimberElement": [[443, "timberelement"]], "TimberElement.ToString": [[444, "timberelement-tostring"]], "TimberElement.add_feature": [[445, "timberelement-add-feature"]], "TimberElement.compute_aabb": [[446, "timberelement-compute-aabb"]], "TimberElement.compute_collision_mesh": [[447, "timberelement-compute-collision-mesh"]], "TimberElement.compute_geometry": [[448, "timberelement-compute-geometry"]], "TimberElement.compute_obb": [[449, "timberelement-compute-obb"]], "TimberElement.compute_worldtransformation": [[450, "timberelement-compute-worldtransformation"]], "TimberElement.copy": [[451, "timberelement-copy"]], "TimberElement.from_json": [[452, "timberelement-from-json"]], "TimberElement.from_jsonstring": [[453, "timberelement-from-jsonstring"]], "TimberElement.remove_blank_extension": [[454, "timberelement-remove-blank-extension"]], "TimberElement.remove_features": [[455, "timberelement-remove-features"]], "TimberElement.reset": [[456, "timberelement-reset"]], "TimberElement.sha256": [[457, "timberelement-sha256"]], "TimberElement.to_json": [[458, "timberelement-to-json"]], "TimberElement.to_jsonstring": [[459, "timberelement-to-jsonstring"]], "TimberElement.transform": [[460, "timberelement-transform"]], "TimberElement.transformed": [[461, "timberelement-transformed"]], "TimberElement.validate_data": [[462, "timberelement-validate-data"]], "Wall": [[463, "wall"]], "Wall.ToString": [[464, "wall-tostring"]], "Wall.add_feature": [[465, "wall-add-feature"]], "Wall.compute_aabb": [[466, "wall-compute-aabb"]], "Wall.compute_collision_mesh": [[467, "wall-compute-collision-mesh"]], "Wall.compute_geometry": [[468, "wall-compute-geometry"]], "Wall.compute_obb": [[469, "wall-compute-obb"]], "Wall.compute_worldtransformation": [[470, "wall-compute-worldtransformation"]], "Wall.copy": [[471, "wall-copy"]], "Wall.from_boundary": [[472, "wall-from-boundary"]], "Wall.from_brep": [[473, "wall-from-brep"]], "Wall.from_json": [[474, "wall-from-json"]], "Wall.from_jsonstring": [[475, "wall-from-jsonstring"]], "Wall.remove_blank_extension": [[476, "wall-remove-blank-extension"]], "Wall.remove_features": [[477, "wall-remove-features"]], "Wall.reset": [[478, "wall-reset"]], "Wall.rotate": [[479, "wall-rotate"]], "Wall.sha256": [[480, "wall-sha256"]], "Wall.to_json": [[481, "wall-to-json"]], "Wall.to_jsonstring": [[482, "wall-to-jsonstring"]], "Wall.transform": [[483, "wall-transform"]], "Wall.transformed": [[484, "wall-transformed"]], "Wall.validate_data": [[485, "wall-validate-data"]], "BeamJoiningError": [[486, "beamjoiningerror"]], "FastenerApplicationError": [[487, "fastenerapplicationerror"]], "FeatureApplicationError": [[488, "featureapplicationerror"]], "BTLxPart": [[489, "btlxpart"]], "BTLxPart.et_point_vals": [[490, "btlxpart-et-point-vals"]], "BTLxPart.ref_side_from_face": [[491, "btlxpart-ref-side-from-face"]], "BTLxProcessing": [[492, "btlxprocessing"]], "BTLxProcessing.ToString": [[493, "btlxprocessing-tostring"]], "BTLxProcessing.add_subprocessing": [[494, "btlxprocessing-add-subprocessing"]], "BTLxProcessing.copy": [[495, "btlxprocessing-copy"]], "BTLxProcessing.from_json": [[496, "btlxprocessing-from-json"]], "BTLxProcessing.from_jsonstring": [[497, "btlxprocessing-from-jsonstring"]], "BTLxProcessing.sha256": [[498, "btlxprocessing-sha256"]], "BTLxProcessing.to_json": [[499, "btlxprocessing-to-json"]], "BTLxProcessing.to_jsonstring": [[500, "btlxprocessing-to-jsonstring"]], "BTLxProcessing.validate_data": [[501, "btlxprocessing-validate-data"]], "BTLxWriter": [[502, "btlxwriter"]], "BTLxWriter.model_to_xml": [[503, "btlxwriter-model-to-xml"]], "BTLxWriter.register_type_serializer": [[504, "btlxwriter-register-type-serializer"]], "BTLxWriter.write": [[505, "btlxwriter-write"]], "DoubleCut": [[506, "doublecut"]], "DoubleCut.ToString": [[507, "doublecut-tostring"]], "DoubleCut.add_subprocessing": [[508, "doublecut-add-subprocessing"]], "DoubleCut.apply": [[509, "doublecut-apply"]], "DoubleCut.copy": [[510, "doublecut-copy"]], "DoubleCut.from_json": [[511, "doublecut-from-json"]], "DoubleCut.from_jsonstring": [[512, "doublecut-from-jsonstring"]], "DoubleCut.from_planes_and_beam": [[513, "doublecut-from-planes-and-beam"]], "DoubleCut.from_shapes_and_element": [[514, "doublecut-from-shapes-and-element"]], "DoubleCut.planes_from_params_and_beam": [[515, "doublecut-planes-from-params-and-beam"]], "DoubleCut.sha256": [[516, "doublecut-sha256"]], "DoubleCut.to_json": [[517, "doublecut-to-json"]], "DoubleCut.to_jsonstring": [[518, "doublecut-to-jsonstring"]], "DoubleCut.validate_data": [[519, "doublecut-validate-data"]], "DovetailMortise": [[520, "dovetailmortise"]], "DovetailMortise.ToString": [[521, "dovetailmortise-tostring"]], "DovetailMortise.add_subprocessing": [[522, "dovetailmortise-add-subprocessing"]], "DovetailMortise.apply": [[523, "dovetailmortise-apply"]], "DovetailMortise.copy": [[524, "dovetailmortise-copy"]], "DovetailMortise.define_dovetail_tool": [[525, "dovetailmortise-define-dovetail-tool"]], "DovetailMortise.dovetail_cutting_frames_from_params_and_beam": [[526, "dovetailmortise-dovetail-cutting-frames-from-params-and-beam"]], "DovetailMortise.dovetail_volume_from_params_and_beam": [[527, "dovetailmortise-dovetail-volume-from-params-and-beam"]], "DovetailMortise.frame_from_params_and_beam": [[528, "dovetailmortise-frame-from-params-and-beam"]], "DovetailMortise.from_frame_and_beam": [[529, "dovetailmortise-from-frame-and-beam"]], "DovetailMortise.from_json": [[530, "dovetailmortise-from-json"]], "DovetailMortise.from_jsonstring": [[531, "dovetailmortise-from-jsonstring"]], "DovetailMortise.sha256": [[532, "dovetailmortise-sha256"]], "DovetailMortise.to_json": [[533, "dovetailmortise-to-json"]], "DovetailMortise.to_jsonstring": [[534, "dovetailmortise-to-jsonstring"]], "DovetailMortise.validate_data": [[535, "dovetailmortise-validate-data"]], "DovetailTenon": [[536, "dovetailtenon"]], "DovetailTenon.ToString": [[537, "dovetailtenon-tostring"]], "DovetailTenon.add_subprocessing": [[538, "dovetailtenon-add-subprocessing"]], "DovetailTenon.apply": [[539, "dovetailtenon-apply"]], "DovetailTenon.copy": [[540, "dovetailtenon-copy"]], "DovetailTenon.define_dovetail_tool": [[541, "dovetailtenon-define-dovetail-tool"]], "DovetailTenon.dovetail_cutting_frames_from_params_and_beam": [[542, "dovetailtenon-dovetail-cutting-frames-from-params-and-beam"]], "DovetailTenon.dovetail_volume_from_params_and_beam": [[543, "dovetailtenon-dovetail-volume-from-params-and-beam"]], "DovetailTenon.frame_from_params_and_beam": [[544, "dovetailtenon-frame-from-params-and-beam"]], "DovetailTenon.from_json": [[545, "dovetailtenon-from-json"]], "DovetailTenon.from_jsonstring": [[546, "dovetailtenon-from-jsonstring"]], "DovetailTenon.from_plane_and_beam": [[547, "dovetailtenon-from-plane-and-beam"]], "DovetailTenon.sha256": [[548, "dovetailtenon-sha256"]], "DovetailTenon.to_json": [[549, "dovetailtenon-to-json"]], "DovetailTenon.to_jsonstring": [[550, "dovetailtenon-to-jsonstring"]], "DovetailTenon.validate_data": [[551, "dovetailtenon-validate-data"]], "Drilling": [[552, "drilling"]], "Drilling.ToString": [[553, "drilling-tostring"]], "Drilling.add_subprocessing": [[554, "drilling-add-subprocessing"]], "Drilling.apply": [[555, "drilling-apply"]], "Drilling.copy": [[556, "drilling-copy"]], "Drilling.cylinder_from_params_and_element": [[557, "drilling-cylinder-from-params-and-element"]], "Drilling.from_json": [[558, "drilling-from-json"]], "Drilling.from_jsonstring": [[559, "drilling-from-jsonstring"]], "Drilling.from_line_and_element": [[560, "drilling-from-line-and-element"]], "Drilling.from_shapes_and_element": [[561, "drilling-from-shapes-and-element"]], "Drilling.sha256": [[562, "drilling-sha256"]], "Drilling.to_json": [[563, "drilling-to-json"]], "Drilling.to_jsonstring": [[564, "drilling-to-jsonstring"]], "Drilling.validate_data": [[565, "drilling-validate-data"]], "EdgePositionType": [[566, "edgepositiontype"]], "FrenchRidgeLap": [[567, "frenchridgelap"]], "FrenchRidgeLap.ToString": [[568, "frenchridgelap-tostring"]], "FrenchRidgeLap.add_subprocessing": [[569, "frenchridgelap-add-subprocessing"]], "FrenchRidgeLap.apply": [[570, "frenchridgelap-apply"]], "FrenchRidgeLap.copy": [[571, "frenchridgelap-copy"]], "FrenchRidgeLap.frame_from_params_and_beam": [[572, "frenchridgelap-frame-from-params-and-beam"]], "FrenchRidgeLap.from_beam_beam_and_plane": [[573, "frenchridgelap-from-beam-beam-and-plane"]], "FrenchRidgeLap.from_json": [[574, "frenchridgelap-from-json"]], "FrenchRidgeLap.from_jsonstring": [[575, "frenchridgelap-from-jsonstring"]], "FrenchRidgeLap.lap_volume_from_params_and_beam": [[576, "frenchridgelap-lap-volume-from-params-and-beam"]], "FrenchRidgeLap.sha256": [[577, "frenchridgelap-sha256"]], "FrenchRidgeLap.to_json": [[578, "frenchridgelap-to-json"]], "FrenchRidgeLap.to_jsonstring": [[579, "frenchridgelap-to-jsonstring"]], "FrenchRidgeLap.validate_data": [[580, "frenchridgelap-validate-data"]], "JackRafterCut": [[581, "jackraftercut"]], "JackRafterCut.ToString": [[582, "jackraftercut-tostring"]], "JackRafterCut.add_subprocessing": [[583, "jackraftercut-add-subprocessing"]], "JackRafterCut.apply": [[584, "jackraftercut-apply"]], "JackRafterCut.copy": [[585, "jackraftercut-copy"]], "JackRafterCut.from_json": [[586, "jackraftercut-from-json"]], "JackRafterCut.from_jsonstring": [[587, "jackraftercut-from-jsonstring"]], "JackRafterCut.from_plane_and_beam": [[588, "jackraftercut-from-plane-and-beam"]], "JackRafterCut.from_shapes_and_element": [[589, "jackraftercut-from-shapes-and-element"]], "JackRafterCut.plane_from_params_and_beam": [[590, "jackraftercut-plane-from-params-and-beam"]], "JackRafterCut.sha256": [[591, "jackraftercut-sha256"]], "JackRafterCut.to_json": [[592, "jackraftercut-to-json"]], "JackRafterCut.to_jsonstring": [[593, "jackraftercut-to-jsonstring"]], "JackRafterCut.validate_data": [[594, "jackraftercut-validate-data"]], "Lap": [[595, "lap"]], "Lap.ToString": [[596, "lap-tostring"]], "Lap.add_subprocessing": [[597, "lap-add-subprocessing"]], "Lap.apply": [[598, "lap-apply"]], "Lap.copy": [[599, "lap-copy"]], "Lap.from_json": [[600, "lap-from-json"]], "Lap.from_jsonstring": [[601, "lap-from-jsonstring"]], "Lap.from_plane_and_beam": [[602, "lap-from-plane-and-beam"]], "Lap.from_shapes_and_element": [[603, "lap-from-shapes-and-element"]], "Lap.from_volume_and_beam": [[604, "lap-from-volume-and-beam"]], "Lap.sha256": [[605, "lap-sha256"]], "Lap.to_json": [[606, "lap-to-json"]], "Lap.to_jsonstring": [[607, "lap-to-jsonstring"]], "Lap.validate_data": [[608, "lap-validate-data"]], "Lap.volume_from_params_and_beam": [[609, "lap-volume-from-params-and-beam"]], "LimitationTopType": [[610, "limitationtoptype"]], "MachiningLimits": [[611, "machininglimits"]], "Mortise": [[612, "mortise"]], "Mortise.ToString": [[613, "mortise-tostring"]], "Mortise.add_subprocessing": [[614, "mortise-add-subprocessing"]], "Mortise.apply": [[615, "mortise-apply"]], "Mortise.copy": [[616, "mortise-copy"]], "Mortise.frame_from_params_and_beam": [[617, "mortise-frame-from-params-and-beam"]], "Mortise.from_frame_and_beam": [[618, "mortise-from-frame-and-beam"]], "Mortise.from_json": [[619, "mortise-from-json"]], "Mortise.from_jsonstring": [[620, "mortise-from-jsonstring"]], "Mortise.sha256": [[621, "mortise-sha256"]], "Mortise.to_json": [[622, "mortise-to-json"]], "Mortise.to_jsonstring": [[623, "mortise-to-jsonstring"]], "Mortise.validate_data": [[624, "mortise-validate-data"]], "Mortise.volume_from_params_and_beam": [[625, "mortise-volume-from-params-and-beam"]], "OrientationType": [[626, "orientationtype"]], "Pocket": [[627, "pocket"]], "Pocket.ToString": [[628, "pocket-tostring"]], "Pocket.add_subprocessing": [[629, "pocket-add-subprocessing"]], "Pocket.apply": [[630, "pocket-apply"]], "Pocket.copy": [[631, "pocket-copy"]], "Pocket.from_json": [[632, "pocket-from-json"]], "Pocket.from_jsonstring": [[633, "pocket-from-jsonstring"]], "Pocket.from_shapes_and_element": [[634, "pocket-from-shapes-and-element"]], "Pocket.from_volume_and_element": [[635, "pocket-from-volume-and-element"]], "Pocket.sha256": [[636, "pocket-sha256"]], "Pocket.to_json": [[637, "pocket-to-json"]], "Pocket.to_jsonstring": [[638, "pocket-to-jsonstring"]], "Pocket.validate_data": [[639, "pocket-validate-data"]], "Pocket.volume_from_params_and_element": [[640, "pocket-volume-from-params-and-element"]], "Slot": [[641, "slot"]], "Slot.ToString": [[642, "slot-tostring"]], "Slot.add_subprocessing": [[643, "slot-add-subprocessing"]], "Slot.apply": [[644, "slot-apply"]], "Slot.copy": [[645, "slot-copy"]], "Slot.from_json": [[646, "slot-from-json"]], "Slot.from_jsonstring": [[647, "slot-from-jsonstring"]], "Slot.from_plane_and_beam": [[648, "slot-from-plane-and-beam"]], "Slot.sha256": [[649, "slot-sha256"]], "Slot.to_json": [[650, "slot-to-json"]], "Slot.to_jsonstring": [[651, "slot-to-jsonstring"]], "Slot.validate_data": [[652, "slot-validate-data"]], "StepJoint": [[653, "stepjoint"]], "StepJoint.ToString": [[654, "stepjoint-tostring"]], "StepJoint.add_subprocessing": [[655, "stepjoint-add-subprocessing"]], "StepJoint.add_tenon": [[656, "stepjoint-add-tenon"]], "StepJoint.apply": [[657, "stepjoint-apply"]], "StepJoint.copy": [[658, "stepjoint-copy"]], "StepJoint.from_json": [[659, "stepjoint-from-json"]], "StepJoint.from_jsonstring": [[660, "stepjoint-from-jsonstring"]], "StepJoint.from_plane_and_beam": [[661, "stepjoint-from-plane-and-beam"]], "StepJoint.planes_from_params_and_beam": [[662, "stepjoint-planes-from-params-and-beam"]], "StepJoint.sha256": [[663, "stepjoint-sha256"]], "StepJoint.tenon_volume_from_params_and_beam": [[664, "stepjoint-tenon-volume-from-params-and-beam"]], "StepJoint.to_json": [[665, "stepjoint-to-json"]], "StepJoint.to_jsonstring": [[666, "stepjoint-to-jsonstring"]], "StepJoint.validate_data": [[667, "stepjoint-validate-data"]], "StepJointNotch": [[668, "stepjointnotch"]], "StepJointNotch.ToString": [[669, "stepjointnotch-tostring"]], "StepJointNotch.add_mortise": [[670, "stepjointnotch-add-mortise"]], "StepJointNotch.add_subprocessing": [[671, "stepjointnotch-add-subprocessing"]], "StepJointNotch.apply": [[672, "stepjointnotch-apply"]], "StepJointNotch.copy": [[673, "stepjointnotch-copy"]], "StepJointNotch.from_json": [[674, "stepjointnotch-from-json"]], "StepJointNotch.from_jsonstring": [[675, "stepjointnotch-from-jsonstring"]], "StepJointNotch.from_plane_and_beam": [[676, "stepjointnotch-from-plane-and-beam"]], "StepJointNotch.mortise_volume_from_params_and_beam": [[677, "stepjointnotch-mortise-volume-from-params-and-beam"]], "StepJointNotch.planes_from_params_and_beam": [[678, "stepjointnotch-planes-from-params-and-beam"]], "StepJointNotch.sha256": [[679, "stepjointnotch-sha256"]], "StepJointNotch.to_json": [[680, "stepjointnotch-to-json"]], "StepJointNotch.to_jsonstring": [[681, "stepjointnotch-to-jsonstring"]], "StepJointNotch.validate_data": [[682, "stepjointnotch-validate-data"]], "StepShapeType": [[683, "stepshapetype"]], "Tenon": [[684, "tenon"]], "Tenon.ToString": [[685, "tenon-tostring"]], "Tenon.add_subprocessing": [[686, "tenon-add-subprocessing"]], "Tenon.apply": [[687, "tenon-apply"]], "Tenon.copy": [[688, "tenon-copy"]], "Tenon.frame_from_params_and_beam": [[689, "tenon-frame-from-params-and-beam"]], "Tenon.from_json": [[690, "tenon-from-json"]], "Tenon.from_jsonstring": [[691, "tenon-from-jsonstring"]], "Tenon.from_plane_and_beam": [[692, "tenon-from-plane-and-beam"]], "Tenon.sha256": [[693, "tenon-sha256"]], "Tenon.to_json": [[694, "tenon-to-json"]], "Tenon.to_jsonstring": [[695, "tenon-to-jsonstring"]], "Tenon.validate_data": [[696, "tenon-validate-data"]], "Tenon.volume_from_params_and_beam": [[697, "tenon-volume-from-params-and-beam"]], "TenonShapeType": [[698, "tenonshapetype"]], "add_gh_param": [[699, "add-gh-param"]], "clear_gh_params": [[700, "clear-gh-params"]], "get_leaf_subclasses": [[701, "get-leaf-subclasses"]], "item_input_valid": [[702, "item-input-valid"]], "list_input_valid": [[703, "list-input-valid"]], "manage_dynamic_params": [[704, "manage-dynamic-params"]], "rename_gh_input": [[705, "rename-gh-input"]], "TimberModel": [[706, "timbermodel"]], "TimberModel.ToString": [[707, "timbermodel-tostring"]], "TimberModel.add_element": [[708, "timbermodel-add-element"]], "TimberModel.add_elements": [[709, "timbermodel-add-elements"]], "TimberModel.add_group": [[710, "timbermodel-add-group"]], "TimberModel.add_group_element": [[711, "timbermodel-add-group-element"]], "TimberModel.add_interaction": [[712, "timbermodel-add-interaction"]], "TimberModel.add_joint": [[713, "timbermodel-add-joint"]], "TimberModel.add_material": [[714, "timbermodel-add-material"]], "TimberModel.assign_material": [[715, "timbermodel-assign-material"]], "TimberModel.compute_aabb": [[716, "timbermodel-compute-aabb"]], "TimberModel.compute_obb": [[717, "timbermodel-compute-obb"]], "TimberModel.connect_adjacent_walls": [[718, "timbermodel-connect-adjacent-walls"]], "TimberModel.copy": [[719, "timbermodel-copy"]], "TimberModel.element_by_guid": [[720, "timbermodel-element-by-guid"]], "TimberModel.elements": [[721, "timbermodel-elements"]], "TimberModel.elements_connected_by": [[722, "timbermodel-elements-connected-by"]], "TimberModel.from_json": [[723, "timbermodel-from-json"]], "TimberModel.from_jsonstring": [[724, "timbermodel-from-jsonstring"]], "TimberModel.get_elements_in_group": [[725, "timbermodel-get-elements-in-group"]], "TimberModel.get_interactions_for_element": [[726, "timbermodel-get-interactions-for-element"]], "TimberModel.has_element": [[727, "timbermodel-has-element"]], "TimberModel.has_group": [[728, "timbermodel-has-group"]], "TimberModel.has_interaction": [[729, "timbermodel-has-interaction"]], "TimberModel.has_material": [[730, "timbermodel-has-material"]], "TimberModel.interactions": [[731, "timbermodel-interactions"]], "TimberModel.materials": [[732, "timbermodel-materials"]], "TimberModel.process_joinery": [[733, "timbermodel-process-joinery"]], "TimberModel.remove_element": [[734, "timbermodel-remove-element"]], "TimberModel.remove_interaction": [[735, "timbermodel-remove-interaction"]], "TimberModel.remove_joint": [[736, "timbermodel-remove-joint"]], "TimberModel.rotate": [[737, "timbermodel-rotate"]], "TimberModel.rotated": [[738, "timbermodel-rotated"]], "TimberModel.scale": [[739, "timbermodel-scale"]], "TimberModel.scaled": [[740, "timbermodel-scaled"]], "TimberModel.set_topologies": [[741, "timbermodel-set-topologies"]], "TimberModel.sha256": [[742, "timbermodel-sha256"]], "TimberModel.to_json": [[743, "timbermodel-to-json"]], "TimberModel.to_jsonstring": [[744, "timbermodel-to-jsonstring"]], "TimberModel.transform": [[745, "timbermodel-transform"]], "TimberModel.transform_numpy": [[746, "timbermodel-transform-numpy"]], "TimberModel.transformed": [[747, "timbermodel-transformed"]], "TimberModel.transformed_numpy": [[748, "timbermodel-transformed-numpy"]], "TimberModel.translate": [[749, "timbermodel-translate"]], "TimberModel.translated": [[750, "timbermodel-translated"]], "TimberModel.validate_data": [[751, "timbermodel-validate-data"]], "Actor": [[752, "actor"]], "Actor.get_name": [[753, "actor-get-name"]], "BuildingPlan": [[754, "buildingplan"]], "BuildingPlan.ToString": [[755, "buildingplan-tostring"]], "BuildingPlan.add_step": [[756, "buildingplan-add-step"]], "BuildingPlan.copy": [[757, "buildingplan-copy"]], "BuildingPlan.from_json": [[758, "buildingplan-from-json"]], "BuildingPlan.from_jsonstring": [[759, "buildingplan-from-jsonstring"]], "BuildingPlan.sha256": [[760, "buildingplan-sha256"]], "BuildingPlan.to_json": [[761, "buildingplan-to-json"]], "BuildingPlan.to_jsonstring": [[762, "buildingplan-to-jsonstring"]], "BuildingPlan.validate_data": [[763, "buildingplan-validate-data"]], "BuildingPlanParser": [[764, "buildingplanparser"]], "BuildingPlanParser.parse": [[765, "buildingplanparser-parse"]], "BuildingPlanParser.serialize": [[766, "buildingplanparser-serialize"]], "Instruction": [[767, "instruction"]], "Instruction.ToString": [[768, "instruction-tostring"]], "Instruction.copy": [[769, "instruction-copy"]], "Instruction.from_json": [[770, "instruction-from-json"]], "Instruction.from_jsonstring": [[771, "instruction-from-jsonstring"]], "Instruction.sha256": [[772, "instruction-sha256"]], "Instruction.to_json": [[773, "instruction-to-json"]], "Instruction.to_jsonstring": [[774, "instruction-to-jsonstring"]], "Instruction.transform": [[775, "instruction-transform"]], "Instruction.validate_data": [[776, "instruction-validate-data"]], "LinearDimension": [[777, "lineardimension"]], "LinearDimension.ToString": [[778, "lineardimension-tostring"]], "LinearDimension.copy": [[779, "lineardimension-copy"]], "LinearDimension.from_json": [[780, "lineardimension-from-json"]], "LinearDimension.from_jsonstring": [[781, "lineardimension-from-jsonstring"]], "LinearDimension.sha256": [[782, "lineardimension-sha256"]], "LinearDimension.to_json": [[783, "lineardimension-to-json"]], "LinearDimension.to_jsonstring": [[784, "lineardimension-to-jsonstring"]], "LinearDimension.transform": [[785, "lineardimension-transform"]], "LinearDimension.validate_data": [[786, "lineardimension-validate-data"]], "Model3d": [[787, "model3d"]], "Model3d.ToString": [[788, "model3d-tostring"]], "Model3d.copy": [[789, "model3d-copy"]], "Model3d.from_json": [[790, "model3d-from-json"]], "Model3d.from_jsonstring": [[791, "model3d-from-jsonstring"]], "Model3d.sha256": [[792, "model3d-sha256"]], "Model3d.to_json": [[793, "model3d-to-json"]], "Model3d.to_jsonstring": [[794, "model3d-to-jsonstring"]], "Model3d.transform": [[795, "model3d-transform"]], "Model3d.validate_data": [[796, "model3d-validate-data"]], "SimpleSequenceGenerator": [[797, "simplesequencegenerator"]], "Step": [[798, "step"]], "Step.ToString": [[799, "step-tostring"]], "Step.copy": [[800, "step-copy"]], "Step.from_json": [[801, "step-from-json"]], "Step.from_jsonstring": [[802, "step-from-jsonstring"]], "Step.sha256": [[803, "step-sha256"]], "Step.to_json": [[804, "step-to-json"]], "Step.to_jsonstring": [[805, "step-to-jsonstring"]], "Step.transform": [[806, "step-transform"]], "Step.validate_data": [[807, "step-validate-data"]], "Text3d": [[808, "text3d"]], "Text3d.ToString": [[809, "text3d-tostring"]], "Text3d.copy": [[810, "text3d-copy"]], "Text3d.from_json": [[811, "text3d-from-json"]], "Text3d.from_jsonstring": [[812, "text3d-from-jsonstring"]], "Text3d.sha256": [[813, "text3d-sha256"]], "Text3d.to_json": [[814, "text3d-to-json"]], "Text3d.to_jsonstring": [[815, "text3d-to-jsonstring"]], "Text3d.transform": [[816, "text3d-transform"]], "Text3d.validate_data": [[817, "text3d-validate-data"]], "Citing": [[819, "citing"]], "Examples": [[820, "examples"], [830, "examples"]], "Timber Assembly Examples": [[820, "timber-assembly-examples"]], "Create Joint": [[821, "create-joint"]], "COMPAS Timber Documentation": [[822, "compas-timber-documentation"]], "Dependencies": [[822, "dependencies"]], "Table of Contents": [[822, "table-of-contents"]], "Indices and tables": [[822, "indices-and-tables"]], "Installation": [[823, "installation"]], "Stable": [[823, "stable"]], "Install with conda": [[823, "install-with-conda"]], "Development": [[823, "development"]], "License": [[824, "license"]], "Grasshopper plugin": [[825, "grasshopper-plugin"]], "BTLx Contribution Guide": [[826, "btlx-contribution-guide"]], "Attributes": [[827, "attributes"]], "Standard Attributes": [[827, "standard-attributes"]], "Custom Attributes": [[827, "custom-attributes"]], "Check Attributes": [[827, "check-attributes"]], "Delete Attributes": [[827, "delete-attributes"]], "Beams": [[828, "beams"]], "DecomposeBeam": [[828, "decomposebeam"]], "FindBeamByRhinoGuid": [[828, "findbeambyrhinoguid"]], "Design": [[829, "design"]], "Surface Model": [[829, "surface-model"]], "Surface Model Options": [[829, "surface-model-options"]], "Custom Beam Dimensions": [[829, "custom-beam-dimensions"]], "Fabrication": [[831, "fabrication"]], "Write BTLx": [[831, "write-btlx"]], "Features": [[832, "features"]], "Jack Rafter Cut Feature": [[832, "jack-rafter-cut-feature"]], "Double Cut Feature": [[832, "double-cut-feature"]], "Drilling Feature": [[832, "drilling-feature"]], "Joint Rules": [[833, "joint-rules"]], "Joint Rules Components": [[833, "joint-rules-components"]], "Default Joint Rules": [[833, "default-joint-rules"]], "Topological Joint Rules": [[833, "topological-joint-rules"]], "Category Joint Rules": [[833, "category-joint-rules"]], "Direct Joint Rules": [[833, "direct-joint-rules"]], "Surface Model Joint Override": [[833, "surface-model-joint-override"]], "Joint Types": [[833, "joint-types"]], "L-Butt": [[833, "l-butt"]], "L-Lap": [[833, "l-lap"]], "L-Miter": [[833, "l-miter"]], "French Ridge Lap": [[833, "french-ridge-lap"]], "Tenon and Mortise": [[833, "tenon-and-mortise"], [833, "id1"]], "T-Butt": [[833, "t-butt"]], "T-Lap": [[833, "t-lap"]], "T-Step": [[833, "t-step"]], "T-Birdsmouth": [[833, "t-birdsmouth"]], "T-Dovetail": [[833, "t-dovetail"]], "X-Lap": [[833, "x-lap"]], "Summary Table": [[833, "summary-table"]], "Model": [[834, "model"]], "Show": [[835, "show"]], "Show Beam Face Index": [[835, "show-beam-face-index"]], "Show Beam Index": [[835, "show-beam-index"]], "Show Surface Model Beam Types": [[835, "show-surface-model-beam-types"]], "Show Feature Errors": [[835, "show-feature-errors"]], "Show Joining Errors": [[835, "show-joining-errors"]], "Show Joint Types": [[835, "show-joint-types"]], "Show Topology Types": [[835, "show-topology-types"]], "Utils": [[836, "utils"]], "Bake with BoxMap": [[836, "bake-with-boxmap"]], "Workflow": [[837, "workflow"]]}, "indexentries": {"ballnodejoint (class in compas_timber.connections)": [[10, "compas_timber.connections.BallNodeJoint"]], "tostring() (compas_timber.connections.ballnodejoint method)": [[11, "compas_timber.connections.BallNodeJoint.ToString"]], "add_extensions() (compas_timber.connections.ballnodejoint method)": [[12, "compas_timber.connections.BallNodeJoint.add_extensions"]], "add_features() (compas_timber.connections.ballnodejoint method)": [[13, "compas_timber.connections.BallNodeJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ballnodejoint method)": [[14, "compas_timber.connections.BallNodeJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ballnodejoint method)": [[15, "compas_timber.connections.BallNodeJoint.copy"]], "create() (compas_timber.connections.ballnodejoint class method)": [[16, "compas_timber.connections.BallNodeJoint.create"]], "element_count_complies() (compas_timber.connections.ballnodejoint class method)": [[17, "compas_timber.connections.BallNodeJoint.element_count_complies"]], "from_json() (compas_timber.connections.ballnodejoint class method)": [[18, "compas_timber.connections.BallNodeJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ballnodejoint class method)": [[19, "compas_timber.connections.BallNodeJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.ballnodejoint static method)": [[20, "compas_timber.connections.BallNodeJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.ballnodejoint static method)": [[21, "compas_timber.connections.BallNodeJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.ballnodejoint method)": [[22, "compas_timber.connections.BallNodeJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ballnodejoint method)": [[23, "compas_timber.connections.BallNodeJoint.sha256"]], "to_json() (compas_timber.connections.ballnodejoint method)": [[24, "compas_timber.connections.BallNodeJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ballnodejoint method)": [[25, "compas_timber.connections.BallNodeJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ballnodejoint class method)": [[26, "compas_timber.connections.BallNodeJoint.validate_data"]], "connectionsolver (class in compas_timber.connections)": [[27, "compas_timber.connections.ConnectionSolver"]], "find_intersecting_pairs() (compas_timber.connections.connectionsolver class method)": [[28, "compas_timber.connections.ConnectionSolver.find_intersecting_pairs"]], "find_topology() (compas_timber.connections.connectionsolver method)": [[29, "compas_timber.connections.ConnectionSolver.find_topology"]], "find_wall_wall_topology() (compas_timber.connections.connectionsolver method)": [[30, "compas_timber.connections.ConnectionSolver.find_wall_wall_topology"]], "joint (class in compas_timber.connections)": [[31, "compas_timber.connections.Joint"]], "tostring() (compas_timber.connections.joint method)": [[32, "compas_timber.connections.Joint.ToString"]], "add_extensions() (compas_timber.connections.joint method)": [[33, "compas_timber.connections.Joint.add_extensions"]], "add_features() (compas_timber.connections.joint method)": [[34, "compas_timber.connections.Joint.add_features"]], "check_elements_compatibility() (compas_timber.connections.joint method)": [[35, "compas_timber.connections.Joint.check_elements_compatibility"]], "copy() (compas_timber.connections.joint method)": [[36, "compas_timber.connections.Joint.copy"]], "create() (compas_timber.connections.joint class method)": [[37, "compas_timber.connections.Joint.create"]], "element_count_complies() (compas_timber.connections.joint class method)": [[38, "compas_timber.connections.Joint.element_count_complies"]], "from_json() (compas_timber.connections.joint class method)": [[39, "compas_timber.connections.Joint.from_json"]], "from_jsonstring() (compas_timber.connections.joint class method)": [[40, "compas_timber.connections.Joint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.joint static method)": [[41, "compas_timber.connections.Joint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.joint static method)": [[42, "compas_timber.connections.Joint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.joint method)": [[43, "compas_timber.connections.Joint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.joint method)": [[44, "compas_timber.connections.Joint.sha256"]], "to_json() (compas_timber.connections.joint method)": [[45, "compas_timber.connections.Joint.to_json"]], "to_jsonstring() (compas_timber.connections.joint method)": [[46, "compas_timber.connections.Joint.to_jsonstring"]], "validate_data() (compas_timber.connections.joint class method)": [[47, "compas_timber.connections.Joint.validate_data"]], "jointtopology (class in compas_timber.connections)": [[48, "compas_timber.connections.JointTopology"]], "get_name() (compas_timber.connections.jointtopology class method)": [[49, "compas_timber.connections.JointTopology.get_name"]], "lbuttjoint (class in compas_timber.connections)": [[50, "compas_timber.connections.LButtJoint"]], "tostring() (compas_timber.connections.lbuttjoint method)": [[51, "compas_timber.connections.LButtJoint.ToString"]], "add_extensions() (compas_timber.connections.lbuttjoint method)": [[52, "compas_timber.connections.LButtJoint.add_extensions"]], "add_features() (compas_timber.connections.lbuttjoint method)": [[53, "compas_timber.connections.LButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lbuttjoint method)": [[54, "compas_timber.connections.LButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lbuttjoint method)": [[55, "compas_timber.connections.LButtJoint.copy"]], "create() (compas_timber.connections.lbuttjoint class method)": [[56, "compas_timber.connections.LButtJoint.create"]], "element_count_complies() (compas_timber.connections.lbuttjoint class method)": [[57, "compas_timber.connections.LButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.lbuttjoint class method)": [[58, "compas_timber.connections.LButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lbuttjoint class method)": [[59, "compas_timber.connections.LButtJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lbuttjoint static method)": [[60, "compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lbuttjoint static method)": [[61, "compas_timber.connections.LButtJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lbuttjoint method)": [[62, "compas_timber.connections.LButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lbuttjoint method)": [[63, "compas_timber.connections.LButtJoint.sha256"]], "to_json() (compas_timber.connections.lbuttjoint method)": [[64, "compas_timber.connections.LButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lbuttjoint method)": [[65, "compas_timber.connections.LButtJoint.to_jsonstring"]], "update_beam_roles() (compas_timber.connections.lbuttjoint method)": [[66, "compas_timber.connections.LButtJoint.update_beam_roles"]], "validate_data() (compas_timber.connections.lbuttjoint class method)": [[67, "compas_timber.connections.LButtJoint.validate_data"]], "lfrenchridgelapjoint (class in compas_timber.connections)": [[68, "compas_timber.connections.LFrenchRidgeLapJoint"]], "tostring() (compas_timber.connections.lfrenchridgelapjoint method)": [[69, "compas_timber.connections.LFrenchRidgeLapJoint.ToString"]], "add_extensions() (compas_timber.connections.lfrenchridgelapjoint method)": [[70, "compas_timber.connections.LFrenchRidgeLapJoint.add_extensions"]], "add_features() (compas_timber.connections.lfrenchridgelapjoint method)": [[71, "compas_timber.connections.LFrenchRidgeLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lfrenchridgelapjoint method)": [[72, "compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lfrenchridgelapjoint method)": [[73, "compas_timber.connections.LFrenchRidgeLapJoint.copy"]], "create() (compas_timber.connections.lfrenchridgelapjoint class method)": [[74, "compas_timber.connections.LFrenchRidgeLapJoint.create"]], "element_count_complies() (compas_timber.connections.lfrenchridgelapjoint class method)": [[75, "compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lfrenchridgelapjoint class method)": [[76, "compas_timber.connections.LFrenchRidgeLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lfrenchridgelapjoint class method)": [[77, "compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lfrenchridgelapjoint static method)": [[78, "compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lfrenchridgelapjoint static method)": [[79, "compas_timber.connections.LFrenchRidgeLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lfrenchridgelapjoint method)": [[80, "compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lfrenchridgelapjoint method)": [[81, "compas_timber.connections.LFrenchRidgeLapJoint.sha256"]], "to_json() (compas_timber.connections.lfrenchridgelapjoint method)": [[82, "compas_timber.connections.LFrenchRidgeLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lfrenchridgelapjoint method)": [[83, "compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lfrenchridgelapjoint class method)": [[84, "compas_timber.connections.LFrenchRidgeLapJoint.validate_data"]], "llapjoint (class in compas_timber.connections)": [[85, "compas_timber.connections.LLapJoint"]], "tostring() (compas_timber.connections.llapjoint method)": [[86, "compas_timber.connections.LLapJoint.ToString"]], "add_extensions() (compas_timber.connections.llapjoint method)": [[87, "compas_timber.connections.LLapJoint.add_extensions"]], "add_features() (compas_timber.connections.llapjoint method)": [[88, "compas_timber.connections.LLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.llapjoint method)": [[89, "compas_timber.connections.LLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.llapjoint method)": [[90, "compas_timber.connections.LLapJoint.copy"]], "create() (compas_timber.connections.llapjoint class method)": [[91, "compas_timber.connections.LLapJoint.create"]], "element_count_complies() (compas_timber.connections.llapjoint class method)": [[92, "compas_timber.connections.LLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.llapjoint class method)": [[93, "compas_timber.connections.LLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.llapjoint class method)": [[94, "compas_timber.connections.LLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.llapjoint static method)": [[95, "compas_timber.connections.LLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.llapjoint static method)": [[96, "compas_timber.connections.LLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.llapjoint method)": [[97, "compas_timber.connections.LLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.llapjoint method)": [[98, "compas_timber.connections.LLapJoint.sha256"]], "to_json() (compas_timber.connections.llapjoint method)": [[99, "compas_timber.connections.LLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.llapjoint method)": [[100, "compas_timber.connections.LLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.llapjoint class method)": [[101, "compas_timber.connections.LLapJoint.validate_data"]], "lmiterjoint (class in compas_timber.connections)": [[102, "compas_timber.connections.LMiterJoint"]], "tostring() (compas_timber.connections.lmiterjoint method)": [[103, "compas_timber.connections.LMiterJoint.ToString"]], "add_extensions() (compas_timber.connections.lmiterjoint method)": [[104, "compas_timber.connections.LMiterJoint.add_extensions"]], "add_features() (compas_timber.connections.lmiterjoint method)": [[105, "compas_timber.connections.LMiterJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lmiterjoint method)": [[106, "compas_timber.connections.LMiterJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lmiterjoint method)": [[107, "compas_timber.connections.LMiterJoint.copy"]], "create() (compas_timber.connections.lmiterjoint class method)": [[108, "compas_timber.connections.LMiterJoint.create"]], "element_count_complies() (compas_timber.connections.lmiterjoint class method)": [[109, "compas_timber.connections.LMiterJoint.element_count_complies"]], "from_json() (compas_timber.connections.lmiterjoint class method)": [[110, "compas_timber.connections.LMiterJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lmiterjoint class method)": [[111, "compas_timber.connections.LMiterJoint.from_jsonstring"]], "get_cutoff_plane() (compas_timber.connections.lmiterjoint method)": [[112, "compas_timber.connections.LMiterJoint.get_cutoff_plane"]], "get_cutting_planes() (compas_timber.connections.lmiterjoint method)": [[113, "compas_timber.connections.LMiterJoint.get_cutting_planes"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lmiterjoint static method)": [[114, "compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lmiterjoint static method)": [[115, "compas_timber.connections.LMiterJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lmiterjoint method)": [[116, "compas_timber.connections.LMiterJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lmiterjoint method)": [[117, "compas_timber.connections.LMiterJoint.sha256"]], "to_json() (compas_timber.connections.lmiterjoint method)": [[118, "compas_timber.connections.LMiterJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lmiterjoint method)": [[119, "compas_timber.connections.LMiterJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lmiterjoint class method)": [[120, "compas_timber.connections.LMiterJoint.validate_data"]], "lapjoint (class in compas_timber.connections)": [[121, "compas_timber.connections.LapJoint"]], "tostring() (compas_timber.connections.lapjoint method)": [[122, "compas_timber.connections.LapJoint.ToString"]], "add_extensions() (compas_timber.connections.lapjoint method)": [[123, "compas_timber.connections.LapJoint.add_extensions"]], "add_features() (compas_timber.connections.lapjoint method)": [[124, "compas_timber.connections.LapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lapjoint method)": [[125, "compas_timber.connections.LapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lapjoint method)": [[126, "compas_timber.connections.LapJoint.copy"]], "create() (compas_timber.connections.lapjoint class method)": [[127, "compas_timber.connections.LapJoint.create"]], "element_count_complies() (compas_timber.connections.lapjoint class method)": [[128, "compas_timber.connections.LapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lapjoint class method)": [[129, "compas_timber.connections.LapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lapjoint class method)": [[130, "compas_timber.connections.LapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lapjoint static method)": [[131, "compas_timber.connections.LapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lapjoint static method)": [[132, "compas_timber.connections.LapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lapjoint method)": [[133, "compas_timber.connections.LapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lapjoint method)": [[134, "compas_timber.connections.LapJoint.sha256"]], "to_json() (compas_timber.connections.lapjoint method)": [[135, "compas_timber.connections.LapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lapjoint method)": [[136, "compas_timber.connections.LapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lapjoint class method)": [[137, "compas_timber.connections.LapJoint.validate_data"]], "nulljoint (class in compas_timber.connections)": [[138, "compas_timber.connections.NullJoint"]], "tostring() (compas_timber.connections.nulljoint method)": [[139, "compas_timber.connections.NullJoint.ToString"]], "add_extensions() (compas_timber.connections.nulljoint method)": [[140, "compas_timber.connections.NullJoint.add_extensions"]], "add_features() (compas_timber.connections.nulljoint method)": [[141, "compas_timber.connections.NullJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.nulljoint method)": [[142, "compas_timber.connections.NullJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.nulljoint method)": [[143, "compas_timber.connections.NullJoint.copy"]], "create() (compas_timber.connections.nulljoint class method)": [[144, "compas_timber.connections.NullJoint.create"]], "element_count_complies() (compas_timber.connections.nulljoint class method)": [[145, "compas_timber.connections.NullJoint.element_count_complies"]], "from_json() (compas_timber.connections.nulljoint class method)": [[146, "compas_timber.connections.NullJoint.from_json"]], "from_jsonstring() (compas_timber.connections.nulljoint class method)": [[147, "compas_timber.connections.NullJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.nulljoint static method)": [[148, "compas_timber.connections.NullJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.nulljoint static method)": [[149, "compas_timber.connections.NullJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.nulljoint method)": [[150, "compas_timber.connections.NullJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.nulljoint method)": [[151, "compas_timber.connections.NullJoint.sha256"]], "to_json() (compas_timber.connections.nulljoint method)": [[152, "compas_timber.connections.NullJoint.to_json"]], "to_jsonstring() (compas_timber.connections.nulljoint method)": [[153, "compas_timber.connections.NullJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.nulljoint class method)": [[154, "compas_timber.connections.NullJoint.validate_data"]], "tbirdsmouthjoint (class in compas_timber.connections)": [[155, "compas_timber.connections.TBirdsmouthJoint"]], "tostring() (compas_timber.connections.tbirdsmouthjoint method)": [[156, "compas_timber.connections.TBirdsmouthJoint.ToString"]], "add_extensions() (compas_timber.connections.tbirdsmouthjoint method)": [[157, "compas_timber.connections.TBirdsmouthJoint.add_extensions"]], "add_features() (compas_timber.connections.tbirdsmouthjoint method)": [[158, "compas_timber.connections.TBirdsmouthJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbirdsmouthjoint method)": [[159, "compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbirdsmouthjoint method)": [[160, "compas_timber.connections.TBirdsmouthJoint.copy"]], "create() (compas_timber.connections.tbirdsmouthjoint class method)": [[161, "compas_timber.connections.TBirdsmouthJoint.create"]], "element_count_complies() (compas_timber.connections.tbirdsmouthjoint class method)": [[162, "compas_timber.connections.TBirdsmouthJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbirdsmouthjoint class method)": [[163, "compas_timber.connections.TBirdsmouthJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbirdsmouthjoint class method)": [[164, "compas_timber.connections.TBirdsmouthJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tbirdsmouthjoint static method)": [[165, "compas_timber.connections.TBirdsmouthJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tbirdsmouthjoint static method)": [[166, "compas_timber.connections.TBirdsmouthJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tbirdsmouthjoint method)": [[167, "compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbirdsmouthjoint method)": [[168, "compas_timber.connections.TBirdsmouthJoint.sha256"]], "to_json() (compas_timber.connections.tbirdsmouthjoint method)": [[169, "compas_timber.connections.TBirdsmouthJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbirdsmouthjoint method)": [[170, "compas_timber.connections.TBirdsmouthJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbirdsmouthjoint class method)": [[171, "compas_timber.connections.TBirdsmouthJoint.validate_data"]], "tbuttjoint (class in compas_timber.connections)": [[172, "compas_timber.connections.TButtJoint"]], "tostring() (compas_timber.connections.tbuttjoint method)": [[173, "compas_timber.connections.TButtJoint.ToString"]], "add_extensions() (compas_timber.connections.tbuttjoint method)": [[174, "compas_timber.connections.TButtJoint.add_extensions"]], "add_features() (compas_timber.connections.tbuttjoint method)": [[175, "compas_timber.connections.TButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbuttjoint method)": [[176, "compas_timber.connections.TButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbuttjoint method)": [[177, "compas_timber.connections.TButtJoint.copy"]], "create() (compas_timber.connections.tbuttjoint class method)": [[178, "compas_timber.connections.TButtJoint.create"]], "element_count_complies() (compas_timber.connections.tbuttjoint class method)": [[179, "compas_timber.connections.TButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbuttjoint class method)": [[180, "compas_timber.connections.TButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbuttjoint class method)": [[181, "compas_timber.connections.TButtJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tbuttjoint static method)": [[182, "compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tbuttjoint static method)": [[183, "compas_timber.connections.TButtJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tbuttjoint method)": [[184, "compas_timber.connections.TButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbuttjoint method)": [[185, "compas_timber.connections.TButtJoint.sha256"]], "to_json() (compas_timber.connections.tbuttjoint method)": [[186, "compas_timber.connections.TButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbuttjoint method)": [[187, "compas_timber.connections.TButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbuttjoint class method)": [[188, "compas_timber.connections.TButtJoint.validate_data"]], "tdovetailjoint (class in compas_timber.connections)": [[189, "compas_timber.connections.TDovetailJoint"]], "tostring() (compas_timber.connections.tdovetailjoint method)": [[190, "compas_timber.connections.TDovetailJoint.ToString"]], "add_extensions() (compas_timber.connections.tdovetailjoint method)": [[191, "compas_timber.connections.TDovetailJoint.add_extensions"]], "add_features() (compas_timber.connections.tdovetailjoint method)": [[192, "compas_timber.connections.TDovetailJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tdovetailjoint method)": [[193, "compas_timber.connections.TDovetailJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tdovetailjoint method)": [[194, "compas_timber.connections.TDovetailJoint.copy"]], "create() (compas_timber.connections.tdovetailjoint class method)": [[195, "compas_timber.connections.TDovetailJoint.create"]], "define_dovetail_tool() (compas_timber.connections.tdovetailjoint method)": [[196, "compas_timber.connections.TDovetailJoint.define_dovetail_tool"]], "element_count_complies() (compas_timber.connections.tdovetailjoint class method)": [[197, "compas_timber.connections.TDovetailJoint.element_count_complies"]], "from_json() (compas_timber.connections.tdovetailjoint class method)": [[198, "compas_timber.connections.TDovetailJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tdovetailjoint class method)": [[199, "compas_timber.connections.TDovetailJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tdovetailjoint static method)": [[200, "compas_timber.connections.TDovetailJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tdovetailjoint static method)": [[201, "compas_timber.connections.TDovetailJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tdovetailjoint method)": [[202, "compas_timber.connections.TDovetailJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tdovetailjoint method)": [[203, "compas_timber.connections.TDovetailJoint.sha256"]], "to_json() (compas_timber.connections.tdovetailjoint method)": [[204, "compas_timber.connections.TDovetailJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tdovetailjoint method)": [[205, "compas_timber.connections.TDovetailJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tdovetailjoint class method)": [[206, "compas_timber.connections.TDovetailJoint.validate_data"]], "tlapjoint (class in compas_timber.connections)": [[207, "compas_timber.connections.TLapJoint"]], "tostring() (compas_timber.connections.tlapjoint method)": [[208, "compas_timber.connections.TLapJoint.ToString"]], "add_extensions() (compas_timber.connections.tlapjoint method)": [[209, "compas_timber.connections.TLapJoint.add_extensions"]], "add_features() (compas_timber.connections.tlapjoint method)": [[210, "compas_timber.connections.TLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tlapjoint method)": [[211, "compas_timber.connections.TLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tlapjoint method)": [[212, "compas_timber.connections.TLapJoint.copy"]], "create() (compas_timber.connections.tlapjoint class method)": [[213, "compas_timber.connections.TLapJoint.create"]], "element_count_complies() (compas_timber.connections.tlapjoint class method)": [[214, "compas_timber.connections.TLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.tlapjoint class method)": [[215, "compas_timber.connections.TLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tlapjoint class method)": [[216, "compas_timber.connections.TLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tlapjoint static method)": [[217, "compas_timber.connections.TLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tlapjoint static method)": [[218, "compas_timber.connections.TLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tlapjoint method)": [[219, "compas_timber.connections.TLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tlapjoint method)": [[220, "compas_timber.connections.TLapJoint.sha256"]], "to_json() (compas_timber.connections.tlapjoint method)": [[221, "compas_timber.connections.TLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tlapjoint method)": [[222, "compas_timber.connections.TLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tlapjoint class method)": [[223, "compas_timber.connections.TLapJoint.validate_data"]], "tstepjoint (class in compas_timber.connections)": [[224, "compas_timber.connections.TStepJoint"]], "tostring() (compas_timber.connections.tstepjoint method)": [[225, "compas_timber.connections.TStepJoint.ToString"]], "add_extensions() (compas_timber.connections.tstepjoint method)": [[226, "compas_timber.connections.TStepJoint.add_extensions"]], "add_features() (compas_timber.connections.tstepjoint method)": [[227, "compas_timber.connections.TStepJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tstepjoint method)": [[228, "compas_timber.connections.TStepJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tstepjoint method)": [[229, "compas_timber.connections.TStepJoint.copy"]], "create() (compas_timber.connections.tstepjoint class method)": [[230, "compas_timber.connections.TStepJoint.create"]], "element_count_complies() (compas_timber.connections.tstepjoint class method)": [[231, "compas_timber.connections.TStepJoint.element_count_complies"]], "from_json() (compas_timber.connections.tstepjoint class method)": [[232, "compas_timber.connections.TStepJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tstepjoint class method)": [[233, "compas_timber.connections.TStepJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tstepjoint static method)": [[234, "compas_timber.connections.TStepJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tstepjoint static method)": [[235, "compas_timber.connections.TStepJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tstepjoint method)": [[236, "compas_timber.connections.TStepJoint.restore_beams_from_keys"]], "set_step_depths() (compas_timber.connections.tstepjoint method)": [[237, "compas_timber.connections.TStepJoint.set_step_depths"]], "sha256() (compas_timber.connections.tstepjoint method)": [[238, "compas_timber.connections.TStepJoint.sha256"]], "to_json() (compas_timber.connections.tstepjoint method)": [[239, "compas_timber.connections.TStepJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tstepjoint method)": [[240, "compas_timber.connections.TStepJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tstepjoint class method)": [[241, "compas_timber.connections.TStepJoint.validate_data"]], "tenonmortisejoint (class in compas_timber.connections)": [[242, "compas_timber.connections.TenonMortiseJoint"]], "tostring() (compas_timber.connections.tenonmortisejoint method)": [[243, "compas_timber.connections.TenonMortiseJoint.ToString"]], "add_extensions() (compas_timber.connections.tenonmortisejoint method)": [[244, "compas_timber.connections.TenonMortiseJoint.add_extensions"]], "add_features() (compas_timber.connections.tenonmortisejoint method)": [[245, "compas_timber.connections.TenonMortiseJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tenonmortisejoint method)": [[246, "compas_timber.connections.TenonMortiseJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tenonmortisejoint method)": [[247, "compas_timber.connections.TenonMortiseJoint.copy"]], "create() (compas_timber.connections.tenonmortisejoint class method)": [[248, "compas_timber.connections.TenonMortiseJoint.create"]], "element_count_complies() (compas_timber.connections.tenonmortisejoint class method)": [[249, "compas_timber.connections.TenonMortiseJoint.element_count_complies"]], "from_json() (compas_timber.connections.tenonmortisejoint class method)": [[250, "compas_timber.connections.TenonMortiseJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tenonmortisejoint class method)": [[251, "compas_timber.connections.TenonMortiseJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tenonmortisejoint static method)": [[252, "compas_timber.connections.TenonMortiseJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tenonmortisejoint static method)": [[253, "compas_timber.connections.TenonMortiseJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.tenonmortisejoint method)": [[254, "compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys"]], "set_default_values() (compas_timber.connections.tenonmortisejoint method)": [[255, "compas_timber.connections.TenonMortiseJoint.set_default_values"]], "sha256() (compas_timber.connections.tenonmortisejoint method)": [[256, "compas_timber.connections.TenonMortiseJoint.sha256"]], "to_json() (compas_timber.connections.tenonmortisejoint method)": [[257, "compas_timber.connections.TenonMortiseJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tenonmortisejoint method)": [[258, "compas_timber.connections.TenonMortiseJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tenonmortisejoint class method)": [[259, "compas_timber.connections.TenonMortiseJoint.validate_data"]], "xlapjoint (class in compas_timber.connections)": [[260, "compas_timber.connections.XLapJoint"]], "tostring() (compas_timber.connections.xlapjoint method)": [[261, "compas_timber.connections.XLapJoint.ToString"]], "add_extensions() (compas_timber.connections.xlapjoint method)": [[262, "compas_timber.connections.XLapJoint.add_extensions"]], "add_features() (compas_timber.connections.xlapjoint method)": [[263, "compas_timber.connections.XLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xlapjoint method)": [[264, "compas_timber.connections.XLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xlapjoint method)": [[265, "compas_timber.connections.XLapJoint.copy"]], "create() (compas_timber.connections.xlapjoint class method)": [[266, "compas_timber.connections.XLapJoint.create"]], "element_count_complies() (compas_timber.connections.xlapjoint class method)": [[267, "compas_timber.connections.XLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.xlapjoint class method)": [[268, "compas_timber.connections.XLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xlapjoint class method)": [[269, "compas_timber.connections.XLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.xlapjoint static method)": [[270, "compas_timber.connections.XLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.xlapjoint static method)": [[271, "compas_timber.connections.XLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.xlapjoint method)": [[272, "compas_timber.connections.XLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xlapjoint method)": [[273, "compas_timber.connections.XLapJoint.sha256"]], "to_json() (compas_timber.connections.xlapjoint method)": [[274, "compas_timber.connections.XLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xlapjoint method)": [[275, "compas_timber.connections.XLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xlapjoint class method)": [[276, "compas_timber.connections.XLapJoint.validate_data"]], "ybuttjoint (class in compas_timber.connections)": [[277, "compas_timber.connections.YButtJoint"]], "tostring() (compas_timber.connections.ybuttjoint method)": [[278, "compas_timber.connections.YButtJoint.ToString"]], "add_extensions() (compas_timber.connections.ybuttjoint method)": [[279, "compas_timber.connections.YButtJoint.add_extensions"]], "add_features() (compas_timber.connections.ybuttjoint method)": [[280, "compas_timber.connections.YButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ybuttjoint method)": [[281, "compas_timber.connections.YButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ybuttjoint method)": [[282, "compas_timber.connections.YButtJoint.copy"]], "create() (compas_timber.connections.ybuttjoint class method)": [[283, "compas_timber.connections.YButtJoint.create"]], "cross_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[284, "compas_timber.connections.YButtJoint.cross_beam_ref_side_index"]], "element_count_complies() (compas_timber.connections.ybuttjoint class method)": [[285, "compas_timber.connections.YButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.ybuttjoint class method)": [[286, "compas_timber.connections.YButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ybuttjoint class method)": [[287, "compas_timber.connections.YButtJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.ybuttjoint static method)": [[288, "compas_timber.connections.YButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.ybuttjoint static method)": [[289, "compas_timber.connections.YButtJoint.get_face_most_towards_beam"]], "get_miter_planes() (compas_timber.connections.ybuttjoint method)": [[290, "compas_timber.connections.YButtJoint.get_miter_planes"]], "main_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[291, "compas_timber.connections.YButtJoint.main_beam_ref_side_index"]], "restore_beams_from_keys() (compas_timber.connections.ybuttjoint method)": [[292, "compas_timber.connections.YButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ybuttjoint method)": [[293, "compas_timber.connections.YButtJoint.sha256"]], "to_json() (compas_timber.connections.ybuttjoint method)": [[294, "compas_timber.connections.YButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ybuttjoint method)": [[295, "compas_timber.connections.YButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ybuttjoint class method)": [[296, "compas_timber.connections.YButtJoint.validate_data"]], "find_neighboring_elements() (in module compas_timber.connections)": [[297, "compas_timber.connections.find_neighboring_elements"]], "categoryrule (class in compas_timber.design)": [[298, "compas_timber.design.CategoryRule"]], "tostring() (compas_timber.design.categoryrule method)": [[299, "compas_timber.design.CategoryRule.ToString"]], "comply() (compas_timber.design.categoryrule method)": [[300, "compas_timber.design.CategoryRule.comply"]], "get_category_rules() (compas_timber.design.categoryrule static method)": [[301, "compas_timber.design.CategoryRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.categoryrule static method)": [[302, "compas_timber.design.CategoryRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.categoryrule static method)": [[303, "compas_timber.design.CategoryRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.categoryrule static method)": [[304, "compas_timber.design.CategoryRule.joints_from_beams_and_rules"]], "reorder() (compas_timber.design.categoryrule method)": [[305, "compas_timber.design.CategoryRule.reorder"]], "debuginfomation (class in compas_timber.design)": [[306, "compas_timber.design.DebugInfomation"]], "tostring() (compas_timber.design.debuginfomation method)": [[307, "compas_timber.design.DebugInfomation.ToString"]], "add_fastener_error() (compas_timber.design.debuginfomation method)": [[308, "compas_timber.design.DebugInfomation.add_fastener_error"]], "add_feature_error() (compas_timber.design.debuginfomation method)": [[309, "compas_timber.design.DebugInfomation.add_feature_error"]], "add_joint_error() (compas_timber.design.debuginfomation method)": [[310, "compas_timber.design.DebugInfomation.add_joint_error"]], "directrule (class in compas_timber.design)": [[311, "compas_timber.design.DirectRule"]], "tostring() (compas_timber.design.directrule method)": [[312, "compas_timber.design.DirectRule.ToString"]], "comply() (compas_timber.design.directrule method)": [[313, "compas_timber.design.DirectRule.comply"]], "contains() (compas_timber.design.directrule method)": [[314, "compas_timber.design.DirectRule.contains"]], "get_category_rules() (compas_timber.design.directrule static method)": [[315, "compas_timber.design.DirectRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.directrule static method)": [[316, "compas_timber.design.DirectRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.directrule static method)": [[317, "compas_timber.design.DirectRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.directrule static method)": [[318, "compas_timber.design.DirectRule.joints_from_beams_and_rules"]], "featuredefinition (class in compas_timber.design)": [[319, "compas_timber.design.FeatureDefinition"]], "tostring() (compas_timber.design.featuredefinition method)": [[320, "compas_timber.design.FeatureDefinition.ToString"]], "jointdefinition (class in compas_timber.design)": [[321, "compas_timber.design.JointDefinition"]], "tostring() (compas_timber.design.jointdefinition method)": [[322, "compas_timber.design.JointDefinition.ToString"]], "is_identical() (compas_timber.design.jointdefinition method)": [[323, "compas_timber.design.JointDefinition.is_identical"]], "match() (compas_timber.design.jointdefinition method)": [[324, "compas_timber.design.JointDefinition.match"]], "jointrule (class in compas_timber.design)": [[325, "compas_timber.design.JointRule"]], "comply() (compas_timber.design.jointrule method)": [[326, "compas_timber.design.JointRule.comply"]], "get_category_rules() (compas_timber.design.jointrule static method)": [[327, "compas_timber.design.JointRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.jointrule static method)": [[328, "compas_timber.design.JointRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.jointrule static method)": [[329, "compas_timber.design.JointRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.jointrule static method)": [[330, "compas_timber.design.JointRule.joints_from_beams_and_rules"]], "surfacemodel (class in compas_timber.design)": [[331, "compas_timber.design.SurfaceModel"]], "beam_category_names() (compas_timber.design.surfacemodel class method)": [[332, "compas_timber.design.SurfaceModel.beam_category_names"]], "create_model() (compas_timber.design.surfacemodel method)": [[333, "compas_timber.design.SurfaceModel.create_model"]], "cull_overlaps() (compas_timber.design.surfacemodel method)": [[334, "compas_timber.design.SurfaceModel.cull_overlaps"]], "distance_between_elements() (compas_timber.design.surfacemodel method)": [[335, "compas_timber.design.SurfaceModel.distance_between_elements"]], "generate_frame() (compas_timber.design.surfacemodel method)": [[336, "compas_timber.design.SurfaceModel.generate_frame"]], "generate_perimeter_beams() (compas_timber.design.surfacemodel method)": [[337, "compas_timber.design.SurfaceModel.generate_perimeter_beams"]], "generate_plates() (compas_timber.design.surfacemodel method)": [[338, "compas_timber.design.SurfaceModel.generate_plates"]], "generate_stud_lines() (compas_timber.design.surfacemodel method)": [[339, "compas_timber.design.SurfaceModel.generate_stud_lines"]], "generate_studs() (compas_timber.design.surfacemodel method)": [[340, "compas_timber.design.SurfaceModel.generate_studs"]], "generate_windows() (compas_timber.design.surfacemodel method)": [[341, "compas_timber.design.SurfaceModel.generate_windows"]], "get_beam_intersections() (compas_timber.design.surfacemodel method)": [[342, "compas_timber.design.SurfaceModel.get_beam_intersections"]], "get_interior_segment_indices() (compas_timber.design.surfacemodel method)": [[343, "compas_timber.design.SurfaceModel.get_interior_segment_indices"]], "offset_elements() (compas_timber.design.surfacemodel method)": [[344, "compas_timber.design.SurfaceModel.offset_elements"]], "parse_loops() (compas_timber.design.surfacemodel method)": [[345, "compas_timber.design.SurfaceModel.parse_loops"]], "trim_jack_studs() (compas_timber.design.surfacemodel method)": [[346, "compas_timber.design.SurfaceModel.trim_jack_studs"]], "trim_king_studs() (compas_timber.design.surfacemodel method)": [[347, "compas_timber.design.SurfaceModel.trim_king_studs"]], "trim_studs() (compas_timber.design.surfacemodel method)": [[348, "compas_timber.design.SurfaceModel.trim_studs"]], "topologyrule (class in compas_timber.design)": [[349, "compas_timber.design.TopologyRule"]], "tostring() (compas_timber.design.topologyrule method)": [[350, "compas_timber.design.TopologyRule.ToString"]], "comply() (compas_timber.design.topologyrule method)": [[351, "compas_timber.design.TopologyRule.comply"]], "get_category_rules() (compas_timber.design.topologyrule static method)": [[352, "compas_timber.design.TopologyRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.topologyrule static method)": [[353, "compas_timber.design.TopologyRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.topologyrule static method)": [[354, "compas_timber.design.TopologyRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.topologyrule static method)": [[355, "compas_timber.design.TopologyRule.joints_from_beams_and_rules"]], "guess_joint_topology_2beams() (in module compas_timber.design)": [[356, "compas_timber.design.guess_joint_topology_2beams"]], "set_default_joints() (in module compas_timber.design)": [[357, "compas_timber.design.set_default_joints"]], "beam (class in compas_timber.elements)": [[358, "compas_timber.elements.Beam"]], "tostring() (compas_timber.elements.beam method)": [[359, "compas_timber.elements.Beam.ToString"]], "add_blank_extension() (compas_timber.elements.beam method)": [[360, "compas_timber.elements.Beam.add_blank_extension"]], "add_feature() (compas_timber.elements.beam method)": [[361, "compas_timber.elements.Beam.add_feature"]], "add_features() (compas_timber.elements.beam method)": [[362, "compas_timber.elements.Beam.add_features"]], "back_side() (compas_timber.elements.beam method)": [[363, "compas_timber.elements.Beam.back_side"]], "compute_aabb() (compas_timber.elements.beam method)": [[364, "compas_timber.elements.Beam.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.beam method)": [[365, "compas_timber.elements.Beam.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.beam method)": [[366, "compas_timber.elements.Beam.compute_geometry"]], "compute_obb() (compas_timber.elements.beam method)": [[367, "compas_timber.elements.Beam.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.beam method)": [[368, "compas_timber.elements.Beam.compute_worldtransformation"]], "copy() (compas_timber.elements.beam method)": [[369, "compas_timber.elements.Beam.copy"]], "endpoint_closest_to_point() (compas_timber.elements.beam method)": [[370, "compas_timber.elements.Beam.endpoint_closest_to_point"]], "extension_to_plane() (compas_timber.elements.beam method)": [[371, "compas_timber.elements.Beam.extension_to_plane"]], "from_centerline() (compas_timber.elements.beam class method)": [[372, "compas_timber.elements.Beam.from_centerline"]], "from_endpoints() (compas_timber.elements.beam class method)": [[373, "compas_timber.elements.Beam.from_endpoints"]], "from_json() (compas_timber.elements.beam class method)": [[374, "compas_timber.elements.Beam.from_json"]], "from_jsonstring() (compas_timber.elements.beam class method)": [[375, "compas_timber.elements.Beam.from_jsonstring"]], "front_side() (compas_timber.elements.beam method)": [[376, "compas_timber.elements.Beam.front_side"]], "get_dimensions_relative_to_side() (compas_timber.elements.beam method)": [[377, "compas_timber.elements.Beam.get_dimensions_relative_to_side"]], "opp_side() (compas_timber.elements.beam method)": [[378, "compas_timber.elements.Beam.opp_side"]], "remove_blank_extension() (compas_timber.elements.beam method)": [[379, "compas_timber.elements.Beam.remove_blank_extension"]], "remove_features() (compas_timber.elements.beam method)": [[380, "compas_timber.elements.Beam.remove_features"]], "reset() (compas_timber.elements.beam method)": [[381, "compas_timber.elements.Beam.reset"]], "sha256() (compas_timber.elements.beam method)": [[382, "compas_timber.elements.Beam.sha256"]], "side_as_surface() (compas_timber.elements.beam method)": [[383, "compas_timber.elements.Beam.side_as_surface"]], "to_json() (compas_timber.elements.beam method)": [[384, "compas_timber.elements.Beam.to_json"]], "to_jsonstring() (compas_timber.elements.beam method)": [[385, "compas_timber.elements.Beam.to_jsonstring"]], "transform() (compas_timber.elements.beam method)": [[386, "compas_timber.elements.Beam.transform"]], "transformed() (compas_timber.elements.beam method)": [[387, "compas_timber.elements.Beam.transformed"]], "validate_data() (compas_timber.elements.beam class method)": [[388, "compas_timber.elements.Beam.validate_data"]], "fastener (class in compas_timber.elements)": [[389, "compas_timber.elements.Fastener"]], "tostring() (compas_timber.elements.fastener method)": [[390, "compas_timber.elements.Fastener.ToString"]], "add_feature() (compas_timber.elements.fastener method)": [[391, "compas_timber.elements.Fastener.add_feature"]], "compute_aabb() (compas_timber.elements.fastener method)": [[392, "compas_timber.elements.Fastener.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.fastener method)": [[393, "compas_timber.elements.Fastener.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.fastener method)": [[394, "compas_timber.elements.Fastener.compute_geometry"]], "compute_obb() (compas_timber.elements.fastener method)": [[395, "compas_timber.elements.Fastener.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.fastener method)": [[396, "compas_timber.elements.Fastener.compute_worldtransformation"]], "copy() (compas_timber.elements.fastener method)": [[397, "compas_timber.elements.Fastener.copy"]], "from_json() (compas_timber.elements.fastener class method)": [[398, "compas_timber.elements.Fastener.from_json"]], "from_jsonstring() (compas_timber.elements.fastener class method)": [[399, "compas_timber.elements.Fastener.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.fastener method)": [[400, "compas_timber.elements.Fastener.remove_blank_extension"]], "remove_features() (compas_timber.elements.fastener method)": [[401, "compas_timber.elements.Fastener.remove_features"]], "reset() (compas_timber.elements.fastener method)": [[402, "compas_timber.elements.Fastener.reset"]], "sha256() (compas_timber.elements.fastener method)": [[403, "compas_timber.elements.Fastener.sha256"]], "to_json() (compas_timber.elements.fastener method)": [[404, "compas_timber.elements.Fastener.to_json"]], "to_jsonstring() (compas_timber.elements.fastener method)": [[405, "compas_timber.elements.Fastener.to_jsonstring"]], "transform() (compas_timber.elements.fastener method)": [[406, "compas_timber.elements.Fastener.transform"]], "transformed() (compas_timber.elements.fastener method)": [[407, "compas_timber.elements.Fastener.transformed"]], "validate_data() (compas_timber.elements.fastener class method)": [[408, "compas_timber.elements.Fastener.validate_data"]], "fastenertimberinterface (class in compas_timber.elements)": [[409, "compas_timber.elements.FastenerTimberInterface"]], "tostring() (compas_timber.elements.fastenertimberinterface method)": [[410, "compas_timber.elements.FastenerTimberInterface.ToString"]], "copy() (compas_timber.elements.fastenertimberinterface method)": [[411, "compas_timber.elements.FastenerTimberInterface.copy"]], "from_json() (compas_timber.elements.fastenertimberinterface class method)": [[412, "compas_timber.elements.FastenerTimberInterface.from_json"]], "from_jsonstring() (compas_timber.elements.fastenertimberinterface class method)": [[413, "compas_timber.elements.FastenerTimberInterface.from_jsonstring"]], "get_features() (compas_timber.elements.fastenertimberinterface method)": [[414, "compas_timber.elements.FastenerTimberInterface.get_features"]], "sha256() (compas_timber.elements.fastenertimberinterface method)": [[415, "compas_timber.elements.FastenerTimberInterface.sha256"]], "to_json() (compas_timber.elements.fastenertimberinterface method)": [[416, "compas_timber.elements.FastenerTimberInterface.to_json"]], "to_jsonstring() (compas_timber.elements.fastenertimberinterface method)": [[417, "compas_timber.elements.FastenerTimberInterface.to_jsonstring"]], "validate_data() (compas_timber.elements.fastenertimberinterface class method)": [[418, "compas_timber.elements.FastenerTimberInterface.validate_data"]], "plate (class in compas_timber.elements)": [[419, "compas_timber.elements.Plate"]], "tostring() (compas_timber.elements.plate method)": [[420, "compas_timber.elements.Plate.ToString"]], "add_feature() (compas_timber.elements.plate method)": [[421, "compas_timber.elements.Plate.add_feature"]], "add_features() (compas_timber.elements.plate method)": [[422, "compas_timber.elements.Plate.add_features"]], "compute_aabb() (compas_timber.elements.plate method)": [[423, "compas_timber.elements.Plate.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.plate method)": [[424, "compas_timber.elements.Plate.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.plate method)": [[425, "compas_timber.elements.Plate.compute_geometry"]], "compute_obb() (compas_timber.elements.plate method)": [[426, "compas_timber.elements.Plate.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.plate method)": [[427, "compas_timber.elements.Plate.compute_worldtransformation"]], "copy() (compas_timber.elements.plate method)": [[428, "compas_timber.elements.Plate.copy"]], "from_json() (compas_timber.elements.plate class method)": [[429, "compas_timber.elements.Plate.from_json"]], "from_jsonstring() (compas_timber.elements.plate class method)": [[430, "compas_timber.elements.Plate.from_jsonstring"]], "from_outline_thickness() (compas_timber.elements.plate class method)": [[431, "compas_timber.elements.Plate.from_outline_thickness"]], "remove_blank_extension() (compas_timber.elements.plate method)": [[432, "compas_timber.elements.Plate.remove_blank_extension"]], "remove_features() (compas_timber.elements.plate method)": [[433, "compas_timber.elements.Plate.remove_features"]], "reset() (compas_timber.elements.plate method)": [[434, "compas_timber.elements.Plate.reset"]], "sha256() (compas_timber.elements.plate method)": [[435, "compas_timber.elements.Plate.sha256"]], "shape() (compas_timber.elements.plate method)": [[436, "compas_timber.elements.Plate.shape"]], "side_as_surface() (compas_timber.elements.plate method)": [[437, "compas_timber.elements.Plate.side_as_surface"]], "to_json() (compas_timber.elements.plate method)": [[438, "compas_timber.elements.Plate.to_json"]], "to_jsonstring() (compas_timber.elements.plate method)": [[439, "compas_timber.elements.Plate.to_jsonstring"]], "transform() (compas_timber.elements.plate method)": [[440, "compas_timber.elements.Plate.transform"]], "transformed() (compas_timber.elements.plate method)": [[441, "compas_timber.elements.Plate.transformed"]], "validate_data() (compas_timber.elements.plate class method)": [[442, "compas_timber.elements.Plate.validate_data"]], "timberelement (class in compas_timber.elements)": [[443, "compas_timber.elements.TimberElement"]], "tostring() (compas_timber.elements.timberelement method)": [[444, "compas_timber.elements.TimberElement.ToString"]], "add_feature() (compas_timber.elements.timberelement method)": [[445, "compas_timber.elements.TimberElement.add_feature"]], "compute_aabb() (compas_timber.elements.timberelement method)": [[446, "compas_timber.elements.TimberElement.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.timberelement method)": [[447, "compas_timber.elements.TimberElement.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.timberelement method)": [[448, "compas_timber.elements.TimberElement.compute_geometry"]], "compute_obb() (compas_timber.elements.timberelement method)": [[449, "compas_timber.elements.TimberElement.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.timberelement method)": [[450, "compas_timber.elements.TimberElement.compute_worldtransformation"]], "copy() (compas_timber.elements.timberelement method)": [[451, "compas_timber.elements.TimberElement.copy"]], "from_json() (compas_timber.elements.timberelement class method)": [[452, "compas_timber.elements.TimberElement.from_json"]], "from_jsonstring() (compas_timber.elements.timberelement class method)": [[453, "compas_timber.elements.TimberElement.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.timberelement method)": [[454, "compas_timber.elements.TimberElement.remove_blank_extension"]], "remove_features() (compas_timber.elements.timberelement method)": [[455, "compas_timber.elements.TimberElement.remove_features"]], "reset() (compas_timber.elements.timberelement method)": [[456, "compas_timber.elements.TimberElement.reset"]], "sha256() (compas_timber.elements.timberelement method)": [[457, "compas_timber.elements.TimberElement.sha256"]], "to_json() (compas_timber.elements.timberelement method)": [[458, "compas_timber.elements.TimberElement.to_json"]], "to_jsonstring() (compas_timber.elements.timberelement method)": [[459, "compas_timber.elements.TimberElement.to_jsonstring"]], "transform() (compas_timber.elements.timberelement method)": [[460, "compas_timber.elements.TimberElement.transform"]], "transformed() (compas_timber.elements.timberelement method)": [[461, "compas_timber.elements.TimberElement.transformed"]], "validate_data() (compas_timber.elements.timberelement class method)": [[462, "compas_timber.elements.TimberElement.validate_data"]], "wall (class in compas_timber.elements)": [[463, "compas_timber.elements.Wall"]], "tostring() (compas_timber.elements.wall method)": [[464, "compas_timber.elements.Wall.ToString"]], "add_feature() (compas_timber.elements.wall method)": [[465, "compas_timber.elements.Wall.add_feature"]], "compute_aabb() (compas_timber.elements.wall method)": [[466, "compas_timber.elements.Wall.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.wall method)": [[467, "compas_timber.elements.Wall.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.wall method)": [[468, "compas_timber.elements.Wall.compute_geometry"]], "compute_obb() (compas_timber.elements.wall method)": [[469, "compas_timber.elements.Wall.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.wall method)": [[470, "compas_timber.elements.Wall.compute_worldtransformation"]], "copy() (compas_timber.elements.wall method)": [[471, "compas_timber.elements.Wall.copy"]], "from_boundary() (compas_timber.elements.wall class method)": [[472, "compas_timber.elements.Wall.from_boundary"]], "from_brep() (compas_timber.elements.wall class method)": [[473, "compas_timber.elements.Wall.from_brep"]], "from_json() (compas_timber.elements.wall class method)": [[474, "compas_timber.elements.Wall.from_json"]], "from_jsonstring() (compas_timber.elements.wall class method)": [[475, "compas_timber.elements.Wall.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.wall method)": [[476, "compas_timber.elements.Wall.remove_blank_extension"]], "remove_features() (compas_timber.elements.wall method)": [[477, "compas_timber.elements.Wall.remove_features"]], "reset() (compas_timber.elements.wall method)": [[478, "compas_timber.elements.Wall.reset"]], "rotate() (compas_timber.elements.wall method)": [[479, "compas_timber.elements.Wall.rotate"]], "sha256() (compas_timber.elements.wall method)": [[480, "compas_timber.elements.Wall.sha256"]], "to_json() (compas_timber.elements.wall method)": [[481, "compas_timber.elements.Wall.to_json"]], "to_jsonstring() (compas_timber.elements.wall method)": [[482, "compas_timber.elements.Wall.to_jsonstring"]], "transform() (compas_timber.elements.wall method)": [[483, "compas_timber.elements.Wall.transform"]], "transformed() (compas_timber.elements.wall method)": [[484, "compas_timber.elements.Wall.transformed"]], "validate_data() (compas_timber.elements.wall class method)": [[485, "compas_timber.elements.Wall.validate_data"]], "beamjoiningerror": [[486, "compas_timber.errors.BeamJoiningError"]], "fastenerapplicationerror": [[487, "compas_timber.errors.FastenerApplicationError"]], "featureapplicationerror": [[488, "compas_timber.errors.FeatureApplicationError"]], "btlxpart (class in compas_timber.fabrication)": [[489, "compas_timber.fabrication.BTLxPart"]], "et_point_vals() (compas_timber.fabrication.btlxpart method)": [[490, "compas_timber.fabrication.BTLxPart.et_point_vals"]], "ref_side_from_face() (compas_timber.fabrication.btlxpart method)": [[491, "compas_timber.fabrication.BTLxPart.ref_side_from_face"]], "btlxprocessing (class in compas_timber.fabrication)": [[492, "compas_timber.fabrication.BTLxProcessing"]], "tostring() (compas_timber.fabrication.btlxprocessing method)": [[493, "compas_timber.fabrication.BTLxProcessing.ToString"]], "add_subprocessing() (compas_timber.fabrication.btlxprocessing method)": [[494, "compas_timber.fabrication.BTLxProcessing.add_subprocessing"]], "copy() (compas_timber.fabrication.btlxprocessing method)": [[495, "compas_timber.fabrication.BTLxProcessing.copy"]], "from_json() (compas_timber.fabrication.btlxprocessing class method)": [[496, "compas_timber.fabrication.BTLxProcessing.from_json"]], "from_jsonstring() (compas_timber.fabrication.btlxprocessing class method)": [[497, "compas_timber.fabrication.BTLxProcessing.from_jsonstring"]], "sha256() (compas_timber.fabrication.btlxprocessing method)": [[498, "compas_timber.fabrication.BTLxProcessing.sha256"]], "to_json() (compas_timber.fabrication.btlxprocessing method)": [[499, "compas_timber.fabrication.BTLxProcessing.to_json"]], "to_jsonstring() (compas_timber.fabrication.btlxprocessing method)": [[500, "compas_timber.fabrication.BTLxProcessing.to_jsonstring"]], "validate_data() (compas_timber.fabrication.btlxprocessing class method)": [[501, "compas_timber.fabrication.BTLxProcessing.validate_data"]], "btlxwriter (class in compas_timber.fabrication)": [[502, "compas_timber.fabrication.BTLxWriter"]], "model_to_xml() (compas_timber.fabrication.btlxwriter method)": [[503, "compas_timber.fabrication.BTLxWriter.model_to_xml"]], "register_type_serializer() (compas_timber.fabrication.btlxwriter class method)": [[504, "compas_timber.fabrication.BTLxWriter.register_type_serializer"]], "write() (compas_timber.fabrication.btlxwriter method)": [[505, "compas_timber.fabrication.BTLxWriter.write"]], "doublecut (class in compas_timber.fabrication)": [[506, "compas_timber.fabrication.DoubleCut"]], "tostring() (compas_timber.fabrication.doublecut method)": [[507, "compas_timber.fabrication.DoubleCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.doublecut method)": [[508, "compas_timber.fabrication.DoubleCut.add_subprocessing"]], "apply() (compas_timber.fabrication.doublecut method)": [[509, "compas_timber.fabrication.DoubleCut.apply"]], "copy() (compas_timber.fabrication.doublecut method)": [[510, "compas_timber.fabrication.DoubleCut.copy"]], "from_json() (compas_timber.fabrication.doublecut class method)": [[511, "compas_timber.fabrication.DoubleCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.doublecut class method)": [[512, "compas_timber.fabrication.DoubleCut.from_jsonstring"]], "from_planes_and_beam() (compas_timber.fabrication.doublecut class method)": [[513, "compas_timber.fabrication.DoubleCut.from_planes_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.doublecut class method)": [[514, "compas_timber.fabrication.DoubleCut.from_shapes_and_element"]], "planes_from_params_and_beam() (compas_timber.fabrication.doublecut method)": [[515, "compas_timber.fabrication.DoubleCut.planes_from_params_and_beam"]], "sha256() (compas_timber.fabrication.doublecut method)": [[516, "compas_timber.fabrication.DoubleCut.sha256"]], "to_json() (compas_timber.fabrication.doublecut method)": [[517, "compas_timber.fabrication.DoubleCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.doublecut method)": [[518, "compas_timber.fabrication.DoubleCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.doublecut class method)": [[519, "compas_timber.fabrication.DoubleCut.validate_data"]], "dovetailmortise (class in compas_timber.fabrication)": [[520, "compas_timber.fabrication.DovetailMortise"]], "tostring() (compas_timber.fabrication.dovetailmortise method)": [[521, "compas_timber.fabrication.DovetailMortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailmortise method)": [[522, "compas_timber.fabrication.DovetailMortise.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailmortise method)": [[523, "compas_timber.fabrication.DovetailMortise.apply"]], "copy() (compas_timber.fabrication.dovetailmortise method)": [[524, "compas_timber.fabrication.DovetailMortise.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailmortise class method)": [[525, "compas_timber.fabrication.DovetailMortise.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[526, "compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[527, "compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[528, "compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.dovetailmortise class method)": [[529, "compas_timber.fabrication.DovetailMortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.dovetailmortise class method)": [[530, "compas_timber.fabrication.DovetailMortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailmortise class method)": [[531, "compas_timber.fabrication.DovetailMortise.from_jsonstring"]], "sha256() (compas_timber.fabrication.dovetailmortise method)": [[532, "compas_timber.fabrication.DovetailMortise.sha256"]], "to_json() (compas_timber.fabrication.dovetailmortise method)": [[533, "compas_timber.fabrication.DovetailMortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailmortise method)": [[534, "compas_timber.fabrication.DovetailMortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailmortise class method)": [[535, "compas_timber.fabrication.DovetailMortise.validate_data"]], "dovetailtenon (class in compas_timber.fabrication)": [[536, "compas_timber.fabrication.DovetailTenon"]], "tostring() (compas_timber.fabrication.dovetailtenon method)": [[537, "compas_timber.fabrication.DovetailTenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailtenon method)": [[538, "compas_timber.fabrication.DovetailTenon.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailtenon method)": [[539, "compas_timber.fabrication.DovetailTenon.apply"]], "copy() (compas_timber.fabrication.dovetailtenon method)": [[540, "compas_timber.fabrication.DovetailTenon.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailtenon class method)": [[541, "compas_timber.fabrication.DovetailTenon.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[542, "compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[543, "compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[544, "compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.dovetailtenon class method)": [[545, "compas_timber.fabrication.DovetailTenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailtenon class method)": [[546, "compas_timber.fabrication.DovetailTenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.dovetailtenon class method)": [[547, "compas_timber.fabrication.DovetailTenon.from_plane_and_beam"]], "sha256() (compas_timber.fabrication.dovetailtenon method)": [[548, "compas_timber.fabrication.DovetailTenon.sha256"]], "to_json() (compas_timber.fabrication.dovetailtenon method)": [[549, "compas_timber.fabrication.DovetailTenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailtenon method)": [[550, "compas_timber.fabrication.DovetailTenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailtenon class method)": [[551, "compas_timber.fabrication.DovetailTenon.validate_data"]], "drilling (class in compas_timber.fabrication)": [[552, "compas_timber.fabrication.Drilling"]], "tostring() (compas_timber.fabrication.drilling method)": [[553, "compas_timber.fabrication.Drilling.ToString"]], "add_subprocessing() (compas_timber.fabrication.drilling method)": [[554, "compas_timber.fabrication.Drilling.add_subprocessing"]], "apply() (compas_timber.fabrication.drilling method)": [[555, "compas_timber.fabrication.Drilling.apply"]], "copy() (compas_timber.fabrication.drilling method)": [[556, "compas_timber.fabrication.Drilling.copy"]], "cylinder_from_params_and_element() (compas_timber.fabrication.drilling method)": [[557, "compas_timber.fabrication.Drilling.cylinder_from_params_and_element"]], "from_json() (compas_timber.fabrication.drilling class method)": [[558, "compas_timber.fabrication.Drilling.from_json"]], "from_jsonstring() (compas_timber.fabrication.drilling class method)": [[559, "compas_timber.fabrication.Drilling.from_jsonstring"]], "from_line_and_element() (compas_timber.fabrication.drilling class method)": [[560, "compas_timber.fabrication.Drilling.from_line_and_element"]], "from_shapes_and_element() (compas_timber.fabrication.drilling class method)": [[561, "compas_timber.fabrication.Drilling.from_shapes_and_element"]], "sha256() (compas_timber.fabrication.drilling method)": [[562, "compas_timber.fabrication.Drilling.sha256"]], "to_json() (compas_timber.fabrication.drilling method)": [[563, "compas_timber.fabrication.Drilling.to_json"]], "to_jsonstring() (compas_timber.fabrication.drilling method)": [[564, "compas_timber.fabrication.Drilling.to_jsonstring"]], "validate_data() (compas_timber.fabrication.drilling class method)": [[565, "compas_timber.fabrication.Drilling.validate_data"]], "edgepositiontype (class in compas_timber.fabrication)": [[566, "compas_timber.fabrication.EdgePositionType"]], "frenchridgelap (class in compas_timber.fabrication)": [[567, "compas_timber.fabrication.FrenchRidgeLap"]], "tostring() (compas_timber.fabrication.frenchridgelap method)": [[568, "compas_timber.fabrication.FrenchRidgeLap.ToString"]], "add_subprocessing() (compas_timber.fabrication.frenchridgelap method)": [[569, "compas_timber.fabrication.FrenchRidgeLap.add_subprocessing"]], "apply() (compas_timber.fabrication.frenchridgelap method)": [[570, "compas_timber.fabrication.FrenchRidgeLap.apply"]], "copy() (compas_timber.fabrication.frenchridgelap method)": [[571, "compas_timber.fabrication.FrenchRidgeLap.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[572, "compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam"]], "from_beam_beam_and_plane() (compas_timber.fabrication.frenchridgelap class method)": [[573, "compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane"]], "from_json() (compas_timber.fabrication.frenchridgelap class method)": [[574, "compas_timber.fabrication.FrenchRidgeLap.from_json"]], "from_jsonstring() (compas_timber.fabrication.frenchridgelap class method)": [[575, "compas_timber.fabrication.FrenchRidgeLap.from_jsonstring"]], "lap_volume_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[576, "compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam"]], "sha256() (compas_timber.fabrication.frenchridgelap method)": [[577, "compas_timber.fabrication.FrenchRidgeLap.sha256"]], "to_json() (compas_timber.fabrication.frenchridgelap method)": [[578, "compas_timber.fabrication.FrenchRidgeLap.to_json"]], "to_jsonstring() (compas_timber.fabrication.frenchridgelap method)": [[579, "compas_timber.fabrication.FrenchRidgeLap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.frenchridgelap class method)": [[580, "compas_timber.fabrication.FrenchRidgeLap.validate_data"]], "jackraftercut (class in compas_timber.fabrication)": [[581, "compas_timber.fabrication.JackRafterCut"]], "tostring() (compas_timber.fabrication.jackraftercut method)": [[582, "compas_timber.fabrication.JackRafterCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.jackraftercut method)": [[583, "compas_timber.fabrication.JackRafterCut.add_subprocessing"]], "apply() (compas_timber.fabrication.jackraftercut method)": [[584, "compas_timber.fabrication.JackRafterCut.apply"]], "copy() (compas_timber.fabrication.jackraftercut method)": [[585, "compas_timber.fabrication.JackRafterCut.copy"]], "from_json() (compas_timber.fabrication.jackraftercut class method)": [[586, "compas_timber.fabrication.JackRafterCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.jackraftercut class method)": [[587, "compas_timber.fabrication.JackRafterCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.jackraftercut class method)": [[588, "compas_timber.fabrication.JackRafterCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.jackraftercut class method)": [[589, "compas_timber.fabrication.JackRafterCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.jackraftercut method)": [[590, "compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam"]], "sha256() (compas_timber.fabrication.jackraftercut method)": [[591, "compas_timber.fabrication.JackRafterCut.sha256"]], "to_json() (compas_timber.fabrication.jackraftercut method)": [[592, "compas_timber.fabrication.JackRafterCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.jackraftercut method)": [[593, "compas_timber.fabrication.JackRafterCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.jackraftercut class method)": [[594, "compas_timber.fabrication.JackRafterCut.validate_data"]], "lap (class in compas_timber.fabrication)": [[595, "compas_timber.fabrication.Lap"]], "tostring() (compas_timber.fabrication.lap method)": [[596, "compas_timber.fabrication.Lap.ToString"]], "add_subprocessing() (compas_timber.fabrication.lap method)": [[597, "compas_timber.fabrication.Lap.add_subprocessing"]], "apply() (compas_timber.fabrication.lap method)": [[598, "compas_timber.fabrication.Lap.apply"]], "copy() (compas_timber.fabrication.lap method)": [[599, "compas_timber.fabrication.Lap.copy"]], "from_json() (compas_timber.fabrication.lap class method)": [[600, "compas_timber.fabrication.Lap.from_json"]], "from_jsonstring() (compas_timber.fabrication.lap class method)": [[601, "compas_timber.fabrication.Lap.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.lap class method)": [[602, "compas_timber.fabrication.Lap.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.lap class method)": [[603, "compas_timber.fabrication.Lap.from_shapes_and_element"]], "from_volume_and_beam() (compas_timber.fabrication.lap class method)": [[604, "compas_timber.fabrication.Lap.from_volume_and_beam"]], "sha256() (compas_timber.fabrication.lap method)": [[605, "compas_timber.fabrication.Lap.sha256"]], "to_json() (compas_timber.fabrication.lap method)": [[606, "compas_timber.fabrication.Lap.to_json"]], "to_jsonstring() (compas_timber.fabrication.lap method)": [[607, "compas_timber.fabrication.Lap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.lap class method)": [[608, "compas_timber.fabrication.Lap.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.lap method)": [[609, "compas_timber.fabrication.Lap.volume_from_params_and_beam"]], "limitationtoptype (class in compas_timber.fabrication)": [[610, "compas_timber.fabrication.LimitationTopType"]], "machininglimits (class in compas_timber.fabrication)": [[611, "compas_timber.fabrication.MachiningLimits"]], "mortise (class in compas_timber.fabrication)": [[612, "compas_timber.fabrication.Mortise"]], "tostring() (compas_timber.fabrication.mortise method)": [[613, "compas_timber.fabrication.Mortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.mortise method)": [[614, "compas_timber.fabrication.Mortise.add_subprocessing"]], "apply() (compas_timber.fabrication.mortise method)": [[615, "compas_timber.fabrication.Mortise.apply"]], "copy() (compas_timber.fabrication.mortise method)": [[616, "compas_timber.fabrication.Mortise.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[617, "compas_timber.fabrication.Mortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.mortise class method)": [[618, "compas_timber.fabrication.Mortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.mortise class method)": [[619, "compas_timber.fabrication.Mortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.mortise class method)": [[620, "compas_timber.fabrication.Mortise.from_jsonstring"]], "sha256() (compas_timber.fabrication.mortise method)": [[621, "compas_timber.fabrication.Mortise.sha256"]], "to_json() (compas_timber.fabrication.mortise method)": [[622, "compas_timber.fabrication.Mortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.mortise method)": [[623, "compas_timber.fabrication.Mortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.mortise class method)": [[624, "compas_timber.fabrication.Mortise.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[625, "compas_timber.fabrication.Mortise.volume_from_params_and_beam"]], "orientationtype (class in compas_timber.fabrication)": [[626, "compas_timber.fabrication.OrientationType"]], "pocket (class in compas_timber.fabrication)": [[627, "compas_timber.fabrication.Pocket"]], "tostring() (compas_timber.fabrication.pocket method)": [[628, "compas_timber.fabrication.Pocket.ToString"]], "add_subprocessing() (compas_timber.fabrication.pocket method)": [[629, "compas_timber.fabrication.Pocket.add_subprocessing"]], "apply() (compas_timber.fabrication.pocket method)": [[630, "compas_timber.fabrication.Pocket.apply"]], "copy() (compas_timber.fabrication.pocket method)": [[631, "compas_timber.fabrication.Pocket.copy"]], "from_json() (compas_timber.fabrication.pocket class method)": [[632, "compas_timber.fabrication.Pocket.from_json"]], "from_jsonstring() (compas_timber.fabrication.pocket class method)": [[633, "compas_timber.fabrication.Pocket.from_jsonstring"]], "from_shapes_and_element() (compas_timber.fabrication.pocket class method)": [[634, "compas_timber.fabrication.Pocket.from_shapes_and_element"]], "from_volume_and_element() (compas_timber.fabrication.pocket class method)": [[635, "compas_timber.fabrication.Pocket.from_volume_and_element"]], "sha256() (compas_timber.fabrication.pocket method)": [[636, "compas_timber.fabrication.Pocket.sha256"]], "to_json() (compas_timber.fabrication.pocket method)": [[637, "compas_timber.fabrication.Pocket.to_json"]], "to_jsonstring() (compas_timber.fabrication.pocket method)": [[638, "compas_timber.fabrication.Pocket.to_jsonstring"]], "validate_data() (compas_timber.fabrication.pocket class method)": [[639, "compas_timber.fabrication.Pocket.validate_data"]], "volume_from_params_and_element() (compas_timber.fabrication.pocket method)": [[640, "compas_timber.fabrication.Pocket.volume_from_params_and_element"]], "slot (class in compas_timber.fabrication)": [[641, "compas_timber.fabrication.Slot"]], "tostring() (compas_timber.fabrication.slot method)": [[642, "compas_timber.fabrication.Slot.ToString"]], "add_subprocessing() (compas_timber.fabrication.slot method)": [[643, "compas_timber.fabrication.Slot.add_subprocessing"]], "apply() (compas_timber.fabrication.slot method)": [[644, "compas_timber.fabrication.Slot.apply"]], "copy() (compas_timber.fabrication.slot method)": [[645, "compas_timber.fabrication.Slot.copy"]], "from_json() (compas_timber.fabrication.slot class method)": [[646, "compas_timber.fabrication.Slot.from_json"]], "from_jsonstring() (compas_timber.fabrication.slot class method)": [[647, "compas_timber.fabrication.Slot.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.slot class method)": [[648, "compas_timber.fabrication.Slot.from_plane_and_beam"]], "sha256() (compas_timber.fabrication.slot method)": [[649, "compas_timber.fabrication.Slot.sha256"]], "to_json() (compas_timber.fabrication.slot method)": [[650, "compas_timber.fabrication.Slot.to_json"]], "to_jsonstring() (compas_timber.fabrication.slot method)": [[651, "compas_timber.fabrication.Slot.to_jsonstring"]], "validate_data() (compas_timber.fabrication.slot class method)": [[652, "compas_timber.fabrication.Slot.validate_data"]], "stepjoint (class in compas_timber.fabrication)": [[653, "compas_timber.fabrication.StepJoint"]], "tostring() (compas_timber.fabrication.stepjoint method)": [[654, "compas_timber.fabrication.StepJoint.ToString"]], "add_subprocessing() (compas_timber.fabrication.stepjoint method)": [[655, "compas_timber.fabrication.StepJoint.add_subprocessing"]], "add_tenon() (compas_timber.fabrication.stepjoint method)": [[656, "compas_timber.fabrication.StepJoint.add_tenon"]], "apply() (compas_timber.fabrication.stepjoint method)": [[657, "compas_timber.fabrication.StepJoint.apply"]], "copy() (compas_timber.fabrication.stepjoint method)": [[658, "compas_timber.fabrication.StepJoint.copy"]], "from_json() (compas_timber.fabrication.stepjoint class method)": [[659, "compas_timber.fabrication.StepJoint.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjoint class method)": [[660, "compas_timber.fabrication.StepJoint.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjoint class method)": [[661, "compas_timber.fabrication.StepJoint.from_plane_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[662, "compas_timber.fabrication.StepJoint.planes_from_params_and_beam"]], "sha256() (compas_timber.fabrication.stepjoint method)": [[663, "compas_timber.fabrication.StepJoint.sha256"]], "tenon_volume_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[664, "compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam"]], "to_json() (compas_timber.fabrication.stepjoint method)": [[665, "compas_timber.fabrication.StepJoint.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjoint method)": [[666, "compas_timber.fabrication.StepJoint.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjoint class method)": [[667, "compas_timber.fabrication.StepJoint.validate_data"]], "stepjointnotch (class in compas_timber.fabrication)": [[668, "compas_timber.fabrication.StepJointNotch"]], "tostring() (compas_timber.fabrication.stepjointnotch method)": [[669, "compas_timber.fabrication.StepJointNotch.ToString"]], "add_mortise() (compas_timber.fabrication.stepjointnotch method)": [[670, "compas_timber.fabrication.StepJointNotch.add_mortise"]], "add_subprocessing() (compas_timber.fabrication.stepjointnotch method)": [[671, "compas_timber.fabrication.StepJointNotch.add_subprocessing"]], "apply() (compas_timber.fabrication.stepjointnotch method)": [[672, "compas_timber.fabrication.StepJointNotch.apply"]], "copy() (compas_timber.fabrication.stepjointnotch method)": [[673, "compas_timber.fabrication.StepJointNotch.copy"]], "from_json() (compas_timber.fabrication.stepjointnotch class method)": [[674, "compas_timber.fabrication.StepJointNotch.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjointnotch class method)": [[675, "compas_timber.fabrication.StepJointNotch.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjointnotch class method)": [[676, "compas_timber.fabrication.StepJointNotch.from_plane_and_beam"]], "mortise_volume_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[677, "compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[678, "compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam"]], "sha256() (compas_timber.fabrication.stepjointnotch method)": [[679, "compas_timber.fabrication.StepJointNotch.sha256"]], "to_json() (compas_timber.fabrication.stepjointnotch method)": [[680, "compas_timber.fabrication.StepJointNotch.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjointnotch method)": [[681, "compas_timber.fabrication.StepJointNotch.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjointnotch class method)": [[682, "compas_timber.fabrication.StepJointNotch.validate_data"]], "stepshapetype (class in compas_timber.fabrication)": [[683, "compas_timber.fabrication.StepShapeType"]], "tenon (class in compas_timber.fabrication)": [[684, "compas_timber.fabrication.Tenon"]], "tostring() (compas_timber.fabrication.tenon method)": [[685, "compas_timber.fabrication.Tenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.tenon method)": [[686, "compas_timber.fabrication.Tenon.add_subprocessing"]], "apply() (compas_timber.fabrication.tenon method)": [[687, "compas_timber.fabrication.Tenon.apply"]], "copy() (compas_timber.fabrication.tenon method)": [[688, "compas_timber.fabrication.Tenon.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[689, "compas_timber.fabrication.Tenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.tenon class method)": [[690, "compas_timber.fabrication.Tenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.tenon class method)": [[691, "compas_timber.fabrication.Tenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.tenon class method)": [[692, "compas_timber.fabrication.Tenon.from_plane_and_beam"]], "sha256() (compas_timber.fabrication.tenon method)": [[693, "compas_timber.fabrication.Tenon.sha256"]], "to_json() (compas_timber.fabrication.tenon method)": [[694, "compas_timber.fabrication.Tenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.tenon method)": [[695, "compas_timber.fabrication.Tenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.tenon class method)": [[696, "compas_timber.fabrication.Tenon.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[697, "compas_timber.fabrication.Tenon.volume_from_params_and_beam"]], "tenonshapetype (class in compas_timber.fabrication)": [[698, "compas_timber.fabrication.TenonShapeType"]], "add_gh_param() (in module compas_timber.ghpython)": [[699, "compas_timber.ghpython.add_gh_param"]], "clear_gh_params() (in module compas_timber.ghpython)": [[700, "compas_timber.ghpython.clear_gh_params"]], "get_leaf_subclasses() (in module compas_timber.ghpython)": [[701, "compas_timber.ghpython.get_leaf_subclasses"]], "item_input_valid() (in module compas_timber.ghpython)": [[702, "compas_timber.ghpython.item_input_valid"]], "list_input_valid() (in module compas_timber.ghpython)": [[703, "compas_timber.ghpython.list_input_valid"]], "manage_dynamic_params() (in module compas_timber.ghpython)": [[704, "compas_timber.ghpython.manage_dynamic_params"]], "rename_gh_input() (in module compas_timber.ghpython)": [[705, "compas_timber.ghpython.rename_gh_input"]], "timbermodel (class in compas_timber.model)": [[706, "compas_timber.model.TimberModel"]], "tostring() (compas_timber.model.timbermodel method)": [[707, "compas_timber.model.TimberModel.ToString"]], "add_element() (compas_timber.model.timbermodel method)": [[708, "compas_timber.model.TimberModel.add_element"]], "add_elements() (compas_timber.model.timbermodel method)": [[709, "compas_timber.model.TimberModel.add_elements"]], "add_group() (compas_timber.model.timbermodel method)": [[710, "compas_timber.model.TimberModel.add_group"]], "add_group_element() (compas_timber.model.timbermodel method)": [[711, "compas_timber.model.TimberModel.add_group_element"]], "add_interaction() (compas_timber.model.timbermodel method)": [[712, "compas_timber.model.TimberModel.add_interaction"]], "add_joint() (compas_timber.model.timbermodel method)": [[713, "compas_timber.model.TimberModel.add_joint"]], "add_material() (compas_timber.model.timbermodel method)": [[714, "compas_timber.model.TimberModel.add_material"]], "assign_material() (compas_timber.model.timbermodel method)": [[715, "compas_timber.model.TimberModel.assign_material"]], "compute_aabb() (compas_timber.model.timbermodel method)": [[716, "compas_timber.model.TimberModel.compute_aabb"]], "compute_obb() (compas_timber.model.timbermodel method)": [[717, "compas_timber.model.TimberModel.compute_obb"]], "connect_adjacent_walls() (compas_timber.model.timbermodel method)": [[718, "compas_timber.model.TimberModel.connect_adjacent_walls"]], "copy() (compas_timber.model.timbermodel method)": [[719, "compas_timber.model.TimberModel.copy"]], "element_by_guid() (compas_timber.model.timbermodel method)": [[720, "compas_timber.model.TimberModel.element_by_guid"]], "elements() (compas_timber.model.timbermodel method)": [[721, "compas_timber.model.TimberModel.elements"]], "elements_connected_by() (compas_timber.model.timbermodel method)": [[722, "compas_timber.model.TimberModel.elements_connected_by"]], "from_json() (compas_timber.model.timbermodel class method)": [[723, "compas_timber.model.TimberModel.from_json"]], "from_jsonstring() (compas_timber.model.timbermodel class method)": [[724, "compas_timber.model.TimberModel.from_jsonstring"]], "get_elements_in_group() (compas_timber.model.timbermodel method)": [[725, "compas_timber.model.TimberModel.get_elements_in_group"]], "get_interactions_for_element() (compas_timber.model.timbermodel method)": [[726, "compas_timber.model.TimberModel.get_interactions_for_element"]], "has_element() (compas_timber.model.timbermodel method)": [[727, "compas_timber.model.TimberModel.has_element"]], "has_group() (compas_timber.model.timbermodel method)": [[728, "compas_timber.model.TimberModel.has_group"]], "has_interaction() (compas_timber.model.timbermodel method)": [[729, "compas_timber.model.TimberModel.has_interaction"]], "has_material() (compas_timber.model.timbermodel method)": [[730, "compas_timber.model.TimberModel.has_material"]], "interactions() (compas_timber.model.timbermodel method)": [[731, "compas_timber.model.TimberModel.interactions"]], "materials() (compas_timber.model.timbermodel method)": [[732, "compas_timber.model.TimberModel.materials"]], "process_joinery() (compas_timber.model.timbermodel method)": [[733, "compas_timber.model.TimberModel.process_joinery"]], "remove_element() (compas_timber.model.timbermodel method)": [[734, "compas_timber.model.TimberModel.remove_element"]], "remove_interaction() (compas_timber.model.timbermodel method)": [[735, "compas_timber.model.TimberModel.remove_interaction"]], "remove_joint() (compas_timber.model.timbermodel method)": [[736, "compas_timber.model.TimberModel.remove_joint"]], "rotate() (compas_timber.model.timbermodel method)": [[737, "compas_timber.model.TimberModel.rotate"]], "rotated() (compas_timber.model.timbermodel method)": [[738, "compas_timber.model.TimberModel.rotated"]], "scale() (compas_timber.model.timbermodel method)": [[739, "compas_timber.model.TimberModel.scale"]], "scaled() (compas_timber.model.timbermodel method)": [[740, "compas_timber.model.TimberModel.scaled"]], "set_topologies() (compas_timber.model.timbermodel method)": [[741, "compas_timber.model.TimberModel.set_topologies"]], "sha256() (compas_timber.model.timbermodel method)": [[742, "compas_timber.model.TimberModel.sha256"]], "to_json() (compas_timber.model.timbermodel method)": [[743, "compas_timber.model.TimberModel.to_json"]], "to_jsonstring() (compas_timber.model.timbermodel method)": [[744, "compas_timber.model.TimberModel.to_jsonstring"]], "transform() (compas_timber.model.timbermodel method)": [[745, "compas_timber.model.TimberModel.transform"]], "transform_numpy() (compas_timber.model.timbermodel method)": [[746, "compas_timber.model.TimberModel.transform_numpy"]], "transformed() (compas_timber.model.timbermodel method)": [[747, "compas_timber.model.TimberModel.transformed"]], "transformed_numpy() (compas_timber.model.timbermodel method)": [[748, "compas_timber.model.TimberModel.transformed_numpy"]], "translate() (compas_timber.model.timbermodel method)": [[749, "compas_timber.model.TimberModel.translate"]], "translated() (compas_timber.model.timbermodel method)": [[750, "compas_timber.model.TimberModel.translated"]], "validate_data() (compas_timber.model.timbermodel class method)": [[751, "compas_timber.model.TimberModel.validate_data"]], "actor (class in compas_timber.planning)": [[752, "compas_timber.planning.Actor"]], "get_name() (compas_timber.planning.actor class method)": [[753, "compas_timber.planning.Actor.get_name"]], "buildingplan (class in compas_timber.planning)": [[754, "compas_timber.planning.BuildingPlan"]], "tostring() (compas_timber.planning.buildingplan method)": [[755, "compas_timber.planning.BuildingPlan.ToString"]], "add_step() (compas_timber.planning.buildingplan method)": [[756, "compas_timber.planning.BuildingPlan.add_step"]], "copy() (compas_timber.planning.buildingplan method)": [[757, "compas_timber.planning.BuildingPlan.copy"]], "from_json() (compas_timber.planning.buildingplan class method)": [[758, "compas_timber.planning.BuildingPlan.from_json"]], "from_jsonstring() (compas_timber.planning.buildingplan class method)": [[759, "compas_timber.planning.BuildingPlan.from_jsonstring"]], "sha256() (compas_timber.planning.buildingplan method)": [[760, "compas_timber.planning.BuildingPlan.sha256"]], "to_json() (compas_timber.planning.buildingplan method)": [[761, "compas_timber.planning.BuildingPlan.to_json"]], "to_jsonstring() (compas_timber.planning.buildingplan method)": [[762, "compas_timber.planning.BuildingPlan.to_jsonstring"]], "validate_data() (compas_timber.planning.buildingplan class method)": [[763, "compas_timber.planning.BuildingPlan.validate_data"]], "buildingplanparser (class in compas_timber.planning)": [[764, "compas_timber.planning.BuildingPlanParser"]], "parse() (compas_timber.planning.buildingplanparser class method)": [[765, "compas_timber.planning.BuildingPlanParser.parse"]], "serialize() (compas_timber.planning.buildingplanparser class method)": [[766, "compas_timber.planning.BuildingPlanParser.serialize"]], "instruction (class in compas_timber.planning)": [[767, "compas_timber.planning.Instruction"]], "tostring() (compas_timber.planning.instruction method)": [[768, "compas_timber.planning.Instruction.ToString"]], "copy() (compas_timber.planning.instruction method)": [[769, "compas_timber.planning.Instruction.copy"]], "from_json() (compas_timber.planning.instruction class method)": [[770, "compas_timber.planning.Instruction.from_json"]], "from_jsonstring() (compas_timber.planning.instruction class method)": [[771, "compas_timber.planning.Instruction.from_jsonstring"]], "sha256() (compas_timber.planning.instruction method)": [[772, "compas_timber.planning.Instruction.sha256"]], "to_json() (compas_timber.planning.instruction method)": [[773, "compas_timber.planning.Instruction.to_json"]], "to_jsonstring() (compas_timber.planning.instruction method)": [[774, "compas_timber.planning.Instruction.to_jsonstring"]], "transform() (compas_timber.planning.instruction method)": [[775, "compas_timber.planning.Instruction.transform"]], "validate_data() (compas_timber.planning.instruction class method)": [[776, "compas_timber.planning.Instruction.validate_data"]], "lineardimension (class in compas_timber.planning)": [[777, "compas_timber.planning.LinearDimension"]], "tostring() (compas_timber.planning.lineardimension method)": [[778, "compas_timber.planning.LinearDimension.ToString"]], "copy() (compas_timber.planning.lineardimension method)": [[779, "compas_timber.planning.LinearDimension.copy"]], "from_json() (compas_timber.planning.lineardimension class method)": [[780, "compas_timber.planning.LinearDimension.from_json"]], "from_jsonstring() (compas_timber.planning.lineardimension class method)": [[781, "compas_timber.planning.LinearDimension.from_jsonstring"]], "sha256() (compas_timber.planning.lineardimension method)": [[782, "compas_timber.planning.LinearDimension.sha256"]], "to_json() (compas_timber.planning.lineardimension method)": [[783, "compas_timber.planning.LinearDimension.to_json"]], "to_jsonstring() (compas_timber.planning.lineardimension method)": [[784, "compas_timber.planning.LinearDimension.to_jsonstring"]], "transform() (compas_timber.planning.lineardimension method)": [[785, "compas_timber.planning.LinearDimension.transform"]], "validate_data() (compas_timber.planning.lineardimension class method)": [[786, "compas_timber.planning.LinearDimension.validate_data"]], "model3d (class in compas_timber.planning)": [[787, "compas_timber.planning.Model3d"]], "tostring() (compas_timber.planning.model3d method)": [[788, "compas_timber.planning.Model3d.ToString"]], "copy() (compas_timber.planning.model3d method)": [[789, "compas_timber.planning.Model3d.copy"]], "from_json() (compas_timber.planning.model3d class method)": [[790, "compas_timber.planning.Model3d.from_json"]], "from_jsonstring() (compas_timber.planning.model3d class method)": [[791, "compas_timber.planning.Model3d.from_jsonstring"]], "sha256() (compas_timber.planning.model3d method)": [[792, "compas_timber.planning.Model3d.sha256"]], "to_json() (compas_timber.planning.model3d method)": [[793, "compas_timber.planning.Model3d.to_json"]], "to_jsonstring() (compas_timber.planning.model3d method)": [[794, "compas_timber.planning.Model3d.to_jsonstring"]], "transform() (compas_timber.planning.model3d method)": [[795, "compas_timber.planning.Model3d.transform"]], "validate_data() (compas_timber.planning.model3d class method)": [[796, "compas_timber.planning.Model3d.validate_data"]], "simplesequencegenerator (class in compas_timber.planning)": [[797, "compas_timber.planning.SimpleSequenceGenerator"]], "step (class in compas_timber.planning)": [[798, "compas_timber.planning.Step"]], "tostring() (compas_timber.planning.step method)": [[799, "compas_timber.planning.Step.ToString"]], "copy() (compas_timber.planning.step method)": [[800, "compas_timber.planning.Step.copy"]], "from_json() (compas_timber.planning.step class method)": [[801, "compas_timber.planning.Step.from_json"]], "from_jsonstring() (compas_timber.planning.step class method)": [[802, "compas_timber.planning.Step.from_jsonstring"]], "sha256() (compas_timber.planning.step method)": [[803, "compas_timber.planning.Step.sha256"]], "to_json() (compas_timber.planning.step method)": [[804, "compas_timber.planning.Step.to_json"]], "to_jsonstring() (compas_timber.planning.step method)": [[805, "compas_timber.planning.Step.to_jsonstring"]], "transform() (compas_timber.planning.step method)": [[806, "compas_timber.planning.Step.transform"]], "validate_data() (compas_timber.planning.step class method)": [[807, "compas_timber.planning.Step.validate_data"]], "text3d (class in compas_timber.planning)": [[808, "compas_timber.planning.Text3d"]], "tostring() (compas_timber.planning.text3d method)": [[809, "compas_timber.planning.Text3d.ToString"]], "copy() (compas_timber.planning.text3d method)": [[810, "compas_timber.planning.Text3d.copy"]], "from_json() (compas_timber.planning.text3d class method)": [[811, "compas_timber.planning.Text3d.from_json"]], "from_jsonstring() (compas_timber.planning.text3d class method)": [[812, "compas_timber.planning.Text3d.from_jsonstring"]], "sha256() (compas_timber.planning.text3d method)": [[813, "compas_timber.planning.Text3d.sha256"]], "to_json() (compas_timber.planning.text3d method)": [[814, "compas_timber.planning.Text3d.to_json"]], "to_jsonstring() (compas_timber.planning.text3d method)": [[815, "compas_timber.planning.Text3d.to_jsonstring"]], "transform() (compas_timber.planning.text3d method)": [[816, "compas_timber.planning.Text3d.transform"]], "validate_data() (compas_timber.planning.text3d class method)": [[817, "compas_timber.planning.Text3d.validate_data"]], "find_neighboring_elements() (in module compas_timber.rhino)": [[818, "compas_timber.rhino.find_neighboring_elements"]]}})