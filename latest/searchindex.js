Search.setIndex({"docnames": ["api", "api/compas_timber.connections", "api/compas_timber.design", "api/compas_timber.elements", "api/compas_timber.errors", "api/compas_timber.fabrication", "api/compas_timber.ghpython", "api/compas_timber.model", "api/compas_timber.planning", "api/compas_timber.rhino", "api/generated/compas_timber.connections.BallNodeJoint", "api/generated/compas_timber.connections.BallNodeJoint.ToString", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions", "api/generated/compas_timber.connections.BallNodeJoint.add_features", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility", "api/generated/compas_timber.connections.BallNodeJoint.copy", "api/generated/compas_timber.connections.BallNodeJoint.create", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies", "api/generated/compas_timber.connections.BallNodeJoint.from_json", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.BallNodeJoint.sha256", "api/generated/compas_timber.connections.BallNodeJoint.to_json", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.validate_data", "api/generated/compas_timber.connections.BeamGroupAnalyzer", "api/generated/compas_timber.connections.BeamGroupAnalyzer.find", "api/generated/compas_timber.connections.Cluster", "api/generated/compas_timber.connections.CompositeAnalyzer", "api/generated/compas_timber.connections.CompositeAnalyzer.find", "api/generated/compas_timber.connections.CompositeAnalyzer.from_model", "api/generated/compas_timber.connections.ConnectionSolver", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs", "api/generated/compas_timber.connections.ConnectionSolver.find_topology", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology", "api/generated/compas_timber.connections.Joint", "api/generated/compas_timber.connections.Joint.ToString", "api/generated/compas_timber.connections.Joint.add_extensions", "api/generated/compas_timber.connections.Joint.add_features", "api/generated/compas_timber.connections.Joint.check_elements_compatibility", "api/generated/compas_timber.connections.Joint.copy", "api/generated/compas_timber.connections.Joint.create", "api/generated/compas_timber.connections.Joint.element_count_complies", "api/generated/compas_timber.connections.Joint.from_json", "api/generated/compas_timber.connections.Joint.from_jsonstring", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys", "api/generated/compas_timber.connections.Joint.sha256", "api/generated/compas_timber.connections.Joint.to_json", "api/generated/compas_timber.connections.Joint.to_jsonstring", "api/generated/compas_timber.connections.Joint.validate_data", "api/generated/compas_timber.connections.JointTopology", "api/generated/compas_timber.connections.JointTopology.get_name", "api/generated/compas_timber.connections.LButtJoint", "api/generated/compas_timber.connections.LButtJoint.ToString", "api/generated/compas_timber.connections.LButtJoint.add_extensions", "api/generated/compas_timber.connections.LButtJoint.add_features", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LButtJoint.copy", "api/generated/compas_timber.connections.LButtJoint.create", "api/generated/compas_timber.connections.LButtJoint.element_count_complies", "api/generated/compas_timber.connections.LButtJoint.from_json", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LButtJoint.sha256", "api/generated/compas_timber.connections.LButtJoint.to_json", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles", "api/generated/compas_timber.connections.LButtJoint.validate_data", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data", "api/generated/compas_timber.connections.LLapJoint", "api/generated/compas_timber.connections.LLapJoint.ToString", "api/generated/compas_timber.connections.LLapJoint.add_extensions", "api/generated/compas_timber.connections.LLapJoint.add_features", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LLapJoint.copy", "api/generated/compas_timber.connections.LLapJoint.create", "api/generated/compas_timber.connections.LLapJoint.element_count_complies", "api/generated/compas_timber.connections.LLapJoint.from_json", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LLapJoint.sha256", "api/generated/compas_timber.connections.LLapJoint.to_json", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LLapJoint.validate_data", "api/generated/compas_timber.connections.LMiterJoint", "api/generated/compas_timber.connections.LMiterJoint.ToString", "api/generated/compas_timber.connections.LMiterJoint.add_extensions", "api/generated/compas_timber.connections.LMiterJoint.add_features", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LMiterJoint.copy", "api/generated/compas_timber.connections.LMiterJoint.create", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies", "api/generated/compas_timber.connections.LMiterJoint.from_json", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LMiterJoint.sha256", "api/generated/compas_timber.connections.LMiterJoint.to_json", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.validate_data", "api/generated/compas_timber.connections.LapJoint", "api/generated/compas_timber.connections.LapJoint.ToString", "api/generated/compas_timber.connections.LapJoint.add_extensions", "api/generated/compas_timber.connections.LapJoint.add_features", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LapJoint.copy", "api/generated/compas_timber.connections.LapJoint.create", "api/generated/compas_timber.connections.LapJoint.element_count_complies", "api/generated/compas_timber.connections.LapJoint.from_json", "api/generated/compas_timber.connections.LapJoint.from_jsonstring", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LapJoint.sha256", "api/generated/compas_timber.connections.LapJoint.to_json", "api/generated/compas_timber.connections.LapJoint.to_jsonstring", "api/generated/compas_timber.connections.LapJoint.validate_data", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.find", "api/generated/compas_timber.connections.QuadAnalyzer", "api/generated/compas_timber.connections.TBirdsmouthJoint", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy", "api/generated/compas_timber.connections.TBirdsmouthJoint.create", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data", "api/generated/compas_timber.connections.TButtJoint", "api/generated/compas_timber.connections.TButtJoint.ToString", "api/generated/compas_timber.connections.TButtJoint.add_extensions", "api/generated/compas_timber.connections.TButtJoint.add_features", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TButtJoint.copy", "api/generated/compas_timber.connections.TButtJoint.create", "api/generated/compas_timber.connections.TButtJoint.element_count_complies", "api/generated/compas_timber.connections.TButtJoint.from_json", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TButtJoint.sha256", "api/generated/compas_timber.connections.TButtJoint.to_json", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring", "api/generated/compas_timber.connections.TButtJoint.validate_data", "api/generated/compas_timber.connections.TDovetailJoint", "api/generated/compas_timber.connections.TDovetailJoint.ToString", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions", "api/generated/compas_timber.connections.TDovetailJoint.add_features", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TDovetailJoint.copy", "api/generated/compas_timber.connections.TDovetailJoint.create", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies", "api/generated/compas_timber.connections.TDovetailJoint.from_json", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TDovetailJoint.sha256", "api/generated/compas_timber.connections.TDovetailJoint.to_json", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.validate_data", "api/generated/compas_timber.connections.TLapJoint", "api/generated/compas_timber.connections.TLapJoint.ToString", "api/generated/compas_timber.connections.TLapJoint.add_extensions", "api/generated/compas_timber.connections.TLapJoint.add_features", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TLapJoint.copy", "api/generated/compas_timber.connections.TLapJoint.create", "api/generated/compas_timber.connections.TLapJoint.element_count_complies", "api/generated/compas_timber.connections.TLapJoint.from_json", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TLapJoint.sha256", "api/generated/compas_timber.connections.TLapJoint.to_json", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring", "api/generated/compas_timber.connections.TLapJoint.validate_data", "api/generated/compas_timber.connections.TStepJoint", "api/generated/compas_timber.connections.TStepJoint.ToString", "api/generated/compas_timber.connections.TStepJoint.add_extensions", "api/generated/compas_timber.connections.TStepJoint.add_features", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TStepJoint.copy", "api/generated/compas_timber.connections.TStepJoint.create", "api/generated/compas_timber.connections.TStepJoint.element_count_complies", "api/generated/compas_timber.connections.TStepJoint.from_json", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TStepJoint.set_step_depths", "api/generated/compas_timber.connections.TStepJoint.sha256", "api/generated/compas_timber.connections.TStepJoint.to_json", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring", "api/generated/compas_timber.connections.TStepJoint.validate_data", "api/generated/compas_timber.connections.TenonMortiseJoint", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TenonMortiseJoint.copy", "api/generated/compas_timber.connections.TenonMortiseJoint.create", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data", "api/generated/compas_timber.connections.TripletAnalyzer", "api/generated/compas_timber.connections.XLapJoint", "api/generated/compas_timber.connections.XLapJoint.ToString", "api/generated/compas_timber.connections.XLapJoint.add_extensions", "api/generated/compas_timber.connections.XLapJoint.add_features", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XLapJoint.copy", "api/generated/compas_timber.connections.XLapJoint.create", "api/generated/compas_timber.connections.XLapJoint.element_count_complies", "api/generated/compas_timber.connections.XLapJoint.from_json", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XLapJoint.sha256", "api/generated/compas_timber.connections.XLapJoint.to_json", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring", "api/generated/compas_timber.connections.XLapJoint.validate_data", "api/generated/compas_timber.connections.XNotchJoint", "api/generated/compas_timber.connections.XNotchJoint.ToString", "api/generated/compas_timber.connections.XNotchJoint.add_extensions", "api/generated/compas_timber.connections.XNotchJoint.add_features", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XNotchJoint.copy", "api/generated/compas_timber.connections.XNotchJoint.create", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies", "api/generated/compas_timber.connections.XNotchJoint.from_json", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XNotchJoint.sha256", "api/generated/compas_timber.connections.XNotchJoint.to_json", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.validate_data", "api/generated/compas_timber.connections.YButtJoint", "api/generated/compas_timber.connections.YButtJoint.ToString", "api/generated/compas_timber.connections.YButtJoint.add_extensions", "api/generated/compas_timber.connections.YButtJoint.add_features", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.YButtJoint.copy", "api/generated/compas_timber.connections.YButtJoint.create", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.element_count_complies", "api/generated/compas_timber.connections.YButtJoint.from_json", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.YButtJoint.sha256", "api/generated/compas_timber.connections.YButtJoint.to_json", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring", "api/generated/compas_timber.connections.YButtJoint.validate_data", "api/generated/compas_timber.connections.find_neighboring_elements", "api/generated/compas_timber.design.CategoryRule", "api/generated/compas_timber.design.CategoryRule.ToString", "api/generated/compas_timber.design.CategoryRule.comply", "api/generated/compas_timber.design.CategoryRule.get_category_rules", "api/generated/compas_timber.design.CategoryRule.get_direct_rules", "api/generated/compas_timber.design.CategoryRule.get_topology_rules", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.CategoryRule.reorder", "api/generated/compas_timber.design.DebugInfomation", "api/generated/compas_timber.design.DebugInfomation.ToString", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error", "api/generated/compas_timber.design.DebugInfomation.add_feature_error", "api/generated/compas_timber.design.DebugInfomation.add_joint_error", "api/generated/compas_timber.design.DirectRule", "api/generated/compas_timber.design.DirectRule.ToString", "api/generated/compas_timber.design.DirectRule.comply", "api/generated/compas_timber.design.DirectRule.contains", "api/generated/compas_timber.design.DirectRule.get_category_rules", "api/generated/compas_timber.design.DirectRule.get_direct_rules", "api/generated/compas_timber.design.DirectRule.get_topology_rules", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.FeatureDefinition", "api/generated/compas_timber.design.FeatureDefinition.ToString", "api/generated/compas_timber.design.JointDefinition", "api/generated/compas_timber.design.JointDefinition.ToString", "api/generated/compas_timber.design.JointDefinition.is_identical", "api/generated/compas_timber.design.JointDefinition.match", "api/generated/compas_timber.design.JointRule", "api/generated/compas_timber.design.JointRule.comply", "api/generated/compas_timber.design.JointRule.get_category_rules", "api/generated/compas_timber.design.JointRule.get_direct_rules", "api/generated/compas_timber.design.JointRule.get_topology_rules", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.SurfaceModel", "api/generated/compas_timber.design.SurfaceModel.beam_category_names", "api/generated/compas_timber.design.SurfaceModel.create_model", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements", "api/generated/compas_timber.design.SurfaceModel.generate_frame", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams", "api/generated/compas_timber.design.SurfaceModel.generate_plates", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines", "api/generated/compas_timber.design.SurfaceModel.generate_studs", "api/generated/compas_timber.design.SurfaceModel.generate_windows", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices", "api/generated/compas_timber.design.SurfaceModel.offset_elements", "api/generated/compas_timber.design.SurfaceModel.parse_loops", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs", "api/generated/compas_timber.design.SurfaceModel.trim_studs", "api/generated/compas_timber.design.TopologyRule", "api/generated/compas_timber.design.TopologyRule.ToString", "api/generated/compas_timber.design.TopologyRule.comply", "api/generated/compas_timber.design.TopologyRule.get_category_rules", "api/generated/compas_timber.design.TopologyRule.get_direct_rules", "api/generated/compas_timber.design.TopologyRule.get_topology_rules", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.guess_joint_topology_2beams", "api/generated/compas_timber.design.set_default_joints", "api/generated/compas_timber.elements.Beam", "api/generated/compas_timber.elements.Beam.ToString", "api/generated/compas_timber.elements.Beam.add_blank_extension", "api/generated/compas_timber.elements.Beam.add_feature", "api/generated/compas_timber.elements.Beam.add_features", "api/generated/compas_timber.elements.Beam.back_side", "api/generated/compas_timber.elements.Beam.compute_aabb", "api/generated/compas_timber.elements.Beam.compute_collision_mesh", "api/generated/compas_timber.elements.Beam.compute_geometry", "api/generated/compas_timber.elements.Beam.compute_obb", "api/generated/compas_timber.elements.Beam.compute_worldtransformation", "api/generated/compas_timber.elements.Beam.copy", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point", "api/generated/compas_timber.elements.Beam.extension_to_plane", "api/generated/compas_timber.elements.Beam.from_centerline", "api/generated/compas_timber.elements.Beam.from_endpoints", "api/generated/compas_timber.elements.Beam.from_json", "api/generated/compas_timber.elements.Beam.from_jsonstring", "api/generated/compas_timber.elements.Beam.front_side", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side", "api/generated/compas_timber.elements.Beam.opp_side", "api/generated/compas_timber.elements.Beam.remove_blank_extension", "api/generated/compas_timber.elements.Beam.remove_features", "api/generated/compas_timber.elements.Beam.reset", "api/generated/compas_timber.elements.Beam.sha256", "api/generated/compas_timber.elements.Beam.side_as_surface", "api/generated/compas_timber.elements.Beam.to_json", "api/generated/compas_timber.elements.Beam.to_jsonstring", "api/generated/compas_timber.elements.Beam.transform", "api/generated/compas_timber.elements.Beam.transformed", "api/generated/compas_timber.elements.Beam.validate_data", "api/generated/compas_timber.elements.Fastener", "api/generated/compas_timber.elements.Fastener.ToString", "api/generated/compas_timber.elements.Fastener.add_feature", "api/generated/compas_timber.elements.Fastener.add_features", "api/generated/compas_timber.elements.Fastener.compute_aabb", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh", "api/generated/compas_timber.elements.Fastener.compute_geometry", "api/generated/compas_timber.elements.Fastener.compute_obb", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation", "api/generated/compas_timber.elements.Fastener.copy", "api/generated/compas_timber.elements.Fastener.from_json", "api/generated/compas_timber.elements.Fastener.from_jsonstring", "api/generated/compas_timber.elements.Fastener.remove_blank_extension", "api/generated/compas_timber.elements.Fastener.remove_features", "api/generated/compas_timber.elements.Fastener.reset", "api/generated/compas_timber.elements.Fastener.sha256", "api/generated/compas_timber.elements.Fastener.to_json", "api/generated/compas_timber.elements.Fastener.to_jsonstring", "api/generated/compas_timber.elements.Fastener.transform", "api/generated/compas_timber.elements.Fastener.transformed", "api/generated/compas_timber.elements.Fastener.validate_data", "api/generated/compas_timber.elements.FastenerTimberInterface", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString", "api/generated/compas_timber.elements.FastenerTimberInterface.copy", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data", "api/generated/compas_timber.elements.Plate", "api/generated/compas_timber.elements.Plate.ToString", "api/generated/compas_timber.elements.Plate.add_feature", "api/generated/compas_timber.elements.Plate.add_features", "api/generated/compas_timber.elements.Plate.add_interface", "api/generated/compas_timber.elements.Plate.check_outlines", "api/generated/compas_timber.elements.Plate.compute_aabb", "api/generated/compas_timber.elements.Plate.compute_collision_mesh", "api/generated/compas_timber.elements.Plate.compute_geometry", "api/generated/compas_timber.elements.Plate.compute_obb", "api/generated/compas_timber.elements.Plate.compute_worldtransformation", "api/generated/compas_timber.elements.Plate.copy", "api/generated/compas_timber.elements.Plate.from_brep", "api/generated/compas_timber.elements.Plate.from_json", "api/generated/compas_timber.elements.Plate.from_jsonstring", "api/generated/compas_timber.elements.Plate.from_outline_thickness", "api/generated/compas_timber.elements.Plate.opp_side", "api/generated/compas_timber.elements.Plate.remove_blank_extension", "api/generated/compas_timber.elements.Plate.remove_features", "api/generated/compas_timber.elements.Plate.reset", "api/generated/compas_timber.elements.Plate.sha256", "api/generated/compas_timber.elements.Plate.side_as_surface", "api/generated/compas_timber.elements.Plate.to_json", "api/generated/compas_timber.elements.Plate.to_jsonstring", "api/generated/compas_timber.elements.Plate.transform", "api/generated/compas_timber.elements.Plate.transformed", "api/generated/compas_timber.elements.Plate.validate_data", "api/generated/compas_timber.elements.TimberElement", "api/generated/compas_timber.elements.TimberElement.ToString", "api/generated/compas_timber.elements.TimberElement.add_feature", "api/generated/compas_timber.elements.TimberElement.add_features", "api/generated/compas_timber.elements.TimberElement.compute_aabb", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh", "api/generated/compas_timber.elements.TimberElement.compute_geometry", "api/generated/compas_timber.elements.TimberElement.compute_obb", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation", "api/generated/compas_timber.elements.TimberElement.copy", "api/generated/compas_timber.elements.TimberElement.from_json", "api/generated/compas_timber.elements.TimberElement.from_jsonstring", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension", "api/generated/compas_timber.elements.TimberElement.remove_features", "api/generated/compas_timber.elements.TimberElement.reset", "api/generated/compas_timber.elements.TimberElement.sha256", "api/generated/compas_timber.elements.TimberElement.to_json", "api/generated/compas_timber.elements.TimberElement.to_jsonstring", "api/generated/compas_timber.elements.TimberElement.transform", "api/generated/compas_timber.elements.TimberElement.transformed", "api/generated/compas_timber.elements.TimberElement.validate_data", "api/generated/compas_timber.elements.Wall", "api/generated/compas_timber.elements.Wall.ToString", "api/generated/compas_timber.elements.Wall.add_feature", "api/generated/compas_timber.elements.Wall.add_features", "api/generated/compas_timber.elements.Wall.compute_aabb", "api/generated/compas_timber.elements.Wall.compute_collision_mesh", "api/generated/compas_timber.elements.Wall.compute_geometry", "api/generated/compas_timber.elements.Wall.compute_obb", "api/generated/compas_timber.elements.Wall.compute_worldtransformation", "api/generated/compas_timber.elements.Wall.copy", "api/generated/compas_timber.elements.Wall.from_boundary", "api/generated/compas_timber.elements.Wall.from_brep", "api/generated/compas_timber.elements.Wall.from_json", "api/generated/compas_timber.elements.Wall.from_jsonstring", "api/generated/compas_timber.elements.Wall.remove_blank_extension", "api/generated/compas_timber.elements.Wall.remove_features", "api/generated/compas_timber.elements.Wall.reset", "api/generated/compas_timber.elements.Wall.rotate", "api/generated/compas_timber.elements.Wall.sha256", "api/generated/compas_timber.elements.Wall.to_json", "api/generated/compas_timber.elements.Wall.to_jsonstring", "api/generated/compas_timber.elements.Wall.transform", "api/generated/compas_timber.elements.Wall.transformed", "api/generated/compas_timber.elements.Wall.validate_data", "api/generated/compas_timber.errors.BeamJoiningError", "api/generated/compas_timber.errors.FastenerApplicationError", "api/generated/compas_timber.errors.FeatureApplicationError", "api/generated/compas_timber.fabrication.BTLxPart", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face", "api/generated/compas_timber.fabrication.BTLxProcessing", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing", "api/generated/compas_timber.fabrication.BTLxProcessing.copy", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data", "api/generated/compas_timber.fabrication.BTLxWriter", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer", "api/generated/compas_timber.fabrication.BTLxWriter.write", "api/generated/compas_timber.fabrication.DoubleCut", "api/generated/compas_timber.fabrication.DoubleCut.ToString", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing", "api/generated/compas_timber.fabrication.DoubleCut.apply", "api/generated/compas_timber.fabrication.DoubleCut.copy", "api/generated/compas_timber.fabrication.DoubleCut.from_json", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.scale", "api/generated/compas_timber.fabrication.DoubleCut.scaled", "api/generated/compas_timber.fabrication.DoubleCut.sha256", "api/generated/compas_timber.fabrication.DoubleCut.to_json", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.validate_data", "api/generated/compas_timber.fabrication.DovetailMortise", "api/generated/compas_timber.fabrication.DovetailMortise.ToString", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailMortise.apply", "api/generated/compas_timber.fabrication.DovetailMortise.copy", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_json", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.scale", "api/generated/compas_timber.fabrication.DovetailMortise.scaled", "api/generated/compas_timber.fabrication.DovetailMortise.sha256", "api/generated/compas_timber.fabrication.DovetailMortise.to_json", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data", "api/generated/compas_timber.fabrication.DovetailTenon", "api/generated/compas_timber.fabrication.DovetailTenon.ToString", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailTenon.apply", "api/generated/compas_timber.fabrication.DovetailTenon.copy", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.from_json", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.scale", "api/generated/compas_timber.fabrication.DovetailTenon.scaled", "api/generated/compas_timber.fabrication.DovetailTenon.sha256", "api/generated/compas_timber.fabrication.DovetailTenon.to_json", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data", "api/generated/compas_timber.fabrication.Drilling", "api/generated/compas_timber.fabrication.Drilling.ToString", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing", "api/generated/compas_timber.fabrication.Drilling.apply", "api/generated/compas_timber.fabrication.Drilling.copy", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element", "api/generated/compas_timber.fabrication.Drilling.from_json", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element", "api/generated/compas_timber.fabrication.Drilling.scale", "api/generated/compas_timber.fabrication.Drilling.scaled", "api/generated/compas_timber.fabrication.Drilling.sha256", "api/generated/compas_timber.fabrication.Drilling.to_json", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring", "api/generated/compas_timber.fabrication.Drilling.validate_data", "api/generated/compas_timber.fabrication.EdgePositionType", "api/generated/compas_timber.fabrication.FrenchRidgeLap", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data", "api/generated/compas_timber.fabrication.JackRafterCut", "api/generated/compas_timber.fabrication.JackRafterCut.ToString", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing", "api/generated/compas_timber.fabrication.JackRafterCut.apply", "api/generated/compas_timber.fabrication.JackRafterCut.copy", "api/generated/compas_timber.fabrication.JackRafterCut.from_json", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.scale", "api/generated/compas_timber.fabrication.JackRafterCut.scaled", "api/generated/compas_timber.fabrication.JackRafterCut.sha256", "api/generated/compas_timber.fabrication.JackRafterCut.to_json", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data", "api/generated/compas_timber.fabrication.Lap", "api/generated/compas_timber.fabrication.Lap.ToString", "api/generated/compas_timber.fabrication.Lap.add_subprocessing", "api/generated/compas_timber.fabrication.Lap.apply", "api/generated/compas_timber.fabrication.Lap.copy", "api/generated/compas_timber.fabrication.Lap.from_json", "api/generated/compas_timber.fabrication.Lap.from_jsonstring", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam", "api/generated/compas_timber.fabrication.Lap.scale", "api/generated/compas_timber.fabrication.Lap.scaled", "api/generated/compas_timber.fabrication.Lap.sha256", "api/generated/compas_timber.fabrication.Lap.to_json", "api/generated/compas_timber.fabrication.Lap.to_jsonstring", "api/generated/compas_timber.fabrication.Lap.validate_data", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.LimitationTopType", "api/generated/compas_timber.fabrication.LongitudinalCut", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing", "api/generated/compas_timber.fabrication.LongitudinalCut.apply", "api/generated/compas_timber.fabrication.LongitudinalCut.copy", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.MachiningLimits", "api/generated/compas_timber.fabrication.Mortise", "api/generated/compas_timber.fabrication.Mortise.ToString", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing", "api/generated/compas_timber.fabrication.Mortise.apply", "api/generated/compas_timber.fabrication.Mortise.copy", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_json", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring", "api/generated/compas_timber.fabrication.Mortise.scale", "api/generated/compas_timber.fabrication.Mortise.scaled", "api/generated/compas_timber.fabrication.Mortise.sha256", "api/generated/compas_timber.fabrication.Mortise.to_json", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring", "api/generated/compas_timber.fabrication.Mortise.validate_data", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.OrientationType", "api/generated/compas_timber.fabrication.Pocket", "api/generated/compas_timber.fabrication.Pocket.ToString", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing", "api/generated/compas_timber.fabrication.Pocket.apply", "api/generated/compas_timber.fabrication.Pocket.copy", "api/generated/compas_timber.fabrication.Pocket.from_json", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element", "api/generated/compas_timber.fabrication.Pocket.scale", "api/generated/compas_timber.fabrication.Pocket.scaled", "api/generated/compas_timber.fabrication.Pocket.sha256", "api/generated/compas_timber.fabrication.Pocket.to_json", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring", "api/generated/compas_timber.fabrication.Pocket.validate_data", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element", "api/generated/compas_timber.fabrication.Slot", "api/generated/compas_timber.fabrication.Slot.ToString", "api/generated/compas_timber.fabrication.Slot.add_subprocessing", "api/generated/compas_timber.fabrication.Slot.apply", "api/generated/compas_timber.fabrication.Slot.copy", "api/generated/compas_timber.fabrication.Slot.from_json", "api/generated/compas_timber.fabrication.Slot.from_jsonstring", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam", "api/generated/compas_timber.fabrication.Slot.scale", "api/generated/compas_timber.fabrication.Slot.scaled", "api/generated/compas_timber.fabrication.Slot.sha256", "api/generated/compas_timber.fabrication.Slot.to_json", "api/generated/compas_timber.fabrication.Slot.to_jsonstring", "api/generated/compas_timber.fabrication.Slot.validate_data", "api/generated/compas_timber.fabrication.StepJoint", "api/generated/compas_timber.fabrication.StepJoint.ToString", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing", "api/generated/compas_timber.fabrication.StepJoint.add_tenon", "api/generated/compas_timber.fabrication.StepJoint.apply", "api/generated/compas_timber.fabrication.StepJoint.copy", "api/generated/compas_timber.fabrication.StepJoint.from_json", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.scale", "api/generated/compas_timber.fabrication.StepJoint.scaled", "api/generated/compas_timber.fabrication.StepJoint.sha256", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.to_json", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.validate_data", "api/generated/compas_timber.fabrication.StepJointNotch", "api/generated/compas_timber.fabrication.StepJointNotch.ToString", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing", "api/generated/compas_timber.fabrication.StepJointNotch.apply", "api/generated/compas_timber.fabrication.StepJointNotch.copy", "api/generated/compas_timber.fabrication.StepJointNotch.from_json", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.scale", "api/generated/compas_timber.fabrication.StepJointNotch.scaled", "api/generated/compas_timber.fabrication.StepJointNotch.sha256", "api/generated/compas_timber.fabrication.StepJointNotch.to_json", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data", "api/generated/compas_timber.fabrication.StepShapeType", "api/generated/compas_timber.fabrication.Tenon", "api/generated/compas_timber.fabrication.Tenon.ToString", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing", "api/generated/compas_timber.fabrication.Tenon.apply", "api/generated/compas_timber.fabrication.Tenon.copy", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Tenon.from_json", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.Tenon.scale", "api/generated/compas_timber.fabrication.Tenon.scaled", "api/generated/compas_timber.fabrication.Tenon.sha256", "api/generated/compas_timber.fabrication.Tenon.to_json", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring", "api/generated/compas_timber.fabrication.Tenon.validate_data", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.TenonShapeType", "api/generated/compas_timber.ghpython.add_gh_param", "api/generated/compas_timber.ghpython.clear_gh_params", "api/generated/compas_timber.ghpython.get_leaf_subclasses", "api/generated/compas_timber.ghpython.item_input_valid", "api/generated/compas_timber.ghpython.list_input_valid", "api/generated/compas_timber.ghpython.manage_dynamic_params", "api/generated/compas_timber.ghpython.rename_gh_input", "api/generated/compas_timber.model.TimberModel", "api/generated/compas_timber.model.TimberModel.ToString", "api/generated/compas_timber.model.TimberModel.add_element", "api/generated/compas_timber.model.TimberModel.add_elements", "api/generated/compas_timber.model.TimberModel.add_group", "api/generated/compas_timber.model.TimberModel.add_group_element", "api/generated/compas_timber.model.TimberModel.add_interaction", "api/generated/compas_timber.model.TimberModel.add_joint", "api/generated/compas_timber.model.TimberModel.add_material", "api/generated/compas_timber.model.TimberModel.assign_material", "api/generated/compas_timber.model.TimberModel.compute_aabb", "api/generated/compas_timber.model.TimberModel.compute_obb", "api/generated/compas_timber.model.TimberModel.connect_adjacent_beams", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls", "api/generated/compas_timber.model.TimberModel.copy", "api/generated/compas_timber.model.TimberModel.element_by_guid", "api/generated/compas_timber.model.TimberModel.elements", "api/generated/compas_timber.model.TimberModel.elements_connected_by", "api/generated/compas_timber.model.TimberModel.from_json", "api/generated/compas_timber.model.TimberModel.from_jsonstring", "api/generated/compas_timber.model.TimberModel.get_elements_in_group", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element", "api/generated/compas_timber.model.TimberModel.has_element", "api/generated/compas_timber.model.TimberModel.has_group", "api/generated/compas_timber.model.TimberModel.has_interaction", "api/generated/compas_timber.model.TimberModel.has_material", "api/generated/compas_timber.model.TimberModel.interactions", "api/generated/compas_timber.model.TimberModel.materials", "api/generated/compas_timber.model.TimberModel.process_joinery", "api/generated/compas_timber.model.TimberModel.remove_element", "api/generated/compas_timber.model.TimberModel.remove_interaction", "api/generated/compas_timber.model.TimberModel.remove_joint", "api/generated/compas_timber.model.TimberModel.rotate", "api/generated/compas_timber.model.TimberModel.rotated", "api/generated/compas_timber.model.TimberModel.scale", "api/generated/compas_timber.model.TimberModel.scaled", "api/generated/compas_timber.model.TimberModel.set_topologies", "api/generated/compas_timber.model.TimberModel.sha256", "api/generated/compas_timber.model.TimberModel.to_json", "api/generated/compas_timber.model.TimberModel.to_jsonstring", "api/generated/compas_timber.model.TimberModel.transform", "api/generated/compas_timber.model.TimberModel.transform_numpy", "api/generated/compas_timber.model.TimberModel.transformed", "api/generated/compas_timber.model.TimberModel.transformed_numpy", "api/generated/compas_timber.model.TimberModel.translate", "api/generated/compas_timber.model.TimberModel.translated", "api/generated/compas_timber.model.TimberModel.validate_data", "api/generated/compas_timber.planning.Actor", "api/generated/compas_timber.planning.Actor.get_name", "api/generated/compas_timber.planning.BuildingPlan", "api/generated/compas_timber.planning.BuildingPlan.ToString", "api/generated/compas_timber.planning.BuildingPlan.add_step", "api/generated/compas_timber.planning.BuildingPlan.copy", "api/generated/compas_timber.planning.BuildingPlan.from_json", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.sha256", "api/generated/compas_timber.planning.BuildingPlan.to_json", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.validate_data", "api/generated/compas_timber.planning.BuildingPlanParser", "api/generated/compas_timber.planning.BuildingPlanParser.parse", "api/generated/compas_timber.planning.BuildingPlanParser.serialize", "api/generated/compas_timber.planning.Instruction", "api/generated/compas_timber.planning.Instruction.ToString", "api/generated/compas_timber.planning.Instruction.copy", "api/generated/compas_timber.planning.Instruction.from_json", "api/generated/compas_timber.planning.Instruction.from_jsonstring", "api/generated/compas_timber.planning.Instruction.sha256", "api/generated/compas_timber.planning.Instruction.to_json", "api/generated/compas_timber.planning.Instruction.to_jsonstring", "api/generated/compas_timber.planning.Instruction.transform", "api/generated/compas_timber.planning.Instruction.validate_data", "api/generated/compas_timber.planning.LinearDimension", "api/generated/compas_timber.planning.LinearDimension.ToString", "api/generated/compas_timber.planning.LinearDimension.copy", "api/generated/compas_timber.planning.LinearDimension.from_json", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring", "api/generated/compas_timber.planning.LinearDimension.sha256", "api/generated/compas_timber.planning.LinearDimension.to_json", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring", "api/generated/compas_timber.planning.LinearDimension.transform", "api/generated/compas_timber.planning.LinearDimension.validate_data", "api/generated/compas_timber.planning.Model3d", "api/generated/compas_timber.planning.Model3d.ToString", "api/generated/compas_timber.planning.Model3d.copy", "api/generated/compas_timber.planning.Model3d.from_json", "api/generated/compas_timber.planning.Model3d.from_jsonstring", "api/generated/compas_timber.planning.Model3d.sha256", "api/generated/compas_timber.planning.Model3d.to_json", "api/generated/compas_timber.planning.Model3d.to_jsonstring", "api/generated/compas_timber.planning.Model3d.transform", "api/generated/compas_timber.planning.Model3d.validate_data", "api/generated/compas_timber.planning.SimpleSequenceGenerator", "api/generated/compas_timber.planning.Step", "api/generated/compas_timber.planning.Step.ToString", "api/generated/compas_timber.planning.Step.copy", "api/generated/compas_timber.planning.Step.from_json", "api/generated/compas_timber.planning.Step.from_jsonstring", "api/generated/compas_timber.planning.Step.sha256", "api/generated/compas_timber.planning.Step.to_json", "api/generated/compas_timber.planning.Step.to_jsonstring", "api/generated/compas_timber.planning.Step.transform", "api/generated/compas_timber.planning.Step.validate_data", "api/generated/compas_timber.planning.Text3d", "api/generated/compas_timber.planning.Text3d.ToString", "api/generated/compas_timber.planning.Text3d.copy", "api/generated/compas_timber.planning.Text3d.from_json", "api/generated/compas_timber.planning.Text3d.from_jsonstring", "api/generated/compas_timber.planning.Text3d.sha256", "api/generated/compas_timber.planning.Text3d.to_json", "api/generated/compas_timber.planning.Text3d.to_jsonstring", "api/generated/compas_timber.planning.Text3d.transform", "api/generated/compas_timber.planning.Text3d.validate_data", "api/generated/compas_timber.rhino.find_neighboring_elements", "citing", "contribution", "contribution/BTLx_contribution_guide", "contribution/joints_contribution_guide", "index", "installation", "license", "tutorials", "tutorials/grasshopper/attributes", "tutorials/grasshopper/beams", "tutorials/grasshopper/design", "tutorials/grasshopper/examples", "tutorials/grasshopper/fabrication", "tutorials/grasshopper/features", "tutorials/grasshopper/installation", "tutorials/grasshopper/joint_rules", "tutorials/grasshopper/model", "tutorials/grasshopper/show", "tutorials/grasshopper/utils", "tutorials/grasshopper/workflow"], "filenames": ["api.rst", "api/compas_timber.connections.rst", "api/compas_timber.design.rst", "api/compas_timber.elements.rst", "api/compas_timber.errors.rst", "api/compas_timber.fabrication.rst", "api/compas_timber.ghpython.rst", "api/compas_timber.model.rst", "api/compas_timber.planning.rst", "api/compas_timber.rhino.rst", "api/generated/compas_timber.connections.BallNodeJoint.rst", "api/generated/compas_timber.connections.BallNodeJoint.ToString.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_features.rst", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.BallNodeJoint.copy.rst", "api/generated/compas_timber.connections.BallNodeJoint.create.rst", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.BallNodeJoint.sha256.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.validate_data.rst", "api/generated/compas_timber.connections.BeamGroupAnalyzer.rst", "api/generated/compas_timber.connections.BeamGroupAnalyzer.find.rst", "api/generated/compas_timber.connections.Cluster.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.find.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.from_model.rst", "api/generated/compas_timber.connections.ConnectionSolver.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_topology.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology.rst", "api/generated/compas_timber.connections.Joint.rst", "api/generated/compas_timber.connections.Joint.ToString.rst", "api/generated/compas_timber.connections.Joint.add_extensions.rst", "api/generated/compas_timber.connections.Joint.add_features.rst", "api/generated/compas_timber.connections.Joint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.Joint.copy.rst", "api/generated/compas_timber.connections.Joint.create.rst", "api/generated/compas_timber.connections.Joint.element_count_complies.rst", "api/generated/compas_timber.connections.Joint.from_json.rst", "api/generated/compas_timber.connections.Joint.from_jsonstring.rst", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.Joint.sha256.rst", "api/generated/compas_timber.connections.Joint.to_json.rst", "api/generated/compas_timber.connections.Joint.to_jsonstring.rst", "api/generated/compas_timber.connections.Joint.validate_data.rst", "api/generated/compas_timber.connections.JointTopology.rst", "api/generated/compas_timber.connections.JointTopology.get_name.rst", "api/generated/compas_timber.connections.LButtJoint.rst", "api/generated/compas_timber.connections.LButtJoint.ToString.rst", "api/generated/compas_timber.connections.LButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.LButtJoint.add_features.rst", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LButtJoint.copy.rst", "api/generated/compas_timber.connections.LButtJoint.create.rst", "api/generated/compas_timber.connections.LButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LButtJoint.from_json.rst", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LButtJoint.sha256.rst", "api/generated/compas_timber.connections.LButtJoint.to_json.rst", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles.rst", "api/generated/compas_timber.connections.LButtJoint.validate_data.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LLapJoint.rst", "api/generated/compas_timber.connections.LLapJoint.ToString.rst", "api/generated/compas_timber.connections.LLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LLapJoint.add_features.rst", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LLapJoint.copy.rst", "api/generated/compas_timber.connections.LLapJoint.create.rst", "api/generated/compas_timber.connections.LLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LLapJoint.from_json.rst", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LLapJoint.sha256.rst", "api/generated/compas_timber.connections.LLapJoint.to_json.rst", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LMiterJoint.rst", "api/generated/compas_timber.connections.LMiterJoint.ToString.rst", "api/generated/compas_timber.connections.LMiterJoint.add_extensions.rst", "api/generated/compas_timber.connections.LMiterJoint.add_features.rst", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LMiterJoint.copy.rst", "api/generated/compas_timber.connections.LMiterJoint.create.rst", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LMiterJoint.from_json.rst", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes.rst", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LMiterJoint.sha256.rst", "api/generated/compas_timber.connections.LMiterJoint.to_json.rst", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.validate_data.rst", "api/generated/compas_timber.connections.LapJoint.rst", "api/generated/compas_timber.connections.LapJoint.ToString.rst", "api/generated/compas_timber.connections.LapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LapJoint.add_features.rst", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LapJoint.copy.rst", "api/generated/compas_timber.connections.LapJoint.create.rst", "api/generated/compas_timber.connections.LapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LapJoint.from_json.rst", "api/generated/compas_timber.connections.LapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LapJoint.sha256.rst", "api/generated/compas_timber.connections.LapJoint.to_json.rst", "api/generated/compas_timber.connections.LapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.validate_data.rst", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.rst", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.find.rst", "api/generated/compas_timber.connections.QuadAnalyzer.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.create.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data.rst", "api/generated/compas_timber.connections.TButtJoint.rst", "api/generated/compas_timber.connections.TButtJoint.ToString.rst", "api/generated/compas_timber.connections.TButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.TButtJoint.add_features.rst", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TButtJoint.copy.rst", "api/generated/compas_timber.connections.TButtJoint.create.rst", "api/generated/compas_timber.connections.TButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TButtJoint.from_json.rst", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TButtJoint.sha256.rst", "api/generated/compas_timber.connections.TButtJoint.to_json.rst", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.validate_data.rst", "api/generated/compas_timber.connections.TDovetailJoint.rst", "api/generated/compas_timber.connections.TDovetailJoint.ToString.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_features.rst", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TDovetailJoint.copy.rst", "api/generated/compas_timber.connections.TDovetailJoint.create.rst", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool.rst", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TDovetailJoint.sha256.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.validate_data.rst", "api/generated/compas_timber.connections.TLapJoint.rst", "api/generated/compas_timber.connections.TLapJoint.ToString.rst", "api/generated/compas_timber.connections.TLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.TLapJoint.add_features.rst", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TLapJoint.copy.rst", "api/generated/compas_timber.connections.TLapJoint.create.rst", "api/generated/compas_timber.connections.TLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TLapJoint.from_json.rst", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TLapJoint.sha256.rst", "api/generated/compas_timber.connections.TLapJoint.to_json.rst", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.validate_data.rst", "api/generated/compas_timber.connections.TStepJoint.rst", "api/generated/compas_timber.connections.TStepJoint.ToString.rst", "api/generated/compas_timber.connections.TStepJoint.add_extensions.rst", "api/generated/compas_timber.connections.TStepJoint.add_features.rst", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TStepJoint.copy.rst", "api/generated/compas_timber.connections.TStepJoint.create.rst", "api/generated/compas_timber.connections.TStepJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TStepJoint.from_json.rst", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TStepJoint.set_step_depths.rst", "api/generated/compas_timber.connections.TStepJoint.sha256.rst", "api/generated/compas_timber.connections.TStepJoint.to_json.rst", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.validate_data.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.copy.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.create.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data.rst", "api/generated/compas_timber.connections.TripletAnalyzer.rst", "api/generated/compas_timber.connections.XLapJoint.rst", "api/generated/compas_timber.connections.XLapJoint.ToString.rst", "api/generated/compas_timber.connections.XLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.XLapJoint.add_features.rst", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XLapJoint.copy.rst", "api/generated/compas_timber.connections.XLapJoint.create.rst", "api/generated/compas_timber.connections.XLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XLapJoint.from_json.rst", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XLapJoint.sha256.rst", "api/generated/compas_timber.connections.XLapJoint.to_json.rst", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.validate_data.rst", "api/generated/compas_timber.connections.XNotchJoint.rst", "api/generated/compas_timber.connections.XNotchJoint.ToString.rst", "api/generated/compas_timber.connections.XNotchJoint.add_extensions.rst", "api/generated/compas_timber.connections.XNotchJoint.add_features.rst", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XNotchJoint.copy.rst", "api/generated/compas_timber.connections.XNotchJoint.create.rst", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XNotchJoint.from_json.rst", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XNotchJoint.sha256.rst", "api/generated/compas_timber.connections.XNotchJoint.to_json.rst", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.validate_data.rst", "api/generated/compas_timber.connections.YButtJoint.rst", "api/generated/compas_timber.connections.YButtJoint.ToString.rst", "api/generated/compas_timber.connections.YButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.YButtJoint.add_features.rst", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.YButtJoint.copy.rst", "api/generated/compas_timber.connections.YButtJoint.create.rst", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.YButtJoint.from_json.rst", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes.rst", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.YButtJoint.sha256.rst", "api/generated/compas_timber.connections.YButtJoint.to_json.rst", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.validate_data.rst", "api/generated/compas_timber.connections.find_neighboring_elements.rst", "api/generated/compas_timber.design.CategoryRule.rst", "api/generated/compas_timber.design.CategoryRule.ToString.rst", "api/generated/compas_timber.design.CategoryRule.comply.rst", "api/generated/compas_timber.design.CategoryRule.get_category_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_direct_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_topology_rules.rst", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.CategoryRule.reorder.rst", "api/generated/compas_timber.design.DebugInfomation.rst", "api/generated/compas_timber.design.DebugInfomation.ToString.rst", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_feature_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_joint_error.rst", "api/generated/compas_timber.design.DirectRule.rst", "api/generated/compas_timber.design.DirectRule.ToString.rst", "api/generated/compas_timber.design.DirectRule.comply.rst", "api/generated/compas_timber.design.DirectRule.contains.rst", "api/generated/compas_timber.design.DirectRule.get_category_rules.rst", "api/generated/compas_timber.design.DirectRule.get_direct_rules.rst", "api/generated/compas_timber.design.DirectRule.get_topology_rules.rst", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.FeatureDefinition.rst", "api/generated/compas_timber.design.FeatureDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.rst", "api/generated/compas_timber.design.JointDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.is_identical.rst", "api/generated/compas_timber.design.JointDefinition.match.rst", "api/generated/compas_timber.design.JointRule.rst", "api/generated/compas_timber.design.JointRule.comply.rst", "api/generated/compas_timber.design.JointRule.get_category_rules.rst", "api/generated/compas_timber.design.JointRule.get_direct_rules.rst", "api/generated/compas_timber.design.JointRule.get_topology_rules.rst", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.SurfaceModel.rst", "api/generated/compas_timber.design.SurfaceModel.beam_category_names.rst", "api/generated/compas_timber.design.SurfaceModel.create_model.rst", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps.rst", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements.rst", "api/generated/compas_timber.design.SurfaceModel.generate_frame.rst", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams.rst", "api/generated/compas_timber.design.SurfaceModel.generate_plates.rst", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines.rst", "api/generated/compas_timber.design.SurfaceModel.generate_studs.rst", "api/generated/compas_timber.design.SurfaceModel.generate_windows.rst", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections.rst", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices.rst", "api/generated/compas_timber.design.SurfaceModel.offset_elements.rst", "api/generated/compas_timber.design.SurfaceModel.parse_loops.rst", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_studs.rst", "api/generated/compas_timber.design.TopologyRule.rst", "api/generated/compas_timber.design.TopologyRule.ToString.rst", "api/generated/compas_timber.design.TopologyRule.comply.rst", "api/generated/compas_timber.design.TopologyRule.get_category_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_direct_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_topology_rules.rst", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.guess_joint_topology_2beams.rst", "api/generated/compas_timber.design.set_default_joints.rst", "api/generated/compas_timber.elements.Beam.rst", "api/generated/compas_timber.elements.Beam.ToString.rst", "api/generated/compas_timber.elements.Beam.add_blank_extension.rst", "api/generated/compas_timber.elements.Beam.add_feature.rst", "api/generated/compas_timber.elements.Beam.add_features.rst", "api/generated/compas_timber.elements.Beam.back_side.rst", "api/generated/compas_timber.elements.Beam.compute_aabb.rst", "api/generated/compas_timber.elements.Beam.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Beam.compute_geometry.rst", "api/generated/compas_timber.elements.Beam.compute_obb.rst", "api/generated/compas_timber.elements.Beam.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Beam.copy.rst", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point.rst", "api/generated/compas_timber.elements.Beam.extension_to_plane.rst", "api/generated/compas_timber.elements.Beam.from_centerline.rst", "api/generated/compas_timber.elements.Beam.from_endpoints.rst", "api/generated/compas_timber.elements.Beam.from_json.rst", "api/generated/compas_timber.elements.Beam.from_jsonstring.rst", "api/generated/compas_timber.elements.Beam.front_side.rst", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side.rst", "api/generated/compas_timber.elements.Beam.opp_side.rst", "api/generated/compas_timber.elements.Beam.remove_blank_extension.rst", "api/generated/compas_timber.elements.Beam.remove_features.rst", "api/generated/compas_timber.elements.Beam.reset.rst", "api/generated/compas_timber.elements.Beam.sha256.rst", "api/generated/compas_timber.elements.Beam.side_as_surface.rst", "api/generated/compas_timber.elements.Beam.to_json.rst", "api/generated/compas_timber.elements.Beam.to_jsonstring.rst", "api/generated/compas_timber.elements.Beam.transform.rst", "api/generated/compas_timber.elements.Beam.transformed.rst", "api/generated/compas_timber.elements.Beam.validate_data.rst", "api/generated/compas_timber.elements.Fastener.rst", "api/generated/compas_timber.elements.Fastener.ToString.rst", "api/generated/compas_timber.elements.Fastener.add_feature.rst", "api/generated/compas_timber.elements.Fastener.add_features.rst", "api/generated/compas_timber.elements.Fastener.compute_aabb.rst", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Fastener.compute_geometry.rst", "api/generated/compas_timber.elements.Fastener.compute_obb.rst", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Fastener.copy.rst", "api/generated/compas_timber.elements.Fastener.from_json.rst", "api/generated/compas_timber.elements.Fastener.from_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.remove_blank_extension.rst", "api/generated/compas_timber.elements.Fastener.remove_features.rst", "api/generated/compas_timber.elements.Fastener.reset.rst", "api/generated/compas_timber.elements.Fastener.sha256.rst", "api/generated/compas_timber.elements.Fastener.to_json.rst", "api/generated/compas_timber.elements.Fastener.to_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.transform.rst", "api/generated/compas_timber.elements.Fastener.transformed.rst", "api/generated/compas_timber.elements.Fastener.validate_data.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.copy.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data.rst", "api/generated/compas_timber.elements.Plate.rst", "api/generated/compas_timber.elements.Plate.ToString.rst", "api/generated/compas_timber.elements.Plate.add_feature.rst", "api/generated/compas_timber.elements.Plate.add_features.rst", "api/generated/compas_timber.elements.Plate.add_interface.rst", "api/generated/compas_timber.elements.Plate.check_outlines.rst", "api/generated/compas_timber.elements.Plate.compute_aabb.rst", "api/generated/compas_timber.elements.Plate.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Plate.compute_geometry.rst", "api/generated/compas_timber.elements.Plate.compute_obb.rst", "api/generated/compas_timber.elements.Plate.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Plate.copy.rst", "api/generated/compas_timber.elements.Plate.from_brep.rst", "api/generated/compas_timber.elements.Plate.from_json.rst", "api/generated/compas_timber.elements.Plate.from_jsonstring.rst", "api/generated/compas_timber.elements.Plate.from_outline_thickness.rst", "api/generated/compas_timber.elements.Plate.opp_side.rst", "api/generated/compas_timber.elements.Plate.remove_blank_extension.rst", "api/generated/compas_timber.elements.Plate.remove_features.rst", "api/generated/compas_timber.elements.Plate.reset.rst", "api/generated/compas_timber.elements.Plate.sha256.rst", "api/generated/compas_timber.elements.Plate.side_as_surface.rst", "api/generated/compas_timber.elements.Plate.to_json.rst", "api/generated/compas_timber.elements.Plate.to_jsonstring.rst", "api/generated/compas_timber.elements.Plate.transform.rst", "api/generated/compas_timber.elements.Plate.transformed.rst", "api/generated/compas_timber.elements.Plate.validate_data.rst", "api/generated/compas_timber.elements.TimberElement.rst", "api/generated/compas_timber.elements.TimberElement.ToString.rst", "api/generated/compas_timber.elements.TimberElement.add_feature.rst", "api/generated/compas_timber.elements.TimberElement.add_features.rst", "api/generated/compas_timber.elements.TimberElement.compute_aabb.rst", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh.rst", "api/generated/compas_timber.elements.TimberElement.compute_geometry.rst", "api/generated/compas_timber.elements.TimberElement.compute_obb.rst", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation.rst", "api/generated/compas_timber.elements.TimberElement.copy.rst", "api/generated/compas_timber.elements.TimberElement.from_json.rst", "api/generated/compas_timber.elements.TimberElement.from_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension.rst", "api/generated/compas_timber.elements.TimberElement.remove_features.rst", "api/generated/compas_timber.elements.TimberElement.reset.rst", "api/generated/compas_timber.elements.TimberElement.sha256.rst", "api/generated/compas_timber.elements.TimberElement.to_json.rst", "api/generated/compas_timber.elements.TimberElement.to_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.transform.rst", "api/generated/compas_timber.elements.TimberElement.transformed.rst", "api/generated/compas_timber.elements.TimberElement.validate_data.rst", "api/generated/compas_timber.elements.Wall.rst", "api/generated/compas_timber.elements.Wall.ToString.rst", "api/generated/compas_timber.elements.Wall.add_feature.rst", "api/generated/compas_timber.elements.Wall.add_features.rst", "api/generated/compas_timber.elements.Wall.compute_aabb.rst", "api/generated/compas_timber.elements.Wall.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Wall.compute_geometry.rst", "api/generated/compas_timber.elements.Wall.compute_obb.rst", "api/generated/compas_timber.elements.Wall.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Wall.copy.rst", "api/generated/compas_timber.elements.Wall.from_boundary.rst", "api/generated/compas_timber.elements.Wall.from_brep.rst", "api/generated/compas_timber.elements.Wall.from_json.rst", "api/generated/compas_timber.elements.Wall.from_jsonstring.rst", "api/generated/compas_timber.elements.Wall.remove_blank_extension.rst", "api/generated/compas_timber.elements.Wall.remove_features.rst", "api/generated/compas_timber.elements.Wall.reset.rst", "api/generated/compas_timber.elements.Wall.rotate.rst", "api/generated/compas_timber.elements.Wall.sha256.rst", "api/generated/compas_timber.elements.Wall.to_json.rst", "api/generated/compas_timber.elements.Wall.to_jsonstring.rst", "api/generated/compas_timber.elements.Wall.transform.rst", "api/generated/compas_timber.elements.Wall.transformed.rst", "api/generated/compas_timber.elements.Wall.validate_data.rst", "api/generated/compas_timber.errors.BeamJoiningError.rst", "api/generated/compas_timber.errors.FastenerApplicationError.rst", "api/generated/compas_timber.errors.FeatureApplicationError.rst", "api/generated/compas_timber.fabrication.BTLxPart.rst", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals.rst", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.copy.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data.rst", "api/generated/compas_timber.fabrication.BTLxWriter.rst", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml.rst", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer.rst", "api/generated/compas_timber.fabrication.BTLxWriter.write.rst", "api/generated/compas_timber.fabrication.DoubleCut.rst", "api/generated/compas_timber.fabrication.DoubleCut.ToString.rst", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DoubleCut.apply.rst", "api/generated/compas_timber.fabrication.DoubleCut.copy.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.scale.rst", "api/generated/compas_timber.fabrication.DoubleCut.scaled.rst", "api/generated/compas_timber.fabrication.DoubleCut.sha256.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailMortise.rst", "api/generated/compas_timber.fabrication.DovetailMortise.ToString.rst", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailMortise.apply.rst", "api/generated/compas_timber.fabrication.DovetailMortise.copy.rst", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scale.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scaled.rst", "api/generated/compas_timber.fabrication.DovetailMortise.sha256.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailTenon.rst", "api/generated/compas_timber.fabrication.DovetailTenon.ToString.rst", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailTenon.apply.rst", "api/generated/compas_timber.fabrication.DovetailTenon.copy.rst", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scale.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scaled.rst", "api/generated/compas_timber.fabrication.DovetailTenon.sha256.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data.rst", "api/generated/compas_timber.fabrication.Drilling.rst", "api/generated/compas_timber.fabrication.Drilling.ToString.rst", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Drilling.apply.rst", "api/generated/compas_timber.fabrication.Drilling.copy.rst", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_json.rst", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.scale.rst", "api/generated/compas_timber.fabrication.Drilling.scaled.rst", "api/generated/compas_timber.fabrication.Drilling.sha256.rst", "api/generated/compas_timber.fabrication.Drilling.to_json.rst", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.validate_data.rst", "api/generated/compas_timber.fabrication.EdgePositionType.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data.rst", "api/generated/compas_timber.fabrication.JackRafterCut.rst", "api/generated/compas_timber.fabrication.JackRafterCut.ToString.rst", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.JackRafterCut.apply.rst", "api/generated/compas_timber.fabrication.JackRafterCut.copy.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scale.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scaled.rst", "api/generated/compas_timber.fabrication.JackRafterCut.sha256.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.rst", "api/generated/compas_timber.fabrication.Lap.ToString.rst", "api/generated/compas_timber.fabrication.Lap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Lap.apply.rst", "api/generated/compas_timber.fabrication.Lap.copy.rst", "api/generated/compas_timber.fabrication.Lap.from_json.rst", "api/generated/compas_timber.fabrication.Lap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.scale.rst", "api/generated/compas_timber.fabrication.Lap.scaled.rst", "api/generated/compas_timber.fabrication.Lap.sha256.rst", "api/generated/compas_timber.fabrication.Lap.to_json.rst", "api/generated/compas_timber.fabrication.Lap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LimitationTopType.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.apply.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.copy.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.MachiningLimits.rst", "api/generated/compas_timber.fabrication.Mortise.rst", "api/generated/compas_timber.fabrication.Mortise.ToString.rst", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Mortise.apply.rst", "api/generated/compas_timber.fabrication.Mortise.copy.rst", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_json.rst", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.scale.rst", "api/generated/compas_timber.fabrication.Mortise.scaled.rst", "api/generated/compas_timber.fabrication.Mortise.sha256.rst", "api/generated/compas_timber.fabrication.Mortise.to_json.rst", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.validate_data.rst", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.OrientationType.rst", "api/generated/compas_timber.fabrication.Pocket.rst", "api/generated/compas_timber.fabrication.Pocket.ToString.rst", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Pocket.apply.rst", "api/generated/compas_timber.fabrication.Pocket.copy.rst", "api/generated/compas_timber.fabrication.Pocket.from_json.rst", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.scale.rst", "api/generated/compas_timber.fabrication.Pocket.scaled.rst", "api/generated/compas_timber.fabrication.Pocket.sha256.rst", "api/generated/compas_timber.fabrication.Pocket.to_json.rst", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.validate_data.rst", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Slot.rst", "api/generated/compas_timber.fabrication.Slot.ToString.rst", "api/generated/compas_timber.fabrication.Slot.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Slot.apply.rst", "api/generated/compas_timber.fabrication.Slot.copy.rst", "api/generated/compas_timber.fabrication.Slot.from_json.rst", "api/generated/compas_timber.fabrication.Slot.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Slot.scale.rst", "api/generated/compas_timber.fabrication.Slot.scaled.rst", "api/generated/compas_timber.fabrication.Slot.sha256.rst", "api/generated/compas_timber.fabrication.Slot.to_json.rst", "api/generated/compas_timber.fabrication.Slot.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.validate_data.rst", "api/generated/compas_timber.fabrication.StepJoint.rst", "api/generated/compas_timber.fabrication.StepJoint.ToString.rst", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJoint.add_tenon.rst", "api/generated/compas_timber.fabrication.StepJoint.apply.rst", "api/generated/compas_timber.fabrication.StepJoint.copy.rst", "api/generated/compas_timber.fabrication.StepJoint.from_json.rst", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.scale.rst", "api/generated/compas_timber.fabrication.StepJoint.scaled.rst", "api/generated/compas_timber.fabrication.StepJoint.sha256.rst", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.to_json.rst", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.validate_data.rst", "api/generated/compas_timber.fabrication.StepJointNotch.rst", "api/generated/compas_timber.fabrication.StepJointNotch.ToString.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJointNotch.apply.rst", "api/generated/compas_timber.fabrication.StepJointNotch.copy.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scale.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scaled.rst", "api/generated/compas_timber.fabrication.StepJointNotch.sha256.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data.rst", "api/generated/compas_timber.fabrication.StepShapeType.rst", "api/generated/compas_timber.fabrication.Tenon.rst", "api/generated/compas_timber.fabrication.Tenon.ToString.rst", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Tenon.apply.rst", "api/generated/compas_timber.fabrication.Tenon.copy.rst", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.from_json.rst", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.scale.rst", "api/generated/compas_timber.fabrication.Tenon.scaled.rst", "api/generated/compas_timber.fabrication.Tenon.sha256.rst", "api/generated/compas_timber.fabrication.Tenon.to_json.rst", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.validate_data.rst", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.TenonShapeType.rst", "api/generated/compas_timber.ghpython.add_gh_param.rst", "api/generated/compas_timber.ghpython.clear_gh_params.rst", "api/generated/compas_timber.ghpython.get_leaf_subclasses.rst", "api/generated/compas_timber.ghpython.item_input_valid.rst", "api/generated/compas_timber.ghpython.list_input_valid.rst", "api/generated/compas_timber.ghpython.manage_dynamic_params.rst", "api/generated/compas_timber.ghpython.rename_gh_input.rst", "api/generated/compas_timber.model.TimberModel.rst", "api/generated/compas_timber.model.TimberModel.ToString.rst", "api/generated/compas_timber.model.TimberModel.add_element.rst", "api/generated/compas_timber.model.TimberModel.add_elements.rst", "api/generated/compas_timber.model.TimberModel.add_group.rst", "api/generated/compas_timber.model.TimberModel.add_group_element.rst", "api/generated/compas_timber.model.TimberModel.add_interaction.rst", "api/generated/compas_timber.model.TimberModel.add_joint.rst", "api/generated/compas_timber.model.TimberModel.add_material.rst", "api/generated/compas_timber.model.TimberModel.assign_material.rst", "api/generated/compas_timber.model.TimberModel.compute_aabb.rst", "api/generated/compas_timber.model.TimberModel.compute_obb.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_beams.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls.rst", "api/generated/compas_timber.model.TimberModel.copy.rst", "api/generated/compas_timber.model.TimberModel.element_by_guid.rst", "api/generated/compas_timber.model.TimberModel.elements.rst", "api/generated/compas_timber.model.TimberModel.elements_connected_by.rst", "api/generated/compas_timber.model.TimberModel.from_json.rst", "api/generated/compas_timber.model.TimberModel.from_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.get_elements_in_group.rst", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element.rst", "api/generated/compas_timber.model.TimberModel.has_element.rst", "api/generated/compas_timber.model.TimberModel.has_group.rst", "api/generated/compas_timber.model.TimberModel.has_interaction.rst", "api/generated/compas_timber.model.TimberModel.has_material.rst", "api/generated/compas_timber.model.TimberModel.interactions.rst", "api/generated/compas_timber.model.TimberModel.materials.rst", "api/generated/compas_timber.model.TimberModel.process_joinery.rst", "api/generated/compas_timber.model.TimberModel.remove_element.rst", "api/generated/compas_timber.model.TimberModel.remove_interaction.rst", "api/generated/compas_timber.model.TimberModel.remove_joint.rst", "api/generated/compas_timber.model.TimberModel.rotate.rst", "api/generated/compas_timber.model.TimberModel.rotated.rst", "api/generated/compas_timber.model.TimberModel.scale.rst", "api/generated/compas_timber.model.TimberModel.scaled.rst", "api/generated/compas_timber.model.TimberModel.set_topologies.rst", "api/generated/compas_timber.model.TimberModel.sha256.rst", "api/generated/compas_timber.model.TimberModel.to_json.rst", "api/generated/compas_timber.model.TimberModel.to_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.transform.rst", "api/generated/compas_timber.model.TimberModel.transform_numpy.rst", "api/generated/compas_timber.model.TimberModel.transformed.rst", "api/generated/compas_timber.model.TimberModel.transformed_numpy.rst", "api/generated/compas_timber.model.TimberModel.translate.rst", "api/generated/compas_timber.model.TimberModel.translated.rst", "api/generated/compas_timber.model.TimberModel.validate_data.rst", "api/generated/compas_timber.planning.Actor.rst", "api/generated/compas_timber.planning.Actor.get_name.rst", "api/generated/compas_timber.planning.BuildingPlan.rst", "api/generated/compas_timber.planning.BuildingPlan.ToString.rst", "api/generated/compas_timber.planning.BuildingPlan.add_step.rst", "api/generated/compas_timber.planning.BuildingPlan.copy.rst", "api/generated/compas_timber.planning.BuildingPlan.from_json.rst", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.sha256.rst", "api/generated/compas_timber.planning.BuildingPlan.to_json.rst", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.validate_data.rst", "api/generated/compas_timber.planning.BuildingPlanParser.rst", "api/generated/compas_timber.planning.BuildingPlanParser.parse.rst", "api/generated/compas_timber.planning.BuildingPlanParser.serialize.rst", "api/generated/compas_timber.planning.Instruction.rst", "api/generated/compas_timber.planning.Instruction.ToString.rst", "api/generated/compas_timber.planning.Instruction.copy.rst", "api/generated/compas_timber.planning.Instruction.from_json.rst", "api/generated/compas_timber.planning.Instruction.from_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.sha256.rst", "api/generated/compas_timber.planning.Instruction.to_json.rst", "api/generated/compas_timber.planning.Instruction.to_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.transform.rst", "api/generated/compas_timber.planning.Instruction.validate_data.rst", "api/generated/compas_timber.planning.LinearDimension.rst", "api/generated/compas_timber.planning.LinearDimension.ToString.rst", "api/generated/compas_timber.planning.LinearDimension.copy.rst", "api/generated/compas_timber.planning.LinearDimension.from_json.rst", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.sha256.rst", "api/generated/compas_timber.planning.LinearDimension.to_json.rst", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.transform.rst", "api/generated/compas_timber.planning.LinearDimension.validate_data.rst", "api/generated/compas_timber.planning.Model3d.rst", "api/generated/compas_timber.planning.Model3d.ToString.rst", "api/generated/compas_timber.planning.Model3d.copy.rst", "api/generated/compas_timber.planning.Model3d.from_json.rst", "api/generated/compas_timber.planning.Model3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.sha256.rst", "api/generated/compas_timber.planning.Model3d.to_json.rst", "api/generated/compas_timber.planning.Model3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.transform.rst", "api/generated/compas_timber.planning.Model3d.validate_data.rst", "api/generated/compas_timber.planning.SimpleSequenceGenerator.rst", "api/generated/compas_timber.planning.Step.rst", "api/generated/compas_timber.planning.Step.ToString.rst", "api/generated/compas_timber.planning.Step.copy.rst", "api/generated/compas_timber.planning.Step.from_json.rst", "api/generated/compas_timber.planning.Step.from_jsonstring.rst", "api/generated/compas_timber.planning.Step.sha256.rst", "api/generated/compas_timber.planning.Step.to_json.rst", "api/generated/compas_timber.planning.Step.to_jsonstring.rst", "api/generated/compas_timber.planning.Step.transform.rst", "api/generated/compas_timber.planning.Step.validate_data.rst", "api/generated/compas_timber.planning.Text3d.rst", "api/generated/compas_timber.planning.Text3d.ToString.rst", "api/generated/compas_timber.planning.Text3d.copy.rst", "api/generated/compas_timber.planning.Text3d.from_json.rst", "api/generated/compas_timber.planning.Text3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.sha256.rst", "api/generated/compas_timber.planning.Text3d.to_json.rst", "api/generated/compas_timber.planning.Text3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.transform.rst", "api/generated/compas_timber.planning.Text3d.validate_data.rst", "api/generated/compas_timber.rhino.find_neighboring_elements.rst", "citing.rst", "contribution.rst", "contribution/BTLx_contribution_guide.rst", "contribution/joints_contribution_guide.rst", "index.rst", "installation.rst", "license.rst", "tutorials.rst", "tutorials/grasshopper/attributes.rst", "tutorials/grasshopper/beams.rst", "tutorials/grasshopper/design.rst", "tutorials/grasshopper/examples.rst", "tutorials/grasshopper/fabrication.rst", "tutorials/grasshopper/features.rst", "tutorials/grasshopper/installation.rst", "tutorials/grasshopper/joint_rules.rst", "tutorials/grasshopper/model.rst", "tutorials/grasshopper/show.rst", "tutorials/grasshopper/utils.rst", "tutorials/grasshopper/workflow.rst"], "titles": ["API Reference", "compas_timber.connections", "compas_timber.design", "compas_timber.elements", "compas_timber.errors", "compas_timber.fabrication", "compas_timber.ghpython", "compas_timber.model", "compas_timber.planning", "compas_timber.rhino", "BallNodeJoint", "BallNodeJoint.ToString", "BallNodeJoint.add_extensions", "BallNodeJoint.add_features", "BallNodeJoint.check_elements_compatibility", "BallNodeJoint.copy", "BallNodeJoint.create", "BallNodeJoint.element_count_complies", "BallNodeJoint.from_json", "BallNodeJoint.from_jsonstring", "BallNodeJoint.restore_beams_from_keys", "BallNodeJoint.sha256", "BallNodeJoint.to_json", "BallNodeJoint.to_jsonstring", "BallNodeJoint.validate_data", "BeamGroupAnalyzer", "BeamGroupAnalyzer.find", "Cluster", "CompositeAnalyzer", "CompositeAnalyzer.find", "CompositeAnalyzer.from_model", "ConnectionSolver", "ConnectionSolver.find_intersecting_pairs", "ConnectionSolver.find_topology", "ConnectionSolver.find_wall_wall_topology", "Joint", "Joint.ToString", "Joint.add_extensions", "Joint.add_features", "Joint.check_elements_compatibility", "Joint.copy", "Joint.create", "Joint.element_count_complies", "Joint.from_json", "Joint.from_jsonstring", "Joint.restore_beams_from_keys", "Joint.sha256", "Joint.to_json", "Joint.to_jsonstring", "Joint.validate_data", "JointTopology", "JointTopology.get_name", "LButtJoint", "LButtJoint.ToString", "LButtJoint.add_extensions", "LButtJoint.add_features", "LButtJoint.check_elements_compatibility", "LButtJoint.copy", "LButtJoint.create", "LButtJoint.element_count_complies", "LButtJoint.from_json", "LButtJoint.from_jsonstring", "LButtJoint.restore_beams_from_keys", "LButtJoint.sha256", "LButtJoint.to_json", "LButtJoint.to_jsonstring", "LButtJoint.update_beam_roles", "LButtJoint.validate_data", "LFrenchRidgeLapJoint", "LFrenchRidgeLapJoint.ToString", "LFrenchRidgeLapJoint.add_extensions", "LFrenchRidgeLapJoint.add_features", "LFrenchRidgeLapJoint.check_elements_compatibility", "LFrenchRidgeLapJoint.copy", "LFrenchRidgeLapJoint.create", "LFrenchRidgeLapJoint.element_count_complies", "LFrenchRidgeLapJoint.from_json", "LFrenchRidgeLapJoint.from_jsonstring", "LFrenchRidgeLapJoint.restore_beams_from_keys", "LFrenchRidgeLapJoint.sha256", "LFrenchRidgeLapJoint.to_json", "LFrenchRidgeLapJoint.to_jsonstring", "LFrenchRidgeLapJoint.validate_data", "LLapJoint", "LLapJoint.ToString", "LLapJoint.add_extensions", "LLapJoint.add_features", "LLapJoint.check_elements_compatibility", "LLapJoint.copy", "LLapJoint.create", "LLapJoint.element_count_complies", "LLapJoint.from_json", "LLapJoint.from_jsonstring", "LLapJoint.restore_beams_from_keys", "LLapJoint.sha256", "LLapJoint.to_json", "LLapJoint.to_jsonstring", "LLapJoint.validate_data", "LMiterJoint", "LMiterJoint.ToString", "LMiterJoint.add_extensions", "LMiterJoint.add_features", "LMiterJoint.check_elements_compatibility", "LMiterJoint.copy", "LMiterJoint.create", "LMiterJoint.element_count_complies", "LMiterJoint.from_json", "LMiterJoint.from_jsonstring", "LMiterJoint.get_cutoff_plane", "LMiterJoint.get_cutting_planes", "LMiterJoint.restore_beams_from_keys", "LMiterJoint.sha256", "LMiterJoint.to_json", "LMiterJoint.to_jsonstring", "LMiterJoint.validate_data", "LapJoint", "LapJoint.ToString", "LapJoint.add_extensions", "LapJoint.add_features", "LapJoint.check_elements_compatibility", "LapJoint.copy", "LapJoint.create", "LapJoint.element_count_complies", "LapJoint.from_json", "LapJoint.from_jsonstring", "LapJoint.restore_beams_from_keys", "LapJoint.sha256", "LapJoint.to_json", "LapJoint.to_jsonstring", "LapJoint.validate_data", "NBeamKDTreeAnalyzer", "NBeamKDTreeAnalyzer.find", "QuadAnalyzer", "TBirdsmouthJoint", "TBirdsmouthJoint.ToString", "TBirdsmouthJoint.add_extensions", "TBirdsmouthJoint.add_features", "TBirdsmouthJoint.check_elements_compatibility", "TBirdsmouthJoint.copy", "TBirdsmouthJoint.create", "TBirdsmouthJoint.element_count_complies", "TBirdsmouthJoint.from_json", "TBirdsmouthJoint.from_jsonstring", "TBirdsmouthJoint.restore_beams_from_keys", "TBirdsmouthJoint.sha256", "TBirdsmouthJoint.to_json", "TBirdsmouthJoint.to_jsonstring", "TBirdsmouthJoint.validate_data", "TButtJoint", "TButtJoint.ToString", "TButtJoint.add_extensions", "TButtJoint.add_features", "TButtJoint.check_elements_compatibility", "TButtJoint.copy", "TButtJoint.create", "TButtJoint.element_count_complies", "TButtJoint.from_json", "TButtJoint.from_jsonstring", "TButtJoint.restore_beams_from_keys", "TButtJoint.sha256", "TButtJoint.to_json", "TButtJoint.to_jsonstring", "TButtJoint.validate_data", "TDovetailJoint", "TDovetailJoint.ToString", "TDovetailJoint.add_extensions", "TDovetailJoint.add_features", "TDovetailJoint.check_elements_compatibility", "TDovetailJoint.copy", "TDovetailJoint.create", "TDovetailJoint.define_dovetail_tool", "TDovetailJoint.element_count_complies", "TDovetailJoint.from_json", "TDovetailJoint.from_jsonstring", "TDovetailJoint.restore_beams_from_keys", "TDovetailJoint.sha256", "TDovetailJoint.to_json", "TDovetailJoint.to_jsonstring", "TDovetailJoint.validate_data", "TLapJoint", "TLapJoint.ToString", "TLapJoint.add_extensions", "TLapJoint.add_features", "TLapJoint.check_elements_compatibility", "TLapJoint.copy", "TLapJoint.create", "TLapJoint.element_count_complies", "TLapJoint.from_json", "TLapJoint.from_jsonstring", "TLapJoint.restore_beams_from_keys", "TLapJoint.sha256", "TLapJoint.to_json", "TLapJoint.to_jsonstring", "TLapJoint.validate_data", "TStepJoint", "TStepJoint.ToString", "TStepJoint.add_extensions", "TStepJoint.add_features", "TStepJoint.check_elements_compatibility", "TStepJoint.copy", "TStepJoint.create", "TStepJoint.element_count_complies", "TStepJoint.from_json", "TStepJoint.from_jsonstring", "TStepJoint.restore_beams_from_keys", "TStepJoint.set_step_depths", "TStepJoint.sha256", "TStepJoint.to_json", "TStepJoint.to_jsonstring", "TStepJoint.validate_data", "TenonMortiseJoint", "TenonMortiseJoint.ToString", "TenonMortiseJoint.add_extensions", "TenonMortiseJoint.add_features", "TenonMortiseJoint.check_elements_compatibility", "TenonMortiseJoint.copy", "TenonMortiseJoint.create", "TenonMortiseJoint.element_count_complies", "TenonMortiseJoint.from_json", "TenonMortiseJoint.from_jsonstring", "TenonMortiseJoint.restore_beams_from_keys", "TenonMortiseJoint.set_default_values", "TenonMortiseJoint.sha256", "TenonMortiseJoint.to_json", "TenonMortiseJoint.to_jsonstring", "TenonMortiseJoint.validate_data", "TripletAnalyzer", "XLapJoint", "XLapJoint.ToString", "XLapJoint.add_extensions", "XLapJoint.add_features", "XLapJoint.check_elements_compatibility", "XLapJoint.copy", "XLapJoint.create", "XLapJoint.element_count_complies", "XLapJoint.from_json", "XLapJoint.from_jsonstring", "XLapJoint.restore_beams_from_keys", "XLapJoint.sha256", "XLapJoint.to_json", "XLapJoint.to_jsonstring", "XLapJoint.validate_data", "XNotchJoint", "XNotchJoint.ToString", "XNotchJoint.add_extensions", "XNotchJoint.add_features", "XNotchJoint.check_elements_compatibility", "XNotchJoint.copy", "XNotchJoint.create", "XNotchJoint.element_count_complies", "XNotchJoint.from_json", "XNotchJoint.from_jsonstring", "XNotchJoint.restore_beams_from_keys", "XNotchJoint.sha256", "XNotchJoint.to_json", "XNotchJoint.to_jsonstring", "XNotchJoint.validate_data", "YButtJoint", "YButtJoint.ToString", "YButtJoint.add_extensions", "YButtJoint.add_features", "YButtJoint.check_elements_compatibility", "YButtJoint.copy", "YButtJoint.create", "YButtJoint.cross_beam_ref_side_index", "YButtJoint.element_count_complies", "YButtJoint.from_json", "YButtJoint.from_jsonstring", "YButtJoint.get_miter_planes", "YButtJoint.main_beam_ref_side_index", "YButtJoint.restore_beams_from_keys", "YButtJoint.sha256", "YButtJoint.to_json", "YButtJoint.to_jsonstring", "YButtJoint.validate_data", "find_neighboring_elements", "CategoryRule", "CategoryRule.ToString", "CategoryRule.comply", "CategoryRule.get_category_rules", "CategoryRule.get_direct_rules", "CategoryRule.get_topology_rules", "CategoryRule.joints_from_beams_and_rules", "CategoryRule.reorder", "DebugInfomation", "DebugInfomation.ToString", "DebugInfomation.add_fastener_error", "DebugInfomation.add_feature_error", "DebugInfomation.add_joint_error", "DirectRule", "DirectRule.ToString", "DirectRule.comply", "DirectRule.contains", "DirectRule.get_category_rules", "DirectRule.get_direct_rules", "DirectRule.get_topology_rules", "DirectRule.joints_from_beams_and_rules", "FeatureDefinition", "FeatureDefinition.ToString", "JointDefinition", "JointDefinition.ToString", "JointDefinition.is_identical", "JointDefinition.match", "JointRule", "JointRule.comply", "JointRule.get_category_rules", "JointRule.get_direct_rules", "JointRule.get_topology_rules", "JointRule.joints_from_beams_and_rules", "SurfaceModel", "SurfaceModel.beam_category_names", "SurfaceModel.create_model", "SurfaceModel.cull_overlaps", "SurfaceModel.distance_between_elements", "SurfaceModel.generate_frame", "SurfaceModel.generate_perimeter_beams", "SurfaceModel.generate_plates", "SurfaceModel.generate_stud_lines", "SurfaceModel.generate_studs", "SurfaceModel.generate_windows", "SurfaceModel.get_beam_intersections", "SurfaceModel.get_interior_segment_indices", "SurfaceModel.offset_elements", "SurfaceModel.parse_loops", "SurfaceModel.trim_jack_studs", "SurfaceModel.trim_king_studs", "SurfaceModel.trim_studs", "TopologyRule", "TopologyRule.ToString", "TopologyRule.comply", "TopologyRule.get_category_rules", "TopologyRule.get_direct_rules", "TopologyRule.get_topology_rules", "TopologyRule.joints_from_beams_and_rules", "guess_joint_topology_2beams", "set_default_joints", "Beam", "Beam.ToString", "Beam.add_blank_extension", "Beam.add_feature", "Beam.add_features", "Beam.back_side", "Beam.compute_aabb", "Beam.compute_collision_mesh", "Beam.compute_geometry", "Beam.compute_obb", "Beam.compute_worldtransformation", "Beam.copy", "Beam.endpoint_closest_to_point", "Beam.extension_to_plane", "Beam.from_centerline", "Beam.from_endpoints", "Beam.from_json", "Beam.from_jsonstring", "Beam.front_side", "Beam.get_dimensions_relative_to_side", "Beam.opp_side", "Beam.remove_blank_extension", "Beam.remove_features", "Beam.reset", "Beam.sha256", "Beam.side_as_surface", "Beam.to_json", "Beam.to_jsonstring", "Beam.transform", "Beam.transformed", "Beam.validate_data", "Fastener", "Fastener.ToString", "Fastener.add_feature", "Fastener.add_features", "Fastener.compute_aabb", "Fastener.compute_collision_mesh", "Fastener.compute_geometry", "Fastener.compute_obb", "Fastener.compute_worldtransformation", "Fastener.copy", "Fastener.from_json", "Fastener.from_jsonstring", "Fastener.remove_blank_extension", "Fastener.remove_features", "Fastener.reset", "Fastener.sha256", "Fastener.to_json", "Fastener.to_jsonstring", "Fastener.transform", "Fastener.transformed", "Fastener.validate_data", "FastenerTimberInterface", "FastenerTimberInterface.ToString", "FastenerTimberInterface.copy", "FastenerTimberInterface.from_json", "FastenerTimberInterface.from_jsonstring", "FastenerTimberInterface.get_features", "FastenerTimberInterface.sha256", "FastenerTimberInterface.to_json", "FastenerTimberInterface.to_jsonstring", "FastenerTimberInterface.validate_data", "Plate", "Plate.ToString", "Plate.add_feature", "Plate.add_features", "Plate.add_interface", "Plate.check_outlines", "Plate.compute_aabb", "Plate.compute_collision_mesh", "Plate.compute_geometry", "Plate.compute_obb", "Plate.compute_worldtransformation", "Plate.copy", "Plate.from_brep", "Plate.from_json", "Plate.from_jsonstring", "Plate.from_outline_thickness", "Plate.opp_side", "Plate.remove_blank_extension", "Plate.remove_features", "Plate.reset", "Plate.sha256", "Plate.side_as_surface", "Plate.to_json", "Plate.to_jsonstring", "Plate.transform", "Plate.transformed", "Plate.validate_data", "TimberElement", "TimberElement.ToString", "TimberElement.add_feature", "TimberElement.add_features", "TimberElement.compute_aabb", "TimberElement.compute_collision_mesh", "TimberElement.compute_geometry", "TimberElement.compute_obb", "TimberElement.compute_worldtransformation", "TimberElement.copy", "TimberElement.from_json", "TimberElement.from_jsonstring", "TimberElement.remove_blank_extension", "TimberElement.remove_features", "TimberElement.reset", "TimberElement.sha256", "TimberElement.to_json", "TimberElement.to_jsonstring", "TimberElement.transform", "TimberElement.transformed", "TimberElement.validate_data", "Wall", "Wall.ToString", "Wall.add_feature", "Wall.add_features", "Wall.compute_aabb", "Wall.compute_collision_mesh", "Wall.compute_geometry", "Wall.compute_obb", "Wall.compute_worldtransformation", "Wall.copy", "Wall.from_boundary", "Wall.from_brep", "Wall.from_json", "Wall.from_jsonstring", "Wall.remove_blank_extension", "Wall.remove_features", "Wall.reset", "Wall.rotate", "Wall.sha256", "Wall.to_json", "Wall.to_jsonstring", "Wall.transform", "Wall.transformed", "Wall.validate_data", "BeamJoiningError", "FastenerApplicationError", "FeatureApplicationError", "BTLxPart", "BTLxPart.et_point_vals", "BTLxPart.ref_side_from_face", "BTLxProcessing", "BTLxProcessing.ToString", "BTLxProcessing.add_subprocessing", "BTLxProcessing.copy", "BTLxProcessing.from_json", "BTLxProcessing.from_jsonstring", "BTLxProcessing.scaled", "BTLxProcessing.sha256", "BTLxProcessing.to_json", "BTLxProcessing.to_jsonstring", "BTLxProcessing.validate_data", "BTLxWriter", "BTLxWriter.model_to_xml", "BTLxWriter.register_type_serializer", "BTLxWriter.write", "DoubleCut", "DoubleCut.ToString", "DoubleCut.add_subprocessing", "DoubleCut.apply", "DoubleCut.copy", "DoubleCut.from_json", "DoubleCut.from_jsonstring", "DoubleCut.from_planes_and_beam", "DoubleCut.from_shapes_and_element", "DoubleCut.planes_from_params_and_beam", "DoubleCut.scale", "DoubleCut.scaled", "DoubleCut.sha256", "DoubleCut.to_json", "DoubleCut.to_jsonstring", "DoubleCut.validate_data", "DovetailMortise", "DovetailMortise.ToString", "DovetailMortise.add_subprocessing", "DovetailMortise.apply", "DovetailMortise.copy", "DovetailMortise.define_dovetail_tool", "DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "DovetailMortise.dovetail_volume_from_params_and_beam", "DovetailMortise.frame_from_params_and_beam", "DovetailMortise.from_frame_and_beam", "DovetailMortise.from_json", "DovetailMortise.from_jsonstring", "DovetailMortise.scale", "DovetailMortise.scaled", "DovetailMortise.sha256", "DovetailMortise.to_json", "DovetailMortise.to_jsonstring", "DovetailMortise.validate_data", "DovetailTenon", "DovetailTenon.ToString", "DovetailTenon.add_subprocessing", "DovetailTenon.apply", "DovetailTenon.copy", "DovetailTenon.define_dovetail_tool", "DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "DovetailTenon.dovetail_volume_from_params_and_beam", "DovetailTenon.frame_from_params_and_beam", "DovetailTenon.from_json", "DovetailTenon.from_jsonstring", "DovetailTenon.from_plane_and_beam", "DovetailTenon.scale", "DovetailTenon.scaled", "DovetailTenon.sha256", "DovetailTenon.to_json", "DovetailTenon.to_jsonstring", "DovetailTenon.validate_data", "Drilling", "Drilling.ToString", "Drilling.add_subprocessing", "Drilling.apply", "Drilling.copy", "Drilling.cylinder_from_params_and_element", "Drilling.from_json", "Drilling.from_jsonstring", "Drilling.from_line_and_element", "Drilling.from_shapes_and_element", "Drilling.scale", "Drilling.scaled", "Drilling.sha256", "Drilling.to_json", "Drilling.to_jsonstring", "Drilling.validate_data", "EdgePositionType", "FrenchRidgeLap", "FrenchRidgeLap.ToString", "FrenchRidgeLap.add_subprocessing", "FrenchRidgeLap.apply", "FrenchRidgeLap.copy", "FrenchRidgeLap.frame_from_params_and_beam", "FrenchRidgeLap.from_beam_beam_and_plane", "FrenchRidgeLap.from_json", "FrenchRidgeLap.from_jsonstring", "FrenchRidgeLap.lap_volume_from_params_and_beam", "FrenchRidgeLap.scale", "FrenchRidgeLap.scaled", "FrenchRidgeLap.sha256", "FrenchRidgeLap.to_json", "FrenchRidgeLap.to_jsonstring", "FrenchRidgeLap.validate_data", "JackRafterCut", "JackRafterCut.ToString", "JackRafterCut.add_subprocessing", "JackRafterCut.apply", "JackRafterCut.copy", "JackRafterCut.from_json", "JackRafterCut.from_jsonstring", "JackRafterCut.from_plane_and_beam", "JackRafterCut.from_shapes_and_element", "JackRafterCut.plane_from_params_and_beam", "JackRafterCut.scale", "JackRafterCut.scaled", "JackRafterCut.sha256", "JackRafterCut.to_json", "JackRafterCut.to_jsonstring", "JackRafterCut.validate_data", "Lap", "Lap.ToString", "Lap.add_subprocessing", "Lap.apply", "Lap.copy", "Lap.from_json", "Lap.from_jsonstring", "Lap.from_plane_and_beam", "Lap.from_shapes_and_element", "Lap.from_volume_and_beam", "Lap.scale", "Lap.scaled", "Lap.sha256", "Lap.to_json", "Lap.to_jsonstring", "Lap.validate_data", "Lap.volume_from_params_and_beam", "LimitationTopType", "LongitudinalCut", "LongitudinalCut.ToString", "LongitudinalCut.add_subprocessing", "LongitudinalCut.apply", "LongitudinalCut.copy", "LongitudinalCut.from_json", "LongitudinalCut.from_jsonstring", "LongitudinalCut.from_plane_and_beam", "LongitudinalCut.from_shapes_and_element", "LongitudinalCut.plane_from_params_and_beam", "LongitudinalCut.scaled", "LongitudinalCut.sha256", "LongitudinalCut.to_json", "LongitudinalCut.to_jsonstring", "LongitudinalCut.validate_data", "LongitudinalCut.volume_from_params_and_beam", "MachiningLimits", "Mortise", "Mortise.ToString", "Mortise.add_subprocessing", "Mortise.apply", "Mortise.copy", "Mortise.frame_from_params_and_beam", "Mortise.from_frame_and_beam", "Mortise.from_json", "Mortise.from_jsonstring", "Mortise.scale", "Mortise.scaled", "Mortise.sha256", "Mortise.to_json", "Mortise.to_jsonstring", "Mortise.validate_data", "Mortise.volume_from_params_and_beam", "OrientationType", "Pocket", "Pocket.ToString", "Pocket.add_subprocessing", "Pocket.apply", "Pocket.copy", "Pocket.from_json", "Pocket.from_jsonstring", "Pocket.from_shapes_and_element", "Pocket.from_volume_and_element", "Pocket.scale", "Pocket.scaled", "Pocket.sha256", "Pocket.to_json", "Pocket.to_jsonstring", "Pocket.validate_data", "Pocket.volume_from_params_and_element", "Slot", "Slot.ToString", "Slot.add_subprocessing", "Slot.apply", "Slot.copy", "Slot.from_json", "Slot.from_jsonstring", "Slot.from_plane_and_beam", "Slot.scale", "Slot.scaled", "Slot.sha256", "Slot.to_json", "Slot.to_jsonstring", "Slot.validate_data", "StepJoint", "StepJoint.ToString", "StepJoint.add_subprocessing", "StepJoint.add_tenon", "StepJoint.apply", "StepJoint.copy", "StepJoint.from_json", "StepJoint.from_jsonstring", "StepJoint.from_plane_and_beam", "StepJoint.planes_from_params_and_beam", "StepJoint.scale", "StepJoint.scaled", "StepJoint.sha256", "StepJoint.tenon_volume_from_params_and_beam", "StepJoint.to_json", "StepJoint.to_jsonstring", "StepJoint.validate_data", "StepJointNotch", "StepJointNotch.ToString", "StepJointNotch.add_mortise", "StepJointNotch.add_subprocessing", "StepJointNotch.apply", "StepJointNotch.copy", "StepJointNotch.from_json", "StepJointNotch.from_jsonstring", "StepJointNotch.from_plane_and_beam", "StepJointNotch.mortise_volume_from_params_and_beam", "StepJointNotch.planes_from_params_and_beam", "StepJointNotch.scale", "StepJointNotch.scaled", "StepJointNotch.sha256", "StepJointNotch.to_json", "StepJointNotch.to_jsonstring", "StepJointNotch.validate_data", "StepShapeType", "Tenon", "Tenon.ToString", "Tenon.add_subprocessing", "Tenon.apply", "Tenon.copy", "Tenon.frame_from_params_and_beam", "Tenon.from_json", "Tenon.from_jsonstring", "Tenon.from_plane_and_beam", "Tenon.scale", "Tenon.scaled", "Tenon.sha256", "Tenon.to_json", "Tenon.to_jsonstring", "Tenon.validate_data", "Tenon.volume_from_params_and_beam", "TenonShapeType", "add_gh_param", "clear_gh_params", "get_leaf_subclasses", "item_input_valid", "list_input_valid", "manage_dynamic_params", "rename_gh_input", "TimberModel", "TimberModel.ToString", "TimberModel.add_element", "TimberModel.add_elements", "TimberModel.add_group", "TimberModel.add_group_element", "TimberModel.add_interaction", "TimberModel.add_joint", "TimberModel.add_material", "TimberModel.assign_material", "TimberModel.compute_aabb", "TimberModel.compute_obb", "TimberModel.connect_adjacent_beams", "TimberModel.connect_adjacent_walls", "TimberModel.copy", "TimberModel.element_by_guid", "TimberModel.elements", "TimberModel.elements_connected_by", "TimberModel.from_json", "TimberModel.from_jsonstring", "TimberModel.get_elements_in_group", "TimberModel.get_interactions_for_element", "TimberModel.has_element", "TimberModel.has_group", "TimberModel.has_interaction", "TimberModel.has_material", "TimberModel.interactions", "TimberModel.materials", "TimberModel.process_joinery", "TimberModel.remove_element", "TimberModel.remove_interaction", "TimberModel.remove_joint", "TimberModel.rotate", "TimberModel.rotated", "TimberModel.scale", "TimberModel.scaled", "TimberModel.set_topologies", "TimberModel.sha256", "TimberModel.to_json", "TimberModel.to_jsonstring", "TimberModel.transform", "TimberModel.transform_numpy", "TimberModel.transformed", "TimberModel.transformed_numpy", "TimberModel.translate", "TimberModel.translated", "TimberModel.validate_data", "Actor", "Actor.get_name", "BuildingPlan", "BuildingPlan.ToString", "BuildingPlan.add_step", "BuildingPlan.copy", "BuildingPlan.from_json", "BuildingPlan.from_jsonstring", "BuildingPlan.sha256", "BuildingPlan.to_json", "BuildingPlan.to_jsonstring", "BuildingPlan.validate_data", "BuildingPlanParser", "BuildingPlanParser.parse", "BuildingPlanParser.serialize", "Instruction", "Instruction.ToString", "Instruction.copy", "Instruction.from_json", "Instruction.from_jsonstring", "Instruction.sha256", "Instruction.to_json", "Instruction.to_jsonstring", "Instruction.transform", "Instruction.validate_data", "LinearDimension", "LinearDimension.ToString", "LinearDimension.copy", "LinearDimension.from_json", "LinearDimension.from_jsonstring", "LinearDimension.sha256", "LinearDimension.to_json", "LinearDimension.to_jsonstring", "LinearDimension.transform", "LinearDimension.validate_data", "Model3d", "Model3d.ToString", "Model3d.copy", "Model3d.from_json", "Model3d.from_jsonstring", "Model3d.sha256", "Model3d.to_json", "Model3d.to_jsonstring", "Model3d.transform", "Model3d.validate_data", "SimpleSequenceGenerator", "Step", "Step.ToString", "Step.copy", "Step.from_json", "Step.from_jsonstring", "Step.sha256", "Step.to_json", "Step.to_jsonstring", "Step.transform", "Step.validate_data", "Text3d", "Text3d.ToString", "Text3d.copy", "Text3d.from_json", "Text3d.from_jsonstring", "Text3d.sha256", "Text3d.to_json", "Text3d.to_jsonstring", "Text3d.transform", "Text3d.validate_data", "find_neighboring_elements", "Citing", "Developer Guide", "BTLx Contribution Guide", "Joints Contribution Guide", "COMPAS Timber Documentation", "Installation", "License", "Grasshopper plugin", "Attributes", "Beams", "Design", "Examples", "Fabrication", "Features", "Installation Guide", "Joint Rules", "Model", "Show", "Utils", "Workflow"], "terms": {"compas_timb": [0, 10, 16, 20, 25, 27, 28, 31, 35, 41, 45, 50, 52, 58, 68, 74, 83, 89, 98, 104, 115, 121, 130, 132, 133, 139, 148, 154, 163, 169, 179, 185, 194, 200, 210, 216, 226, 227, 233, 242, 248, 257, 263, 275, 276, 284, 289, 297, 299, 303, 309, 327, 334, 335, 336, 367, 388, 398, 410, 425, 446, 470, 471, 472, 473, 476, 487, 491, 494, 499, 500, 507, 510, 513, 514, 515, 525, 528, 532, 533, 543, 546, 548, 551, 552, 559, 560, 563, 565, 569, 576, 579, 584, 585, 592, 595, 608, 609, 610, 613, 618, 619, 625, 626, 627, 630, 632, 642, 643, 644, 647, 659, 660, 663, 674, 678, 683, 687, 691, 695, 700, 701, 708, 709, 712, 714, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 738, 780, 782, 792, 795, 805, 815, 825, 826, 836, 846, 847, 849, 850, 851, 852, 861], "model": [0, 10, 16, 20, 30, 41, 45, 52, 58, 62, 68, 71, 74, 78, 83, 89, 93, 98, 104, 110, 115, 121, 125, 130, 131, 132, 133, 139, 143, 148, 154, 158, 163, 169, 174, 179, 185, 189, 194, 200, 204, 210, 216, 220, 226, 227, 233, 237, 242, 248, 252, 257, 263, 270, 309, 335, 336, 346, 373, 375, 388, 398, 408, 433, 454, 487, 488, 490, 733, 735, 736, 737, 738, 739, 740, 741, 742, 746, 749, 755, 756, 758, 759, 760, 761, 762, 764, 769, 773, 780, 815, 825, 850, 851, 854, 856, 859, 860, 866], "element": [0, 10, 13, 14, 16, 17, 20, 27, 28, 35, 39, 41, 42, 45, 56, 58, 59, 72, 74, 75, 87, 89, 90, 102, 104, 105, 115, 119, 121, 122, 137, 139, 140, 152, 154, 155, 167, 169, 171, 183, 185, 186, 198, 200, 201, 210, 214, 216, 217, 231, 233, 234, 246, 248, 249, 261, 263, 265, 275, 276, 278, 282, 283, 289, 291, 292, 296, 297, 299, 302, 304, 308, 309, 327, 329, 333, 336, 342, 343, 344, 345, 346, 348, 359, 364, 365, 367, 371, 372, 374, 375, 381, 385, 386, 388, 393, 398, 404, 405, 406, 407, 408, 410, 417, 422, 423, 425, 429, 430, 431, 432, 433, 439, 443, 444, 446, 450, 451, 452, 453, 454, 462, 467, 468, 471, 472, 473, 474, 475, 476, 489, 494, 499, 500, 510, 513, 514, 515, 528, 532, 533, 543, 546, 548, 551, 552, 563, 565, 569, 579, 584, 585, 595, 600, 601, 608, 613, 618, 619, 625, 630, 632, 642, 643, 647, 651, 652, 659, 663, 678, 683, 687, 695, 700, 701, 712, 714, 724, 733, 735, 736, 738, 739, 742, 748, 750, 753, 754, 755, 757, 759, 762, 763, 825, 826, 846, 849, 851, 863], "connect": [0, 10, 11, 16, 20, 25, 26, 27, 28, 31, 35, 36, 41, 45, 50, 52, 53, 58, 68, 69, 74, 83, 84, 89, 98, 99, 104, 115, 116, 121, 130, 131, 132, 133, 134, 139, 148, 149, 154, 163, 164, 169, 179, 180, 185, 194, 195, 200, 210, 211, 216, 226, 227, 228, 233, 242, 243, 248, 257, 258, 263, 275, 327, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 746, 750, 783, 796, 806, 816, 827, 837, 850, 851, 853, 862, 863], "fabric": [0, 473, 476, 487, 491, 499, 507, 525, 543, 551, 552, 559, 560, 576, 584, 592, 609, 610, 618, 626, 627, 643, 644, 660, 674, 691, 708, 709, 725, 847, 849, 851, 854], "design": [0, 33, 275, 276, 284, 289, 297, 299, 303, 309, 327, 334, 335, 473, 847, 851, 854, 855, 856], "plan": [0, 780, 782, 792, 793, 794, 795, 805, 815, 825, 826, 836, 851], "error": [0, 1, 28, 284, 286, 287, 288, 342, 345, 371, 374, 404, 429, 432, 450, 453, 470, 471, 472, 546, 761, 849, 850, 851, 855, 857, 863], "ghpython": [0, 726, 727, 728, 729, 730, 731, 732, 851, 854], "rhino": [0, 11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 275, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 846, 851, 852, 855, 856, 862, 865], "The": [1, 9, 10, 15, 16, 17, 18, 19, 22, 23, 24, 27, 30, 33, 35, 40, 41, 42, 43, 44, 47, 48, 49, 52, 57, 58, 59, 60, 61, 64, 65, 67, 68, 73, 74, 75, 76, 77, 80, 81, 82, 83, 88, 89, 90, 91, 92, 95, 96, 97, 103, 104, 105, 106, 107, 112, 113, 114, 115, 120, 121, 122, 123, 124, 127, 128, 129, 130, 133, 138, 139, 140, 141, 142, 145, 146, 147, 148, 153, 154, 155, 156, 157, 160, 161, 162, 163, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 184, 185, 186, 187, 188, 191, 192, 193, 199, 200, 201, 202, 203, 207, 208, 209, 210, 215, 216, 217, 218, 219, 223, 224, 225, 227, 232, 233, 234, 235, 236, 239, 240, 241, 242, 247, 248, 249, 250, 251, 254, 255, 256, 257, 262, 263, 265, 266, 267, 272, 273, 274, 275, 276, 278, 282, 283, 289, 291, 296, 308, 309, 327, 329, 333, 336, 338, 340, 341, 342, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 374, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 390, 391, 392, 395, 396, 397, 398, 401, 404, 405, 407, 409, 410, 411, 412, 413, 414, 416, 419, 420, 421, 422, 423, 424, 428, 429, 430, 432, 434, 435, 436, 438, 441, 442, 443, 444, 445, 449, 450, 451, 453, 455, 458, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 726, 727, 731, 732, 733, 735, 736, 737, 738, 739, 742, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 764, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 785, 786, 787, 789, 790, 791, 797, 798, 799, 801, 802, 804, 807, 808, 809, 811, 812, 814, 817, 818, 819, 821, 822, 824, 828, 829, 830, 832, 833, 835, 838, 839, 840, 842, 843, 845, 846, 849, 850, 853, 854, 855, 856, 860, 862, 863, 865, 866], "follow": [1, 341, 354, 356, 388, 414, 849, 850, 853, 854, 856, 861, 862], "mai": [1, 849, 850, 855, 863], "rais": [1, 12, 14, 16, 18, 19, 37, 38, 39, 43, 44, 54, 56, 60, 61, 70, 72, 76, 77, 85, 87, 91, 92, 100, 102, 106, 107, 117, 118, 119, 123, 124, 135, 137, 141, 142, 150, 152, 156, 157, 165, 167, 172, 173, 181, 183, 187, 188, 196, 198, 202, 203, 212, 214, 218, 219, 229, 231, 235, 236, 244, 246, 250, 251, 259, 261, 266, 267, 352, 353, 377, 378, 391, 392, 411, 412, 435, 436, 458, 459, 471, 472, 480, 481, 494, 496, 497, 510, 517, 518, 528, 534, 535, 546, 549, 550, 563, 567, 568, 579, 581, 582, 595, 597, 598, 613, 615, 616, 630, 634, 635, 647, 649, 650, 663, 665, 666, 678, 680, 681, 695, 697, 698, 712, 715, 716, 735, 738, 739, 742, 751, 752, 761, 786, 787, 798, 799, 808, 809, 818, 819, 829, 830, 839, 840, 849, 850], "thi": [1, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 24, 27, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 49, 52, 53, 54, 55, 56, 57, 58, 60, 61, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 114, 116, 117, 118, 119, 120, 121, 123, 124, 129, 133, 134, 135, 136, 137, 138, 139, 141, 142, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 193, 194, 195, 196, 197, 199, 200, 202, 203, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 274, 275, 276, 278, 283, 291, 292, 297, 299, 302, 304, 327, 329, 336, 337, 338, 341, 346, 347, 349, 352, 353, 354, 356, 357, 366, 367, 368, 375, 376, 377, 378, 387, 388, 389, 390, 391, 392, 397, 398, 399, 403, 408, 409, 411, 412, 414, 424, 425, 426, 433, 434, 435, 436, 445, 446, 447, 454, 455, 456, 458, 459, 469, 470, 473, 475, 477, 479, 480, 481, 486, 492, 494, 495, 496, 497, 498, 500, 506, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 524, 526, 528, 529, 531, 532, 533, 534, 535, 536, 542, 544, 547, 548, 549, 550, 551, 553, 558, 561, 563, 564, 565, 566, 567, 568, 569, 570, 575, 577, 579, 580, 581, 582, 583, 585, 586, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 607, 608, 611, 613, 614, 615, 616, 617, 619, 624, 625, 628, 630, 631, 632, 633, 634, 635, 636, 641, 642, 645, 647, 648, 649, 650, 651, 652, 653, 658, 659, 661, 663, 664, 665, 666, 667, 668, 673, 675, 678, 679, 680, 681, 682, 683, 684, 687, 690, 692, 695, 696, 697, 698, 699, 700, 701, 702, 707, 710, 712, 713, 714, 715, 716, 717, 718, 723, 724, 733, 734, 738, 747, 751, 752, 753, 756, 761, 764, 766, 768, 775, 776, 778, 779, 783, 785, 786, 787, 791, 792, 796, 797, 798, 799, 804, 806, 807, 808, 809, 814, 816, 817, 818, 819, 824, 826, 827, 828, 829, 830, 835, 837, 838, 839, 840, 845, 846, 848, 849, 850, 853, 855, 857, 861, 862, 866], "modul": [1, 9, 851], "see": [1, 20, 45, 733, 849, 850, 854, 856, 858, 860, 861, 862, 865], "detail": [1, 854], "beamjoiningerror": [1, 12, 14, 37, 38, 39, 54, 56, 70, 72, 85, 87, 100, 102, 117, 118, 119, 135, 137, 150, 152, 165, 167, 181, 183, 196, 198, 212, 214, 229, 231, 244, 246, 259, 261, 284, 761, 850, 851], "featureapplicationerror": [1, 284, 494, 510, 528, 546, 563, 579, 595, 613, 630, 647, 663, 678, 695, 712, 849, 851], "fastenerapplicationerror": [1, 851], "contain": [9, 16, 18, 19, 32, 35, 43, 44, 60, 61, 76, 77, 91, 92, 106, 107, 123, 124, 131, 141, 142, 156, 157, 172, 173, 187, 188, 202, 203, 218, 219, 235, 236, 250, 251, 266, 267, 275, 278, 283, 284, 291, 297, 299, 329, 336, 352, 353, 377, 378, 391, 392, 398, 411, 412, 425, 435, 436, 446, 458, 459, 470, 480, 481, 496, 497, 517, 518, 534, 535, 549, 550, 567, 568, 581, 582, 597, 598, 615, 616, 634, 635, 649, 650, 665, 666, 680, 681, 697, 698, 715, 716, 733, 735, 738, 749, 751, 752, 755, 758, 760, 773, 782, 786, 787, 798, 799, 808, 809, 818, 819, 826, 829, 830, 839, 840, 846], "function": [9, 115, 275, 489, 753, 854], "type": [9, 10, 11, 15, 18, 19, 24, 30, 33, 36, 40, 43, 44, 49, 52, 53, 57, 60, 61, 67, 68, 69, 73, 76, 77, 82, 83, 84, 88, 91, 92, 97, 98, 99, 103, 106, 107, 114, 115, 116, 120, 123, 124, 129, 133, 134, 138, 141, 142, 147, 148, 149, 153, 156, 157, 162, 163, 164, 168, 172, 173, 178, 179, 180, 184, 187, 188, 193, 194, 195, 199, 202, 203, 205, 209, 210, 211, 215, 218, 219, 225, 227, 228, 232, 235, 236, 241, 242, 243, 247, 250, 251, 256, 257, 258, 262, 266, 267, 274, 276, 289, 299, 327, 337, 347, 352, 353, 366, 368, 376, 377, 378, 387, 389, 390, 391, 392, 397, 399, 409, 411, 412, 424, 426, 434, 435, 436, 445, 447, 455, 458, 459, 469, 477, 479, 480, 481, 486, 489, 492, 495, 496, 497, 506, 507, 508, 511, 517, 518, 524, 526, 529, 534, 535, 542, 544, 547, 549, 550, 558, 561, 564, 567, 568, 575, 577, 580, 581, 582, 591, 593, 596, 597, 598, 607, 611, 614, 615, 616, 624, 628, 631, 634, 635, 641, 645, 648, 649, 650, 658, 661, 664, 665, 666, 673, 675, 679, 680, 681, 690, 692, 696, 697, 698, 707, 710, 713, 715, 716, 723, 734, 747, 750, 751, 752, 779, 780, 783, 785, 786, 787, 791, 796, 797, 798, 799, 804, 806, 807, 808, 809, 814, 816, 817, 818, 819, 824, 826, 827, 828, 829, 830, 835, 837, 838, 839, 840, 845, 849, 850, 851, 857, 861, 866], "meant": 9, "us": [9, 10, 11, 21, 24, 28, 29, 30, 32, 34, 35, 36, 46, 49, 51, 52, 53, 63, 67, 68, 69, 79, 82, 83, 84, 94, 97, 98, 99, 111, 114, 115, 116, 126, 129, 130, 133, 134, 144, 147, 148, 149, 159, 162, 163, 164, 175, 178, 179, 180, 190, 193, 194, 195, 206, 209, 210, 211, 222, 225, 227, 228, 238, 241, 242, 243, 253, 256, 257, 258, 271, 274, 275, 278, 283, 291, 329, 337, 349, 360, 366, 368, 382, 387, 389, 394, 397, 399, 418, 424, 425, 426, 440, 445, 447, 456, 464, 469, 470, 473, 477, 483, 486, 487, 492, 503, 506, 507, 508, 516, 521, 524, 525, 526, 536, 539, 542, 544, 548, 555, 558, 561, 566, 572, 575, 577, 588, 591, 593, 599, 604, 607, 611, 621, 624, 628, 633, 638, 641, 645, 655, 658, 661, 670, 673, 675, 686, 690, 692, 704, 707, 710, 717, 720, 723, 733, 734, 738, 769, 770, 774, 775, 776, 777, 778, 779, 781, 783, 788, 791, 792, 796, 800, 804, 806, 810, 814, 816, 820, 824, 826, 827, 831, 835, 837, 841, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865], "context": [9, 850], "class": [10, 11, 25, 27, 28, 30, 31, 35, 36, 41, 50, 52, 53, 58, 68, 69, 74, 83, 84, 89, 98, 99, 104, 115, 116, 121, 130, 133, 134, 139, 148, 149, 154, 163, 164, 169, 179, 180, 185, 194, 195, 200, 210, 211, 216, 227, 228, 233, 242, 243, 248, 257, 258, 263, 276, 284, 289, 297, 299, 303, 309, 327, 336, 337, 367, 368, 388, 389, 398, 399, 425, 426, 446, 447, 471, 473, 476, 477, 487, 491, 492, 507, 508, 525, 526, 543, 544, 559, 560, 561, 576, 577, 592, 593, 609, 610, 611, 626, 627, 628, 643, 644, 645, 660, 661, 674, 675, 691, 692, 699, 708, 709, 710, 725, 733, 734, 740, 773, 780, 782, 783, 792, 795, 796, 805, 806, 815, 816, 825, 826, 827, 836, 837, 851], "sourc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 855, 856], "base": [10, 25, 27, 28, 31, 35, 50, 52, 66, 68, 83, 98, 115, 130, 133, 148, 163, 170, 179, 194, 205, 210, 227, 242, 257, 276, 284, 289, 297, 299, 303, 309, 327, 336, 344, 346, 367, 375, 388, 398, 408, 425, 431, 433, 446, 452, 454, 470, 471, 472, 473, 475, 476, 487, 491, 507, 512, 525, 530, 543, 559, 560, 576, 592, 609, 610, 617, 626, 627, 643, 644, 660, 674, 691, 708, 709, 725, 733, 761, 765, 766, 780, 782, 792, 795, 805, 815, 825, 826, 836, 849, 850, 863, 864, 866], "joint": [10, 12, 13, 14, 16, 17, 20, 27, 29, 31, 50, 52, 54, 55, 56, 58, 59, 66, 68, 70, 71, 72, 74, 75, 83, 85, 86, 87, 89, 90, 98, 100, 101, 102, 104, 105, 115, 117, 118, 119, 121, 122, 131, 133, 135, 136, 137, 139, 140, 148, 150, 151, 152, 154, 155, 163, 165, 166, 167, 169, 171, 179, 181, 182, 183, 185, 186, 194, 196, 197, 198, 200, 201, 205, 210, 212, 213, 214, 216, 217, 227, 229, 230, 231, 233, 234, 242, 244, 245, 246, 248, 249, 257, 259, 260, 261, 263, 265, 276, 278, 282, 284, 289, 296, 299, 308, 327, 333, 338, 357, 388, 446, 470, 471, 516, 536, 633, 674, 682, 691, 699, 717, 733, 740, 761, 764, 848, 849, 851, 854, 856, 857, 863, 866], "repres": [10, 52, 68, 83, 98, 133, 148, 163, 179, 194, 210, 227, 242, 257, 336, 367, 388, 398, 403, 410, 413, 446, 473, 487, 491, 507, 525, 543, 560, 576, 592, 610, 625, 627, 644, 674, 691, 709, 733, 739, 780, 850, 856, 862], "ball": 10, "node": [10, 735, 736, 737, 738], "which": [10, 16, 32, 33, 34, 35, 41, 52, 58, 68, 74, 83, 89, 98, 104, 121, 133, 139, 148, 154, 163, 169, 179, 185, 194, 200, 210, 216, 227, 233, 242, 248, 257, 263, 275, 297, 327, 338, 341, 348, 349, 354, 355, 356, 357, 410, 414, 470, 471, 489, 536, 551, 552, 667, 717, 737, 738, 780, 782, 815, 826, 849, 850, 856, 857, 863], "join": [10, 16, 35, 52, 68, 83, 98, 115, 133, 148, 163, 179, 194, 210, 227, 242, 257, 282, 284, 289, 296, 299, 308, 333, 470, 850, 857, 863], "end": [10, 35, 50, 52, 68, 83, 98, 133, 148, 163, 179, 194, 210, 257, 336, 338, 341, 348, 349, 351, 354, 356, 414, 491, 525, 560, 576, 592, 610, 617, 626, 643, 644, 667, 674, 691, 709, 850, 862], "multipl": [10, 28, 289, 736], "beam": [10, 12, 13, 14, 16, 20, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 45, 50, 52, 54, 55, 56, 62, 66, 68, 70, 71, 72, 78, 83, 85, 86, 87, 93, 98, 100, 101, 102, 110, 115, 117, 118, 119, 125, 130, 131, 132, 133, 135, 136, 137, 143, 148, 150, 151, 152, 158, 163, 165, 166, 167, 174, 179, 181, 182, 183, 189, 194, 196, 197, 204, 210, 212, 213, 214, 220, 226, 227, 229, 230, 231, 237, 242, 244, 245, 246, 252, 257, 259, 260, 261, 264, 269, 270, 275, 284, 309, 370, 380, 401, 414, 416, 419, 425, 428, 438, 446, 449, 461, 470, 491, 494, 498, 500, 507, 510, 513, 514, 515, 516, 525, 528, 531, 532, 533, 536, 560, 563, 565, 566, 569, 576, 579, 583, 584, 585, 592, 595, 599, 600, 601, 608, 610, 613, 617, 618, 619, 625, 627, 630, 632, 633, 642, 644, 647, 651, 652, 659, 663, 667, 674, 678, 682, 683, 687, 691, 693, 695, 699, 700, 701, 709, 712, 714, 717, 724, 733, 738, 748, 761, 815, 846, 850, 851, 854, 855, 860, 862, 863, 865, 866], "trim": [10, 52, 55, 98, 101, 136, 148, 151, 166, 182, 197, 213, 230, 245, 257, 260, 569, 860, 863], "main": [10, 20, 33, 45, 52, 62, 66, 68, 78, 93, 110, 115, 125, 133, 143, 148, 158, 163, 174, 179, 189, 194, 204, 210, 220, 237, 252, 257, 270, 536, 633, 682, 699, 717, 850, 862], "pleas": [10, 52, 68, 83, 98, 115, 133, 148, 163, 179, 194, 210, 227, 242, 257, 847, 861], "creat": [10, 13, 28, 30, 35, 52, 54, 55, 68, 70, 83, 85, 86, 98, 100, 101, 115, 133, 135, 136, 148, 150, 151, 163, 165, 166, 179, 181, 182, 194, 196, 197, 210, 212, 213, 227, 230, 242, 245, 257, 259, 260, 289, 297, 309, 350, 351, 365, 386, 410, 423, 444, 457, 468, 498, 510, 516, 528, 536, 566, 583, 599, 617, 630, 633, 678, 682, 695, 699, 712, 717, 852, 854, 855, 856, 857, 859, 862, 863, 866], "properli": [10, 52, 68, 83, 98, 115, 133, 148, 163, 179, 194, 210, 227, 242, 257, 850], "an": [10, 15, 16, 18, 19, 22, 23, 24, 27, 28, 30, 32, 40, 41, 43, 44, 47, 48, 49, 52, 57, 58, 60, 61, 64, 65, 67, 68, 73, 74, 76, 77, 80, 81, 82, 83, 88, 89, 91, 92, 95, 96, 97, 98, 103, 104, 106, 107, 112, 113, 114, 115, 120, 121, 123, 124, 127, 128, 129, 133, 138, 139, 141, 142, 145, 146, 147, 148, 153, 154, 156, 157, 160, 161, 162, 163, 168, 169, 172, 173, 176, 177, 178, 179, 184, 185, 187, 188, 191, 192, 193, 194, 199, 200, 202, 203, 207, 208, 209, 210, 215, 216, 218, 219, 223, 224, 225, 227, 232, 233, 235, 236, 239, 240, 241, 242, 247, 248, 250, 251, 254, 255, 256, 257, 262, 263, 266, 267, 272, 273, 274, 336, 347, 352, 353, 362, 363, 366, 367, 376, 377, 378, 383, 384, 387, 388, 390, 391, 392, 395, 396, 397, 398, 409, 411, 412, 420, 421, 424, 425, 434, 435, 436, 441, 442, 445, 446, 455, 458, 459, 465, 466, 469, 470, 472, 473, 475, 479, 480, 481, 484, 485, 486, 488, 489, 495, 496, 497, 499, 504, 505, 506, 511, 517, 518, 522, 523, 524, 529, 534, 535, 536, 540, 541, 542, 547, 549, 550, 556, 557, 558, 564, 567, 568, 573, 574, 575, 580, 581, 582, 589, 590, 591, 596, 597, 598, 605, 606, 607, 614, 615, 616, 622, 623, 624, 631, 634, 635, 639, 640, 641, 648, 649, 650, 656, 657, 658, 664, 665, 666, 671, 672, 673, 679, 680, 681, 688, 689, 690, 696, 697, 698, 705, 706, 707, 713, 715, 716, 717, 721, 722, 723, 735, 738, 739, 740, 742, 747, 751, 752, 757, 761, 762, 771, 772, 779, 780, 785, 786, 787, 789, 790, 791, 797, 798, 799, 801, 802, 804, 807, 808, 809, 811, 812, 814, 817, 818, 819, 821, 822, 824, 828, 829, 830, 832, 833, 835, 838, 839, 840, 842, 843, 845, 847, 850, 851, 853, 854, 855, 856, 862], "instanc": [10, 11, 16, 18, 19, 27, 28, 30, 36, 41, 43, 44, 52, 53, 58, 60, 61, 68, 69, 74, 76, 77, 83, 84, 89, 91, 92, 98, 99, 104, 106, 107, 115, 116, 121, 123, 124, 133, 134, 139, 141, 142, 148, 149, 154, 156, 157, 163, 164, 169, 172, 173, 179, 180, 185, 187, 188, 194, 195, 200, 202, 203, 210, 211, 216, 218, 219, 227, 228, 233, 235, 236, 242, 243, 248, 250, 251, 257, 258, 263, 266, 267, 304, 337, 352, 353, 368, 377, 378, 388, 389, 391, 392, 399, 411, 412, 426, 435, 436, 447, 458, 459, 477, 480, 481, 482, 489, 492, 494, 496, 497, 498, 500, 502, 508, 510, 513, 514, 515, 516, 517, 518, 520, 526, 528, 531, 532, 533, 534, 535, 536, 538, 544, 548, 549, 550, 554, 561, 563, 565, 566, 567, 568, 569, 571, 577, 579, 581, 582, 583, 585, 587, 593, 595, 597, 598, 599, 600, 601, 603, 608, 611, 613, 615, 616, 617, 619, 620, 625, 628, 630, 632, 633, 634, 635, 637, 642, 645, 647, 649, 650, 651, 652, 654, 659, 661, 663, 665, 666, 667, 669, 675, 677, 678, 680, 681, 682, 683, 685, 687, 692, 693, 695, 697, 698, 699, 700, 701, 703, 710, 712, 714, 715, 716, 717, 719, 724, 734, 740, 751, 752, 783, 786, 787, 796, 798, 799, 806, 808, 809, 816, 818, 819, 827, 829, 830, 837, 839, 840, 849, 850], "associ": [10, 20, 45, 52, 68, 83, 98, 115, 133, 148, 163, 179, 194, 210, 227, 242, 257, 398, 403, 826, 850, 853], "paramet": [10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 133, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 215, 216, 217, 218, 219, 222, 223, 224, 225, 227, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 262, 263, 265, 266, 267, 271, 272, 273, 274, 275, 276, 278, 282, 283, 289, 291, 296, 304, 308, 309, 327, 329, 333, 336, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 374, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 400, 401, 403, 404, 406, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 431, 432, 434, 435, 436, 438, 440, 441, 442, 443, 444, 445, 448, 449, 450, 452, 453, 455, 458, 459, 461, 464, 465, 466, 467, 468, 469, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 785, 786, 787, 788, 789, 790, 791, 793, 794, 797, 798, 799, 800, 801, 802, 804, 807, 808, 809, 810, 811, 812, 814, 817, 818, 819, 820, 821, 822, 824, 825, 828, 829, 830, 831, 832, 833, 835, 838, 839, 840, 841, 842, 843, 845, 846, 850, 855, 865], "list": [10, 16, 17, 27, 28, 30, 32, 35, 42, 59, 75, 90, 105, 115, 122, 131, 140, 155, 163, 171, 186, 201, 210, 217, 234, 249, 257, 265, 275, 276, 282, 284, 289, 296, 304, 308, 309, 329, 333, 336, 339, 340, 348, 358, 369, 370, 380, 388, 400, 401, 416, 427, 428, 438, 448, 449, 461, 470, 471, 473, 498, 500, 513, 731, 733, 736, 742, 750, 754, 761, 826, 846, 850, 862, 864], "base_interfac": 10, "fastenertimberinterfac": [10, 13, 851], "describ": [10, 850], "interfac": [10, 25, 388, 393, 402, 851], "between": [10, 33, 34, 50, 68, 83, 98, 115, 179, 227, 291, 309, 388, 475, 507, 525, 617, 627, 709, 733, 739, 746, 757, 759, 763, 850, 855, 857, 860, 862, 866], "fasten": [10, 13, 148, 388, 471, 851], "each": [10, 35, 131, 242, 349, 617, 782, 849, 850, 855, 862, 864], "timber": [10, 13, 309, 336, 367, 388, 398, 425, 446, 487, 733, 847, 848, 849, 850, 852, 854, 856, 857, 859, 861, 864, 866], "ball_diamet": 10, "float": [10, 32, 33, 34, 52, 68, 83, 115, 133, 148, 163, 170, 179, 194, 210, 227, 257, 275, 276, 278, 282, 289, 291, 296, 308, 309, 327, 329, 333, 336, 338, 342, 345, 349, 350, 351, 355, 371, 374, 388, 398, 404, 410, 413, 429, 432, 450, 453, 473, 482, 491, 501, 502, 507, 512, 516, 519, 520, 525, 530, 536, 537, 538, 543, 551, 552, 553, 554, 560, 566, 570, 571, 576, 586, 587, 592, 599, 602, 603, 610, 617, 620, 627, 633, 636, 637, 644, 653, 654, 668, 669, 674, 677, 684, 685, 691, 693, 702, 703, 709, 717, 718, 719, 733, 746, 765, 766, 767, 768, 846, 849, 862], "diamet": [10, 68, 163, 170, 388, 512, 530, 543, 551, 552, 560, 566, 860, 862], "attribut": [10, 27, 35, 41, 50, 52, 58, 68, 74, 83, 89, 98, 104, 115, 121, 133, 139, 148, 154, 163, 169, 179, 185, 194, 200, 210, 216, 221, 227, 233, 242, 248, 257, 263, 276, 278, 283, 284, 309, 336, 367, 388, 398, 425, 470, 471, 472, 473, 476, 559, 609, 626, 643, 708, 725, 733, 737, 825, 826, 849, 850, 851, 854, 856], "generated_el": [10, 35], "gener": [10, 13, 16, 34, 35, 194, 367, 388, 733, 753, 825, 850, 856, 857, 862, 866], "method": [10, 11, 16, 20, 25, 28, 31, 33, 35, 36, 41, 45, 50, 52, 53, 54, 55, 58, 68, 69, 70, 71, 72, 74, 83, 84, 85, 86, 89, 98, 99, 100, 101, 104, 115, 116, 121, 130, 133, 134, 135, 136, 139, 148, 149, 150, 151, 154, 163, 164, 165, 166, 169, 179, 180, 181, 182, 185, 194, 195, 196, 197, 200, 210, 211, 212, 213, 216, 227, 228, 230, 233, 242, 243, 245, 248, 257, 258, 259, 260, 261, 263, 276, 284, 289, 297, 299, 303, 309, 327, 336, 337, 341, 354, 356, 367, 368, 388, 389, 398, 399, 414, 425, 426, 446, 447, 473, 476, 477, 487, 491, 492, 507, 508, 525, 526, 536, 543, 544, 560, 561, 576, 577, 592, 593, 599, 610, 611, 627, 628, 644, 645, 660, 661, 674, 675, 691, 692, 709, 710, 717, 733, 734, 761, 780, 782, 783, 792, 795, 796, 805, 806, 815, 816, 826, 827, 836, 837, 851], "inherit": [10, 35, 52, 68, 83, 98, 115, 133, 148, 163, 179, 194, 210, 227, 242, 257, 276, 289, 327, 336, 367, 388, 398, 425, 446, 476, 491, 507, 525, 543, 560, 576, 592, 610, 627, 644, 660, 674, 691, 709, 733, 782, 795, 805, 815, 826, 836, 849, 850, 851], "convert": [11, 22, 23, 36, 47, 48, 53, 64, 65, 69, 80, 81, 84, 95, 96, 99, 112, 113, 116, 127, 128, 134, 145, 146, 149, 160, 161, 164, 176, 177, 180, 191, 192, 195, 207, 208, 211, 223, 224, 228, 239, 240, 243, 254, 255, 258, 272, 273, 297, 337, 362, 363, 368, 383, 384, 389, 395, 396, 399, 420, 421, 426, 441, 442, 447, 465, 466, 474, 477, 484, 485, 488, 492, 504, 505, 508, 522, 523, 526, 540, 541, 544, 556, 557, 561, 573, 574, 577, 589, 590, 593, 605, 606, 611, 622, 623, 628, 639, 640, 645, 656, 657, 661, 671, 672, 675, 688, 689, 692, 705, 706, 710, 721, 722, 734, 771, 772, 783, 789, 790, 796, 801, 802, 806, 811, 812, 816, 821, 822, 827, 832, 833, 837, 842, 843, 849], "string": [11, 19, 23, 36, 44, 48, 51, 53, 61, 65, 69, 77, 81, 84, 92, 96, 99, 107, 113, 116, 124, 128, 134, 142, 146, 149, 157, 161, 164, 173, 177, 180, 188, 192, 195, 203, 208, 211, 219, 224, 228, 236, 240, 243, 251, 255, 258, 267, 273, 337, 353, 363, 368, 378, 384, 389, 392, 396, 399, 412, 421, 426, 436, 442, 447, 459, 466, 470, 477, 481, 485, 488, 490, 492, 497, 505, 508, 518, 523, 526, 535, 541, 544, 550, 557, 561, 568, 574, 577, 582, 590, 593, 598, 606, 611, 616, 623, 628, 635, 640, 645, 650, 657, 661, 666, 672, 675, 681, 689, 692, 698, 706, 710, 716, 722, 734, 752, 772, 781, 783, 787, 790, 796, 799, 802, 806, 809, 812, 816, 819, 822, 827, 830, 833, 837, 840, 843, 849, 855, 856, 862], "exist": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 677, 692, 693, 710, 734, 738, 756, 783, 796, 806, 816, 827, 837, 849], "net": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "compat": [11, 14, 36, 39, 52, 53, 56, 68, 69, 72, 83, 84, 87, 98, 99, 102, 116, 119, 133, 134, 137, 148, 149, 152, 163, 164, 167, 179, 180, 183, 194, 195, 198, 210, 211, 214, 227, 228, 231, 242, 243, 246, 258, 261, 275, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 850], "when": [11, 32, 36, 53, 54, 55, 69, 70, 84, 85, 86, 99, 100, 101, 116, 134, 135, 136, 149, 150, 151, 164, 165, 166, 180, 181, 182, 195, 196, 197, 211, 212, 213, 228, 230, 243, 245, 258, 259, 260, 337, 338, 368, 389, 399, 426, 447, 471, 472, 473, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 849, 850, 855, 862], "ironpython": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "implicit": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "convers": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 849], "usual": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 336, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "take": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 489, 492, 508, 526, 544, 551, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 849, 866], "place": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 773, 783, 796, 806, 816, 827, 837, 862], "cpython": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 852], "kick": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "its": [11, 22, 23, 36, 47, 48, 53, 64, 65, 69, 80, 81, 84, 95, 96, 99, 112, 113, 116, 127, 128, 134, 145, 146, 149, 160, 161, 163, 164, 176, 177, 180, 191, 192, 195, 207, 208, 210, 211, 223, 224, 228, 239, 240, 243, 254, 255, 258, 272, 273, 337, 346, 350, 359, 362, 363, 368, 375, 381, 383, 384, 389, 395, 396, 399, 408, 417, 420, 421, 426, 433, 439, 441, 442, 447, 454, 462, 465, 466, 477, 484, 485, 489, 492, 504, 505, 508, 522, 523, 526, 540, 541, 544, 556, 557, 561, 573, 574, 577, 589, 590, 593, 605, 606, 611, 622, 623, 628, 639, 640, 645, 656, 657, 661, 667, 671, 672, 675, 688, 689, 692, 705, 706, 710, 721, 722, 734, 748, 771, 772, 783, 789, 790, 796, 801, 802, 806, 811, 812, 816, 821, 822, 827, 832, 833, 837, 842, 843, 850, 852, 855, 862], "default": [11, 15, 29, 30, 36, 40, 52, 53, 57, 69, 73, 83, 84, 88, 99, 103, 115, 116, 120, 130, 131, 134, 138, 149, 153, 164, 168, 179, 180, 184, 195, 199, 205, 211, 215, 221, 227, 228, 232, 243, 247, 258, 262, 278, 291, 309, 329, 337, 347, 350, 351, 368, 376, 389, 390, 398, 399, 409, 413, 426, 434, 447, 455, 473, 476, 477, 479, 487, 492, 495, 498, 508, 511, 516, 526, 529, 536, 543, 544, 547, 561, 564, 566, 577, 580, 583, 592, 593, 596, 599, 600, 601, 611, 614, 617, 628, 631, 633, 644, 645, 648, 651, 652, 661, 664, 675, 679, 682, 692, 696, 699, 710, 713, 717, 727, 731, 734, 746, 747, 761, 765, 766, 767, 768, 783, 785, 796, 797, 806, 807, 816, 817, 827, 828, 837, 838, 849, 851, 856, 857, 863, 865], "print": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "self": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 849, 850], "gettyp": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "fullnam": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "similar": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 472, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 850, 852, 862], "overrid": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 327, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 857], "object": [11, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 31, 32, 36, 40, 43, 44, 45, 47, 48, 49, 50, 53, 57, 60, 61, 64, 65, 67, 69, 73, 76, 77, 80, 81, 82, 84, 88, 91, 92, 95, 96, 97, 99, 103, 106, 107, 112, 113, 114, 116, 120, 123, 124, 127, 128, 129, 134, 138, 141, 142, 145, 146, 147, 149, 153, 156, 157, 160, 161, 162, 164, 168, 172, 173, 176, 177, 178, 180, 184, 187, 188, 191, 192, 193, 195, 199, 202, 203, 207, 208, 209, 211, 215, 218, 219, 223, 224, 225, 228, 232, 235, 236, 239, 240, 241, 243, 247, 250, 251, 254, 255, 256, 258, 262, 266, 267, 272, 273, 274, 275, 284, 297, 299, 303, 309, 337, 347, 352, 353, 362, 363, 366, 368, 376, 377, 378, 383, 384, 387, 389, 390, 391, 392, 395, 396, 397, 399, 409, 410, 411, 412, 413, 420, 421, 424, 426, 434, 435, 436, 441, 442, 445, 447, 455, 458, 459, 465, 466, 469, 473, 477, 479, 480, 481, 484, 485, 486, 487, 488, 490, 492, 495, 496, 497, 504, 505, 506, 508, 511, 517, 518, 522, 523, 524, 526, 529, 534, 535, 540, 541, 542, 544, 547, 548, 549, 550, 556, 557, 558, 559, 561, 564, 567, 568, 573, 574, 575, 577, 580, 581, 582, 589, 590, 591, 593, 596, 597, 598, 605, 606, 607, 609, 611, 614, 615, 616, 622, 623, 624, 626, 628, 631, 634, 635, 639, 640, 641, 643, 645, 648, 649, 650, 656, 657, 658, 661, 664, 665, 666, 671, 672, 673, 675, 679, 680, 681, 688, 689, 690, 692, 696, 697, 698, 705, 706, 707, 708, 710, 713, 715, 716, 721, 722, 723, 725, 726, 727, 731, 732, 733, 734, 739, 740, 747, 751, 752, 764, 771, 772, 779, 780, 783, 785, 786, 787, 789, 790, 791, 792, 796, 797, 798, 799, 801, 802, 804, 806, 807, 808, 809, 811, 812, 814, 816, 817, 818, 819, 821, 822, 824, 825, 827, 828, 829, 830, 832, 833, 835, 837, 838, 839, 840, 842, 843, 845, 849, 851, 855, 856, 857, 863, 865], "fix": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "make": [11, 15, 36, 40, 53, 57, 69, 73, 84, 88, 99, 103, 116, 120, 134, 138, 149, 153, 164, 168, 180, 184, 195, 199, 211, 215, 228, 232, 243, 247, 258, 262, 337, 347, 368, 376, 388, 389, 390, 399, 409, 426, 434, 447, 455, 456, 473, 477, 479, 492, 495, 508, 511, 526, 529, 544, 547, 551, 561, 564, 577, 580, 593, 596, 611, 614, 628, 631, 645, 648, 661, 664, 667, 675, 679, 692, 696, 710, 713, 734, 747, 783, 785, 796, 797, 806, 807, 816, 817, 827, 828, 837, 838], "grasshopp": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 726, 727, 731, 732, 734, 783, 796, 806, 816, 827, 837, 851, 852, 856, 861, 862, 866], "displai": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 855, 864], "proper": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837, 850], "represent": [11, 22, 23, 36, 47, 48, 51, 53, 64, 65, 69, 80, 81, 84, 95, 96, 99, 112, 113, 116, 127, 128, 134, 145, 146, 149, 160, 161, 164, 176, 177, 180, 191, 192, 195, 207, 208, 211, 223, 224, 228, 239, 240, 243, 254, 255, 258, 272, 273, 337, 362, 363, 368, 383, 384, 388, 389, 395, 396, 399, 420, 421, 426, 441, 442, 447, 465, 466, 477, 484, 485, 492, 504, 505, 508, 522, 523, 526, 540, 541, 544, 556, 557, 561, 573, 574, 577, 589, 590, 593, 605, 606, 611, 622, 623, 628, 639, 640, 645, 656, 657, 661, 671, 672, 675, 688, 689, 692, 705, 706, 710, 721, 722, 734, 771, 772, 781, 783, 789, 790, 796, 801, 802, 806, 811, 812, 816, 821, 822, 827, 832, 833, 837, 842, 843, 849], "ar": [11, 12, 14, 16, 20, 27, 32, 33, 34, 35, 36, 37, 39, 41, 45, 50, 53, 56, 58, 68, 69, 72, 74, 84, 87, 89, 99, 102, 104, 116, 117, 119, 121, 131, 134, 137, 139, 149, 152, 154, 164, 167, 169, 180, 183, 185, 194, 195, 198, 200, 205, 211, 214, 216, 221, 228, 229, 231, 233, 242, 243, 244, 246, 248, 258, 261, 263, 275, 276, 283, 292, 302, 329, 337, 368, 388, 389, 399, 403, 410, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 709, 710, 717, 734, 739, 742, 783, 796, 806, 816, 826, 827, 837, 849, 850, 852, 855, 856, 859, 860, 862, 863, 865, 866], "panel": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 309, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "other": [11, 35, 36, 50, 53, 68, 69, 83, 84, 99, 115, 116, 133, 134, 149, 163, 164, 179, 180, 194, 195, 210, 211, 227, 228, 242, 243, 258, 301, 337, 368, 389, 398, 399, 425, 426, 446, 447, 473, 477, 492, 508, 526, 544, 561, 566, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 738, 783, 796, 806, 816, 827, 837, 847, 849, 850, 853, 862, 866], "output": [11, 22, 23, 33, 36, 47, 48, 53, 64, 65, 69, 80, 81, 84, 95, 96, 99, 112, 113, 116, 127, 128, 134, 145, 146, 149, 160, 161, 164, 176, 177, 180, 191, 192, 195, 207, 208, 211, 223, 224, 228, 239, 240, 243, 254, 255, 258, 272, 273, 337, 362, 363, 368, 383, 384, 389, 395, 396, 399, 420, 421, 426, 441, 442, 447, 465, 466, 477, 484, 485, 492, 504, 505, 508, 522, 523, 526, 540, 541, 544, 556, 557, 561, 573, 574, 577, 589, 590, 593, 605, 606, 611, 622, 623, 628, 639, 640, 645, 656, 657, 661, 671, 672, 675, 688, 689, 692, 705, 706, 710, 721, 722, 726, 734, 771, 772, 783, 789, 790, 796, 801, 802, 806, 811, 812, 816, 821, 822, 827, 832, 833, 837, 842, 843, 856, 857, 859, 860, 863], "add": [12, 13, 37, 38, 54, 55, 70, 71, 85, 86, 100, 101, 117, 118, 135, 136, 150, 151, 165, 166, 181, 182, 196, 197, 212, 213, 229, 230, 244, 245, 259, 260, 338, 339, 340, 369, 370, 393, 398, 400, 401, 427, 428, 448, 449, 478, 493, 509, 527, 545, 562, 578, 594, 612, 629, 646, 662, 676, 677, 693, 694, 711, 726, 735, 736, 737, 738, 739, 740, 741, 761, 854, 863, 865, 866], "extens": [12, 37, 54, 55, 70, 71, 85, 100, 101, 117, 135, 150, 151, 165, 181, 182, 196, 212, 229, 230, 244, 245, 259, 260, 338, 349, 357, 359, 381, 398, 413, 417, 439, 462, 761, 850], "defin": [12, 37, 38, 117, 118, 163, 170, 210, 229, 244, 292, 302, 304, 350, 388, 398, 498, 512, 530, 536, 599, 717, 849, 855, 856, 857, 862, 865, 866], "affect": [12, 37, 38, 117, 118, 229, 244], "": [12, 17, 24, 37, 38, 41, 42, 49, 58, 59, 67, 72, 74, 75, 82, 89, 90, 97, 104, 105, 114, 117, 118, 121, 122, 129, 133, 139, 140, 147, 154, 155, 162, 163, 169, 171, 178, 185, 186, 193, 194, 200, 201, 209, 210, 216, 217, 225, 229, 233, 234, 241, 244, 248, 249, 256, 263, 265, 274, 336, 341, 348, 350, 351, 354, 356, 366, 367, 387, 388, 397, 414, 424, 445, 469, 473, 486, 506, 516, 524, 542, 558, 575, 591, 607, 617, 624, 633, 641, 658, 673, 690, 691, 707, 723, 738, 779, 791, 804, 814, 824, 835, 845, 849, 850, 855, 856, 861, 862, 865], "i": [12, 14, 16, 18, 19, 20, 24, 30, 32, 33, 35, 37, 39, 41, 43, 44, 45, 49, 50, 52, 54, 55, 56, 58, 60, 61, 66, 67, 68, 70, 71, 74, 76, 77, 82, 83, 85, 86, 87, 89, 91, 92, 97, 98, 100, 101, 102, 104, 106, 107, 108, 114, 115, 117, 119, 121, 123, 124, 129, 130, 133, 135, 136, 137, 139, 141, 142, 147, 148, 150, 151, 152, 154, 156, 157, 162, 163, 165, 166, 167, 169, 172, 173, 178, 179, 181, 182, 183, 185, 187, 188, 193, 194, 196, 197, 200, 202, 203, 209, 210, 212, 213, 214, 216, 218, 219, 225, 227, 229, 230, 231, 233, 235, 236, 241, 242, 244, 245, 246, 248, 250, 251, 256, 259, 260, 263, 266, 267, 274, 275, 278, 291, 309, 327, 329, 336, 338, 348, 349, 352, 353, 356, 366, 367, 377, 378, 387, 388, 391, 392, 397, 398, 410, 411, 412, 413, 414, 424, 425, 435, 436, 445, 446, 456, 458, 459, 469, 473, 476, 480, 481, 486, 487, 494, 496, 497, 498, 500, 506, 507, 510, 513, 514, 515, 516, 517, 518, 524, 525, 528, 532, 533, 534, 535, 536, 542, 543, 549, 550, 551, 552, 558, 563, 565, 566, 567, 568, 569, 575, 579, 581, 582, 583, 585, 591, 592, 595, 597, 598, 599, 600, 601, 607, 608, 610, 613, 615, 616, 617, 619, 624, 625, 627, 630, 632, 633, 634, 635, 641, 642, 643, 644, 647, 649, 650, 651, 652, 658, 659, 663, 665, 666, 667, 673, 678, 680, 681, 682, 683, 687, 690, 691, 695, 697, 698, 699, 700, 701, 707, 709, 712, 714, 715, 716, 717, 723, 724, 727, 731, 733, 735, 738, 742, 746, 751, 752, 761, 773, 779, 782, 786, 787, 791, 798, 799, 804, 808, 809, 814, 818, 819, 824, 825, 829, 830, 835, 839, 840, 845, 847, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 862, 863, 865, 866], "option": [12, 14, 15, 21, 22, 23, 32, 33, 34, 37, 39, 40, 46, 47, 48, 52, 56, 57, 63, 64, 65, 73, 79, 80, 81, 87, 88, 94, 95, 96, 98, 102, 103, 111, 112, 113, 117, 119, 120, 126, 127, 128, 137, 138, 144, 145, 146, 148, 152, 153, 159, 160, 161, 163, 167, 168, 175, 176, 177, 183, 184, 190, 191, 192, 199, 206, 207, 208, 214, 215, 222, 223, 224, 229, 231, 232, 238, 239, 240, 244, 246, 247, 253, 254, 255, 262, 271, 272, 273, 275, 276, 278, 282, 289, 291, 296, 308, 309, 327, 329, 333, 336, 342, 344, 347, 360, 362, 363, 371, 376, 382, 383, 384, 388, 390, 394, 395, 396, 398, 404, 406, 409, 410, 413, 418, 420, 421, 429, 431, 434, 440, 441, 442, 450, 452, 455, 464, 465, 466, 473, 479, 483, 484, 485, 487, 495, 498, 503, 504, 505, 511, 516, 521, 522, 523, 529, 536, 539, 540, 541, 547, 555, 556, 557, 564, 566, 572, 573, 574, 580, 583, 588, 589, 590, 592, 596, 599, 600, 601, 604, 605, 606, 614, 617, 621, 622, 623, 631, 633, 638, 639, 640, 644, 648, 651, 652, 655, 656, 657, 664, 670, 671, 672, 679, 682, 686, 688, 689, 696, 699, 704, 705, 706, 713, 717, 720, 721, 722, 727, 731, 735, 736, 737, 738, 739, 742, 746, 747, 753, 761, 763, 765, 766, 767, 768, 770, 771, 772, 785, 788, 789, 790, 797, 800, 801, 802, 807, 810, 811, 812, 817, 820, 821, 822, 828, 831, 832, 833, 838, 841, 842, 843, 856, 866], "should": [12, 14, 20, 34, 35, 37, 38, 39, 45, 56, 83, 87, 102, 115, 117, 118, 119, 137, 152, 167, 179, 183, 214, 227, 229, 231, 244, 246, 275, 297, 338, 341, 349, 354, 355, 356, 367, 388, 398, 414, 425, 470, 472, 498, 507, 516, 536, 560, 583, 617, 633, 682, 699, 717, 727, 731, 735, 849, 850, 861, 862], "onli": [12, 14, 20, 37, 39, 45, 56, 68, 87, 102, 117, 119, 137, 152, 167, 183, 214, 229, 231, 244, 246, 278, 291, 329, 344, 406, 431, 452, 761, 855], "implement": [12, 14, 20, 35, 37, 39, 45, 56, 87, 102, 117, 119, 137, 152, 167, 183, 214, 229, 231, 244, 246, 367, 792, 846, 849, 851], "requir": [12, 14, 17, 37, 39, 42, 55, 56, 59, 75, 86, 87, 90, 101, 102, 105, 117, 119, 122, 136, 137, 140, 151, 152, 155, 166, 167, 171, 182, 183, 186, 197, 201, 213, 214, 217, 229, 230, 231, 234, 244, 245, 246, 249, 260, 265, 297, 338, 357, 849], "whenev": [12, 14, 37, 38, 39, 56, 87, 102, 117, 118, 119, 137, 152, 167, 183, 214, 229, 231, 244, 246], "wa": [12, 37, 38, 117, 118, 229, 244, 470], "abl": [12, 37, 38, 117, 118, 229, 244], "calcul": [12, 34, 37, 38, 54, 70, 85, 100, 117, 118, 135, 150, 165, 181, 196, 212, 229, 244, 259, 341, 354, 355, 356, 414, 470, 500, 513, 514, 515, 531, 532, 533, 565, 569, 585, 608, 617, 619, 625, 632, 642, 659, 683, 687, 700, 701, 714, 724, 733, 761, 769, 849, 850], "appli": [12, 37, 38, 117, 118, 163, 210, 229, 242, 244, 276, 282, 289, 296, 297, 308, 327, 333, 364, 365, 385, 386, 388, 398, 422, 423, 443, 444, 467, 468, 470, 471, 472, 473, 599, 753, 773, 849, 850, 862, 866], "note": [12, 28, 37, 117, 229, 244, 275, 735, 847], "ad": [12, 16, 35, 37, 41, 58, 71, 74, 89, 104, 117, 121, 139, 154, 169, 185, 200, 210, 216, 229, 233, 244, 248, 263, 336, 340, 370, 398, 401, 428, 449, 735, 736, 737, 738, 846, 857, 862], "all": [12, 29, 37, 50, 117, 229, 244, 349, 358, 359, 380, 381, 388, 416, 417, 425, 438, 439, 461, 462, 727, 731, 733, 749, 753, 754, 759, 760, 761, 773, 846, 849, 850, 853, 855, 857, 862, 864], "befor": [12, 16, 37, 41, 58, 74, 89, 104, 117, 121, 139, 154, 169, 185, 200, 216, 229, 233, 244, 248, 263, 297, 341, 398, 735, 850], "featur": [12, 13, 35, 37, 38, 55, 71, 86, 101, 117, 118, 136, 151, 163, 166, 170, 182, 194, 197, 210, 213, 229, 230, 242, 244, 245, 260, 284, 297, 336, 339, 340, 344, 358, 359, 369, 370, 380, 381, 388, 393, 398, 400, 401, 406, 416, 417, 427, 428, 431, 438, 439, 448, 449, 452, 461, 462, 470, 472, 491, 494, 507, 510, 512, 525, 528, 530, 546, 560, 563, 576, 579, 592, 595, 600, 601, 610, 613, 627, 630, 644, 647, 651, 652, 663, 667, 674, 678, 691, 695, 709, 712, 761, 850, 851, 854, 856, 857, 862, 863, 866], "In": [13, 275, 543, 850, 851, 861], "adapt": [13, 297], "therefor": [13, 667], "check": [14, 17, 39, 42, 56, 59, 72, 75, 87, 90, 102, 105, 119, 122, 137, 140, 152, 155, 167, 171, 183, 186, 198, 201, 214, 217, 231, 234, 246, 249, 261, 265, 278, 291, 329, 403, 755, 756, 761, 846, 850, 851], "creation": [14, 39, 56, 72, 87, 102, 119, 137, 152, 167, 183, 198, 214, 231, 246, 261, 850, 862], "did": [14, 39, 56, 87, 102, 119, 137, 152, 167, 183, 214, 231, 246], "compli": [14, 17, 39, 41, 42, 56, 58, 59, 74, 75, 87, 89, 90, 102, 104, 105, 119, 121, 122, 137, 139, 140, 152, 154, 155, 167, 169, 171, 183, 185, 186, 200, 201, 214, 216, 217, 231, 233, 234, 246, 248, 249, 263, 265], "cl": [15, 40, 57, 73, 88, 103, 120, 138, 153, 168, 184, 199, 215, 232, 247, 262, 276, 289, 327, 347, 376, 390, 409, 434, 455, 479, 495, 511, 529, 547, 564, 580, 596, 614, 631, 648, 664, 679, 696, 713, 728, 747, 785, 797, 807, 817, 828, 838, 849], "none": [15, 26, 29, 30, 33, 34, 40, 57, 73, 88, 103, 120, 130, 131, 132, 138, 153, 168, 184, 194, 199, 205, 215, 226, 232, 247, 262, 282, 296, 308, 333, 338, 339, 347, 350, 351, 357, 358, 364, 369, 376, 380, 385, 388, 390, 400, 409, 410, 413, 416, 422, 427, 434, 438, 443, 448, 455, 456, 461, 467, 479, 487, 495, 498, 511, 529, 547, 564, 580, 592, 596, 600, 601, 614, 617, 631, 644, 648, 651, 652, 664, 679, 696, 713, 726, 727, 731, 732, 733, 735, 736, 737, 738, 739, 741, 742, 745, 746, 747, 753, 762, 763, 765, 766, 767, 768, 773, 774, 777, 785, 797, 807, 817, 828, 838, 849, 850, 856, 862], "copy_guid": [15, 40, 57, 73, 88, 103, 120, 138, 153, 168, 184, 199, 215, 232, 247, 262, 347, 376, 390, 409, 434, 455, 479, 495, 511, 529, 547, 564, 580, 596, 614, 631, 648, 664, 679, 696, 713, 747, 785, 797, 807, 817, 828, 838], "fals": [15, 21, 22, 23, 32, 40, 46, 47, 48, 52, 57, 63, 64, 65, 73, 79, 80, 81, 88, 94, 95, 96, 103, 111, 112, 113, 120, 126, 127, 128, 138, 144, 145, 146, 153, 159, 160, 161, 168, 175, 176, 177, 184, 190, 191, 192, 199, 206, 207, 208, 215, 222, 223, 224, 232, 238, 239, 240, 247, 253, 254, 255, 262, 271, 272, 273, 278, 281, 291, 295, 304, 307, 329, 332, 344, 347, 360, 362, 363, 376, 382, 383, 384, 390, 394, 395, 396, 403, 406, 409, 418, 420, 421, 431, 434, 440, 441, 442, 452, 455, 464, 465, 466, 479, 483, 484, 485, 495, 503, 504, 505, 507, 511, 521, 522, 523, 525, 529, 539, 540, 541, 547, 555, 556, 557, 564, 572, 573, 574, 580, 588, 589, 590, 596, 604, 605, 606, 614, 621, 622, 623, 627, 631, 638, 639, 640, 648, 655, 656, 657, 664, 670, 671, 672, 679, 682, 686, 688, 689, 696, 699, 704, 705, 706, 709, 713, 717, 720, 721, 722, 747, 761, 770, 771, 772, 785, 788, 789, 790, 797, 800, 801, 802, 807, 810, 811, 812, 817, 820, 821, 822, 828, 831, 832, 833, 838, 841, 842, 843, 857, 863], "independ": [15, 40, 57, 73, 88, 103, 120, 138, 153, 168, 184, 199, 215, 232, 247, 262, 347, 376, 390, 409, 434, 455, 479, 495, 511, 529, 547, 564, 580, 596, 614, 631, 648, 664, 679, 696, 713, 747, 785, 797, 807, 817, 828, 838], "data": [15, 18, 19, 21, 22, 23, 24, 40, 43, 44, 46, 47, 48, 49, 57, 60, 61, 63, 64, 65, 67, 73, 76, 77, 79, 80, 81, 82, 88, 91, 92, 94, 95, 96, 97, 103, 106, 107, 111, 112, 113, 114, 120, 123, 124, 126, 127, 128, 129, 138, 141, 142, 144, 145, 146, 147, 153, 156, 157, 159, 160, 161, 162, 168, 172, 173, 175, 176, 177, 178, 184, 187, 188, 190, 191, 192, 193, 199, 202, 203, 206, 207, 208, 209, 215, 218, 219, 222, 223, 224, 225, 232, 235, 236, 238, 239, 240, 241, 247, 250, 251, 253, 254, 255, 256, 262, 266, 267, 271, 272, 273, 274, 347, 352, 353, 360, 362, 363, 366, 376, 377, 378, 382, 383, 384, 387, 388, 390, 391, 392, 394, 395, 396, 397, 409, 411, 412, 418, 420, 421, 424, 434, 435, 436, 440, 441, 442, 445, 455, 458, 459, 464, 465, 466, 469, 476, 479, 480, 481, 483, 484, 485, 486, 487, 495, 496, 497, 503, 504, 505, 506, 511, 517, 518, 521, 522, 523, 524, 529, 534, 535, 539, 540, 541, 542, 547, 549, 550, 555, 556, 557, 558, 564, 567, 568, 572, 573, 574, 575, 580, 581, 582, 588, 589, 590, 591, 596, 597, 598, 604, 605, 606, 607, 614, 615, 616, 621, 622, 623, 624, 631, 634, 635, 638, 639, 640, 641, 648, 649, 650, 655, 656, 657, 658, 664, 665, 666, 670, 671, 672, 673, 679, 680, 681, 686, 688, 689, 690, 696, 697, 698, 704, 705, 706, 707, 713, 715, 716, 720, 721, 722, 723, 747, 751, 752, 770, 771, 772, 774, 775, 776, 779, 782, 785, 786, 787, 788, 789, 790, 791, 795, 797, 798, 799, 800, 801, 802, 804, 807, 808, 809, 810, 811, 812, 814, 817, 818, 819, 820, 821, 822, 824, 826, 828, 829, 830, 831, 832, 833, 835, 838, 839, 840, 841, 842, 843, 845, 849, 850, 859, 864], "compa": [15, 18, 19, 21, 40, 43, 44, 46, 57, 60, 61, 63, 73, 76, 77, 79, 88, 91, 92, 94, 103, 106, 107, 111, 120, 123, 124, 126, 138, 141, 142, 144, 153, 156, 157, 159, 168, 172, 173, 175, 184, 187, 188, 190, 199, 202, 203, 206, 215, 218, 219, 222, 232, 235, 236, 238, 247, 250, 251, 253, 262, 266, 267, 271, 309, 336, 343, 344, 345, 346, 347, 352, 353, 360, 364, 365, 371, 372, 374, 375, 376, 377, 378, 382, 385, 386, 388, 390, 391, 392, 394, 405, 406, 407, 408, 409, 410, 411, 412, 418, 422, 423, 429, 430, 431, 432, 433, 434, 435, 436, 440, 443, 444, 450, 451, 452, 453, 454, 455, 458, 459, 464, 467, 468, 479, 480, 481, 483, 495, 496, 497, 499, 503, 510, 511, 513, 514, 515, 517, 518, 521, 528, 529, 532, 533, 534, 535, 539, 546, 547, 548, 549, 550, 551, 552, 555, 564, 565, 567, 568, 569, 572, 580, 581, 582, 584, 585, 588, 596, 597, 598, 604, 608, 614, 615, 616, 618, 619, 621, 630, 631, 632, 634, 635, 638, 642, 648, 649, 650, 655, 659, 664, 665, 666, 670, 678, 679, 680, 681, 683, 686, 687, 696, 697, 698, 699, 700, 701, 704, 712, 713, 714, 715, 716, 720, 724, 743, 744, 747, 751, 752, 765, 766, 770, 773, 777, 778, 785, 786, 787, 788, 792, 797, 798, 799, 800, 807, 808, 809, 810, 817, 818, 819, 820, 826, 828, 829, 830, 831, 838, 839, 840, 841, 847, 848, 849, 852, 854, 857, 859, 861, 864], "return": [15, 16, 17, 18, 19, 21, 23, 24, 30, 32, 33, 34, 40, 41, 42, 43, 44, 46, 48, 49, 51, 57, 58, 59, 60, 61, 63, 65, 67, 73, 74, 75, 76, 77, 79, 81, 82, 88, 89, 90, 91, 92, 94, 96, 97, 103, 104, 105, 106, 107, 108, 111, 113, 114, 120, 121, 122, 123, 124, 126, 128, 129, 131, 138, 139, 140, 141, 142, 144, 146, 147, 153, 154, 155, 156, 157, 159, 161, 162, 168, 169, 171, 172, 173, 175, 177, 178, 184, 185, 186, 187, 188, 190, 192, 193, 199, 200, 201, 202, 203, 206, 208, 209, 215, 216, 217, 218, 219, 222, 224, 225, 232, 233, 234, 235, 236, 238, 240, 241, 247, 248, 249, 250, 251, 253, 255, 256, 262, 263, 265, 266, 267, 271, 273, 274, 275, 278, 282, 283, 291, 292, 296, 302, 304, 308, 329, 333, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 363, 364, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 385, 386, 387, 388, 390, 391, 392, 394, 396, 397, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 421, 422, 423, 424, 427, 429, 430, 431, 432, 433, 434, 435, 436, 440, 442, 443, 444, 445, 448, 450, 451, 452, 453, 454, 455, 458, 459, 464, 466, 467, 468, 469, 474, 475, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 510, 511, 513, 514, 515, 516, 517, 518, 520, 521, 523, 524, 528, 529, 532, 533, 534, 535, 536, 538, 539, 541, 542, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 579, 580, 581, 582, 583, 584, 585, 587, 588, 590, 591, 595, 596, 597, 598, 599, 600, 601, 603, 604, 606, 607, 608, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 630, 631, 632, 633, 634, 635, 637, 638, 640, 641, 642, 647, 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 663, 664, 665, 666, 667, 669, 670, 672, 673, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 690, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 712, 713, 714, 715, 716, 717, 719, 720, 722, 723, 724, 726, 727, 731, 732, 735, 736, 737, 738, 739, 741, 742, 743, 744, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 763, 765, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 781, 785, 786, 787, 788, 790, 791, 793, 797, 798, 799, 800, 802, 804, 807, 808, 809, 810, 812, 814, 817, 818, 819, 820, 822, 824, 828, 829, 830, 831, 833, 835, 838, 839, 840, 841, 843, 845, 846, 849, 850], "current": [15, 40, 57, 73, 88, 103, 120, 138, 153, 168, 184, 199, 215, 232, 247, 262, 347, 376, 390, 409, 434, 455, 479, 495, 511, 529, 547, 564, 580, 596, 614, 631, 648, 664, 679, 696, 713, 747, 785, 797, 807, 817, 828, 838, 851], "bool": [15, 17, 21, 22, 23, 32, 40, 42, 46, 47, 48, 52, 57, 59, 63, 64, 65, 68, 73, 75, 79, 80, 81, 83, 88, 90, 94, 95, 96, 98, 103, 105, 111, 112, 113, 115, 120, 122, 126, 127, 128, 138, 140, 144, 145, 146, 153, 155, 159, 160, 161, 168, 171, 175, 176, 177, 179, 184, 186, 190, 191, 192, 194, 199, 201, 206, 207, 208, 215, 217, 222, 223, 224, 227, 232, 234, 238, 239, 240, 247, 249, 253, 254, 255, 262, 265, 271, 272, 273, 278, 291, 304, 329, 344, 347, 360, 362, 363, 376, 382, 383, 384, 388, 390, 394, 395, 396, 403, 406, 409, 418, 420, 421, 425, 431, 434, 440, 441, 442, 452, 455, 464, 465, 466, 476, 479, 483, 484, 485, 495, 503, 504, 505, 507, 511, 521, 522, 523, 525, 529, 539, 540, 541, 543, 547, 555, 556, 557, 560, 564, 572, 573, 574, 580, 588, 589, 590, 592, 596, 604, 605, 606, 610, 614, 621, 622, 623, 626, 627, 631, 638, 639, 640, 648, 655, 656, 657, 664, 670, 671, 672, 679, 686, 688, 689, 691, 696, 704, 705, 706, 709, 713, 717, 720, 721, 722, 747, 755, 756, 757, 758, 761, 770, 771, 772, 785, 788, 789, 790, 797, 800, 801, 802, 807, 810, 811, 812, 817, 820, 821, 822, 826, 828, 831, 832, 833, 838, 841, 842, 843], "If": [15, 18, 19, 21, 22, 23, 30, 33, 40, 43, 44, 46, 47, 48, 52, 54, 57, 60, 61, 63, 64, 65, 68, 70, 72, 73, 76, 77, 79, 80, 81, 83, 85, 88, 91, 92, 94, 95, 96, 98, 100, 103, 106, 107, 111, 112, 113, 115, 120, 123, 124, 126, 127, 128, 130, 135, 138, 141, 142, 144, 145, 146, 148, 150, 153, 156, 157, 159, 160, 161, 165, 168, 172, 173, 175, 176, 177, 179, 181, 184, 187, 188, 190, 191, 192, 194, 196, 198, 199, 202, 203, 206, 207, 208, 212, 215, 218, 219, 222, 223, 224, 227, 232, 235, 236, 238, 239, 240, 247, 250, 251, 253, 254, 255, 259, 261, 262, 266, 267, 271, 272, 273, 329, 344, 347, 352, 353, 358, 360, 362, 363, 376, 377, 378, 380, 382, 383, 384, 390, 391, 392, 394, 395, 396, 406, 409, 411, 412, 413, 416, 418, 420, 421, 431, 434, 435, 436, 438, 440, 441, 442, 452, 455, 458, 459, 461, 464, 465, 466, 476, 479, 480, 481, 483, 484, 485, 494, 495, 496, 497, 503, 504, 505, 510, 511, 517, 518, 521, 522, 523, 528, 529, 534, 535, 539, 540, 541, 543, 546, 547, 549, 550, 555, 556, 557, 563, 564, 567, 568, 572, 573, 574, 579, 580, 581, 582, 588, 589, 590, 595, 596, 597, 598, 604, 605, 606, 610, 613, 614, 615, 616, 621, 622, 623, 630, 631, 634, 635, 638, 639, 640, 647, 648, 649, 650, 655, 656, 657, 663, 664, 665, 666, 670, 671, 672, 678, 679, 680, 681, 686, 688, 689, 691, 695, 696, 697, 698, 704, 705, 706, 712, 713, 715, 716, 720, 721, 722, 735, 736, 738, 739, 742, 747, 751, 752, 761, 770, 771, 772, 785, 786, 787, 788, 789, 790, 797, 798, 799, 800, 801, 802, 807, 808, 809, 810, 811, 812, 817, 818, 819, 820, 821, 822, 828, 829, 830, 831, 832, 833, 838, 839, 840, 841, 842, 843, 846, 847, 852, 856, 857, 861, 862, 863], "true": [15, 21, 22, 23, 32, 40, 46, 47, 48, 52, 57, 63, 64, 65, 66, 68, 73, 79, 80, 81, 83, 88, 94, 95, 96, 98, 103, 111, 112, 113, 115, 120, 126, 127, 128, 138, 144, 145, 146, 153, 159, 160, 161, 168, 175, 176, 177, 179, 184, 190, 191, 192, 194, 199, 206, 207, 208, 215, 222, 223, 224, 227, 232, 238, 239, 240, 247, 253, 254, 255, 262, 271, 272, 273, 278, 291, 292, 302, 304, 329, 344, 347, 349, 360, 362, 363, 376, 382, 383, 384, 388, 390, 394, 395, 396, 403, 406, 409, 418, 420, 421, 425, 431, 434, 440, 441, 442, 452, 455, 464, 465, 466, 476, 479, 483, 484, 485, 495, 503, 504, 505, 507, 511, 521, 522, 523, 525, 529, 539, 540, 541, 543, 547, 555, 556, 557, 564, 572, 573, 574, 580, 588, 589, 590, 596, 604, 605, 606, 610, 614, 621, 622, 623, 627, 631, 638, 639, 640, 648, 655, 656, 657, 664, 670, 671, 672, 679, 686, 688, 689, 691, 696, 704, 705, 706, 709, 713, 717, 720, 721, 722, 731, 738, 747, 755, 756, 757, 761, 770, 771, 772, 785, 788, 789, 790, 797, 800, 801, 802, 807, 810, 811, 812, 817, 820, 821, 822, 828, 831, 832, 833, 838, 841, 842, 843, 856, 857, 859, 862, 863], "have": [15, 16, 40, 41, 57, 58, 68, 71, 73, 74, 88, 89, 103, 104, 120, 121, 138, 139, 153, 154, 168, 169, 184, 185, 199, 200, 215, 216, 232, 233, 242, 247, 248, 261, 262, 263, 278, 291, 329, 336, 347, 376, 390, 398, 409, 434, 455, 479, 495, 511, 529, 547, 564, 580, 596, 600, 601, 614, 631, 648, 651, 652, 664, 679, 696, 713, 735, 747, 757, 785, 797, 807, 817, 828, 838, 850, 856], "same": [15, 26, 33, 40, 52, 57, 68, 73, 88, 103, 120, 130, 131, 132, 138, 153, 168, 184, 199, 215, 226, 232, 247, 261, 262, 347, 376, 390, 398, 409, 434, 455, 479, 495, 511, 529, 547, 564, 580, 596, 614, 631, 648, 664, 679, 696, 713, 738, 747, 785, 797, 807, 817, 825, 826, 828, 838, 849, 850, 861], "guid": [15, 22, 23, 35, 40, 47, 48, 57, 64, 65, 73, 80, 81, 88, 95, 96, 103, 112, 113, 120, 127, 128, 138, 145, 146, 153, 160, 161, 168, 176, 177, 184, 191, 192, 199, 207, 208, 210, 215, 223, 224, 232, 239, 240, 247, 254, 255, 262, 272, 273, 347, 362, 363, 376, 383, 384, 390, 395, 396, 409, 420, 421, 434, 441, 442, 455, 465, 466, 479, 484, 485, 495, 504, 505, 511, 522, 523, 529, 540, 541, 547, 556, 557, 564, 573, 574, 580, 589, 590, 596, 605, 606, 614, 622, 623, 631, 639, 640, 648, 656, 657, 664, 671, 672, 679, 688, 689, 696, 705, 706, 713, 721, 722, 747, 748, 771, 772, 785, 789, 790, 797, 801, 802, 807, 811, 812, 817, 821, 822, 828, 832, 833, 838, 842, 843, 851, 854, 856, 862], "origin": [15, 40, 57, 73, 88, 103, 120, 138, 153, 168, 184, 199, 215, 232, 247, 262, 336, 347, 376, 390, 409, 434, 455, 479, 495, 511, 529, 547, 564, 580, 596, 614, 631, 648, 664, 679, 696, 713, 747, 765, 766, 785, 797, 807, 817, 828, 838, 856, 865], "classmethod": [16, 17, 18, 19, 24, 30, 32, 41, 42, 43, 44, 49, 51, 58, 59, 60, 61, 67, 74, 75, 76, 77, 82, 89, 90, 91, 92, 97, 104, 105, 106, 107, 114, 121, 122, 123, 124, 129, 139, 140, 141, 142, 147, 154, 155, 156, 157, 162, 169, 171, 172, 173, 178, 185, 186, 187, 188, 193, 200, 201, 202, 203, 209, 216, 217, 218, 219, 225, 233, 234, 235, 236, 241, 248, 249, 250, 251, 256, 263, 265, 266, 267, 274, 310, 350, 351, 352, 353, 366, 377, 378, 387, 391, 392, 397, 410, 411, 412, 413, 424, 435, 436, 445, 456, 457, 458, 459, 469, 480, 481, 486, 489, 496, 497, 498, 499, 506, 512, 516, 517, 518, 524, 530, 534, 535, 536, 542, 549, 550, 551, 552, 558, 566, 567, 568, 575, 581, 582, 583, 584, 591, 597, 598, 599, 600, 601, 607, 615, 616, 617, 618, 624, 633, 634, 635, 641, 649, 650, 651, 652, 658, 665, 666, 667, 673, 680, 681, 682, 690, 697, 698, 699, 707, 715, 716, 717, 723, 751, 752, 779, 781, 786, 787, 791, 793, 794, 798, 799, 804, 808, 809, 814, 818, 819, 824, 829, 830, 835, 839, 840, 845, 849], "kwarg": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 276, 289, 327, 410, 413, 456, 457, 498, 499, 516, 552, 583, 584, 600, 601, 617, 618, 651, 735, 737, 849, 850], "new": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 482, 502, 520, 538, 554, 571, 587, 603, 620, 637, 654, 669, 685, 703, 719, 732, 852, 856], "differ": [16, 733, 792, 849, 857, 862], "fom": 16, "pass": [16, 34, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 276, 289, 327, 349, 410, 413], "constructor": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 297, 410, 413, 551, 850], "instead": [16, 35, 551, 856], "separ": [16, 855], "argument": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 276, 289, 297, 327, 410, 413, 737, 850], "expect": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 278, 626], "been": [16, 41, 58, 71, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 735, 826], "call": [16, 20, 41, 45, 54, 55, 58, 70, 71, 74, 85, 86, 89, 100, 101, 104, 121, 135, 136, 139, 150, 151, 154, 165, 166, 169, 181, 182, 185, 196, 197, 200, 212, 213, 216, 230, 233, 245, 248, 259, 260, 263, 297, 849, 856], "code": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 850, 851], "doe": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 278, 291, 329, 341, 354, 356, 367, 414, 494, 546, 563, 579, 595, 613, 647, 663, 792, 856], "verifi": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 349, 758, 849, 850], "given": [16, 26, 32, 33, 41, 51, 58, 74, 89, 104, 121, 130, 131, 132, 139, 154, 169, 185, 200, 216, 226, 233, 248, 263, 275, 278, 282, 283, 291, 292, 296, 308, 327, 329, 333, 348, 349, 351, 355, 410, 413, 474, 475, 482, 487, 490, 500, 501, 502, 513, 514, 515, 519, 520, 531, 532, 533, 537, 538, 553, 554, 565, 569, 570, 571, 585, 586, 587, 599, 602, 603, 608, 619, 620, 625, 632, 636, 637, 642, 653, 654, 659, 668, 669, 683, 684, 685, 687, 700, 701, 702, 703, 714, 718, 719, 724, 754, 755, 781, 855], "adjac": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 746], "lie": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263], "topologi": [16, 31, 33, 34, 35, 41, 50, 51, 52, 58, 68, 74, 83, 89, 98, 104, 121, 133, 139, 148, 154, 163, 169, 179, 185, 194, 200, 210, 216, 227, 233, 242, 248, 263, 276, 278, 327, 329, 733, 769, 850, 862, 863, 866], "allow": [16, 41, 58, 74, 83, 89, 104, 115, 121, 139, 154, 169, 179, 185, 200, 216, 227, 233, 248, 263, 283, 284, 297, 299, 349, 733, 826, 857, 862], "them": [16, 41, 58, 68, 74, 89, 98, 104, 121, 133, 139, 154, 163, 169, 185, 194, 200, 210, 216, 233, 248, 263, 446, 746, 757, 849, 850, 855, 862], "respons": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 388], "A": [16, 28, 29, 30, 32, 35, 131, 163, 210, 275, 278, 282, 283, 291, 296, 308, 329, 333, 336, 339, 350, 351, 367, 369, 388, 398, 400, 403, 410, 413, 427, 448, 470, 473, 482, 487, 501, 502, 519, 520, 537, 538, 553, 554, 570, 571, 586, 587, 602, 603, 620, 636, 637, 653, 654, 668, 669, 684, 685, 702, 703, 708, 718, 719, 733, 735, 741, 753, 754, 758, 761, 847, 849, 853, 856, 857, 862], "valueerror": [16, 735, 738, 742], "less": [16, 291, 336, 398], "than": [16, 21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 291, 360, 382, 394, 418, 440, 464, 473, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "two": [16, 33, 34, 35, 50, 52, 68, 83, 98, 108, 133, 163, 194, 210, 227, 242, 261, 276, 278, 282, 283, 289, 291, 296, 308, 327, 329, 333, 348, 470, 498, 499, 566, 667, 739, 757, 763, 850, 860, 862], "timbermodel": [16, 20, 30, 41, 45, 58, 74, 89, 104, 121, 130, 139, 154, 169, 185, 200, 216, 233, 248, 263, 488, 490, 851], "jo": 16, "belong": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263], "whould": 16, "togeth": [16, 27, 446, 856], "number": [17, 41, 42, 58, 59, 74, 75, 89, 90, 104, 105, 121, 122, 130, 139, 140, 154, 155, 169, 171, 185, 186, 200, 201, 216, 217, 233, 234, 248, 249, 263, 265, 398, 473, 727, 731, 857, 866], "filepath": [18, 22, 43, 47, 60, 64, 76, 80, 91, 95, 106, 112, 123, 127, 141, 145, 156, 160, 172, 176, 187, 191, 202, 207, 218, 223, 235, 239, 250, 254, 266, 272, 352, 362, 377, 383, 391, 395, 411, 420, 435, 441, 458, 465, 480, 484, 496, 504, 517, 522, 534, 540, 549, 556, 567, 573, 581, 589, 597, 605, 615, 622, 634, 639, 649, 656, 665, 671, 680, 688, 697, 705, 715, 721, 751, 771, 786, 789, 793, 794, 798, 801, 808, 811, 818, 821, 829, 832, 839, 842], "construct": [18, 19, 24, 43, 44, 49, 60, 61, 67, 76, 77, 82, 91, 92, 97, 106, 107, 114, 123, 124, 129, 141, 142, 147, 156, 157, 162, 172, 173, 178, 187, 188, 193, 202, 203, 209, 218, 219, 225, 235, 236, 241, 250, 251, 256, 266, 267, 274, 352, 353, 366, 377, 378, 387, 391, 392, 397, 411, 412, 413, 424, 435, 436, 445, 458, 459, 469, 480, 481, 486, 496, 497, 499, 506, 517, 518, 524, 534, 535, 542, 548, 549, 550, 551, 552, 558, 567, 568, 575, 581, 582, 584, 591, 597, 598, 600, 601, 607, 615, 616, 618, 624, 634, 635, 641, 649, 650, 651, 652, 658, 665, 666, 667, 673, 680, 681, 690, 697, 698, 707, 715, 716, 723, 751, 752, 779, 786, 787, 791, 798, 799, 804, 808, 809, 814, 818, 819, 824, 829, 830, 835, 839, 840, 845, 851, 857], "from": [18, 19, 21, 22, 23, 28, 29, 30, 33, 43, 44, 46, 47, 48, 60, 61, 63, 64, 65, 76, 77, 79, 80, 81, 91, 92, 94, 95, 96, 106, 107, 111, 112, 113, 123, 124, 126, 127, 128, 131, 141, 142, 144, 145, 146, 156, 157, 159, 160, 161, 163, 172, 173, 175, 176, 177, 187, 188, 190, 191, 192, 202, 203, 206, 207, 208, 210, 218, 219, 222, 223, 224, 235, 236, 238, 239, 240, 242, 250, 251, 253, 254, 255, 266, 267, 271, 272, 273, 309, 350, 351, 352, 353, 356, 357, 358, 360, 362, 363, 367, 377, 378, 380, 382, 383, 384, 388, 391, 392, 394, 395, 396, 410, 411, 412, 413, 414, 416, 418, 420, 421, 435, 436, 438, 440, 441, 442, 457, 458, 459, 461, 464, 465, 466, 475, 480, 481, 483, 484, 485, 487, 496, 497, 498, 499, 500, 503, 504, 505, 507, 513, 514, 515, 516, 517, 518, 521, 522, 523, 525, 531, 532, 533, 534, 535, 536, 539, 540, 541, 549, 550, 551, 552, 555, 556, 557, 565, 566, 567, 568, 569, 572, 573, 574, 581, 582, 583, 584, 585, 588, 589, 590, 597, 598, 599, 600, 601, 604, 605, 606, 608, 615, 616, 617, 618, 619, 621, 622, 623, 625, 627, 632, 633, 634, 635, 638, 639, 640, 642, 649, 650, 651, 652, 655, 656, 657, 659, 665, 666, 670, 671, 672, 680, 681, 682, 683, 686, 687, 688, 689, 697, 698, 699, 700, 701, 704, 705, 706, 709, 714, 715, 716, 717, 720, 721, 722, 724, 727, 731, 738, 751, 752, 762, 764, 770, 771, 772, 786, 787, 788, 789, 790, 792, 793, 798, 799, 800, 801, 802, 808, 809, 810, 811, 812, 818, 819, 820, 821, 822, 829, 830, 831, 832, 833, 839, 840, 841, 842, 843, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864], "json": [18, 19, 22, 23, 43, 44, 47, 48, 60, 61, 64, 65, 76, 77, 80, 81, 91, 92, 95, 96, 106, 107, 112, 113, 123, 124, 127, 128, 141, 142, 145, 146, 156, 157, 160, 161, 172, 173, 176, 177, 187, 188, 191, 192, 202, 203, 207, 208, 218, 219, 223, 224, 235, 236, 239, 240, 250, 251, 254, 255, 266, 267, 272, 273, 352, 353, 362, 363, 377, 378, 383, 384, 391, 392, 395, 396, 411, 412, 420, 421, 435, 436, 441, 442, 458, 459, 465, 466, 480, 481, 484, 485, 496, 497, 504, 505, 517, 518, 522, 523, 534, 535, 540, 541, 549, 550, 556, 557, 567, 568, 573, 574, 581, 582, 589, 590, 597, 598, 605, 606, 615, 616, 622, 623, 634, 635, 639, 640, 649, 650, 656, 657, 665, 666, 671, 672, 680, 681, 688, 689, 697, 698, 705, 706, 715, 716, 721, 722, 751, 752, 771, 772, 786, 787, 789, 790, 792, 793, 794, 798, 799, 801, 802, 808, 809, 811, 812, 818, 819, 821, 822, 829, 830, 832, 833, 839, 840, 842, 843], "file": [18, 22, 43, 47, 60, 64, 76, 80, 91, 95, 106, 112, 123, 127, 141, 145, 156, 160, 172, 176, 187, 191, 202, 207, 218, 223, 235, 239, 250, 254, 266, 272, 352, 362, 377, 383, 391, 395, 411, 420, 435, 441, 458, 465, 480, 484, 487, 488, 490, 496, 504, 517, 522, 534, 540, 549, 556, 567, 573, 581, 589, 597, 605, 615, 622, 634, 639, 649, 656, 665, 671, 680, 688, 697, 705, 715, 721, 751, 771, 786, 789, 792, 793, 794, 798, 801, 808, 811, 818, 821, 829, 832, 839, 842, 853, 858, 859], "str": [18, 19, 21, 22, 23, 35, 43, 44, 46, 47, 48, 51, 60, 61, 63, 64, 65, 76, 77, 79, 80, 81, 91, 92, 94, 95, 96, 106, 107, 111, 112, 113, 123, 124, 126, 127, 128, 141, 142, 144, 145, 146, 156, 157, 159, 160, 161, 172, 173, 175, 176, 177, 187, 188, 190, 191, 192, 202, 203, 206, 207, 208, 210, 218, 219, 222, 223, 224, 235, 236, 238, 239, 240, 250, 251, 253, 254, 255, 266, 267, 271, 272, 273, 276, 348, 352, 353, 360, 362, 363, 377, 378, 382, 383, 384, 391, 392, 394, 395, 396, 411, 412, 418, 420, 421, 435, 436, 440, 441, 442, 458, 459, 464, 465, 466, 470, 471, 472, 475, 476, 480, 481, 483, 484, 485, 487, 488, 490, 496, 497, 503, 504, 505, 507, 516, 517, 518, 521, 522, 523, 525, 534, 535, 536, 539, 540, 541, 549, 550, 555, 556, 557, 567, 568, 572, 573, 574, 581, 582, 588, 589, 590, 597, 598, 604, 605, 606, 615, 616, 621, 622, 623, 627, 633, 634, 635, 638, 639, 640, 649, 650, 655, 656, 657, 665, 666, 670, 671, 672, 674, 680, 681, 686, 688, 689, 691, 697, 698, 704, 705, 706, 709, 715, 716, 717, 720, 721, 722, 726, 731, 732, 737, 738, 748, 751, 752, 753, 756, 770, 771, 772, 781, 786, 787, 788, 789, 790, 793, 794, 798, 799, 800, 801, 802, 808, 809, 810, 811, 812, 818, 819, 820, 821, 822, 826, 829, 830, 831, 832, 833, 839, 840, 841, 842, 843, 850], "path": [18, 22, 43, 47, 60, 64, 76, 80, 91, 95, 106, 112, 123, 127, 141, 145, 156, 160, 172, 176, 187, 191, 202, 207, 218, 223, 235, 239, 250, 254, 266, 272, 352, 362, 377, 383, 391, 395, 411, 420, 435, 441, 458, 465, 480, 484, 487, 490, 496, 504, 517, 522, 534, 540, 549, 556, 567, 573, 581, 589, 597, 605, 615, 622, 634, 639, 649, 656, 665, 671, 680, 688, 697, 705, 715, 721, 751, 771, 786, 789, 793, 794, 798, 801, 808, 811, 818, 821, 829, 832, 839, 842, 859], "ha": [18, 19, 43, 44, 60, 61, 71, 76, 77, 91, 92, 106, 107, 123, 124, 141, 142, 156, 157, 172, 173, 187, 188, 202, 203, 218, 219, 235, 236, 250, 251, 266, 267, 275, 352, 353, 377, 378, 391, 392, 411, 412, 435, 436, 458, 459, 470, 480, 481, 496, 497, 517, 518, 534, 535, 549, 550, 567, 568, 581, 582, 597, 598, 615, 616, 634, 635, 649, 650, 665, 666, 680, 681, 697, 698, 715, 716, 738, 751, 752, 786, 787, 798, 799, 808, 809, 818, 819, 826, 829, 830, 839, 840, 856, 862, 865], "correct": [18, 19, 43, 44, 60, 61, 76, 77, 91, 92, 106, 107, 123, 124, 141, 142, 156, 157, 172, 173, 187, 188, 202, 203, 218, 219, 235, 236, 250, 251, 266, 267, 329, 352, 353, 377, 378, 391, 392, 411, 412, 435, 436, 458, 459, 480, 481, 496, 497, 517, 518, 534, 535, 549, 550, 567, 568, 581, 582, 597, 598, 608, 615, 616, 634, 635, 649, 650, 659, 665, 666, 680, 681, 697, 698, 715, 716, 751, 752, 786, 787, 798, 799, 808, 809, 818, 819, 829, 830, 839, 840, 850], "schema": [18, 19, 24, 43, 44, 49, 60, 61, 67, 76, 77, 82, 91, 92, 97, 106, 107, 114, 123, 124, 129, 141, 142, 147, 156, 157, 162, 172, 173, 178, 187, 188, 193, 202, 203, 209, 218, 219, 225, 235, 236, 241, 250, 251, 256, 266, 267, 274, 352, 353, 366, 377, 378, 387, 391, 392, 397, 411, 412, 424, 435, 436, 445, 458, 459, 469, 480, 481, 486, 496, 497, 506, 517, 518, 524, 534, 535, 542, 549, 550, 558, 567, 568, 575, 581, 582, 591, 597, 598, 607, 615, 616, 624, 634, 635, 641, 649, 650, 658, 665, 666, 673, 680, 681, 690, 697, 698, 707, 715, 716, 723, 751, 752, 779, 786, 787, 791, 798, 799, 804, 808, 809, 814, 818, 819, 824, 829, 830, 835, 839, 840, 845], "typeerror": [18, 19, 43, 44, 60, 61, 76, 77, 91, 92, 106, 107, 123, 124, 141, 142, 156, 157, 172, 173, 187, 188, 202, 203, 218, 219, 235, 236, 250, 251, 266, 267, 352, 353, 377, 378, 391, 392, 411, 412, 435, 436, 458, 459, 480, 481, 496, 497, 517, 518, 534, 535, 549, 550, 567, 568, 581, 582, 597, 598, 615, 616, 634, 635, 649, 650, 665, 666, 680, 681, 697, 698, 715, 716, 751, 752, 786, 787, 798, 799, 808, 809, 818, 819, 829, 830, 839, 840], "restor": [20, 45, 62, 78, 93, 110, 125, 143, 158, 174, 189, 204, 220, 237, 252, 270, 850], "refer": [20, 45, 62, 78, 93, 110, 125, 143, 158, 174, 189, 204, 220, 237, 252, 270, 336, 341, 354, 355, 356, 361, 398, 414, 419, 446, 475, 476, 491, 498, 507, 516, 525, 536, 543, 551, 559, 560, 566, 576, 583, 592, 599, 600, 601, 610, 617, 627, 633, 644, 651, 652, 674, 682, 691, 699, 709, 717, 849, 850, 851, 854, 855], "dure": [20, 21, 45, 46, 63, 71, 79, 94, 111, 126, 144, 159, 163, 175, 190, 206, 222, 238, 253, 271, 284, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 761, 770, 788, 800, 810, 820, 826, 831, 841, 849, 850], "serial": [20, 45, 62, 78, 93, 110, 125, 143, 158, 174, 189, 204, 220, 237, 252, 270, 489, 792, 849, 850], "part": [20, 27, 45, 473, 565, 566, 735, 742, 846, 851, 856, 860], "To": [20, 45, 852, 854, 861, 863, 866], "avoid": [20, 28, 45, 342, 345, 371, 374, 404, 429, 432, 450, 453, 850], "circular": [20, 45], "store": [20, 45, 850, 855, 856], "kei": [20, 45, 336, 338, 357, 398, 475, 626, 855], "respect": [20, 35, 45], "de": [20, 45, 62, 78, 93, 110, 125, 143, 158, 174, 189, 204, 220, 237, 252, 270, 850], "sinc": [20, 45, 761], "role": [20, 33, 45, 283, 850], "specif": [20, 33, 45, 750, 758, 849, 850, 851, 856, 857, 862], "e": [20, 33, 45, 130, 498, 516, 536, 566, 583, 599, 633, 682, 699, 717, 849, 850, 852, 855, 865], "g": [20, 33, 45, 850, 855], "cross": [20, 33, 45, 52, 62, 66, 68, 78, 93, 110, 115, 125, 133, 143, 148, 158, 163, 174, 179, 189, 194, 204, 210, 220, 237, 252, 257, 261, 270, 336, 350, 351, 516, 536, 633, 682, 691, 699, 717, 850, 856, 857, 862], "concret": [20, 45, 850], "exampl": [20, 21, 45, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 275, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 738, 770, 788, 800, 810, 820, 831, 841, 851, 854, 855, 856, 866], "tbuttjoint": [20, 45, 850, 851], "as_str": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "comput": [21, 34, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 342, 343, 344, 345, 346, 360, 371, 372, 374, 375, 382, 394, 404, 405, 406, 407, 408, 418, 429, 430, 431, 432, 433, 440, 450, 451, 452, 453, 454, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 743, 744, 770, 788, 800, 810, 820, 831, 841], "hash": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "comparison": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "version": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "control": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "algorithm": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 275, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "digest": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "hexadecim": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "format": [21, 22, 23, 46, 47, 48, 63, 64, 65, 79, 80, 81, 94, 95, 96, 111, 112, 113, 126, 127, 128, 144, 145, 146, 159, 160, 161, 175, 176, 177, 190, 191, 192, 206, 207, 208, 222, 223, 224, 238, 239, 240, 253, 254, 255, 271, 272, 273, 360, 362, 363, 382, 383, 384, 394, 395, 396, 418, 420, 421, 440, 441, 442, 464, 465, 466, 474, 483, 484, 485, 487, 503, 504, 505, 521, 522, 523, 539, 540, 541, 555, 556, 557, 572, 573, 574, 588, 589, 590, 604, 605, 606, 621, 622, 623, 638, 639, 640, 655, 656, 657, 670, 671, 672, 686, 688, 689, 704, 705, 706, 720, 721, 722, 770, 771, 772, 788, 789, 790, 792, 800, 801, 802, 810, 811, 812, 820, 821, 822, 831, 832, 833, 841, 842, 843, 849, 855], "rather": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "byte": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "datastructur": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 343, 360, 372, 382, 394, 405, 406, 418, 430, 431, 440, 451, 452, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 743, 744, 765, 767, 770, 775, 776, 777, 778, 788, 800, 810, 820, 831, 841], "import": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 738, 761, 770, 788, 800, 810, 820, 831, 841, 866], "mesh": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 343, 360, 372, 382, 394, 405, 406, 418, 430, 431, 440, 451, 452, 464, 483, 503, 521, 539, 555, 572, 588, 600, 601, 604, 621, 638, 651, 652, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "from_obj": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "get": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 748, 753, 754, 770, 788, 800, 810, 820, 831, 841, 850, 854, 855], "face": [21, 46, 50, 52, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 336, 349, 360, 382, 394, 398, 413, 418, 440, 457, 464, 475, 483, 503, 521, 525, 539, 555, 572, 588, 600, 601, 604, 608, 621, 626, 638, 651, 652, 655, 659, 667, 670, 686, 704, 709, 720, 770, 788, 800, 810, 820, 831, 841, 849, 850, 862], "obj": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 826, 831, 841], "v1": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "v2": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "vertex_attribut": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "vertex_sampl": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "1": [21, 46, 63, 79, 83, 94, 111, 115, 126, 144, 159, 163, 175, 179, 190, 194, 206, 210, 222, 227, 238, 253, 271, 336, 360, 382, 394, 418, 440, 450, 464, 473, 475, 483, 491, 501, 503, 507, 519, 521, 525, 537, 539, 553, 555, 560, 570, 572, 576, 586, 588, 592, 602, 604, 610, 621, 627, 636, 638, 644, 653, 655, 668, 670, 674, 684, 686, 691, 702, 704, 709, 718, 720, 727, 770, 788, 800, 810, 820, 831, 841, 856, 862, 866], "0": [21, 32, 46, 63, 79, 83, 94, 111, 115, 126, 144, 159, 163, 175, 179, 190, 194, 206, 210, 222, 227, 238, 253, 271, 275, 336, 342, 345, 360, 361, 371, 374, 382, 394, 398, 404, 407, 413, 418, 419, 429, 432, 440, 450, 453, 464, 473, 476, 483, 491, 498, 501, 503, 507, 516, 519, 521, 525, 536, 537, 539, 543, 553, 555, 560, 566, 570, 572, 576, 583, 586, 588, 592, 599, 600, 601, 602, 604, 610, 617, 621, 627, 633, 636, 638, 644, 651, 652, 653, 655, 668, 670, 674, 677, 682, 684, 686, 691, 693, 699, 702, 704, 709, 717, 718, 720, 731, 746, 770, 788, 800, 810, 820, 831, 841, 846, 849, 852, 856, 860, 862], "z": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 336, 350, 351, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 543, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 765, 766, 767, 768, 770, 788, 800, 810, 820, 831, 841, 856, 857, 860, 865], "v3": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "pretti": [22, 23, 47, 48, 64, 65, 80, 81, 95, 96, 112, 113, 127, 128, 145, 146, 160, 161, 176, 177, 191, 192, 207, 208, 223, 224, 239, 240, 254, 255, 272, 273, 362, 363, 383, 384, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843], "compact": [22, 23, 47, 48, 64, 65, 80, 81, 95, 96, 112, 113, 127, 128, 145, 146, 160, 161, 176, 177, 191, 192, 207, 208, 223, 224, 239, 240, 254, 255, 272, 273, 362, 363, 383, 384, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843], "minim": [22, 23, 47, 48, 64, 65, 80, 81, 95, 96, 112, 113, 127, 128, 145, 146, 160, 161, 176, 177, 191, 192, 207, 208, 223, 224, 239, 240, 254, 255, 272, 273, 362, 363, 383, 384, 388, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843], "nativ": [22, 23, 47, 48, 64, 65, 80, 81, 95, 96, 112, 113, 127, 128, 145, 146, 160, 161, 176, 177, 191, 192, 207, 208, 223, 224, 239, 240, 254, 255, 272, 273, 362, 363, 383, 384, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843], "save": [22, 23, 47, 48, 62, 64, 65, 78, 80, 81, 93, 95, 96, 110, 112, 113, 125, 127, 128, 143, 145, 146, 158, 160, 161, 174, 176, 177, 189, 191, 192, 204, 207, 208, 220, 223, 224, 237, 239, 240, 252, 254, 255, 270, 272, 273, 362, 363, 383, 384, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843, 850, 859], "newlin": [22, 23, 47, 48, 64, 65, 80, 81, 95, 96, 112, 113, 127, 128, 145, 146, 160, 161, 176, 177, 191, 192, 207, 208, 223, 224, 239, 240, 254, 255, 272, 273, 362, 363, 383, 384, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843], "indent": [22, 23, 47, 48, 64, 65, 80, 81, 95, 96, 112, 113, 127, 128, 145, 146, 160, 161, 176, 177, 191, 192, 207, 208, 223, 224, 239, 240, 254, 255, 272, 273, 362, 363, 383, 384, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843], "without": [22, 23, 47, 48, 64, 65, 80, 81, 83, 95, 96, 112, 113, 115, 127, 128, 145, 146, 160, 161, 176, 177, 179, 191, 192, 207, 208, 223, 224, 227, 239, 240, 254, 255, 272, 273, 362, 363, 383, 384, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843, 853, 856], "ani": [22, 23, 24, 47, 48, 49, 64, 65, 67, 80, 81, 82, 95, 96, 97, 112, 113, 114, 127, 128, 129, 145, 146, 147, 160, 161, 162, 176, 177, 178, 191, 192, 193, 207, 208, 209, 223, 224, 225, 239, 240, 241, 254, 255, 256, 272, 273, 274, 362, 363, 366, 383, 384, 387, 395, 396, 397, 420, 421, 424, 441, 442, 445, 465, 466, 469, 484, 485, 486, 504, 505, 506, 510, 522, 523, 524, 528, 540, 541, 542, 556, 557, 558, 573, 574, 575, 589, 590, 591, 605, 606, 607, 622, 623, 624, 630, 639, 640, 641, 656, 657, 658, 671, 672, 673, 678, 688, 689, 690, 695, 705, 706, 707, 712, 721, 722, 723, 771, 772, 779, 789, 790, 791, 801, 802, 804, 811, 812, 814, 821, 822, 824, 832, 833, 835, 842, 843, 845, 853, 862, 866], "whitespac": [22, 23, 47, 48, 64, 65, 80, 81, 95, 96, 112, 113, 127, 128, 145, 146, 160, 161, 176, 177, 191, 192, 207, 208, 223, 224, 239, 240, 254, 255, 272, 273, 362, 363, 383, 384, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843], "exclud": [22, 23, 26, 28, 29, 47, 48, 64, 65, 80, 81, 95, 96, 112, 113, 127, 128, 131, 145, 146, 160, 161, 176, 177, 191, 192, 207, 208, 223, 224, 239, 240, 254, 255, 272, 273, 362, 363, 383, 384, 395, 396, 420, 421, 441, 442, 465, 466, 484, 485, 504, 505, 522, 523, 540, 541, 556, 557, 573, 574, 589, 590, 605, 606, 622, 623, 639, 640, 656, 657, 671, 672, 688, 689, 705, 706, 721, 722, 771, 772, 789, 790, 801, 802, 811, 812, 821, 822, 832, 833, 842, 843], "valid": [24, 49, 67, 82, 97, 114, 129, 147, 162, 178, 193, 209, 225, 241, 256, 274, 366, 387, 397, 403, 424, 445, 469, 486, 506, 524, 542, 558, 575, 591, 607, 624, 641, 658, 673, 690, 707, 723, 779, 791, 804, 814, 824, 835, 845, 849, 850], "against": [24, 49, 67, 82, 97, 114, 129, 147, 162, 178, 193, 209, 225, 241, 256, 274, 366, 387, 397, 424, 445, 469, 486, 506, 524, 542, 558, 575, 591, 607, 624, 641, 658, 673, 690, 707, 723, 779, 791, 804, 814, 824, 835, 845], "raw": [24, 49, 67, 82, 97, 114, 129, 147, 162, 178, 193, 209, 225, 241, 256, 274, 366, 387, 397, 424, 445, 469, 486, 506, 524, 542, 558, 575, 591, 607, 624, 641, 658, 673, 690, 707, 723, 779, 791, 804, 814, 824, 835, 845, 856], "can": [24, 49, 67, 68, 82, 97, 114, 129, 147, 162, 163, 178, 193, 209, 225, 241, 256, 274, 282, 296, 308, 333, 366, 387, 388, 397, 424, 425, 445, 469, 470, 486, 506, 524, 536, 542, 551, 558, 575, 591, 607, 610, 617, 624, 641, 658, 673, 690, 707, 717, 723, 735, 779, 782, 791, 804, 814, 824, 826, 835, 845, 849, 850, 852, 854, 856, 862, 866], "__from_data__": [24, 49, 67, 82, 97, 114, 129, 147, 162, 178, 193, 209, 225, 241, 256, 274, 366, 387, 397, 424, 445, 469, 486, 506, 524, 542, 558, 575, 591, 607, 624, 641, 658, 673, 690, 707, 723, 779, 791, 804, 814, 824, 835, 845], "group": [25, 27, 446, 735, 736, 737, 738, 750, 753, 756, 855], "analyz": [25, 27, 28, 29, 30, 130], "cluster": [26, 28, 29, 30, 130, 131, 132, 226, 851], "pairwis": [26, 130, 131, 132, 226], "point": [26, 27, 35, 108, 130, 131, 132, 226, 336, 342, 345, 348, 351, 371, 374, 388, 398, 404, 429, 432, 450, 453, 474, 507, 525, 543, 551, 627, 709, 733, 765, 766, 851, 862, 865], "within": [26, 33, 130, 131, 132, 226, 292, 302, 826, 849, 856], "toler": [26, 30, 34, 130, 131, 132, 226, 733, 863], "One": [27, 51, 781, 826, 850], "result": [27, 33, 242, 348, 388, 476, 494, 510, 528, 546, 563, 579, 595, 613, 630, 647, 663, 678, 695, 712, 825, 849, 856, 857], "offer": 27, "access": 27, "set": [27, 29, 32, 131, 163, 205, 221, 275, 278, 291, 327, 329, 626, 757, 846, 849, 855, 856, 857, 862, 863], "uniqu": [27, 336, 398, 748], "locat": [27, 35, 336, 826, 856], "approxim": 27, "effect": 27, "first": [27, 33, 34, 83, 98, 133, 163, 194, 210, 227, 242, 276, 283, 348, 491, 499, 739, 757, 761, 849, 850, 860, 862, 866], "combin": [28, 194, 862], "find": [28, 30, 32, 130, 132, 226, 275, 475, 750, 846, 856, 862], "beamgroupanalyz": [28, 30, 130, 851], "prefer": 28, "from_model": 28, "prone": 28, "manual": 28, "instanti": [28, 35, 71, 115, 425], "pair": [28, 32, 33, 275, 846, 855], "handl": [28, 849, 850, 851], "previou": [28, 341], "subsequ": 28, "composit": 29, "analysi": [29, 30, 130, 131, 850, 851], "analyzers_cl": 30, "specifi": [30, 667, 748, 849, 850, 857], "provid": [31, 52, 148, 205, 221, 304, 667, 733, 735, 738, 742, 792, 848, 849, 850, 853, 854, 856, 863], "tool": [31, 163, 170, 507, 512, 525, 530, 536, 610, 617, 717, 851, 852, 854, 862, 864, 865], "detect": [31, 863], "intersect": [31, 32, 33, 34, 108, 276, 278, 282, 289, 291, 296, 308, 327, 329, 333, 494, 546, 563, 579, 595, 613, 647, 663, 667, 850], "rtree": [32, 846], "max_dist": [32, 33, 34, 276, 278, 282, 289, 291, 296, 308, 327, 329, 333, 334, 745, 746], "r": [32, 275], "tree": [32, 275, 735], "search": [32, 275, 861], "neighbor": [32, 275, 846], "addit": [32, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 410, 413, 737, 854, 855, 856, 860], "distanc": [32, 33, 34, 276, 278, 282, 289, 291, 296, 308, 327, 329, 333, 413, 507, 525, 599, 627, 709, 746, 857, 863], "apart": 32, "non": [32, 50], "touch": 32, "still": 32, "consid": [32, 33, 34, 276, 278, 282, 289, 291, 296, 308, 327, 329, 333, 341, 354, 356, 414, 746, 850, 862], "neightbor": [32, 846], "beam_a": [33, 98, 268, 738], "beam_b": [33, 98, 268], "sensit": 33, "consist": [33, 849, 850], "order": [33, 275, 283, 297, 329, 473, 825, 849, 850], "second": [33, 34, 83, 98, 133, 163, 194, 210, 227, 242, 276, 283, 348, 491, 499, 739, 757, 761, 850, 860], "otherwis": [33, 52, 278, 291, 304, 329, 403, 543, 853, 856], "thei": [33, 205, 221, 329, 388, 498, 850, 862, 866], "were": [33, 35, 470, 855], "input": [33, 275, 388, 726, 727, 731, 849, 854, 855, 856, 857, 859, 860, 862, 863], "maximum": [33, 34, 276, 278, 282, 289, 291, 296, 308, 327, 329, 333, 746], "unit": [33, 34, 275, 349, 446, 473, 849, 850], "beamsolverresult": 33, "wall_a": 34, "wall_b": 34, "tol": [34, 278, 291, 329, 334, 733, 849], "1e": [34, 278, 282, 291, 296, 308, 329, 333, 334], "06": [34, 334], "wall": [34, 309, 425, 733, 738, 746, 851, 857], "todo": [34, 297, 349, 367, 388, 398, 446, 472, 473, 551, 738, 753, 756, 769, 862], "through": [34, 35, 83, 115, 179, 227, 242, 349, 388, 543, 551, 617, 847, 862], "rework": 34, "potenti": 34, "mathemat": 34, "desigen": 34, "f": [34, 849], "tupl": [34, 35, 278, 283, 291, 329, 336, 349, 355, 398, 739], "jointtopologi": [34, 35, 276, 291, 327, 733, 850, 851], "interact": [35, 733, 739, 750, 754, 757, 763, 850, 866], "directli": [35, 115, 289, 356, 414, 425, 735, 736, 850, 857, 862], "liter": [35, 559, 609, 643, 708, 725], "one": [35, 50, 72, 83, 115, 133, 163, 179, 194, 210, 227, 242, 283, 340, 370, 401, 428, 449, 475, 667, 739, 742, 825, 826, 849, 856, 862, 864], "estim": 35, "name": [35, 297, 476, 487, 726, 729, 730, 731, 732, 737, 738, 753, 756, 849, 850, 855, 864], "correspond": [35, 163, 210, 336, 348, 476, 489, 849, 850, 855, 856, 862, 865], "dict": [35, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 276, 289, 327, 388, 410, 413, 473, 474, 592, 600, 601, 644, 651, 652, 733, 737], "map": [35, 854, 865], "start": [35, 163, 210, 336, 338, 341, 348, 349, 351, 354, 356, 414, 491, 507, 516, 525, 536, 543, 560, 576, 592, 610, 617, 626, 627, 633, 643, 644, 674, 691, 709, 717, 854, 856, 862], "depend": [35, 348, 350, 351, 852, 862], "btlxprocess": [35, 491, 502, 507, 516, 520, 525, 538, 543, 554, 560, 571, 576, 587, 592, 603, 610, 620, 627, 633, 637, 644, 654, 660, 669, 674, 685, 691, 703, 709, 719, 849, 850, 851], "must": [41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 309, 491, 507, 525, 560, 576, 592, 600, 601, 617, 627, 651, 652, 667, 674, 691, 709, 761, 849, 857, 860], "min_element_count": [41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263], "max_element_count": [41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263], "keyword": [41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 276, 289, 327, 410, 413, 737], "enumer": 50, "possibl": [50, 297, 855], "topo_unknown": [50, 51], "topo_i": [50, 51, 850], "parallel": [50, 355, 592, 599, 667, 826, 856, 862], "topo_l": [50, 51, 850], "topo_t": [50, 51, 850], "middl": [50, 336, 862], "topo_x": [50, 51, 850], "three": [50, 257, 862, 866], "more": [50, 194, 340, 370, 388, 401, 428, 449, 470, 850, 851, 854, 856, 862], "where": [50, 856, 859, 862, 865], "meet": [50, 850, 862], "topo_k": [50, 51], "least": [50, 849], "topo_edge_edg": [50, 51], "plate": [50, 309, 388, 425, 647, 651, 652, 659, 733, 851, 857, 863], "edg": [50, 309, 336, 398, 413, 507, 516, 525, 536, 559, 627, 633, 667, 709, 717, 739, 857, 862], "both": [50, 55, 86, 101, 136, 151, 166, 182, 197, 210, 213, 230, 245, 260, 739, 742, 849, 850, 860, 862], "align": [50, 68, 275, 336, 342, 371, 398, 404, 429, 450, 743, 854, 865], "topo_edge_fac": [50, 51], "valu": [51, 83, 115, 179, 221, 227, 275, 336, 398, 474, 501, 516, 519, 537, 553, 570, 586, 602, 633, 636, 653, 668, 684, 691, 702, 718, 781, 849, 855], "For": [51, 261, 275, 761, 781, 849, 850, 851, 865], "log": [51, 781], "int": [51, 130, 163, 194, 210, 336, 338, 341, 354, 355, 356, 357, 361, 398, 414, 419, 473, 476, 491, 498, 516, 525, 536, 560, 566, 576, 583, 592, 599, 600, 601, 617, 633, 651, 652, 674, 682, 691, 699, 709, 717, 727, 731, 732, 739, 781, 826], "buttjoint": [52, 148, 850], "l": [52, 68, 83, 98, 115, 210, 327, 335, 850, 864], "butt": [52, 148, 257, 261, 335, 850, 857], "main_beam": [52, 68, 83, 115, 133, 148, 163, 179, 194, 210, 227, 242, 257, 599, 850], "cross_beam": [52, 68, 83, 115, 133, 148, 163, 179, 194, 210, 227, 242, 257, 850], "mill_depth": [52, 133, 148, 257, 862], "depth": [52, 133, 148, 163, 194, 205, 210, 257, 507, 516, 525, 536, 543, 576, 592, 599, 610, 617, 627, 633, 644, 667, 674, 691, 709, 717, 862], "pocket": [52, 133, 148, 257, 507, 599, 609, 851, 862], "mill": [52, 133, 148, 257, 510, 528, 630, 678, 695, 712, 849, 862], "ignor": 52, "butt_plan": [52, 148], "small_beam_butt": [52, 66, 862], "smaller": [52, 66, 336, 856], "section": [52, 66, 336, 350, 351, 848, 854, 856, 857, 861, 862], "modify_cross": [52, 862], "extend": [52, 338, 349, 761, 850, 862], "opposit": [52, 356, 414, 559, 862], "cut": [52, 83, 115, 148, 163, 170, 179, 194, 227, 257, 476, 491, 494, 498, 499, 500, 507, 510, 512, 513, 514, 515, 516, 525, 528, 530, 531, 532, 533, 536, 546, 559, 560, 563, 565, 566, 569, 576, 579, 583, 584, 585, 592, 595, 599, 600, 601, 608, 609, 610, 613, 617, 618, 619, 625, 626, 627, 630, 632, 633, 642, 643, 644, 647, 651, 652, 659, 663, 667, 674, 678, 682, 683, 687, 691, 695, 699, 700, 701, 708, 709, 712, 714, 717, 724, 725, 849, 850, 854, 856, 862, 863], "plane": [52, 98, 108, 148, 349, 494, 498, 499, 500, 510, 516, 536, 546, 563, 566, 579, 583, 584, 585, 595, 599, 613, 617, 618, 619, 630, 633, 647, 663, 667, 678, 682, 683, 695, 699, 701, 714, 717, 849, 850, 856, 860, 862, 865], "closest": [52, 148, 857], "side": [52, 68, 83, 115, 148, 179, 227, 336, 341, 354, 355, 356, 361, 398, 414, 419, 475, 476, 491, 498, 507, 516, 525, 536, 543, 551, 560, 566, 576, 583, 592, 599, 600, 601, 610, 617, 627, 633, 644, 651, 652, 667, 674, 682, 691, 699, 709, 717, 849, 850, 857, 860, 862], "back_plan": 52, "back": [52, 341, 626, 849], "reject_i": [52, 862], "reject": 52, "necessari": [54, 70, 71, 85, 100, 135, 150, 165, 181, 196, 212, 259, 850, 852], "automat": [54, 55, 70, 85, 86, 100, 101, 135, 136, 150, 151, 163, 165, 166, 181, 182, 196, 197, 210, 212, 213, 230, 245, 259, 260, 507, 516, 525, 536, 627, 633, 709, 717, 725, 849, 862, 865], "could": [54, 70, 85, 100, 135, 150, 165, 181, 196, 212, 259, 471, 472, 516, 536, 633, 682, 699, 717, 780, 849], "after": [62, 71, 78, 93, 110, 125, 143, 158, 174, 189, 204, 220, 237, 252, 270, 354, 494, 510, 528, 546, 563, 579, 595, 613, 630, 647, 663, 678, 695, 712, 850, 861], "flip": [66, 68, 83, 115, 179, 227, 551, 862], "priorit": 66, "lapjoint": [68, 72, 83, 179, 227, 851], "frenchridgelap": [68, 849, 851], "lap": [68, 83, 115, 179, 227, 335, 560, 569, 849, 851], "ridg": [68, 560, 569], "dimens": [68, 72, 261, 336, 355, 473, 805, 850, 856], "flip_lap_sid": [68, 83, 115, 179, 227, 862], "drillhole_diam": [68, 560, 566, 862], "drill": [68, 560, 584, 849, 851], "hole": [68, 388, 560, 854, 860, 862], "made": [68, 163, 194, 210, 491, 507, 525, 551, 552, 560, 576, 592, 610, 627, 644, 674, 691, 709, 862], "process_joineri": 71, "process": [71, 163, 210, 282, 296, 297, 308, 333, 336, 398, 473, 476, 482, 494, 499, 501, 502, 510, 519, 520, 528, 537, 538, 543, 546, 551, 552, 553, 554, 563, 570, 571, 579, 584, 586, 587, 595, 602, 603, 613, 618, 620, 630, 636, 637, 647, 653, 654, 663, 668, 669, 678, 684, 685, 695, 702, 703, 712, 718, 719, 761, 850, 851, 854, 866], "It": [71, 278, 329, 367, 446, 691, 851, 852, 854, 855, 856, 862, 863, 865], "execut": [71, 780, 826], "via": [71, 850, 851], "add_extens": [71, 850], "compar": 72, "addition": [72, 849], "match": [72, 329, 475, 849, 850, 862], "cut_plane_bia": [83, 115, 179, 227, 862], "shift": [83, 115, 179, 227, 862], "deeper": [83, 115, 179, 227], "complet": [83, 115, 179, 227, 446, 850, 861], "either": [83, 115, 179, 227, 348, 491, 507, 525, 560, 576, 592, 627, 674, 691, 709, 726, 857], "5": [83, 115, 179, 227, 336, 361, 419, 476, 507, 525], "miter": [98, 108, 257, 335], "bisector": [98, 862], "angl": [98, 163, 170, 491, 507, 512, 516, 525, 530, 536, 543, 560, 576, 592, 610, 617, 627, 633, 644, 709, 717, 765, 766, 850, 860, 862], "centerlin": [98, 108, 133, 163, 194, 210, 242, 291, 309, 336, 348, 350, 351, 854, 855, 856, 865], "cutoff": [98, 862], "perpendicular": [98, 108, 355, 388, 617, 856], "abstract": [115, 367, 425], "common": [115, 850], "t": [115, 133, 148, 163, 179, 194, 210, 327, 335, 850, 864], "x": [115, 227, 242, 327, 335, 336, 341, 354, 356, 414, 491, 507, 525, 543, 560, 576, 592, 610, 617, 627, 644, 674, 691, 709, 767, 768, 850, 856, 864, 865], "do": [115, 510, 528, 630, 678, 695, 712, 853], "sub": 115, "n": [130, 131, 852], "desir": [130, 850, 865], "size": [130, 501, 519, 537, 553, 570, 586, 602, 636, 653, 668, 684, 702, 718, 856, 865], "found": 131, "4": [132, 163, 210, 336, 862], "birdsmouth": 133, "along": [133, 148, 163, 179, 194, 210, 227, 242, 336, 341, 354, 355, 356, 414, 507, 516, 536, 627, 633, 717, 850, 862], "tbirdsmouth": 133, "length": [148, 163, 179, 210, 227, 242, 309, 336, 350, 398, 473, 507, 516, 525, 536, 592, 599, 610, 617, 627, 633, 644, 667, 709, 717, 850, 862], "anoth": [148, 179, 850], "dovetail": [163, 170, 507, 512, 513, 514, 516, 525, 530, 531, 532, 536, 717], "notch": [163, 194, 242, 691, 862], "fit": [163, 194, 210, 853, 862], "start_i": [163, 210, 491, 507, 525, 536, 543, 576, 592, 610, 627, 644, 691, 699, 709, 717, 862], "posit": [163, 210, 336, 346, 375, 408, 433, 454, 473, 559, 560, 610, 617, 860, 862], "y": [163, 210, 257, 261, 336, 355, 491, 507, 516, 525, 536, 543, 576, 592, 610, 627, 633, 644, 691, 709, 717, 767, 768, 856, 862, 865], "axi": [163, 210, 275, 336, 341, 342, 350, 351, 354, 355, 356, 371, 398, 404, 414, 429, 450, 507, 516, 525, 543, 592, 617, 627, 633, 709, 743, 765, 766, 856, 860, 862, 865], "start_depth": [163, 210, 507, 516, 525, 536, 576, 627, 633, 644, 709, 717, 862], "surfac": [163, 210, 309, 361, 419, 475, 516, 536, 682, 699, 860], "rotat": [163, 210, 525, 536, 543, 709, 717, 767, 768, 777, 778, 856, 862], "around": [163, 210, 398, 413, 543, 856, 862], "width": [163, 210, 309, 336, 350, 351, 398, 473, 507, 516, 525, 536, 592, 627, 633, 644, 674, 677, 691, 693, 709, 717, 850, 855, 856, 857, 862], "cone_angl": [163, 507, 516, 525, 536, 862], "determin": [163, 283, 309, 413, 850, 862], "taper": [163, 194, 708, 862], "dovetail_shap": [163, 862], "shape": [163, 194, 210, 336, 388, 398, 406, 507, 516, 525, 536, 584, 618, 627, 633, 674, 691, 708, 709, 717, 725, 849, 862], "integ": [163, 210, 336, 398, 862], "index": [163, 210, 341, 354, 355, 356, 361, 414, 419, 475, 476, 498, 516, 536, 566, 583, 599, 600, 601, 617, 633, 651, 652, 682, 699, 717, 726, 732, 849, 850, 851, 862], "squar": [163, 210, 507, 525, 627, 709, 725, 862], "2": [163, 194, 210, 336, 501, 519, 537, 553, 570, 586, 602, 636, 653, 668, 684, 702, 718, 862, 866], "round": [163, 210, 507, 525, 627, 709, 725, 862], "3": [163, 210, 226, 336, 852, 862, 866], "radiu": [163, 210, 507, 516, 525, 536, 627, 633, 709, 717, 725, 862], "tool_angl": [163, 170, 512, 530, 862], "tool_diamet": [163, 170, 512, 530, 862], "tool_height": [163, 170, 512, 530, 862], "height": [163, 170, 194, 210, 309, 336, 350, 351, 398, 473, 512, 516, 525, 530, 536, 633, 674, 677, 691, 693, 709, 717, 850, 855, 856, 857, 862], "initi": [163, 359, 381, 417, 439, 462], "later": [163, 849, 855, 856], "flank_angl": [163, 507, 516, 525, 536], "flank": [163, 507, 516, 525, 536], "applic": [163, 210, 284, 849, 850, 862, 864], "shape_radiu": [163, 210, 507, 516, 525, 536, 627, 633, 709, 717, 862], "machin": [163, 210, 336, 398, 500, 513, 514, 515, 531, 532, 533, 565, 569, 585, 592, 600, 601, 608, 619, 625, 626, 632, 642, 644, 651, 652, 659, 683, 687, 700, 701, 714, 724, 849, 859], "cutter": [170, 512, 530], "step": [194, 205, 510, 528, 630, 674, 678, 691, 695, 708, 712, 782, 784, 825, 849, 851, 861], "step_shap": [194, 674, 691, 862], "heel": [194, 205, 674, 691, 708, 862], "doubl": [194, 257, 491, 498, 499, 501, 519, 537, 553, 570, 586, 602, 636, 653, 668, 674, 684, 691, 702, 708, 718, 862], "step_depth": [194, 205, 674, 682, 691, 699, 862], "heel_depth": [194, 205, 674, 682, 691, 699, 862], "tapered_heel": [194, 682, 691, 699, 708, 862], "tenon_mortise_height": [194, 862], "tenon": [194, 210, 525, 531, 532, 536, 633, 674, 677, 687, 725, 851], "mortis": [194, 210, 507, 513, 514, 516, 691, 693, 700, 851], "featru": [194, 862], "tenonmortis": 210, "main_beam_guid": [210, 850], "cross_beam_guid": [210, 850], "somewher": [227, 242, 850], "typic": [242, 826, 849], "whose": 242, "offset": [242, 342, 345, 371, 374, 404, 429, 432, 450, 453, 516, 536, 633, 717, 857], "rest": 242, "top": [242, 398, 413, 507, 525, 609, 626, 627, 709, 717, 854, 862], "No": [242, 609], "coplanar": [261, 850], "inflate_bi": [275, 450, 453, 846], "bound": [275, 336, 342, 345, 371, 374, 398, 404, 407, 429, 432, 450, 453, 743, 744, 846], "box": [275, 336, 342, 345, 371, 374, 398, 404, 407, 429, 432, 450, 453, 473, 700, 743, 744, 826, 846, 854, 856], "aabb": [275, 336, 342, 371, 398, 404, 429, 450], "enlarg": 275, "amount": [275, 338, 349, 846], "identifi": [275, 748, 850], "regard": [275, 516, 633], "inflat": [275, 342, 345, 371, 374, 404, 407, 429, 432, 450, 453, 846], "pluggabl": 275, "plugin": [275, 851], "avail": 275, "jointrul": [276, 282, 289, 296, 327, 333, 851, 863], "categori": [276, 278, 283, 855, 856, 866], "attach": 276, "rule": [276, 278, 279, 280, 281, 282, 289, 291, 293, 294, 295, 296, 304, 305, 306, 307, 308, 309, 327, 329, 330, 331, 332, 333, 341, 354, 356, 414, 851, 854, 856, 857, 863, 866], "assign": [276, 327, 733, 735, 742, 850, 862, 865], "joint_typ": [276, 289, 327], "category_a": 276, "category_b": [276, 283], "topo": [276, 850], "support": [276, 278, 398, 826, 847], "model_max_dist": [278, 291, 329], "09": [278, 282, 291, 296, 308, 329, 333], "exceed": [278, 329, 565, 566], "timberel": [278, 282, 283, 289, 291, 296, 304, 308, 329, 333, 336, 367, 398, 471, 600, 651, 652, 738, 851], "absolut": [278, 291, 329, 849, 850], "alreadi": [278, 291, 329, 735, 738, 849], "static": [279, 280, 281, 282, 293, 294, 295, 296, 305, 306, 307, 308, 330, 331, 332, 333], "use_default": [281, 295, 307, 332], "handled_pair": [282, 296, 308, 333], "definit": [282, 296, 308, 333, 849, 863], "jointdefinit": [282, 296, 308, 333, 851], "sort": 283, "accord": [283, 336, 398, 855], "catergory_a": 283, "debug": [284, 470, 850, 857, 863, 864], "inform": [284, 470, 851, 857, 863, 864, 865], "visual": [284, 470, 782, 826, 849], "inspect": [284, 864], "relat": [284, 446, 536, 717], "feature_error": 284, "occur": [284, 470, 761, 864], "joint_error": 284, "complianc": 291, "link": 297, "delai": [297, 299], "actual": [297, 299, 348], "downstream": [297, 299], "compon": [297, 299, 726, 727, 729, 730, 731, 732, 852, 855, 856, 857, 859, 860, 861, 863, 866], "need": [297, 388, 849, 850, 855, 866], "There": [297, 855, 862, 866], "wai": [297, 792], "altern": [297, 850], "transform": [297, 346, 375, 408, 433, 454, 765, 766, 767, 768, 774, 776, 777, 778], "shall": [299, 738, 853], "assembli": [309, 851, 857, 864], "geometri": [309, 336, 343, 344, 345, 346, 364, 365, 367, 371, 372, 373, 374, 375, 385, 386, 388, 398, 405, 406, 407, 408, 410, 413, 422, 423, 429, 430, 431, 432, 433, 443, 444, 450, 451, 452, 453, 454, 467, 468, 470, 472, 473, 494, 499, 510, 513, 514, 515, 528, 532, 533, 546, 548, 551, 552, 563, 565, 569, 579, 584, 585, 595, 608, 613, 618, 619, 630, 632, 642, 647, 659, 663, 678, 683, 687, 695, 699, 700, 701, 712, 714, 724, 743, 744, 765, 766, 768, 773, 777, 778, 826, 846, 850, 851, 854, 856, 857, 863, 864, 865, 866], "planar": [309, 361, 419, 457, 854, 857, 862], "beam_width": [309, 857], "aka": 309, "thick": [309, 388, 398, 410, 413, 456, 457, 667, 857], "caviti": 309, "normal": [309, 336, 355, 456, 475, 536, 617, 717], "frame_depth": [309, 857], "stud_spac": [309, 857], "space": [309, 491, 507, 525, 536, 560, 576, 592, 610, 617, 627, 644, 674, 691, 709, 717, 849, 857], "stud": [309, 336, 856, 857, 862], "z_axi": 309, "vector": [309, 350, 351, 388, 410, 413, 551, 765, 766, 777, 778, 851, 856, 857], "orient": [309, 345, 350, 351, 374, 407, 432, 453, 456, 491, 525, 560, 576, 592, 608, 643, 659, 667, 674, 691, 709, 744, 865], "post": 309, "insid": [309, 769], "frame": [309, 336, 341, 349, 354, 356, 367, 388, 398, 414, 473, 475, 498, 513, 515, 516, 528, 531, 533, 536, 565, 583, 584, 617, 618, 632, 633, 682, 699, 712, 714, 717, 738, 826, 851, 854, 856, 857, 866], "zaxi": 309, "categoryrul": [309, 851], "line": [309, 336, 350, 398, 403, 551, 552, 850, 851, 855, 856, 857, 860, 861], "panel_length": 309, "panel_height": 309, "jack_stud": [309, 857, 862], "surfaceassembli": 309, "beamdefinit": 309, "jack": [309, 576, 584, 857], "king_stud": [309, 857, 862], "king": [309, 857], "edge_stud": [309, 857, 862], "sill": [309, 857, 862], "header": [309, 857, 862], "element_on": 313, "element_two": 313, "beam_def": 320, "element_lists_to_intersect": 320, "polylin": [321, 388, 398, 403, 413, 456], "element_loop": 322, "k": 327, "topology_typ": 327, "constant": 327, "global": [327, 864], "revers": 329, "beama": 334, "beamb": 334, "x_default": 335, "t_default": 335, "l_default": 335, "slat": 336, "etc": [336, 398, 815, 849, 851, 856], "rectangular": [336, 856], "local": [336, 543, 849, 850, 856], "coordin": [336, 346, 375, 388, 398, 408, 433, 454, 473, 491, 507, 525, 536, 543, 560, 576, 592, 610, 617, 627, 644, 674, 691, 709, 717, 849, 850, 856], "system": [336, 398, 475, 543, 849, 850, 856], "major": [336, 856], "also": [336, 847, 851, 854, 855, 856, 862], "fibr": [336, 854], "direct": [336, 349, 350, 351, 413, 726, 767, 768, 846, 849, 850, 856, 857, 866], "solid": [336, 388, 863], "wood": 336, "larger": [336, 856, 862], "parametr": [336, 361, 419, 491, 507, 525, 536, 560, 576, 592, 610, 617, 627, 644, 674, 691, 709, 717, 851], "blank": [336, 338, 357, 398, 413, 473, 565, 761, 856], "materi": [336, 398, 735, 741, 742, 758, 856, 865], "stock": [336, 398, 856], "produc": [336, 398], "ref_fram": [336, 398], "btlx": [336, 398, 473, 475, 476, 487, 488, 490, 848, 850, 851], "standard": [336, 398, 850, 857], "ref_sid": [336, 398, 516, 536, 617, 633, 682, 699, 717], "6": [336, 398, 475, 600, 601, 651, 652], "ref_edg": 336, "long": [336, 349], "equal": [336, 667, 850], "centerline_start": 336, "centerline_end": 336, "xmin": [336, 398], "ymin": [336, 398], "zmin": [336, 398], "xmax": [336, 398], "ymax": [336, 398], "zmax": [336, 398], "long_edg": 336, "midpoint": 336, "onc": [336, 398, 856], "wide": [336, 398], "joint_kei": [338, 357], "remov": [338, 357, 358, 359, 380, 381, 416, 417, 438, 439, 461, 462, 762, 763, 764, 855, 860, 862], "well": [338, 738, 849], "lement": [339, 369, 400, 427, 448], "ref_side_index": [341, 354, 355, 356, 414, 476, 498, 516, 536, 566, 583, 599, 600, 601, 617, 633, 651, 652, 682, 699, 717, 849, 850], "right": [341, 354, 356, 414, 610, 617, 853, 862], "hand": [341, 354, 356, 414], "thumb": [341, 354, 356, 414], "rs5": [341, 354, 356, 414], "rs6": [341, 354, 356, 414, 476, 849], "rel": [341, 354, 356, 414, 610, 617], "collis": [343, 372, 405, 430, 451], "include_featur": [344, 406, 431, 452], "includ": [344, 406, 431, 452, 487, 849, 850, 853], "brep": [344, 398, 406, 410, 431, 452, 457, 494, 510, 514, 528, 532, 546, 563, 569, 579, 595, 600, 601, 613, 625, 630, 642, 647, 651, 652, 663, 678, 687, 695, 712, 724, 851, 865], "obb": [345, 374, 407, 432, 453], "world": [346, 375, 388, 408, 433, 454, 856, 857], "spatial": [346, 375, 408, 433, 454, 850], "hierarchi": [346, 375, 408, 433, 454, 733, 735, 866], "endpoint": [348, 351], "closer": 348, "interest": 348, "pln": 349, "metric": 349, "minimum": [349, 617, 849, 850], "z_vector": [350, 351], "indic": [350, 351, 470, 560, 855, 856], "worldz": [350, 351], "worldx": [350, 351], "point_start": 351, "point_end": 351, "end_point": 351, "next": 354, "front": [354, 626], "measur": 355, "across": [356, 414, 850], "state": [359, 381, 417, 439, 462], "debug_info": [359, 381, 417, 439, 462, 470, 850], "side_index": [361, 419], "request": [361, 419], "copi": [365, 386, 423, 444, 468, 766, 768, 775, 776, 778, 853], "compas_model": [365, 386, 423, 444, 468, 738, 750, 753, 756, 825], "screw": [367, 815], "dowel": [367, 862], "bracket": 367, "we": [367, 388, 852], "rethink": 367, "entir": [367, 617], "clear": [367, 727, 731, 850], "appropri": [367, 849], "put": [388, 473], "some": [388, 849, 850, 854, 865], "thought": 388, "what": [388, 849], "v": [388, 850], "perhap": [388, 472], "clearli": 388, "prehap": 388, "would": 388, "sens": 388, "move": 388, "stuff": 388, "over": 388, "here": [388, 761, 850, 852, 857, 858, 865], "ballnodejoint": [388, 851], "while": [388, 470, 501, 519, 537, 553, 570, 586, 602, 636, 653, 668, 684, 702, 718, 849, 850, 852, 862, 864], "attempt": [388, 864], "tightli": 388, "coupl": 388, "differec": 388, "outlin": [388, 398, 403, 413], "seem": 388, "just": 388, "outline_point": 388, "structur": [388, 774, 775, 776, 847, 850, 851, 854, 857, 863, 866], "assum": 388, "goe": [388, 610, 617], "extra": 388, "geometr": [388, 849, 851, 860, 863], "These": [388, 410, 849, 850, 855, 862], "boolean": [388, 854, 857, 860, 863], "btlxfromgeometrydefinit": 388, "plywood": 398, "clt": 398, "bottom": [398, 413, 507, 525, 536, 626, 627, 709, 717, 862], "outline_a": [398, 403], "nurbscurv": 398, "princip": [398, 403, 566], "outline_b": [398, 403], "blank_extens": [398, 413], "blank_length": 398, "area": 398, "extrud": 410, "slab": [410, 446], "open": [413, 456, 847, 851, 861], "is_beam": 425, "is_plat": 425, "is_wal": 425, "is_group_el": 425, "singl": [446, 457, 826], "serv": [446, 865], "form": [446, 850], "often": 446, "prefabr": 446, "envelop": 446, "bodi": 446, "docstr": [446, 849], "_": [452, 855], "sure": 456, "correctli": [456, 608, 659, 849, 850, 855], "except": [470, 471, 472, 739, 761, 849, 850], "try": [470, 849, 850], "suppos": 470, "debug_geometri": 470, "about": [470, 851], "cannot": [471, 472, 850, 856, 862], "messag": [471, 472, 849, 850], "renam": [472, 731, 732], "processingvisualizationerror": 472, "someth": 472, "feature_geometri": [472, 849], "element_geometri": [472, 849], "modifi": [472, 773, 849, 850, 852, 853], "act": 473, "wrapper": 473, "realli": 473, "parent": [473, 735, 736, 737, 738], "order_num": 473, "scale_factor": 473, "scale": [473, 765, 766, 777, 778, 849, 865], "factor": [473, 482, 501, 502, 519, 520, 537, 538, 553, 554, 570, 571, 586, 587, 602, 603, 620, 636, 637, 653, 654, 668, 669, 684, 685, 702, 703, 718, 719, 767, 768, 849], "anyth": 473, "mm": [473, 543, 849], "attr": [473, 737], "corner": [473, 862], "et": 474, "element_fac": 475, "essenti": [475, 850], "translat": [475, 765, 766, 767, 768], "zero": [476, 857], "rs1": [476, 498, 516, 536, 566, 583, 599, 633, 682, 699, 717, 849], "prioriti": [476, 826, 862], "process_id": 476, "id": [476, 826], "processing_nam": [476, 849], "is_joineri": 476, "joineri": [476, 761], "subprocess": [478, 493, 509, 527, 545, 562, 578, 594, 612, 629, 646, 662, 676, 694, 711], "nest": [478, 493, 509, 527, 545, 562, 578, 594, 612, 629, 646, 662, 676, 694, 711], "write": [487, 488, 794, 855, 856], "company_nam": 487, "compani": 487, "gramazio": [487, 847, 851, 853], "kohler": [487, 847, 851, 853], "research": [487, 847, 851, 853], "file_nam": 487, "comment": 487, "xml": [488, 489, 490, 849, 859], "type_": 489, "regist": [489, 850], "callabl": [489, 753], "file_path": 490, "model_to_xml": 490, "orientationtyp": [491, 525, 560, 576, 592, 674, 691, 709, 851], "start_x": [491, 507, 525, 543, 560, 576, 592, 610, 617, 627, 644, 674, 691, 709], "100000": [491, 507, 525, 560, 576, 592, 610, 627, 644, 674, 691, 709], "50000": [491, 576, 592, 610, 644, 674, 691], "angle_1": 491, "horizont": [491, 560, 576, 592, 644, 667], "179": [491, 507, 525, 560, 576, 592, 610, 627, 644, 674, 691, 709, 860], "9": [491, 507, 525, 560, 576, 592, 610, 627, 644, 674, 691, 709, 860], "inclination_1": 491, "vertic": [491, 576, 592, 610, 644, 667, 856, 862], "angle_2": 491, "inclination_2": 491, "plane_a": [499, 850, 860], "plane_b": [499, 860], "mean": [501, 519, 537, 553, 570, 586, 602, 636, 653, 668, 684, 702, 718, 849], "5000": [507, 525, 627, 709, 738], "margin": [507, 525, 627, 709], "180": [507, 627], "slope": [507, 592, 627, 644], "reder": [507, 525, 627, 709], "inclin": [507, 525, 543, 576, 592, 610, 627, 644, 674, 691, 709], "limitation_top": 507, "limit": [507, 525, 543, 592, 600, 601, 609, 610, 626, 627, 644, 651, 652, 691, 709, 717, 853], "unlimit": [507, 609], "length_limited_bottom": [507, 525, 627, 709, 717], "whether": [507, 525, 610, 627, 691, 709, 717, 826, 850, 853], "1000": [507, 525, 627, 674, 677, 691, 693, 709], "cone": [507, 516, 525, 536], "30": [507, 525], "use_flank_angl": [507, 525], "35": [507, 525], "volum": [510, 514, 528, 532, 569, 600, 601, 608, 625, 630, 642, 651, 652, 659, 678, 687, 695, 700, 712, 724, 733, 849, 850], "itersect": [510, 528, 630, 678, 695, 712], "fail": [510, 528, 630, 678, 695, 712, 849], "80": [516, 536, 633, 717], "40": [516, 536, 633, 717], "28": [516, 536, 633, 717], "10": [516, 536, 847, 852], "15": [516, 536], "20": [516, 536, 543, 633, 682, 699, 717], "case": [516, 633, 857, 863], "hous": [516, 633], "equival": [516, 633, 849], "dovetailtenon": [516, 717, 851], "length_limited_top": [525, 627, 709, 717], "50": [536, 543, 717], "define_dovetail_tool": [536, 717], "degre": [543, 610, 617], "depth_limit": [543, 610], "go": 543, "cylind": [548, 826], "chang": [551, 862], "too": 551, "fragil": 551, "caus": 551, "issu": [551, 861], "alt": 551, "straight": [551, 850, 856], "enum": [559, 609, 643, 708, 725, 780], "refedg": [559, 560], "oppedg": [559, 560], "french": [560, 569], "ref_posit": 560, "edgepositiontyp": [560, 851], "drillhol": [560, 566], "flag": 560, "other_beam": 566, "furthest": [566, 857], "rafter": [576, 584, 856], "89": 592, "lead_angle_parallel": 592, "lead": 592, "lead_angl": 592, "lead_inclination_parallel": 592, "lead_inclin": 592, "machining_limit": [592, 600, 601, 644, 651, 652], "polyhedron": [600, 601, 608, 651, 652, 659], "subtract": [608, 659, 860, 863], "ensur": [608, 659, 849, 850], "like": [609, 851, 854, 863], "longitudin": [610, 618], "90": [610, 617], "start_limit": 610, "end_limit": 610, "certain": 610, "angle_start": [610, 617], "angle_end": [610, 617], "tool_posit": [610, 617], "alignmenttyp": [610, 617], "left": [610, 617], "center": [610, 617, 733, 847, 862], "so": [617, 849, 850, 853], "chamfer": [617, 709, 717], "chanfer": 617, "logitudin": 618, "neg": 625, "configur": [626, 733], "expected_kei": 626, "dictionari": [626, 849, 850], "face_limited_start": 626, "face_limited_end": 626, "face_limited_front": 626, "face_limited_back": 626, "face_limited_top": 626, "face_limited_bottom": 626, "awai": 643, "internal_angl": 644, "intern": [644, 849], "tilt_ref_sid": 644, "tilt": [644, 862], "tilt_end_sid": 644, "tilt_opp_sid": 644, "oppos": 644, "tilt_start_sid": 644, "full": 667, "accross": 667, "exactli": 667, "small": 667, "strut_inclin": [674, 691], "strut": [674, 691], "taperedheel": [674, 708], "presenc": [674, 691], "ye": [674, 691, 852], "tenon_width": [674, 677], "tenon_height": [674, 677], "stepjointnotch": [677, 851], "notch_limit": [691, 699], "notch_width": [691, 699], "strut_height": [691, 699], "stepshapetyp": [691, 851], "mortise_width": [691, 693], "mortise_height": [691, 693], "plana": 699, "io": 726, "ghenv": [726, 727, 731, 732], "environ": [726, 727, 731, 732, 851, 852, 856], "permanent_param_count": [727, 731], "delet": [727, 731], "param": [729, 730, 849], "input_nam": [731, 732], "rename_count": 731, "keep_connect": 731, "express": [733, 853], "center_of_mass": 733, "mass": 733, "detected_topo": 733, "beam_a_kei": 733, "beam_b_kei": 733, "total": 733, "groupnod": [735, 736, 737, 738], "under": [735, 736], "root": [735, 736], "elementnod": [735, 736], "upstream": [738, 753, 756], "mayb": 738, "wall1_group": 738, "200": 738, "3000": 738, "wall1": 738, "worldxi": 738, "100": 738, "300": 738, "add_el": 738, "has_group": 738, "b": [739, 757, 763], "graph": 739, "neither": 742, "retriev": [748, 850, 855], "yield": [749, 759, 760], "interaction_typ": 750, "group_nam": [753, 756], "filter_": 753, "queri": [753, 754, 756], "filter": [753, 855], "stop_on_first_error": 761, "feasibl": [761, 850], "instruct": [761, 780, 782, 805, 815, 826, 836, 849, 851, 861], "sequenc": [761, 825, 851], "reason": 761, "iter": 761, "encount": [761, 861], "radian": [765, 766], "connectionsolv": [769, 851], "human": [781, 826], "robot": [781, 826], "build": [782, 792, 793, 794, 825, 826, 852, 866], "collect": [782, 846, 863], "pars": 792, "implemet": 792, "your": [792, 847, 849, 850, 852], "own": [792, 862], "you": [792, 847, 849, 850, 852, 854, 857, 861, 862, 866], "want": [792, 849], "buildingplan": [793, 794, 825, 851], "building_plan": 794, "tranform": [803, 813, 823, 844], "3d": [805, 815, 851], "linear": [805, 856], "incorpor": 815, "simpl": [825, 851, 854], "per": 825, "assembl": 826, "actor": [826, 851], "element_id": 826, "cad": 826, "elements_held": 826, "held": 826, "is_built": 826, "is_plan": 826, "increment": 826, "text": [836, 859], "overlai": 836, "prior": 846, "project": [847, 851], "develop": [847, 851], "aleksandra": 847, "apolinarska": 847, "chen": 847, "kasir": 847, "gonzalo": 847, "casa": 847, "eth": [847, 851, 853], "zurich": [847, 851, 853], "swiss": 847, "nation": 847, "scienc": 847, "foundat": 847, "compet": 847, "digit": 847, "nccr": 847, "dfab": 847, "programm": 847, "As": 847, "mani": [847, 851, 852], "contributor": 847, "work": [847, 849, 850, 857], "acknowledg": 847, "misc": 847, "titl": 847, "librari": [847, 851, 854, 861], "author": [847, 853], "anna": 847, "http": [847, 849, 852], "github": [847, 852], "com": [847, 849, 852], "gramaziokohl": 847, "year": 847, "2022": 847, "2023": 847, "doi": 847, "5281": 847, "zenodo": 847, "7934267": 847, "url": 847, "welcom": 848, "comprehens": 848, "guidanc": 848, "contribut": [848, 851, 852], "framework": [848, 849, 851], "oper": [849, 850, 860, 863], "integr": [849, 850], "offici": [849, 861], "design2machin": 849, "btlx_2_3_0": 849, "pdf": 849, "studi": [849, 850], "understand": 849, "constraint": 849, "rang": [849, 862], "src": [849, 850], "__init__": [849, 850], "meaning": [849, 850], "__data__": [849, 850], "properti": [849, 850], "btlxprocessingparam": 849, "as_dict": 849, "ordereddict": 849, "btlxwriter": [849, 851], "newprocess": [849, 850], "hypotheticalprocess": 849, "def": [849, 850], "super": [849, 850], "arg_a": [849, 850], "arg_b": [849, 850], "newprocessingparam": 849, "arga": 849, "prec": 849, "_instanc": 849, "precis": 849, "argb": 849, "jackraftercut": [849, 851, 860], "doublecut": [849, 851, 860, 862], "At": [849, 851], "target": [849, 850], "extract": [849, 856, 864], "relationship": 849, "from_shapes_and_el": 849, "from_anygeometry_and_el": 849, "additional_arg_1": 849, "additional_arg_2": 849, "calculate_arg_a": 849, "calculate_arg_b": 849, "arg_c": 849, "arg_d": 849, "abov": [849, 853, 862], "convent": [849, 856], "descript": 849, "from_plane_and_beam": [849, 850], "from_volume_and_beam": [849, 850], "from_line_and_el": 849, "from_planes_and_beam": 849, "from_beam_beam_and_plan": 849, "invers": 849, "manag": [849, 852, 861], "geometry_from_params_and_el": 849, "feature_geometry_generated_from_param": 849, "modified_element_geometri": 849, "purpos": [849, 853], "plane_from_params_and_beam": 849, "volume_from_params_and_beam": 849, "cylinder_from_params_and_el": 849, "planes_from_params_and_beam": 849, "lap_volume_from_params_and_beam": 849, "py": [849, 850], "cover": [849, 850], "modif": [849, 850], "referencesid": 849, "bidirect": 849, "document": [849, 853, 855, 856, 861, 865], "particip": 850, "achiev": 850, "establish": 850, "how": [850, 854, 861, 862, 866], "involv": 850, "re": 850, "notat": 850, "relev": 850, "distinct": 850, "treat": 850, "differenti": 850, "accordingli": 850, "supported_topologi": 850, "restore_beams_from_kei": 850, "deseri": 850, "share": 850, "logic": 850, "lbuttjoint": [850, 851], "behavior": 850, "tnewjoint": 850, "default_value_a": 850, "default_value_b": 850, "hold": 850, "element_by_guid": 850, "persist": 850, "lmiterjoint": [850, 851], "xlapjoint": [850, 851], "tbirdsmouthjoint": [850, 851], "tstepjoint": [850, 851], "lfrenchridgelapjoint": [850, 851], "dimension": 850, "select": [850, 857, 862, 864], "deriv": 850, "entiti": [850, 851], "consult": [850, 861], "usag": 850, "main_ref_side_index": 850, "cross_ref_side_index": 850, "main_beam_feature_geometri": 850, "feature_geometry_for_main_beam": 850, "cross_beam_feature_geometri": 850, "feature_geometry_for_cross_beam": 850, "add_featur": 850, "accommod": 850, "check_elements_compat": 850, "assert": 850, "main_beam_cutting_plan": 850, "start_a": 850, "end_a": 850, "extension_to_plan": 850, "ex": 850, "add_blank_extens": 850, "main_featur": 850, "cross_featur": 850, "itself": 850, "are_compat": 850, "append": 850, "pattern": 850, "declar": 850, "duplic": 850, "leverag": 850, "maintain": [850, 851], "signatur": 850, "alwai": 850, "failur": 850, "aid": 850, "rebuild": 850, "packag": [851, 852, 861], "written": 851, "python": [851, 852, 854], "ecosystem": 851, "rhinocero": 851, "plug": 851, "activ": [851, 852, 856, 863, 865], "being": 851, "continu": 851, "stage": 851, "encompass": 851, "fast": 851, "intuit": 851, "custom": 851, "semant": 851, "futur": 851, "expand": 851, "entail": [851, 855], "softwar": [851, 853], "specialist": 851, "built": [851, 854], "upon": 851, "basic": 851, "complex": 851, "resolv": 851, "backend": 851, "run": 851, "rhinocommon": 851, "sdk": 851, "opencascad": 851, "occ": 851, "introduct": 851, "instal": [851, 854], "api": [851, 854], "llapjoint": 851, "tdovetailjoint": 851, "tlapjoint": 851, "tenonmortisejoint": 851, "xnotchjoint": 851, "ybuttjoint": 851, "nbeamkdtreeanalyz": 851, "tripletanalyz": 851, "quadanalyz": 851, "compositeanalyz": 851, "find_neighboring_el": 851, "btlxpart": 851, "dovetailmortis": 851, "longitudinalcut": 851, "slot": 851, "stepjoint": 851, "limitationtoptyp": 851, "machininglimit": 851, "tenonshapetyp": 851, "debuginfom": 851, "directrul": 851, "featuredefinit": 851, "surfacemodel": 851, "topologyrul": 851, "guess_joint_topology_2beam": 851, "set_default_joint": 851, "buildingplanpars": 851, "lineardimens": 851, "model3d": 851, "simplesequencegener": 851, "text3d": 851, "clear_gh_param": 851, "add_gh_param": 851, "manage_dynamic_param": 851, "list_input_valid": 851, "item_input_valid": 851, "get_leaf_subclass": 851, "rename_gh_input": 851, "workflow": [851, 854, 855, 856], "show": [851, 854], "util": [851, 854], "licens": 851, "cite": 851, "recommend": 852, "mamba": 852, "myenvnam": 852, "c": [852, 853], "conda": 852, "forg": 852, "7": 852, "m": 852, "compas_rhino": 852, "v7": 852, "wish": 852, "fork": 852, "repositori": 852, "clone": 852, "git": 852, "yourgithub_usernam": 852, "cd": 852, "edit": 852, "mode": 852, "pip": 852, "dev": 852, "compil": 852, "rhino7": [852, 861], "invok": 852, "ghuser": 852, "rhino8": [852, 861], "mit": 853, "copyright": 853, "2025": 853, "permiss": 853, "herebi": 853, "grant": 853, "free": 853, "charg": 853, "person": 853, "obtain": 853, "deal": 853, "restrict": 853, "merg": 853, "publish": 853, "distribut": 853, "sublicens": 853, "sell": 853, "permit": 853, "whom": 853, "furnish": 853, "subject": 853, "condit": 853, "notic": 853, "substanti": 853, "portion": 853, "THE": 853, "AS": 853, "warranti": 853, "OF": 853, "kind": [853, 862], "OR": 853, "impli": [853, 863], "BUT": 853, "NOT": 853, "TO": 853, "merchant": 853, "FOR": 853, "particular": 853, "AND": 853, "noninfring": 853, "IN": 853, "NO": 853, "event": 853, "holder": 853, "BE": 853, "liabl": 853, "claim": 853, "damag": 853, "liabil": 853, "action": 853, "contract": 853, "tort": 853, "aris": 853, "out": 853, "WITH": 853, "easi": 854, "autom": 854, "bake": 854, "textur": [854, 865], "render": [854, 865], "style": 854, "might": [854, 862], "componen": 854, "overal": 854, "idea": 854, "Then": 854, "explain": [854, 861], "concept": 854, "intend": [855, 856], "hybrid": 855, "encod": 855, "concaten": 855, "colon": 855, "entri": 855, "underscor": 855, "attr1nam": 855, "attr1value_attr2nam": 855, "attr2valu": 855, "four": [855, 862], "zvector": [855, 856], "setstandardattribut": 855, "getstandardattribut": 855, "user": [855, 857, 861], "criteria": 855, "setcustomattribut": 855, "getcustomattribut": 855, "checkstandardattribut": 855, "miss": 855, "deleteattribut": 855, "joist": 856, "linecurv": 856, "referenc": [856, 857], "latter": 856, "drawn": 856, "li": [856, 865], "sai": 856, "updaterefobj": 856, "centrelin": 856, "curv": 856, "help": [857, 861], "bit": 857, "vocabulari": 857, "stud_direct": 857, "creategeometri": [857, 863], "debuginfo": [857, 863], "sheeting_outsid": 857, "sheet": 857, "sheeting_insid": 857, "lintel_post": 857, "onto": 857, "edge_stud_offset": 857, "flush": [857, 862], "custom_dimens": 857, "joint_overrid": 857, "dynam": [857, 862], "demo": 858, "content": 859, "ly": 860, "01": [860, 862], "cylindr": 860, "command": 861, "packagemanag": 861, "press": 861, "enter": 861, "window": 861, "click": [861, 862], "restart": 861, "success": 861, "toolbar": 861, "look": 861, "tab": 861, "retart": 861, "seek": 861, "forum": 861, "lower": 862, "hereaft": 862, "lowest": 862, "highest": 862, "level": 862, "canva": 862, "now": 862, "drop": 862, "down": 862, "becaus": 862, "everi": 862, "halflap": 862, "overwrit": [862, 866], "variabl": 862, "highli": 862, "By": [862, 866], "shorten": 862, "clean": 862, "half": 862, "upper": 862, "overlap": 862, "99": 862, "unlik": 862, "present": 862, "centr": 862, "keep": 862, "secur": 862, "prevent": 862, "sequenti": 862, "inner": 862, "third": 862, "outer": 862, "remain": 862, "unchang": 862, "crate": 862, "doblecut": 862, "summaris": 862, "compos": 863, "computation": 863, "expens": 863, "disabl": 863, "maxdist": 863, "max": 863, "visualis": 863, "preview": 864, "recogn": 864, "bakewithboxmap": 865, "layer": 865, "random": 865, "deviat": 865, "mapsiz": 865, "adjust": 865, "imag": 865, "ratio": 865, "bitmap": 865, "care": 866, "final": 866}, "objects": {"compas_timber.connections": [[10, 0, 1, "", "BallNodeJoint"], [25, 0, 1, "", "BeamGroupAnalyzer"], [27, 0, 1, "", "Cluster"], [28, 0, 1, "", "CompositeAnalyzer"], [31, 0, 1, "", "ConnectionSolver"], [35, 0, 1, "", "Joint"], [50, 0, 1, "", "JointTopology"], [52, 0, 1, "", "LButtJoint"], [68, 0, 1, "", "LFrenchRidgeLapJoint"], [83, 0, 1, "", "LLapJoint"], [98, 0, 1, "", "LMiterJoint"], [115, 0, 1, "", "LapJoint"], [130, 0, 1, "", "NBeamKDTreeAnalyzer"], [132, 2, 1, "", "QuadAnalyzer"], [133, 0, 1, "", "TBirdsmouthJoint"], [148, 0, 1, "", "TButtJoint"], [163, 0, 1, "", "TDovetailJoint"], [179, 0, 1, "", "TLapJoint"], [194, 0, 1, "", "TStepJoint"], [210, 0, 1, "", "TenonMortiseJoint"], [226, 2, 1, "", "TripletAnalyzer"], [227, 0, 1, "", "XLapJoint"], [242, 0, 1, "", "XNotchJoint"], [257, 0, 1, "", "YButtJoint"], [275, 2, 1, "", "find_neighboring_elements"]], "compas_timber.connections.BallNodeJoint": [[11, 1, 1, "", "ToString"], [12, 1, 1, "", "add_extensions"], [13, 1, 1, "", "add_features"], [14, 1, 1, "", "check_elements_compatibility"], [15, 1, 1, "", "copy"], [16, 1, 1, "", "create"], [17, 1, 1, "", "element_count_complies"], [18, 1, 1, "", "from_json"], [19, 1, 1, "", "from_jsonstring"], [20, 1, 1, "", "restore_beams_from_keys"], [21, 1, 1, "", "sha256"], [22, 1, 1, "", "to_json"], [23, 1, 1, "", "to_jsonstring"], [24, 1, 1, "", "validate_data"]], "compas_timber.connections.BeamGroupAnalyzer": [[26, 1, 1, "", "find"]], "compas_timber.connections.CompositeAnalyzer": [[29, 1, 1, "", "find"], [30, 1, 1, "", "from_model"]], "compas_timber.connections.ConnectionSolver": [[32, 1, 1, "", "find_intersecting_pairs"], [33, 1, 1, "", "find_topology"], [34, 1, 1, "", "find_wall_wall_topology"]], "compas_timber.connections.Joint": [[36, 1, 1, "", "ToString"], [37, 1, 1, "", "add_extensions"], [38, 1, 1, "", "add_features"], [39, 1, 1, "", "check_elements_compatibility"], [40, 1, 1, "", "copy"], [41, 1, 1, "", "create"], [42, 1, 1, "", "element_count_complies"], [43, 1, 1, "", "from_json"], [44, 1, 1, "", "from_jsonstring"], [45, 1, 1, "", "restore_beams_from_keys"], [46, 1, 1, "", "sha256"], [47, 1, 1, "", "to_json"], [48, 1, 1, "", "to_jsonstring"], [49, 1, 1, "", "validate_data"]], "compas_timber.connections.JointTopology": [[51, 1, 1, "", "get_name"]], "compas_timber.connections.LButtJoint": [[53, 1, 1, "", "ToString"], [54, 1, 1, "", "add_extensions"], [55, 1, 1, "", "add_features"], [56, 1, 1, "", "check_elements_compatibility"], [57, 1, 1, "", "copy"], [58, 1, 1, "", "create"], [59, 1, 1, "", "element_count_complies"], [60, 1, 1, "", "from_json"], [61, 1, 1, "", "from_jsonstring"], [62, 1, 1, "", "restore_beams_from_keys"], [63, 1, 1, "", "sha256"], [64, 1, 1, "", "to_json"], [65, 1, 1, "", "to_jsonstring"], [66, 1, 1, "", "update_beam_roles"], [67, 1, 1, "", "validate_data"]], "compas_timber.connections.LFrenchRidgeLapJoint": [[69, 1, 1, "", "ToString"], [70, 1, 1, "", "add_extensions"], [71, 1, 1, "", "add_features"], [72, 1, 1, "", "check_elements_compatibility"], [73, 1, 1, "", "copy"], [74, 1, 1, "", "create"], [75, 1, 1, "", "element_count_complies"], [76, 1, 1, "", "from_json"], [77, 1, 1, "", "from_jsonstring"], [78, 1, 1, "", "restore_beams_from_keys"], [79, 1, 1, "", "sha256"], [80, 1, 1, "", "to_json"], [81, 1, 1, "", "to_jsonstring"], [82, 1, 1, "", "validate_data"]], "compas_timber.connections.LLapJoint": [[84, 1, 1, "", "ToString"], [85, 1, 1, "", "add_extensions"], [86, 1, 1, "", "add_features"], [87, 1, 1, "", "check_elements_compatibility"], [88, 1, 1, "", "copy"], [89, 1, 1, "", "create"], [90, 1, 1, "", "element_count_complies"], [91, 1, 1, "", "from_json"], [92, 1, 1, "", "from_jsonstring"], [93, 1, 1, "", "restore_beams_from_keys"], [94, 1, 1, "", "sha256"], [95, 1, 1, "", "to_json"], [96, 1, 1, "", "to_jsonstring"], [97, 1, 1, "", "validate_data"]], "compas_timber.connections.LMiterJoint": [[99, 1, 1, "", "ToString"], [100, 1, 1, "", "add_extensions"], [101, 1, 1, "", "add_features"], [102, 1, 1, "", "check_elements_compatibility"], [103, 1, 1, "", "copy"], [104, 1, 1, "", "create"], [105, 1, 1, "", "element_count_complies"], [106, 1, 1, "", "from_json"], [107, 1, 1, "", "from_jsonstring"], [108, 1, 1, "", "get_cutoff_plane"], [109, 1, 1, "", "get_cutting_planes"], [110, 1, 1, "", "restore_beams_from_keys"], [111, 1, 1, "", "sha256"], [112, 1, 1, "", "to_json"], [113, 1, 1, "", "to_jsonstring"], [114, 1, 1, "", "validate_data"]], "compas_timber.connections.LapJoint": [[116, 1, 1, "", "ToString"], [117, 1, 1, "", "add_extensions"], [118, 1, 1, "", "add_features"], [119, 1, 1, "", "check_elements_compatibility"], [120, 1, 1, "", "copy"], [121, 1, 1, "", "create"], [122, 1, 1, "", "element_count_complies"], [123, 1, 1, "", "from_json"], [124, 1, 1, "", "from_jsonstring"], [125, 1, 1, "", "restore_beams_from_keys"], [126, 1, 1, "", "sha256"], [127, 1, 1, "", "to_json"], [128, 1, 1, "", "to_jsonstring"], [129, 1, 1, "", "validate_data"]], "compas_timber.connections.NBeamKDTreeAnalyzer": [[131, 1, 1, "", "find"]], "compas_timber.connections.TBirdsmouthJoint": [[134, 1, 1, "", "ToString"], [135, 1, 1, "", "add_extensions"], [136, 1, 1, "", "add_features"], [137, 1, 1, "", "check_elements_compatibility"], [138, 1, 1, "", "copy"], [139, 1, 1, "", "create"], [140, 1, 1, "", "element_count_complies"], [141, 1, 1, "", "from_json"], [142, 1, 1, "", "from_jsonstring"], [143, 1, 1, "", "restore_beams_from_keys"], [144, 1, 1, "", "sha256"], [145, 1, 1, "", "to_json"], [146, 1, 1, "", "to_jsonstring"], [147, 1, 1, "", "validate_data"]], "compas_timber.connections.TButtJoint": [[149, 1, 1, "", "ToString"], [150, 1, 1, "", "add_extensions"], [151, 1, 1, "", "add_features"], [152, 1, 1, "", "check_elements_compatibility"], [153, 1, 1, "", "copy"], [154, 1, 1, "", "create"], [155, 1, 1, "", "element_count_complies"], [156, 1, 1, "", "from_json"], [157, 1, 1, "", "from_jsonstring"], [158, 1, 1, "", "restore_beams_from_keys"], [159, 1, 1, "", "sha256"], [160, 1, 1, "", "to_json"], [161, 1, 1, "", "to_jsonstring"], [162, 1, 1, "", "validate_data"]], "compas_timber.connections.TDovetailJoint": [[164, 1, 1, "", "ToString"], [165, 1, 1, "", "add_extensions"], [166, 1, 1, "", "add_features"], [167, 1, 1, "", "check_elements_compatibility"], [168, 1, 1, "", "copy"], [169, 1, 1, "", "create"], [170, 1, 1, "", "define_dovetail_tool"], [171, 1, 1, "", "element_count_complies"], [172, 1, 1, "", "from_json"], [173, 1, 1, "", "from_jsonstring"], [174, 1, 1, "", "restore_beams_from_keys"], [175, 1, 1, "", "sha256"], [176, 1, 1, "", "to_json"], [177, 1, 1, "", "to_jsonstring"], [178, 1, 1, "", "validate_data"]], "compas_timber.connections.TLapJoint": [[180, 1, 1, "", "ToString"], [181, 1, 1, "", "add_extensions"], [182, 1, 1, "", "add_features"], [183, 1, 1, "", "check_elements_compatibility"], [184, 1, 1, "", "copy"], [185, 1, 1, "", "create"], [186, 1, 1, "", "element_count_complies"], [187, 1, 1, "", "from_json"], [188, 1, 1, "", "from_jsonstring"], [189, 1, 1, "", "restore_beams_from_keys"], [190, 1, 1, "", "sha256"], [191, 1, 1, "", "to_json"], [192, 1, 1, "", "to_jsonstring"], [193, 1, 1, "", "validate_data"]], "compas_timber.connections.TStepJoint": [[195, 1, 1, "", "ToString"], [196, 1, 1, "", "add_extensions"], [197, 1, 1, "", "add_features"], [198, 1, 1, "", "check_elements_compatibility"], [199, 1, 1, "", "copy"], [200, 1, 1, "", "create"], [201, 1, 1, "", "element_count_complies"], [202, 1, 1, "", "from_json"], [203, 1, 1, "", "from_jsonstring"], [204, 1, 1, "", "restore_beams_from_keys"], [205, 1, 1, "", "set_step_depths"], [206, 1, 1, "", "sha256"], [207, 1, 1, "", "to_json"], [208, 1, 1, "", "to_jsonstring"], [209, 1, 1, "", "validate_data"]], "compas_timber.connections.TenonMortiseJoint": [[211, 1, 1, "", "ToString"], [212, 1, 1, "", "add_extensions"], [213, 1, 1, "", "add_features"], [214, 1, 1, "", "check_elements_compatibility"], [215, 1, 1, "", "copy"], [216, 1, 1, "", "create"], [217, 1, 1, "", "element_count_complies"], [218, 1, 1, "", "from_json"], [219, 1, 1, "", "from_jsonstring"], [220, 1, 1, "", "restore_beams_from_keys"], [221, 1, 1, "", "set_default_values"], [222, 1, 1, "", "sha256"], [223, 1, 1, "", "to_json"], [224, 1, 1, "", "to_jsonstring"], [225, 1, 1, "", "validate_data"]], "compas_timber.connections.XLapJoint": [[228, 1, 1, "", "ToString"], [229, 1, 1, "", "add_extensions"], [230, 1, 1, "", "add_features"], [231, 1, 1, "", "check_elements_compatibility"], [232, 1, 1, "", "copy"], [233, 1, 1, "", "create"], [234, 1, 1, "", "element_count_complies"], [235, 1, 1, "", "from_json"], [236, 1, 1, "", "from_jsonstring"], [237, 1, 1, "", "restore_beams_from_keys"], [238, 1, 1, "", "sha256"], [239, 1, 1, "", "to_json"], [240, 1, 1, "", "to_jsonstring"], [241, 1, 1, "", "validate_data"]], "compas_timber.connections.XNotchJoint": [[243, 1, 1, "", "ToString"], [244, 1, 1, "", "add_extensions"], [245, 1, 1, "", "add_features"], [246, 1, 1, "", "check_elements_compatibility"], [247, 1, 1, "", "copy"], [248, 1, 1, "", "create"], [249, 1, 1, "", "element_count_complies"], [250, 1, 1, "", "from_json"], [251, 1, 1, "", "from_jsonstring"], [252, 1, 1, "", "restore_beams_from_keys"], [253, 1, 1, "", "sha256"], [254, 1, 1, "", "to_json"], [255, 1, 1, "", "to_jsonstring"], [256, 1, 1, "", "validate_data"]], "compas_timber.connections.YButtJoint": [[258, 1, 1, "", "ToString"], [259, 1, 1, "", "add_extensions"], [260, 1, 1, "", "add_features"], [261, 1, 1, "", "check_elements_compatibility"], [262, 1, 1, "", "copy"], [263, 1, 1, "", "create"], [264, 1, 1, "", "cross_beam_ref_side_index"], [265, 1, 1, "", "element_count_complies"], [266, 1, 1, "", "from_json"], [267, 1, 1, "", "from_jsonstring"], [268, 1, 1, "", "get_miter_planes"], [269, 1, 1, "", "main_beam_ref_side_index"], [270, 1, 1, "", "restore_beams_from_keys"], [271, 1, 1, "", "sha256"], [272, 1, 1, "", "to_json"], [273, 1, 1, "", "to_jsonstring"], [274, 1, 1, "", "validate_data"]], "compas_timber.design": [[276, 0, 1, "", "CategoryRule"], [284, 0, 1, "", "DebugInfomation"], [289, 0, 1, "", "DirectRule"], [297, 0, 1, "", "FeatureDefinition"], [299, 0, 1, "", "JointDefinition"], [303, 0, 1, "", "JointRule"], [309, 0, 1, "", "SurfaceModel"], [327, 0, 1, "", "TopologyRule"], [334, 2, 1, "", "guess_joint_topology_2beams"], [335, 2, 1, "", "set_default_joints"]], "compas_timber.design.CategoryRule": [[277, 1, 1, "", "ToString"], [278, 1, 1, "", "comply"], [279, 1, 1, "", "get_category_rules"], [280, 1, 1, "", "get_direct_rules"], [281, 1, 1, "", "get_topology_rules"], [282, 1, 1, "", "joints_from_beams_and_rules"], [283, 1, 1, "", "reorder"]], "compas_timber.design.DebugInfomation": [[285, 1, 1, "", "ToString"], [286, 1, 1, "", "add_fastener_error"], [287, 1, 1, "", "add_feature_error"], [288, 1, 1, "", "add_joint_error"]], "compas_timber.design.DirectRule": [[290, 1, 1, "", "ToString"], [291, 1, 1, "", "comply"], [292, 1, 1, "", "contains"], [293, 1, 1, "", "get_category_rules"], [294, 1, 1, "", "get_direct_rules"], [295, 1, 1, "", "get_topology_rules"], [296, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.FeatureDefinition": [[298, 1, 1, "", "ToString"]], "compas_timber.design.JointDefinition": [[300, 1, 1, "", "ToString"], [301, 1, 1, "", "is_identical"], [302, 1, 1, "", "match"]], "compas_timber.design.JointRule": [[304, 1, 1, "", "comply"], [305, 1, 1, "", "get_category_rules"], [306, 1, 1, "", "get_direct_rules"], [307, 1, 1, "", "get_topology_rules"], [308, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.SurfaceModel": [[310, 1, 1, "", "beam_category_names"], [311, 1, 1, "", "create_model"], [312, 1, 1, "", "cull_overlaps"], [313, 1, 1, "", "distance_between_elements"], [314, 1, 1, "", "generate_frame"], [315, 1, 1, "", "generate_perimeter_beams"], [316, 1, 1, "", "generate_plates"], [317, 1, 1, "", "generate_stud_lines"], [318, 1, 1, "", "generate_studs"], [319, 1, 1, "", "generate_windows"], [320, 1, 1, "", "get_beam_intersections"], [321, 1, 1, "", "get_interior_segment_indices"], [322, 1, 1, "", "offset_elements"], [323, 1, 1, "", "parse_loops"], [324, 1, 1, "", "trim_jack_studs"], [325, 1, 1, "", "trim_king_studs"], [326, 1, 1, "", "trim_studs"]], "compas_timber.design.TopologyRule": [[328, 1, 1, "", "ToString"], [329, 1, 1, "", "comply"], [330, 1, 1, "", "get_category_rules"], [331, 1, 1, "", "get_direct_rules"], [332, 1, 1, "", "get_topology_rules"], [333, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.elements": [[336, 0, 1, "", "Beam"], [367, 0, 1, "", "Fastener"], [388, 0, 1, "", "FastenerTimberInterface"], [398, 0, 1, "", "Plate"], [425, 0, 1, "", "TimberElement"], [446, 0, 1, "", "Wall"]], "compas_timber.elements.Beam": [[337, 1, 1, "", "ToString"], [338, 1, 1, "", "add_blank_extension"], [339, 1, 1, "", "add_feature"], [340, 1, 1, "", "add_features"], [341, 1, 1, "", "back_side"], [342, 1, 1, "", "compute_aabb"], [343, 1, 1, "", "compute_collision_mesh"], [344, 1, 1, "", "compute_geometry"], [345, 1, 1, "", "compute_obb"], [346, 1, 1, "", "compute_worldtransformation"], [347, 1, 1, "", "copy"], [348, 1, 1, "", "endpoint_closest_to_point"], [349, 1, 1, "", "extension_to_plane"], [350, 1, 1, "", "from_centerline"], [351, 1, 1, "", "from_endpoints"], [352, 1, 1, "", "from_json"], [353, 1, 1, "", "from_jsonstring"], [354, 1, 1, "", "front_side"], [355, 1, 1, "", "get_dimensions_relative_to_side"], [356, 1, 1, "", "opp_side"], [357, 1, 1, "", "remove_blank_extension"], [358, 1, 1, "", "remove_features"], [359, 1, 1, "", "reset"], [360, 1, 1, "", "sha256"], [361, 1, 1, "", "side_as_surface"], [362, 1, 1, "", "to_json"], [363, 1, 1, "", "to_jsonstring"], [364, 1, 1, "", "transform"], [365, 1, 1, "", "transformed"], [366, 1, 1, "", "validate_data"]], "compas_timber.elements.Fastener": [[368, 1, 1, "", "ToString"], [369, 1, 1, "", "add_feature"], [370, 1, 1, "", "add_features"], [371, 1, 1, "", "compute_aabb"], [372, 1, 1, "", "compute_collision_mesh"], [373, 1, 1, "", "compute_geometry"], [374, 1, 1, "", "compute_obb"], [375, 1, 1, "", "compute_worldtransformation"], [376, 1, 1, "", "copy"], [377, 1, 1, "", "from_json"], [378, 1, 1, "", "from_jsonstring"], [379, 1, 1, "", "remove_blank_extension"], [380, 1, 1, "", "remove_features"], [381, 1, 1, "", "reset"], [382, 1, 1, "", "sha256"], [383, 1, 1, "", "to_json"], [384, 1, 1, "", "to_jsonstring"], [385, 1, 1, "", "transform"], [386, 1, 1, "", "transformed"], [387, 1, 1, "", "validate_data"]], "compas_timber.elements.FastenerTimberInterface": [[389, 1, 1, "", "ToString"], [390, 1, 1, "", "copy"], [391, 1, 1, "", "from_json"], [392, 1, 1, "", "from_jsonstring"], [393, 1, 1, "", "get_features"], [394, 1, 1, "", "sha256"], [395, 1, 1, "", "to_json"], [396, 1, 1, "", "to_jsonstring"], [397, 1, 1, "", "validate_data"]], "compas_timber.elements.Plate": [[399, 1, 1, "", "ToString"], [400, 1, 1, "", "add_feature"], [401, 1, 1, "", "add_features"], [402, 1, 1, "", "add_interface"], [403, 1, 1, "", "check_outlines"], [404, 1, 1, "", "compute_aabb"], [405, 1, 1, "", "compute_collision_mesh"], [406, 1, 1, "", "compute_geometry"], [407, 1, 1, "", "compute_obb"], [408, 1, 1, "", "compute_worldtransformation"], [409, 1, 1, "", "copy"], [410, 1, 1, "", "from_brep"], [411, 1, 1, "", "from_json"], [412, 1, 1, "", "from_jsonstring"], [413, 1, 1, "", "from_outline_thickness"], [414, 1, 1, "", "opp_side"], [415, 1, 1, "", "remove_blank_extension"], [416, 1, 1, "", "remove_features"], [417, 1, 1, "", "reset"], [418, 1, 1, "", "sha256"], [419, 1, 1, "", "side_as_surface"], [420, 1, 1, "", "to_json"], [421, 1, 1, "", "to_jsonstring"], [422, 1, 1, "", "transform"], [423, 1, 1, "", "transformed"], [424, 1, 1, "", "validate_data"]], "compas_timber.elements.TimberElement": [[426, 1, 1, "", "ToString"], [427, 1, 1, "", "add_feature"], [428, 1, 1, "", "add_features"], [429, 1, 1, "", "compute_aabb"], [430, 1, 1, "", "compute_collision_mesh"], [431, 1, 1, "", "compute_geometry"], [432, 1, 1, "", "compute_obb"], [433, 1, 1, "", "compute_worldtransformation"], [434, 1, 1, "", "copy"], [435, 1, 1, "", "from_json"], [436, 1, 1, "", "from_jsonstring"], [437, 1, 1, "", "remove_blank_extension"], [438, 1, 1, "", "remove_features"], [439, 1, 1, "", "reset"], [440, 1, 1, "", "sha256"], [441, 1, 1, "", "to_json"], [442, 1, 1, "", "to_jsonstring"], [443, 1, 1, "", "transform"], [444, 1, 1, "", "transformed"], [445, 1, 1, "", "validate_data"]], "compas_timber.elements.Wall": [[447, 1, 1, "", "ToString"], [448, 1, 1, "", "add_feature"], [449, 1, 1, "", "add_features"], [450, 1, 1, "", "compute_aabb"], [451, 1, 1, "", "compute_collision_mesh"], [452, 1, 1, "", "compute_geometry"], [453, 1, 1, "", "compute_obb"], [454, 1, 1, "", "compute_worldtransformation"], [455, 1, 1, "", "copy"], [456, 1, 1, "", "from_boundary"], [457, 1, 1, "", "from_brep"], [458, 1, 1, "", "from_json"], [459, 1, 1, "", "from_jsonstring"], [460, 1, 1, "", "remove_blank_extension"], [461, 1, 1, "", "remove_features"], [462, 1, 1, "", "reset"], [463, 1, 1, "", "rotate"], [464, 1, 1, "", "sha256"], [465, 1, 1, "", "to_json"], [466, 1, 1, "", "to_jsonstring"], [467, 1, 1, "", "transform"], [468, 1, 1, "", "transformed"], [469, 1, 1, "", "validate_data"]], "compas_timber.errors": [[470, 3, 1, "", "BeamJoiningError"], [471, 3, 1, "", "FastenerApplicationError"], [472, 3, 1, "", "FeatureApplicationError"]], "compas_timber.fabrication": [[473, 0, 1, "", "BTLxPart"], [476, 0, 1, "", "BTLxProcessing"], [487, 0, 1, "", "BTLxWriter"], [491, 0, 1, "", "DoubleCut"], [507, 0, 1, "", "DovetailMortise"], [525, 0, 1, "", "DovetailTenon"], [543, 0, 1, "", "Drilling"], [559, 0, 1, "", "EdgePositionType"], [560, 0, 1, "", "FrenchRidgeLap"], [576, 0, 1, "", "JackRafterCut"], [592, 0, 1, "", "Lap"], [609, 0, 1, "", "LimitationTopType"], [610, 0, 1, "", "LongitudinalCut"], [626, 0, 1, "", "MachiningLimits"], [627, 0, 1, "", "Mortise"], [643, 0, 1, "", "OrientationType"], [644, 0, 1, "", "Pocket"], [660, 0, 1, "", "Slot"], [674, 0, 1, "", "StepJoint"], [691, 0, 1, "", "StepJointNotch"], [708, 0, 1, "", "StepShapeType"], [709, 0, 1, "", "Tenon"], [725, 0, 1, "", "TenonShapeType"]], "compas_timber.fabrication.BTLxPart": [[474, 1, 1, "", "et_point_vals"], [475, 1, 1, "", "ref_side_from_face"]], "compas_timber.fabrication.BTLxProcessing": [[477, 1, 1, "", "ToString"], [478, 1, 1, "", "add_subprocessing"], [479, 1, 1, "", "copy"], [480, 1, 1, "", "from_json"], [481, 1, 1, "", "from_jsonstring"], [482, 1, 1, "", "scaled"], [483, 1, 1, "", "sha256"], [484, 1, 1, "", "to_json"], [485, 1, 1, "", "to_jsonstring"], [486, 1, 1, "", "validate_data"]], "compas_timber.fabrication.BTLxWriter": [[488, 1, 1, "", "model_to_xml"], [489, 1, 1, "", "register_type_serializer"], [490, 1, 1, "", "write"]], "compas_timber.fabrication.DoubleCut": [[492, 1, 1, "", "ToString"], [493, 1, 1, "", "add_subprocessing"], [494, 1, 1, "", "apply"], [495, 1, 1, "", "copy"], [496, 1, 1, "", "from_json"], [497, 1, 1, "", "from_jsonstring"], [498, 1, 1, "", "from_planes_and_beam"], [499, 1, 1, "", "from_shapes_and_element"], [500, 1, 1, "", "planes_from_params_and_beam"], [501, 1, 1, "", "scale"], [502, 1, 1, "", "scaled"], [503, 1, 1, "", "sha256"], [504, 1, 1, "", "to_json"], [505, 1, 1, "", "to_jsonstring"], [506, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailMortise": [[508, 1, 1, "", "ToString"], [509, 1, 1, "", "add_subprocessing"], [510, 1, 1, "", "apply"], [511, 1, 1, "", "copy"], [512, 1, 1, "", "define_dovetail_tool"], [513, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [514, 1, 1, "", "dovetail_volume_from_params_and_beam"], [515, 1, 1, "", "frame_from_params_and_beam"], [516, 1, 1, "", "from_frame_and_beam"], [517, 1, 1, "", "from_json"], [518, 1, 1, "", "from_jsonstring"], [519, 1, 1, "", "scale"], [520, 1, 1, "", "scaled"], [521, 1, 1, "", "sha256"], [522, 1, 1, "", "to_json"], [523, 1, 1, "", "to_jsonstring"], [524, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailTenon": [[526, 1, 1, "", "ToString"], [527, 1, 1, "", "add_subprocessing"], [528, 1, 1, "", "apply"], [529, 1, 1, "", "copy"], [530, 1, 1, "", "define_dovetail_tool"], [531, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [532, 1, 1, "", "dovetail_volume_from_params_and_beam"], [533, 1, 1, "", "frame_from_params_and_beam"], [534, 1, 1, "", "from_json"], [535, 1, 1, "", "from_jsonstring"], [536, 1, 1, "", "from_plane_and_beam"], [537, 1, 1, "", "scale"], [538, 1, 1, "", "scaled"], [539, 1, 1, "", "sha256"], [540, 1, 1, "", "to_json"], [541, 1, 1, "", "to_jsonstring"], [542, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Drilling": [[544, 1, 1, "", "ToString"], [545, 1, 1, "", "add_subprocessing"], [546, 1, 1, "", "apply"], [547, 1, 1, "", "copy"], [548, 1, 1, "", "cylinder_from_params_and_element"], [549, 1, 1, "", "from_json"], [550, 1, 1, "", "from_jsonstring"], [551, 1, 1, "", "from_line_and_element"], [552, 1, 1, "", "from_shapes_and_element"], [553, 1, 1, "", "scale"], [554, 1, 1, "", "scaled"], [555, 1, 1, "", "sha256"], [556, 1, 1, "", "to_json"], [557, 1, 1, "", "to_jsonstring"], [558, 1, 1, "", "validate_data"]], "compas_timber.fabrication.FrenchRidgeLap": [[561, 1, 1, "", "ToString"], [562, 1, 1, "", "add_subprocessing"], [563, 1, 1, "", "apply"], [564, 1, 1, "", "copy"], [565, 1, 1, "", "frame_from_params_and_beam"], [566, 1, 1, "", "from_beam_beam_and_plane"], [567, 1, 1, "", "from_json"], [568, 1, 1, "", "from_jsonstring"], [569, 1, 1, "", "lap_volume_from_params_and_beam"], [570, 1, 1, "", "scale"], [571, 1, 1, "", "scaled"], [572, 1, 1, "", "sha256"], [573, 1, 1, "", "to_json"], [574, 1, 1, "", "to_jsonstring"], [575, 1, 1, "", "validate_data"]], "compas_timber.fabrication.JackRafterCut": [[577, 1, 1, "", "ToString"], [578, 1, 1, "", "add_subprocessing"], [579, 1, 1, "", "apply"], [580, 1, 1, "", "copy"], [581, 1, 1, "", "from_json"], [582, 1, 1, "", "from_jsonstring"], [583, 1, 1, "", "from_plane_and_beam"], [584, 1, 1, "", "from_shapes_and_element"], [585, 1, 1, "", "plane_from_params_and_beam"], [586, 1, 1, "", "scale"], [587, 1, 1, "", "scaled"], [588, 1, 1, "", "sha256"], [589, 1, 1, "", "to_json"], [590, 1, 1, "", "to_jsonstring"], [591, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Lap": [[593, 1, 1, "", "ToString"], [594, 1, 1, "", "add_subprocessing"], [595, 1, 1, "", "apply"], [596, 1, 1, "", "copy"], [597, 1, 1, "", "from_json"], [598, 1, 1, "", "from_jsonstring"], [599, 1, 1, "", "from_plane_and_beam"], [600, 1, 1, "", "from_shapes_and_element"], [601, 1, 1, "", "from_volume_and_beam"], [602, 1, 1, "", "scale"], [603, 1, 1, "", "scaled"], [604, 1, 1, "", "sha256"], [605, 1, 1, "", "to_json"], [606, 1, 1, "", "to_jsonstring"], [607, 1, 1, "", "validate_data"], [608, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.LongitudinalCut": [[611, 1, 1, "", "ToString"], [612, 1, 1, "", "add_subprocessing"], [613, 1, 1, "", "apply"], [614, 1, 1, "", "copy"], [615, 1, 1, "", "from_json"], [616, 1, 1, "", "from_jsonstring"], [617, 1, 1, "", "from_plane_and_beam"], [618, 1, 1, "", "from_shapes_and_element"], [619, 1, 1, "", "plane_from_params_and_beam"], [620, 1, 1, "", "scaled"], [621, 1, 1, "", "sha256"], [622, 1, 1, "", "to_json"], [623, 1, 1, "", "to_jsonstring"], [624, 1, 1, "", "validate_data"], [625, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Mortise": [[628, 1, 1, "", "ToString"], [629, 1, 1, "", "add_subprocessing"], [630, 1, 1, "", "apply"], [631, 1, 1, "", "copy"], [632, 1, 1, "", "frame_from_params_and_beam"], [633, 1, 1, "", "from_frame_and_beam"], [634, 1, 1, "", "from_json"], [635, 1, 1, "", "from_jsonstring"], [636, 1, 1, "", "scale"], [637, 1, 1, "", "scaled"], [638, 1, 1, "", "sha256"], [639, 1, 1, "", "to_json"], [640, 1, 1, "", "to_jsonstring"], [641, 1, 1, "", "validate_data"], [642, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Pocket": [[645, 1, 1, "", "ToString"], [646, 1, 1, "", "add_subprocessing"], [647, 1, 1, "", "apply"], [648, 1, 1, "", "copy"], [649, 1, 1, "", "from_json"], [650, 1, 1, "", "from_jsonstring"], [651, 1, 1, "", "from_shapes_and_element"], [652, 1, 1, "", "from_volume_and_element"], [653, 1, 1, "", "scale"], [654, 1, 1, "", "scaled"], [655, 1, 1, "", "sha256"], [656, 1, 1, "", "to_json"], [657, 1, 1, "", "to_jsonstring"], [658, 1, 1, "", "validate_data"], [659, 1, 1, "", "volume_from_params_and_element"]], "compas_timber.fabrication.Slot": [[661, 1, 1, "", "ToString"], [662, 1, 1, "", "add_subprocessing"], [663, 1, 1, "", "apply"], [664, 1, 1, "", "copy"], [665, 1, 1, "", "from_json"], [666, 1, 1, "", "from_jsonstring"], [667, 1, 1, "", "from_plane_and_beam"], [668, 1, 1, "", "scale"], [669, 1, 1, "", "scaled"], [670, 1, 1, "", "sha256"], [671, 1, 1, "", "to_json"], [672, 1, 1, "", "to_jsonstring"], [673, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJoint": [[675, 1, 1, "", "ToString"], [676, 1, 1, "", "add_subprocessing"], [677, 1, 1, "", "add_tenon"], [678, 1, 1, "", "apply"], [679, 1, 1, "", "copy"], [680, 1, 1, "", "from_json"], [681, 1, 1, "", "from_jsonstring"], [682, 1, 1, "", "from_plane_and_beam"], [683, 1, 1, "", "planes_from_params_and_beam"], [684, 1, 1, "", "scale"], [685, 1, 1, "", "scaled"], [686, 1, 1, "", "sha256"], [687, 1, 1, "", "tenon_volume_from_params_and_beam"], [688, 1, 1, "", "to_json"], [689, 1, 1, "", "to_jsonstring"], [690, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJointNotch": [[692, 1, 1, "", "ToString"], [693, 1, 1, "", "add_mortise"], [694, 1, 1, "", "add_subprocessing"], [695, 1, 1, "", "apply"], [696, 1, 1, "", "copy"], [697, 1, 1, "", "from_json"], [698, 1, 1, "", "from_jsonstring"], [699, 1, 1, "", "from_plane_and_beam"], [700, 1, 1, "", "mortise_volume_from_params_and_beam"], [701, 1, 1, "", "planes_from_params_and_beam"], [702, 1, 1, "", "scale"], [703, 1, 1, "", "scaled"], [704, 1, 1, "", "sha256"], [705, 1, 1, "", "to_json"], [706, 1, 1, "", "to_jsonstring"], [707, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Tenon": [[710, 1, 1, "", "ToString"], [711, 1, 1, "", "add_subprocessing"], [712, 1, 1, "", "apply"], [713, 1, 1, "", "copy"], [714, 1, 1, "", "frame_from_params_and_beam"], [715, 1, 1, "", "from_json"], [716, 1, 1, "", "from_jsonstring"], [717, 1, 1, "", "from_plane_and_beam"], [718, 1, 1, "", "scale"], [719, 1, 1, "", "scaled"], [720, 1, 1, "", "sha256"], [721, 1, 1, "", "to_json"], [722, 1, 1, "", "to_jsonstring"], [723, 1, 1, "", "validate_data"], [724, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.ghpython": [[726, 2, 1, "", "add_gh_param"], [727, 2, 1, "", "clear_gh_params"], [728, 2, 1, "", "get_leaf_subclasses"], [729, 2, 1, "", "item_input_valid"], [730, 2, 1, "", "list_input_valid"], [731, 2, 1, "", "manage_dynamic_params"], [732, 2, 1, "", "rename_gh_input"]], "compas_timber.model": [[733, 0, 1, "", "TimberModel"]], "compas_timber.model.TimberModel": [[734, 1, 1, "", "ToString"], [735, 1, 1, "", "add_element"], [736, 1, 1, "", "add_elements"], [737, 1, 1, "", "add_group"], [738, 1, 1, "", "add_group_element"], [739, 1, 1, "", "add_interaction"], [740, 1, 1, "", "add_joint"], [741, 1, 1, "", "add_material"], [742, 1, 1, "", "assign_material"], [743, 1, 1, "", "compute_aabb"], [744, 1, 1, "", "compute_obb"], [745, 1, 1, "", "connect_adjacent_beams"], [746, 1, 1, "", "connect_adjacent_walls"], [747, 1, 1, "", "copy"], [748, 1, 1, "", "element_by_guid"], [749, 1, 1, "", "elements"], [750, 1, 1, "", "elements_connected_by"], [751, 1, 1, "", "from_json"], [752, 1, 1, "", "from_jsonstring"], [753, 1, 1, "", "get_elements_in_group"], [754, 1, 1, "", "get_interactions_for_element"], [755, 1, 1, "", "has_element"], [756, 1, 1, "", "has_group"], [757, 1, 1, "", "has_interaction"], [758, 1, 1, "", "has_material"], [759, 1, 1, "", "interactions"], [760, 1, 1, "", "materials"], [761, 1, 1, "", "process_joinery"], [762, 1, 1, "", "remove_element"], [763, 1, 1, "", "remove_interaction"], [764, 1, 1, "", "remove_joint"], [765, 1, 1, "", "rotate"], [766, 1, 1, "", "rotated"], [767, 1, 1, "", "scale"], [768, 1, 1, "", "scaled"], [769, 1, 1, "", "set_topologies"], [770, 1, 1, "", "sha256"], [771, 1, 1, "", "to_json"], [772, 1, 1, "", "to_jsonstring"], [773, 1, 1, "", "transform"], [774, 1, 1, "", "transform_numpy"], [775, 1, 1, "", "transformed"], [776, 1, 1, "", "transformed_numpy"], [777, 1, 1, "", "translate"], [778, 1, 1, "", "translated"], [779, 1, 1, "", "validate_data"]], "compas_timber.planning": [[780, 0, 1, "", "Actor"], [782, 0, 1, "", "BuildingPlan"], [792, 0, 1, "", "BuildingPlanParser"], [795, 0, 1, "", "Instruction"], [805, 0, 1, "", "LinearDimension"], [815, 0, 1, "", "Model3d"], [825, 0, 1, "", "SimpleSequenceGenerator"], [826, 0, 1, "", "Step"], [836, 0, 1, "", "Text3d"]], "compas_timber.planning.Actor": [[781, 1, 1, "", "get_name"]], "compas_timber.planning.BuildingPlan": [[783, 1, 1, "", "ToString"], [784, 1, 1, "", "add_step"], [785, 1, 1, "", "copy"], [786, 1, 1, "", "from_json"], [787, 1, 1, "", "from_jsonstring"], [788, 1, 1, "", "sha256"], [789, 1, 1, "", "to_json"], [790, 1, 1, "", "to_jsonstring"], [791, 1, 1, "", "validate_data"]], "compas_timber.planning.BuildingPlanParser": [[793, 1, 1, "", "parse"], [794, 1, 1, "", "serialize"]], "compas_timber.planning.Instruction": [[796, 1, 1, "", "ToString"], [797, 1, 1, "", "copy"], [798, 1, 1, "", "from_json"], [799, 1, 1, "", "from_jsonstring"], [800, 1, 1, "", "sha256"], [801, 1, 1, "", "to_json"], [802, 1, 1, "", "to_jsonstring"], [803, 1, 1, "", "transform"], [804, 1, 1, "", "validate_data"]], "compas_timber.planning.LinearDimension": [[806, 1, 1, "", "ToString"], [807, 1, 1, "", "copy"], [808, 1, 1, "", "from_json"], [809, 1, 1, "", "from_jsonstring"], [810, 1, 1, "", "sha256"], [811, 1, 1, "", "to_json"], [812, 1, 1, "", "to_jsonstring"], [813, 1, 1, "", "transform"], [814, 1, 1, "", "validate_data"]], "compas_timber.planning.Model3d": [[816, 1, 1, "", "ToString"], [817, 1, 1, "", "copy"], [818, 1, 1, "", "from_json"], [819, 1, 1, "", "from_jsonstring"], [820, 1, 1, "", "sha256"], [821, 1, 1, "", "to_json"], [822, 1, 1, "", "to_jsonstring"], [823, 1, 1, "", "transform"], [824, 1, 1, "", "validate_data"]], "compas_timber.planning.Step": [[827, 1, 1, "", "ToString"], [828, 1, 1, "", "copy"], [829, 1, 1, "", "from_json"], [830, 1, 1, "", "from_jsonstring"], [831, 1, 1, "", "sha256"], [832, 1, 1, "", "to_json"], [833, 1, 1, "", "to_jsonstring"], [834, 1, 1, "", "transform"], [835, 1, 1, "", "validate_data"]], "compas_timber.planning.Text3d": [[837, 1, 1, "", "ToString"], [838, 1, 1, "", "copy"], [839, 1, 1, "", "from_json"], [840, 1, 1, "", "from_jsonstring"], [841, 1, 1, "", "sha256"], [842, 1, 1, "", "to_json"], [843, 1, 1, "", "to_jsonstring"], [844, 1, 1, "", "transform"], [845, 1, 1, "", "validate_data"]], "compas_timber.rhino": [[846, 2, 1, "", "find_neighboring_elements"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"]}, "titleterms": {"api": 0, "refer": 0, "packag": 0, "compas_timb": [1, 2, 3, 4, 5, 6, 7, 8, 9], "connect": 1, "joint": [1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 850, 862, 864], "solver": 1, "function": [1, 2, 6], "except": 1, "design": [2, 857], "class": [2, 3, 4, 5, 7, 8, 849, 850], "element": [3, 749, 850], "error": [4, 864], "fabric": [5, 859], "ghpython": 6, "model": [7, 857, 862, 863, 864], "plan": 8, "rhino": [9, 861], "plugin": [9, 854], "ballnodejoint": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "tostr": [11, 36, 53, 69, 84, 99, 116, 134, 149, 164, 180, 195, 211, 228, 243, 258, 277, 285, 290, 298, 300, 328, 337, 368, 389, 399, 426, 447, 477, 492, 508, 526, 544, 561, 577, 593, 611, 628, 645, 661, 675, 692, 710, 734, 783, 796, 806, 816, 827, 837], "add_extens": [12, 37, 54, 70, 85, 100, 117, 135, 150, 165, 181, 196, 212, 229, 244, 259], "add_featur": [13, 38, 55, 71, 86, 101, 118, 136, 151, 166, 182, 197, 213, 230, 245, 260, 339, 340, 369, 370, 400, 401, 427, 428, 448, 449], "check_elements_compat": [14, 39, 56, 72, 87, 102, 119, 137, 152, 167, 183, 198, 214, 231, 246, 261], "copi": [15, 40, 57, 73, 88, 103, 120, 138, 153, 168, 184, 199, 215, 232, 247, 262, 347, 376, 390, 409, 434, 455, 479, 495, 511, 529, 547, 564, 580, 596, 614, 631, 648, 664, 679, 696, 713, 747, 785, 797, 807, 817, 828, 838], "creat": [16, 41, 58, 74, 89, 104, 121, 139, 154, 169, 185, 200, 216, 233, 248, 263, 849, 850], "element_count_compli": [17, 42, 59, 75, 90, 105, 122, 140, 155, 171, 186, 201, 217, 234, 249, 265], "from_json": [18, 43, 60, 76, 91, 106, 123, 141, 156, 172, 187, 202, 218, 235, 250, 266, 352, 377, 391, 411, 435, 458, 480, 496, 517, 534, 549, 567, 581, 597, 615, 634, 649, 665, 680, 697, 715, 751, 786, 798, 808, 818, 829, 839], "from_jsonstr": [19, 44, 61, 77, 92, 107, 124, 142, 157, 173, 188, 203, 219, 236, 251, 267, 353, 378, 392, 412, 436, 459, 481, 497, 518, 535, 550, 568, 582, 598, 616, 635, 650, 666, 681, 698, 716, 752, 787, 799, 809, 819, 830, 840], "restore_beams_from_kei": [20, 45, 62, 78, 93, 110, 125, 143, 158, 174, 189, 204, 220, 237, 252, 270], "sha256": [21, 46, 63, 79, 94, 111, 126, 144, 159, 175, 190, 206, 222, 238, 253, 271, 360, 382, 394, 418, 440, 464, 483, 503, 521, 539, 555, 572, 588, 604, 621, 638, 655, 670, 686, 704, 720, 770, 788, 800, 810, 820, 831, 841], "to_json": [22, 47, 64, 80, 95, 112, 127, 145, 160, 176, 191, 207, 223, 239, 254, 272, 362, 383, 395, 420, 441, 465, 484, 504, 522, 540, 556, 573, 589, 605, 622, 639, 656, 671, 688, 705, 721, 771, 789, 801, 811, 821, 832, 842], "to_jsonstr": [23, 48, 65, 81, 96, 113, 128, 146, 161, 177, 192, 208, 224, 240, 255, 273, 363, 384, 396, 421, 442, 466, 485, 505, 523, 541, 557, 574, 590, 606, 623, 640, 657, 672, 689, 706, 722, 772, 790, 802, 812, 822, 833, 843], "validate_data": [24, 49, 67, 82, 97, 114, 129, 147, 162, 178, 193, 209, 225, 241, 256, 274, 366, 387, 397, 424, 445, 469, 486, 506, 524, 542, 558, 575, 591, 607, 624, 641, 658, 673, 690, 707, 723, 779, 791, 804, 814, 824, 835, 845], "beamgroupanalyz": [25, 26], "find": [26, 29, 131], "cluster": 27, "compositeanalyz": [28, 29, 30], "from_model": 30, "connectionsolv": [31, 32, 33, 34], "find_intersecting_pair": 32, "find_topologi": 33, "find_wall_wall_topologi": 34, "jointtopologi": [50, 51], "get_nam": [51, 781], "lbuttjoint": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "update_beam_rol": 66, "lfrenchridgelapjoint": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "llapjoint": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "lmiterjoint": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "get_cutoff_plan": 108, "get_cutting_plan": 109, "lapjoint": [115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "nbeamkdtreeanalyz": [130, 131], "quadanalyz": 132, "tbirdsmouthjoint": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "tbuttjoint": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "tdovetailjoint": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178], "define_dovetail_tool": [170, 512, 530], "tlapjoint": [179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], "tstepjoint": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "set_step_depth": 205, "tenonmortisejoint": [210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], "set_default_valu": 221, "tripletanalyz": 226, "xlapjoint": [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], "xnotchjoint": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "ybuttjoint": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "cross_beam_ref_side_index": 264, "get_miter_plan": 268, "main_beam_ref_side_index": 269, "find_neighboring_el": [275, 846], "categoryrul": [276, 277, 278, 279, 280, 281, 282, 283], "compli": [278, 291, 304, 329], "get_category_rul": [279, 293, 305, 330], "get_direct_rul": [280, 294, 306, 331], "get_topology_rul": [281, 295, 307, 332], "joints_from_beams_and_rul": [282, 296, 308, 333], "reorder": 283, "debuginfom": [284, 285, 286, 287, 288], "add_fastener_error": 286, "add_feature_error": 287, "add_joint_error": 288, "directrul": [289, 290, 291, 292, 293, 294, 295, 296], "contain": 292, "featuredefinit": [297, 298], "jointdefinit": [299, 300, 301, 302], "is_ident": 301, "match": 302, "jointrul": [303, 304, 305, 306, 307, 308], "surfacemodel": [309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326], "beam_category_nam": 310, "create_model": 311, "cull_overlap": 312, "distance_between_el": 313, "generate_fram": 314, "generate_perimeter_beam": 315, "generate_pl": 316, "generate_stud_lin": 317, "generate_stud": 318, "generate_window": 319, "get_beam_intersect": 320, "get_interior_segment_indic": 321, "offset_el": 322, "parse_loop": 323, "trim_jack_stud": 324, "trim_king_stud": 325, "trim_stud": 326, "topologyrul": [327, 328, 329, 330, 331, 332, 333], "guess_joint_topology_2beam": 334, "set_default_joint": 335, "beam": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 856, 857, 864], "add_blank_extens": 338, "back_sid": 341, "compute_aabb": [342, 371, 404, 429, 450, 743], "compute_collision_mesh": [343, 372, 405, 430, 451], "compute_geometri": [344, 373, 406, 431, 452], "compute_obb": [345, 374, 407, 432, 453, 744], "compute_worldtransform": [346, 375, 408, 433, 454], "endpoint_closest_to_point": 348, "extension_to_plan": 349, "from_centerlin": 350, "from_endpoint": 351, "front_sid": 354, "get_dimensions_relative_to_sid": 355, "opp_sid": [356, 414], "remove_blank_extens": [357, 379, 415, 437, 460], "remove_featur": [358, 380, 416, 438, 461], "reset": [359, 381, 417, 439, 462], "side_as_surfac": [361, 419], "transform": [364, 365, 385, 386, 422, 423, 443, 444, 467, 468, 773, 775, 803, 813, 823, 834, 844], "fasten": [367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387], "fastenertimberinterfac": [388, 389, 390, 391, 392, 393, 394, 395, 396, 397], "get_featur": 393, "plate": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "add_interfac": 402, "check_outlin": 403, "from_brep": [410, 457], "from_outline_thick": 413, "timberel": [425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445], "wall": [446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "from_boundari": 456, "rotat": [463, 765, 766], "beamjoiningerror": 470, "fastenerapplicationerror": 471, "featureapplicationerror": 472, "btlxpart": [473, 474, 475], "et_point_v": 474, "ref_side_from_fac": 475, "btlxprocess": [476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "add_subprocess": [478, 493, 509, 527, 545, 562, 578, 594, 612, 629, 646, 662, 676, 694, 711], "scale": [482, 501, 502, 519, 520, 537, 538, 553, 554, 570, 571, 586, 587, 602, 603, 620, 636, 637, 653, 654, 668, 669, 684, 685, 702, 703, 718, 719, 767, 768], "btlxwriter": [487, 488, 489, 490], "model_to_xml": 488, "register_type_seri": 489, "write": [490, 859], "doublecut": [491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506], "appli": [494, 510, 528, 546, 563, 579, 595, 613, 630, 647, 663, 678, 695, 712], "from_planes_and_beam": 498, "from_shapes_and_el": [499, 552, 584, 600, 618, 651], "planes_from_params_and_beam": [500, 683, 701], "dovetailmortis": [507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524], "dovetail_cutting_frames_from_params_and_beam": [513, 531], "dovetail_volume_from_params_and_beam": [514, 532], "frame_from_params_and_beam": [515, 533, 565, 632, 714], "from_frame_and_beam": [516, 633], "dovetailtenon": [525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542], "from_plane_and_beam": [536, 583, 599, 617, 667, 682, 699, 717], "drill": [543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 860], "cylinder_from_params_and_el": 548, "from_line_and_el": 551, "edgepositiontyp": 559, "frenchridgelap": [560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575], "from_beam_beam_and_plan": 566, "lap_volume_from_params_and_beam": 569, "jackraftercut": [576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591], "plane_from_params_and_beam": [585, 619], "lap": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 862], "from_volume_and_beam": 601, "volume_from_params_and_beam": [608, 625, 642, 724], "limitationtoptyp": 609, "longitudinalcut": [610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625], "machininglimit": 626, "mortis": [627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 862], "orientationtyp": 643, "pocket": [644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659], "from_volume_and_el": 652, "volume_from_params_and_el": 659, "slot": [660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673], "stepjoint": [674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "add_tenon": 677, "tenon_volume_from_params_and_beam": 687, "stepjointnotch": [691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707], "add_mortis": 693, "mortise_volume_from_params_and_beam": 700, "stepshapetyp": 708, "tenon": [709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 862], "tenonshapetyp": 725, "add_gh_param": 726, "clear_gh_param": 727, "get_leaf_subclass": 728, "item_input_valid": 729, "list_input_valid": 730, "manage_dynamic_param": 731, "rename_gh_input": 732, "timbermodel": [733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779], "add_el": [735, 736], "add_group": 737, "add_group_el": 738, "add_interact": 739, "add_joint": 740, "add_materi": 741, "assign_materi": 742, "connect_adjacent_beam": 745, "connect_adjacent_wal": 746, "element_by_guid": 748, "elements_connected_bi": 750, "get_elements_in_group": 753, "get_interactions_for_el": 754, "has_el": 755, "has_group": 756, "has_interact": 757, "has_materi": 758, "interact": 759, "materi": 760, "process_joineri": 761, "remove_el": 762, "remove_interact": 763, "remove_joint": 764, "set_topologi": 769, "transform_numpi": 774, "transformed_numpi": 776, "translat": [777, 778], "actor": [780, 781], "buildingplan": [782, 783, 784, 785, 786, 787, 788, 789, 790, 791], "add_step": 784, "buildingplanpars": [792, 793, 794], "pars": 793, "serial": 794, "instruct": [795, 796, 797, 798, 799, 800, 801, 802, 803, 804], "lineardimens": [805, 806, 807, 808, 809, 810, 811, 812, 813, 814], "model3d": [815, 816, 817, 818, 819, 820, 821, 822, 823, 824], "simplesequencegener": 825, "step": [826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 862], "text3d": [836, 837, 838, 839, 840, 841, 842, 843, 844, 845], "cite": 847, "develop": [848, 852], "guid": [848, 849, 850, 861], "btlx": [849, 859], "contribut": [849, 850], "ad": 849, "new": [849, 850], "process": 849, "1": [849, 850], "identifi": 849, "paramet": 849, "2": [849, 850], "exampl": [849, 850, 858], "3": [849, 850], "add": [849, 850], "altern": 849, "constructor": 849, "4": [849, 850], "geometri": 849, "gener": 849, "method": [849, 850], "5": [849, 850], "updat": [849, 850], "modul": [849, 850], "import": [849, 850], "6": 849, "test": [849, 850], "kei": [849, 850], "consider": [849, 850], "defin": 850, "requir": 850, "analyz": 850, "relationship": 850, "extract": 850, "geometr": 850, "inform": 850, "implement": 850, "core": 850, "compa": 851, "timber": 851, "document": 851, "depend": 851, "tabl": [851, 862], "content": 851, "indic": 851, "instal": [852, 861], "user": 852, "licens": 853, "grasshopp": 854, "attribut": 855, "standard": 855, "custom": [855, 857], "check": 855, "delet": 855, "decomposebeam": 856, "findbeambyrhinoguid": 856, "surfac": [857, 862, 864], "option": 857, "dimens": 857, "featur": [860, 864], "jack": 860, "rafter": 860, "cut": 860, "doubl": 860, "8": 861, "7": 861, "troubleshoot": 861, "rule": 862, "compon": 862, "default": 862, "topolog": 862, "categori": 862, "direct": 862, "overrid": 862, "type": [862, 864], "l": 862, "butt": 862, "miter": 862, "french": 862, "ridg": 862, "t": 862, "birdsmouth": 862, "dovetail": 862, "x": 862, "summari": 862, "show": 864, "face": 864, "index": 864, "join": 864, "topologi": 864, "util": 865, "bake": 865, "boxmap": 865, "workflow": 866}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Packages": [[0, "packages"]], "compas_timber.connections": [[1, "compas-timber-connections"]], "Joints": [[1, "joints"]], "Solvers": [[1, "solvers"]], "Functions": [[1, "functions"], [2, "functions"], [6, "functions"]], "Exceptions": [[1, "exceptions"]], "compas_timber.design": [[2, "compas-timber-design"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"]], "compas_timber.elements": [[3, "compas-timber-elements"]], "compas_timber.errors": [[4, "compas-timber-errors"]], "compas_timber.fabrication": [[5, "compas-timber-fabrication"]], "compas_timber.ghpython": [[6, "compas-timber-ghpython"]], "compas_timber.model": [[7, "compas-timber-model"]], "compas_timber.planning": [[8, "compas-timber-planning"]], "compas_timber.rhino": [[9, "compas-timber-rhino"]], "Plugins": [[9, "plugins"]], "BallNodeJoint": [[10, "ballnodejoint"]], "BallNodeJoint.ToString": [[11, "ballnodejoint-tostring"]], "BallNodeJoint.add_extensions": [[12, "ballnodejoint-add-extensions"]], "BallNodeJoint.add_features": [[13, "ballnodejoint-add-features"]], "BallNodeJoint.check_elements_compatibility": [[14, "ballnodejoint-check-elements-compatibility"]], "BallNodeJoint.copy": [[15, "ballnodejoint-copy"]], "BallNodeJoint.create": [[16, "ballnodejoint-create"]], "BallNodeJoint.element_count_complies": [[17, "ballnodejoint-element-count-complies"]], "BallNodeJoint.from_json": [[18, "ballnodejoint-from-json"]], "BallNodeJoint.from_jsonstring": [[19, "ballnodejoint-from-jsonstring"]], "BallNodeJoint.restore_beams_from_keys": [[20, "ballnodejoint-restore-beams-from-keys"]], "BallNodeJoint.sha256": [[21, "ballnodejoint-sha256"]], "BallNodeJoint.to_json": [[22, "ballnodejoint-to-json"]], "BallNodeJoint.to_jsonstring": [[23, "ballnodejoint-to-jsonstring"]], "BallNodeJoint.validate_data": [[24, "ballnodejoint-validate-data"]], "BeamGroupAnalyzer": [[25, "beamgroupanalyzer"]], "BeamGroupAnalyzer.find": [[26, "beamgroupanalyzer-find"]], "Cluster": [[27, "cluster"]], "CompositeAnalyzer": [[28, "compositeanalyzer"]], "CompositeAnalyzer.find": [[29, "compositeanalyzer-find"]], "CompositeAnalyzer.from_model": [[30, "compositeanalyzer-from-model"]], "ConnectionSolver": [[31, "connectionsolver"]], "ConnectionSolver.find_intersecting_pairs": [[32, "connectionsolver-find-intersecting-pairs"]], "ConnectionSolver.find_topology": [[33, "connectionsolver-find-topology"]], "ConnectionSolver.find_wall_wall_topology": [[34, "connectionsolver-find-wall-wall-topology"]], "Joint": [[35, "joint"]], "Joint.ToString": [[36, "joint-tostring"]], "Joint.add_extensions": [[37, "joint-add-extensions"]], "Joint.add_features": [[38, "joint-add-features"]], "Joint.check_elements_compatibility": [[39, "joint-check-elements-compatibility"]], "Joint.copy": [[40, "joint-copy"]], "Joint.create": [[41, "joint-create"]], "Joint.element_count_complies": [[42, "joint-element-count-complies"]], "Joint.from_json": [[43, "joint-from-json"]], "Joint.from_jsonstring": [[44, "joint-from-jsonstring"]], "Joint.restore_beams_from_keys": [[45, "joint-restore-beams-from-keys"]], "Joint.sha256": [[46, "joint-sha256"]], "Joint.to_json": [[47, "joint-to-json"]], "Joint.to_jsonstring": [[48, "joint-to-jsonstring"]], "Joint.validate_data": [[49, "joint-validate-data"]], "JointTopology": [[50, "jointtopology"]], "JointTopology.get_name": [[51, "jointtopology-get-name"]], "LButtJoint": [[52, "lbuttjoint"]], "LButtJoint.ToString": [[53, "lbuttjoint-tostring"]], "LButtJoint.add_extensions": [[54, "lbuttjoint-add-extensions"]], "LButtJoint.add_features": [[55, "lbuttjoint-add-features"]], "LButtJoint.check_elements_compatibility": [[56, "lbuttjoint-check-elements-compatibility"]], "LButtJoint.copy": [[57, "lbuttjoint-copy"]], "LButtJoint.create": [[58, "lbuttjoint-create"]], "LButtJoint.element_count_complies": [[59, "lbuttjoint-element-count-complies"]], "LButtJoint.from_json": [[60, "lbuttjoint-from-json"]], "LButtJoint.from_jsonstring": [[61, "lbuttjoint-from-jsonstring"]], "LButtJoint.restore_beams_from_keys": [[62, "lbuttjoint-restore-beams-from-keys"]], "LButtJoint.sha256": [[63, "lbuttjoint-sha256"]], "LButtJoint.to_json": [[64, "lbuttjoint-to-json"]], "LButtJoint.to_jsonstring": [[65, "lbuttjoint-to-jsonstring"]], "LButtJoint.update_beam_roles": [[66, "lbuttjoint-update-beam-roles"]], "LButtJoint.validate_data": [[67, "lbuttjoint-validate-data"]], "LFrenchRidgeLapJoint": [[68, "lfrenchridgelapjoint"]], "LFrenchRidgeLapJoint.ToString": [[69, "lfrenchridgelapjoint-tostring"]], "LFrenchRidgeLapJoint.add_extensions": [[70, "lfrenchridgelapjoint-add-extensions"]], "LFrenchRidgeLapJoint.add_features": [[71, "lfrenchridgelapjoint-add-features"]], "LFrenchRidgeLapJoint.check_elements_compatibility": [[72, "lfrenchridgelapjoint-check-elements-compatibility"]], "LFrenchRidgeLapJoint.copy": [[73, "lfrenchridgelapjoint-copy"]], "LFrenchRidgeLapJoint.create": [[74, "lfrenchridgelapjoint-create"]], "LFrenchRidgeLapJoint.element_count_complies": [[75, "lfrenchridgelapjoint-element-count-complies"]], "LFrenchRidgeLapJoint.from_json": [[76, "lfrenchridgelapjoint-from-json"]], "LFrenchRidgeLapJoint.from_jsonstring": [[77, "lfrenchridgelapjoint-from-jsonstring"]], "LFrenchRidgeLapJoint.restore_beams_from_keys": [[78, "lfrenchridgelapjoint-restore-beams-from-keys"]], "LFrenchRidgeLapJoint.sha256": [[79, "lfrenchridgelapjoint-sha256"]], "LFrenchRidgeLapJoint.to_json": [[80, "lfrenchridgelapjoint-to-json"]], "LFrenchRidgeLapJoint.to_jsonstring": [[81, "lfrenchridgelapjoint-to-jsonstring"]], "LFrenchRidgeLapJoint.validate_data": [[82, "lfrenchridgelapjoint-validate-data"]], "LLapJoint": [[83, "llapjoint"]], "LLapJoint.ToString": [[84, "llapjoint-tostring"]], "LLapJoint.add_extensions": [[85, "llapjoint-add-extensions"]], "LLapJoint.add_features": [[86, "llapjoint-add-features"]], "LLapJoint.check_elements_compatibility": [[87, "llapjoint-check-elements-compatibility"]], "LLapJoint.copy": [[88, "llapjoint-copy"]], "LLapJoint.create": [[89, "llapjoint-create"]], "LLapJoint.element_count_complies": [[90, "llapjoint-element-count-complies"]], "LLapJoint.from_json": [[91, "llapjoint-from-json"]], "LLapJoint.from_jsonstring": [[92, "llapjoint-from-jsonstring"]], "LLapJoint.restore_beams_from_keys": [[93, "llapjoint-restore-beams-from-keys"]], "LLapJoint.sha256": [[94, "llapjoint-sha256"]], "LLapJoint.to_json": [[95, "llapjoint-to-json"]], "LLapJoint.to_jsonstring": [[96, "llapjoint-to-jsonstring"]], "LLapJoint.validate_data": [[97, "llapjoint-validate-data"]], "LMiterJoint": [[98, "lmiterjoint"]], "LMiterJoint.ToString": [[99, "lmiterjoint-tostring"]], "LMiterJoint.add_extensions": [[100, "lmiterjoint-add-extensions"]], "LMiterJoint.add_features": [[101, "lmiterjoint-add-features"]], "LMiterJoint.check_elements_compatibility": [[102, "lmiterjoint-check-elements-compatibility"]], "LMiterJoint.copy": [[103, "lmiterjoint-copy"]], "LMiterJoint.create": [[104, "lmiterjoint-create"]], "LMiterJoint.element_count_complies": [[105, "lmiterjoint-element-count-complies"]], "LMiterJoint.from_json": [[106, "lmiterjoint-from-json"]], "LMiterJoint.from_jsonstring": [[107, "lmiterjoint-from-jsonstring"]], "LMiterJoint.get_cutoff_plane": [[108, "lmiterjoint-get-cutoff-plane"]], "LMiterJoint.get_cutting_planes": [[109, "lmiterjoint-get-cutting-planes"]], "LMiterJoint.restore_beams_from_keys": [[110, "lmiterjoint-restore-beams-from-keys"]], "LMiterJoint.sha256": [[111, "lmiterjoint-sha256"]], "LMiterJoint.to_json": [[112, "lmiterjoint-to-json"]], "LMiterJoint.to_jsonstring": [[113, "lmiterjoint-to-jsonstring"]], "LMiterJoint.validate_data": [[114, "lmiterjoint-validate-data"]], "LapJoint": [[115, "lapjoint"]], "LapJoint.ToString": [[116, "lapjoint-tostring"]], "LapJoint.add_extensions": [[117, "lapjoint-add-extensions"]], "LapJoint.add_features": [[118, "lapjoint-add-features"]], "LapJoint.check_elements_compatibility": [[119, "lapjoint-check-elements-compatibility"]], "LapJoint.copy": [[120, "lapjoint-copy"]], "LapJoint.create": [[121, "lapjoint-create"]], "LapJoint.element_count_complies": [[122, "lapjoint-element-count-complies"]], "LapJoint.from_json": [[123, "lapjoint-from-json"]], "LapJoint.from_jsonstring": [[124, "lapjoint-from-jsonstring"]], "LapJoint.restore_beams_from_keys": [[125, "lapjoint-restore-beams-from-keys"]], "LapJoint.sha256": [[126, "lapjoint-sha256"]], "LapJoint.to_json": [[127, "lapjoint-to-json"]], "LapJoint.to_jsonstring": [[128, "lapjoint-to-jsonstring"]], "LapJoint.validate_data": [[129, "lapjoint-validate-data"]], "NBeamKDTreeAnalyzer": [[130, "nbeamkdtreeanalyzer"]], "NBeamKDTreeAnalyzer.find": [[131, "nbeamkdtreeanalyzer-find"]], "QuadAnalyzer": [[132, "quadanalyzer"]], "TBirdsmouthJoint": [[133, "tbirdsmouthjoint"]], "TBirdsmouthJoint.ToString": [[134, "tbirdsmouthjoint-tostring"]], "TBirdsmouthJoint.add_extensions": [[135, "tbirdsmouthjoint-add-extensions"]], "TBirdsmouthJoint.add_features": [[136, "tbirdsmouthjoint-add-features"]], "TBirdsmouthJoint.check_elements_compatibility": [[137, "tbirdsmouthjoint-check-elements-compatibility"]], "TBirdsmouthJoint.copy": [[138, "tbirdsmouthjoint-copy"]], "TBirdsmouthJoint.create": [[139, "tbirdsmouthjoint-create"]], "TBirdsmouthJoint.element_count_complies": [[140, "tbirdsmouthjoint-element-count-complies"]], "TBirdsmouthJoint.from_json": [[141, "tbirdsmouthjoint-from-json"]], "TBirdsmouthJoint.from_jsonstring": [[142, "tbirdsmouthjoint-from-jsonstring"]], "TBirdsmouthJoint.restore_beams_from_keys": [[143, "tbirdsmouthjoint-restore-beams-from-keys"]], "TBirdsmouthJoint.sha256": [[144, "tbirdsmouthjoint-sha256"]], "TBirdsmouthJoint.to_json": [[145, "tbirdsmouthjoint-to-json"]], "TBirdsmouthJoint.to_jsonstring": [[146, "tbirdsmouthjoint-to-jsonstring"]], "TBirdsmouthJoint.validate_data": [[147, "tbirdsmouthjoint-validate-data"]], "TButtJoint": [[148, "tbuttjoint"]], "TButtJoint.ToString": [[149, "tbuttjoint-tostring"]], "TButtJoint.add_extensions": [[150, "tbuttjoint-add-extensions"]], "TButtJoint.add_features": [[151, "tbuttjoint-add-features"]], "TButtJoint.check_elements_compatibility": [[152, "tbuttjoint-check-elements-compatibility"]], "TButtJoint.copy": [[153, "tbuttjoint-copy"]], "TButtJoint.create": [[154, "tbuttjoint-create"]], "TButtJoint.element_count_complies": [[155, "tbuttjoint-element-count-complies"]], "TButtJoint.from_json": [[156, "tbuttjoint-from-json"]], "TButtJoint.from_jsonstring": [[157, "tbuttjoint-from-jsonstring"]], "TButtJoint.restore_beams_from_keys": [[158, "tbuttjoint-restore-beams-from-keys"]], "TButtJoint.sha256": [[159, "tbuttjoint-sha256"]], "TButtJoint.to_json": [[160, "tbuttjoint-to-json"]], "TButtJoint.to_jsonstring": [[161, "tbuttjoint-to-jsonstring"]], "TButtJoint.validate_data": [[162, "tbuttjoint-validate-data"]], "TDovetailJoint": [[163, "tdovetailjoint"]], "TDovetailJoint.ToString": [[164, "tdovetailjoint-tostring"]], "TDovetailJoint.add_extensions": [[165, "tdovetailjoint-add-extensions"]], "TDovetailJoint.add_features": [[166, "tdovetailjoint-add-features"]], "TDovetailJoint.check_elements_compatibility": [[167, "tdovetailjoint-check-elements-compatibility"]], "TDovetailJoint.copy": [[168, "tdovetailjoint-copy"]], "TDovetailJoint.create": [[169, "tdovetailjoint-create"]], "TDovetailJoint.define_dovetail_tool": [[170, "tdovetailjoint-define-dovetail-tool"]], "TDovetailJoint.element_count_complies": [[171, "tdovetailjoint-element-count-complies"]], "TDovetailJoint.from_json": [[172, "tdovetailjoint-from-json"]], "TDovetailJoint.from_jsonstring": [[173, "tdovetailjoint-from-jsonstring"]], "TDovetailJoint.restore_beams_from_keys": [[174, "tdovetailjoint-restore-beams-from-keys"]], "TDovetailJoint.sha256": [[175, "tdovetailjoint-sha256"]], "TDovetailJoint.to_json": [[176, "tdovetailjoint-to-json"]], "TDovetailJoint.to_jsonstring": [[177, "tdovetailjoint-to-jsonstring"]], "TDovetailJoint.validate_data": [[178, "tdovetailjoint-validate-data"]], "TLapJoint": [[179, "tlapjoint"]], "TLapJoint.ToString": [[180, "tlapjoint-tostring"]], "TLapJoint.add_extensions": [[181, "tlapjoint-add-extensions"]], "TLapJoint.add_features": [[182, "tlapjoint-add-features"]], "TLapJoint.check_elements_compatibility": [[183, "tlapjoint-check-elements-compatibility"]], "TLapJoint.copy": [[184, "tlapjoint-copy"]], "TLapJoint.create": [[185, "tlapjoint-create"]], "TLapJoint.element_count_complies": [[186, "tlapjoint-element-count-complies"]], "TLapJoint.from_json": [[187, "tlapjoint-from-json"]], "TLapJoint.from_jsonstring": [[188, "tlapjoint-from-jsonstring"]], "TLapJoint.restore_beams_from_keys": [[189, "tlapjoint-restore-beams-from-keys"]], "TLapJoint.sha256": [[190, "tlapjoint-sha256"]], "TLapJoint.to_json": [[191, "tlapjoint-to-json"]], "TLapJoint.to_jsonstring": [[192, "tlapjoint-to-jsonstring"]], "TLapJoint.validate_data": [[193, "tlapjoint-validate-data"]], "TStepJoint": [[194, "tstepjoint"]], "TStepJoint.ToString": [[195, "tstepjoint-tostring"]], "TStepJoint.add_extensions": [[196, "tstepjoint-add-extensions"]], "TStepJoint.add_features": [[197, "tstepjoint-add-features"]], "TStepJoint.check_elements_compatibility": [[198, "tstepjoint-check-elements-compatibility"]], "TStepJoint.copy": [[199, "tstepjoint-copy"]], "TStepJoint.create": [[200, "tstepjoint-create"]], "TStepJoint.element_count_complies": [[201, "tstepjoint-element-count-complies"]], "TStepJoint.from_json": [[202, "tstepjoint-from-json"]], "TStepJoint.from_jsonstring": [[203, "tstepjoint-from-jsonstring"]], "TStepJoint.restore_beams_from_keys": [[204, "tstepjoint-restore-beams-from-keys"]], "TStepJoint.set_step_depths": [[205, "tstepjoint-set-step-depths"]], "TStepJoint.sha256": [[206, "tstepjoint-sha256"]], "TStepJoint.to_json": [[207, "tstepjoint-to-json"]], "TStepJoint.to_jsonstring": [[208, "tstepjoint-to-jsonstring"]], "TStepJoint.validate_data": [[209, "tstepjoint-validate-data"]], "TenonMortiseJoint": [[210, "tenonmortisejoint"]], "TenonMortiseJoint.ToString": [[211, "tenonmortisejoint-tostring"]], "TenonMortiseJoint.add_extensions": [[212, "tenonmortisejoint-add-extensions"]], "TenonMortiseJoint.add_features": [[213, "tenonmortisejoint-add-features"]], "TenonMortiseJoint.check_elements_compatibility": [[214, "tenonmortisejoint-check-elements-compatibility"]], "TenonMortiseJoint.copy": [[215, "tenonmortisejoint-copy"]], "TenonMortiseJoint.create": [[216, "tenonmortisejoint-create"]], "TenonMortiseJoint.element_count_complies": [[217, "tenonmortisejoint-element-count-complies"]], "TenonMortiseJoint.from_json": [[218, "tenonmortisejoint-from-json"]], "TenonMortiseJoint.from_jsonstring": [[219, "tenonmortisejoint-from-jsonstring"]], "TenonMortiseJoint.restore_beams_from_keys": [[220, "tenonmortisejoint-restore-beams-from-keys"]], "TenonMortiseJoint.set_default_values": [[221, "tenonmortisejoint-set-default-values"]], "TenonMortiseJoint.sha256": [[222, "tenonmortisejoint-sha256"]], "TenonMortiseJoint.to_json": [[223, "tenonmortisejoint-to-json"]], "TenonMortiseJoint.to_jsonstring": [[224, "tenonmortisejoint-to-jsonstring"]], "TenonMortiseJoint.validate_data": [[225, "tenonmortisejoint-validate-data"]], "TripletAnalyzer": [[226, "tripletanalyzer"]], "XLapJoint": [[227, "xlapjoint"]], "XLapJoint.ToString": [[228, "xlapjoint-tostring"]], "XLapJoint.add_extensions": [[229, "xlapjoint-add-extensions"]], "XLapJoint.add_features": [[230, "xlapjoint-add-features"]], "XLapJoint.check_elements_compatibility": [[231, "xlapjoint-check-elements-compatibility"]], "XLapJoint.copy": [[232, "xlapjoint-copy"]], "XLapJoint.create": [[233, "xlapjoint-create"]], "XLapJoint.element_count_complies": [[234, "xlapjoint-element-count-complies"]], "XLapJoint.from_json": [[235, "xlapjoint-from-json"]], "XLapJoint.from_jsonstring": [[236, "xlapjoint-from-jsonstring"]], "XLapJoint.restore_beams_from_keys": [[237, "xlapjoint-restore-beams-from-keys"]], "XLapJoint.sha256": [[238, "xlapjoint-sha256"]], "XLapJoint.to_json": [[239, "xlapjoint-to-json"]], "XLapJoint.to_jsonstring": [[240, "xlapjoint-to-jsonstring"]], "XLapJoint.validate_data": [[241, "xlapjoint-validate-data"]], "XNotchJoint": [[242, "xnotchjoint"]], "XNotchJoint.ToString": [[243, "xnotchjoint-tostring"]], "XNotchJoint.add_extensions": [[244, "xnotchjoint-add-extensions"]], "XNotchJoint.add_features": [[245, "xnotchjoint-add-features"]], "XNotchJoint.check_elements_compatibility": [[246, "xnotchjoint-check-elements-compatibility"]], "XNotchJoint.copy": [[247, "xnotchjoint-copy"]], "XNotchJoint.create": [[248, "xnotchjoint-create"]], "XNotchJoint.element_count_complies": [[249, "xnotchjoint-element-count-complies"]], "XNotchJoint.from_json": [[250, "xnotchjoint-from-json"]], "XNotchJoint.from_jsonstring": [[251, "xnotchjoint-from-jsonstring"]], "XNotchJoint.restore_beams_from_keys": [[252, "xnotchjoint-restore-beams-from-keys"]], "XNotchJoint.sha256": [[253, "xnotchjoint-sha256"]], "XNotchJoint.to_json": [[254, "xnotchjoint-to-json"]], "XNotchJoint.to_jsonstring": [[255, "xnotchjoint-to-jsonstring"]], "XNotchJoint.validate_data": [[256, "xnotchjoint-validate-data"]], "YButtJoint": [[257, "ybuttjoint"]], "YButtJoint.ToString": [[258, "ybuttjoint-tostring"]], "YButtJoint.add_extensions": [[259, "ybuttjoint-add-extensions"]], "YButtJoint.add_features": [[260, "ybuttjoint-add-features"]], "YButtJoint.check_elements_compatibility": [[261, "ybuttjoint-check-elements-compatibility"]], "YButtJoint.copy": [[262, "ybuttjoint-copy"]], "YButtJoint.create": [[263, "ybuttjoint-create"]], "YButtJoint.cross_beam_ref_side_index": [[264, "ybuttjoint-cross-beam-ref-side-index"]], "YButtJoint.element_count_complies": [[265, "ybuttjoint-element-count-complies"]], "YButtJoint.from_json": [[266, "ybuttjoint-from-json"]], "YButtJoint.from_jsonstring": [[267, "ybuttjoint-from-jsonstring"]], "YButtJoint.get_miter_planes": [[268, "ybuttjoint-get-miter-planes"]], "YButtJoint.main_beam_ref_side_index": [[269, "ybuttjoint-main-beam-ref-side-index"]], "YButtJoint.restore_beams_from_keys": [[270, "ybuttjoint-restore-beams-from-keys"]], "YButtJoint.sha256": [[271, "ybuttjoint-sha256"]], "YButtJoint.to_json": [[272, "ybuttjoint-to-json"]], "YButtJoint.to_jsonstring": [[273, "ybuttjoint-to-jsonstring"]], "YButtJoint.validate_data": [[274, "ybuttjoint-validate-data"]], "find_neighboring_elements": [[275, "find-neighboring-elements"], [846, "find-neighboring-elements"]], "CategoryRule": [[276, "categoryrule"]], "CategoryRule.ToString": [[277, "categoryrule-tostring"]], "CategoryRule.comply": [[278, "categoryrule-comply"]], "CategoryRule.get_category_rules": [[279, "categoryrule-get-category-rules"]], "CategoryRule.get_direct_rules": [[280, "categoryrule-get-direct-rules"]], "CategoryRule.get_topology_rules": [[281, "categoryrule-get-topology-rules"]], "CategoryRule.joints_from_beams_and_rules": [[282, "categoryrule-joints-from-beams-and-rules"]], "CategoryRule.reorder": [[283, "categoryrule-reorder"]], "DebugInfomation": [[284, "debuginfomation"]], "DebugInfomation.ToString": [[285, "debuginfomation-tostring"]], "DebugInfomation.add_fastener_error": [[286, "debuginfomation-add-fastener-error"]], "DebugInfomation.add_feature_error": [[287, "debuginfomation-add-feature-error"]], "DebugInfomation.add_joint_error": [[288, "debuginfomation-add-joint-error"]], "DirectRule": [[289, "directrule"]], "DirectRule.ToString": [[290, "directrule-tostring"]], "DirectRule.comply": [[291, "directrule-comply"]], "DirectRule.contains": [[292, "directrule-contains"]], "DirectRule.get_category_rules": [[293, "directrule-get-category-rules"]], "DirectRule.get_direct_rules": [[294, "directrule-get-direct-rules"]], "DirectRule.get_topology_rules": [[295, "directrule-get-topology-rules"]], "DirectRule.joints_from_beams_and_rules": [[296, "directrule-joints-from-beams-and-rules"]], "FeatureDefinition": [[297, "featuredefinition"]], "FeatureDefinition.ToString": [[298, "featuredefinition-tostring"]], "JointDefinition": [[299, "jointdefinition"]], "JointDefinition.ToString": [[300, "jointdefinition-tostring"]], "JointDefinition.is_identical": [[301, "jointdefinition-is-identical"]], "JointDefinition.match": [[302, "jointdefinition-match"]], "JointRule": [[303, "jointrule"]], "JointRule.comply": [[304, "jointrule-comply"]], "JointRule.get_category_rules": [[305, "jointrule-get-category-rules"]], "JointRule.get_direct_rules": [[306, "jointrule-get-direct-rules"]], "JointRule.get_topology_rules": [[307, "jointrule-get-topology-rules"]], "JointRule.joints_from_beams_and_rules": [[308, "jointrule-joints-from-beams-and-rules"]], "SurfaceModel": [[309, "surfacemodel"]], "SurfaceModel.beam_category_names": [[310, "surfacemodel-beam-category-names"]], "SurfaceModel.create_model": [[311, "surfacemodel-create-model"]], "SurfaceModel.cull_overlaps": [[312, "surfacemodel-cull-overlaps"]], "SurfaceModel.distance_between_elements": [[313, "surfacemodel-distance-between-elements"]], "SurfaceModel.generate_frame": [[314, "surfacemodel-generate-frame"]], "SurfaceModel.generate_perimeter_beams": [[315, "surfacemodel-generate-perimeter-beams"]], "SurfaceModel.generate_plates": [[316, "surfacemodel-generate-plates"]], "SurfaceModel.generate_stud_lines": [[317, "surfacemodel-generate-stud-lines"]], "SurfaceModel.generate_studs": [[318, "surfacemodel-generate-studs"]], "SurfaceModel.generate_windows": [[319, "surfacemodel-generate-windows"]], "SurfaceModel.get_beam_intersections": [[320, "surfacemodel-get-beam-intersections"]], "SurfaceModel.get_interior_segment_indices": [[321, "surfacemodel-get-interior-segment-indices"]], "SurfaceModel.offset_elements": [[322, "surfacemodel-offset-elements"]], "SurfaceModel.parse_loops": [[323, "surfacemodel-parse-loops"]], "SurfaceModel.trim_jack_studs": [[324, "surfacemodel-trim-jack-studs"]], "SurfaceModel.trim_king_studs": [[325, "surfacemodel-trim-king-studs"]], "SurfaceModel.trim_studs": [[326, "surfacemodel-trim-studs"]], "TopologyRule": [[327, "topologyrule"]], "TopologyRule.ToString": [[328, "topologyrule-tostring"]], "TopologyRule.comply": [[329, "topologyrule-comply"]], "TopologyRule.get_category_rules": [[330, "topologyrule-get-category-rules"]], "TopologyRule.get_direct_rules": [[331, "topologyrule-get-direct-rules"]], "TopologyRule.get_topology_rules": [[332, "topologyrule-get-topology-rules"]], "TopologyRule.joints_from_beams_and_rules": [[333, "topologyrule-joints-from-beams-and-rules"]], "guess_joint_topology_2beams": [[334, "guess-joint-topology-2beams"]], "set_default_joints": [[335, "set-default-joints"]], "Beam": [[336, "beam"]], "Beam.ToString": [[337, "beam-tostring"]], "Beam.add_blank_extension": [[338, "beam-add-blank-extension"]], "Beam.add_feature": [[339, "beam-add-feature"]], "Beam.add_features": [[340, "beam-add-features"]], "Beam.back_side": [[341, "beam-back-side"]], "Beam.compute_aabb": [[342, "beam-compute-aabb"]], "Beam.compute_collision_mesh": [[343, "beam-compute-collision-mesh"]], "Beam.compute_geometry": [[344, "beam-compute-geometry"]], "Beam.compute_obb": [[345, "beam-compute-obb"]], "Beam.compute_worldtransformation": [[346, "beam-compute-worldtransformation"]], "Beam.copy": [[347, "beam-copy"]], "Beam.endpoint_closest_to_point": [[348, "beam-endpoint-closest-to-point"]], "Beam.extension_to_plane": [[349, "beam-extension-to-plane"]], "Beam.from_centerline": [[350, "beam-from-centerline"]], "Beam.from_endpoints": [[351, "beam-from-endpoints"]], "Beam.from_json": [[352, "beam-from-json"]], "Beam.from_jsonstring": [[353, "beam-from-jsonstring"]], "Beam.front_side": [[354, "beam-front-side"]], "Beam.get_dimensions_relative_to_side": [[355, "beam-get-dimensions-relative-to-side"]], "Beam.opp_side": [[356, "beam-opp-side"]], "Beam.remove_blank_extension": [[357, "beam-remove-blank-extension"]], "Beam.remove_features": [[358, "beam-remove-features"]], "Beam.reset": [[359, "beam-reset"]], "Beam.sha256": [[360, "beam-sha256"]], "Beam.side_as_surface": [[361, "beam-side-as-surface"]], "Beam.to_json": [[362, "beam-to-json"]], "Beam.to_jsonstring": [[363, "beam-to-jsonstring"]], "Beam.transform": [[364, "beam-transform"]], "Beam.transformed": [[365, "beam-transformed"]], "Beam.validate_data": [[366, "beam-validate-data"]], "Fastener": [[367, "fastener"]], "Fastener.ToString": [[368, "fastener-tostring"]], "Fastener.add_feature": [[369, "fastener-add-feature"]], "Fastener.add_features": [[370, "fastener-add-features"]], "Fastener.compute_aabb": [[371, "fastener-compute-aabb"]], "Fastener.compute_collision_mesh": [[372, "fastener-compute-collision-mesh"]], "Fastener.compute_geometry": [[373, "fastener-compute-geometry"]], "Fastener.compute_obb": [[374, "fastener-compute-obb"]], "Fastener.compute_worldtransformation": [[375, "fastener-compute-worldtransformation"]], "Fastener.copy": [[376, "fastener-copy"]], "Fastener.from_json": [[377, "fastener-from-json"]], "Fastener.from_jsonstring": [[378, "fastener-from-jsonstring"]], "Fastener.remove_blank_extension": [[379, "fastener-remove-blank-extension"]], "Fastener.remove_features": [[380, "fastener-remove-features"]], "Fastener.reset": [[381, "fastener-reset"]], "Fastener.sha256": [[382, "fastener-sha256"]], "Fastener.to_json": [[383, "fastener-to-json"]], "Fastener.to_jsonstring": [[384, "fastener-to-jsonstring"]], "Fastener.transform": [[385, "fastener-transform"]], "Fastener.transformed": [[386, "fastener-transformed"]], "Fastener.validate_data": [[387, "fastener-validate-data"]], "FastenerTimberInterface": [[388, "fastenertimberinterface"]], "FastenerTimberInterface.ToString": [[389, "fastenertimberinterface-tostring"]], "FastenerTimberInterface.copy": [[390, "fastenertimberinterface-copy"]], "FastenerTimberInterface.from_json": [[391, "fastenertimberinterface-from-json"]], "FastenerTimberInterface.from_jsonstring": [[392, "fastenertimberinterface-from-jsonstring"]], "FastenerTimberInterface.get_features": [[393, "fastenertimberinterface-get-features"]], "FastenerTimberInterface.sha256": [[394, "fastenertimberinterface-sha256"]], "FastenerTimberInterface.to_json": [[395, "fastenertimberinterface-to-json"]], "FastenerTimberInterface.to_jsonstring": [[396, "fastenertimberinterface-to-jsonstring"]], "FastenerTimberInterface.validate_data": [[397, "fastenertimberinterface-validate-data"]], "Plate": [[398, "plate"]], "Plate.ToString": [[399, "plate-tostring"]], "Plate.add_feature": [[400, "plate-add-feature"]], "Plate.add_features": [[401, "plate-add-features"]], "Plate.add_interface": [[402, "plate-add-interface"]], "Plate.check_outlines": [[403, "plate-check-outlines"]], "Plate.compute_aabb": [[404, "plate-compute-aabb"]], "Plate.compute_collision_mesh": [[405, "plate-compute-collision-mesh"]], "Plate.compute_geometry": [[406, "plate-compute-geometry"]], "Plate.compute_obb": [[407, "plate-compute-obb"]], "Plate.compute_worldtransformation": [[408, "plate-compute-worldtransformation"]], "Plate.copy": [[409, "plate-copy"]], "Plate.from_brep": [[410, "plate-from-brep"]], "Plate.from_json": [[411, "plate-from-json"]], "Plate.from_jsonstring": [[412, "plate-from-jsonstring"]], "Plate.from_outline_thickness": [[413, "plate-from-outline-thickness"]], "Plate.opp_side": [[414, "plate-opp-side"]], "Plate.remove_blank_extension": [[415, "plate-remove-blank-extension"]], "Plate.remove_features": [[416, "plate-remove-features"]], "Plate.reset": [[417, "plate-reset"]], "Plate.sha256": [[418, "plate-sha256"]], "Plate.side_as_surface": [[419, "plate-side-as-surface"]], "Plate.to_json": [[420, "plate-to-json"]], "Plate.to_jsonstring": [[421, "plate-to-jsonstring"]], "Plate.transform": [[422, "plate-transform"]], "Plate.transformed": [[423, "plate-transformed"]], "Plate.validate_data": [[424, "plate-validate-data"]], "TimberElement": [[425, "timberelement"]], "TimberElement.ToString": [[426, "timberelement-tostring"]], "TimberElement.add_feature": [[427, "timberelement-add-feature"]], "TimberElement.add_features": [[428, "timberelement-add-features"]], "TimberElement.compute_aabb": [[429, "timberelement-compute-aabb"]], "TimberElement.compute_collision_mesh": [[430, "timberelement-compute-collision-mesh"]], "TimberElement.compute_geometry": [[431, "timberelement-compute-geometry"]], "TimberElement.compute_obb": [[432, "timberelement-compute-obb"]], "TimberElement.compute_worldtransformation": [[433, "timberelement-compute-worldtransformation"]], "TimberElement.copy": [[434, "timberelement-copy"]], "TimberElement.from_json": [[435, "timberelement-from-json"]], "TimberElement.from_jsonstring": [[436, "timberelement-from-jsonstring"]], "TimberElement.remove_blank_extension": [[437, "timberelement-remove-blank-extension"]], "TimberElement.remove_features": [[438, "timberelement-remove-features"]], "TimberElement.reset": [[439, "timberelement-reset"]], "TimberElement.sha256": [[440, "timberelement-sha256"]], "TimberElement.to_json": [[441, "timberelement-to-json"]], "TimberElement.to_jsonstring": [[442, "timberelement-to-jsonstring"]], "TimberElement.transform": [[443, "timberelement-transform"]], "TimberElement.transformed": [[444, "timberelement-transformed"]], "TimberElement.validate_data": [[445, "timberelement-validate-data"]], "Wall": [[446, "wall"]], "Wall.ToString": [[447, "wall-tostring"]], "Wall.add_feature": [[448, "wall-add-feature"]], "Wall.add_features": [[449, "wall-add-features"]], "Wall.compute_aabb": [[450, "wall-compute-aabb"]], "Wall.compute_collision_mesh": [[451, "wall-compute-collision-mesh"]], "Wall.compute_geometry": [[452, "wall-compute-geometry"]], "Wall.compute_obb": [[453, "wall-compute-obb"]], "Wall.compute_worldtransformation": [[454, "wall-compute-worldtransformation"]], "Wall.copy": [[455, "wall-copy"]], "Wall.from_boundary": [[456, "wall-from-boundary"]], "Wall.from_brep": [[457, "wall-from-brep"]], "Wall.from_json": [[458, "wall-from-json"]], "Wall.from_jsonstring": [[459, "wall-from-jsonstring"]], "Wall.remove_blank_extension": [[460, "wall-remove-blank-extension"]], "Wall.remove_features": [[461, "wall-remove-features"]], "Wall.reset": [[462, "wall-reset"]], "Wall.rotate": [[463, "wall-rotate"]], "Wall.sha256": [[464, "wall-sha256"]], "Wall.to_json": [[465, "wall-to-json"]], "Wall.to_jsonstring": [[466, "wall-to-jsonstring"]], "Wall.transform": [[467, "wall-transform"]], "Wall.transformed": [[468, "wall-transformed"]], "Wall.validate_data": [[469, "wall-validate-data"]], "BeamJoiningError": [[470, "beamjoiningerror"]], "FastenerApplicationError": [[471, "fastenerapplicationerror"]], "FeatureApplicationError": [[472, "featureapplicationerror"]], "BTLxPart": [[473, "btlxpart"]], "BTLxPart.et_point_vals": [[474, "btlxpart-et-point-vals"]], "BTLxPart.ref_side_from_face": [[475, "btlxpart-ref-side-from-face"]], "BTLxProcessing": [[476, "btlxprocessing"]], "BTLxProcessing.ToString": [[477, "btlxprocessing-tostring"]], "BTLxProcessing.add_subprocessing": [[478, "btlxprocessing-add-subprocessing"]], "BTLxProcessing.copy": [[479, "btlxprocessing-copy"]], "BTLxProcessing.from_json": [[480, "btlxprocessing-from-json"]], "BTLxProcessing.from_jsonstring": [[481, "btlxprocessing-from-jsonstring"]], "BTLxProcessing.scaled": [[482, "btlxprocessing-scaled"]], "BTLxProcessing.sha256": [[483, "btlxprocessing-sha256"]], "BTLxProcessing.to_json": [[484, "btlxprocessing-to-json"]], "BTLxProcessing.to_jsonstring": [[485, "btlxprocessing-to-jsonstring"]], "BTLxProcessing.validate_data": [[486, "btlxprocessing-validate-data"]], "BTLxWriter": [[487, "btlxwriter"]], "BTLxWriter.model_to_xml": [[488, "btlxwriter-model-to-xml"]], "BTLxWriter.register_type_serializer": [[489, "btlxwriter-register-type-serializer"]], "BTLxWriter.write": [[490, "btlxwriter-write"]], "DoubleCut": [[491, "doublecut"]], "DoubleCut.ToString": [[492, "doublecut-tostring"]], "DoubleCut.add_subprocessing": [[493, "doublecut-add-subprocessing"]], "DoubleCut.apply": [[494, "doublecut-apply"]], "DoubleCut.copy": [[495, "doublecut-copy"]], "DoubleCut.from_json": [[496, "doublecut-from-json"]], "DoubleCut.from_jsonstring": [[497, "doublecut-from-jsonstring"]], "DoubleCut.from_planes_and_beam": [[498, "doublecut-from-planes-and-beam"]], "DoubleCut.from_shapes_and_element": [[499, "doublecut-from-shapes-and-element"]], "DoubleCut.planes_from_params_and_beam": [[500, "doublecut-planes-from-params-and-beam"]], "DoubleCut.scale": [[501, "doublecut-scale"]], "DoubleCut.scaled": [[502, "doublecut-scaled"]], "DoubleCut.sha256": [[503, "doublecut-sha256"]], "DoubleCut.to_json": [[504, "doublecut-to-json"]], "DoubleCut.to_jsonstring": [[505, "doublecut-to-jsonstring"]], "DoubleCut.validate_data": [[506, "doublecut-validate-data"]], "DovetailMortise": [[507, "dovetailmortise"]], "DovetailMortise.ToString": [[508, "dovetailmortise-tostring"]], "DovetailMortise.add_subprocessing": [[509, "dovetailmortise-add-subprocessing"]], "DovetailMortise.apply": [[510, "dovetailmortise-apply"]], "DovetailMortise.copy": [[511, "dovetailmortise-copy"]], "DovetailMortise.define_dovetail_tool": [[512, "dovetailmortise-define-dovetail-tool"]], "DovetailMortise.dovetail_cutting_frames_from_params_and_beam": [[513, "dovetailmortise-dovetail-cutting-frames-from-params-and-beam"]], "DovetailMortise.dovetail_volume_from_params_and_beam": [[514, "dovetailmortise-dovetail-volume-from-params-and-beam"]], "DovetailMortise.frame_from_params_and_beam": [[515, "dovetailmortise-frame-from-params-and-beam"]], "DovetailMortise.from_frame_and_beam": [[516, "dovetailmortise-from-frame-and-beam"]], "DovetailMortise.from_json": [[517, "dovetailmortise-from-json"]], "DovetailMortise.from_jsonstring": [[518, "dovetailmortise-from-jsonstring"]], "DovetailMortise.scale": [[519, "dovetailmortise-scale"]], "DovetailMortise.scaled": [[520, "dovetailmortise-scaled"]], "DovetailMortise.sha256": [[521, "dovetailmortise-sha256"]], "DovetailMortise.to_json": [[522, "dovetailmortise-to-json"]], "DovetailMortise.to_jsonstring": [[523, "dovetailmortise-to-jsonstring"]], "DovetailMortise.validate_data": [[524, "dovetailmortise-validate-data"]], "DovetailTenon": [[525, "dovetailtenon"]], "DovetailTenon.ToString": [[526, "dovetailtenon-tostring"]], "DovetailTenon.add_subprocessing": [[527, "dovetailtenon-add-subprocessing"]], "DovetailTenon.apply": [[528, "dovetailtenon-apply"]], "DovetailTenon.copy": [[529, "dovetailtenon-copy"]], "DovetailTenon.define_dovetail_tool": [[530, "dovetailtenon-define-dovetail-tool"]], "DovetailTenon.dovetail_cutting_frames_from_params_and_beam": [[531, "dovetailtenon-dovetail-cutting-frames-from-params-and-beam"]], "DovetailTenon.dovetail_volume_from_params_and_beam": [[532, "dovetailtenon-dovetail-volume-from-params-and-beam"]], "DovetailTenon.frame_from_params_and_beam": [[533, "dovetailtenon-frame-from-params-and-beam"]], "DovetailTenon.from_json": [[534, "dovetailtenon-from-json"]], "DovetailTenon.from_jsonstring": [[535, "dovetailtenon-from-jsonstring"]], "DovetailTenon.from_plane_and_beam": [[536, "dovetailtenon-from-plane-and-beam"]], "DovetailTenon.scale": [[537, "dovetailtenon-scale"]], "DovetailTenon.scaled": [[538, "dovetailtenon-scaled"]], "DovetailTenon.sha256": [[539, "dovetailtenon-sha256"]], "DovetailTenon.to_json": [[540, "dovetailtenon-to-json"]], "DovetailTenon.to_jsonstring": [[541, "dovetailtenon-to-jsonstring"]], "DovetailTenon.validate_data": [[542, "dovetailtenon-validate-data"]], "Drilling": [[543, "drilling"]], "Drilling.ToString": [[544, "drilling-tostring"]], "Drilling.add_subprocessing": [[545, "drilling-add-subprocessing"]], "Drilling.apply": [[546, "drilling-apply"]], "Drilling.copy": [[547, "drilling-copy"]], "Drilling.cylinder_from_params_and_element": [[548, "drilling-cylinder-from-params-and-element"]], "Drilling.from_json": [[549, "drilling-from-json"]], "Drilling.from_jsonstring": [[550, "drilling-from-jsonstring"]], "Drilling.from_line_and_element": [[551, "drilling-from-line-and-element"]], "Drilling.from_shapes_and_element": [[552, "drilling-from-shapes-and-element"]], "Drilling.scale": [[553, "drilling-scale"]], "Drilling.scaled": [[554, "drilling-scaled"]], "Drilling.sha256": [[555, "drilling-sha256"]], "Drilling.to_json": [[556, "drilling-to-json"]], "Drilling.to_jsonstring": [[557, "drilling-to-jsonstring"]], "Drilling.validate_data": [[558, "drilling-validate-data"]], "EdgePositionType": [[559, "edgepositiontype"]], "FrenchRidgeLap": [[560, "frenchridgelap"]], "FrenchRidgeLap.ToString": [[561, "frenchridgelap-tostring"]], "FrenchRidgeLap.add_subprocessing": [[562, "frenchridgelap-add-subprocessing"]], "FrenchRidgeLap.apply": [[563, "frenchridgelap-apply"]], "FrenchRidgeLap.copy": [[564, "frenchridgelap-copy"]], "FrenchRidgeLap.frame_from_params_and_beam": [[565, "frenchridgelap-frame-from-params-and-beam"]], "FrenchRidgeLap.from_beam_beam_and_plane": [[566, "frenchridgelap-from-beam-beam-and-plane"]], "FrenchRidgeLap.from_json": [[567, "frenchridgelap-from-json"]], "FrenchRidgeLap.from_jsonstring": [[568, "frenchridgelap-from-jsonstring"]], "FrenchRidgeLap.lap_volume_from_params_and_beam": [[569, "frenchridgelap-lap-volume-from-params-and-beam"]], "FrenchRidgeLap.scale": [[570, "frenchridgelap-scale"]], "FrenchRidgeLap.scaled": [[571, "frenchridgelap-scaled"]], "FrenchRidgeLap.sha256": [[572, "frenchridgelap-sha256"]], "FrenchRidgeLap.to_json": [[573, "frenchridgelap-to-json"]], "FrenchRidgeLap.to_jsonstring": [[574, "frenchridgelap-to-jsonstring"]], "FrenchRidgeLap.validate_data": [[575, "frenchridgelap-validate-data"]], "JackRafterCut": [[576, "jackraftercut"]], "JackRafterCut.ToString": [[577, "jackraftercut-tostring"]], "JackRafterCut.add_subprocessing": [[578, "jackraftercut-add-subprocessing"]], "JackRafterCut.apply": [[579, "jackraftercut-apply"]], "JackRafterCut.copy": [[580, "jackraftercut-copy"]], "JackRafterCut.from_json": [[581, "jackraftercut-from-json"]], "JackRafterCut.from_jsonstring": [[582, "jackraftercut-from-jsonstring"]], "JackRafterCut.from_plane_and_beam": [[583, "jackraftercut-from-plane-and-beam"]], "JackRafterCut.from_shapes_and_element": [[584, "jackraftercut-from-shapes-and-element"]], "JackRafterCut.plane_from_params_and_beam": [[585, "jackraftercut-plane-from-params-and-beam"]], "JackRafterCut.scale": [[586, "jackraftercut-scale"]], "JackRafterCut.scaled": [[587, "jackraftercut-scaled"]], "JackRafterCut.sha256": [[588, "jackraftercut-sha256"]], "JackRafterCut.to_json": [[589, "jackraftercut-to-json"]], "JackRafterCut.to_jsonstring": [[590, "jackraftercut-to-jsonstring"]], "JackRafterCut.validate_data": [[591, "jackraftercut-validate-data"]], "Lap": [[592, "lap"]], "Lap.ToString": [[593, "lap-tostring"]], "Lap.add_subprocessing": [[594, "lap-add-subprocessing"]], "Lap.apply": [[595, "lap-apply"]], "Lap.copy": [[596, "lap-copy"]], "Lap.from_json": [[597, "lap-from-json"]], "Lap.from_jsonstring": [[598, "lap-from-jsonstring"]], "Lap.from_plane_and_beam": [[599, "lap-from-plane-and-beam"]], "Lap.from_shapes_and_element": [[600, "lap-from-shapes-and-element"]], "Lap.from_volume_and_beam": [[601, "lap-from-volume-and-beam"]], "Lap.scale": [[602, "lap-scale"]], "Lap.scaled": [[603, "lap-scaled"]], "Lap.sha256": [[604, "lap-sha256"]], "Lap.to_json": [[605, "lap-to-json"]], "Lap.to_jsonstring": [[606, "lap-to-jsonstring"]], "Lap.validate_data": [[607, "lap-validate-data"]], "Lap.volume_from_params_and_beam": [[608, "lap-volume-from-params-and-beam"]], "LimitationTopType": [[609, "limitationtoptype"]], "LongitudinalCut": [[610, "longitudinalcut"]], "LongitudinalCut.ToString": [[611, "longitudinalcut-tostring"]], "LongitudinalCut.add_subprocessing": [[612, "longitudinalcut-add-subprocessing"]], "LongitudinalCut.apply": [[613, "longitudinalcut-apply"]], "LongitudinalCut.copy": [[614, "longitudinalcut-copy"]], "LongitudinalCut.from_json": [[615, "longitudinalcut-from-json"]], "LongitudinalCut.from_jsonstring": [[616, "longitudinalcut-from-jsonstring"]], "LongitudinalCut.from_plane_and_beam": [[617, "longitudinalcut-from-plane-and-beam"]], "LongitudinalCut.from_shapes_and_element": [[618, "longitudinalcut-from-shapes-and-element"]], "LongitudinalCut.plane_from_params_and_beam": [[619, "longitudinalcut-plane-from-params-and-beam"]], "LongitudinalCut.scaled": [[620, "longitudinalcut-scaled"]], "LongitudinalCut.sha256": [[621, "longitudinalcut-sha256"]], "LongitudinalCut.to_json": [[622, "longitudinalcut-to-json"]], "LongitudinalCut.to_jsonstring": [[623, "longitudinalcut-to-jsonstring"]], "LongitudinalCut.validate_data": [[624, "longitudinalcut-validate-data"]], "LongitudinalCut.volume_from_params_and_beam": [[625, "longitudinalcut-volume-from-params-and-beam"]], "MachiningLimits": [[626, "machininglimits"]], "Mortise": [[627, "mortise"]], "Mortise.ToString": [[628, "mortise-tostring"]], "Mortise.add_subprocessing": [[629, "mortise-add-subprocessing"]], "Mortise.apply": [[630, "mortise-apply"]], "Mortise.copy": [[631, "mortise-copy"]], "Mortise.frame_from_params_and_beam": [[632, "mortise-frame-from-params-and-beam"]], "Mortise.from_frame_and_beam": [[633, "mortise-from-frame-and-beam"]], "Mortise.from_json": [[634, "mortise-from-json"]], "Mortise.from_jsonstring": [[635, "mortise-from-jsonstring"]], "Mortise.scale": [[636, "mortise-scale"]], "Mortise.scaled": [[637, "mortise-scaled"]], "Mortise.sha256": [[638, "mortise-sha256"]], "Mortise.to_json": [[639, "mortise-to-json"]], "Mortise.to_jsonstring": [[640, "mortise-to-jsonstring"]], "Mortise.validate_data": [[641, "mortise-validate-data"]], "Mortise.volume_from_params_and_beam": [[642, "mortise-volume-from-params-and-beam"]], "OrientationType": [[643, "orientationtype"]], "Pocket": [[644, "pocket"]], "Pocket.ToString": [[645, "pocket-tostring"]], "Pocket.add_subprocessing": [[646, "pocket-add-subprocessing"]], "Pocket.apply": [[647, "pocket-apply"]], "Pocket.copy": [[648, "pocket-copy"]], "Pocket.from_json": [[649, "pocket-from-json"]], "Pocket.from_jsonstring": [[650, "pocket-from-jsonstring"]], "Pocket.from_shapes_and_element": [[651, "pocket-from-shapes-and-element"]], "Pocket.from_volume_and_element": [[652, "pocket-from-volume-and-element"]], "Pocket.scale": [[653, "pocket-scale"]], "Pocket.scaled": [[654, "pocket-scaled"]], "Pocket.sha256": [[655, "pocket-sha256"]], "Pocket.to_json": [[656, "pocket-to-json"]], "Pocket.to_jsonstring": [[657, "pocket-to-jsonstring"]], "Pocket.validate_data": [[658, "pocket-validate-data"]], "Pocket.volume_from_params_and_element": [[659, "pocket-volume-from-params-and-element"]], "Slot": [[660, "slot"]], "Slot.ToString": [[661, "slot-tostring"]], "Slot.add_subprocessing": [[662, "slot-add-subprocessing"]], "Slot.apply": [[663, "slot-apply"]], "Slot.copy": [[664, "slot-copy"]], "Slot.from_json": [[665, "slot-from-json"]], "Slot.from_jsonstring": [[666, "slot-from-jsonstring"]], "Slot.from_plane_and_beam": [[667, "slot-from-plane-and-beam"]], "Slot.scale": [[668, "slot-scale"]], "Slot.scaled": [[669, "slot-scaled"]], "Slot.sha256": [[670, "slot-sha256"]], "Slot.to_json": [[671, "slot-to-json"]], "Slot.to_jsonstring": [[672, "slot-to-jsonstring"]], "Slot.validate_data": [[673, "slot-validate-data"]], "StepJoint": [[674, "stepjoint"]], "StepJoint.ToString": [[675, "stepjoint-tostring"]], "StepJoint.add_subprocessing": [[676, "stepjoint-add-subprocessing"]], "StepJoint.add_tenon": [[677, "stepjoint-add-tenon"]], "StepJoint.apply": [[678, "stepjoint-apply"]], "StepJoint.copy": [[679, "stepjoint-copy"]], "StepJoint.from_json": [[680, "stepjoint-from-json"]], "StepJoint.from_jsonstring": [[681, "stepjoint-from-jsonstring"]], "StepJoint.from_plane_and_beam": [[682, "stepjoint-from-plane-and-beam"]], "StepJoint.planes_from_params_and_beam": [[683, "stepjoint-planes-from-params-and-beam"]], "StepJoint.scale": [[684, "stepjoint-scale"]], "StepJoint.scaled": [[685, "stepjoint-scaled"]], "StepJoint.sha256": [[686, "stepjoint-sha256"]], "StepJoint.tenon_volume_from_params_and_beam": [[687, "stepjoint-tenon-volume-from-params-and-beam"]], "StepJoint.to_json": [[688, "stepjoint-to-json"]], "StepJoint.to_jsonstring": [[689, "stepjoint-to-jsonstring"]], "StepJoint.validate_data": [[690, "stepjoint-validate-data"]], "StepJointNotch": [[691, "stepjointnotch"]], "StepJointNotch.ToString": [[692, "stepjointnotch-tostring"]], "StepJointNotch.add_mortise": [[693, "stepjointnotch-add-mortise"]], "StepJointNotch.add_subprocessing": [[694, "stepjointnotch-add-subprocessing"]], "StepJointNotch.apply": [[695, "stepjointnotch-apply"]], "StepJointNotch.copy": [[696, "stepjointnotch-copy"]], "StepJointNotch.from_json": [[697, "stepjointnotch-from-json"]], "StepJointNotch.from_jsonstring": [[698, "stepjointnotch-from-jsonstring"]], "StepJointNotch.from_plane_and_beam": [[699, "stepjointnotch-from-plane-and-beam"]], "StepJointNotch.mortise_volume_from_params_and_beam": [[700, "stepjointnotch-mortise-volume-from-params-and-beam"]], "StepJointNotch.planes_from_params_and_beam": [[701, "stepjointnotch-planes-from-params-and-beam"]], "StepJointNotch.scale": [[702, "stepjointnotch-scale"]], "StepJointNotch.scaled": [[703, "stepjointnotch-scaled"]], "StepJointNotch.sha256": [[704, "stepjointnotch-sha256"]], "StepJointNotch.to_json": [[705, "stepjointnotch-to-json"]], "StepJointNotch.to_jsonstring": [[706, "stepjointnotch-to-jsonstring"]], "StepJointNotch.validate_data": [[707, "stepjointnotch-validate-data"]], "StepShapeType": [[708, "stepshapetype"]], "Tenon": [[709, "tenon"]], "Tenon.ToString": [[710, "tenon-tostring"]], "Tenon.add_subprocessing": [[711, "tenon-add-subprocessing"]], "Tenon.apply": [[712, "tenon-apply"]], "Tenon.copy": [[713, "tenon-copy"]], "Tenon.frame_from_params_and_beam": [[714, "tenon-frame-from-params-and-beam"]], "Tenon.from_json": [[715, "tenon-from-json"]], "Tenon.from_jsonstring": [[716, "tenon-from-jsonstring"]], "Tenon.from_plane_and_beam": [[717, "tenon-from-plane-and-beam"]], "Tenon.scale": [[718, "tenon-scale"]], "Tenon.scaled": [[719, "tenon-scaled"]], "Tenon.sha256": [[720, "tenon-sha256"]], "Tenon.to_json": [[721, "tenon-to-json"]], "Tenon.to_jsonstring": [[722, "tenon-to-jsonstring"]], "Tenon.validate_data": [[723, "tenon-validate-data"]], "Tenon.volume_from_params_and_beam": [[724, "tenon-volume-from-params-and-beam"]], "TenonShapeType": [[725, "tenonshapetype"]], "add_gh_param": [[726, "add-gh-param"]], "clear_gh_params": [[727, "clear-gh-params"]], "get_leaf_subclasses": [[728, "get-leaf-subclasses"]], "item_input_valid": [[729, "item-input-valid"]], "list_input_valid": [[730, "list-input-valid"]], "manage_dynamic_params": [[731, "manage-dynamic-params"]], "rename_gh_input": [[732, "rename-gh-input"]], "TimberModel": [[733, "timbermodel"]], "TimberModel.ToString": [[734, "timbermodel-tostring"]], "TimberModel.add_element": [[735, "timbermodel-add-element"]], "TimberModel.add_elements": [[736, "timbermodel-add-elements"]], "TimberModel.add_group": [[737, "timbermodel-add-group"]], "TimberModel.add_group_element": [[738, "timbermodel-add-group-element"]], "TimberModel.add_interaction": [[739, "timbermodel-add-interaction"]], "TimberModel.add_joint": [[740, "timbermodel-add-joint"]], "TimberModel.add_material": [[741, "timbermodel-add-material"]], "TimberModel.assign_material": [[742, "timbermodel-assign-material"]], "TimberModel.compute_aabb": [[743, "timbermodel-compute-aabb"]], "TimberModel.compute_obb": [[744, "timbermodel-compute-obb"]], "TimberModel.connect_adjacent_beams": [[745, "timbermodel-connect-adjacent-beams"]], "TimberModel.connect_adjacent_walls": [[746, "timbermodel-connect-adjacent-walls"]], "TimberModel.copy": [[747, "timbermodel-copy"]], "TimberModel.element_by_guid": [[748, "timbermodel-element-by-guid"]], "TimberModel.elements": [[749, "timbermodel-elements"]], "TimberModel.elements_connected_by": [[750, "timbermodel-elements-connected-by"]], "TimberModel.from_json": [[751, "timbermodel-from-json"]], "TimberModel.from_jsonstring": [[752, "timbermodel-from-jsonstring"]], "TimberModel.get_elements_in_group": [[753, "timbermodel-get-elements-in-group"]], "TimberModel.get_interactions_for_element": [[754, "timbermodel-get-interactions-for-element"]], "TimberModel.has_element": [[755, "timbermodel-has-element"]], "TimberModel.has_group": [[756, "timbermodel-has-group"]], "TimberModel.has_interaction": [[757, "timbermodel-has-interaction"]], "TimberModel.has_material": [[758, "timbermodel-has-material"]], "TimberModel.interactions": [[759, "timbermodel-interactions"]], "TimberModel.materials": [[760, "timbermodel-materials"]], "TimberModel.process_joinery": [[761, "timbermodel-process-joinery"]], "TimberModel.remove_element": [[762, "timbermodel-remove-element"]], "TimberModel.remove_interaction": [[763, "timbermodel-remove-interaction"]], "TimberModel.remove_joint": [[764, "timbermodel-remove-joint"]], "TimberModel.rotate": [[765, "timbermodel-rotate"]], "TimberModel.rotated": [[766, "timbermodel-rotated"]], "TimberModel.scale": [[767, "timbermodel-scale"]], "TimberModel.scaled": [[768, "timbermodel-scaled"]], "TimberModel.set_topologies": [[769, "timbermodel-set-topologies"]], "TimberModel.sha256": [[770, "timbermodel-sha256"]], "TimberModel.to_json": [[771, "timbermodel-to-json"]], "TimberModel.to_jsonstring": [[772, "timbermodel-to-jsonstring"]], "TimberModel.transform": [[773, "timbermodel-transform"]], "TimberModel.transform_numpy": [[774, "timbermodel-transform-numpy"]], "TimberModel.transformed": [[775, "timbermodel-transformed"]], "TimberModel.transformed_numpy": [[776, "timbermodel-transformed-numpy"]], "TimberModel.translate": [[777, "timbermodel-translate"]], "TimberModel.translated": [[778, "timbermodel-translated"]], "TimberModel.validate_data": [[779, "timbermodel-validate-data"]], "Actor": [[780, "actor"]], "Actor.get_name": [[781, "actor-get-name"]], "BuildingPlan": [[782, "buildingplan"]], "BuildingPlan.ToString": [[783, "buildingplan-tostring"]], "BuildingPlan.add_step": [[784, "buildingplan-add-step"]], "BuildingPlan.copy": [[785, "buildingplan-copy"]], "BuildingPlan.from_json": [[786, "buildingplan-from-json"]], "BuildingPlan.from_jsonstring": [[787, "buildingplan-from-jsonstring"]], "BuildingPlan.sha256": [[788, "buildingplan-sha256"]], "BuildingPlan.to_json": [[789, "buildingplan-to-json"]], "BuildingPlan.to_jsonstring": [[790, "buildingplan-to-jsonstring"]], "BuildingPlan.validate_data": [[791, "buildingplan-validate-data"]], "BuildingPlanParser": [[792, "buildingplanparser"]], "BuildingPlanParser.parse": [[793, "buildingplanparser-parse"]], "BuildingPlanParser.serialize": [[794, "buildingplanparser-serialize"]], "Instruction": [[795, "instruction"]], "Instruction.ToString": [[796, "instruction-tostring"]], "Instruction.copy": [[797, "instruction-copy"]], "Instruction.from_json": [[798, "instruction-from-json"]], "Instruction.from_jsonstring": [[799, "instruction-from-jsonstring"]], "Instruction.sha256": [[800, "instruction-sha256"]], "Instruction.to_json": [[801, "instruction-to-json"]], "Instruction.to_jsonstring": [[802, "instruction-to-jsonstring"]], "Instruction.transform": [[803, "instruction-transform"]], "Instruction.validate_data": [[804, "instruction-validate-data"]], "LinearDimension": [[805, "lineardimension"]], "LinearDimension.ToString": [[806, "lineardimension-tostring"]], "LinearDimension.copy": [[807, "lineardimension-copy"]], "LinearDimension.from_json": [[808, "lineardimension-from-json"]], "LinearDimension.from_jsonstring": [[809, "lineardimension-from-jsonstring"]], "LinearDimension.sha256": [[810, "lineardimension-sha256"]], "LinearDimension.to_json": [[811, "lineardimension-to-json"]], "LinearDimension.to_jsonstring": [[812, "lineardimension-to-jsonstring"]], "LinearDimension.transform": [[813, "lineardimension-transform"]], "LinearDimension.validate_data": [[814, "lineardimension-validate-data"]], "Model3d": [[815, "model3d"]], "Model3d.ToString": [[816, "model3d-tostring"]], "Model3d.copy": [[817, "model3d-copy"]], "Model3d.from_json": [[818, "model3d-from-json"]], "Model3d.from_jsonstring": [[819, "model3d-from-jsonstring"]], "Model3d.sha256": [[820, "model3d-sha256"]], "Model3d.to_json": [[821, "model3d-to-json"]], "Model3d.to_jsonstring": [[822, "model3d-to-jsonstring"]], "Model3d.transform": [[823, "model3d-transform"]], "Model3d.validate_data": [[824, "model3d-validate-data"]], "SimpleSequenceGenerator": [[825, "simplesequencegenerator"]], "Step": [[826, "step"]], "Step.ToString": [[827, "step-tostring"]], "Step.copy": [[828, "step-copy"]], "Step.from_json": [[829, "step-from-json"]], "Step.from_jsonstring": [[830, "step-from-jsonstring"]], "Step.sha256": [[831, "step-sha256"]], "Step.to_json": [[832, "step-to-json"]], "Step.to_jsonstring": [[833, "step-to-jsonstring"]], "Step.transform": [[834, "step-transform"]], "Step.validate_data": [[835, "step-validate-data"]], "Text3d": [[836, "text3d"]], "Text3d.ToString": [[837, "text3d-tostring"]], "Text3d.copy": [[838, "text3d-copy"]], "Text3d.from_json": [[839, "text3d-from-json"]], "Text3d.from_jsonstring": [[840, "text3d-from-jsonstring"]], "Text3d.sha256": [[841, "text3d-sha256"]], "Text3d.to_json": [[842, "text3d-to-json"]], "Text3d.to_jsonstring": [[843, "text3d-to-jsonstring"]], "Text3d.transform": [[844, "text3d-transform"]], "Text3d.validate_data": [[845, "text3d-validate-data"]], "Citing": [[847, "citing"]], "Developer Guide": [[848, "developer-guide"]], "BTLx Contribution Guide": [[849, "btlx-contribution-guide"]], "Adding a new BTLx Processing": [[849, "adding-a-new-btlx-processing"]], "1. Identify the BTLx Processing and Parameters": [[849, "identify-the-btlx-processing-and-parameters"]], "2. Create the Processing Class": [[849, "create-the-processing-class"]], "Example:": [[849, "example"], [849, "id1"], [849, "id2"], [850, "example"], [850, "id1"], [850, "id2"]], "3. Add Alternative Constructors in Processing Class": [[849, "add-alternative-constructors-in-processing-class"]], "4. Add Geometry Generation Method in Processing Class": [[849, "add-geometry-generation-method-in-processing-class"]], "5. Update Module Imports": [[849, "update-module-imports"]], "6. Add Tests": [[849, "add-tests"]], "Key Considerations": [[849, "key-considerations"], [850, "key-considerations"]], "Joints Contribution Guide": [[850, "joints-contribution-guide"]], "Creating a New Joint": [[850, "creating-a-new-joint"]], "1. Define Joint Requirements and Analyze Element Relationships": [[850, "define-joint-requirements-and-analyze-element-relationships"]], "2. Create the Joint Class": [[850, "create-the-joint-class"]], "2. Extract Geometric Information": [[850, "extract-geometric-information"]], "3. Implement Core Methods": [[850, "implement-core-methods"]], "4. Update Module Imports": [[850, "update-module-imports"]], "5. Add Tests": [[850, "add-tests"]], "COMPAS Timber Documentation": [[851, "compas-timber-documentation"]], "Dependencies": [[851, "dependencies"]], "Table of Contents": [[851, "table-of-contents"]], "Indices and tables": [[851, "indices-and-tables"]], "Installation": [[852, "installation"]], "User": [[852, "user"]], "Developer": [[852, "developer"]], "License": [[853, "license"]], "Grasshopper plugin": [[854, "grasshopper-plugin"]], "Attributes": [[855, "attributes"]], "Standard Attributes": [[855, "standard-attributes"]], "Custom Attributes": [[855, "custom-attributes"]], "Check Attributes": [[855, "check-attributes"]], "Delete Attributes": [[855, "delete-attributes"]], "Beams": [[856, "beams"]], "DecomposeBeam": [[856, "decomposebeam"]], "FindBeamByRhinoGuid": [[856, "findbeambyrhinoguid"]], "Design": [[857, "design"]], "Surface Model": [[857, "surface-model"]], "Surface Model Options": [[857, "surface-model-options"]], "Custom Beam Dimensions": [[857, "custom-beam-dimensions"]], "Examples": [[858, "examples"]], "Fabrication": [[859, "fabrication"]], "Write BTLx": [[859, "write-btlx"]], "Features": [[860, "features"]], "Jack Rafter Cut Feature": [[860, "jack-rafter-cut-feature"]], "Double Cut Feature": [[860, "double-cut-feature"]], "Drilling Feature": [[860, "drilling-feature"]], "Installation Guide": [[861, "installation-guide"]], "Rhino 8 Installation": [[861, "rhino-8-installation"]], "Rhino 7 Installation": [[861, "rhino-7-installation"]], "Troubleshooting": [[861, "troubleshooting"]], "Joint Rules": [[862, "joint-rules"]], "Joint Rules Components": [[862, "joint-rules-components"]], "Default Joint Rules": [[862, "default-joint-rules"]], "Topological Joint Rules": [[862, "topological-joint-rules"]], "Category Joint Rules": [[862, "category-joint-rules"]], "Direct Joint Rules": [[862, "direct-joint-rules"]], "Surface Model Joint Override": [[862, "surface-model-joint-override"]], "Joint Types": [[862, "joint-types"]], "L-Butt": [[862, "l-butt"]], "L-Lap": [[862, "l-lap"]], "L-Miter": [[862, "l-miter"]], "French Ridge Lap": [[862, "french-ridge-lap"]], "Tenon and Mortise": [[862, "tenon-and-mortise"], [862, "id1"]], "T-Butt": [[862, "t-butt"]], "T-Lap": [[862, "t-lap"]], "T-Step": [[862, "t-step"]], "T-Birdsmouth": [[862, "t-birdsmouth"]], "T-Dovetail": [[862, "t-dovetail"]], "X-Lap": [[862, "x-lap"]], "Summary Table": [[862, "summary-table"]], "Model": [[863, "model"]], "Show": [[864, "show"]], "Show Beam Face Index": [[864, "show-beam-face-index"]], "Show Beam Index": [[864, "show-beam-index"]], "Show Surface Model Beam Types": [[864, "show-surface-model-beam-types"]], "Show Feature Errors": [[864, "show-feature-errors"]], "Show Joining Errors": [[864, "show-joining-errors"]], "Show Joint Types": [[864, "show-joint-types"]], "Show Topology Types": [[864, "show-topology-types"]], "Utils": [[865, "utils"]], "Bake with BoxMap": [[865, "bake-with-boxmap"]], "Workflow": [[866, "workflow"]]}, "indexentries": {"ballnodejoint (class in compas_timber.connections)": [[10, "compas_timber.connections.BallNodeJoint"]], "tostring() (compas_timber.connections.ballnodejoint method)": [[11, "compas_timber.connections.BallNodeJoint.ToString"]], "add_extensions() (compas_timber.connections.ballnodejoint method)": [[12, "compas_timber.connections.BallNodeJoint.add_extensions"]], "add_features() (compas_timber.connections.ballnodejoint method)": [[13, "compas_timber.connections.BallNodeJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ballnodejoint method)": [[14, "compas_timber.connections.BallNodeJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ballnodejoint method)": [[15, "compas_timber.connections.BallNodeJoint.copy"]], "create() (compas_timber.connections.ballnodejoint class method)": [[16, "compas_timber.connections.BallNodeJoint.create"]], "element_count_complies() (compas_timber.connections.ballnodejoint class method)": [[17, "compas_timber.connections.BallNodeJoint.element_count_complies"]], "from_json() (compas_timber.connections.ballnodejoint class method)": [[18, "compas_timber.connections.BallNodeJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ballnodejoint class method)": [[19, "compas_timber.connections.BallNodeJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.ballnodejoint method)": [[20, "compas_timber.connections.BallNodeJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ballnodejoint method)": [[21, "compas_timber.connections.BallNodeJoint.sha256"]], "to_json() (compas_timber.connections.ballnodejoint method)": [[22, "compas_timber.connections.BallNodeJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ballnodejoint method)": [[23, "compas_timber.connections.BallNodeJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ballnodejoint class method)": [[24, "compas_timber.connections.BallNodeJoint.validate_data"]], "beamgroupanalyzer (class in compas_timber.connections)": [[25, "compas_timber.connections.BeamGroupAnalyzer"]], "find() (compas_timber.connections.beamgroupanalyzer method)": [[26, "compas_timber.connections.BeamGroupAnalyzer.find"]], "cluster (class in compas_timber.connections)": [[27, "compas_timber.connections.Cluster"]], "compositeanalyzer (class in compas_timber.connections)": [[28, "compas_timber.connections.CompositeAnalyzer"]], "find() (compas_timber.connections.compositeanalyzer method)": [[29, "compas_timber.connections.CompositeAnalyzer.find"]], "from_model() (compas_timber.connections.compositeanalyzer class method)": [[30, "compas_timber.connections.CompositeAnalyzer.from_model"]], "connectionsolver (class in compas_timber.connections)": [[31, "compas_timber.connections.ConnectionSolver"]], "find_intersecting_pairs() (compas_timber.connections.connectionsolver class method)": [[32, "compas_timber.connections.ConnectionSolver.find_intersecting_pairs"]], "find_topology() (compas_timber.connections.connectionsolver method)": [[33, "compas_timber.connections.ConnectionSolver.find_topology"]], "find_wall_wall_topology() (compas_timber.connections.connectionsolver method)": [[34, "compas_timber.connections.ConnectionSolver.find_wall_wall_topology"]], "joint (class in compas_timber.connections)": [[35, "compas_timber.connections.Joint"]], "tostring() (compas_timber.connections.joint method)": [[36, "compas_timber.connections.Joint.ToString"]], "add_extensions() (compas_timber.connections.joint method)": [[37, "compas_timber.connections.Joint.add_extensions"]], "add_features() (compas_timber.connections.joint method)": [[38, "compas_timber.connections.Joint.add_features"]], "check_elements_compatibility() (compas_timber.connections.joint method)": [[39, "compas_timber.connections.Joint.check_elements_compatibility"]], "copy() (compas_timber.connections.joint method)": [[40, "compas_timber.connections.Joint.copy"]], "create() (compas_timber.connections.joint class method)": [[41, "compas_timber.connections.Joint.create"]], "element_count_complies() (compas_timber.connections.joint class method)": [[42, "compas_timber.connections.Joint.element_count_complies"]], "from_json() (compas_timber.connections.joint class method)": [[43, "compas_timber.connections.Joint.from_json"]], "from_jsonstring() (compas_timber.connections.joint class method)": [[44, "compas_timber.connections.Joint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.joint method)": [[45, "compas_timber.connections.Joint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.joint method)": [[46, "compas_timber.connections.Joint.sha256"]], "to_json() (compas_timber.connections.joint method)": [[47, "compas_timber.connections.Joint.to_json"]], "to_jsonstring() (compas_timber.connections.joint method)": [[48, "compas_timber.connections.Joint.to_jsonstring"]], "validate_data() (compas_timber.connections.joint class method)": [[49, "compas_timber.connections.Joint.validate_data"]], "jointtopology (class in compas_timber.connections)": [[50, "compas_timber.connections.JointTopology"]], "get_name() (compas_timber.connections.jointtopology class method)": [[51, "compas_timber.connections.JointTopology.get_name"]], "lbuttjoint (class in compas_timber.connections)": [[52, "compas_timber.connections.LButtJoint"]], "tostring() (compas_timber.connections.lbuttjoint method)": [[53, "compas_timber.connections.LButtJoint.ToString"]], "add_extensions() (compas_timber.connections.lbuttjoint method)": [[54, "compas_timber.connections.LButtJoint.add_extensions"]], "add_features() (compas_timber.connections.lbuttjoint method)": [[55, "compas_timber.connections.LButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lbuttjoint method)": [[56, "compas_timber.connections.LButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lbuttjoint method)": [[57, "compas_timber.connections.LButtJoint.copy"]], "create() (compas_timber.connections.lbuttjoint class method)": [[58, "compas_timber.connections.LButtJoint.create"]], "element_count_complies() (compas_timber.connections.lbuttjoint class method)": [[59, "compas_timber.connections.LButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.lbuttjoint class method)": [[60, "compas_timber.connections.LButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lbuttjoint class method)": [[61, "compas_timber.connections.LButtJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.lbuttjoint method)": [[62, "compas_timber.connections.LButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lbuttjoint method)": [[63, "compas_timber.connections.LButtJoint.sha256"]], "to_json() (compas_timber.connections.lbuttjoint method)": [[64, "compas_timber.connections.LButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lbuttjoint method)": [[65, "compas_timber.connections.LButtJoint.to_jsonstring"]], "update_beam_roles() (compas_timber.connections.lbuttjoint method)": [[66, "compas_timber.connections.LButtJoint.update_beam_roles"]], "validate_data() (compas_timber.connections.lbuttjoint class method)": [[67, "compas_timber.connections.LButtJoint.validate_data"]], "lfrenchridgelapjoint (class in compas_timber.connections)": [[68, "compas_timber.connections.LFrenchRidgeLapJoint"]], "tostring() (compas_timber.connections.lfrenchridgelapjoint method)": [[69, "compas_timber.connections.LFrenchRidgeLapJoint.ToString"]], "add_extensions() (compas_timber.connections.lfrenchridgelapjoint method)": [[70, "compas_timber.connections.LFrenchRidgeLapJoint.add_extensions"]], "add_features() (compas_timber.connections.lfrenchridgelapjoint method)": [[71, "compas_timber.connections.LFrenchRidgeLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lfrenchridgelapjoint method)": [[72, "compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lfrenchridgelapjoint method)": [[73, "compas_timber.connections.LFrenchRidgeLapJoint.copy"]], "create() (compas_timber.connections.lfrenchridgelapjoint class method)": [[74, "compas_timber.connections.LFrenchRidgeLapJoint.create"]], "element_count_complies() (compas_timber.connections.lfrenchridgelapjoint class method)": [[75, "compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lfrenchridgelapjoint class method)": [[76, "compas_timber.connections.LFrenchRidgeLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lfrenchridgelapjoint class method)": [[77, "compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.lfrenchridgelapjoint method)": [[78, "compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lfrenchridgelapjoint method)": [[79, "compas_timber.connections.LFrenchRidgeLapJoint.sha256"]], "to_json() (compas_timber.connections.lfrenchridgelapjoint method)": [[80, "compas_timber.connections.LFrenchRidgeLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lfrenchridgelapjoint method)": [[81, "compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lfrenchridgelapjoint class method)": [[82, "compas_timber.connections.LFrenchRidgeLapJoint.validate_data"]], "llapjoint (class in compas_timber.connections)": [[83, "compas_timber.connections.LLapJoint"]], "tostring() (compas_timber.connections.llapjoint method)": [[84, "compas_timber.connections.LLapJoint.ToString"]], "add_extensions() (compas_timber.connections.llapjoint method)": [[85, "compas_timber.connections.LLapJoint.add_extensions"]], "add_features() (compas_timber.connections.llapjoint method)": [[86, "compas_timber.connections.LLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.llapjoint method)": [[87, "compas_timber.connections.LLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.llapjoint method)": [[88, "compas_timber.connections.LLapJoint.copy"]], "create() (compas_timber.connections.llapjoint class method)": [[89, "compas_timber.connections.LLapJoint.create"]], "element_count_complies() (compas_timber.connections.llapjoint class method)": [[90, "compas_timber.connections.LLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.llapjoint class method)": [[91, "compas_timber.connections.LLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.llapjoint class method)": [[92, "compas_timber.connections.LLapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.llapjoint method)": [[93, "compas_timber.connections.LLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.llapjoint method)": [[94, "compas_timber.connections.LLapJoint.sha256"]], "to_json() (compas_timber.connections.llapjoint method)": [[95, "compas_timber.connections.LLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.llapjoint method)": [[96, "compas_timber.connections.LLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.llapjoint class method)": [[97, "compas_timber.connections.LLapJoint.validate_data"]], "lmiterjoint (class in compas_timber.connections)": [[98, "compas_timber.connections.LMiterJoint"]], "tostring() (compas_timber.connections.lmiterjoint method)": [[99, "compas_timber.connections.LMiterJoint.ToString"]], "add_extensions() (compas_timber.connections.lmiterjoint method)": [[100, "compas_timber.connections.LMiterJoint.add_extensions"]], "add_features() (compas_timber.connections.lmiterjoint method)": [[101, "compas_timber.connections.LMiterJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lmiterjoint method)": [[102, "compas_timber.connections.LMiterJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lmiterjoint method)": [[103, "compas_timber.connections.LMiterJoint.copy"]], "create() (compas_timber.connections.lmiterjoint class method)": [[104, "compas_timber.connections.LMiterJoint.create"]], "element_count_complies() (compas_timber.connections.lmiterjoint class method)": [[105, "compas_timber.connections.LMiterJoint.element_count_complies"]], "from_json() (compas_timber.connections.lmiterjoint class method)": [[106, "compas_timber.connections.LMiterJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lmiterjoint class method)": [[107, "compas_timber.connections.LMiterJoint.from_jsonstring"]], "get_cutoff_plane() (compas_timber.connections.lmiterjoint method)": [[108, "compas_timber.connections.LMiterJoint.get_cutoff_plane"]], "get_cutting_planes() (compas_timber.connections.lmiterjoint method)": [[109, "compas_timber.connections.LMiterJoint.get_cutting_planes"]], "restore_beams_from_keys() (compas_timber.connections.lmiterjoint method)": [[110, "compas_timber.connections.LMiterJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lmiterjoint method)": [[111, "compas_timber.connections.LMiterJoint.sha256"]], "to_json() (compas_timber.connections.lmiterjoint method)": [[112, "compas_timber.connections.LMiterJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lmiterjoint method)": [[113, "compas_timber.connections.LMiterJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lmiterjoint class method)": [[114, "compas_timber.connections.LMiterJoint.validate_data"]], "lapjoint (class in compas_timber.connections)": [[115, "compas_timber.connections.LapJoint"]], "tostring() (compas_timber.connections.lapjoint method)": [[116, "compas_timber.connections.LapJoint.ToString"]], "add_extensions() (compas_timber.connections.lapjoint method)": [[117, "compas_timber.connections.LapJoint.add_extensions"]], "add_features() (compas_timber.connections.lapjoint method)": [[118, "compas_timber.connections.LapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lapjoint method)": [[119, "compas_timber.connections.LapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lapjoint method)": [[120, "compas_timber.connections.LapJoint.copy"]], "create() (compas_timber.connections.lapjoint class method)": [[121, "compas_timber.connections.LapJoint.create"]], "element_count_complies() (compas_timber.connections.lapjoint class method)": [[122, "compas_timber.connections.LapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lapjoint class method)": [[123, "compas_timber.connections.LapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lapjoint class method)": [[124, "compas_timber.connections.LapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.lapjoint method)": [[125, "compas_timber.connections.LapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lapjoint method)": [[126, "compas_timber.connections.LapJoint.sha256"]], "to_json() (compas_timber.connections.lapjoint method)": [[127, "compas_timber.connections.LapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lapjoint method)": [[128, "compas_timber.connections.LapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lapjoint class method)": [[129, "compas_timber.connections.LapJoint.validate_data"]], "nbeamkdtreeanalyzer (class in compas_timber.connections)": [[130, "compas_timber.connections.NBeamKDTreeAnalyzer"]], "find() (compas_timber.connections.nbeamkdtreeanalyzer method)": [[131, "compas_timber.connections.NBeamKDTreeAnalyzer.find"]], "quadanalyzer() (in module compas_timber.connections)": [[132, "compas_timber.connections.QuadAnalyzer"]], "tbirdsmouthjoint (class in compas_timber.connections)": [[133, "compas_timber.connections.TBirdsmouthJoint"]], "tostring() (compas_timber.connections.tbirdsmouthjoint method)": [[134, "compas_timber.connections.TBirdsmouthJoint.ToString"]], "add_extensions() (compas_timber.connections.tbirdsmouthjoint method)": [[135, "compas_timber.connections.TBirdsmouthJoint.add_extensions"]], "add_features() (compas_timber.connections.tbirdsmouthjoint method)": [[136, "compas_timber.connections.TBirdsmouthJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbirdsmouthjoint method)": [[137, "compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbirdsmouthjoint method)": [[138, "compas_timber.connections.TBirdsmouthJoint.copy"]], "create() (compas_timber.connections.tbirdsmouthjoint class method)": [[139, "compas_timber.connections.TBirdsmouthJoint.create"]], "element_count_complies() (compas_timber.connections.tbirdsmouthjoint class method)": [[140, "compas_timber.connections.TBirdsmouthJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbirdsmouthjoint class method)": [[141, "compas_timber.connections.TBirdsmouthJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbirdsmouthjoint class method)": [[142, "compas_timber.connections.TBirdsmouthJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tbirdsmouthjoint method)": [[143, "compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbirdsmouthjoint method)": [[144, "compas_timber.connections.TBirdsmouthJoint.sha256"]], "to_json() (compas_timber.connections.tbirdsmouthjoint method)": [[145, "compas_timber.connections.TBirdsmouthJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbirdsmouthjoint method)": [[146, "compas_timber.connections.TBirdsmouthJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbirdsmouthjoint class method)": [[147, "compas_timber.connections.TBirdsmouthJoint.validate_data"]], "tbuttjoint (class in compas_timber.connections)": [[148, "compas_timber.connections.TButtJoint"]], "tostring() (compas_timber.connections.tbuttjoint method)": [[149, "compas_timber.connections.TButtJoint.ToString"]], "add_extensions() (compas_timber.connections.tbuttjoint method)": [[150, "compas_timber.connections.TButtJoint.add_extensions"]], "add_features() (compas_timber.connections.tbuttjoint method)": [[151, "compas_timber.connections.TButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbuttjoint method)": [[152, "compas_timber.connections.TButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbuttjoint method)": [[153, "compas_timber.connections.TButtJoint.copy"]], "create() (compas_timber.connections.tbuttjoint class method)": [[154, "compas_timber.connections.TButtJoint.create"]], "element_count_complies() (compas_timber.connections.tbuttjoint class method)": [[155, "compas_timber.connections.TButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbuttjoint class method)": [[156, "compas_timber.connections.TButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbuttjoint class method)": [[157, "compas_timber.connections.TButtJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tbuttjoint method)": [[158, "compas_timber.connections.TButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbuttjoint method)": [[159, "compas_timber.connections.TButtJoint.sha256"]], "to_json() (compas_timber.connections.tbuttjoint method)": [[160, "compas_timber.connections.TButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbuttjoint method)": [[161, "compas_timber.connections.TButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbuttjoint class method)": [[162, "compas_timber.connections.TButtJoint.validate_data"]], "tdovetailjoint (class in compas_timber.connections)": [[163, "compas_timber.connections.TDovetailJoint"]], "tostring() (compas_timber.connections.tdovetailjoint method)": [[164, "compas_timber.connections.TDovetailJoint.ToString"]], "add_extensions() (compas_timber.connections.tdovetailjoint method)": [[165, "compas_timber.connections.TDovetailJoint.add_extensions"]], "add_features() (compas_timber.connections.tdovetailjoint method)": [[166, "compas_timber.connections.TDovetailJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tdovetailjoint method)": [[167, "compas_timber.connections.TDovetailJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tdovetailjoint method)": [[168, "compas_timber.connections.TDovetailJoint.copy"]], "create() (compas_timber.connections.tdovetailjoint class method)": [[169, "compas_timber.connections.TDovetailJoint.create"]], "define_dovetail_tool() (compas_timber.connections.tdovetailjoint method)": [[170, "compas_timber.connections.TDovetailJoint.define_dovetail_tool"]], "element_count_complies() (compas_timber.connections.tdovetailjoint class method)": [[171, "compas_timber.connections.TDovetailJoint.element_count_complies"]], "from_json() (compas_timber.connections.tdovetailjoint class method)": [[172, "compas_timber.connections.TDovetailJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tdovetailjoint class method)": [[173, "compas_timber.connections.TDovetailJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tdovetailjoint method)": [[174, "compas_timber.connections.TDovetailJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tdovetailjoint method)": [[175, "compas_timber.connections.TDovetailJoint.sha256"]], "to_json() (compas_timber.connections.tdovetailjoint method)": [[176, "compas_timber.connections.TDovetailJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tdovetailjoint method)": [[177, "compas_timber.connections.TDovetailJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tdovetailjoint class method)": [[178, "compas_timber.connections.TDovetailJoint.validate_data"]], "tlapjoint (class in compas_timber.connections)": [[179, "compas_timber.connections.TLapJoint"]], "tostring() (compas_timber.connections.tlapjoint method)": [[180, "compas_timber.connections.TLapJoint.ToString"]], "add_extensions() (compas_timber.connections.tlapjoint method)": [[181, "compas_timber.connections.TLapJoint.add_extensions"]], "add_features() (compas_timber.connections.tlapjoint method)": [[182, "compas_timber.connections.TLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tlapjoint method)": [[183, "compas_timber.connections.TLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tlapjoint method)": [[184, "compas_timber.connections.TLapJoint.copy"]], "create() (compas_timber.connections.tlapjoint class method)": [[185, "compas_timber.connections.TLapJoint.create"]], "element_count_complies() (compas_timber.connections.tlapjoint class method)": [[186, "compas_timber.connections.TLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.tlapjoint class method)": [[187, "compas_timber.connections.TLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tlapjoint class method)": [[188, "compas_timber.connections.TLapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tlapjoint method)": [[189, "compas_timber.connections.TLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tlapjoint method)": [[190, "compas_timber.connections.TLapJoint.sha256"]], "to_json() (compas_timber.connections.tlapjoint method)": [[191, "compas_timber.connections.TLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tlapjoint method)": [[192, "compas_timber.connections.TLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tlapjoint class method)": [[193, "compas_timber.connections.TLapJoint.validate_data"]], "tstepjoint (class in compas_timber.connections)": [[194, "compas_timber.connections.TStepJoint"]], "tostring() (compas_timber.connections.tstepjoint method)": [[195, "compas_timber.connections.TStepJoint.ToString"]], "add_extensions() (compas_timber.connections.tstepjoint method)": [[196, "compas_timber.connections.TStepJoint.add_extensions"]], "add_features() (compas_timber.connections.tstepjoint method)": [[197, "compas_timber.connections.TStepJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tstepjoint method)": [[198, "compas_timber.connections.TStepJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tstepjoint method)": [[199, "compas_timber.connections.TStepJoint.copy"]], "create() (compas_timber.connections.tstepjoint class method)": [[200, "compas_timber.connections.TStepJoint.create"]], "element_count_complies() (compas_timber.connections.tstepjoint class method)": [[201, "compas_timber.connections.TStepJoint.element_count_complies"]], "from_json() (compas_timber.connections.tstepjoint class method)": [[202, "compas_timber.connections.TStepJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tstepjoint class method)": [[203, "compas_timber.connections.TStepJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tstepjoint method)": [[204, "compas_timber.connections.TStepJoint.restore_beams_from_keys"]], "set_step_depths() (compas_timber.connections.tstepjoint method)": [[205, "compas_timber.connections.TStepJoint.set_step_depths"]], "sha256() (compas_timber.connections.tstepjoint method)": [[206, "compas_timber.connections.TStepJoint.sha256"]], "to_json() (compas_timber.connections.tstepjoint method)": [[207, "compas_timber.connections.TStepJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tstepjoint method)": [[208, "compas_timber.connections.TStepJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tstepjoint class method)": [[209, "compas_timber.connections.TStepJoint.validate_data"]], "tenonmortisejoint (class in compas_timber.connections)": [[210, "compas_timber.connections.TenonMortiseJoint"]], "tostring() (compas_timber.connections.tenonmortisejoint method)": [[211, "compas_timber.connections.TenonMortiseJoint.ToString"]], "add_extensions() (compas_timber.connections.tenonmortisejoint method)": [[212, "compas_timber.connections.TenonMortiseJoint.add_extensions"]], "add_features() (compas_timber.connections.tenonmortisejoint method)": [[213, "compas_timber.connections.TenonMortiseJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tenonmortisejoint method)": [[214, "compas_timber.connections.TenonMortiseJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tenonmortisejoint method)": [[215, "compas_timber.connections.TenonMortiseJoint.copy"]], "create() (compas_timber.connections.tenonmortisejoint class method)": [[216, "compas_timber.connections.TenonMortiseJoint.create"]], "element_count_complies() (compas_timber.connections.tenonmortisejoint class method)": [[217, "compas_timber.connections.TenonMortiseJoint.element_count_complies"]], "from_json() (compas_timber.connections.tenonmortisejoint class method)": [[218, "compas_timber.connections.TenonMortiseJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tenonmortisejoint class method)": [[219, "compas_timber.connections.TenonMortiseJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tenonmortisejoint method)": [[220, "compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys"]], "set_default_values() (compas_timber.connections.tenonmortisejoint method)": [[221, "compas_timber.connections.TenonMortiseJoint.set_default_values"]], "sha256() (compas_timber.connections.tenonmortisejoint method)": [[222, "compas_timber.connections.TenonMortiseJoint.sha256"]], "to_json() (compas_timber.connections.tenonmortisejoint method)": [[223, "compas_timber.connections.TenonMortiseJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tenonmortisejoint method)": [[224, "compas_timber.connections.TenonMortiseJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tenonmortisejoint class method)": [[225, "compas_timber.connections.TenonMortiseJoint.validate_data"]], "tripletanalyzer() (in module compas_timber.connections)": [[226, "compas_timber.connections.TripletAnalyzer"]], "xlapjoint (class in compas_timber.connections)": [[227, "compas_timber.connections.XLapJoint"]], "tostring() (compas_timber.connections.xlapjoint method)": [[228, "compas_timber.connections.XLapJoint.ToString"]], "add_extensions() (compas_timber.connections.xlapjoint method)": [[229, "compas_timber.connections.XLapJoint.add_extensions"]], "add_features() (compas_timber.connections.xlapjoint method)": [[230, "compas_timber.connections.XLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xlapjoint method)": [[231, "compas_timber.connections.XLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xlapjoint method)": [[232, "compas_timber.connections.XLapJoint.copy"]], "create() (compas_timber.connections.xlapjoint class method)": [[233, "compas_timber.connections.XLapJoint.create"]], "element_count_complies() (compas_timber.connections.xlapjoint class method)": [[234, "compas_timber.connections.XLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.xlapjoint class method)": [[235, "compas_timber.connections.XLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xlapjoint class method)": [[236, "compas_timber.connections.XLapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.xlapjoint method)": [[237, "compas_timber.connections.XLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xlapjoint method)": [[238, "compas_timber.connections.XLapJoint.sha256"]], "to_json() (compas_timber.connections.xlapjoint method)": [[239, "compas_timber.connections.XLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xlapjoint method)": [[240, "compas_timber.connections.XLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xlapjoint class method)": [[241, "compas_timber.connections.XLapJoint.validate_data"]], "xnotchjoint (class in compas_timber.connections)": [[242, "compas_timber.connections.XNotchJoint"]], "tostring() (compas_timber.connections.xnotchjoint method)": [[243, "compas_timber.connections.XNotchJoint.ToString"]], "add_extensions() (compas_timber.connections.xnotchjoint method)": [[244, "compas_timber.connections.XNotchJoint.add_extensions"]], "add_features() (compas_timber.connections.xnotchjoint method)": [[245, "compas_timber.connections.XNotchJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xnotchjoint method)": [[246, "compas_timber.connections.XNotchJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xnotchjoint method)": [[247, "compas_timber.connections.XNotchJoint.copy"]], "create() (compas_timber.connections.xnotchjoint class method)": [[248, "compas_timber.connections.XNotchJoint.create"]], "element_count_complies() (compas_timber.connections.xnotchjoint class method)": [[249, "compas_timber.connections.XNotchJoint.element_count_complies"]], "from_json() (compas_timber.connections.xnotchjoint class method)": [[250, "compas_timber.connections.XNotchJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xnotchjoint class method)": [[251, "compas_timber.connections.XNotchJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.xnotchjoint method)": [[252, "compas_timber.connections.XNotchJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xnotchjoint method)": [[253, "compas_timber.connections.XNotchJoint.sha256"]], "to_json() (compas_timber.connections.xnotchjoint method)": [[254, "compas_timber.connections.XNotchJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xnotchjoint method)": [[255, "compas_timber.connections.XNotchJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xnotchjoint class method)": [[256, "compas_timber.connections.XNotchJoint.validate_data"]], "ybuttjoint (class in compas_timber.connections)": [[257, "compas_timber.connections.YButtJoint"]], "tostring() (compas_timber.connections.ybuttjoint method)": [[258, "compas_timber.connections.YButtJoint.ToString"]], "add_extensions() (compas_timber.connections.ybuttjoint method)": [[259, "compas_timber.connections.YButtJoint.add_extensions"]], "add_features() (compas_timber.connections.ybuttjoint method)": [[260, "compas_timber.connections.YButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ybuttjoint method)": [[261, "compas_timber.connections.YButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ybuttjoint method)": [[262, "compas_timber.connections.YButtJoint.copy"]], "create() (compas_timber.connections.ybuttjoint class method)": [[263, "compas_timber.connections.YButtJoint.create"]], "cross_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[264, "compas_timber.connections.YButtJoint.cross_beam_ref_side_index"]], "element_count_complies() (compas_timber.connections.ybuttjoint class method)": [[265, "compas_timber.connections.YButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.ybuttjoint class method)": [[266, "compas_timber.connections.YButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ybuttjoint class method)": [[267, "compas_timber.connections.YButtJoint.from_jsonstring"]], "get_miter_planes() (compas_timber.connections.ybuttjoint method)": [[268, "compas_timber.connections.YButtJoint.get_miter_planes"]], "main_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[269, "compas_timber.connections.YButtJoint.main_beam_ref_side_index"]], "restore_beams_from_keys() (compas_timber.connections.ybuttjoint method)": [[270, "compas_timber.connections.YButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ybuttjoint method)": [[271, "compas_timber.connections.YButtJoint.sha256"]], "to_json() (compas_timber.connections.ybuttjoint method)": [[272, "compas_timber.connections.YButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ybuttjoint method)": [[273, "compas_timber.connections.YButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ybuttjoint class method)": [[274, "compas_timber.connections.YButtJoint.validate_data"]], "find_neighboring_elements() (in module compas_timber.connections)": [[275, "compas_timber.connections.find_neighboring_elements"]], "categoryrule (class in compas_timber.design)": [[276, "compas_timber.design.CategoryRule"]], "tostring() (compas_timber.design.categoryrule method)": [[277, "compas_timber.design.CategoryRule.ToString"]], "comply() (compas_timber.design.categoryrule method)": [[278, "compas_timber.design.CategoryRule.comply"]], "get_category_rules() (compas_timber.design.categoryrule static method)": [[279, "compas_timber.design.CategoryRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.categoryrule static method)": [[280, "compas_timber.design.CategoryRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.categoryrule static method)": [[281, "compas_timber.design.CategoryRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.categoryrule static method)": [[282, "compas_timber.design.CategoryRule.joints_from_beams_and_rules"]], "reorder() (compas_timber.design.categoryrule method)": [[283, "compas_timber.design.CategoryRule.reorder"]], "debuginfomation (class in compas_timber.design)": [[284, "compas_timber.design.DebugInfomation"]], "tostring() (compas_timber.design.debuginfomation method)": [[285, "compas_timber.design.DebugInfomation.ToString"]], "add_fastener_error() (compas_timber.design.debuginfomation method)": [[286, "compas_timber.design.DebugInfomation.add_fastener_error"]], "add_feature_error() (compas_timber.design.debuginfomation method)": [[287, "compas_timber.design.DebugInfomation.add_feature_error"]], "add_joint_error() (compas_timber.design.debuginfomation method)": [[288, "compas_timber.design.DebugInfomation.add_joint_error"]], "directrule (class in compas_timber.design)": [[289, "compas_timber.design.DirectRule"]], "tostring() (compas_timber.design.directrule method)": [[290, "compas_timber.design.DirectRule.ToString"]], "comply() (compas_timber.design.directrule method)": [[291, "compas_timber.design.DirectRule.comply"]], "contains() (compas_timber.design.directrule method)": [[292, "compas_timber.design.DirectRule.contains"]], "get_category_rules() (compas_timber.design.directrule static method)": [[293, "compas_timber.design.DirectRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.directrule static method)": [[294, "compas_timber.design.DirectRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.directrule static method)": [[295, "compas_timber.design.DirectRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.directrule static method)": [[296, "compas_timber.design.DirectRule.joints_from_beams_and_rules"]], "featuredefinition (class in compas_timber.design)": [[297, "compas_timber.design.FeatureDefinition"]], "tostring() (compas_timber.design.featuredefinition method)": [[298, "compas_timber.design.FeatureDefinition.ToString"]], "jointdefinition (class in compas_timber.design)": [[299, "compas_timber.design.JointDefinition"]], "tostring() (compas_timber.design.jointdefinition method)": [[300, "compas_timber.design.JointDefinition.ToString"]], "is_identical() (compas_timber.design.jointdefinition method)": [[301, "compas_timber.design.JointDefinition.is_identical"]], "match() (compas_timber.design.jointdefinition method)": [[302, "compas_timber.design.JointDefinition.match"]], "jointrule (class in compas_timber.design)": [[303, "compas_timber.design.JointRule"]], "comply() (compas_timber.design.jointrule method)": [[304, "compas_timber.design.JointRule.comply"]], "get_category_rules() (compas_timber.design.jointrule static method)": [[305, "compas_timber.design.JointRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.jointrule static method)": [[306, "compas_timber.design.JointRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.jointrule static method)": [[307, "compas_timber.design.JointRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.jointrule static method)": [[308, "compas_timber.design.JointRule.joints_from_beams_and_rules"]], "surfacemodel (class in compas_timber.design)": [[309, "compas_timber.design.SurfaceModel"]], "beam_category_names() (compas_timber.design.surfacemodel class method)": [[310, "compas_timber.design.SurfaceModel.beam_category_names"]], "create_model() (compas_timber.design.surfacemodel method)": [[311, "compas_timber.design.SurfaceModel.create_model"]], "cull_overlaps() (compas_timber.design.surfacemodel method)": [[312, "compas_timber.design.SurfaceModel.cull_overlaps"]], "distance_between_elements() (compas_timber.design.surfacemodel method)": [[313, "compas_timber.design.SurfaceModel.distance_between_elements"]], "generate_frame() (compas_timber.design.surfacemodel method)": [[314, "compas_timber.design.SurfaceModel.generate_frame"]], "generate_perimeter_beams() (compas_timber.design.surfacemodel method)": [[315, "compas_timber.design.SurfaceModel.generate_perimeter_beams"]], "generate_plates() (compas_timber.design.surfacemodel method)": [[316, "compas_timber.design.SurfaceModel.generate_plates"]], "generate_stud_lines() (compas_timber.design.surfacemodel method)": [[317, "compas_timber.design.SurfaceModel.generate_stud_lines"]], "generate_studs() (compas_timber.design.surfacemodel method)": [[318, "compas_timber.design.SurfaceModel.generate_studs"]], "generate_windows() (compas_timber.design.surfacemodel method)": [[319, "compas_timber.design.SurfaceModel.generate_windows"]], "get_beam_intersections() (compas_timber.design.surfacemodel method)": [[320, "compas_timber.design.SurfaceModel.get_beam_intersections"]], "get_interior_segment_indices() (compas_timber.design.surfacemodel method)": [[321, "compas_timber.design.SurfaceModel.get_interior_segment_indices"]], "offset_elements() (compas_timber.design.surfacemodel method)": [[322, "compas_timber.design.SurfaceModel.offset_elements"]], "parse_loops() (compas_timber.design.surfacemodel method)": [[323, "compas_timber.design.SurfaceModel.parse_loops"]], "trim_jack_studs() (compas_timber.design.surfacemodel method)": [[324, "compas_timber.design.SurfaceModel.trim_jack_studs"]], "trim_king_studs() (compas_timber.design.surfacemodel method)": [[325, "compas_timber.design.SurfaceModel.trim_king_studs"]], "trim_studs() (compas_timber.design.surfacemodel method)": [[326, "compas_timber.design.SurfaceModel.trim_studs"]], "topologyrule (class in compas_timber.design)": [[327, "compas_timber.design.TopologyRule"]], "tostring() (compas_timber.design.topologyrule method)": [[328, "compas_timber.design.TopologyRule.ToString"]], "comply() (compas_timber.design.topologyrule method)": [[329, "compas_timber.design.TopologyRule.comply"]], "get_category_rules() (compas_timber.design.topologyrule static method)": [[330, "compas_timber.design.TopologyRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.topologyrule static method)": [[331, "compas_timber.design.TopologyRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.topologyrule static method)": [[332, "compas_timber.design.TopologyRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.topologyrule static method)": [[333, "compas_timber.design.TopologyRule.joints_from_beams_and_rules"]], "guess_joint_topology_2beams() (in module compas_timber.design)": [[334, "compas_timber.design.guess_joint_topology_2beams"]], "set_default_joints() (in module compas_timber.design)": [[335, "compas_timber.design.set_default_joints"]], "beam (class in compas_timber.elements)": [[336, "compas_timber.elements.Beam"]], "tostring() (compas_timber.elements.beam method)": [[337, "compas_timber.elements.Beam.ToString"]], "add_blank_extension() (compas_timber.elements.beam method)": [[338, "compas_timber.elements.Beam.add_blank_extension"]], "add_feature() (compas_timber.elements.beam method)": [[339, "compas_timber.elements.Beam.add_feature"]], "add_features() (compas_timber.elements.beam method)": [[340, "compas_timber.elements.Beam.add_features"]], "back_side() (compas_timber.elements.beam method)": [[341, "compas_timber.elements.Beam.back_side"]], "compute_aabb() (compas_timber.elements.beam method)": [[342, "compas_timber.elements.Beam.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.beam method)": [[343, "compas_timber.elements.Beam.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.beam method)": [[344, "compas_timber.elements.Beam.compute_geometry"]], "compute_obb() (compas_timber.elements.beam method)": [[345, "compas_timber.elements.Beam.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.beam method)": [[346, "compas_timber.elements.Beam.compute_worldtransformation"]], "copy() (compas_timber.elements.beam method)": [[347, "compas_timber.elements.Beam.copy"]], "endpoint_closest_to_point() (compas_timber.elements.beam method)": [[348, "compas_timber.elements.Beam.endpoint_closest_to_point"]], "extension_to_plane() (compas_timber.elements.beam method)": [[349, "compas_timber.elements.Beam.extension_to_plane"]], "from_centerline() (compas_timber.elements.beam class method)": [[350, "compas_timber.elements.Beam.from_centerline"]], "from_endpoints() (compas_timber.elements.beam class method)": [[351, "compas_timber.elements.Beam.from_endpoints"]], "from_json() (compas_timber.elements.beam class method)": [[352, "compas_timber.elements.Beam.from_json"]], "from_jsonstring() (compas_timber.elements.beam class method)": [[353, "compas_timber.elements.Beam.from_jsonstring"]], "front_side() (compas_timber.elements.beam method)": [[354, "compas_timber.elements.Beam.front_side"]], "get_dimensions_relative_to_side() (compas_timber.elements.beam method)": [[355, "compas_timber.elements.Beam.get_dimensions_relative_to_side"]], "opp_side() (compas_timber.elements.beam method)": [[356, "compas_timber.elements.Beam.opp_side"]], "remove_blank_extension() (compas_timber.elements.beam method)": [[357, "compas_timber.elements.Beam.remove_blank_extension"]], "remove_features() (compas_timber.elements.beam method)": [[358, "compas_timber.elements.Beam.remove_features"]], "reset() (compas_timber.elements.beam method)": [[359, "compas_timber.elements.Beam.reset"]], "sha256() (compas_timber.elements.beam method)": [[360, "compas_timber.elements.Beam.sha256"]], "side_as_surface() (compas_timber.elements.beam method)": [[361, "compas_timber.elements.Beam.side_as_surface"]], "to_json() (compas_timber.elements.beam method)": [[362, "compas_timber.elements.Beam.to_json"]], "to_jsonstring() (compas_timber.elements.beam method)": [[363, "compas_timber.elements.Beam.to_jsonstring"]], "transform() (compas_timber.elements.beam method)": [[364, "compas_timber.elements.Beam.transform"]], "transformed() (compas_timber.elements.beam method)": [[365, "compas_timber.elements.Beam.transformed"]], "validate_data() (compas_timber.elements.beam class method)": [[366, "compas_timber.elements.Beam.validate_data"]], "fastener (class in compas_timber.elements)": [[367, "compas_timber.elements.Fastener"]], "tostring() (compas_timber.elements.fastener method)": [[368, "compas_timber.elements.Fastener.ToString"]], "add_feature() (compas_timber.elements.fastener method)": [[369, "compas_timber.elements.Fastener.add_feature"]], "add_features() (compas_timber.elements.fastener method)": [[370, "compas_timber.elements.Fastener.add_features"]], "compute_aabb() (compas_timber.elements.fastener method)": [[371, "compas_timber.elements.Fastener.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.fastener method)": [[372, "compas_timber.elements.Fastener.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.fastener method)": [[373, "compas_timber.elements.Fastener.compute_geometry"]], "compute_obb() (compas_timber.elements.fastener method)": [[374, "compas_timber.elements.Fastener.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.fastener method)": [[375, "compas_timber.elements.Fastener.compute_worldtransformation"]], "copy() (compas_timber.elements.fastener method)": [[376, "compas_timber.elements.Fastener.copy"]], "from_json() (compas_timber.elements.fastener class method)": [[377, "compas_timber.elements.Fastener.from_json"]], "from_jsonstring() (compas_timber.elements.fastener class method)": [[378, "compas_timber.elements.Fastener.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.fastener method)": [[379, "compas_timber.elements.Fastener.remove_blank_extension"]], "remove_features() (compas_timber.elements.fastener method)": [[380, "compas_timber.elements.Fastener.remove_features"]], "reset() (compas_timber.elements.fastener method)": [[381, "compas_timber.elements.Fastener.reset"]], "sha256() (compas_timber.elements.fastener method)": [[382, "compas_timber.elements.Fastener.sha256"]], "to_json() (compas_timber.elements.fastener method)": [[383, "compas_timber.elements.Fastener.to_json"]], "to_jsonstring() (compas_timber.elements.fastener method)": [[384, "compas_timber.elements.Fastener.to_jsonstring"]], "transform() (compas_timber.elements.fastener method)": [[385, "compas_timber.elements.Fastener.transform"]], "transformed() (compas_timber.elements.fastener method)": [[386, "compas_timber.elements.Fastener.transformed"]], "validate_data() (compas_timber.elements.fastener class method)": [[387, "compas_timber.elements.Fastener.validate_data"]], "fastenertimberinterface (class in compas_timber.elements)": [[388, "compas_timber.elements.FastenerTimberInterface"]], "tostring() (compas_timber.elements.fastenertimberinterface method)": [[389, "compas_timber.elements.FastenerTimberInterface.ToString"]], "copy() (compas_timber.elements.fastenertimberinterface method)": [[390, "compas_timber.elements.FastenerTimberInterface.copy"]], "from_json() (compas_timber.elements.fastenertimberinterface class method)": [[391, "compas_timber.elements.FastenerTimberInterface.from_json"]], "from_jsonstring() (compas_timber.elements.fastenertimberinterface class method)": [[392, "compas_timber.elements.FastenerTimberInterface.from_jsonstring"]], "get_features() (compas_timber.elements.fastenertimberinterface method)": [[393, "compas_timber.elements.FastenerTimberInterface.get_features"]], "sha256() (compas_timber.elements.fastenertimberinterface method)": [[394, "compas_timber.elements.FastenerTimberInterface.sha256"]], "to_json() (compas_timber.elements.fastenertimberinterface method)": [[395, "compas_timber.elements.FastenerTimberInterface.to_json"]], "to_jsonstring() (compas_timber.elements.fastenertimberinterface method)": [[396, "compas_timber.elements.FastenerTimberInterface.to_jsonstring"]], "validate_data() (compas_timber.elements.fastenertimberinterface class method)": [[397, "compas_timber.elements.FastenerTimberInterface.validate_data"]], "plate (class in compas_timber.elements)": [[398, "compas_timber.elements.Plate"]], "tostring() (compas_timber.elements.plate method)": [[399, "compas_timber.elements.Plate.ToString"]], "add_feature() (compas_timber.elements.plate method)": [[400, "compas_timber.elements.Plate.add_feature"]], "add_features() (compas_timber.elements.plate method)": [[401, "compas_timber.elements.Plate.add_features"]], "add_interface() (compas_timber.elements.plate method)": [[402, "compas_timber.elements.Plate.add_interface"]], "check_outlines() (compas_timber.elements.plate method)": [[403, "compas_timber.elements.Plate.check_outlines"]], "compute_aabb() (compas_timber.elements.plate method)": [[404, "compas_timber.elements.Plate.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.plate method)": [[405, "compas_timber.elements.Plate.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.plate method)": [[406, "compas_timber.elements.Plate.compute_geometry"]], "compute_obb() (compas_timber.elements.plate method)": [[407, "compas_timber.elements.Plate.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.plate method)": [[408, "compas_timber.elements.Plate.compute_worldtransformation"]], "copy() (compas_timber.elements.plate method)": [[409, "compas_timber.elements.Plate.copy"]], "from_brep() (compas_timber.elements.plate class method)": [[410, "compas_timber.elements.Plate.from_brep"]], "from_json() (compas_timber.elements.plate class method)": [[411, "compas_timber.elements.Plate.from_json"]], "from_jsonstring() (compas_timber.elements.plate class method)": [[412, "compas_timber.elements.Plate.from_jsonstring"]], "from_outline_thickness() (compas_timber.elements.plate class method)": [[413, "compas_timber.elements.Plate.from_outline_thickness"]], "opp_side() (compas_timber.elements.plate method)": [[414, "compas_timber.elements.Plate.opp_side"]], "remove_blank_extension() (compas_timber.elements.plate method)": [[415, "compas_timber.elements.Plate.remove_blank_extension"]], "remove_features() (compas_timber.elements.plate method)": [[416, "compas_timber.elements.Plate.remove_features"]], "reset() (compas_timber.elements.plate method)": [[417, "compas_timber.elements.Plate.reset"]], "sha256() (compas_timber.elements.plate method)": [[418, "compas_timber.elements.Plate.sha256"]], "side_as_surface() (compas_timber.elements.plate method)": [[419, "compas_timber.elements.Plate.side_as_surface"]], "to_json() (compas_timber.elements.plate method)": [[420, "compas_timber.elements.Plate.to_json"]], "to_jsonstring() (compas_timber.elements.plate method)": [[421, "compas_timber.elements.Plate.to_jsonstring"]], "transform() (compas_timber.elements.plate method)": [[422, "compas_timber.elements.Plate.transform"]], "transformed() (compas_timber.elements.plate method)": [[423, "compas_timber.elements.Plate.transformed"]], "validate_data() (compas_timber.elements.plate class method)": [[424, "compas_timber.elements.Plate.validate_data"]], "timberelement (class in compas_timber.elements)": [[425, "compas_timber.elements.TimberElement"]], "tostring() (compas_timber.elements.timberelement method)": [[426, "compas_timber.elements.TimberElement.ToString"]], "add_feature() (compas_timber.elements.timberelement method)": [[427, "compas_timber.elements.TimberElement.add_feature"]], "add_features() (compas_timber.elements.timberelement method)": [[428, "compas_timber.elements.TimberElement.add_features"]], "compute_aabb() (compas_timber.elements.timberelement method)": [[429, "compas_timber.elements.TimberElement.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.timberelement method)": [[430, "compas_timber.elements.TimberElement.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.timberelement method)": [[431, "compas_timber.elements.TimberElement.compute_geometry"]], "compute_obb() (compas_timber.elements.timberelement method)": [[432, "compas_timber.elements.TimberElement.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.timberelement method)": [[433, "compas_timber.elements.TimberElement.compute_worldtransformation"]], "copy() (compas_timber.elements.timberelement method)": [[434, "compas_timber.elements.TimberElement.copy"]], "from_json() (compas_timber.elements.timberelement class method)": [[435, "compas_timber.elements.TimberElement.from_json"]], "from_jsonstring() (compas_timber.elements.timberelement class method)": [[436, "compas_timber.elements.TimberElement.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.timberelement method)": [[437, "compas_timber.elements.TimberElement.remove_blank_extension"]], "remove_features() (compas_timber.elements.timberelement method)": [[438, "compas_timber.elements.TimberElement.remove_features"]], "reset() (compas_timber.elements.timberelement method)": [[439, "compas_timber.elements.TimberElement.reset"]], "sha256() (compas_timber.elements.timberelement method)": [[440, "compas_timber.elements.TimberElement.sha256"]], "to_json() (compas_timber.elements.timberelement method)": [[441, "compas_timber.elements.TimberElement.to_json"]], "to_jsonstring() (compas_timber.elements.timberelement method)": [[442, "compas_timber.elements.TimberElement.to_jsonstring"]], "transform() (compas_timber.elements.timberelement method)": [[443, "compas_timber.elements.TimberElement.transform"]], "transformed() (compas_timber.elements.timberelement method)": [[444, "compas_timber.elements.TimberElement.transformed"]], "validate_data() (compas_timber.elements.timberelement class method)": [[445, "compas_timber.elements.TimberElement.validate_data"]], "wall (class in compas_timber.elements)": [[446, "compas_timber.elements.Wall"]], "tostring() (compas_timber.elements.wall method)": [[447, "compas_timber.elements.Wall.ToString"]], "add_feature() (compas_timber.elements.wall method)": [[448, "compas_timber.elements.Wall.add_feature"]], "add_features() (compas_timber.elements.wall method)": [[449, "compas_timber.elements.Wall.add_features"]], "compute_aabb() (compas_timber.elements.wall method)": [[450, "compas_timber.elements.Wall.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.wall method)": [[451, "compas_timber.elements.Wall.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.wall method)": [[452, "compas_timber.elements.Wall.compute_geometry"]], "compute_obb() (compas_timber.elements.wall method)": [[453, "compas_timber.elements.Wall.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.wall method)": [[454, "compas_timber.elements.Wall.compute_worldtransformation"]], "copy() (compas_timber.elements.wall method)": [[455, "compas_timber.elements.Wall.copy"]], "from_boundary() (compas_timber.elements.wall class method)": [[456, "compas_timber.elements.Wall.from_boundary"]], "from_brep() (compas_timber.elements.wall class method)": [[457, "compas_timber.elements.Wall.from_brep"]], "from_json() (compas_timber.elements.wall class method)": [[458, "compas_timber.elements.Wall.from_json"]], "from_jsonstring() (compas_timber.elements.wall class method)": [[459, "compas_timber.elements.Wall.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.wall method)": [[460, "compas_timber.elements.Wall.remove_blank_extension"]], "remove_features() (compas_timber.elements.wall method)": [[461, "compas_timber.elements.Wall.remove_features"]], "reset() (compas_timber.elements.wall method)": [[462, "compas_timber.elements.Wall.reset"]], "rotate() (compas_timber.elements.wall method)": [[463, "compas_timber.elements.Wall.rotate"]], "sha256() (compas_timber.elements.wall method)": [[464, "compas_timber.elements.Wall.sha256"]], "to_json() (compas_timber.elements.wall method)": [[465, "compas_timber.elements.Wall.to_json"]], "to_jsonstring() (compas_timber.elements.wall method)": [[466, "compas_timber.elements.Wall.to_jsonstring"]], "transform() (compas_timber.elements.wall method)": [[467, "compas_timber.elements.Wall.transform"]], "transformed() (compas_timber.elements.wall method)": [[468, "compas_timber.elements.Wall.transformed"]], "validate_data() (compas_timber.elements.wall class method)": [[469, "compas_timber.elements.Wall.validate_data"]], "beamjoiningerror": [[470, "compas_timber.errors.BeamJoiningError"]], "fastenerapplicationerror": [[471, "compas_timber.errors.FastenerApplicationError"]], "featureapplicationerror": [[472, "compas_timber.errors.FeatureApplicationError"]], "btlxpart (class in compas_timber.fabrication)": [[473, "compas_timber.fabrication.BTLxPart"]], "et_point_vals() (compas_timber.fabrication.btlxpart method)": [[474, "compas_timber.fabrication.BTLxPart.et_point_vals"]], "ref_side_from_face() (compas_timber.fabrication.btlxpart method)": [[475, "compas_timber.fabrication.BTLxPart.ref_side_from_face"]], "btlxprocessing (class in compas_timber.fabrication)": [[476, "compas_timber.fabrication.BTLxProcessing"]], "tostring() (compas_timber.fabrication.btlxprocessing method)": [[477, "compas_timber.fabrication.BTLxProcessing.ToString"]], "add_subprocessing() (compas_timber.fabrication.btlxprocessing method)": [[478, "compas_timber.fabrication.BTLxProcessing.add_subprocessing"]], "copy() (compas_timber.fabrication.btlxprocessing method)": [[479, "compas_timber.fabrication.BTLxProcessing.copy"]], "from_json() (compas_timber.fabrication.btlxprocessing class method)": [[480, "compas_timber.fabrication.BTLxProcessing.from_json"]], "from_jsonstring() (compas_timber.fabrication.btlxprocessing class method)": [[481, "compas_timber.fabrication.BTLxProcessing.from_jsonstring"]], "scaled() (compas_timber.fabrication.btlxprocessing method)": [[482, "compas_timber.fabrication.BTLxProcessing.scaled"]], "sha256() (compas_timber.fabrication.btlxprocessing method)": [[483, "compas_timber.fabrication.BTLxProcessing.sha256"]], "to_json() (compas_timber.fabrication.btlxprocessing method)": [[484, "compas_timber.fabrication.BTLxProcessing.to_json"]], "to_jsonstring() (compas_timber.fabrication.btlxprocessing method)": [[485, "compas_timber.fabrication.BTLxProcessing.to_jsonstring"]], "validate_data() (compas_timber.fabrication.btlxprocessing class method)": [[486, "compas_timber.fabrication.BTLxProcessing.validate_data"]], "btlxwriter (class in compas_timber.fabrication)": [[487, "compas_timber.fabrication.BTLxWriter"]], "model_to_xml() (compas_timber.fabrication.btlxwriter method)": [[488, "compas_timber.fabrication.BTLxWriter.model_to_xml"]], "register_type_serializer() (compas_timber.fabrication.btlxwriter class method)": [[489, "compas_timber.fabrication.BTLxWriter.register_type_serializer"]], "write() (compas_timber.fabrication.btlxwriter method)": [[490, "compas_timber.fabrication.BTLxWriter.write"]], "doublecut (class in compas_timber.fabrication)": [[491, "compas_timber.fabrication.DoubleCut"]], "tostring() (compas_timber.fabrication.doublecut method)": [[492, "compas_timber.fabrication.DoubleCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.doublecut method)": [[493, "compas_timber.fabrication.DoubleCut.add_subprocessing"]], "apply() (compas_timber.fabrication.doublecut method)": [[494, "compas_timber.fabrication.DoubleCut.apply"]], "copy() (compas_timber.fabrication.doublecut method)": [[495, "compas_timber.fabrication.DoubleCut.copy"]], "from_json() (compas_timber.fabrication.doublecut class method)": [[496, "compas_timber.fabrication.DoubleCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.doublecut class method)": [[497, "compas_timber.fabrication.DoubleCut.from_jsonstring"]], "from_planes_and_beam() (compas_timber.fabrication.doublecut class method)": [[498, "compas_timber.fabrication.DoubleCut.from_planes_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.doublecut class method)": [[499, "compas_timber.fabrication.DoubleCut.from_shapes_and_element"]], "planes_from_params_and_beam() (compas_timber.fabrication.doublecut method)": [[500, "compas_timber.fabrication.DoubleCut.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.doublecut method)": [[501, "compas_timber.fabrication.DoubleCut.scale"]], "scaled() (compas_timber.fabrication.doublecut method)": [[502, "compas_timber.fabrication.DoubleCut.scaled"]], "sha256() (compas_timber.fabrication.doublecut method)": [[503, "compas_timber.fabrication.DoubleCut.sha256"]], "to_json() (compas_timber.fabrication.doublecut method)": [[504, "compas_timber.fabrication.DoubleCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.doublecut method)": [[505, "compas_timber.fabrication.DoubleCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.doublecut class method)": [[506, "compas_timber.fabrication.DoubleCut.validate_data"]], "dovetailmortise (class in compas_timber.fabrication)": [[507, "compas_timber.fabrication.DovetailMortise"]], "tostring() (compas_timber.fabrication.dovetailmortise method)": [[508, "compas_timber.fabrication.DovetailMortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailmortise method)": [[509, "compas_timber.fabrication.DovetailMortise.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailmortise method)": [[510, "compas_timber.fabrication.DovetailMortise.apply"]], "copy() (compas_timber.fabrication.dovetailmortise method)": [[511, "compas_timber.fabrication.DovetailMortise.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailmortise class method)": [[512, "compas_timber.fabrication.DovetailMortise.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[513, "compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[514, "compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[515, "compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.dovetailmortise class method)": [[516, "compas_timber.fabrication.DovetailMortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.dovetailmortise class method)": [[517, "compas_timber.fabrication.DovetailMortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailmortise class method)": [[518, "compas_timber.fabrication.DovetailMortise.from_jsonstring"]], "scale() (compas_timber.fabrication.dovetailmortise method)": [[519, "compas_timber.fabrication.DovetailMortise.scale"]], "scaled() (compas_timber.fabrication.dovetailmortise method)": [[520, "compas_timber.fabrication.DovetailMortise.scaled"]], "sha256() (compas_timber.fabrication.dovetailmortise method)": [[521, "compas_timber.fabrication.DovetailMortise.sha256"]], "to_json() (compas_timber.fabrication.dovetailmortise method)": [[522, "compas_timber.fabrication.DovetailMortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailmortise method)": [[523, "compas_timber.fabrication.DovetailMortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailmortise class method)": [[524, "compas_timber.fabrication.DovetailMortise.validate_data"]], "dovetailtenon (class in compas_timber.fabrication)": [[525, "compas_timber.fabrication.DovetailTenon"]], "tostring() (compas_timber.fabrication.dovetailtenon method)": [[526, "compas_timber.fabrication.DovetailTenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailtenon method)": [[527, "compas_timber.fabrication.DovetailTenon.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailtenon method)": [[528, "compas_timber.fabrication.DovetailTenon.apply"]], "copy() (compas_timber.fabrication.dovetailtenon method)": [[529, "compas_timber.fabrication.DovetailTenon.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailtenon class method)": [[530, "compas_timber.fabrication.DovetailTenon.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[531, "compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[532, "compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[533, "compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.dovetailtenon class method)": [[534, "compas_timber.fabrication.DovetailTenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailtenon class method)": [[535, "compas_timber.fabrication.DovetailTenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.dovetailtenon class method)": [[536, "compas_timber.fabrication.DovetailTenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.dovetailtenon method)": [[537, "compas_timber.fabrication.DovetailTenon.scale"]], "scaled() (compas_timber.fabrication.dovetailtenon method)": [[538, "compas_timber.fabrication.DovetailTenon.scaled"]], "sha256() (compas_timber.fabrication.dovetailtenon method)": [[539, "compas_timber.fabrication.DovetailTenon.sha256"]], "to_json() (compas_timber.fabrication.dovetailtenon method)": [[540, "compas_timber.fabrication.DovetailTenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailtenon method)": [[541, "compas_timber.fabrication.DovetailTenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailtenon class method)": [[542, "compas_timber.fabrication.DovetailTenon.validate_data"]], "drilling (class in compas_timber.fabrication)": [[543, "compas_timber.fabrication.Drilling"]], "tostring() (compas_timber.fabrication.drilling method)": [[544, "compas_timber.fabrication.Drilling.ToString"]], "add_subprocessing() (compas_timber.fabrication.drilling method)": [[545, "compas_timber.fabrication.Drilling.add_subprocessing"]], "apply() (compas_timber.fabrication.drilling method)": [[546, "compas_timber.fabrication.Drilling.apply"]], "copy() (compas_timber.fabrication.drilling method)": [[547, "compas_timber.fabrication.Drilling.copy"]], "cylinder_from_params_and_element() (compas_timber.fabrication.drilling method)": [[548, "compas_timber.fabrication.Drilling.cylinder_from_params_and_element"]], "from_json() (compas_timber.fabrication.drilling class method)": [[549, "compas_timber.fabrication.Drilling.from_json"]], "from_jsonstring() (compas_timber.fabrication.drilling class method)": [[550, "compas_timber.fabrication.Drilling.from_jsonstring"]], "from_line_and_element() (compas_timber.fabrication.drilling class method)": [[551, "compas_timber.fabrication.Drilling.from_line_and_element"]], "from_shapes_and_element() (compas_timber.fabrication.drilling class method)": [[552, "compas_timber.fabrication.Drilling.from_shapes_and_element"]], "scale() (compas_timber.fabrication.drilling method)": [[553, "compas_timber.fabrication.Drilling.scale"]], "scaled() (compas_timber.fabrication.drilling method)": [[554, "compas_timber.fabrication.Drilling.scaled"]], "sha256() (compas_timber.fabrication.drilling method)": [[555, "compas_timber.fabrication.Drilling.sha256"]], "to_json() (compas_timber.fabrication.drilling method)": [[556, "compas_timber.fabrication.Drilling.to_json"]], "to_jsonstring() (compas_timber.fabrication.drilling method)": [[557, "compas_timber.fabrication.Drilling.to_jsonstring"]], "validate_data() (compas_timber.fabrication.drilling class method)": [[558, "compas_timber.fabrication.Drilling.validate_data"]], "edgepositiontype (class in compas_timber.fabrication)": [[559, "compas_timber.fabrication.EdgePositionType"]], "frenchridgelap (class in compas_timber.fabrication)": [[560, "compas_timber.fabrication.FrenchRidgeLap"]], "tostring() (compas_timber.fabrication.frenchridgelap method)": [[561, "compas_timber.fabrication.FrenchRidgeLap.ToString"]], "add_subprocessing() (compas_timber.fabrication.frenchridgelap method)": [[562, "compas_timber.fabrication.FrenchRidgeLap.add_subprocessing"]], "apply() (compas_timber.fabrication.frenchridgelap method)": [[563, "compas_timber.fabrication.FrenchRidgeLap.apply"]], "copy() (compas_timber.fabrication.frenchridgelap method)": [[564, "compas_timber.fabrication.FrenchRidgeLap.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[565, "compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam"]], "from_beam_beam_and_plane() (compas_timber.fabrication.frenchridgelap class method)": [[566, "compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane"]], "from_json() (compas_timber.fabrication.frenchridgelap class method)": [[567, "compas_timber.fabrication.FrenchRidgeLap.from_json"]], "from_jsonstring() (compas_timber.fabrication.frenchridgelap class method)": [[568, "compas_timber.fabrication.FrenchRidgeLap.from_jsonstring"]], "lap_volume_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[569, "compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam"]], "scale() (compas_timber.fabrication.frenchridgelap method)": [[570, "compas_timber.fabrication.FrenchRidgeLap.scale"]], "scaled() (compas_timber.fabrication.frenchridgelap method)": [[571, "compas_timber.fabrication.FrenchRidgeLap.scaled"]], "sha256() (compas_timber.fabrication.frenchridgelap method)": [[572, "compas_timber.fabrication.FrenchRidgeLap.sha256"]], "to_json() (compas_timber.fabrication.frenchridgelap method)": [[573, "compas_timber.fabrication.FrenchRidgeLap.to_json"]], "to_jsonstring() (compas_timber.fabrication.frenchridgelap method)": [[574, "compas_timber.fabrication.FrenchRidgeLap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.frenchridgelap class method)": [[575, "compas_timber.fabrication.FrenchRidgeLap.validate_data"]], "jackraftercut (class in compas_timber.fabrication)": [[576, "compas_timber.fabrication.JackRafterCut"]], "tostring() (compas_timber.fabrication.jackraftercut method)": [[577, "compas_timber.fabrication.JackRafterCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.jackraftercut method)": [[578, "compas_timber.fabrication.JackRafterCut.add_subprocessing"]], "apply() (compas_timber.fabrication.jackraftercut method)": [[579, "compas_timber.fabrication.JackRafterCut.apply"]], "copy() (compas_timber.fabrication.jackraftercut method)": [[580, "compas_timber.fabrication.JackRafterCut.copy"]], "from_json() (compas_timber.fabrication.jackraftercut class method)": [[581, "compas_timber.fabrication.JackRafterCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.jackraftercut class method)": [[582, "compas_timber.fabrication.JackRafterCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.jackraftercut class method)": [[583, "compas_timber.fabrication.JackRafterCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.jackraftercut class method)": [[584, "compas_timber.fabrication.JackRafterCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.jackraftercut method)": [[585, "compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam"]], "scale() (compas_timber.fabrication.jackraftercut method)": [[586, "compas_timber.fabrication.JackRafterCut.scale"]], "scaled() (compas_timber.fabrication.jackraftercut method)": [[587, "compas_timber.fabrication.JackRafterCut.scaled"]], "sha256() (compas_timber.fabrication.jackraftercut method)": [[588, "compas_timber.fabrication.JackRafterCut.sha256"]], "to_json() (compas_timber.fabrication.jackraftercut method)": [[589, "compas_timber.fabrication.JackRafterCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.jackraftercut method)": [[590, "compas_timber.fabrication.JackRafterCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.jackraftercut class method)": [[591, "compas_timber.fabrication.JackRafterCut.validate_data"]], "lap (class in compas_timber.fabrication)": [[592, "compas_timber.fabrication.Lap"]], "tostring() (compas_timber.fabrication.lap method)": [[593, "compas_timber.fabrication.Lap.ToString"]], "add_subprocessing() (compas_timber.fabrication.lap method)": [[594, "compas_timber.fabrication.Lap.add_subprocessing"]], "apply() (compas_timber.fabrication.lap method)": [[595, "compas_timber.fabrication.Lap.apply"]], "copy() (compas_timber.fabrication.lap method)": [[596, "compas_timber.fabrication.Lap.copy"]], "from_json() (compas_timber.fabrication.lap class method)": [[597, "compas_timber.fabrication.Lap.from_json"]], "from_jsonstring() (compas_timber.fabrication.lap class method)": [[598, "compas_timber.fabrication.Lap.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.lap class method)": [[599, "compas_timber.fabrication.Lap.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.lap class method)": [[600, "compas_timber.fabrication.Lap.from_shapes_and_element"]], "from_volume_and_beam() (compas_timber.fabrication.lap class method)": [[601, "compas_timber.fabrication.Lap.from_volume_and_beam"]], "scale() (compas_timber.fabrication.lap method)": [[602, "compas_timber.fabrication.Lap.scale"]], "scaled() (compas_timber.fabrication.lap method)": [[603, "compas_timber.fabrication.Lap.scaled"]], "sha256() (compas_timber.fabrication.lap method)": [[604, "compas_timber.fabrication.Lap.sha256"]], "to_json() (compas_timber.fabrication.lap method)": [[605, "compas_timber.fabrication.Lap.to_json"]], "to_jsonstring() (compas_timber.fabrication.lap method)": [[606, "compas_timber.fabrication.Lap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.lap class method)": [[607, "compas_timber.fabrication.Lap.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.lap method)": [[608, "compas_timber.fabrication.Lap.volume_from_params_and_beam"]], "limitationtoptype (class in compas_timber.fabrication)": [[609, "compas_timber.fabrication.LimitationTopType"]], "longitudinalcut (class in compas_timber.fabrication)": [[610, "compas_timber.fabrication.LongitudinalCut"]], "tostring() (compas_timber.fabrication.longitudinalcut method)": [[611, "compas_timber.fabrication.LongitudinalCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.longitudinalcut method)": [[612, "compas_timber.fabrication.LongitudinalCut.add_subprocessing"]], "apply() (compas_timber.fabrication.longitudinalcut method)": [[613, "compas_timber.fabrication.LongitudinalCut.apply"]], "copy() (compas_timber.fabrication.longitudinalcut method)": [[614, "compas_timber.fabrication.LongitudinalCut.copy"]], "from_json() (compas_timber.fabrication.longitudinalcut class method)": [[615, "compas_timber.fabrication.LongitudinalCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.longitudinalcut class method)": [[616, "compas_timber.fabrication.LongitudinalCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.longitudinalcut class method)": [[617, "compas_timber.fabrication.LongitudinalCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.longitudinalcut class method)": [[618, "compas_timber.fabrication.LongitudinalCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[619, "compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam"]], "scaled() (compas_timber.fabrication.longitudinalcut method)": [[620, "compas_timber.fabrication.LongitudinalCut.scaled"]], "sha256() (compas_timber.fabrication.longitudinalcut method)": [[621, "compas_timber.fabrication.LongitudinalCut.sha256"]], "to_json() (compas_timber.fabrication.longitudinalcut method)": [[622, "compas_timber.fabrication.LongitudinalCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.longitudinalcut method)": [[623, "compas_timber.fabrication.LongitudinalCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.longitudinalcut class method)": [[624, "compas_timber.fabrication.LongitudinalCut.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[625, "compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam"]], "machininglimits (class in compas_timber.fabrication)": [[626, "compas_timber.fabrication.MachiningLimits"]], "mortise (class in compas_timber.fabrication)": [[627, "compas_timber.fabrication.Mortise"]], "tostring() (compas_timber.fabrication.mortise method)": [[628, "compas_timber.fabrication.Mortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.mortise method)": [[629, "compas_timber.fabrication.Mortise.add_subprocessing"]], "apply() (compas_timber.fabrication.mortise method)": [[630, "compas_timber.fabrication.Mortise.apply"]], "copy() (compas_timber.fabrication.mortise method)": [[631, "compas_timber.fabrication.Mortise.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[632, "compas_timber.fabrication.Mortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.mortise class method)": [[633, "compas_timber.fabrication.Mortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.mortise class method)": [[634, "compas_timber.fabrication.Mortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.mortise class method)": [[635, "compas_timber.fabrication.Mortise.from_jsonstring"]], "scale() (compas_timber.fabrication.mortise method)": [[636, "compas_timber.fabrication.Mortise.scale"]], "scaled() (compas_timber.fabrication.mortise method)": [[637, "compas_timber.fabrication.Mortise.scaled"]], "sha256() (compas_timber.fabrication.mortise method)": [[638, "compas_timber.fabrication.Mortise.sha256"]], "to_json() (compas_timber.fabrication.mortise method)": [[639, "compas_timber.fabrication.Mortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.mortise method)": [[640, "compas_timber.fabrication.Mortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.mortise class method)": [[641, "compas_timber.fabrication.Mortise.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[642, "compas_timber.fabrication.Mortise.volume_from_params_and_beam"]], "orientationtype (class in compas_timber.fabrication)": [[643, "compas_timber.fabrication.OrientationType"]], "pocket (class in compas_timber.fabrication)": [[644, "compas_timber.fabrication.Pocket"]], "tostring() (compas_timber.fabrication.pocket method)": [[645, "compas_timber.fabrication.Pocket.ToString"]], "add_subprocessing() (compas_timber.fabrication.pocket method)": [[646, "compas_timber.fabrication.Pocket.add_subprocessing"]], "apply() (compas_timber.fabrication.pocket method)": [[647, "compas_timber.fabrication.Pocket.apply"]], "copy() (compas_timber.fabrication.pocket method)": [[648, "compas_timber.fabrication.Pocket.copy"]], "from_json() (compas_timber.fabrication.pocket class method)": [[649, "compas_timber.fabrication.Pocket.from_json"]], "from_jsonstring() (compas_timber.fabrication.pocket class method)": [[650, "compas_timber.fabrication.Pocket.from_jsonstring"]], "from_shapes_and_element() (compas_timber.fabrication.pocket class method)": [[651, "compas_timber.fabrication.Pocket.from_shapes_and_element"]], "from_volume_and_element() (compas_timber.fabrication.pocket class method)": [[652, "compas_timber.fabrication.Pocket.from_volume_and_element"]], "scale() (compas_timber.fabrication.pocket method)": [[653, "compas_timber.fabrication.Pocket.scale"]], "scaled() (compas_timber.fabrication.pocket method)": [[654, "compas_timber.fabrication.Pocket.scaled"]], "sha256() (compas_timber.fabrication.pocket method)": [[655, "compas_timber.fabrication.Pocket.sha256"]], "to_json() (compas_timber.fabrication.pocket method)": [[656, "compas_timber.fabrication.Pocket.to_json"]], "to_jsonstring() (compas_timber.fabrication.pocket method)": [[657, "compas_timber.fabrication.Pocket.to_jsonstring"]], "validate_data() (compas_timber.fabrication.pocket class method)": [[658, "compas_timber.fabrication.Pocket.validate_data"]], "volume_from_params_and_element() (compas_timber.fabrication.pocket method)": [[659, "compas_timber.fabrication.Pocket.volume_from_params_and_element"]], "slot (class in compas_timber.fabrication)": [[660, "compas_timber.fabrication.Slot"]], "tostring() (compas_timber.fabrication.slot method)": [[661, "compas_timber.fabrication.Slot.ToString"]], "add_subprocessing() (compas_timber.fabrication.slot method)": [[662, "compas_timber.fabrication.Slot.add_subprocessing"]], "apply() (compas_timber.fabrication.slot method)": [[663, "compas_timber.fabrication.Slot.apply"]], "copy() (compas_timber.fabrication.slot method)": [[664, "compas_timber.fabrication.Slot.copy"]], "from_json() (compas_timber.fabrication.slot class method)": [[665, "compas_timber.fabrication.Slot.from_json"]], "from_jsonstring() (compas_timber.fabrication.slot class method)": [[666, "compas_timber.fabrication.Slot.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.slot class method)": [[667, "compas_timber.fabrication.Slot.from_plane_and_beam"]], "scale() (compas_timber.fabrication.slot method)": [[668, "compas_timber.fabrication.Slot.scale"]], "scaled() (compas_timber.fabrication.slot method)": [[669, "compas_timber.fabrication.Slot.scaled"]], "sha256() (compas_timber.fabrication.slot method)": [[670, "compas_timber.fabrication.Slot.sha256"]], "to_json() (compas_timber.fabrication.slot method)": [[671, "compas_timber.fabrication.Slot.to_json"]], "to_jsonstring() (compas_timber.fabrication.slot method)": [[672, "compas_timber.fabrication.Slot.to_jsonstring"]], "validate_data() (compas_timber.fabrication.slot class method)": [[673, "compas_timber.fabrication.Slot.validate_data"]], "stepjoint (class in compas_timber.fabrication)": [[674, "compas_timber.fabrication.StepJoint"]], "tostring() (compas_timber.fabrication.stepjoint method)": [[675, "compas_timber.fabrication.StepJoint.ToString"]], "add_subprocessing() (compas_timber.fabrication.stepjoint method)": [[676, "compas_timber.fabrication.StepJoint.add_subprocessing"]], "add_tenon() (compas_timber.fabrication.stepjoint method)": [[677, "compas_timber.fabrication.StepJoint.add_tenon"]], "apply() (compas_timber.fabrication.stepjoint method)": [[678, "compas_timber.fabrication.StepJoint.apply"]], "copy() (compas_timber.fabrication.stepjoint method)": [[679, "compas_timber.fabrication.StepJoint.copy"]], "from_json() (compas_timber.fabrication.stepjoint class method)": [[680, "compas_timber.fabrication.StepJoint.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjoint class method)": [[681, "compas_timber.fabrication.StepJoint.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjoint class method)": [[682, "compas_timber.fabrication.StepJoint.from_plane_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[683, "compas_timber.fabrication.StepJoint.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjoint method)": [[684, "compas_timber.fabrication.StepJoint.scale"]], "scaled() (compas_timber.fabrication.stepjoint method)": [[685, "compas_timber.fabrication.StepJoint.scaled"]], "sha256() (compas_timber.fabrication.stepjoint method)": [[686, "compas_timber.fabrication.StepJoint.sha256"]], "tenon_volume_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[687, "compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam"]], "to_json() (compas_timber.fabrication.stepjoint method)": [[688, "compas_timber.fabrication.StepJoint.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjoint method)": [[689, "compas_timber.fabrication.StepJoint.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjoint class method)": [[690, "compas_timber.fabrication.StepJoint.validate_data"]], "stepjointnotch (class in compas_timber.fabrication)": [[691, "compas_timber.fabrication.StepJointNotch"]], "tostring() (compas_timber.fabrication.stepjointnotch method)": [[692, "compas_timber.fabrication.StepJointNotch.ToString"]], "add_mortise() (compas_timber.fabrication.stepjointnotch method)": [[693, "compas_timber.fabrication.StepJointNotch.add_mortise"]], "add_subprocessing() (compas_timber.fabrication.stepjointnotch method)": [[694, "compas_timber.fabrication.StepJointNotch.add_subprocessing"]], "apply() (compas_timber.fabrication.stepjointnotch method)": [[695, "compas_timber.fabrication.StepJointNotch.apply"]], "copy() (compas_timber.fabrication.stepjointnotch method)": [[696, "compas_timber.fabrication.StepJointNotch.copy"]], "from_json() (compas_timber.fabrication.stepjointnotch class method)": [[697, "compas_timber.fabrication.StepJointNotch.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjointnotch class method)": [[698, "compas_timber.fabrication.StepJointNotch.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjointnotch class method)": [[699, "compas_timber.fabrication.StepJointNotch.from_plane_and_beam"]], "mortise_volume_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[700, "compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[701, "compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjointnotch method)": [[702, "compas_timber.fabrication.StepJointNotch.scale"]], "scaled() (compas_timber.fabrication.stepjointnotch method)": [[703, "compas_timber.fabrication.StepJointNotch.scaled"]], "sha256() (compas_timber.fabrication.stepjointnotch method)": [[704, "compas_timber.fabrication.StepJointNotch.sha256"]], "to_json() (compas_timber.fabrication.stepjointnotch method)": [[705, "compas_timber.fabrication.StepJointNotch.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjointnotch method)": [[706, "compas_timber.fabrication.StepJointNotch.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjointnotch class method)": [[707, "compas_timber.fabrication.StepJointNotch.validate_data"]], "stepshapetype (class in compas_timber.fabrication)": [[708, "compas_timber.fabrication.StepShapeType"]], "tenon (class in compas_timber.fabrication)": [[709, "compas_timber.fabrication.Tenon"]], "tostring() (compas_timber.fabrication.tenon method)": [[710, "compas_timber.fabrication.Tenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.tenon method)": [[711, "compas_timber.fabrication.Tenon.add_subprocessing"]], "apply() (compas_timber.fabrication.tenon method)": [[712, "compas_timber.fabrication.Tenon.apply"]], "copy() (compas_timber.fabrication.tenon method)": [[713, "compas_timber.fabrication.Tenon.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[714, "compas_timber.fabrication.Tenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.tenon class method)": [[715, "compas_timber.fabrication.Tenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.tenon class method)": [[716, "compas_timber.fabrication.Tenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.tenon class method)": [[717, "compas_timber.fabrication.Tenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.tenon method)": [[718, "compas_timber.fabrication.Tenon.scale"]], "scaled() (compas_timber.fabrication.tenon method)": [[719, "compas_timber.fabrication.Tenon.scaled"]], "sha256() (compas_timber.fabrication.tenon method)": [[720, "compas_timber.fabrication.Tenon.sha256"]], "to_json() (compas_timber.fabrication.tenon method)": [[721, "compas_timber.fabrication.Tenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.tenon method)": [[722, "compas_timber.fabrication.Tenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.tenon class method)": [[723, "compas_timber.fabrication.Tenon.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[724, "compas_timber.fabrication.Tenon.volume_from_params_and_beam"]], "tenonshapetype (class in compas_timber.fabrication)": [[725, "compas_timber.fabrication.TenonShapeType"]], "add_gh_param() (in module compas_timber.ghpython)": [[726, "compas_timber.ghpython.add_gh_param"]], "clear_gh_params() (in module compas_timber.ghpython)": [[727, "compas_timber.ghpython.clear_gh_params"]], "get_leaf_subclasses() (in module compas_timber.ghpython)": [[728, "compas_timber.ghpython.get_leaf_subclasses"]], "item_input_valid() (in module compas_timber.ghpython)": [[729, "compas_timber.ghpython.item_input_valid"]], "list_input_valid() (in module compas_timber.ghpython)": [[730, "compas_timber.ghpython.list_input_valid"]], "manage_dynamic_params() (in module compas_timber.ghpython)": [[731, "compas_timber.ghpython.manage_dynamic_params"]], "rename_gh_input() (in module compas_timber.ghpython)": [[732, "compas_timber.ghpython.rename_gh_input"]], "timbermodel (class in compas_timber.model)": [[733, "compas_timber.model.TimberModel"]], "tostring() (compas_timber.model.timbermodel method)": [[734, "compas_timber.model.TimberModel.ToString"]], "add_element() (compas_timber.model.timbermodel method)": [[735, "compas_timber.model.TimberModel.add_element"]], "add_elements() (compas_timber.model.timbermodel method)": [[736, "compas_timber.model.TimberModel.add_elements"]], "add_group() (compas_timber.model.timbermodel method)": [[737, "compas_timber.model.TimberModel.add_group"]], "add_group_element() (compas_timber.model.timbermodel method)": [[738, "compas_timber.model.TimberModel.add_group_element"]], "add_interaction() (compas_timber.model.timbermodel method)": [[739, "compas_timber.model.TimberModel.add_interaction"]], "add_joint() (compas_timber.model.timbermodel method)": [[740, "compas_timber.model.TimberModel.add_joint"]], "add_material() (compas_timber.model.timbermodel method)": [[741, "compas_timber.model.TimberModel.add_material"]], "assign_material() (compas_timber.model.timbermodel method)": [[742, "compas_timber.model.TimberModel.assign_material"]], "compute_aabb() (compas_timber.model.timbermodel method)": [[743, "compas_timber.model.TimberModel.compute_aabb"]], "compute_obb() (compas_timber.model.timbermodel method)": [[744, "compas_timber.model.TimberModel.compute_obb"]], "connect_adjacent_beams() (compas_timber.model.timbermodel method)": [[745, "compas_timber.model.TimberModel.connect_adjacent_beams"]], "connect_adjacent_walls() (compas_timber.model.timbermodel method)": [[746, "compas_timber.model.TimberModel.connect_adjacent_walls"]], "copy() (compas_timber.model.timbermodel method)": [[747, "compas_timber.model.TimberModel.copy"]], "element_by_guid() (compas_timber.model.timbermodel method)": [[748, "compas_timber.model.TimberModel.element_by_guid"]], "elements() (compas_timber.model.timbermodel method)": [[749, "compas_timber.model.TimberModel.elements"]], "elements_connected_by() (compas_timber.model.timbermodel method)": [[750, "compas_timber.model.TimberModel.elements_connected_by"]], "from_json() (compas_timber.model.timbermodel class method)": [[751, "compas_timber.model.TimberModel.from_json"]], "from_jsonstring() (compas_timber.model.timbermodel class method)": [[752, "compas_timber.model.TimberModel.from_jsonstring"]], "get_elements_in_group() (compas_timber.model.timbermodel method)": [[753, "compas_timber.model.TimberModel.get_elements_in_group"]], "get_interactions_for_element() (compas_timber.model.timbermodel method)": [[754, "compas_timber.model.TimberModel.get_interactions_for_element"]], "has_element() (compas_timber.model.timbermodel method)": [[755, "compas_timber.model.TimberModel.has_element"]], "has_group() (compas_timber.model.timbermodel method)": [[756, "compas_timber.model.TimberModel.has_group"]], "has_interaction() (compas_timber.model.timbermodel method)": [[757, "compas_timber.model.TimberModel.has_interaction"]], "has_material() (compas_timber.model.timbermodel method)": [[758, "compas_timber.model.TimberModel.has_material"]], "interactions() (compas_timber.model.timbermodel method)": [[759, "compas_timber.model.TimberModel.interactions"]], "materials() (compas_timber.model.timbermodel method)": [[760, "compas_timber.model.TimberModel.materials"]], "process_joinery() (compas_timber.model.timbermodel method)": [[761, "compas_timber.model.TimberModel.process_joinery"]], "remove_element() (compas_timber.model.timbermodel method)": [[762, "compas_timber.model.TimberModel.remove_element"]], "remove_interaction() (compas_timber.model.timbermodel method)": [[763, "compas_timber.model.TimberModel.remove_interaction"]], "remove_joint() (compas_timber.model.timbermodel method)": [[764, "compas_timber.model.TimberModel.remove_joint"]], "rotate() (compas_timber.model.timbermodel method)": [[765, "compas_timber.model.TimberModel.rotate"]], "rotated() (compas_timber.model.timbermodel method)": [[766, "compas_timber.model.TimberModel.rotated"]], "scale() (compas_timber.model.timbermodel method)": [[767, "compas_timber.model.TimberModel.scale"]], "scaled() (compas_timber.model.timbermodel method)": [[768, "compas_timber.model.TimberModel.scaled"]], "set_topologies() (compas_timber.model.timbermodel method)": [[769, "compas_timber.model.TimberModel.set_topologies"]], "sha256() (compas_timber.model.timbermodel method)": [[770, "compas_timber.model.TimberModel.sha256"]], "to_json() (compas_timber.model.timbermodel method)": [[771, "compas_timber.model.TimberModel.to_json"]], "to_jsonstring() (compas_timber.model.timbermodel method)": [[772, "compas_timber.model.TimberModel.to_jsonstring"]], "transform() (compas_timber.model.timbermodel method)": [[773, "compas_timber.model.TimberModel.transform"]], "transform_numpy() (compas_timber.model.timbermodel method)": [[774, "compas_timber.model.TimberModel.transform_numpy"]], "transformed() (compas_timber.model.timbermodel method)": [[775, "compas_timber.model.TimberModel.transformed"]], "transformed_numpy() (compas_timber.model.timbermodel method)": [[776, "compas_timber.model.TimberModel.transformed_numpy"]], "translate() (compas_timber.model.timbermodel method)": [[777, "compas_timber.model.TimberModel.translate"]], "translated() (compas_timber.model.timbermodel method)": [[778, "compas_timber.model.TimberModel.translated"]], "validate_data() (compas_timber.model.timbermodel class method)": [[779, "compas_timber.model.TimberModel.validate_data"]], "actor (class in compas_timber.planning)": [[780, "compas_timber.planning.Actor"]], "get_name() (compas_timber.planning.actor class method)": [[781, "compas_timber.planning.Actor.get_name"]], "buildingplan (class in compas_timber.planning)": [[782, "compas_timber.planning.BuildingPlan"]], "tostring() (compas_timber.planning.buildingplan method)": [[783, "compas_timber.planning.BuildingPlan.ToString"]], "add_step() (compas_timber.planning.buildingplan method)": [[784, "compas_timber.planning.BuildingPlan.add_step"]], "copy() (compas_timber.planning.buildingplan method)": [[785, "compas_timber.planning.BuildingPlan.copy"]], "from_json() (compas_timber.planning.buildingplan class method)": [[786, "compas_timber.planning.BuildingPlan.from_json"]], "from_jsonstring() (compas_timber.planning.buildingplan class method)": [[787, "compas_timber.planning.BuildingPlan.from_jsonstring"]], "sha256() (compas_timber.planning.buildingplan method)": [[788, "compas_timber.planning.BuildingPlan.sha256"]], "to_json() (compas_timber.planning.buildingplan method)": [[789, "compas_timber.planning.BuildingPlan.to_json"]], "to_jsonstring() (compas_timber.planning.buildingplan method)": [[790, "compas_timber.planning.BuildingPlan.to_jsonstring"]], "validate_data() (compas_timber.planning.buildingplan class method)": [[791, "compas_timber.planning.BuildingPlan.validate_data"]], "buildingplanparser (class in compas_timber.planning)": [[792, "compas_timber.planning.BuildingPlanParser"]], "parse() (compas_timber.planning.buildingplanparser class method)": [[793, "compas_timber.planning.BuildingPlanParser.parse"]], "serialize() (compas_timber.planning.buildingplanparser class method)": [[794, "compas_timber.planning.BuildingPlanParser.serialize"]], "instruction (class in compas_timber.planning)": [[795, "compas_timber.planning.Instruction"]], "tostring() (compas_timber.planning.instruction method)": [[796, "compas_timber.planning.Instruction.ToString"]], "copy() (compas_timber.planning.instruction method)": [[797, "compas_timber.planning.Instruction.copy"]], "from_json() (compas_timber.planning.instruction class method)": [[798, "compas_timber.planning.Instruction.from_json"]], "from_jsonstring() (compas_timber.planning.instruction class method)": [[799, "compas_timber.planning.Instruction.from_jsonstring"]], "sha256() (compas_timber.planning.instruction method)": [[800, "compas_timber.planning.Instruction.sha256"]], "to_json() (compas_timber.planning.instruction method)": [[801, "compas_timber.planning.Instruction.to_json"]], "to_jsonstring() (compas_timber.planning.instruction method)": [[802, "compas_timber.planning.Instruction.to_jsonstring"]], "transform() (compas_timber.planning.instruction method)": [[803, "compas_timber.planning.Instruction.transform"]], "validate_data() (compas_timber.planning.instruction class method)": [[804, "compas_timber.planning.Instruction.validate_data"]], "lineardimension (class in compas_timber.planning)": [[805, "compas_timber.planning.LinearDimension"]], "tostring() (compas_timber.planning.lineardimension method)": [[806, "compas_timber.planning.LinearDimension.ToString"]], "copy() (compas_timber.planning.lineardimension method)": [[807, "compas_timber.planning.LinearDimension.copy"]], "from_json() (compas_timber.planning.lineardimension class method)": [[808, "compas_timber.planning.LinearDimension.from_json"]], "from_jsonstring() (compas_timber.planning.lineardimension class method)": [[809, "compas_timber.planning.LinearDimension.from_jsonstring"]], "sha256() (compas_timber.planning.lineardimension method)": [[810, "compas_timber.planning.LinearDimension.sha256"]], "to_json() (compas_timber.planning.lineardimension method)": [[811, "compas_timber.planning.LinearDimension.to_json"]], "to_jsonstring() (compas_timber.planning.lineardimension method)": [[812, "compas_timber.planning.LinearDimension.to_jsonstring"]], "transform() (compas_timber.planning.lineardimension method)": [[813, "compas_timber.planning.LinearDimension.transform"]], "validate_data() (compas_timber.planning.lineardimension class method)": [[814, "compas_timber.planning.LinearDimension.validate_data"]], "model3d (class in compas_timber.planning)": [[815, "compas_timber.planning.Model3d"]], "tostring() (compas_timber.planning.model3d method)": [[816, "compas_timber.planning.Model3d.ToString"]], "copy() (compas_timber.planning.model3d method)": [[817, "compas_timber.planning.Model3d.copy"]], "from_json() (compas_timber.planning.model3d class method)": [[818, "compas_timber.planning.Model3d.from_json"]], "from_jsonstring() (compas_timber.planning.model3d class method)": [[819, "compas_timber.planning.Model3d.from_jsonstring"]], "sha256() (compas_timber.planning.model3d method)": [[820, "compas_timber.planning.Model3d.sha256"]], "to_json() (compas_timber.planning.model3d method)": [[821, "compas_timber.planning.Model3d.to_json"]], "to_jsonstring() (compas_timber.planning.model3d method)": [[822, "compas_timber.planning.Model3d.to_jsonstring"]], "transform() (compas_timber.planning.model3d method)": [[823, "compas_timber.planning.Model3d.transform"]], "validate_data() (compas_timber.planning.model3d class method)": [[824, "compas_timber.planning.Model3d.validate_data"]], "simplesequencegenerator (class in compas_timber.planning)": [[825, "compas_timber.planning.SimpleSequenceGenerator"]], "step (class in compas_timber.planning)": [[826, "compas_timber.planning.Step"]], "tostring() (compas_timber.planning.step method)": [[827, "compas_timber.planning.Step.ToString"]], "copy() (compas_timber.planning.step method)": [[828, "compas_timber.planning.Step.copy"]], "from_json() (compas_timber.planning.step class method)": [[829, "compas_timber.planning.Step.from_json"]], "from_jsonstring() (compas_timber.planning.step class method)": [[830, "compas_timber.planning.Step.from_jsonstring"]], "sha256() (compas_timber.planning.step method)": [[831, "compas_timber.planning.Step.sha256"]], "to_json() (compas_timber.planning.step method)": [[832, "compas_timber.planning.Step.to_json"]], "to_jsonstring() (compas_timber.planning.step method)": [[833, "compas_timber.planning.Step.to_jsonstring"]], "transform() (compas_timber.planning.step method)": [[834, "compas_timber.planning.Step.transform"]], "validate_data() (compas_timber.planning.step class method)": [[835, "compas_timber.planning.Step.validate_data"]], "text3d (class in compas_timber.planning)": [[836, "compas_timber.planning.Text3d"]], "tostring() (compas_timber.planning.text3d method)": [[837, "compas_timber.planning.Text3d.ToString"]], "copy() (compas_timber.planning.text3d method)": [[838, "compas_timber.planning.Text3d.copy"]], "from_json() (compas_timber.planning.text3d class method)": [[839, "compas_timber.planning.Text3d.from_json"]], "from_jsonstring() (compas_timber.planning.text3d class method)": [[840, "compas_timber.planning.Text3d.from_jsonstring"]], "sha256() (compas_timber.planning.text3d method)": [[841, "compas_timber.planning.Text3d.sha256"]], "to_json() (compas_timber.planning.text3d method)": [[842, "compas_timber.planning.Text3d.to_json"]], "to_jsonstring() (compas_timber.planning.text3d method)": [[843, "compas_timber.planning.Text3d.to_jsonstring"]], "transform() (compas_timber.planning.text3d method)": [[844, "compas_timber.planning.Text3d.transform"]], "validate_data() (compas_timber.planning.text3d class method)": [[845, "compas_timber.planning.Text3d.validate_data"]], "find_neighboring_elements() (in module compas_timber.rhino)": [[846, "compas_timber.rhino.find_neighboring_elements"]]}})