Search.setIndex({"docnames": ["api", "api/compas_timber.connections", "api/compas_timber.design", "api/compas_timber.elements", "api/compas_timber.errors", "api/compas_timber.fabrication", "api/compas_timber.ghpython", "api/compas_timber.model", "api/compas_timber.planning", "api/compas_timber.rhino", "api/generated/compas_timber.connections.BallNodeJoint", "api/generated/compas_timber.connections.BallNodeJoint.ToString", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions", "api/generated/compas_timber.connections.BallNodeJoint.add_features", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility", "api/generated/compas_timber.connections.BallNodeJoint.copy", "api/generated/compas_timber.connections.BallNodeJoint.create", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies", "api/generated/compas_timber.connections.BallNodeJoint.from_json", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.BallNodeJoint.sha256", "api/generated/compas_timber.connections.BallNodeJoint.to_json", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.validate_data", "api/generated/compas_timber.connections.BeamGroupAnalyzer", "api/generated/compas_timber.connections.BeamGroupAnalyzer.find", "api/generated/compas_timber.connections.Cluster", "api/generated/compas_timber.connections.CompositeAnalyzer", "api/generated/compas_timber.connections.CompositeAnalyzer.find", "api/generated/compas_timber.connections.CompositeAnalyzer.from_model", "api/generated/compas_timber.connections.ConnectionSolver", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs", "api/generated/compas_timber.connections.ConnectionSolver.find_topology", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology", "api/generated/compas_timber.connections.GenericJoint", "api/generated/compas_timber.connections.GenericJoint.ToString", "api/generated/compas_timber.connections.GenericJoint.add_extensions", "api/generated/compas_timber.connections.GenericJoint.add_features", "api/generated/compas_timber.connections.GenericJoint.check_elements_compatibility", "api/generated/compas_timber.connections.GenericJoint.copy", "api/generated/compas_timber.connections.GenericJoint.create", "api/generated/compas_timber.connections.GenericJoint.element_count_complies", "api/generated/compas_timber.connections.GenericJoint.from_json", "api/generated/compas_timber.connections.GenericJoint.from_jsonstring", "api/generated/compas_timber.connections.GenericJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.GenericJoint.sha256", "api/generated/compas_timber.connections.GenericJoint.to_json", "api/generated/compas_timber.connections.GenericJoint.to_jsonstring", "api/generated/compas_timber.connections.GenericJoint.validate_data", "api/generated/compas_timber.connections.Joint", "api/generated/compas_timber.connections.Joint.ToString", "api/generated/compas_timber.connections.Joint.add_extensions", "api/generated/compas_timber.connections.Joint.add_features", "api/generated/compas_timber.connections.Joint.check_elements_compatibility", "api/generated/compas_timber.connections.Joint.copy", "api/generated/compas_timber.connections.Joint.create", "api/generated/compas_timber.connections.Joint.element_count_complies", "api/generated/compas_timber.connections.Joint.from_json", "api/generated/compas_timber.connections.Joint.from_jsonstring", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys", "api/generated/compas_timber.connections.Joint.sha256", "api/generated/compas_timber.connections.Joint.to_json", "api/generated/compas_timber.connections.Joint.to_jsonstring", "api/generated/compas_timber.connections.Joint.validate_data", "api/generated/compas_timber.connections.JointTopology", "api/generated/compas_timber.connections.JointTopology.get_name", "api/generated/compas_timber.connections.LButtJoint", "api/generated/compas_timber.connections.LButtJoint.ToString", "api/generated/compas_timber.connections.LButtJoint.add_extensions", "api/generated/compas_timber.connections.LButtJoint.add_features", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LButtJoint.copy", "api/generated/compas_timber.connections.LButtJoint.create", "api/generated/compas_timber.connections.LButtJoint.element_count_complies", "api/generated/compas_timber.connections.LButtJoint.from_json", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LButtJoint.sha256", "api/generated/compas_timber.connections.LButtJoint.to_json", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles", "api/generated/compas_timber.connections.LButtJoint.validate_data", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data", "api/generated/compas_timber.connections.LLapJoint", "api/generated/compas_timber.connections.LLapJoint.ToString", "api/generated/compas_timber.connections.LLapJoint.add_extensions", "api/generated/compas_timber.connections.LLapJoint.add_features", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LLapJoint.copy", "api/generated/compas_timber.connections.LLapJoint.create", "api/generated/compas_timber.connections.LLapJoint.element_count_complies", "api/generated/compas_timber.connections.LLapJoint.from_json", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LLapJoint.sha256", "api/generated/compas_timber.connections.LLapJoint.to_json", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LLapJoint.validate_data", "api/generated/compas_timber.connections.LMiterJoint", "api/generated/compas_timber.connections.LMiterJoint.ToString", "api/generated/compas_timber.connections.LMiterJoint.add_extensions", "api/generated/compas_timber.connections.LMiterJoint.add_features", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LMiterJoint.copy", "api/generated/compas_timber.connections.LMiterJoint.create", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies", "api/generated/compas_timber.connections.LMiterJoint.from_json", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LMiterJoint.sha256", "api/generated/compas_timber.connections.LMiterJoint.to_json", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.validate_data", "api/generated/compas_timber.connections.LapJoint", "api/generated/compas_timber.connections.LapJoint.ToString", "api/generated/compas_timber.connections.LapJoint.add_extensions", "api/generated/compas_timber.connections.LapJoint.add_features", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LapJoint.copy", "api/generated/compas_timber.connections.LapJoint.create", "api/generated/compas_timber.connections.LapJoint.element_count_complies", "api/generated/compas_timber.connections.LapJoint.from_json", "api/generated/compas_timber.connections.LapJoint.from_jsonstring", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LapJoint.sha256", "api/generated/compas_timber.connections.LapJoint.to_json", "api/generated/compas_timber.connections.LapJoint.to_jsonstring", "api/generated/compas_timber.connections.LapJoint.validate_data", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.find", "api/generated/compas_timber.connections.QuadAnalyzer", "api/generated/compas_timber.connections.TBirdsmouthJoint", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy", "api/generated/compas_timber.connections.TBirdsmouthJoint.create", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data", "api/generated/compas_timber.connections.TButtJoint", "api/generated/compas_timber.connections.TButtJoint.ToString", "api/generated/compas_timber.connections.TButtJoint.add_extensions", "api/generated/compas_timber.connections.TButtJoint.add_features", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TButtJoint.copy", "api/generated/compas_timber.connections.TButtJoint.create", "api/generated/compas_timber.connections.TButtJoint.element_count_complies", "api/generated/compas_timber.connections.TButtJoint.from_json", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TButtJoint.sha256", "api/generated/compas_timber.connections.TButtJoint.to_json", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring", "api/generated/compas_timber.connections.TButtJoint.validate_data", "api/generated/compas_timber.connections.TDovetailJoint", "api/generated/compas_timber.connections.TDovetailJoint.ToString", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions", "api/generated/compas_timber.connections.TDovetailJoint.add_features", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TDovetailJoint.copy", "api/generated/compas_timber.connections.TDovetailJoint.create", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies", "api/generated/compas_timber.connections.TDovetailJoint.from_json", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TDovetailJoint.sha256", "api/generated/compas_timber.connections.TDovetailJoint.to_json", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.validate_data", "api/generated/compas_timber.connections.TLapJoint", "api/generated/compas_timber.connections.TLapJoint.ToString", "api/generated/compas_timber.connections.TLapJoint.add_extensions", "api/generated/compas_timber.connections.TLapJoint.add_features", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TLapJoint.copy", "api/generated/compas_timber.connections.TLapJoint.create", "api/generated/compas_timber.connections.TLapJoint.element_count_complies", "api/generated/compas_timber.connections.TLapJoint.from_json", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TLapJoint.sha256", "api/generated/compas_timber.connections.TLapJoint.to_json", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring", "api/generated/compas_timber.connections.TLapJoint.validate_data", "api/generated/compas_timber.connections.TStepJoint", "api/generated/compas_timber.connections.TStepJoint.ToString", "api/generated/compas_timber.connections.TStepJoint.add_extensions", "api/generated/compas_timber.connections.TStepJoint.add_features", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TStepJoint.copy", "api/generated/compas_timber.connections.TStepJoint.create", "api/generated/compas_timber.connections.TStepJoint.element_count_complies", "api/generated/compas_timber.connections.TStepJoint.from_json", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TStepJoint.set_step_depths", "api/generated/compas_timber.connections.TStepJoint.sha256", "api/generated/compas_timber.connections.TStepJoint.to_json", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring", "api/generated/compas_timber.connections.TStepJoint.validate_data", "api/generated/compas_timber.connections.TenonMortiseJoint", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TenonMortiseJoint.copy", "api/generated/compas_timber.connections.TenonMortiseJoint.create", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data", "api/generated/compas_timber.connections.TripletAnalyzer", "api/generated/compas_timber.connections.XLapJoint", "api/generated/compas_timber.connections.XLapJoint.ToString", "api/generated/compas_timber.connections.XLapJoint.add_extensions", "api/generated/compas_timber.connections.XLapJoint.add_features", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XLapJoint.copy", "api/generated/compas_timber.connections.XLapJoint.create", "api/generated/compas_timber.connections.XLapJoint.element_count_complies", "api/generated/compas_timber.connections.XLapJoint.from_json", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XLapJoint.sha256", "api/generated/compas_timber.connections.XLapJoint.to_json", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring", "api/generated/compas_timber.connections.XLapJoint.validate_data", "api/generated/compas_timber.connections.XNotchJoint", "api/generated/compas_timber.connections.XNotchJoint.ToString", "api/generated/compas_timber.connections.XNotchJoint.add_extensions", "api/generated/compas_timber.connections.XNotchJoint.add_features", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XNotchJoint.copy", "api/generated/compas_timber.connections.XNotchJoint.create", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies", "api/generated/compas_timber.connections.XNotchJoint.from_json", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XNotchJoint.sha256", "api/generated/compas_timber.connections.XNotchJoint.to_json", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.validate_data", "api/generated/compas_timber.connections.YButtJoint", "api/generated/compas_timber.connections.YButtJoint.ToString", "api/generated/compas_timber.connections.YButtJoint.add_extensions", "api/generated/compas_timber.connections.YButtJoint.add_features", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.YButtJoint.copy", "api/generated/compas_timber.connections.YButtJoint.create", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.element_count_complies", "api/generated/compas_timber.connections.YButtJoint.from_json", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.YButtJoint.sha256", "api/generated/compas_timber.connections.YButtJoint.to_json", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring", "api/generated/compas_timber.connections.YButtJoint.validate_data", "api/generated/compas_timber.connections.find_neighboring_elements", "api/generated/compas_timber.design.CategoryRule", "api/generated/compas_timber.design.CategoryRule.ToString", "api/generated/compas_timber.design.CategoryRule.comply", "api/generated/compas_timber.design.CategoryRule.get_category_rules", "api/generated/compas_timber.design.CategoryRule.get_direct_rules", "api/generated/compas_timber.design.CategoryRule.get_topology_rules", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.CategoryRule.reorder", "api/generated/compas_timber.design.DebugInfomation", "api/generated/compas_timber.design.DebugInfomation.ToString", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error", "api/generated/compas_timber.design.DebugInfomation.add_feature_error", "api/generated/compas_timber.design.DebugInfomation.add_joint_error", "api/generated/compas_timber.design.DirectRule", "api/generated/compas_timber.design.DirectRule.ToString", "api/generated/compas_timber.design.DirectRule.comply", "api/generated/compas_timber.design.DirectRule.contains", "api/generated/compas_timber.design.DirectRule.get_category_rules", "api/generated/compas_timber.design.DirectRule.get_direct_rules", "api/generated/compas_timber.design.DirectRule.get_topology_rules", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.FeatureDefinition", "api/generated/compas_timber.design.FeatureDefinition.ToString", "api/generated/compas_timber.design.JointDefinition", "api/generated/compas_timber.design.JointDefinition.ToString", "api/generated/compas_timber.design.JointDefinition.is_identical", "api/generated/compas_timber.design.JointDefinition.match", "api/generated/compas_timber.design.JointRule", "api/generated/compas_timber.design.JointRule.comply", "api/generated/compas_timber.design.JointRule.get_category_rules", "api/generated/compas_timber.design.JointRule.get_direct_rules", "api/generated/compas_timber.design.JointRule.get_topology_rules", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.SurfaceModel", "api/generated/compas_timber.design.SurfaceModel.beam_category_names", "api/generated/compas_timber.design.SurfaceModel.create_model", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements", "api/generated/compas_timber.design.SurfaceModel.generate_frame", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams", "api/generated/compas_timber.design.SurfaceModel.generate_plates", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines", "api/generated/compas_timber.design.SurfaceModel.generate_studs", "api/generated/compas_timber.design.SurfaceModel.generate_windows", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices", "api/generated/compas_timber.design.SurfaceModel.offset_elements", "api/generated/compas_timber.design.SurfaceModel.parse_loops", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs", "api/generated/compas_timber.design.SurfaceModel.trim_studs", "api/generated/compas_timber.design.TopologyRule", "api/generated/compas_timber.design.TopologyRule.ToString", "api/generated/compas_timber.design.TopologyRule.comply", "api/generated/compas_timber.design.TopologyRule.get_category_rules", "api/generated/compas_timber.design.TopologyRule.get_direct_rules", "api/generated/compas_timber.design.TopologyRule.get_topology_rules", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.guess_joint_topology_2beams", "api/generated/compas_timber.design.set_default_joints", "api/generated/compas_timber.elements.Beam", "api/generated/compas_timber.elements.Beam.ToString", "api/generated/compas_timber.elements.Beam.add_blank_extension", "api/generated/compas_timber.elements.Beam.add_feature", "api/generated/compas_timber.elements.Beam.add_features", "api/generated/compas_timber.elements.Beam.back_side", "api/generated/compas_timber.elements.Beam.compute_aabb", "api/generated/compas_timber.elements.Beam.compute_collision_mesh", "api/generated/compas_timber.elements.Beam.compute_geometry", "api/generated/compas_timber.elements.Beam.compute_obb", "api/generated/compas_timber.elements.Beam.compute_worldtransformation", "api/generated/compas_timber.elements.Beam.copy", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point", "api/generated/compas_timber.elements.Beam.extension_to_plane", "api/generated/compas_timber.elements.Beam.from_centerline", "api/generated/compas_timber.elements.Beam.from_endpoints", "api/generated/compas_timber.elements.Beam.from_json", "api/generated/compas_timber.elements.Beam.from_jsonstring", "api/generated/compas_timber.elements.Beam.front_side", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side", "api/generated/compas_timber.elements.Beam.opp_side", "api/generated/compas_timber.elements.Beam.remove_blank_extension", "api/generated/compas_timber.elements.Beam.remove_features", "api/generated/compas_timber.elements.Beam.reset", "api/generated/compas_timber.elements.Beam.sha256", "api/generated/compas_timber.elements.Beam.side_as_surface", "api/generated/compas_timber.elements.Beam.to_json", "api/generated/compas_timber.elements.Beam.to_jsonstring", "api/generated/compas_timber.elements.Beam.transform", "api/generated/compas_timber.elements.Beam.transformed", "api/generated/compas_timber.elements.Beam.validate_data", "api/generated/compas_timber.elements.Fastener", "api/generated/compas_timber.elements.Fastener.ToString", "api/generated/compas_timber.elements.Fastener.add_feature", "api/generated/compas_timber.elements.Fastener.add_features", "api/generated/compas_timber.elements.Fastener.compute_aabb", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh", "api/generated/compas_timber.elements.Fastener.compute_geometry", "api/generated/compas_timber.elements.Fastener.compute_obb", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation", "api/generated/compas_timber.elements.Fastener.copy", "api/generated/compas_timber.elements.Fastener.from_json", "api/generated/compas_timber.elements.Fastener.from_jsonstring", "api/generated/compas_timber.elements.Fastener.remove_blank_extension", "api/generated/compas_timber.elements.Fastener.remove_features", "api/generated/compas_timber.elements.Fastener.reset", "api/generated/compas_timber.elements.Fastener.sha256", "api/generated/compas_timber.elements.Fastener.to_json", "api/generated/compas_timber.elements.Fastener.to_jsonstring", "api/generated/compas_timber.elements.Fastener.transform", "api/generated/compas_timber.elements.Fastener.transformed", "api/generated/compas_timber.elements.Fastener.validate_data", "api/generated/compas_timber.elements.FastenerTimberInterface", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString", "api/generated/compas_timber.elements.FastenerTimberInterface.copy", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data", "api/generated/compas_timber.elements.Plate", "api/generated/compas_timber.elements.Plate.ToString", "api/generated/compas_timber.elements.Plate.add_feature", "api/generated/compas_timber.elements.Plate.add_features", "api/generated/compas_timber.elements.Plate.add_interface", "api/generated/compas_timber.elements.Plate.check_outlines", "api/generated/compas_timber.elements.Plate.compute_aabb", "api/generated/compas_timber.elements.Plate.compute_collision_mesh", "api/generated/compas_timber.elements.Plate.compute_geometry", "api/generated/compas_timber.elements.Plate.compute_obb", "api/generated/compas_timber.elements.Plate.compute_worldtransformation", "api/generated/compas_timber.elements.Plate.copy", "api/generated/compas_timber.elements.Plate.from_brep", "api/generated/compas_timber.elements.Plate.from_json", "api/generated/compas_timber.elements.Plate.from_jsonstring", "api/generated/compas_timber.elements.Plate.from_outline_thickness", "api/generated/compas_timber.elements.Plate.opp_side", "api/generated/compas_timber.elements.Plate.remove_blank_extension", "api/generated/compas_timber.elements.Plate.remove_features", "api/generated/compas_timber.elements.Plate.reset", "api/generated/compas_timber.elements.Plate.sha256", "api/generated/compas_timber.elements.Plate.side_as_surface", "api/generated/compas_timber.elements.Plate.to_json", "api/generated/compas_timber.elements.Plate.to_jsonstring", "api/generated/compas_timber.elements.Plate.transform", "api/generated/compas_timber.elements.Plate.transformed", "api/generated/compas_timber.elements.Plate.validate_data", "api/generated/compas_timber.elements.TimberElement", "api/generated/compas_timber.elements.TimberElement.ToString", "api/generated/compas_timber.elements.TimberElement.add_feature", "api/generated/compas_timber.elements.TimberElement.add_features", "api/generated/compas_timber.elements.TimberElement.compute_aabb", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh", "api/generated/compas_timber.elements.TimberElement.compute_geometry", "api/generated/compas_timber.elements.TimberElement.compute_obb", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation", "api/generated/compas_timber.elements.TimberElement.copy", "api/generated/compas_timber.elements.TimberElement.from_json", "api/generated/compas_timber.elements.TimberElement.from_jsonstring", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension", "api/generated/compas_timber.elements.TimberElement.remove_features", "api/generated/compas_timber.elements.TimberElement.reset", "api/generated/compas_timber.elements.TimberElement.sha256", "api/generated/compas_timber.elements.TimberElement.to_json", "api/generated/compas_timber.elements.TimberElement.to_jsonstring", "api/generated/compas_timber.elements.TimberElement.transform", "api/generated/compas_timber.elements.TimberElement.transformed", "api/generated/compas_timber.elements.TimberElement.validate_data", "api/generated/compas_timber.elements.Wall", "api/generated/compas_timber.elements.Wall.ToString", "api/generated/compas_timber.elements.Wall.add_feature", "api/generated/compas_timber.elements.Wall.add_features", "api/generated/compas_timber.elements.Wall.compute_aabb", "api/generated/compas_timber.elements.Wall.compute_collision_mesh", "api/generated/compas_timber.elements.Wall.compute_geometry", "api/generated/compas_timber.elements.Wall.compute_obb", "api/generated/compas_timber.elements.Wall.compute_worldtransformation", "api/generated/compas_timber.elements.Wall.copy", "api/generated/compas_timber.elements.Wall.from_boundary", "api/generated/compas_timber.elements.Wall.from_brep", "api/generated/compas_timber.elements.Wall.from_json", "api/generated/compas_timber.elements.Wall.from_jsonstring", "api/generated/compas_timber.elements.Wall.remove_blank_extension", "api/generated/compas_timber.elements.Wall.remove_features", "api/generated/compas_timber.elements.Wall.reset", "api/generated/compas_timber.elements.Wall.rotate", "api/generated/compas_timber.elements.Wall.sha256", "api/generated/compas_timber.elements.Wall.to_json", "api/generated/compas_timber.elements.Wall.to_jsonstring", "api/generated/compas_timber.elements.Wall.transform", "api/generated/compas_timber.elements.Wall.transformed", "api/generated/compas_timber.elements.Wall.validate_data", "api/generated/compas_timber.errors.BeamJoiningError", "api/generated/compas_timber.errors.FastenerApplicationError", "api/generated/compas_timber.errors.FeatureApplicationError", "api/generated/compas_timber.fabrication.BTLxPart", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face", "api/generated/compas_timber.fabrication.BTLxProcessing", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing", "api/generated/compas_timber.fabrication.BTLxProcessing.copy", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data", "api/generated/compas_timber.fabrication.BTLxWriter", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer", "api/generated/compas_timber.fabrication.BTLxWriter.write", "api/generated/compas_timber.fabrication.DoubleCut", "api/generated/compas_timber.fabrication.DoubleCut.ToString", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing", "api/generated/compas_timber.fabrication.DoubleCut.apply", "api/generated/compas_timber.fabrication.DoubleCut.copy", "api/generated/compas_timber.fabrication.DoubleCut.from_json", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.scale", "api/generated/compas_timber.fabrication.DoubleCut.scaled", "api/generated/compas_timber.fabrication.DoubleCut.sha256", "api/generated/compas_timber.fabrication.DoubleCut.to_json", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.validate_data", "api/generated/compas_timber.fabrication.DovetailMortise", "api/generated/compas_timber.fabrication.DovetailMortise.ToString", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailMortise.apply", "api/generated/compas_timber.fabrication.DovetailMortise.copy", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_json", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.scale", "api/generated/compas_timber.fabrication.DovetailMortise.scaled", "api/generated/compas_timber.fabrication.DovetailMortise.sha256", "api/generated/compas_timber.fabrication.DovetailMortise.to_json", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data", "api/generated/compas_timber.fabrication.DovetailTenon", "api/generated/compas_timber.fabrication.DovetailTenon.ToString", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailTenon.apply", "api/generated/compas_timber.fabrication.DovetailTenon.copy", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.from_json", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.scale", "api/generated/compas_timber.fabrication.DovetailTenon.scaled", "api/generated/compas_timber.fabrication.DovetailTenon.sha256", "api/generated/compas_timber.fabrication.DovetailTenon.to_json", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data", "api/generated/compas_timber.fabrication.Drilling", "api/generated/compas_timber.fabrication.Drilling.ToString", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing", "api/generated/compas_timber.fabrication.Drilling.apply", "api/generated/compas_timber.fabrication.Drilling.copy", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element", "api/generated/compas_timber.fabrication.Drilling.from_json", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element", "api/generated/compas_timber.fabrication.Drilling.scale", "api/generated/compas_timber.fabrication.Drilling.scaled", "api/generated/compas_timber.fabrication.Drilling.sha256", "api/generated/compas_timber.fabrication.Drilling.to_json", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring", "api/generated/compas_timber.fabrication.Drilling.validate_data", "api/generated/compas_timber.fabrication.EdgePositionType", "api/generated/compas_timber.fabrication.FrenchRidgeLap", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data", "api/generated/compas_timber.fabrication.JackRafterCut", "api/generated/compas_timber.fabrication.JackRafterCut.ToString", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing", "api/generated/compas_timber.fabrication.JackRafterCut.apply", "api/generated/compas_timber.fabrication.JackRafterCut.copy", "api/generated/compas_timber.fabrication.JackRafterCut.from_json", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.scale", "api/generated/compas_timber.fabrication.JackRafterCut.scaled", "api/generated/compas_timber.fabrication.JackRafterCut.sha256", "api/generated/compas_timber.fabrication.JackRafterCut.to_json", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data", "api/generated/compas_timber.fabrication.Lap", "api/generated/compas_timber.fabrication.Lap.ToString", "api/generated/compas_timber.fabrication.Lap.add_subprocessing", "api/generated/compas_timber.fabrication.Lap.apply", "api/generated/compas_timber.fabrication.Lap.copy", "api/generated/compas_timber.fabrication.Lap.from_json", "api/generated/compas_timber.fabrication.Lap.from_jsonstring", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam", "api/generated/compas_timber.fabrication.Lap.scale", "api/generated/compas_timber.fabrication.Lap.scaled", "api/generated/compas_timber.fabrication.Lap.sha256", "api/generated/compas_timber.fabrication.Lap.to_json", "api/generated/compas_timber.fabrication.Lap.to_jsonstring", "api/generated/compas_timber.fabrication.Lap.validate_data", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.LimitationTopType", "api/generated/compas_timber.fabrication.LongitudinalCut", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing", "api/generated/compas_timber.fabrication.LongitudinalCut.apply", "api/generated/compas_timber.fabrication.LongitudinalCut.copy", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.MachiningLimits", "api/generated/compas_timber.fabrication.Mortise", "api/generated/compas_timber.fabrication.Mortise.ToString", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing", "api/generated/compas_timber.fabrication.Mortise.apply", "api/generated/compas_timber.fabrication.Mortise.copy", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_json", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring", "api/generated/compas_timber.fabrication.Mortise.scale", "api/generated/compas_timber.fabrication.Mortise.scaled", "api/generated/compas_timber.fabrication.Mortise.sha256", "api/generated/compas_timber.fabrication.Mortise.to_json", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring", "api/generated/compas_timber.fabrication.Mortise.validate_data", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.OrientationType", "api/generated/compas_timber.fabrication.Pocket", "api/generated/compas_timber.fabrication.Pocket.ToString", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing", "api/generated/compas_timber.fabrication.Pocket.apply", "api/generated/compas_timber.fabrication.Pocket.copy", "api/generated/compas_timber.fabrication.Pocket.from_json", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element", "api/generated/compas_timber.fabrication.Pocket.scale", "api/generated/compas_timber.fabrication.Pocket.scaled", "api/generated/compas_timber.fabrication.Pocket.sha256", "api/generated/compas_timber.fabrication.Pocket.to_json", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring", "api/generated/compas_timber.fabrication.Pocket.validate_data", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element", "api/generated/compas_timber.fabrication.Slot", "api/generated/compas_timber.fabrication.Slot.ToString", "api/generated/compas_timber.fabrication.Slot.add_subprocessing", "api/generated/compas_timber.fabrication.Slot.apply", "api/generated/compas_timber.fabrication.Slot.copy", "api/generated/compas_timber.fabrication.Slot.from_json", "api/generated/compas_timber.fabrication.Slot.from_jsonstring", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam", "api/generated/compas_timber.fabrication.Slot.scale", "api/generated/compas_timber.fabrication.Slot.scaled", "api/generated/compas_timber.fabrication.Slot.sha256", "api/generated/compas_timber.fabrication.Slot.to_json", "api/generated/compas_timber.fabrication.Slot.to_jsonstring", "api/generated/compas_timber.fabrication.Slot.validate_data", "api/generated/compas_timber.fabrication.StepJoint", "api/generated/compas_timber.fabrication.StepJoint.ToString", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing", "api/generated/compas_timber.fabrication.StepJoint.add_tenon", "api/generated/compas_timber.fabrication.StepJoint.apply", "api/generated/compas_timber.fabrication.StepJoint.copy", "api/generated/compas_timber.fabrication.StepJoint.from_json", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.scale", "api/generated/compas_timber.fabrication.StepJoint.scaled", "api/generated/compas_timber.fabrication.StepJoint.sha256", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.to_json", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.validate_data", "api/generated/compas_timber.fabrication.StepJointNotch", "api/generated/compas_timber.fabrication.StepJointNotch.ToString", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing", "api/generated/compas_timber.fabrication.StepJointNotch.apply", "api/generated/compas_timber.fabrication.StepJointNotch.copy", "api/generated/compas_timber.fabrication.StepJointNotch.from_json", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.scale", "api/generated/compas_timber.fabrication.StepJointNotch.scaled", "api/generated/compas_timber.fabrication.StepJointNotch.sha256", "api/generated/compas_timber.fabrication.StepJointNotch.to_json", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data", "api/generated/compas_timber.fabrication.StepShapeType", "api/generated/compas_timber.fabrication.Tenon", "api/generated/compas_timber.fabrication.Tenon.ToString", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing", "api/generated/compas_timber.fabrication.Tenon.apply", "api/generated/compas_timber.fabrication.Tenon.copy", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Tenon.from_json", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.Tenon.scale", "api/generated/compas_timber.fabrication.Tenon.scaled", "api/generated/compas_timber.fabrication.Tenon.sha256", "api/generated/compas_timber.fabrication.Tenon.to_json", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring", "api/generated/compas_timber.fabrication.Tenon.validate_data", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.TenonShapeType", "api/generated/compas_timber.ghpython.add_gh_param", "api/generated/compas_timber.ghpython.clear_gh_params", "api/generated/compas_timber.ghpython.get_leaf_subclasses", "api/generated/compas_timber.ghpython.item_input_valid", "api/generated/compas_timber.ghpython.list_input_valid", "api/generated/compas_timber.ghpython.manage_dynamic_params", "api/generated/compas_timber.ghpython.rename_gh_input", "api/generated/compas_timber.model.TimberModel", "api/generated/compas_timber.model.TimberModel.ToString", "api/generated/compas_timber.model.TimberModel.add_element", "api/generated/compas_timber.model.TimberModel.add_elements", "api/generated/compas_timber.model.TimberModel.add_group", "api/generated/compas_timber.model.TimberModel.add_group_element", "api/generated/compas_timber.model.TimberModel.add_interaction", "api/generated/compas_timber.model.TimberModel.add_joint", "api/generated/compas_timber.model.TimberModel.add_material", "api/generated/compas_timber.model.TimberModel.assign_material", "api/generated/compas_timber.model.TimberModel.compute_aabb", "api/generated/compas_timber.model.TimberModel.compute_obb", "api/generated/compas_timber.model.TimberModel.connect_adjacent_beams", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls", "api/generated/compas_timber.model.TimberModel.copy", "api/generated/compas_timber.model.TimberModel.element_by_guid", "api/generated/compas_timber.model.TimberModel.elements", "api/generated/compas_timber.model.TimberModel.elements_connected_by", "api/generated/compas_timber.model.TimberModel.from_json", "api/generated/compas_timber.model.TimberModel.from_jsonstring", "api/generated/compas_timber.model.TimberModel.get_elements_in_group", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element", "api/generated/compas_timber.model.TimberModel.has_element", "api/generated/compas_timber.model.TimberModel.has_group", "api/generated/compas_timber.model.TimberModel.has_interaction", "api/generated/compas_timber.model.TimberModel.has_material", "api/generated/compas_timber.model.TimberModel.interactions", "api/generated/compas_timber.model.TimberModel.materials", "api/generated/compas_timber.model.TimberModel.process_joinery", "api/generated/compas_timber.model.TimberModel.remove_element", "api/generated/compas_timber.model.TimberModel.remove_interaction", "api/generated/compas_timber.model.TimberModel.remove_joint", "api/generated/compas_timber.model.TimberModel.rotate", "api/generated/compas_timber.model.TimberModel.rotated", "api/generated/compas_timber.model.TimberModel.scale", "api/generated/compas_timber.model.TimberModel.scaled", "api/generated/compas_timber.model.TimberModel.set_topologies", "api/generated/compas_timber.model.TimberModel.sha256", "api/generated/compas_timber.model.TimberModel.to_json", "api/generated/compas_timber.model.TimberModel.to_jsonstring", "api/generated/compas_timber.model.TimberModel.transform", "api/generated/compas_timber.model.TimberModel.transform_numpy", "api/generated/compas_timber.model.TimberModel.transformed", "api/generated/compas_timber.model.TimberModel.transformed_numpy", "api/generated/compas_timber.model.TimberModel.translate", "api/generated/compas_timber.model.TimberModel.translated", "api/generated/compas_timber.model.TimberModel.validate_data", "api/generated/compas_timber.planning.Actor", "api/generated/compas_timber.planning.Actor.get_name", "api/generated/compas_timber.planning.BuildingPlan", "api/generated/compas_timber.planning.BuildingPlan.ToString", "api/generated/compas_timber.planning.BuildingPlan.add_step", "api/generated/compas_timber.planning.BuildingPlan.copy", "api/generated/compas_timber.planning.BuildingPlan.from_json", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.sha256", "api/generated/compas_timber.planning.BuildingPlan.to_json", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.validate_data", "api/generated/compas_timber.planning.BuildingPlanParser", "api/generated/compas_timber.planning.BuildingPlanParser.parse", "api/generated/compas_timber.planning.BuildingPlanParser.serialize", "api/generated/compas_timber.planning.Instruction", "api/generated/compas_timber.planning.Instruction.ToString", "api/generated/compas_timber.planning.Instruction.copy", "api/generated/compas_timber.planning.Instruction.from_json", "api/generated/compas_timber.planning.Instruction.from_jsonstring", "api/generated/compas_timber.planning.Instruction.sha256", "api/generated/compas_timber.planning.Instruction.to_json", "api/generated/compas_timber.planning.Instruction.to_jsonstring", "api/generated/compas_timber.planning.Instruction.transform", "api/generated/compas_timber.planning.Instruction.validate_data", "api/generated/compas_timber.planning.LinearDimension", "api/generated/compas_timber.planning.LinearDimension.ToString", "api/generated/compas_timber.planning.LinearDimension.copy", "api/generated/compas_timber.planning.LinearDimension.from_json", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring", "api/generated/compas_timber.planning.LinearDimension.sha256", "api/generated/compas_timber.planning.LinearDimension.to_json", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring", "api/generated/compas_timber.planning.LinearDimension.transform", "api/generated/compas_timber.planning.LinearDimension.validate_data", "api/generated/compas_timber.planning.Model3d", "api/generated/compas_timber.planning.Model3d.ToString", "api/generated/compas_timber.planning.Model3d.copy", "api/generated/compas_timber.planning.Model3d.from_json", "api/generated/compas_timber.planning.Model3d.from_jsonstring", "api/generated/compas_timber.planning.Model3d.sha256", "api/generated/compas_timber.planning.Model3d.to_json", "api/generated/compas_timber.planning.Model3d.to_jsonstring", "api/generated/compas_timber.planning.Model3d.transform", "api/generated/compas_timber.planning.Model3d.validate_data", "api/generated/compas_timber.planning.SimpleSequenceGenerator", "api/generated/compas_timber.planning.Step", "api/generated/compas_timber.planning.Step.ToString", "api/generated/compas_timber.planning.Step.copy", "api/generated/compas_timber.planning.Step.from_json", "api/generated/compas_timber.planning.Step.from_jsonstring", "api/generated/compas_timber.planning.Step.sha256", "api/generated/compas_timber.planning.Step.to_json", "api/generated/compas_timber.planning.Step.to_jsonstring", "api/generated/compas_timber.planning.Step.transform", "api/generated/compas_timber.planning.Step.validate_data", "api/generated/compas_timber.planning.Text3d", "api/generated/compas_timber.planning.Text3d.ToString", "api/generated/compas_timber.planning.Text3d.copy", "api/generated/compas_timber.planning.Text3d.from_json", "api/generated/compas_timber.planning.Text3d.from_jsonstring", "api/generated/compas_timber.planning.Text3d.sha256", "api/generated/compas_timber.planning.Text3d.to_json", "api/generated/compas_timber.planning.Text3d.to_jsonstring", "api/generated/compas_timber.planning.Text3d.transform", "api/generated/compas_timber.planning.Text3d.validate_data", "api/generated/compas_timber.rhino.find_neighboring_elements", "citing", "contribution", "contribution/BTLx_contribution_guide", "contribution/joints_contribution_guide", "index", "installation", "license", "tutorials", "tutorials/grasshopper/attributes", "tutorials/grasshopper/beams", "tutorials/grasshopper/design", "tutorials/grasshopper/examples", "tutorials/grasshopper/fabrication", "tutorials/grasshopper/features", "tutorials/grasshopper/installation", "tutorials/grasshopper/joint_rules", "tutorials/grasshopper/model", "tutorials/grasshopper/show", "tutorials/grasshopper/utils", "tutorials/grasshopper/workflow"], "filenames": ["api.rst", "api/compas_timber.connections.rst", "api/compas_timber.design.rst", "api/compas_timber.elements.rst", "api/compas_timber.errors.rst", "api/compas_timber.fabrication.rst", "api/compas_timber.ghpython.rst", "api/compas_timber.model.rst", "api/compas_timber.planning.rst", "api/compas_timber.rhino.rst", "api/generated/compas_timber.connections.BallNodeJoint.rst", "api/generated/compas_timber.connections.BallNodeJoint.ToString.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_features.rst", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.BallNodeJoint.copy.rst", "api/generated/compas_timber.connections.BallNodeJoint.create.rst", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.BallNodeJoint.sha256.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.validate_data.rst", "api/generated/compas_timber.connections.BeamGroupAnalyzer.rst", "api/generated/compas_timber.connections.BeamGroupAnalyzer.find.rst", "api/generated/compas_timber.connections.Cluster.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.find.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.from_model.rst", "api/generated/compas_timber.connections.ConnectionSolver.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_topology.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology.rst", "api/generated/compas_timber.connections.GenericJoint.rst", "api/generated/compas_timber.connections.GenericJoint.ToString.rst", "api/generated/compas_timber.connections.GenericJoint.add_extensions.rst", "api/generated/compas_timber.connections.GenericJoint.add_features.rst", "api/generated/compas_timber.connections.GenericJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.GenericJoint.copy.rst", "api/generated/compas_timber.connections.GenericJoint.create.rst", "api/generated/compas_timber.connections.GenericJoint.element_count_complies.rst", "api/generated/compas_timber.connections.GenericJoint.from_json.rst", "api/generated/compas_timber.connections.GenericJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.GenericJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.GenericJoint.sha256.rst", "api/generated/compas_timber.connections.GenericJoint.to_json.rst", "api/generated/compas_timber.connections.GenericJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.GenericJoint.validate_data.rst", "api/generated/compas_timber.connections.Joint.rst", "api/generated/compas_timber.connections.Joint.ToString.rst", "api/generated/compas_timber.connections.Joint.add_extensions.rst", "api/generated/compas_timber.connections.Joint.add_features.rst", "api/generated/compas_timber.connections.Joint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.Joint.copy.rst", "api/generated/compas_timber.connections.Joint.create.rst", "api/generated/compas_timber.connections.Joint.element_count_complies.rst", "api/generated/compas_timber.connections.Joint.from_json.rst", "api/generated/compas_timber.connections.Joint.from_jsonstring.rst", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.Joint.sha256.rst", "api/generated/compas_timber.connections.Joint.to_json.rst", "api/generated/compas_timber.connections.Joint.to_jsonstring.rst", "api/generated/compas_timber.connections.Joint.validate_data.rst", "api/generated/compas_timber.connections.JointTopology.rst", "api/generated/compas_timber.connections.JointTopology.get_name.rst", "api/generated/compas_timber.connections.LButtJoint.rst", "api/generated/compas_timber.connections.LButtJoint.ToString.rst", "api/generated/compas_timber.connections.LButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.LButtJoint.add_features.rst", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LButtJoint.copy.rst", "api/generated/compas_timber.connections.LButtJoint.create.rst", "api/generated/compas_timber.connections.LButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LButtJoint.from_json.rst", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LButtJoint.sha256.rst", "api/generated/compas_timber.connections.LButtJoint.to_json.rst", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles.rst", "api/generated/compas_timber.connections.LButtJoint.validate_data.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LLapJoint.rst", "api/generated/compas_timber.connections.LLapJoint.ToString.rst", "api/generated/compas_timber.connections.LLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LLapJoint.add_features.rst", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LLapJoint.copy.rst", "api/generated/compas_timber.connections.LLapJoint.create.rst", "api/generated/compas_timber.connections.LLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LLapJoint.from_json.rst", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LLapJoint.sha256.rst", "api/generated/compas_timber.connections.LLapJoint.to_json.rst", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LMiterJoint.rst", "api/generated/compas_timber.connections.LMiterJoint.ToString.rst", "api/generated/compas_timber.connections.LMiterJoint.add_extensions.rst", "api/generated/compas_timber.connections.LMiterJoint.add_features.rst", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LMiterJoint.copy.rst", "api/generated/compas_timber.connections.LMiterJoint.create.rst", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LMiterJoint.from_json.rst", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes.rst", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LMiterJoint.sha256.rst", "api/generated/compas_timber.connections.LMiterJoint.to_json.rst", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.validate_data.rst", "api/generated/compas_timber.connections.LapJoint.rst", "api/generated/compas_timber.connections.LapJoint.ToString.rst", "api/generated/compas_timber.connections.LapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LapJoint.add_features.rst", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LapJoint.copy.rst", "api/generated/compas_timber.connections.LapJoint.create.rst", "api/generated/compas_timber.connections.LapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LapJoint.from_json.rst", "api/generated/compas_timber.connections.LapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LapJoint.sha256.rst", "api/generated/compas_timber.connections.LapJoint.to_json.rst", "api/generated/compas_timber.connections.LapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.validate_data.rst", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.rst", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.find.rst", "api/generated/compas_timber.connections.QuadAnalyzer.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.create.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data.rst", "api/generated/compas_timber.connections.TButtJoint.rst", "api/generated/compas_timber.connections.TButtJoint.ToString.rst", "api/generated/compas_timber.connections.TButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.TButtJoint.add_features.rst", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TButtJoint.copy.rst", "api/generated/compas_timber.connections.TButtJoint.create.rst", "api/generated/compas_timber.connections.TButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TButtJoint.from_json.rst", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TButtJoint.sha256.rst", "api/generated/compas_timber.connections.TButtJoint.to_json.rst", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.validate_data.rst", "api/generated/compas_timber.connections.TDovetailJoint.rst", "api/generated/compas_timber.connections.TDovetailJoint.ToString.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_features.rst", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TDovetailJoint.copy.rst", "api/generated/compas_timber.connections.TDovetailJoint.create.rst", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool.rst", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TDovetailJoint.sha256.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.validate_data.rst", "api/generated/compas_timber.connections.TLapJoint.rst", "api/generated/compas_timber.connections.TLapJoint.ToString.rst", "api/generated/compas_timber.connections.TLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.TLapJoint.add_features.rst", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TLapJoint.copy.rst", "api/generated/compas_timber.connections.TLapJoint.create.rst", "api/generated/compas_timber.connections.TLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TLapJoint.from_json.rst", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TLapJoint.sha256.rst", "api/generated/compas_timber.connections.TLapJoint.to_json.rst", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.validate_data.rst", "api/generated/compas_timber.connections.TStepJoint.rst", "api/generated/compas_timber.connections.TStepJoint.ToString.rst", "api/generated/compas_timber.connections.TStepJoint.add_extensions.rst", "api/generated/compas_timber.connections.TStepJoint.add_features.rst", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TStepJoint.copy.rst", "api/generated/compas_timber.connections.TStepJoint.create.rst", "api/generated/compas_timber.connections.TStepJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TStepJoint.from_json.rst", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TStepJoint.set_step_depths.rst", "api/generated/compas_timber.connections.TStepJoint.sha256.rst", "api/generated/compas_timber.connections.TStepJoint.to_json.rst", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.validate_data.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.copy.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.create.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.set_default_values.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data.rst", "api/generated/compas_timber.connections.TripletAnalyzer.rst", "api/generated/compas_timber.connections.XLapJoint.rst", "api/generated/compas_timber.connections.XLapJoint.ToString.rst", "api/generated/compas_timber.connections.XLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.XLapJoint.add_features.rst", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XLapJoint.copy.rst", "api/generated/compas_timber.connections.XLapJoint.create.rst", "api/generated/compas_timber.connections.XLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XLapJoint.from_json.rst", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XLapJoint.sha256.rst", "api/generated/compas_timber.connections.XLapJoint.to_json.rst", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.validate_data.rst", "api/generated/compas_timber.connections.XNotchJoint.rst", "api/generated/compas_timber.connections.XNotchJoint.ToString.rst", "api/generated/compas_timber.connections.XNotchJoint.add_extensions.rst", "api/generated/compas_timber.connections.XNotchJoint.add_features.rst", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XNotchJoint.copy.rst", "api/generated/compas_timber.connections.XNotchJoint.create.rst", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XNotchJoint.from_json.rst", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XNotchJoint.sha256.rst", "api/generated/compas_timber.connections.XNotchJoint.to_json.rst", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.validate_data.rst", "api/generated/compas_timber.connections.YButtJoint.rst", "api/generated/compas_timber.connections.YButtJoint.ToString.rst", "api/generated/compas_timber.connections.YButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.YButtJoint.add_features.rst", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.YButtJoint.copy.rst", "api/generated/compas_timber.connections.YButtJoint.create.rst", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.YButtJoint.from_json.rst", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes.rst", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.YButtJoint.sha256.rst", "api/generated/compas_timber.connections.YButtJoint.to_json.rst", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.validate_data.rst", "api/generated/compas_timber.connections.find_neighboring_elements.rst", "api/generated/compas_timber.design.CategoryRule.rst", "api/generated/compas_timber.design.CategoryRule.ToString.rst", "api/generated/compas_timber.design.CategoryRule.comply.rst", "api/generated/compas_timber.design.CategoryRule.get_category_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_direct_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_topology_rules.rst", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.CategoryRule.reorder.rst", "api/generated/compas_timber.design.DebugInfomation.rst", "api/generated/compas_timber.design.DebugInfomation.ToString.rst", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_feature_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_joint_error.rst", "api/generated/compas_timber.design.DirectRule.rst", "api/generated/compas_timber.design.DirectRule.ToString.rst", "api/generated/compas_timber.design.DirectRule.comply.rst", "api/generated/compas_timber.design.DirectRule.contains.rst", "api/generated/compas_timber.design.DirectRule.get_category_rules.rst", "api/generated/compas_timber.design.DirectRule.get_direct_rules.rst", "api/generated/compas_timber.design.DirectRule.get_topology_rules.rst", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.FeatureDefinition.rst", "api/generated/compas_timber.design.FeatureDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.rst", "api/generated/compas_timber.design.JointDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.is_identical.rst", "api/generated/compas_timber.design.JointDefinition.match.rst", "api/generated/compas_timber.design.JointRule.rst", "api/generated/compas_timber.design.JointRule.comply.rst", "api/generated/compas_timber.design.JointRule.get_category_rules.rst", "api/generated/compas_timber.design.JointRule.get_direct_rules.rst", "api/generated/compas_timber.design.JointRule.get_topology_rules.rst", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.SurfaceModel.rst", "api/generated/compas_timber.design.SurfaceModel.beam_category_names.rst", "api/generated/compas_timber.design.SurfaceModel.create_model.rst", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps.rst", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements.rst", "api/generated/compas_timber.design.SurfaceModel.generate_frame.rst", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams.rst", "api/generated/compas_timber.design.SurfaceModel.generate_plates.rst", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines.rst", "api/generated/compas_timber.design.SurfaceModel.generate_studs.rst", "api/generated/compas_timber.design.SurfaceModel.generate_windows.rst", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections.rst", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices.rst", "api/generated/compas_timber.design.SurfaceModel.offset_elements.rst", "api/generated/compas_timber.design.SurfaceModel.parse_loops.rst", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_studs.rst", "api/generated/compas_timber.design.TopologyRule.rst", "api/generated/compas_timber.design.TopologyRule.ToString.rst", "api/generated/compas_timber.design.TopologyRule.comply.rst", "api/generated/compas_timber.design.TopologyRule.get_category_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_direct_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_topology_rules.rst", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.guess_joint_topology_2beams.rst", "api/generated/compas_timber.design.set_default_joints.rst", "api/generated/compas_timber.elements.Beam.rst", "api/generated/compas_timber.elements.Beam.ToString.rst", "api/generated/compas_timber.elements.Beam.add_blank_extension.rst", "api/generated/compas_timber.elements.Beam.add_feature.rst", "api/generated/compas_timber.elements.Beam.add_features.rst", "api/generated/compas_timber.elements.Beam.back_side.rst", "api/generated/compas_timber.elements.Beam.compute_aabb.rst", "api/generated/compas_timber.elements.Beam.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Beam.compute_geometry.rst", "api/generated/compas_timber.elements.Beam.compute_obb.rst", "api/generated/compas_timber.elements.Beam.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Beam.copy.rst", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point.rst", "api/generated/compas_timber.elements.Beam.extension_to_plane.rst", "api/generated/compas_timber.elements.Beam.from_centerline.rst", "api/generated/compas_timber.elements.Beam.from_endpoints.rst", "api/generated/compas_timber.elements.Beam.from_json.rst", "api/generated/compas_timber.elements.Beam.from_jsonstring.rst", "api/generated/compas_timber.elements.Beam.front_side.rst", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side.rst", "api/generated/compas_timber.elements.Beam.opp_side.rst", "api/generated/compas_timber.elements.Beam.remove_blank_extension.rst", "api/generated/compas_timber.elements.Beam.remove_features.rst", "api/generated/compas_timber.elements.Beam.reset.rst", "api/generated/compas_timber.elements.Beam.sha256.rst", "api/generated/compas_timber.elements.Beam.side_as_surface.rst", "api/generated/compas_timber.elements.Beam.to_json.rst", "api/generated/compas_timber.elements.Beam.to_jsonstring.rst", "api/generated/compas_timber.elements.Beam.transform.rst", "api/generated/compas_timber.elements.Beam.transformed.rst", "api/generated/compas_timber.elements.Beam.validate_data.rst", "api/generated/compas_timber.elements.Fastener.rst", "api/generated/compas_timber.elements.Fastener.ToString.rst", "api/generated/compas_timber.elements.Fastener.add_feature.rst", "api/generated/compas_timber.elements.Fastener.add_features.rst", "api/generated/compas_timber.elements.Fastener.compute_aabb.rst", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Fastener.compute_geometry.rst", "api/generated/compas_timber.elements.Fastener.compute_obb.rst", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Fastener.copy.rst", "api/generated/compas_timber.elements.Fastener.from_json.rst", "api/generated/compas_timber.elements.Fastener.from_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.remove_blank_extension.rst", "api/generated/compas_timber.elements.Fastener.remove_features.rst", "api/generated/compas_timber.elements.Fastener.reset.rst", "api/generated/compas_timber.elements.Fastener.sha256.rst", "api/generated/compas_timber.elements.Fastener.to_json.rst", "api/generated/compas_timber.elements.Fastener.to_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.transform.rst", "api/generated/compas_timber.elements.Fastener.transformed.rst", "api/generated/compas_timber.elements.Fastener.validate_data.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.copy.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data.rst", "api/generated/compas_timber.elements.Plate.rst", "api/generated/compas_timber.elements.Plate.ToString.rst", "api/generated/compas_timber.elements.Plate.add_feature.rst", "api/generated/compas_timber.elements.Plate.add_features.rst", "api/generated/compas_timber.elements.Plate.add_interface.rst", "api/generated/compas_timber.elements.Plate.check_outlines.rst", "api/generated/compas_timber.elements.Plate.compute_aabb.rst", "api/generated/compas_timber.elements.Plate.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Plate.compute_geometry.rst", "api/generated/compas_timber.elements.Plate.compute_obb.rst", "api/generated/compas_timber.elements.Plate.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Plate.copy.rst", "api/generated/compas_timber.elements.Plate.from_brep.rst", "api/generated/compas_timber.elements.Plate.from_json.rst", "api/generated/compas_timber.elements.Plate.from_jsonstring.rst", "api/generated/compas_timber.elements.Plate.from_outline_thickness.rst", "api/generated/compas_timber.elements.Plate.opp_side.rst", "api/generated/compas_timber.elements.Plate.remove_blank_extension.rst", "api/generated/compas_timber.elements.Plate.remove_features.rst", "api/generated/compas_timber.elements.Plate.reset.rst", "api/generated/compas_timber.elements.Plate.sha256.rst", "api/generated/compas_timber.elements.Plate.side_as_surface.rst", "api/generated/compas_timber.elements.Plate.to_json.rst", "api/generated/compas_timber.elements.Plate.to_jsonstring.rst", "api/generated/compas_timber.elements.Plate.transform.rst", "api/generated/compas_timber.elements.Plate.transformed.rst", "api/generated/compas_timber.elements.Plate.validate_data.rst", "api/generated/compas_timber.elements.TimberElement.rst", "api/generated/compas_timber.elements.TimberElement.ToString.rst", "api/generated/compas_timber.elements.TimberElement.add_feature.rst", "api/generated/compas_timber.elements.TimberElement.add_features.rst", "api/generated/compas_timber.elements.TimberElement.compute_aabb.rst", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh.rst", "api/generated/compas_timber.elements.TimberElement.compute_geometry.rst", "api/generated/compas_timber.elements.TimberElement.compute_obb.rst", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation.rst", "api/generated/compas_timber.elements.TimberElement.copy.rst", "api/generated/compas_timber.elements.TimberElement.from_json.rst", "api/generated/compas_timber.elements.TimberElement.from_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension.rst", "api/generated/compas_timber.elements.TimberElement.remove_features.rst", "api/generated/compas_timber.elements.TimberElement.reset.rst", "api/generated/compas_timber.elements.TimberElement.sha256.rst", "api/generated/compas_timber.elements.TimberElement.to_json.rst", "api/generated/compas_timber.elements.TimberElement.to_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.transform.rst", "api/generated/compas_timber.elements.TimberElement.transformed.rst", "api/generated/compas_timber.elements.TimberElement.validate_data.rst", "api/generated/compas_timber.elements.Wall.rst", "api/generated/compas_timber.elements.Wall.ToString.rst", "api/generated/compas_timber.elements.Wall.add_feature.rst", "api/generated/compas_timber.elements.Wall.add_features.rst", "api/generated/compas_timber.elements.Wall.compute_aabb.rst", "api/generated/compas_timber.elements.Wall.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Wall.compute_geometry.rst", "api/generated/compas_timber.elements.Wall.compute_obb.rst", "api/generated/compas_timber.elements.Wall.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Wall.copy.rst", "api/generated/compas_timber.elements.Wall.from_boundary.rst", "api/generated/compas_timber.elements.Wall.from_brep.rst", "api/generated/compas_timber.elements.Wall.from_json.rst", "api/generated/compas_timber.elements.Wall.from_jsonstring.rst", "api/generated/compas_timber.elements.Wall.remove_blank_extension.rst", "api/generated/compas_timber.elements.Wall.remove_features.rst", "api/generated/compas_timber.elements.Wall.reset.rst", "api/generated/compas_timber.elements.Wall.rotate.rst", "api/generated/compas_timber.elements.Wall.sha256.rst", "api/generated/compas_timber.elements.Wall.to_json.rst", "api/generated/compas_timber.elements.Wall.to_jsonstring.rst", "api/generated/compas_timber.elements.Wall.transform.rst", "api/generated/compas_timber.elements.Wall.transformed.rst", "api/generated/compas_timber.elements.Wall.validate_data.rst", "api/generated/compas_timber.errors.BeamJoiningError.rst", "api/generated/compas_timber.errors.FastenerApplicationError.rst", "api/generated/compas_timber.errors.FeatureApplicationError.rst", "api/generated/compas_timber.fabrication.BTLxPart.rst", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals.rst", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.copy.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data.rst", "api/generated/compas_timber.fabrication.BTLxWriter.rst", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml.rst", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer.rst", "api/generated/compas_timber.fabrication.BTLxWriter.write.rst", "api/generated/compas_timber.fabrication.DoubleCut.rst", "api/generated/compas_timber.fabrication.DoubleCut.ToString.rst", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DoubleCut.apply.rst", "api/generated/compas_timber.fabrication.DoubleCut.copy.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.scale.rst", "api/generated/compas_timber.fabrication.DoubleCut.scaled.rst", "api/generated/compas_timber.fabrication.DoubleCut.sha256.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailMortise.rst", "api/generated/compas_timber.fabrication.DovetailMortise.ToString.rst", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailMortise.apply.rst", "api/generated/compas_timber.fabrication.DovetailMortise.copy.rst", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scale.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scaled.rst", "api/generated/compas_timber.fabrication.DovetailMortise.sha256.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailTenon.rst", "api/generated/compas_timber.fabrication.DovetailTenon.ToString.rst", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailTenon.apply.rst", "api/generated/compas_timber.fabrication.DovetailTenon.copy.rst", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scale.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scaled.rst", "api/generated/compas_timber.fabrication.DovetailTenon.sha256.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data.rst", "api/generated/compas_timber.fabrication.Drilling.rst", "api/generated/compas_timber.fabrication.Drilling.ToString.rst", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Drilling.apply.rst", "api/generated/compas_timber.fabrication.Drilling.copy.rst", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_json.rst", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.scale.rst", "api/generated/compas_timber.fabrication.Drilling.scaled.rst", "api/generated/compas_timber.fabrication.Drilling.sha256.rst", "api/generated/compas_timber.fabrication.Drilling.to_json.rst", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.validate_data.rst", "api/generated/compas_timber.fabrication.EdgePositionType.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data.rst", "api/generated/compas_timber.fabrication.JackRafterCut.rst", "api/generated/compas_timber.fabrication.JackRafterCut.ToString.rst", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.JackRafterCut.apply.rst", "api/generated/compas_timber.fabrication.JackRafterCut.copy.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scale.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scaled.rst", "api/generated/compas_timber.fabrication.JackRafterCut.sha256.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.rst", "api/generated/compas_timber.fabrication.Lap.ToString.rst", "api/generated/compas_timber.fabrication.Lap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Lap.apply.rst", "api/generated/compas_timber.fabrication.Lap.copy.rst", "api/generated/compas_timber.fabrication.Lap.from_json.rst", "api/generated/compas_timber.fabrication.Lap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.scale.rst", "api/generated/compas_timber.fabrication.Lap.scaled.rst", "api/generated/compas_timber.fabrication.Lap.sha256.rst", "api/generated/compas_timber.fabrication.Lap.to_json.rst", "api/generated/compas_timber.fabrication.Lap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LimitationTopType.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.apply.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.copy.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.MachiningLimits.rst", "api/generated/compas_timber.fabrication.Mortise.rst", "api/generated/compas_timber.fabrication.Mortise.ToString.rst", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Mortise.apply.rst", "api/generated/compas_timber.fabrication.Mortise.copy.rst", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_json.rst", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.scale.rst", "api/generated/compas_timber.fabrication.Mortise.scaled.rst", "api/generated/compas_timber.fabrication.Mortise.sha256.rst", "api/generated/compas_timber.fabrication.Mortise.to_json.rst", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.validate_data.rst", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.OrientationType.rst", "api/generated/compas_timber.fabrication.Pocket.rst", "api/generated/compas_timber.fabrication.Pocket.ToString.rst", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Pocket.apply.rst", "api/generated/compas_timber.fabrication.Pocket.copy.rst", "api/generated/compas_timber.fabrication.Pocket.from_json.rst", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.scale.rst", "api/generated/compas_timber.fabrication.Pocket.scaled.rst", "api/generated/compas_timber.fabrication.Pocket.sha256.rst", "api/generated/compas_timber.fabrication.Pocket.to_json.rst", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.validate_data.rst", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Slot.rst", "api/generated/compas_timber.fabrication.Slot.ToString.rst", "api/generated/compas_timber.fabrication.Slot.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Slot.apply.rst", "api/generated/compas_timber.fabrication.Slot.copy.rst", "api/generated/compas_timber.fabrication.Slot.from_json.rst", "api/generated/compas_timber.fabrication.Slot.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Slot.scale.rst", "api/generated/compas_timber.fabrication.Slot.scaled.rst", "api/generated/compas_timber.fabrication.Slot.sha256.rst", "api/generated/compas_timber.fabrication.Slot.to_json.rst", "api/generated/compas_timber.fabrication.Slot.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.validate_data.rst", "api/generated/compas_timber.fabrication.StepJoint.rst", "api/generated/compas_timber.fabrication.StepJoint.ToString.rst", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJoint.add_tenon.rst", "api/generated/compas_timber.fabrication.StepJoint.apply.rst", "api/generated/compas_timber.fabrication.StepJoint.copy.rst", "api/generated/compas_timber.fabrication.StepJoint.from_json.rst", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.scale.rst", "api/generated/compas_timber.fabrication.StepJoint.scaled.rst", "api/generated/compas_timber.fabrication.StepJoint.sha256.rst", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.to_json.rst", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.validate_data.rst", "api/generated/compas_timber.fabrication.StepJointNotch.rst", "api/generated/compas_timber.fabrication.StepJointNotch.ToString.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJointNotch.apply.rst", "api/generated/compas_timber.fabrication.StepJointNotch.copy.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scale.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scaled.rst", "api/generated/compas_timber.fabrication.StepJointNotch.sha256.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data.rst", "api/generated/compas_timber.fabrication.StepShapeType.rst", "api/generated/compas_timber.fabrication.Tenon.rst", "api/generated/compas_timber.fabrication.Tenon.ToString.rst", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Tenon.apply.rst", "api/generated/compas_timber.fabrication.Tenon.copy.rst", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.from_json.rst", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.scale.rst", "api/generated/compas_timber.fabrication.Tenon.scaled.rst", "api/generated/compas_timber.fabrication.Tenon.sha256.rst", "api/generated/compas_timber.fabrication.Tenon.to_json.rst", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.validate_data.rst", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.TenonShapeType.rst", "api/generated/compas_timber.ghpython.add_gh_param.rst", "api/generated/compas_timber.ghpython.clear_gh_params.rst", "api/generated/compas_timber.ghpython.get_leaf_subclasses.rst", "api/generated/compas_timber.ghpython.item_input_valid.rst", "api/generated/compas_timber.ghpython.list_input_valid.rst", "api/generated/compas_timber.ghpython.manage_dynamic_params.rst", "api/generated/compas_timber.ghpython.rename_gh_input.rst", "api/generated/compas_timber.model.TimberModel.rst", "api/generated/compas_timber.model.TimberModel.ToString.rst", "api/generated/compas_timber.model.TimberModel.add_element.rst", "api/generated/compas_timber.model.TimberModel.add_elements.rst", "api/generated/compas_timber.model.TimberModel.add_group.rst", "api/generated/compas_timber.model.TimberModel.add_group_element.rst", "api/generated/compas_timber.model.TimberModel.add_interaction.rst", "api/generated/compas_timber.model.TimberModel.add_joint.rst", "api/generated/compas_timber.model.TimberModel.add_material.rst", "api/generated/compas_timber.model.TimberModel.assign_material.rst", "api/generated/compas_timber.model.TimberModel.compute_aabb.rst", "api/generated/compas_timber.model.TimberModel.compute_obb.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_beams.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls.rst", "api/generated/compas_timber.model.TimberModel.copy.rst", "api/generated/compas_timber.model.TimberModel.element_by_guid.rst", "api/generated/compas_timber.model.TimberModel.elements.rst", "api/generated/compas_timber.model.TimberModel.elements_connected_by.rst", "api/generated/compas_timber.model.TimberModel.from_json.rst", "api/generated/compas_timber.model.TimberModel.from_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.get_elements_in_group.rst", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element.rst", "api/generated/compas_timber.model.TimberModel.has_element.rst", "api/generated/compas_timber.model.TimberModel.has_group.rst", "api/generated/compas_timber.model.TimberModel.has_interaction.rst", "api/generated/compas_timber.model.TimberModel.has_material.rst", "api/generated/compas_timber.model.TimberModel.interactions.rst", "api/generated/compas_timber.model.TimberModel.materials.rst", "api/generated/compas_timber.model.TimberModel.process_joinery.rst", "api/generated/compas_timber.model.TimberModel.remove_element.rst", "api/generated/compas_timber.model.TimberModel.remove_interaction.rst", "api/generated/compas_timber.model.TimberModel.remove_joint.rst", "api/generated/compas_timber.model.TimberModel.rotate.rst", "api/generated/compas_timber.model.TimberModel.rotated.rst", "api/generated/compas_timber.model.TimberModel.scale.rst", "api/generated/compas_timber.model.TimberModel.scaled.rst", "api/generated/compas_timber.model.TimberModel.set_topologies.rst", "api/generated/compas_timber.model.TimberModel.sha256.rst", "api/generated/compas_timber.model.TimberModel.to_json.rst", "api/generated/compas_timber.model.TimberModel.to_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.transform.rst", "api/generated/compas_timber.model.TimberModel.transform_numpy.rst", "api/generated/compas_timber.model.TimberModel.transformed.rst", "api/generated/compas_timber.model.TimberModel.transformed_numpy.rst", "api/generated/compas_timber.model.TimberModel.translate.rst", "api/generated/compas_timber.model.TimberModel.translated.rst", "api/generated/compas_timber.model.TimberModel.validate_data.rst", "api/generated/compas_timber.planning.Actor.rst", "api/generated/compas_timber.planning.Actor.get_name.rst", "api/generated/compas_timber.planning.BuildingPlan.rst", "api/generated/compas_timber.planning.BuildingPlan.ToString.rst", "api/generated/compas_timber.planning.BuildingPlan.add_step.rst", "api/generated/compas_timber.planning.BuildingPlan.copy.rst", "api/generated/compas_timber.planning.BuildingPlan.from_json.rst", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.sha256.rst", "api/generated/compas_timber.planning.BuildingPlan.to_json.rst", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.validate_data.rst", "api/generated/compas_timber.planning.BuildingPlanParser.rst", "api/generated/compas_timber.planning.BuildingPlanParser.parse.rst", "api/generated/compas_timber.planning.BuildingPlanParser.serialize.rst", "api/generated/compas_timber.planning.Instruction.rst", "api/generated/compas_timber.planning.Instruction.ToString.rst", "api/generated/compas_timber.planning.Instruction.copy.rst", "api/generated/compas_timber.planning.Instruction.from_json.rst", "api/generated/compas_timber.planning.Instruction.from_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.sha256.rst", "api/generated/compas_timber.planning.Instruction.to_json.rst", "api/generated/compas_timber.planning.Instruction.to_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.transform.rst", "api/generated/compas_timber.planning.Instruction.validate_data.rst", "api/generated/compas_timber.planning.LinearDimension.rst", "api/generated/compas_timber.planning.LinearDimension.ToString.rst", "api/generated/compas_timber.planning.LinearDimension.copy.rst", "api/generated/compas_timber.planning.LinearDimension.from_json.rst", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.sha256.rst", "api/generated/compas_timber.planning.LinearDimension.to_json.rst", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.transform.rst", "api/generated/compas_timber.planning.LinearDimension.validate_data.rst", "api/generated/compas_timber.planning.Model3d.rst", "api/generated/compas_timber.planning.Model3d.ToString.rst", "api/generated/compas_timber.planning.Model3d.copy.rst", "api/generated/compas_timber.planning.Model3d.from_json.rst", "api/generated/compas_timber.planning.Model3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.sha256.rst", "api/generated/compas_timber.planning.Model3d.to_json.rst", "api/generated/compas_timber.planning.Model3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.transform.rst", "api/generated/compas_timber.planning.Model3d.validate_data.rst", "api/generated/compas_timber.planning.SimpleSequenceGenerator.rst", "api/generated/compas_timber.planning.Step.rst", "api/generated/compas_timber.planning.Step.ToString.rst", "api/generated/compas_timber.planning.Step.copy.rst", "api/generated/compas_timber.planning.Step.from_json.rst", "api/generated/compas_timber.planning.Step.from_jsonstring.rst", "api/generated/compas_timber.planning.Step.sha256.rst", "api/generated/compas_timber.planning.Step.to_json.rst", "api/generated/compas_timber.planning.Step.to_jsonstring.rst", "api/generated/compas_timber.planning.Step.transform.rst", "api/generated/compas_timber.planning.Step.validate_data.rst", "api/generated/compas_timber.planning.Text3d.rst", "api/generated/compas_timber.planning.Text3d.ToString.rst", "api/generated/compas_timber.planning.Text3d.copy.rst", "api/generated/compas_timber.planning.Text3d.from_json.rst", "api/generated/compas_timber.planning.Text3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.sha256.rst", "api/generated/compas_timber.planning.Text3d.to_json.rst", "api/generated/compas_timber.planning.Text3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.transform.rst", "api/generated/compas_timber.planning.Text3d.validate_data.rst", "api/generated/compas_timber.rhino.find_neighboring_elements.rst", "citing.rst", "contribution.rst", "contribution/BTLx_contribution_guide.rst", "contribution/joints_contribution_guide.rst", "index.rst", "installation.rst", "license.rst", "tutorials.rst", "tutorials/grasshopper/attributes.rst", "tutorials/grasshopper/beams.rst", "tutorials/grasshopper/design.rst", "tutorials/grasshopper/examples.rst", "tutorials/grasshopper/fabrication.rst", "tutorials/grasshopper/features.rst", "tutorials/grasshopper/installation.rst", "tutorials/grasshopper/joint_rules.rst", "tutorials/grasshopper/model.rst", "tutorials/grasshopper/show.rst", "tutorials/grasshopper/utils.rst", "tutorials/grasshopper/workflow.rst"], "titles": ["API Reference", "compas_timber.connections", "compas_timber.design", "compas_timber.elements", "compas_timber.errors", "compas_timber.fabrication", "compas_timber.ghpython", "compas_timber.model", "compas_timber.planning", "compas_timber.rhino", "BallNodeJoint", "BallNodeJoint.ToString", "BallNodeJoint.add_extensions", "BallNodeJoint.add_features", "BallNodeJoint.check_elements_compatibility", "BallNodeJoint.copy", "BallNodeJoint.create", "BallNodeJoint.element_count_complies", "BallNodeJoint.from_json", "BallNodeJoint.from_jsonstring", "BallNodeJoint.restore_beams_from_keys", "BallNodeJoint.sha256", "BallNodeJoint.to_json", "BallNodeJoint.to_jsonstring", "BallNodeJoint.validate_data", "BeamGroupAnalyzer", "BeamGroupAnalyzer.find", "Cluster", "CompositeAnalyzer", "CompositeAnalyzer.find", "CompositeAnalyzer.from_model", "ConnectionSolver", "ConnectionSolver.find_intersecting_pairs", "ConnectionSolver.find_topology", "ConnectionSolver.find_wall_wall_topology", "GenericJoint", "GenericJoint.ToString", "GenericJoint.add_extensions", "GenericJoint.add_features", "GenericJoint.check_elements_compatibility", "GenericJoint.copy", "GenericJoint.create", "GenericJoint.element_count_complies", "GenericJoint.from_json", "GenericJoint.from_jsonstring", "GenericJoint.restore_beams_from_keys", "GenericJoint.sha256", "GenericJoint.to_json", "GenericJoint.to_jsonstring", "GenericJoint.validate_data", "Joint", "Joint.ToString", "Joint.add_extensions", "Joint.add_features", "Joint.check_elements_compatibility", "Joint.copy", "Joint.create", "Joint.element_count_complies", "Joint.from_json", "Joint.from_jsonstring", "Joint.restore_beams_from_keys", "Joint.sha256", "Joint.to_json", "Joint.to_jsonstring", "Joint.validate_data", "JointTopology", "JointTopology.get_name", "LButtJoint", "LButtJoint.ToString", "LButtJoint.add_extensions", "LButtJoint.add_features", "LButtJoint.check_elements_compatibility", "LButtJoint.copy", "LButtJoint.create", "LButtJoint.element_count_complies", "LButtJoint.from_json", "LButtJoint.from_jsonstring", "LButtJoint.restore_beams_from_keys", "LButtJoint.sha256", "LButtJoint.to_json", "LButtJoint.to_jsonstring", "LButtJoint.update_beam_roles", "LButtJoint.validate_data", "LFrenchRidgeLapJoint", "LFrenchRidgeLapJoint.ToString", "LFrenchRidgeLapJoint.add_extensions", "LFrenchRidgeLapJoint.add_features", "LFrenchRidgeLapJoint.check_elements_compatibility", "LFrenchRidgeLapJoint.copy", "LFrenchRidgeLapJoint.create", "LFrenchRidgeLapJoint.element_count_complies", "LFrenchRidgeLapJoint.from_json", "LFrenchRidgeLapJoint.from_jsonstring", "LFrenchRidgeLapJoint.restore_beams_from_keys", "LFrenchRidgeLapJoint.sha256", "LFrenchRidgeLapJoint.to_json", "LFrenchRidgeLapJoint.to_jsonstring", "LFrenchRidgeLapJoint.validate_data", "LLapJoint", "LLapJoint.ToString", "LLapJoint.add_extensions", "LLapJoint.add_features", "LLapJoint.check_elements_compatibility", "LLapJoint.copy", "LLapJoint.create", "LLapJoint.element_count_complies", "LLapJoint.from_json", "LLapJoint.from_jsonstring", "LLapJoint.restore_beams_from_keys", "LLapJoint.sha256", "LLapJoint.to_json", "LLapJoint.to_jsonstring", "LLapJoint.validate_data", "LMiterJoint", "LMiterJoint.ToString", "LMiterJoint.add_extensions", "LMiterJoint.add_features", "LMiterJoint.check_elements_compatibility", "LMiterJoint.copy", "LMiterJoint.create", "LMiterJoint.element_count_complies", "LMiterJoint.from_json", "LMiterJoint.from_jsonstring", "LMiterJoint.get_cutoff_plane", "LMiterJoint.get_cutting_planes", "LMiterJoint.restore_beams_from_keys", "LMiterJoint.sha256", "LMiterJoint.to_json", "LMiterJoint.to_jsonstring", "LMiterJoint.validate_data", "LapJoint", "LapJoint.ToString", "LapJoint.add_extensions", "LapJoint.add_features", "LapJoint.check_elements_compatibility", "LapJoint.copy", "LapJoint.create", "LapJoint.element_count_complies", "LapJoint.from_json", "LapJoint.from_jsonstring", "LapJoint.restore_beams_from_keys", "LapJoint.sha256", "LapJoint.to_json", "LapJoint.to_jsonstring", "LapJoint.validate_data", "NBeamKDTreeAnalyzer", "NBeamKDTreeAnalyzer.find", "QuadAnalyzer", "TBirdsmouthJoint", "TBirdsmouthJoint.ToString", "TBirdsmouthJoint.add_extensions", "TBirdsmouthJoint.add_features", "TBirdsmouthJoint.check_elements_compatibility", "TBirdsmouthJoint.copy", "TBirdsmouthJoint.create", "TBirdsmouthJoint.element_count_complies", "TBirdsmouthJoint.from_json", "TBirdsmouthJoint.from_jsonstring", "TBirdsmouthJoint.restore_beams_from_keys", "TBirdsmouthJoint.sha256", "TBirdsmouthJoint.to_json", "TBirdsmouthJoint.to_jsonstring", "TBirdsmouthJoint.validate_data", "TButtJoint", "TButtJoint.ToString", "TButtJoint.add_extensions", "TButtJoint.add_features", "TButtJoint.check_elements_compatibility", "TButtJoint.copy", "TButtJoint.create", "TButtJoint.element_count_complies", "TButtJoint.from_json", "TButtJoint.from_jsonstring", "TButtJoint.restore_beams_from_keys", "TButtJoint.sha256", "TButtJoint.to_json", "TButtJoint.to_jsonstring", "TButtJoint.validate_data", "TDovetailJoint", "TDovetailJoint.ToString", "TDovetailJoint.add_extensions", "TDovetailJoint.add_features", "TDovetailJoint.check_elements_compatibility", "TDovetailJoint.copy", "TDovetailJoint.create", "TDovetailJoint.define_dovetail_tool", "TDovetailJoint.element_count_complies", "TDovetailJoint.from_json", "TDovetailJoint.from_jsonstring", "TDovetailJoint.restore_beams_from_keys", "TDovetailJoint.sha256", "TDovetailJoint.to_json", "TDovetailJoint.to_jsonstring", "TDovetailJoint.validate_data", "TLapJoint", "TLapJoint.ToString", "TLapJoint.add_extensions", "TLapJoint.add_features", "TLapJoint.check_elements_compatibility", "TLapJoint.copy", "TLapJoint.create", "TLapJoint.element_count_complies", "TLapJoint.from_json", "TLapJoint.from_jsonstring", "TLapJoint.restore_beams_from_keys", "TLapJoint.sha256", "TLapJoint.to_json", "TLapJoint.to_jsonstring", "TLapJoint.validate_data", "TStepJoint", "TStepJoint.ToString", "TStepJoint.add_extensions", "TStepJoint.add_features", "TStepJoint.check_elements_compatibility", "TStepJoint.copy", "TStepJoint.create", "TStepJoint.element_count_complies", "TStepJoint.from_json", "TStepJoint.from_jsonstring", "TStepJoint.restore_beams_from_keys", "TStepJoint.set_step_depths", "TStepJoint.sha256", "TStepJoint.to_json", "TStepJoint.to_jsonstring", "TStepJoint.validate_data", "TenonMortiseJoint", "TenonMortiseJoint.ToString", "TenonMortiseJoint.add_extensions", "TenonMortiseJoint.add_features", "TenonMortiseJoint.check_elements_compatibility", "TenonMortiseJoint.copy", "TenonMortiseJoint.create", "TenonMortiseJoint.element_count_complies", "TenonMortiseJoint.from_json", "TenonMortiseJoint.from_jsonstring", "TenonMortiseJoint.restore_beams_from_keys", "TenonMortiseJoint.set_default_values", "TenonMortiseJoint.sha256", "TenonMortiseJoint.to_json", "TenonMortiseJoint.to_jsonstring", "TenonMortiseJoint.validate_data", "TripletAnalyzer", "XLapJoint", "XLapJoint.ToString", "XLapJoint.add_extensions", "XLapJoint.add_features", "XLapJoint.check_elements_compatibility", "XLapJoint.copy", "XLapJoint.create", "XLapJoint.element_count_complies", "XLapJoint.from_json", "XLapJoint.from_jsonstring", "XLapJoint.restore_beams_from_keys", "XLapJoint.sha256", "XLapJoint.to_json", "XLapJoint.to_jsonstring", "XLapJoint.validate_data", "XNotchJoint", "XNotchJoint.ToString", "XNotchJoint.add_extensions", "XNotchJoint.add_features", "XNotchJoint.check_elements_compatibility", "XNotchJoint.copy", "XNotchJoint.create", "XNotchJoint.element_count_complies", "XNotchJoint.from_json", "XNotchJoint.from_jsonstring", "XNotchJoint.restore_beams_from_keys", "XNotchJoint.sha256", "XNotchJoint.to_json", "XNotchJoint.to_jsonstring", "XNotchJoint.validate_data", "YButtJoint", "YButtJoint.ToString", "YButtJoint.add_extensions", "YButtJoint.add_features", "YButtJoint.check_elements_compatibility", "YButtJoint.copy", "YButtJoint.create", "YButtJoint.cross_beam_ref_side_index", "YButtJoint.element_count_complies", "YButtJoint.from_json", "YButtJoint.from_jsonstring", "YButtJoint.get_miter_planes", "YButtJoint.main_beam_ref_side_index", "YButtJoint.restore_beams_from_keys", "YButtJoint.sha256", "YButtJoint.to_json", "YButtJoint.to_jsonstring", "YButtJoint.validate_data", "find_neighboring_elements", "CategoryRule", "CategoryRule.ToString", "CategoryRule.comply", "CategoryRule.get_category_rules", "CategoryRule.get_direct_rules", "CategoryRule.get_topology_rules", "CategoryRule.joints_from_beams_and_rules", "CategoryRule.reorder", "DebugInfomation", "DebugInfomation.ToString", "DebugInfomation.add_fastener_error", "DebugInfomation.add_feature_error", "DebugInfomation.add_joint_error", "DirectRule", "DirectRule.ToString", "DirectRule.comply", "DirectRule.contains", "DirectRule.get_category_rules", "DirectRule.get_direct_rules", "DirectRule.get_topology_rules", "DirectRule.joints_from_beams_and_rules", "FeatureDefinition", "FeatureDefinition.ToString", "JointDefinition", "JointDefinition.ToString", "JointDefinition.is_identical", "JointDefinition.match", "JointRule", "JointRule.comply", "JointRule.get_category_rules", "JointRule.get_direct_rules", "JointRule.get_topology_rules", "JointRule.joints_from_beams_and_rules", "SurfaceModel", "SurfaceModel.beam_category_names", "SurfaceModel.create_model", "SurfaceModel.cull_overlaps", "SurfaceModel.distance_between_elements", "SurfaceModel.generate_frame", "SurfaceModel.generate_perimeter_beams", "SurfaceModel.generate_plates", "SurfaceModel.generate_stud_lines", "SurfaceModel.generate_studs", "SurfaceModel.generate_windows", "SurfaceModel.get_beam_intersections", "SurfaceModel.get_interior_segment_indices", "SurfaceModel.offset_elements", "SurfaceModel.parse_loops", "SurfaceModel.trim_jack_studs", "SurfaceModel.trim_king_studs", "SurfaceModel.trim_studs", "TopologyRule", "TopologyRule.ToString", "TopologyRule.comply", "TopologyRule.get_category_rules", "TopologyRule.get_direct_rules", "TopologyRule.get_topology_rules", "TopologyRule.joints_from_beams_and_rules", "guess_joint_topology_2beams", "set_default_joints", "Beam", "Beam.ToString", "Beam.add_blank_extension", "Beam.add_feature", "Beam.add_features", "Beam.back_side", "Beam.compute_aabb", "Beam.compute_collision_mesh", "Beam.compute_geometry", "Beam.compute_obb", "Beam.compute_worldtransformation", "Beam.copy", "Beam.endpoint_closest_to_point", "Beam.extension_to_plane", "Beam.from_centerline", "Beam.from_endpoints", "Beam.from_json", "Beam.from_jsonstring", "Beam.front_side", "Beam.get_dimensions_relative_to_side", "Beam.opp_side", "Beam.remove_blank_extension", "Beam.remove_features", "Beam.reset", "Beam.sha256", "Beam.side_as_surface", "Beam.to_json", "Beam.to_jsonstring", "Beam.transform", "Beam.transformed", "Beam.validate_data", "Fastener", "Fastener.ToString", "Fastener.add_feature", "Fastener.add_features", "Fastener.compute_aabb", "Fastener.compute_collision_mesh", "Fastener.compute_geometry", "Fastener.compute_obb", "Fastener.compute_worldtransformation", "Fastener.copy", "Fastener.from_json", "Fastener.from_jsonstring", "Fastener.remove_blank_extension", "Fastener.remove_features", "Fastener.reset", "Fastener.sha256", "Fastener.to_json", "Fastener.to_jsonstring", "Fastener.transform", "Fastener.transformed", "Fastener.validate_data", "FastenerTimberInterface", "FastenerTimberInterface.ToString", "FastenerTimberInterface.copy", "FastenerTimberInterface.from_json", "FastenerTimberInterface.from_jsonstring", "FastenerTimberInterface.get_features", "FastenerTimberInterface.sha256", "FastenerTimberInterface.to_json", "FastenerTimberInterface.to_jsonstring", "FastenerTimberInterface.validate_data", "Plate", "Plate.ToString", "Plate.add_feature", "Plate.add_features", "Plate.add_interface", "Plate.check_outlines", "Plate.compute_aabb", "Plate.compute_collision_mesh", "Plate.compute_geometry", "Plate.compute_obb", "Plate.compute_worldtransformation", "Plate.copy", "Plate.from_brep", "Plate.from_json", "Plate.from_jsonstring", "Plate.from_outline_thickness", "Plate.opp_side", "Plate.remove_blank_extension", "Plate.remove_features", "Plate.reset", "Plate.sha256", "Plate.side_as_surface", "Plate.to_json", "Plate.to_jsonstring", "Plate.transform", "Plate.transformed", "Plate.validate_data", "TimberElement", "TimberElement.ToString", "TimberElement.add_feature", "TimberElement.add_features", "TimberElement.compute_aabb", "TimberElement.compute_collision_mesh", "TimberElement.compute_geometry", "TimberElement.compute_obb", "TimberElement.compute_worldtransformation", "TimberElement.copy", "TimberElement.from_json", "TimberElement.from_jsonstring", "TimberElement.remove_blank_extension", "TimberElement.remove_features", "TimberElement.reset", "TimberElement.sha256", "TimberElement.to_json", "TimberElement.to_jsonstring", "TimberElement.transform", "TimberElement.transformed", "TimberElement.validate_data", "Wall", "Wall.ToString", "Wall.add_feature", "Wall.add_features", "Wall.compute_aabb", "Wall.compute_collision_mesh", "Wall.compute_geometry", "Wall.compute_obb", "Wall.compute_worldtransformation", "Wall.copy", "Wall.from_boundary", "Wall.from_brep", "Wall.from_json", "Wall.from_jsonstring", "Wall.remove_blank_extension", "Wall.remove_features", "Wall.reset", "Wall.rotate", "Wall.sha256", "Wall.to_json", "Wall.to_jsonstring", "Wall.transform", "Wall.transformed", "Wall.validate_data", "BeamJoiningError", "FastenerApplicationError", "FeatureApplicationError", "BTLxPart", "BTLxPart.et_point_vals", "BTLxPart.ref_side_from_face", "BTLxProcessing", "BTLxProcessing.ToString", "BTLxProcessing.add_subprocessing", "BTLxProcessing.copy", "BTLxProcessing.from_json", "BTLxProcessing.from_jsonstring", "BTLxProcessing.scaled", "BTLxProcessing.sha256", "BTLxProcessing.to_json", "BTLxProcessing.to_jsonstring", "BTLxProcessing.validate_data", "BTLxWriter", "BTLxWriter.model_to_xml", "BTLxWriter.register_type_serializer", "BTLxWriter.write", "DoubleCut", "DoubleCut.ToString", "DoubleCut.add_subprocessing", "DoubleCut.apply", "DoubleCut.copy", "DoubleCut.from_json", "DoubleCut.from_jsonstring", "DoubleCut.from_planes_and_beam", "DoubleCut.from_shapes_and_element", "DoubleCut.planes_from_params_and_beam", "DoubleCut.scale", "DoubleCut.scaled", "DoubleCut.sha256", "DoubleCut.to_json", "DoubleCut.to_jsonstring", "DoubleCut.validate_data", "DovetailMortise", "DovetailMortise.ToString", "DovetailMortise.add_subprocessing", "DovetailMortise.apply", "DovetailMortise.copy", "DovetailMortise.define_dovetail_tool", "DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "DovetailMortise.dovetail_volume_from_params_and_beam", "DovetailMortise.frame_from_params_and_beam", "DovetailMortise.from_frame_and_beam", "DovetailMortise.from_json", "DovetailMortise.from_jsonstring", "DovetailMortise.scale", "DovetailMortise.scaled", "DovetailMortise.sha256", "DovetailMortise.to_json", "DovetailMortise.to_jsonstring", "DovetailMortise.validate_data", "DovetailTenon", "DovetailTenon.ToString", "DovetailTenon.add_subprocessing", "DovetailTenon.apply", "DovetailTenon.copy", "DovetailTenon.define_dovetail_tool", "DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "DovetailTenon.dovetail_volume_from_params_and_beam", "DovetailTenon.frame_from_params_and_beam", "DovetailTenon.from_json", "DovetailTenon.from_jsonstring", "DovetailTenon.from_plane_and_beam", "DovetailTenon.scale", "DovetailTenon.scaled", "DovetailTenon.sha256", "DovetailTenon.to_json", "DovetailTenon.to_jsonstring", "DovetailTenon.validate_data", "Drilling", "Drilling.ToString", "Drilling.add_subprocessing", "Drilling.apply", "Drilling.copy", "Drilling.cylinder_from_params_and_element", "Drilling.from_json", "Drilling.from_jsonstring", "Drilling.from_line_and_element", "Drilling.from_shapes_and_element", "Drilling.scale", "Drilling.scaled", "Drilling.sha256", "Drilling.to_json", "Drilling.to_jsonstring", "Drilling.validate_data", "EdgePositionType", "FrenchRidgeLap", "FrenchRidgeLap.ToString", "FrenchRidgeLap.add_subprocessing", "FrenchRidgeLap.apply", "FrenchRidgeLap.copy", "FrenchRidgeLap.frame_from_params_and_beam", "FrenchRidgeLap.from_beam_beam_and_plane", "FrenchRidgeLap.from_json", "FrenchRidgeLap.from_jsonstring", "FrenchRidgeLap.lap_volume_from_params_and_beam", "FrenchRidgeLap.scale", "FrenchRidgeLap.scaled", "FrenchRidgeLap.sha256", "FrenchRidgeLap.to_json", "FrenchRidgeLap.to_jsonstring", "FrenchRidgeLap.validate_data", "JackRafterCut", "JackRafterCut.ToString", "JackRafterCut.add_subprocessing", "JackRafterCut.apply", "JackRafterCut.copy", "JackRafterCut.from_json", "JackRafterCut.from_jsonstring", "JackRafterCut.from_plane_and_beam", "JackRafterCut.from_shapes_and_element", "JackRafterCut.plane_from_params_and_beam", "JackRafterCut.scale", "JackRafterCut.scaled", "JackRafterCut.sha256", "JackRafterCut.to_json", "JackRafterCut.to_jsonstring", "JackRafterCut.validate_data", "Lap", "Lap.ToString", "Lap.add_subprocessing", "Lap.apply", "Lap.copy", "Lap.from_json", "Lap.from_jsonstring", "Lap.from_plane_and_beam", "Lap.from_shapes_and_element", "Lap.from_volume_and_beam", "Lap.scale", "Lap.scaled", "Lap.sha256", "Lap.to_json", "Lap.to_jsonstring", "Lap.validate_data", "Lap.volume_from_params_and_beam", "LimitationTopType", "LongitudinalCut", "LongitudinalCut.ToString", "LongitudinalCut.add_subprocessing", "LongitudinalCut.apply", "LongitudinalCut.copy", "LongitudinalCut.from_json", "LongitudinalCut.from_jsonstring", "LongitudinalCut.from_plane_and_beam", "LongitudinalCut.from_shapes_and_element", "LongitudinalCut.plane_from_params_and_beam", "LongitudinalCut.scaled", "LongitudinalCut.sha256", "LongitudinalCut.to_json", "LongitudinalCut.to_jsonstring", "LongitudinalCut.validate_data", "LongitudinalCut.volume_from_params_and_beam", "MachiningLimits", "Mortise", "Mortise.ToString", "Mortise.add_subprocessing", "Mortise.apply", "Mortise.copy", "Mortise.frame_from_params_and_beam", "Mortise.from_frame_and_beam", "Mortise.from_json", "Mortise.from_jsonstring", "Mortise.scale", "Mortise.scaled", "Mortise.sha256", "Mortise.to_json", "Mortise.to_jsonstring", "Mortise.validate_data", "Mortise.volume_from_params_and_beam", "OrientationType", "Pocket", "Pocket.ToString", "Pocket.add_subprocessing", "Pocket.apply", "Pocket.copy", "Pocket.from_json", "Pocket.from_jsonstring", "Pocket.from_shapes_and_element", "Pocket.from_volume_and_element", "Pocket.scale", "Pocket.scaled", "Pocket.sha256", "Pocket.to_json", "Pocket.to_jsonstring", "Pocket.validate_data", "Pocket.volume_from_params_and_element", "Slot", "Slot.ToString", "Slot.add_subprocessing", "Slot.apply", "Slot.copy", "Slot.from_json", "Slot.from_jsonstring", "Slot.from_plane_and_beam", "Slot.scale", "Slot.scaled", "Slot.sha256", "Slot.to_json", "Slot.to_jsonstring", "Slot.validate_data", "StepJoint", "StepJoint.ToString", "StepJoint.add_subprocessing", "StepJoint.add_tenon", "StepJoint.apply", "StepJoint.copy", "StepJoint.from_json", "StepJoint.from_jsonstring", "StepJoint.from_plane_and_beam", "StepJoint.planes_from_params_and_beam", "StepJoint.scale", "StepJoint.scaled", "StepJoint.sha256", "StepJoint.tenon_volume_from_params_and_beam", "StepJoint.to_json", "StepJoint.to_jsonstring", "StepJoint.validate_data", "StepJointNotch", "StepJointNotch.ToString", "StepJointNotch.add_mortise", "StepJointNotch.add_subprocessing", "StepJointNotch.apply", "StepJointNotch.copy", "StepJointNotch.from_json", "StepJointNotch.from_jsonstring", "StepJointNotch.from_plane_and_beam", "StepJointNotch.mortise_volume_from_params_and_beam", "StepJointNotch.planes_from_params_and_beam", "StepJointNotch.scale", "StepJointNotch.scaled", "StepJointNotch.sha256", "StepJointNotch.to_json", "StepJointNotch.to_jsonstring", "StepJointNotch.validate_data", "StepShapeType", "Tenon", "Tenon.ToString", "Tenon.add_subprocessing", "Tenon.apply", "Tenon.copy", "Tenon.frame_from_params_and_beam", "Tenon.from_json", "Tenon.from_jsonstring", "Tenon.from_plane_and_beam", "Tenon.scale", "Tenon.scaled", "Tenon.sha256", "Tenon.to_json", "Tenon.to_jsonstring", "Tenon.validate_data", "Tenon.volume_from_params_and_beam", "TenonShapeType", "add_gh_param", "clear_gh_params", "get_leaf_subclasses", "item_input_valid", "list_input_valid", "manage_dynamic_params", "rename_gh_input", "TimberModel", "TimberModel.ToString", "TimberModel.add_element", "TimberModel.add_elements", "TimberModel.add_group", "TimberModel.add_group_element", "TimberModel.add_interaction", "TimberModel.add_joint", "TimberModel.add_material", "TimberModel.assign_material", "TimberModel.compute_aabb", "TimberModel.compute_obb", "TimberModel.connect_adjacent_beams", "TimberModel.connect_adjacent_walls", "TimberModel.copy", "TimberModel.element_by_guid", "TimberModel.elements", "TimberModel.elements_connected_by", "TimberModel.from_json", "TimberModel.from_jsonstring", "TimberModel.get_elements_in_group", "TimberModel.get_interactions_for_element", "TimberModel.has_element", "TimberModel.has_group", "TimberModel.has_interaction", "TimberModel.has_material", "TimberModel.interactions", "TimberModel.materials", "TimberModel.process_joinery", "TimberModel.remove_element", "TimberModel.remove_interaction", "TimberModel.remove_joint", "TimberModel.rotate", "TimberModel.rotated", "TimberModel.scale", "TimberModel.scaled", "TimberModel.set_topologies", "TimberModel.sha256", "TimberModel.to_json", "TimberModel.to_jsonstring", "TimberModel.transform", "TimberModel.transform_numpy", "TimberModel.transformed", "TimberModel.transformed_numpy", "TimberModel.translate", "TimberModel.translated", "TimberModel.validate_data", "Actor", "Actor.get_name", "BuildingPlan", "BuildingPlan.ToString", "BuildingPlan.add_step", "BuildingPlan.copy", "BuildingPlan.from_json", "BuildingPlan.from_jsonstring", "BuildingPlan.sha256", "BuildingPlan.to_json", "BuildingPlan.to_jsonstring", "BuildingPlan.validate_data", "BuildingPlanParser", "BuildingPlanParser.parse", "BuildingPlanParser.serialize", "Instruction", "Instruction.ToString", "Instruction.copy", "Instruction.from_json", "Instruction.from_jsonstring", "Instruction.sha256", "Instruction.to_json", "Instruction.to_jsonstring", "Instruction.transform", "Instruction.validate_data", "LinearDimension", "LinearDimension.ToString", "LinearDimension.copy", "LinearDimension.from_json", "LinearDimension.from_jsonstring", "LinearDimension.sha256", "LinearDimension.to_json", "LinearDimension.to_jsonstring", "LinearDimension.transform", "LinearDimension.validate_data", "Model3d", "Model3d.ToString", "Model3d.copy", "Model3d.from_json", "Model3d.from_jsonstring", "Model3d.sha256", "Model3d.to_json", "Model3d.to_jsonstring", "Model3d.transform", "Model3d.validate_data", "SimpleSequenceGenerator", "Step", "Step.ToString", "Step.copy", "Step.from_json", "Step.from_jsonstring", "Step.sha256", "Step.to_json", "Step.to_jsonstring", "Step.transform", "Step.validate_data", "Text3d", "Text3d.ToString", "Text3d.copy", "Text3d.from_json", "Text3d.from_jsonstring", "Text3d.sha256", "Text3d.to_json", "Text3d.to_jsonstring", "Text3d.transform", "Text3d.validate_data", "find_neighboring_elements", "Citing", "Developer Guide", "BTLx Contribution Guide", "Joints Contribution Guide", "COMPAS Timber Documentation", "Installation", "License", "Grasshopper plugin", "Attributes", "Beams", "Design", "Examples", "Fabrication", "Features", "Installation Guide", "Joint Rules", "Model", "Show", "Utils", "Workflow"], "terms": {"compas_timb": [0, 10, 16, 20, 25, 27, 28, 31, 35, 41, 50, 56, 60, 65, 67, 73, 83, 89, 98, 104, 113, 119, 130, 136, 145, 147, 148, 154, 163, 169, 178, 184, 194, 200, 209, 215, 225, 231, 241, 242, 248, 257, 263, 272, 278, 290, 291, 299, 304, 312, 314, 318, 324, 342, 349, 350, 351, 382, 403, 413, 425, 440, 461, 485, 486, 487, 488, 491, 502, 506, 509, 514, 515, 522, 525, 528, 529, 530, 540, 543, 547, 548, 558, 561, 563, 566, 567, 574, 575, 578, 580, 584, 591, 594, 599, 600, 607, 610, 623, 624, 625, 628, 633, 634, 640, 641, 642, 645, 647, 657, 658, 659, 662, 674, 675, 678, 689, 693, 698, 702, 706, 710, 715, 716, 723, 724, 727, 729, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 753, 795, 797, 807, 810, 820, 830, 840, 841, 851, 861, 862, 864, 865, 866, 867, 876], "model": [0, 10, 16, 20, 30, 35, 41, 45, 56, 60, 67, 73, 77, 83, 86, 89, 93, 98, 104, 108, 113, 119, 125, 130, 136, 140, 145, 146, 147, 148, 154, 158, 163, 169, 173, 178, 184, 189, 194, 200, 204, 209, 215, 219, 225, 231, 235, 241, 242, 248, 252, 257, 263, 267, 272, 278, 285, 324, 350, 351, 361, 388, 390, 403, 413, 423, 448, 469, 502, 503, 505, 748, 750, 751, 752, 753, 754, 755, 756, 757, 761, 764, 770, 771, 773, 774, 775, 776, 777, 779, 784, 788, 795, 830, 840, 865, 866, 869, 871, 874, 875, 881], "element": [0, 10, 13, 14, 16, 17, 20, 27, 28, 35, 39, 41, 42, 45, 50, 54, 56, 57, 60, 71, 73, 74, 87, 89, 90, 102, 104, 105, 117, 119, 120, 130, 134, 136, 137, 152, 154, 155, 167, 169, 170, 182, 184, 186, 198, 200, 201, 213, 215, 216, 225, 229, 231, 232, 246, 248, 249, 261, 263, 264, 276, 278, 280, 290, 291, 293, 297, 298, 304, 306, 307, 311, 312, 314, 317, 319, 323, 324, 342, 344, 348, 351, 357, 358, 359, 360, 361, 363, 374, 379, 380, 382, 386, 387, 389, 390, 396, 400, 401, 403, 408, 413, 419, 420, 421, 422, 423, 425, 432, 437, 438, 440, 444, 445, 446, 447, 448, 454, 458, 459, 461, 465, 466, 467, 468, 469, 477, 482, 483, 486, 487, 488, 489, 490, 491, 504, 509, 514, 515, 525, 528, 529, 530, 543, 547, 548, 558, 561, 563, 566, 567, 578, 580, 584, 594, 599, 600, 610, 615, 616, 623, 628, 633, 634, 640, 645, 647, 657, 658, 662, 666, 667, 674, 678, 693, 698, 702, 710, 715, 716, 727, 729, 739, 748, 750, 751, 753, 754, 757, 763, 765, 768, 769, 770, 772, 774, 777, 778, 840, 841, 861, 864, 866, 878], "connect": [0, 10, 11, 16, 20, 25, 26, 27, 28, 31, 35, 36, 41, 50, 51, 56, 60, 65, 67, 68, 73, 83, 84, 89, 98, 99, 104, 113, 114, 119, 130, 131, 136, 145, 146, 147, 148, 149, 154, 163, 164, 169, 178, 179, 184, 194, 195, 200, 209, 210, 215, 225, 226, 231, 241, 242, 243, 248, 257, 258, 263, 272, 273, 278, 290, 342, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 761, 765, 798, 811, 821, 831, 842, 852, 865, 866, 868, 877, 878], "fabric": [0, 488, 491, 502, 506, 514, 522, 540, 558, 566, 567, 574, 575, 591, 599, 607, 624, 625, 633, 641, 642, 658, 659, 675, 689, 706, 723, 724, 740, 862, 864, 866, 869], "design": [0, 290, 291, 299, 304, 312, 314, 318, 324, 342, 349, 350, 488, 862, 866, 869, 870, 871], "plan": [0, 795, 797, 807, 808, 809, 810, 820, 830, 840, 841, 851, 866], "error": [0, 1, 28, 299, 301, 302, 303, 357, 360, 386, 389, 419, 444, 447, 465, 468, 485, 486, 487, 561, 776, 864, 865, 866, 870, 872, 878], "ghpython": [0, 741, 742, 743, 744, 745, 746, 747, 866, 869], "rhino": [0, 11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 290, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 861, 866, 867, 870, 871, 877, 880], "The": [1, 9, 10, 15, 16, 17, 18, 19, 22, 23, 24, 27, 30, 40, 41, 42, 43, 44, 47, 48, 49, 50, 55, 56, 57, 58, 59, 62, 63, 64, 67, 72, 73, 74, 75, 76, 79, 80, 82, 83, 88, 89, 90, 91, 92, 95, 96, 97, 98, 103, 104, 105, 106, 107, 110, 111, 112, 118, 119, 120, 121, 122, 127, 128, 129, 130, 135, 136, 137, 138, 139, 142, 143, 144, 145, 148, 153, 154, 155, 156, 157, 160, 161, 162, 163, 168, 169, 170, 171, 172, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 199, 200, 201, 202, 203, 206, 207, 208, 214, 215, 216, 217, 218, 222, 223, 224, 225, 230, 231, 232, 233, 234, 238, 239, 240, 242, 247, 248, 249, 250, 251, 254, 255, 256, 257, 262, 263, 264, 265, 266, 269, 270, 271, 272, 277, 278, 280, 281, 282, 287, 288, 289, 290, 291, 293, 297, 298, 304, 306, 311, 323, 324, 342, 344, 348, 351, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 389, 391, 392, 393, 395, 398, 399, 400, 401, 402, 403, 405, 406, 407, 410, 411, 412, 413, 416, 419, 420, 422, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 443, 444, 445, 447, 449, 450, 451, 453, 456, 457, 458, 459, 460, 464, 465, 466, 468, 470, 473, 474, 476, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 724, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 746, 747, 748, 750, 751, 752, 753, 754, 757, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 779, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 800, 801, 802, 804, 805, 806, 812, 813, 814, 816, 817, 819, 822, 823, 824, 826, 827, 829, 832, 833, 834, 836, 837, 839, 843, 844, 845, 847, 848, 850, 853, 854, 855, 857, 858, 860, 861, 864, 865, 868, 869, 870, 871, 875, 877, 878, 880, 881], "follow": [1, 356, 369, 371, 403, 429, 864, 865, 868, 869, 871, 876, 877], "mai": [1, 864, 865, 870, 878], "rais": [1, 12, 14, 16, 18, 19, 37, 39, 43, 44, 52, 53, 54, 58, 59, 69, 71, 75, 76, 85, 87, 91, 92, 100, 102, 106, 107, 115, 117, 121, 122, 132, 133, 134, 138, 139, 150, 152, 156, 157, 165, 167, 171, 172, 180, 182, 187, 188, 196, 198, 202, 203, 211, 213, 217, 218, 227, 229, 233, 234, 244, 246, 250, 251, 259, 261, 265, 266, 274, 276, 281, 282, 367, 368, 392, 393, 406, 407, 426, 427, 450, 451, 473, 474, 486, 487, 495, 496, 509, 511, 512, 525, 532, 533, 543, 549, 550, 561, 564, 565, 578, 582, 583, 594, 596, 597, 610, 612, 613, 628, 630, 631, 645, 649, 650, 662, 664, 665, 678, 680, 681, 693, 695, 696, 710, 712, 713, 727, 730, 731, 750, 753, 754, 757, 766, 767, 776, 801, 802, 813, 814, 823, 824, 833, 834, 844, 845, 854, 855, 864, 865], "thi": [1, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 24, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 64, 67, 68, 69, 70, 71, 72, 73, 75, 76, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 129, 131, 132, 133, 134, 135, 136, 138, 139, 144, 148, 149, 150, 151, 152, 153, 154, 156, 157, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 208, 209, 210, 211, 212, 214, 215, 217, 218, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 289, 290, 291, 293, 298, 306, 307, 312, 314, 317, 319, 342, 344, 351, 352, 353, 356, 361, 362, 364, 367, 368, 369, 371, 372, 381, 382, 383, 390, 391, 392, 393, 402, 403, 404, 405, 406, 407, 412, 413, 414, 418, 423, 424, 426, 427, 429, 439, 440, 441, 448, 449, 450, 451, 460, 461, 462, 469, 470, 471, 473, 474, 484, 485, 488, 490, 492, 494, 495, 496, 501, 507, 509, 510, 511, 512, 513, 515, 521, 523, 525, 526, 528, 529, 530, 531, 532, 533, 534, 539, 541, 543, 544, 546, 547, 548, 549, 550, 551, 557, 559, 562, 563, 564, 565, 566, 568, 573, 576, 578, 579, 580, 581, 582, 583, 584, 585, 590, 592, 594, 595, 596, 597, 598, 600, 601, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 622, 623, 626, 628, 629, 630, 631, 632, 634, 639, 640, 643, 645, 646, 647, 648, 649, 650, 651, 656, 657, 660, 662, 663, 664, 665, 666, 667, 668, 673, 674, 676, 678, 679, 680, 681, 682, 683, 688, 690, 693, 694, 695, 696, 697, 698, 699, 702, 705, 707, 710, 711, 712, 713, 714, 715, 716, 717, 722, 725, 727, 728, 729, 730, 731, 732, 733, 738, 739, 748, 749, 753, 762, 766, 767, 768, 771, 776, 779, 781, 783, 790, 791, 793, 794, 798, 800, 801, 802, 806, 807, 811, 812, 813, 814, 819, 821, 822, 823, 824, 829, 831, 832, 833, 834, 839, 841, 842, 843, 844, 845, 850, 852, 853, 854, 855, 860, 861, 863, 864, 865, 868, 870, 872, 876, 877, 881], "modul": [1, 9, 866], "see": [1, 20, 60, 748, 864, 865, 869, 871, 873, 875, 876, 877, 880], "detail": [1, 869], "beamjoiningerror": [1, 12, 14, 37, 39, 52, 53, 54, 69, 71, 85, 87, 100, 102, 115, 117, 132, 133, 134, 150, 152, 165, 167, 180, 182, 196, 198, 211, 213, 227, 229, 244, 246, 259, 261, 274, 276, 299, 776, 865, 866], "featureapplicationerror": [1, 299, 509, 525, 543, 561, 578, 594, 610, 628, 645, 662, 678, 693, 710, 727, 864, 866], "fastenerapplicationerror": [1, 866], "contain": [9, 16, 18, 19, 32, 43, 44, 50, 58, 59, 75, 76, 91, 92, 106, 107, 121, 122, 138, 139, 146, 156, 157, 171, 172, 187, 188, 202, 203, 217, 218, 233, 234, 250, 251, 265, 266, 281, 282, 290, 293, 298, 299, 306, 312, 314, 344, 351, 367, 368, 392, 393, 406, 407, 413, 426, 427, 440, 450, 451, 461, 473, 474, 485, 495, 496, 511, 512, 532, 533, 549, 550, 564, 565, 582, 583, 596, 597, 612, 613, 630, 631, 649, 650, 664, 665, 680, 681, 695, 696, 712, 713, 730, 731, 748, 750, 753, 764, 766, 767, 770, 773, 775, 788, 797, 801, 802, 813, 814, 823, 824, 833, 834, 841, 844, 845, 854, 855, 861], "function": [9, 130, 290, 504, 768, 869], "type": [9, 10, 11, 15, 18, 19, 24, 30, 33, 36, 40, 43, 44, 49, 51, 55, 58, 59, 64, 67, 68, 72, 75, 76, 82, 83, 84, 88, 91, 92, 97, 98, 99, 103, 106, 107, 112, 113, 114, 118, 121, 122, 129, 130, 131, 135, 138, 139, 144, 148, 149, 153, 156, 157, 162, 163, 164, 168, 171, 172, 177, 178, 179, 183, 187, 188, 193, 194, 195, 199, 202, 203, 208, 209, 210, 214, 217, 218, 220, 224, 225, 226, 230, 233, 234, 240, 242, 243, 247, 250, 251, 256, 257, 258, 262, 265, 266, 271, 272, 273, 277, 281, 282, 289, 291, 304, 314, 342, 352, 362, 367, 368, 381, 383, 391, 392, 393, 402, 404, 405, 406, 407, 412, 414, 424, 426, 427, 439, 441, 449, 450, 451, 460, 462, 470, 473, 474, 484, 492, 494, 495, 496, 501, 504, 507, 510, 511, 512, 521, 522, 523, 526, 532, 533, 539, 541, 544, 549, 550, 557, 559, 562, 564, 565, 573, 576, 579, 582, 583, 590, 592, 595, 596, 597, 606, 608, 611, 612, 613, 622, 626, 629, 630, 631, 639, 643, 646, 649, 650, 656, 660, 663, 664, 665, 673, 676, 679, 680, 681, 688, 690, 694, 695, 696, 705, 707, 711, 712, 713, 722, 725, 728, 730, 731, 738, 749, 762, 765, 766, 767, 794, 795, 798, 800, 801, 802, 806, 811, 812, 813, 814, 819, 821, 822, 823, 824, 829, 831, 832, 833, 834, 839, 841, 842, 843, 844, 845, 850, 852, 853, 854, 855, 860, 864, 865, 866, 872, 876, 881], "meant": 9, "us": [9, 10, 11, 21, 24, 28, 29, 30, 32, 33, 34, 35, 36, 46, 49, 50, 51, 61, 64, 66, 67, 68, 78, 82, 83, 84, 94, 97, 98, 99, 109, 112, 113, 114, 126, 129, 130, 131, 141, 144, 145, 148, 149, 159, 162, 163, 164, 174, 177, 178, 179, 190, 193, 194, 195, 205, 208, 209, 210, 221, 224, 225, 226, 237, 240, 242, 243, 253, 256, 257, 258, 268, 271, 272, 273, 286, 289, 290, 293, 298, 306, 344, 352, 364, 375, 381, 383, 397, 402, 404, 409, 412, 414, 433, 439, 440, 441, 455, 460, 462, 471, 479, 484, 485, 488, 492, 498, 501, 502, 507, 518, 521, 522, 523, 531, 536, 539, 540, 541, 551, 554, 557, 559, 563, 570, 573, 576, 581, 587, 590, 592, 603, 606, 608, 614, 619, 622, 626, 636, 639, 643, 648, 653, 656, 660, 670, 673, 676, 685, 688, 690, 701, 705, 707, 719, 722, 725, 732, 735, 738, 748, 749, 753, 784, 785, 789, 790, 791, 792, 793, 794, 796, 798, 803, 806, 807, 811, 815, 819, 821, 825, 829, 831, 835, 839, 841, 842, 846, 850, 852, 856, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880], "context": [9, 865], "class": [10, 11, 25, 27, 28, 30, 31, 35, 36, 41, 50, 51, 56, 65, 67, 68, 73, 83, 84, 89, 98, 99, 104, 113, 114, 119, 130, 131, 136, 145, 148, 149, 154, 163, 164, 169, 178, 179, 184, 194, 195, 200, 209, 210, 215, 225, 226, 231, 242, 243, 248, 257, 258, 263, 272, 273, 278, 291, 299, 304, 312, 314, 318, 324, 342, 351, 352, 382, 383, 403, 404, 413, 414, 440, 441, 461, 462, 486, 488, 491, 492, 502, 506, 507, 522, 523, 540, 541, 558, 559, 574, 575, 576, 591, 592, 607, 608, 624, 625, 626, 641, 642, 643, 658, 659, 660, 675, 676, 689, 690, 706, 707, 714, 723, 724, 725, 740, 748, 749, 755, 788, 795, 797, 798, 807, 810, 811, 820, 821, 830, 831, 840, 841, 842, 851, 852, 866], "sourc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 870, 871], "base": [10, 25, 27, 28, 31, 35, 50, 65, 67, 81, 83, 98, 113, 130, 145, 148, 163, 178, 185, 194, 209, 220, 225, 242, 257, 272, 291, 299, 304, 312, 314, 318, 324, 342, 351, 359, 361, 382, 390, 403, 413, 423, 440, 446, 448, 461, 467, 469, 485, 486, 487, 488, 490, 491, 502, 506, 522, 527, 540, 545, 558, 574, 575, 591, 607, 624, 625, 632, 641, 642, 658, 659, 675, 689, 706, 723, 724, 740, 748, 776, 780, 781, 795, 797, 807, 810, 820, 830, 840, 841, 851, 864, 865, 878, 879, 881], "joint": [10, 12, 13, 14, 16, 17, 20, 27, 29, 31, 35, 37, 38, 39, 41, 42, 65, 67, 69, 70, 71, 73, 74, 81, 83, 85, 86, 87, 89, 90, 98, 100, 101, 102, 104, 105, 113, 115, 116, 117, 119, 120, 130, 132, 133, 134, 136, 137, 146, 148, 150, 151, 152, 154, 155, 163, 165, 166, 167, 169, 170, 178, 180, 181, 182, 184, 186, 194, 196, 197, 198, 200, 201, 209, 211, 212, 213, 215, 216, 220, 225, 227, 228, 229, 231, 232, 242, 244, 245, 246, 248, 249, 257, 259, 260, 261, 263, 264, 272, 274, 275, 276, 278, 280, 291, 293, 297, 299, 304, 311, 314, 323, 342, 348, 353, 372, 403, 461, 485, 486, 531, 551, 648, 689, 697, 706, 714, 732, 748, 755, 776, 779, 863, 864, 866, 869, 871, 872, 878, 881], "repres": [10, 67, 83, 98, 113, 148, 163, 178, 194, 209, 225, 242, 257, 272, 351, 382, 403, 413, 418, 425, 428, 461, 488, 502, 506, 522, 540, 558, 575, 591, 607, 625, 640, 642, 659, 689, 706, 724, 748, 754, 795, 865, 871, 877], "ball": 10, "node": [10, 750, 751, 752, 753], "which": [10, 16, 32, 33, 34, 35, 41, 50, 56, 67, 73, 83, 89, 98, 104, 113, 119, 136, 148, 154, 163, 169, 178, 184, 194, 200, 209, 215, 225, 231, 242, 248, 257, 263, 272, 278, 290, 312, 342, 353, 356, 363, 364, 369, 370, 371, 372, 425, 429, 485, 486, 504, 551, 566, 567, 682, 732, 752, 753, 795, 797, 830, 841, 864, 865, 871, 872, 878], "join": [10, 16, 35, 50, 67, 83, 98, 113, 130, 148, 163, 178, 194, 209, 225, 242, 257, 272, 297, 299, 304, 311, 314, 323, 348, 485, 865, 872, 878], "end": [10, 50, 67, 83, 98, 113, 148, 163, 178, 194, 209, 225, 272, 351, 353, 356, 363, 364, 366, 369, 371, 429, 506, 540, 575, 591, 607, 625, 632, 641, 658, 659, 682, 689, 706, 724, 865, 877], "multipl": [10, 28, 304, 751], "beam": [10, 12, 13, 14, 16, 20, 25, 26, 27, 28, 29, 31, 32, 33, 34, 37, 39, 50, 52, 53, 54, 60, 67, 69, 70, 71, 77, 81, 83, 85, 86, 87, 93, 98, 100, 101, 102, 108, 113, 115, 116, 117, 125, 130, 132, 133, 134, 140, 145, 146, 147, 148, 150, 151, 152, 158, 163, 165, 166, 167, 173, 178, 180, 181, 182, 189, 194, 196, 197, 198, 204, 209, 211, 212, 219, 225, 227, 228, 229, 235, 241, 242, 244, 245, 246, 252, 257, 259, 260, 261, 267, 272, 274, 275, 276, 279, 284, 285, 290, 299, 324, 385, 395, 416, 429, 431, 434, 440, 443, 453, 461, 464, 476, 485, 506, 509, 513, 515, 522, 525, 528, 529, 530, 531, 540, 543, 546, 547, 548, 551, 575, 578, 580, 581, 584, 591, 594, 598, 599, 600, 607, 610, 614, 615, 616, 623, 625, 628, 632, 633, 634, 640, 642, 645, 647, 648, 657, 659, 662, 666, 667, 674, 678, 682, 689, 693, 697, 698, 702, 706, 708, 710, 714, 715, 716, 724, 727, 729, 732, 739, 748, 753, 763, 776, 830, 861, 865, 866, 869, 870, 875, 877, 878, 880, 881], "trim": [10, 67, 70, 113, 116, 151, 163, 166, 181, 197, 212, 228, 245, 260, 272, 275, 584, 875, 878], "main": [10, 20, 33, 60, 67, 77, 81, 83, 93, 108, 125, 130, 140, 148, 158, 163, 173, 178, 189, 194, 204, 209, 219, 225, 235, 252, 267, 272, 285, 551, 648, 697, 714, 732, 865, 877], "pleas": [10, 35, 67, 83, 98, 113, 130, 148, 163, 178, 194, 209, 225, 242, 257, 272, 862, 876], "creat": [10, 13, 28, 30, 35, 50, 67, 69, 70, 83, 85, 98, 100, 101, 113, 115, 116, 130, 148, 150, 151, 163, 165, 166, 178, 180, 181, 194, 196, 197, 209, 211, 212, 225, 227, 228, 242, 245, 257, 260, 272, 274, 275, 304, 312, 324, 365, 366, 380, 401, 425, 438, 459, 472, 483, 513, 525, 531, 543, 551, 581, 598, 614, 632, 645, 648, 693, 697, 710, 714, 727, 732, 867, 869, 870, 871, 872, 874, 877, 878, 881], "properli": [10, 35, 67, 83, 98, 113, 130, 148, 163, 178, 194, 209, 225, 242, 257, 272, 865], "an": [10, 15, 16, 18, 19, 22, 23, 24, 27, 28, 30, 32, 35, 40, 41, 43, 44, 47, 48, 49, 55, 56, 58, 59, 62, 63, 64, 67, 72, 73, 75, 76, 79, 80, 82, 83, 88, 89, 91, 92, 95, 96, 97, 98, 103, 104, 106, 107, 110, 111, 112, 113, 118, 119, 121, 122, 127, 128, 129, 130, 135, 136, 138, 139, 142, 143, 144, 148, 153, 154, 156, 157, 160, 161, 162, 163, 168, 169, 171, 172, 175, 176, 177, 178, 183, 184, 187, 188, 191, 192, 193, 194, 199, 200, 202, 203, 206, 207, 208, 209, 214, 215, 217, 218, 222, 223, 224, 225, 230, 231, 233, 234, 238, 239, 240, 242, 247, 248, 250, 251, 254, 255, 256, 257, 262, 263, 265, 266, 269, 270, 271, 272, 277, 278, 281, 282, 287, 288, 289, 351, 362, 367, 368, 377, 378, 381, 382, 391, 392, 393, 398, 399, 402, 403, 405, 406, 407, 410, 411, 412, 413, 424, 426, 427, 435, 436, 439, 440, 449, 450, 451, 456, 457, 460, 461, 470, 473, 474, 480, 481, 484, 485, 487, 488, 490, 494, 495, 496, 499, 500, 501, 503, 504, 510, 511, 512, 514, 519, 520, 521, 526, 532, 533, 537, 538, 539, 544, 549, 550, 551, 555, 556, 557, 562, 564, 565, 571, 572, 573, 579, 582, 583, 588, 589, 590, 595, 596, 597, 604, 605, 606, 611, 612, 613, 620, 621, 622, 629, 630, 631, 637, 638, 639, 646, 649, 650, 654, 655, 656, 663, 664, 665, 671, 672, 673, 679, 680, 681, 686, 687, 688, 694, 695, 696, 703, 704, 705, 711, 712, 713, 720, 721, 722, 728, 730, 731, 732, 736, 737, 738, 750, 753, 754, 755, 757, 762, 766, 767, 772, 776, 777, 786, 787, 794, 795, 800, 801, 802, 804, 805, 806, 812, 813, 814, 816, 817, 819, 822, 823, 824, 826, 827, 829, 832, 833, 834, 836, 837, 839, 843, 844, 845, 847, 848, 850, 853, 854, 855, 857, 858, 860, 862, 865, 866, 868, 869, 870, 871, 877], "instanc": [10, 11, 16, 18, 19, 27, 28, 30, 35, 36, 41, 43, 44, 51, 56, 58, 59, 67, 68, 73, 75, 76, 83, 84, 89, 91, 92, 98, 99, 104, 106, 107, 113, 114, 119, 121, 122, 130, 131, 136, 138, 139, 148, 149, 154, 156, 157, 163, 164, 169, 171, 172, 178, 179, 184, 187, 188, 194, 195, 200, 202, 203, 209, 210, 215, 217, 218, 225, 226, 231, 233, 234, 242, 243, 248, 250, 251, 257, 258, 263, 265, 266, 272, 273, 278, 281, 282, 319, 352, 367, 368, 383, 392, 393, 403, 404, 406, 407, 414, 426, 427, 441, 450, 451, 462, 473, 474, 492, 495, 496, 497, 504, 507, 509, 511, 512, 513, 515, 517, 523, 525, 528, 529, 530, 531, 532, 533, 535, 541, 543, 546, 547, 548, 549, 550, 551, 553, 559, 563, 564, 565, 569, 576, 578, 580, 581, 582, 583, 584, 586, 592, 594, 596, 597, 598, 600, 602, 608, 610, 612, 613, 614, 615, 616, 618, 623, 626, 628, 630, 631, 632, 634, 635, 640, 643, 645, 647, 648, 649, 650, 652, 657, 660, 662, 664, 665, 666, 667, 669, 674, 676, 678, 680, 681, 682, 684, 690, 692, 693, 695, 696, 697, 698, 700, 702, 707, 708, 710, 712, 713, 714, 715, 716, 718, 725, 727, 729, 730, 731, 732, 734, 739, 749, 755, 766, 767, 798, 801, 802, 811, 813, 814, 821, 823, 824, 831, 833, 834, 842, 844, 845, 852, 854, 855, 864, 865], "associ": [10, 20, 35, 60, 67, 83, 98, 113, 130, 148, 163, 178, 194, 209, 225, 242, 257, 272, 413, 418, 841, 865, 868], "paramet": [10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 237, 238, 239, 240, 242, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 277, 278, 280, 281, 282, 286, 287, 288, 289, 290, 291, 293, 297, 298, 304, 306, 311, 319, 323, 324, 342, 344, 348, 351, 354, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 418, 419, 421, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 446, 447, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 463, 464, 465, 467, 468, 470, 473, 474, 476, 479, 480, 481, 482, 483, 484, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 800, 801, 802, 803, 804, 805, 806, 808, 809, 812, 813, 814, 815, 816, 817, 819, 822, 823, 824, 825, 826, 827, 829, 832, 833, 834, 835, 836, 837, 839, 840, 843, 844, 845, 846, 847, 848, 850, 853, 854, 855, 856, 857, 858, 860, 861, 865, 870, 880], "list": [10, 16, 17, 27, 28, 30, 32, 42, 50, 57, 74, 90, 105, 120, 130, 137, 146, 155, 170, 178, 186, 201, 216, 225, 232, 249, 264, 272, 280, 290, 291, 297, 299, 304, 311, 319, 323, 324, 344, 348, 351, 354, 355, 363, 373, 384, 385, 395, 403, 415, 416, 431, 442, 443, 453, 463, 464, 476, 485, 486, 488, 513, 515, 528, 746, 748, 751, 757, 765, 769, 776, 841, 861, 865, 877, 879], "base_interfac": 10, "fastenertimberinterfac": [10, 13, 866], "describ": [10, 865], "interfac": [10, 25, 403, 408, 417, 866], "between": [10, 34, 83, 98, 113, 130, 194, 242, 306, 324, 403, 490, 522, 540, 632, 642, 724, 748, 754, 761, 772, 774, 778, 865, 870, 872, 875, 877, 881], "fasten": [10, 13, 163, 403, 486, 866], "each": [10, 50, 146, 257, 364, 632, 797, 864, 865, 870, 877, 879], "timber": [10, 13, 324, 351, 382, 403, 413, 440, 461, 502, 748, 862, 863, 864, 865, 867, 869, 871, 872, 874, 876, 879, 881], "ball_diamet": 10, "float": [10, 32, 33, 34, 67, 83, 98, 130, 148, 163, 178, 185, 194, 209, 225, 242, 272, 290, 291, 293, 297, 304, 306, 311, 323, 324, 342, 344, 348, 351, 353, 357, 360, 364, 365, 366, 370, 386, 389, 403, 413, 419, 425, 428, 444, 447, 465, 468, 488, 497, 506, 516, 517, 522, 527, 531, 534, 535, 540, 545, 551, 552, 553, 558, 566, 567, 568, 569, 575, 581, 585, 586, 591, 601, 602, 607, 614, 617, 618, 625, 632, 635, 642, 648, 651, 652, 659, 668, 669, 683, 684, 689, 692, 699, 700, 706, 708, 717, 718, 724, 732, 733, 734, 748, 761, 780, 781, 782, 783, 861, 864, 877], "diamet": [10, 83, 178, 185, 403, 527, 545, 558, 566, 567, 575, 581, 875, 877], "attribut": [10, 27, 35, 41, 50, 56, 65, 67, 73, 83, 89, 98, 104, 113, 119, 130, 136, 148, 154, 163, 169, 178, 184, 194, 200, 209, 215, 225, 231, 236, 242, 248, 257, 263, 272, 278, 291, 293, 298, 299, 324, 351, 382, 403, 413, 440, 485, 486, 487, 488, 491, 574, 624, 641, 658, 723, 740, 748, 752, 840, 841, 864, 865, 866, 869, 871], "generated_el": [10, 50], "gener": [10, 13, 16, 33, 34, 50, 209, 382, 403, 748, 768, 840, 865, 871, 872, 877, 881], "method": [10, 11, 16, 20, 25, 28, 31, 33, 35, 36, 41, 50, 51, 56, 60, 65, 67, 68, 69, 70, 73, 83, 84, 85, 86, 87, 89, 98, 99, 100, 101, 104, 113, 114, 115, 116, 119, 130, 131, 136, 145, 148, 149, 150, 151, 154, 163, 164, 165, 166, 169, 178, 179, 180, 181, 184, 194, 195, 196, 197, 200, 209, 210, 211, 212, 215, 225, 226, 227, 228, 231, 242, 243, 245, 248, 257, 258, 260, 263, 272, 273, 274, 275, 276, 278, 291, 299, 304, 312, 314, 318, 324, 342, 351, 352, 356, 369, 371, 382, 383, 403, 404, 413, 414, 429, 440, 441, 461, 462, 488, 491, 492, 502, 506, 507, 522, 523, 540, 541, 551, 558, 559, 575, 576, 591, 592, 607, 608, 614, 625, 626, 642, 643, 659, 660, 675, 676, 689, 690, 706, 707, 724, 725, 732, 748, 749, 776, 795, 797, 798, 807, 810, 811, 820, 821, 830, 831, 841, 842, 851, 852, 866], "inherit": [10, 35, 50, 67, 83, 98, 113, 130, 148, 163, 178, 194, 209, 225, 242, 257, 272, 291, 304, 342, 351, 382, 403, 413, 440, 461, 491, 506, 522, 540, 558, 575, 591, 607, 625, 642, 659, 675, 689, 706, 724, 748, 797, 810, 820, 830, 841, 851, 864, 865, 866], "convert": [11, 22, 23, 36, 47, 48, 51, 62, 63, 68, 79, 80, 84, 95, 96, 99, 110, 111, 114, 127, 128, 131, 142, 143, 149, 160, 161, 164, 175, 176, 179, 191, 192, 195, 206, 207, 210, 222, 223, 226, 238, 239, 243, 254, 255, 258, 269, 270, 273, 287, 288, 312, 352, 377, 378, 383, 398, 399, 404, 410, 411, 414, 435, 436, 441, 456, 457, 462, 480, 481, 489, 492, 499, 500, 503, 507, 519, 520, 523, 537, 538, 541, 555, 556, 559, 571, 572, 576, 588, 589, 592, 604, 605, 608, 620, 621, 626, 637, 638, 643, 654, 655, 660, 671, 672, 676, 686, 687, 690, 703, 704, 707, 720, 721, 725, 736, 737, 749, 786, 787, 798, 804, 805, 811, 816, 817, 821, 826, 827, 831, 836, 837, 842, 847, 848, 852, 857, 858, 864], "string": [11, 19, 23, 36, 44, 48, 51, 59, 63, 66, 68, 76, 80, 84, 92, 96, 99, 107, 111, 114, 122, 128, 131, 139, 143, 149, 157, 161, 164, 172, 176, 179, 188, 192, 195, 203, 207, 210, 218, 223, 226, 234, 239, 243, 251, 255, 258, 266, 270, 273, 282, 288, 352, 368, 378, 383, 393, 399, 404, 407, 411, 414, 427, 436, 441, 451, 457, 462, 474, 481, 485, 492, 496, 500, 503, 505, 507, 512, 520, 523, 533, 538, 541, 550, 556, 559, 565, 572, 576, 583, 589, 592, 597, 605, 608, 613, 621, 626, 631, 638, 643, 650, 655, 660, 665, 672, 676, 681, 687, 690, 696, 704, 707, 713, 721, 725, 731, 737, 749, 767, 787, 796, 798, 802, 805, 811, 814, 817, 821, 824, 827, 831, 834, 837, 842, 845, 848, 852, 855, 858, 864, 870, 871, 877], "exist": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 692, 707, 708, 725, 749, 753, 771, 798, 811, 821, 831, 842, 852, 864], "net": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "compat": [11, 14, 36, 39, 51, 54, 67, 68, 71, 83, 84, 87, 98, 99, 102, 113, 114, 117, 131, 134, 148, 149, 152, 163, 164, 167, 178, 179, 182, 194, 195, 198, 209, 210, 213, 225, 226, 229, 242, 243, 246, 257, 258, 261, 273, 276, 290, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 865], "when": [11, 32, 36, 51, 68, 69, 70, 84, 85, 99, 100, 101, 114, 115, 116, 131, 149, 150, 151, 164, 165, 166, 179, 180, 181, 195, 196, 197, 210, 211, 212, 226, 227, 228, 243, 245, 258, 260, 273, 274, 275, 352, 353, 383, 404, 414, 441, 462, 486, 487, 488, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 864, 865, 870, 877], "ironpython": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "implicit": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "convers": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 864], "usual": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 351, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "take": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 504, 507, 523, 541, 559, 566, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 864, 881], "place": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 788, 798, 811, 821, 831, 842, 852, 877], "cpython": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 867], "kick": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "its": [11, 22, 23, 36, 47, 48, 51, 62, 63, 68, 79, 80, 84, 95, 96, 99, 110, 111, 114, 127, 128, 131, 142, 143, 149, 160, 161, 164, 175, 176, 178, 179, 191, 192, 195, 206, 207, 210, 222, 223, 225, 226, 238, 239, 243, 254, 255, 258, 269, 270, 273, 287, 288, 352, 361, 365, 374, 377, 378, 383, 390, 396, 398, 399, 404, 410, 411, 414, 423, 432, 435, 436, 441, 448, 454, 456, 457, 462, 469, 477, 480, 481, 492, 499, 500, 504, 507, 519, 520, 523, 537, 538, 541, 555, 556, 559, 571, 572, 576, 588, 589, 592, 604, 605, 608, 620, 621, 626, 637, 638, 643, 654, 655, 660, 671, 672, 676, 682, 686, 687, 690, 703, 704, 707, 720, 721, 725, 736, 737, 749, 763, 786, 787, 798, 804, 805, 811, 816, 817, 821, 826, 827, 831, 836, 837, 842, 847, 848, 852, 857, 858, 865, 867, 870, 877], "default": [11, 15, 29, 30, 36, 40, 51, 55, 67, 68, 72, 84, 88, 98, 99, 103, 114, 118, 130, 131, 135, 145, 146, 149, 153, 164, 168, 179, 183, 194, 195, 199, 210, 214, 220, 226, 230, 236, 242, 243, 247, 258, 262, 273, 277, 293, 306, 324, 344, 352, 362, 365, 366, 383, 391, 404, 405, 413, 414, 424, 428, 441, 449, 462, 470, 488, 491, 492, 494, 502, 507, 510, 513, 523, 526, 531, 541, 544, 551, 558, 559, 562, 576, 579, 581, 592, 595, 598, 607, 608, 611, 614, 615, 616, 626, 629, 632, 643, 646, 648, 659, 660, 663, 666, 667, 676, 679, 690, 694, 697, 707, 711, 714, 725, 728, 732, 742, 746, 749, 761, 762, 776, 780, 781, 782, 783, 798, 800, 811, 812, 821, 822, 831, 832, 842, 843, 852, 853, 864, 866, 871, 872, 878, 880], "print": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "self": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 864, 865], "gettyp": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "fullnam": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "similar": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 487, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 865, 867, 877], "overrid": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 342, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 872], "object": [11, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 31, 32, 36, 40, 43, 44, 47, 48, 49, 51, 55, 58, 59, 60, 62, 63, 64, 65, 68, 72, 75, 76, 79, 80, 82, 84, 88, 91, 92, 95, 96, 97, 99, 103, 106, 107, 110, 111, 112, 114, 118, 121, 122, 127, 128, 129, 131, 135, 138, 139, 142, 143, 144, 149, 153, 156, 157, 160, 161, 162, 164, 168, 171, 172, 175, 176, 177, 179, 183, 187, 188, 191, 192, 193, 195, 199, 202, 203, 206, 207, 208, 210, 214, 217, 218, 222, 223, 224, 226, 230, 233, 234, 238, 239, 240, 243, 247, 250, 251, 254, 255, 256, 258, 262, 265, 266, 269, 270, 271, 273, 277, 281, 282, 287, 288, 289, 290, 299, 312, 314, 318, 324, 352, 362, 367, 368, 377, 378, 381, 383, 391, 392, 393, 398, 399, 402, 404, 405, 406, 407, 410, 411, 412, 414, 424, 425, 426, 427, 428, 435, 436, 439, 441, 449, 450, 451, 456, 457, 460, 462, 470, 473, 474, 480, 481, 484, 488, 492, 494, 495, 496, 499, 500, 501, 502, 503, 505, 507, 510, 511, 512, 519, 520, 521, 523, 526, 532, 533, 537, 538, 539, 541, 544, 549, 550, 555, 556, 557, 559, 562, 563, 564, 565, 571, 572, 573, 574, 576, 579, 582, 583, 588, 589, 590, 592, 595, 596, 597, 604, 605, 606, 608, 611, 612, 613, 620, 621, 622, 624, 626, 629, 630, 631, 637, 638, 639, 641, 643, 646, 649, 650, 654, 655, 656, 658, 660, 663, 664, 665, 671, 672, 673, 676, 679, 680, 681, 686, 687, 688, 690, 694, 695, 696, 703, 704, 705, 707, 711, 712, 713, 720, 721, 722, 723, 725, 728, 730, 731, 736, 737, 738, 740, 741, 742, 746, 747, 748, 749, 754, 755, 762, 766, 767, 779, 786, 787, 794, 795, 798, 800, 801, 802, 804, 805, 806, 807, 811, 812, 813, 814, 816, 817, 819, 821, 822, 823, 824, 826, 827, 829, 831, 832, 833, 834, 836, 837, 839, 840, 842, 843, 844, 845, 847, 848, 850, 852, 853, 854, 855, 857, 858, 860, 864, 866, 870, 871, 872, 878, 880], "fix": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "make": [11, 15, 36, 40, 51, 55, 68, 72, 84, 88, 99, 103, 114, 118, 131, 135, 149, 153, 164, 168, 179, 183, 195, 199, 210, 214, 226, 230, 243, 247, 258, 262, 273, 277, 352, 362, 383, 391, 403, 404, 405, 414, 424, 441, 449, 462, 470, 471, 488, 492, 494, 507, 510, 523, 526, 541, 544, 559, 562, 566, 576, 579, 592, 595, 608, 611, 626, 629, 643, 646, 660, 663, 676, 679, 682, 690, 694, 707, 711, 725, 728, 749, 762, 798, 800, 811, 812, 821, 822, 831, 832, 842, 843, 852, 853], "grasshopp": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 741, 742, 746, 747, 749, 798, 811, 821, 831, 842, 852, 866, 867, 871, 876, 877, 881], "displai": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 870, 879], "proper": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852, 865], "represent": [11, 22, 23, 36, 47, 48, 51, 62, 63, 66, 68, 79, 80, 84, 95, 96, 99, 110, 111, 114, 127, 128, 131, 142, 143, 149, 160, 161, 164, 175, 176, 179, 191, 192, 195, 206, 207, 210, 222, 223, 226, 238, 239, 243, 254, 255, 258, 269, 270, 273, 287, 288, 352, 377, 378, 383, 398, 399, 403, 404, 410, 411, 414, 435, 436, 441, 456, 457, 462, 480, 481, 492, 499, 500, 507, 519, 520, 523, 537, 538, 541, 555, 556, 559, 571, 572, 576, 588, 589, 592, 604, 605, 608, 620, 621, 626, 637, 638, 643, 654, 655, 660, 671, 672, 676, 686, 687, 690, 703, 704, 707, 720, 721, 725, 736, 737, 749, 786, 787, 796, 798, 804, 805, 811, 816, 817, 821, 826, 827, 831, 836, 837, 842, 847, 848, 852, 857, 858, 864], "ar": [11, 12, 14, 16, 20, 27, 32, 33, 34, 36, 37, 39, 41, 50, 51, 52, 54, 56, 60, 68, 71, 73, 83, 84, 87, 89, 99, 102, 104, 114, 117, 119, 131, 132, 134, 136, 146, 149, 152, 154, 164, 167, 169, 179, 182, 184, 195, 198, 200, 209, 210, 213, 215, 220, 226, 229, 231, 236, 243, 244, 246, 248, 257, 258, 259, 261, 263, 273, 276, 278, 290, 291, 298, 307, 317, 344, 352, 383, 403, 404, 414, 418, 425, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 724, 725, 732, 749, 754, 757, 798, 811, 821, 831, 841, 842, 852, 864, 865, 867, 870, 871, 874, 875, 877, 878, 880, 881], "panel": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 324, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "other": [11, 36, 50, 51, 68, 83, 84, 98, 99, 114, 130, 131, 148, 149, 164, 178, 179, 194, 195, 209, 210, 225, 226, 242, 243, 257, 258, 273, 316, 352, 383, 404, 413, 414, 440, 441, 461, 462, 488, 492, 507, 523, 541, 559, 576, 581, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 753, 798, 811, 821, 831, 842, 852, 862, 864, 865, 868, 877, 881], "output": [11, 22, 23, 33, 36, 47, 48, 51, 62, 63, 68, 79, 80, 84, 95, 96, 99, 110, 111, 114, 127, 128, 131, 142, 143, 149, 160, 161, 164, 175, 176, 179, 191, 192, 195, 206, 207, 210, 222, 223, 226, 238, 239, 243, 254, 255, 258, 269, 270, 273, 287, 288, 352, 377, 378, 383, 398, 399, 404, 410, 411, 414, 435, 436, 441, 456, 457, 462, 480, 481, 492, 499, 500, 507, 519, 520, 523, 537, 538, 541, 555, 556, 559, 571, 572, 576, 588, 589, 592, 604, 605, 608, 620, 621, 626, 637, 638, 643, 654, 655, 660, 671, 672, 676, 686, 687, 690, 703, 704, 707, 720, 721, 725, 736, 737, 741, 749, 786, 787, 798, 804, 805, 811, 816, 817, 821, 826, 827, 831, 836, 837, 842, 847, 848, 852, 857, 858, 871, 872, 874, 875, 878], "add": [12, 13, 35, 37, 38, 52, 53, 69, 70, 85, 86, 100, 101, 115, 116, 132, 133, 150, 151, 165, 166, 180, 181, 196, 197, 211, 212, 227, 228, 244, 245, 259, 260, 274, 275, 353, 354, 355, 384, 385, 408, 413, 415, 416, 442, 443, 463, 464, 493, 508, 524, 542, 560, 577, 593, 609, 627, 644, 661, 677, 691, 692, 708, 709, 726, 741, 750, 751, 752, 753, 754, 755, 756, 776, 869, 878, 880, 881], "extens": [12, 37, 52, 69, 70, 85, 86, 100, 115, 116, 132, 150, 165, 166, 180, 196, 197, 211, 227, 244, 245, 259, 260, 274, 275, 353, 364, 372, 374, 396, 413, 428, 432, 454, 477, 776, 865], "defin": [12, 37, 52, 53, 132, 133, 178, 185, 225, 244, 259, 307, 317, 319, 365, 403, 413, 513, 527, 545, 551, 614, 732, 864, 870, 871, 872, 877, 880, 881], "affect": [12, 37, 52, 53, 132, 133, 244, 259], "": [12, 17, 24, 37, 41, 42, 49, 52, 53, 56, 57, 64, 73, 74, 82, 87, 89, 90, 97, 104, 105, 112, 119, 120, 129, 132, 133, 136, 137, 144, 148, 154, 155, 162, 169, 170, 177, 178, 184, 186, 193, 200, 201, 208, 209, 215, 216, 224, 225, 231, 232, 240, 244, 248, 249, 256, 259, 263, 264, 271, 278, 280, 289, 351, 356, 363, 365, 366, 369, 371, 381, 382, 402, 403, 412, 429, 439, 460, 484, 488, 501, 521, 531, 539, 557, 573, 590, 606, 622, 632, 639, 648, 656, 673, 688, 705, 706, 722, 738, 753, 794, 806, 819, 829, 839, 850, 860, 864, 865, 870, 871, 876, 877, 880], "i": [12, 14, 16, 18, 19, 20, 24, 30, 32, 33, 35, 37, 39, 41, 43, 44, 49, 50, 52, 54, 56, 58, 59, 60, 64, 67, 69, 70, 71, 73, 75, 76, 81, 82, 83, 85, 86, 89, 91, 92, 97, 98, 100, 101, 102, 104, 106, 107, 112, 113, 115, 116, 117, 119, 121, 122, 123, 129, 130, 132, 134, 136, 138, 139, 144, 145, 148, 150, 151, 152, 154, 156, 157, 162, 163, 165, 166, 167, 169, 171, 172, 177, 178, 180, 181, 182, 184, 187, 188, 193, 194, 196, 197, 198, 200, 202, 203, 208, 209, 211, 212, 215, 217, 218, 224, 225, 227, 228, 229, 231, 233, 234, 240, 242, 244, 245, 246, 248, 250, 251, 256, 257, 259, 260, 261, 263, 265, 266, 271, 274, 275, 278, 281, 282, 289, 290, 293, 306, 324, 342, 344, 351, 353, 363, 364, 367, 368, 371, 381, 382, 392, 393, 402, 403, 406, 407, 412, 413, 425, 426, 427, 428, 429, 439, 440, 450, 451, 460, 461, 471, 473, 474, 484, 488, 491, 495, 496, 501, 502, 509, 511, 512, 513, 515, 521, 522, 525, 528, 529, 530, 531, 532, 533, 539, 540, 543, 547, 548, 549, 550, 551, 557, 558, 564, 565, 566, 567, 573, 578, 580, 581, 582, 583, 584, 590, 594, 596, 597, 598, 600, 606, 607, 610, 612, 613, 614, 615, 616, 622, 623, 625, 628, 630, 631, 632, 634, 639, 640, 642, 645, 647, 648, 649, 650, 656, 657, 658, 659, 662, 664, 665, 666, 667, 673, 674, 678, 680, 681, 682, 688, 693, 695, 696, 697, 698, 702, 705, 706, 710, 712, 713, 714, 715, 716, 722, 724, 727, 729, 730, 731, 732, 738, 739, 742, 746, 748, 750, 753, 757, 761, 766, 767, 776, 788, 794, 797, 801, 802, 806, 813, 814, 819, 823, 824, 829, 833, 834, 839, 840, 844, 845, 850, 854, 855, 860, 862, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 877, 878, 880, 881], "option": [12, 14, 15, 21, 22, 23, 32, 33, 34, 37, 39, 40, 46, 47, 48, 52, 54, 55, 61, 62, 63, 67, 71, 72, 78, 79, 80, 88, 94, 95, 96, 102, 103, 109, 110, 111, 113, 117, 118, 126, 127, 128, 132, 134, 135, 141, 142, 143, 152, 153, 159, 160, 161, 163, 167, 168, 174, 175, 176, 178, 182, 183, 190, 191, 192, 198, 199, 205, 206, 207, 214, 221, 222, 223, 229, 230, 237, 238, 239, 244, 246, 247, 253, 254, 255, 259, 261, 262, 268, 269, 270, 277, 286, 287, 288, 290, 291, 293, 297, 304, 306, 311, 323, 324, 342, 344, 348, 351, 357, 359, 362, 375, 377, 378, 386, 391, 397, 398, 399, 403, 405, 409, 410, 411, 413, 419, 421, 424, 425, 428, 433, 435, 436, 444, 446, 449, 455, 456, 457, 465, 467, 470, 479, 480, 481, 488, 494, 498, 499, 500, 502, 510, 513, 518, 519, 520, 526, 531, 536, 537, 538, 544, 551, 554, 555, 556, 562, 570, 571, 572, 579, 581, 587, 588, 589, 595, 598, 603, 604, 605, 607, 611, 614, 615, 616, 619, 620, 621, 629, 632, 636, 637, 638, 646, 648, 653, 654, 655, 659, 663, 666, 667, 670, 671, 672, 679, 685, 686, 687, 694, 697, 701, 703, 704, 711, 714, 719, 720, 721, 728, 732, 735, 736, 737, 742, 746, 750, 751, 752, 753, 754, 757, 761, 762, 768, 776, 778, 780, 781, 782, 783, 785, 786, 787, 800, 803, 804, 805, 812, 815, 816, 817, 822, 825, 826, 827, 832, 835, 836, 837, 843, 846, 847, 848, 853, 856, 857, 858, 871, 881], "should": [12, 14, 20, 34, 37, 39, 50, 52, 53, 54, 60, 71, 98, 102, 117, 130, 132, 133, 134, 152, 167, 182, 194, 198, 229, 242, 244, 246, 259, 261, 290, 312, 353, 356, 364, 369, 370, 371, 382, 403, 413, 429, 440, 485, 487, 513, 522, 531, 551, 575, 598, 632, 648, 697, 714, 732, 742, 746, 750, 864, 865, 876, 877], "onli": [12, 14, 20, 35, 37, 39, 52, 54, 60, 71, 83, 102, 117, 132, 134, 152, 167, 182, 198, 229, 244, 246, 259, 261, 293, 306, 344, 359, 421, 446, 467, 776, 870], "implement": [12, 14, 20, 37, 39, 50, 52, 54, 60, 71, 102, 117, 132, 134, 152, 167, 182, 198, 229, 244, 246, 259, 261, 382, 807, 861, 864, 866], "requir": [12, 14, 17, 37, 39, 42, 52, 54, 57, 70, 71, 74, 90, 101, 102, 105, 116, 117, 120, 132, 134, 137, 151, 152, 155, 166, 167, 170, 181, 182, 186, 197, 198, 201, 212, 216, 228, 229, 232, 244, 245, 246, 249, 259, 260, 261, 264, 275, 280, 312, 353, 372, 864], "whenev": [12, 14, 37, 39, 52, 53, 54, 71, 102, 117, 132, 133, 134, 152, 167, 182, 198, 229, 244, 246, 259, 261], "wa": [12, 37, 52, 53, 132, 133, 244, 259, 485], "abl": [12, 37, 52, 53, 132, 133, 244, 259], "calcul": [12, 34, 37, 52, 53, 69, 85, 100, 115, 132, 133, 150, 165, 180, 196, 211, 227, 244, 259, 274, 356, 369, 370, 371, 429, 485, 515, 528, 529, 530, 546, 547, 548, 580, 584, 600, 623, 632, 634, 640, 647, 657, 674, 698, 702, 715, 716, 729, 739, 748, 776, 784, 864, 865], "appli": [12, 37, 52, 53, 132, 133, 178, 225, 244, 257, 259, 291, 297, 304, 311, 312, 323, 342, 348, 379, 380, 400, 401, 403, 413, 437, 438, 458, 459, 482, 483, 485, 486, 487, 488, 614, 768, 788, 864, 865, 877, 881], "note": [12, 28, 37, 52, 132, 244, 259, 290, 750, 862], "ad": [12, 16, 37, 41, 50, 52, 56, 73, 86, 89, 104, 119, 132, 136, 154, 169, 184, 200, 215, 225, 231, 244, 248, 259, 263, 278, 351, 355, 385, 413, 416, 443, 464, 750, 751, 752, 753, 861, 872, 877], "all": [12, 29, 37, 52, 132, 244, 259, 364, 373, 374, 395, 396, 403, 431, 432, 440, 453, 454, 476, 477, 742, 746, 748, 764, 768, 769, 774, 775, 776, 788, 861, 864, 865, 868, 870, 872, 877, 879], "befor": [12, 16, 37, 41, 52, 56, 73, 89, 104, 119, 132, 136, 154, 169, 184, 200, 215, 231, 244, 248, 259, 263, 278, 312, 356, 413, 750, 865], "featur": [12, 13, 35, 37, 38, 50, 52, 53, 70, 86, 101, 116, 132, 133, 151, 166, 178, 181, 185, 197, 209, 212, 225, 228, 244, 245, 257, 259, 260, 275, 299, 312, 351, 354, 355, 359, 373, 374, 384, 385, 395, 396, 403, 408, 413, 415, 416, 421, 431, 432, 442, 443, 446, 453, 454, 463, 464, 467, 476, 477, 485, 487, 506, 509, 522, 525, 527, 540, 543, 545, 561, 575, 578, 591, 594, 607, 610, 615, 616, 625, 628, 642, 645, 659, 662, 666, 667, 678, 682, 689, 693, 706, 710, 724, 727, 776, 865, 866, 869, 871, 872, 877, 878, 881], "In": [13, 290, 558, 865, 866, 876], "adapt": [13, 312], "therefor": [13, 682], "check": [14, 17, 39, 42, 54, 57, 71, 74, 87, 90, 102, 105, 117, 120, 134, 137, 152, 155, 167, 170, 182, 186, 198, 201, 213, 216, 229, 232, 246, 249, 261, 264, 276, 280, 293, 306, 344, 418, 770, 771, 776, 861, 865, 866], "creation": [14, 39, 54, 71, 87, 102, 117, 134, 152, 167, 182, 198, 213, 229, 246, 261, 276, 865, 877], "did": [14, 39, 54, 71, 102, 117, 134, 152, 167, 182, 198, 229, 246, 261], "compli": [14, 17, 39, 41, 42, 54, 56, 57, 71, 73, 74, 89, 90, 102, 104, 105, 117, 119, 120, 134, 136, 137, 152, 154, 155, 167, 169, 170, 182, 184, 186, 198, 200, 201, 215, 216, 229, 231, 232, 246, 248, 249, 261, 263, 264, 278, 280], "cl": [15, 40, 55, 72, 88, 103, 118, 135, 153, 168, 183, 199, 214, 230, 247, 262, 277, 291, 304, 342, 362, 391, 405, 424, 449, 470, 494, 510, 526, 544, 562, 579, 595, 611, 629, 646, 663, 679, 694, 711, 728, 743, 762, 800, 812, 822, 832, 843, 853, 864], "none": [15, 26, 29, 30, 33, 34, 40, 55, 72, 88, 103, 118, 135, 145, 146, 147, 153, 168, 183, 199, 209, 214, 220, 230, 241, 247, 262, 277, 297, 311, 323, 348, 353, 354, 362, 365, 366, 372, 373, 379, 384, 391, 395, 400, 403, 405, 415, 424, 425, 428, 431, 437, 442, 449, 453, 458, 463, 470, 471, 476, 482, 494, 502, 510, 513, 526, 544, 562, 579, 595, 607, 611, 615, 616, 629, 632, 646, 659, 663, 666, 667, 679, 694, 711, 728, 741, 742, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 760, 761, 762, 768, 777, 778, 780, 781, 782, 783, 788, 789, 792, 800, 812, 822, 832, 843, 853, 864, 865, 871, 877], "copy_guid": [15, 40, 55, 72, 88, 103, 118, 135, 153, 168, 183, 199, 214, 230, 247, 262, 277, 362, 391, 405, 424, 449, 470, 494, 510, 526, 544, 562, 579, 595, 611, 629, 646, 663, 679, 694, 711, 728, 762, 800, 812, 822, 832, 843, 853], "fals": [15, 21, 22, 23, 32, 40, 46, 47, 48, 55, 61, 62, 63, 67, 72, 78, 79, 80, 88, 94, 95, 96, 103, 109, 110, 111, 118, 126, 127, 128, 135, 141, 142, 143, 153, 159, 160, 161, 168, 174, 175, 176, 183, 190, 191, 192, 199, 205, 206, 207, 214, 221, 222, 223, 230, 237, 238, 239, 247, 253, 254, 255, 262, 268, 269, 270, 277, 286, 287, 288, 293, 296, 306, 310, 319, 322, 344, 347, 359, 362, 375, 377, 378, 391, 397, 398, 399, 405, 409, 410, 411, 418, 421, 424, 433, 435, 436, 446, 449, 455, 456, 457, 467, 470, 479, 480, 481, 494, 498, 499, 500, 510, 518, 519, 520, 522, 526, 536, 537, 538, 540, 544, 554, 555, 556, 562, 570, 571, 572, 579, 587, 588, 589, 595, 603, 604, 605, 611, 619, 620, 621, 629, 636, 637, 638, 642, 646, 653, 654, 655, 663, 670, 671, 672, 679, 685, 686, 687, 694, 697, 701, 703, 704, 711, 714, 719, 720, 721, 724, 728, 732, 735, 736, 737, 762, 776, 785, 786, 787, 800, 803, 804, 805, 812, 815, 816, 817, 822, 825, 826, 827, 832, 835, 836, 837, 843, 846, 847, 848, 853, 856, 857, 858, 872, 878], "independ": [15, 40, 55, 72, 88, 103, 118, 135, 153, 168, 183, 199, 214, 230, 247, 262, 277, 362, 391, 405, 424, 449, 470, 494, 510, 526, 544, 562, 579, 595, 611, 629, 646, 663, 679, 694, 711, 728, 762, 800, 812, 822, 832, 843, 853], "data": [15, 18, 19, 21, 22, 23, 24, 40, 43, 44, 46, 47, 48, 49, 55, 58, 59, 61, 62, 63, 64, 72, 75, 76, 78, 79, 80, 82, 88, 91, 92, 94, 95, 96, 97, 103, 106, 107, 109, 110, 111, 112, 118, 121, 122, 126, 127, 128, 129, 135, 138, 139, 141, 142, 143, 144, 153, 156, 157, 159, 160, 161, 162, 168, 171, 172, 174, 175, 176, 177, 183, 187, 188, 190, 191, 192, 193, 199, 202, 203, 205, 206, 207, 208, 214, 217, 218, 221, 222, 223, 224, 230, 233, 234, 237, 238, 239, 240, 247, 250, 251, 253, 254, 255, 256, 262, 265, 266, 268, 269, 270, 271, 277, 281, 282, 286, 287, 288, 289, 362, 367, 368, 375, 377, 378, 381, 391, 392, 393, 397, 398, 399, 402, 403, 405, 406, 407, 409, 410, 411, 412, 424, 426, 427, 433, 435, 436, 439, 449, 450, 451, 455, 456, 457, 460, 470, 473, 474, 479, 480, 481, 484, 491, 494, 495, 496, 498, 499, 500, 501, 502, 510, 511, 512, 518, 519, 520, 521, 526, 532, 533, 536, 537, 538, 539, 544, 549, 550, 554, 555, 556, 557, 562, 564, 565, 570, 571, 572, 573, 579, 582, 583, 587, 588, 589, 590, 595, 596, 597, 603, 604, 605, 606, 611, 612, 613, 619, 620, 621, 622, 629, 630, 631, 636, 637, 638, 639, 646, 649, 650, 653, 654, 655, 656, 663, 664, 665, 670, 671, 672, 673, 679, 680, 681, 685, 686, 687, 688, 694, 695, 696, 701, 703, 704, 705, 711, 712, 713, 719, 720, 721, 722, 728, 730, 731, 735, 736, 737, 738, 762, 766, 767, 785, 786, 787, 789, 790, 791, 794, 797, 800, 801, 802, 803, 804, 805, 806, 810, 812, 813, 814, 815, 816, 817, 819, 822, 823, 824, 825, 826, 827, 829, 832, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 848, 850, 853, 854, 855, 856, 857, 858, 860, 864, 865, 874, 879], "compa": [15, 18, 19, 21, 40, 43, 44, 46, 55, 58, 59, 61, 72, 75, 76, 78, 88, 91, 92, 94, 103, 106, 107, 109, 118, 121, 122, 126, 135, 138, 139, 141, 153, 156, 157, 159, 168, 171, 172, 174, 183, 187, 188, 190, 199, 202, 203, 205, 214, 217, 218, 221, 230, 233, 234, 237, 247, 250, 251, 253, 262, 265, 266, 268, 277, 281, 282, 286, 324, 351, 358, 359, 360, 361, 362, 367, 368, 375, 379, 380, 386, 387, 389, 390, 391, 392, 393, 397, 400, 401, 403, 405, 406, 407, 409, 420, 421, 422, 423, 424, 425, 426, 427, 433, 437, 438, 444, 445, 446, 447, 448, 449, 450, 451, 455, 458, 459, 465, 466, 467, 468, 469, 470, 473, 474, 479, 482, 483, 494, 495, 496, 498, 510, 511, 512, 514, 518, 525, 526, 528, 529, 530, 532, 533, 536, 543, 544, 547, 548, 549, 550, 554, 561, 562, 563, 564, 565, 566, 567, 570, 579, 580, 582, 583, 584, 587, 595, 596, 597, 599, 600, 603, 611, 612, 613, 619, 623, 629, 630, 631, 633, 634, 636, 645, 646, 647, 649, 650, 653, 657, 663, 664, 665, 670, 674, 679, 680, 681, 685, 693, 694, 695, 696, 698, 701, 702, 711, 712, 713, 714, 715, 716, 719, 727, 728, 729, 730, 731, 735, 739, 758, 759, 762, 766, 767, 780, 781, 785, 788, 792, 793, 800, 801, 802, 803, 807, 812, 813, 814, 815, 822, 823, 824, 825, 832, 833, 834, 835, 841, 843, 844, 845, 846, 853, 854, 855, 856, 862, 863, 864, 867, 869, 872, 874, 876, 879], "return": [15, 16, 17, 18, 19, 21, 23, 24, 30, 32, 33, 34, 40, 41, 42, 43, 44, 46, 48, 49, 55, 56, 57, 58, 59, 61, 63, 64, 66, 72, 73, 74, 75, 76, 78, 80, 82, 88, 89, 90, 91, 92, 94, 96, 97, 103, 104, 105, 106, 107, 109, 111, 112, 118, 119, 120, 121, 122, 123, 126, 128, 129, 135, 136, 137, 138, 139, 141, 143, 144, 146, 153, 154, 155, 156, 157, 159, 161, 162, 168, 169, 170, 171, 172, 174, 176, 177, 183, 184, 186, 187, 188, 190, 192, 193, 199, 200, 201, 202, 203, 205, 207, 208, 214, 215, 216, 217, 218, 221, 223, 224, 230, 231, 232, 233, 234, 237, 239, 240, 247, 248, 249, 250, 251, 253, 255, 256, 262, 263, 264, 265, 266, 268, 270, 271, 277, 278, 280, 281, 282, 286, 288, 289, 290, 293, 297, 298, 306, 307, 311, 317, 319, 323, 344, 348, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 378, 379, 380, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 397, 399, 400, 401, 402, 403, 405, 406, 407, 409, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 436, 437, 438, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 455, 457, 458, 459, 460, 463, 465, 466, 467, 468, 469, 470, 473, 474, 479, 481, 482, 483, 484, 489, 490, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 525, 526, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 543, 544, 547, 548, 549, 550, 551, 553, 554, 556, 557, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 590, 594, 595, 596, 597, 598, 599, 600, 602, 603, 605, 606, 610, 611, 612, 613, 614, 615, 616, 618, 619, 621, 622, 623, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 645, 646, 647, 648, 649, 650, 652, 653, 655, 656, 657, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 678, 679, 680, 681, 682, 684, 685, 687, 688, 693, 694, 695, 696, 697, 698, 700, 701, 702, 704, 705, 710, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 727, 728, 729, 730, 731, 732, 734, 735, 737, 738, 739, 741, 742, 746, 747, 750, 751, 752, 753, 754, 756, 757, 758, 759, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 796, 800, 801, 802, 803, 805, 806, 808, 812, 813, 814, 815, 817, 819, 822, 823, 824, 825, 827, 829, 832, 833, 834, 835, 837, 839, 843, 844, 845, 846, 848, 850, 853, 854, 855, 856, 858, 860, 861, 864, 865], "current": [15, 40, 55, 72, 88, 103, 118, 135, 153, 168, 183, 199, 214, 230, 247, 262, 277, 362, 391, 405, 424, 449, 470, 494, 510, 526, 544, 562, 579, 595, 611, 629, 646, 663, 679, 694, 711, 728, 762, 800, 812, 822, 832, 843, 853, 866], "bool": [15, 17, 21, 22, 23, 32, 40, 42, 46, 47, 48, 55, 57, 61, 62, 63, 67, 72, 74, 78, 79, 80, 83, 88, 90, 94, 95, 96, 98, 103, 105, 109, 110, 111, 113, 118, 120, 126, 127, 128, 130, 135, 137, 141, 142, 143, 153, 155, 159, 160, 161, 168, 170, 174, 175, 176, 183, 186, 190, 191, 192, 194, 199, 201, 205, 206, 207, 209, 214, 216, 221, 222, 223, 230, 232, 237, 238, 239, 242, 247, 249, 253, 254, 255, 262, 264, 268, 269, 270, 277, 280, 286, 287, 288, 293, 306, 319, 344, 359, 362, 375, 377, 378, 391, 397, 398, 399, 403, 405, 409, 410, 411, 418, 421, 424, 433, 435, 436, 440, 446, 449, 455, 456, 457, 467, 470, 479, 480, 481, 491, 494, 498, 499, 500, 510, 518, 519, 520, 522, 526, 536, 537, 538, 540, 544, 554, 555, 556, 558, 562, 570, 571, 572, 575, 579, 587, 588, 589, 595, 603, 604, 605, 607, 611, 619, 620, 621, 625, 629, 636, 637, 638, 641, 642, 646, 653, 654, 655, 663, 670, 671, 672, 679, 685, 686, 687, 694, 701, 703, 704, 706, 711, 719, 720, 721, 724, 728, 732, 735, 736, 737, 762, 770, 771, 772, 773, 776, 785, 786, 787, 800, 803, 804, 805, 812, 815, 816, 817, 822, 825, 826, 827, 832, 835, 836, 837, 841, 843, 846, 847, 848, 853, 856, 857, 858], "If": [15, 18, 19, 21, 22, 23, 30, 33, 40, 43, 44, 46, 47, 48, 55, 58, 59, 61, 62, 63, 67, 69, 72, 75, 76, 78, 79, 80, 83, 85, 87, 88, 91, 92, 94, 95, 96, 98, 100, 103, 106, 107, 109, 110, 111, 113, 115, 118, 121, 122, 126, 127, 128, 130, 135, 138, 139, 141, 142, 143, 145, 150, 153, 156, 157, 159, 160, 161, 163, 165, 168, 171, 172, 174, 175, 176, 180, 183, 187, 188, 190, 191, 192, 194, 196, 199, 202, 203, 205, 206, 207, 209, 211, 213, 214, 217, 218, 221, 222, 223, 227, 230, 233, 234, 237, 238, 239, 242, 247, 250, 251, 253, 254, 255, 262, 265, 266, 268, 269, 270, 274, 276, 277, 281, 282, 286, 287, 288, 344, 359, 362, 367, 368, 373, 375, 377, 378, 391, 392, 393, 395, 397, 398, 399, 405, 406, 407, 409, 410, 411, 421, 424, 426, 427, 428, 431, 433, 435, 436, 446, 449, 450, 451, 453, 455, 456, 457, 467, 470, 473, 474, 476, 479, 480, 481, 491, 494, 495, 496, 498, 499, 500, 509, 510, 511, 512, 518, 519, 520, 525, 526, 532, 533, 536, 537, 538, 543, 544, 549, 550, 554, 555, 556, 558, 561, 562, 564, 565, 570, 571, 572, 578, 579, 582, 583, 587, 588, 589, 594, 595, 596, 597, 603, 604, 605, 610, 611, 612, 613, 619, 620, 621, 625, 628, 629, 630, 631, 636, 637, 638, 645, 646, 649, 650, 653, 654, 655, 662, 663, 664, 665, 670, 671, 672, 678, 679, 680, 681, 685, 686, 687, 693, 694, 695, 696, 701, 703, 704, 706, 710, 711, 712, 713, 719, 720, 721, 727, 728, 730, 731, 735, 736, 737, 750, 751, 753, 754, 757, 762, 766, 767, 776, 785, 786, 787, 800, 801, 802, 803, 804, 805, 812, 813, 814, 815, 816, 817, 822, 823, 824, 825, 826, 827, 832, 833, 834, 835, 836, 837, 843, 844, 845, 846, 847, 848, 853, 854, 855, 856, 857, 858, 861, 862, 867, 871, 872, 876, 877, 878], "true": [15, 21, 22, 23, 32, 40, 46, 47, 48, 55, 61, 62, 63, 67, 72, 78, 79, 80, 81, 83, 88, 94, 95, 96, 98, 103, 109, 110, 111, 113, 118, 126, 127, 128, 130, 135, 141, 142, 143, 153, 159, 160, 161, 168, 174, 175, 176, 183, 190, 191, 192, 194, 199, 205, 206, 207, 209, 214, 221, 222, 223, 230, 237, 238, 239, 242, 247, 253, 254, 255, 262, 268, 269, 270, 277, 286, 287, 288, 293, 306, 307, 317, 319, 344, 359, 362, 364, 375, 377, 378, 391, 397, 398, 399, 403, 405, 409, 410, 411, 418, 421, 424, 433, 435, 436, 440, 446, 449, 455, 456, 457, 467, 470, 479, 480, 481, 491, 494, 498, 499, 500, 510, 518, 519, 520, 522, 526, 536, 537, 538, 540, 544, 554, 555, 556, 558, 562, 570, 571, 572, 579, 587, 588, 589, 595, 603, 604, 605, 611, 619, 620, 621, 625, 629, 636, 637, 638, 642, 646, 653, 654, 655, 663, 670, 671, 672, 679, 685, 686, 687, 694, 701, 703, 704, 706, 711, 719, 720, 721, 724, 728, 732, 735, 736, 737, 746, 753, 762, 770, 771, 772, 776, 785, 786, 787, 800, 803, 804, 805, 812, 815, 816, 817, 822, 825, 826, 827, 832, 835, 836, 837, 843, 846, 847, 848, 853, 856, 857, 858, 871, 872, 874, 877, 878], "have": [15, 16, 40, 41, 55, 56, 72, 73, 83, 86, 88, 89, 103, 104, 118, 119, 135, 136, 153, 154, 168, 169, 183, 184, 199, 200, 214, 215, 230, 231, 247, 248, 257, 262, 263, 276, 277, 278, 293, 306, 344, 351, 362, 391, 405, 413, 424, 449, 470, 494, 510, 526, 544, 562, 579, 595, 611, 615, 616, 629, 646, 663, 666, 667, 679, 694, 711, 728, 750, 762, 772, 800, 812, 822, 832, 843, 853, 865, 871], "same": [15, 26, 33, 40, 55, 67, 72, 83, 88, 103, 118, 135, 145, 146, 147, 153, 168, 183, 199, 214, 230, 241, 247, 262, 276, 277, 362, 391, 405, 413, 424, 449, 470, 494, 510, 526, 544, 562, 579, 595, 611, 629, 646, 663, 679, 694, 711, 728, 753, 762, 800, 812, 822, 832, 840, 841, 843, 853, 864, 865, 876], "guid": [15, 22, 23, 40, 47, 48, 50, 55, 62, 63, 72, 79, 80, 88, 95, 96, 103, 110, 111, 118, 127, 128, 135, 142, 143, 153, 160, 161, 168, 175, 176, 183, 191, 192, 199, 206, 207, 214, 222, 223, 225, 230, 238, 239, 247, 254, 255, 262, 269, 270, 277, 287, 288, 362, 377, 378, 391, 398, 399, 405, 410, 411, 424, 435, 436, 449, 456, 457, 470, 480, 481, 494, 499, 500, 510, 519, 520, 526, 537, 538, 544, 555, 556, 562, 571, 572, 579, 588, 589, 595, 604, 605, 611, 620, 621, 629, 637, 638, 646, 654, 655, 663, 671, 672, 679, 686, 687, 694, 703, 704, 711, 720, 721, 728, 736, 737, 762, 763, 786, 787, 800, 804, 805, 812, 816, 817, 822, 826, 827, 832, 836, 837, 843, 847, 848, 853, 857, 858, 866, 869, 871, 877], "origin": [15, 40, 55, 72, 88, 103, 118, 135, 153, 168, 183, 199, 214, 230, 247, 262, 277, 351, 362, 391, 405, 424, 449, 470, 494, 510, 526, 544, 562, 579, 595, 611, 629, 646, 663, 679, 694, 711, 728, 762, 780, 781, 800, 812, 822, 832, 843, 853, 871, 880], "classmethod": [16, 17, 18, 19, 24, 30, 32, 41, 42, 43, 44, 49, 56, 57, 58, 59, 64, 66, 73, 74, 75, 76, 82, 89, 90, 91, 92, 97, 104, 105, 106, 107, 112, 119, 120, 121, 122, 129, 136, 137, 138, 139, 144, 154, 155, 156, 157, 162, 169, 170, 171, 172, 177, 184, 186, 187, 188, 193, 200, 201, 202, 203, 208, 215, 216, 217, 218, 224, 231, 232, 233, 234, 240, 248, 249, 250, 251, 256, 263, 264, 265, 266, 271, 278, 280, 281, 282, 289, 325, 365, 366, 367, 368, 381, 392, 393, 402, 406, 407, 412, 425, 426, 427, 428, 439, 450, 451, 460, 471, 472, 473, 474, 484, 495, 496, 501, 504, 511, 512, 513, 514, 521, 527, 531, 532, 533, 539, 545, 549, 550, 551, 557, 564, 565, 566, 567, 573, 581, 582, 583, 590, 596, 597, 598, 599, 606, 612, 613, 614, 615, 616, 622, 630, 631, 632, 633, 639, 648, 649, 650, 656, 664, 665, 666, 667, 673, 680, 681, 682, 688, 695, 696, 697, 705, 712, 713, 714, 722, 730, 731, 732, 738, 766, 767, 794, 796, 801, 802, 806, 808, 809, 813, 814, 819, 823, 824, 829, 833, 834, 839, 844, 845, 850, 854, 855, 860, 864], "kwarg": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 291, 304, 342, 425, 428, 471, 472, 513, 514, 531, 567, 598, 599, 615, 616, 632, 633, 666, 750, 752, 864, 865], "new": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 497, 517, 535, 553, 569, 586, 602, 618, 635, 652, 669, 684, 700, 718, 734, 747, 867, 871], "differ": [16, 748, 807, 864, 872, 877], "fom": 16, "pass": [16, 34, 35, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 291, 304, 342, 364, 425, 428], "constructor": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 312, 425, 428, 566, 865], "instead": [16, 50, 566, 871], "separ": [16, 870], "argument": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 291, 304, 312, 342, 425, 428, 752, 865], "expect": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 293, 641], "been": [16, 41, 56, 73, 86, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 750, 841], "call": [16, 20, 41, 56, 60, 69, 70, 73, 85, 86, 89, 100, 101, 104, 115, 116, 119, 136, 150, 151, 154, 165, 166, 169, 180, 181, 184, 196, 197, 200, 211, 212, 215, 227, 228, 231, 245, 248, 260, 263, 274, 275, 278, 312, 864, 871], "code": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 865, 866], "doe": [16, 35, 38, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 293, 306, 344, 356, 369, 371, 382, 429, 509, 561, 578, 594, 610, 628, 662, 678, 807, 871], "verifi": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 364, 773, 864, 865], "given": [16, 26, 32, 33, 41, 56, 66, 73, 89, 104, 119, 136, 145, 146, 147, 154, 169, 184, 200, 215, 231, 241, 248, 263, 278, 290, 293, 297, 298, 306, 307, 311, 323, 342, 344, 348, 363, 364, 366, 370, 425, 428, 489, 490, 497, 502, 505, 515, 516, 517, 528, 529, 530, 534, 535, 546, 547, 548, 552, 553, 568, 569, 580, 584, 585, 586, 600, 601, 602, 614, 617, 618, 623, 634, 635, 640, 647, 651, 652, 657, 668, 669, 674, 683, 684, 698, 699, 700, 702, 715, 716, 717, 718, 729, 733, 734, 739, 769, 770, 796, 870], "adjac": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 761], "lie": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278], "topologi": [16, 31, 33, 34, 41, 50, 56, 65, 66, 67, 73, 83, 89, 98, 104, 113, 119, 136, 148, 154, 163, 169, 178, 184, 194, 200, 209, 215, 225, 231, 242, 248, 257, 263, 278, 291, 293, 342, 344, 748, 784, 865, 877, 878, 881], "allow": [16, 41, 56, 73, 89, 98, 104, 119, 130, 136, 154, 169, 184, 194, 200, 215, 231, 242, 248, 263, 278, 298, 299, 312, 314, 364, 748, 841, 872, 877], "them": [16, 41, 56, 73, 83, 89, 104, 113, 119, 136, 148, 154, 169, 178, 184, 200, 209, 215, 225, 231, 248, 263, 278, 461, 761, 772, 864, 865, 870, 877], "respons": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 403], "A": [16, 28, 29, 30, 32, 35, 50, 146, 178, 225, 290, 293, 297, 298, 306, 311, 323, 344, 348, 351, 354, 365, 366, 382, 384, 403, 413, 415, 418, 425, 428, 442, 463, 485, 488, 497, 502, 516, 517, 534, 535, 552, 553, 568, 569, 585, 586, 601, 602, 617, 618, 635, 651, 652, 668, 669, 683, 684, 699, 700, 717, 718, 723, 733, 734, 748, 750, 756, 768, 769, 773, 776, 862, 864, 868, 871, 872, 877], "valueerror": [16, 750, 753, 757], "less": [16, 306, 351, 413], "than": [16, 21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 306, 375, 397, 409, 433, 455, 479, 488, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "two": [16, 33, 34, 50, 67, 83, 98, 113, 123, 148, 178, 209, 225, 242, 257, 276, 291, 293, 297, 298, 304, 306, 311, 323, 342, 344, 348, 363, 485, 513, 514, 581, 682, 754, 772, 778, 865, 875, 877], "timbermodel": [16, 20, 30, 41, 56, 60, 73, 89, 104, 119, 136, 145, 154, 169, 184, 200, 215, 231, 248, 263, 278, 503, 505, 866], "jo": 16, "belong": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278], "whould": 16, "togeth": [16, 27, 461, 871], "number": [17, 41, 42, 56, 57, 73, 74, 89, 90, 104, 105, 119, 120, 136, 137, 145, 154, 155, 169, 170, 184, 186, 200, 201, 215, 216, 231, 232, 248, 249, 263, 264, 278, 280, 413, 488, 742, 746, 872, 881], "filepath": [18, 22, 43, 47, 58, 62, 75, 79, 91, 95, 106, 110, 121, 127, 138, 142, 156, 160, 171, 175, 187, 191, 202, 206, 217, 222, 233, 238, 250, 254, 265, 269, 281, 287, 367, 377, 392, 398, 406, 410, 426, 435, 450, 456, 473, 480, 495, 499, 511, 519, 532, 537, 549, 555, 564, 571, 582, 588, 596, 604, 612, 620, 630, 637, 649, 654, 664, 671, 680, 686, 695, 703, 712, 720, 730, 736, 766, 786, 801, 804, 808, 809, 813, 816, 823, 826, 833, 836, 844, 847, 854, 857], "construct": [18, 19, 24, 43, 44, 49, 58, 59, 64, 75, 76, 82, 91, 92, 97, 106, 107, 112, 121, 122, 129, 138, 139, 144, 156, 157, 162, 171, 172, 177, 187, 188, 193, 202, 203, 208, 217, 218, 224, 233, 234, 240, 250, 251, 256, 265, 266, 271, 281, 282, 289, 367, 368, 381, 392, 393, 402, 406, 407, 412, 426, 427, 428, 439, 450, 451, 460, 473, 474, 484, 495, 496, 501, 511, 512, 514, 521, 532, 533, 539, 549, 550, 557, 563, 564, 565, 566, 567, 573, 582, 583, 590, 596, 597, 599, 606, 612, 613, 615, 616, 622, 630, 631, 633, 639, 649, 650, 656, 664, 665, 666, 667, 673, 680, 681, 682, 688, 695, 696, 705, 712, 713, 722, 730, 731, 738, 766, 767, 794, 801, 802, 806, 813, 814, 819, 823, 824, 829, 833, 834, 839, 844, 845, 850, 854, 855, 860, 866, 872], "from": [18, 19, 21, 22, 23, 28, 29, 30, 33, 43, 44, 46, 47, 48, 58, 59, 61, 62, 63, 75, 76, 78, 79, 80, 91, 92, 94, 95, 96, 106, 107, 109, 110, 111, 121, 122, 126, 127, 128, 138, 139, 141, 142, 143, 146, 156, 157, 159, 160, 161, 171, 172, 174, 175, 176, 178, 187, 188, 190, 191, 192, 202, 203, 205, 206, 207, 217, 218, 221, 222, 223, 225, 233, 234, 237, 238, 239, 250, 251, 253, 254, 255, 257, 265, 266, 268, 269, 270, 281, 282, 286, 287, 288, 324, 365, 366, 367, 368, 371, 372, 373, 375, 377, 378, 382, 392, 393, 395, 397, 398, 399, 403, 406, 407, 409, 410, 411, 425, 426, 427, 428, 429, 431, 433, 435, 436, 450, 451, 453, 455, 456, 457, 472, 473, 474, 476, 479, 480, 481, 490, 495, 496, 498, 499, 500, 502, 511, 512, 513, 514, 515, 518, 519, 520, 522, 528, 529, 530, 531, 532, 533, 536, 537, 538, 540, 546, 547, 548, 549, 550, 551, 554, 555, 556, 564, 565, 566, 567, 570, 571, 572, 580, 581, 582, 583, 584, 587, 588, 589, 596, 597, 598, 599, 600, 603, 604, 605, 612, 613, 614, 615, 616, 619, 620, 621, 623, 630, 631, 632, 633, 634, 636, 637, 638, 640, 642, 647, 648, 649, 650, 653, 654, 655, 657, 664, 665, 666, 667, 670, 671, 672, 674, 680, 681, 685, 686, 687, 695, 696, 697, 698, 701, 702, 703, 704, 712, 713, 714, 715, 716, 719, 720, 721, 724, 729, 730, 731, 732, 735, 736, 737, 739, 742, 746, 753, 766, 767, 777, 779, 785, 786, 787, 801, 802, 803, 804, 805, 807, 808, 813, 814, 815, 816, 817, 823, 824, 825, 826, 827, 833, 834, 835, 836, 837, 844, 845, 846, 847, 848, 854, 855, 856, 857, 858, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 877, 879], "json": [18, 19, 22, 23, 43, 44, 47, 48, 58, 59, 62, 63, 75, 76, 79, 80, 91, 92, 95, 96, 106, 107, 110, 111, 121, 122, 127, 128, 138, 139, 142, 143, 156, 157, 160, 161, 171, 172, 175, 176, 187, 188, 191, 192, 202, 203, 206, 207, 217, 218, 222, 223, 233, 234, 238, 239, 250, 251, 254, 255, 265, 266, 269, 270, 281, 282, 287, 288, 367, 368, 377, 378, 392, 393, 398, 399, 406, 407, 410, 411, 426, 427, 435, 436, 450, 451, 456, 457, 473, 474, 480, 481, 495, 496, 499, 500, 511, 512, 519, 520, 532, 533, 537, 538, 549, 550, 555, 556, 564, 565, 571, 572, 582, 583, 588, 589, 596, 597, 604, 605, 612, 613, 620, 621, 630, 631, 637, 638, 649, 650, 654, 655, 664, 665, 671, 672, 680, 681, 686, 687, 695, 696, 703, 704, 712, 713, 720, 721, 730, 731, 736, 737, 766, 767, 786, 787, 801, 802, 804, 805, 807, 808, 809, 813, 814, 816, 817, 823, 824, 826, 827, 833, 834, 836, 837, 844, 845, 847, 848, 854, 855, 857, 858], "file": [18, 22, 43, 47, 58, 62, 75, 79, 91, 95, 106, 110, 121, 127, 138, 142, 156, 160, 171, 175, 187, 191, 202, 206, 217, 222, 233, 238, 250, 254, 265, 269, 281, 287, 367, 377, 392, 398, 406, 410, 426, 435, 450, 456, 473, 480, 495, 499, 502, 503, 505, 511, 519, 532, 537, 549, 555, 564, 571, 582, 588, 596, 604, 612, 620, 630, 637, 649, 654, 664, 671, 680, 686, 695, 703, 712, 720, 730, 736, 766, 786, 801, 804, 807, 808, 809, 813, 816, 823, 826, 833, 836, 844, 847, 854, 857, 868, 873, 874], "str": [18, 19, 21, 22, 23, 43, 44, 46, 47, 48, 50, 58, 59, 61, 62, 63, 66, 75, 76, 78, 79, 80, 91, 92, 94, 95, 96, 106, 107, 109, 110, 111, 121, 122, 126, 127, 128, 138, 139, 141, 142, 143, 156, 157, 159, 160, 161, 171, 172, 174, 175, 176, 187, 188, 190, 191, 192, 202, 203, 205, 206, 207, 217, 218, 221, 222, 223, 225, 233, 234, 237, 238, 239, 250, 251, 253, 254, 255, 265, 266, 268, 269, 270, 281, 282, 286, 287, 288, 291, 363, 367, 368, 375, 377, 378, 392, 393, 397, 398, 399, 406, 407, 409, 410, 411, 426, 427, 433, 435, 436, 450, 451, 455, 456, 457, 473, 474, 479, 480, 481, 485, 486, 487, 490, 491, 495, 496, 498, 499, 500, 502, 503, 505, 511, 512, 518, 519, 520, 522, 531, 532, 533, 536, 537, 538, 540, 549, 550, 551, 554, 555, 556, 564, 565, 570, 571, 572, 582, 583, 587, 588, 589, 596, 597, 603, 604, 605, 612, 613, 619, 620, 621, 630, 631, 636, 637, 638, 642, 648, 649, 650, 653, 654, 655, 664, 665, 670, 671, 672, 680, 681, 685, 686, 687, 689, 695, 696, 701, 703, 704, 706, 712, 713, 719, 720, 721, 724, 730, 731, 732, 735, 736, 737, 741, 746, 747, 752, 753, 763, 766, 767, 768, 771, 785, 786, 787, 796, 801, 802, 803, 804, 805, 808, 809, 813, 814, 815, 816, 817, 823, 824, 825, 826, 827, 833, 834, 835, 836, 837, 841, 844, 845, 846, 847, 848, 854, 855, 856, 857, 858, 865], "path": [18, 22, 43, 47, 58, 62, 75, 79, 91, 95, 106, 110, 121, 127, 138, 142, 156, 160, 171, 175, 187, 191, 202, 206, 217, 222, 233, 238, 250, 254, 265, 269, 281, 287, 367, 377, 392, 398, 406, 410, 426, 435, 450, 456, 473, 480, 495, 499, 502, 505, 511, 519, 532, 537, 549, 555, 564, 571, 582, 588, 596, 604, 612, 620, 630, 637, 649, 654, 664, 671, 680, 686, 695, 703, 712, 720, 730, 736, 766, 786, 801, 804, 808, 809, 813, 816, 823, 826, 833, 836, 844, 847, 854, 857, 874], "ha": [18, 19, 43, 44, 58, 59, 75, 76, 86, 91, 92, 106, 107, 121, 122, 138, 139, 156, 157, 171, 172, 187, 188, 202, 203, 217, 218, 233, 234, 250, 251, 265, 266, 281, 282, 290, 367, 368, 392, 393, 406, 407, 426, 427, 450, 451, 473, 474, 485, 495, 496, 511, 512, 532, 533, 549, 550, 564, 565, 582, 583, 596, 597, 612, 613, 630, 631, 649, 650, 664, 665, 680, 681, 695, 696, 712, 713, 730, 731, 753, 766, 767, 801, 802, 813, 814, 823, 824, 833, 834, 841, 844, 845, 854, 855, 871, 877, 880], "correct": [18, 19, 43, 44, 58, 59, 75, 76, 91, 92, 106, 107, 121, 122, 138, 139, 156, 157, 171, 172, 187, 188, 202, 203, 217, 218, 233, 234, 250, 251, 265, 266, 281, 282, 344, 367, 368, 392, 393, 406, 407, 426, 427, 450, 451, 473, 474, 495, 496, 511, 512, 532, 533, 549, 550, 564, 565, 582, 583, 596, 597, 612, 613, 623, 630, 631, 649, 650, 664, 665, 674, 680, 681, 695, 696, 712, 713, 730, 731, 766, 767, 801, 802, 813, 814, 823, 824, 833, 834, 844, 845, 854, 855, 865], "schema": [18, 19, 24, 43, 44, 49, 58, 59, 64, 75, 76, 82, 91, 92, 97, 106, 107, 112, 121, 122, 129, 138, 139, 144, 156, 157, 162, 171, 172, 177, 187, 188, 193, 202, 203, 208, 217, 218, 224, 233, 234, 240, 250, 251, 256, 265, 266, 271, 281, 282, 289, 367, 368, 381, 392, 393, 402, 406, 407, 412, 426, 427, 439, 450, 451, 460, 473, 474, 484, 495, 496, 501, 511, 512, 521, 532, 533, 539, 549, 550, 557, 564, 565, 573, 582, 583, 590, 596, 597, 606, 612, 613, 622, 630, 631, 639, 649, 650, 656, 664, 665, 673, 680, 681, 688, 695, 696, 705, 712, 713, 722, 730, 731, 738, 766, 767, 794, 801, 802, 806, 813, 814, 819, 823, 824, 829, 833, 834, 839, 844, 845, 850, 854, 855, 860], "typeerror": [18, 19, 43, 44, 58, 59, 75, 76, 91, 92, 106, 107, 121, 122, 138, 139, 156, 157, 171, 172, 187, 188, 202, 203, 217, 218, 233, 234, 250, 251, 265, 266, 281, 282, 367, 368, 392, 393, 406, 407, 426, 427, 450, 451, 473, 474, 495, 496, 511, 512, 532, 533, 549, 550, 564, 565, 582, 583, 596, 597, 612, 613, 630, 631, 649, 650, 664, 665, 680, 681, 695, 696, 712, 713, 730, 731, 766, 767, 801, 802, 813, 814, 823, 824, 833, 834, 844, 845, 854, 855], "restor": [20, 45, 60, 77, 93, 108, 125, 140, 158, 173, 189, 204, 219, 235, 252, 267, 285, 865], "refer": [20, 45, 60, 77, 93, 108, 125, 140, 158, 173, 189, 204, 219, 235, 252, 267, 285, 351, 356, 369, 370, 371, 376, 413, 429, 434, 461, 490, 491, 506, 513, 522, 531, 540, 551, 558, 566, 574, 575, 581, 591, 598, 607, 614, 615, 616, 625, 632, 642, 648, 659, 666, 667, 689, 697, 706, 714, 724, 732, 864, 865, 866, 869, 870], "dure": [20, 21, 46, 60, 61, 78, 86, 94, 109, 126, 141, 159, 174, 178, 190, 205, 221, 237, 253, 268, 286, 299, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 776, 785, 803, 815, 825, 835, 841, 846, 856, 864, 865], "serial": [20, 45, 60, 77, 93, 108, 125, 140, 158, 173, 189, 204, 219, 235, 252, 267, 285, 504, 807, 864, 865], "part": [20, 27, 60, 488, 580, 581, 750, 757, 861, 866, 871, 875], "To": [20, 60, 867, 869, 876, 878, 881], "avoid": [20, 28, 60, 357, 360, 386, 389, 419, 444, 447, 465, 468, 865], "circular": [20, 60], "store": [20, 60, 865, 870, 871], "kei": [20, 60, 351, 353, 372, 413, 490, 641, 870], "respect": [20, 50, 60], "de": [20, 45, 60, 77, 93, 108, 125, 140, 158, 173, 189, 204, 219, 235, 252, 267, 285, 865], "sinc": [20, 60, 776], "role": [20, 33, 60, 298, 865], "specif": [20, 33, 60, 765, 773, 864, 865, 866, 871, 872, 877], "e": [20, 33, 60, 145, 513, 531, 551, 581, 598, 614, 648, 697, 714, 732, 864, 865, 867, 870, 880], "g": [20, 33, 60, 865, 870], "cross": [20, 33, 60, 67, 77, 81, 83, 93, 108, 125, 130, 140, 148, 158, 163, 173, 178, 189, 194, 204, 209, 219, 225, 235, 252, 267, 272, 276, 285, 351, 365, 366, 531, 551, 648, 697, 706, 714, 732, 865, 871, 872, 877], "concret": [20, 60, 865], "exampl": [20, 21, 46, 60, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 290, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 753, 785, 803, 815, 825, 835, 846, 856, 866, 869, 870, 871, 881], "tbuttjoint": [20, 60, 865, 866], "as_str": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "comput": [21, 33, 34, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 357, 358, 359, 360, 361, 375, 386, 387, 389, 390, 397, 409, 419, 420, 421, 422, 423, 433, 444, 445, 446, 447, 448, 455, 465, 466, 467, 468, 469, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 758, 759, 785, 803, 815, 825, 835, 846, 856], "hash": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "comparison": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "version": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "control": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "algorithm": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 290, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "digest": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "hexadecim": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "format": [21, 22, 23, 46, 47, 48, 61, 62, 63, 78, 79, 80, 94, 95, 96, 109, 110, 111, 126, 127, 128, 141, 142, 143, 159, 160, 161, 174, 175, 176, 190, 191, 192, 205, 206, 207, 221, 222, 223, 237, 238, 239, 253, 254, 255, 268, 269, 270, 286, 287, 288, 375, 377, 378, 397, 398, 399, 409, 410, 411, 433, 435, 436, 455, 456, 457, 479, 480, 481, 489, 498, 499, 500, 502, 518, 519, 520, 536, 537, 538, 554, 555, 556, 570, 571, 572, 587, 588, 589, 603, 604, 605, 619, 620, 621, 636, 637, 638, 653, 654, 655, 670, 671, 672, 685, 686, 687, 701, 703, 704, 719, 720, 721, 735, 736, 737, 785, 786, 787, 803, 804, 805, 807, 815, 816, 817, 825, 826, 827, 835, 836, 837, 846, 847, 848, 856, 857, 858, 864, 870], "rather": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "byte": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "datastructur": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 358, 375, 387, 397, 409, 420, 421, 433, 445, 446, 455, 466, 467, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 758, 759, 780, 782, 785, 790, 791, 792, 793, 803, 815, 825, 835, 846, 856], "import": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 753, 776, 785, 803, 815, 825, 835, 846, 856, 881], "mesh": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 358, 375, 387, 397, 409, 420, 421, 433, 445, 446, 455, 466, 467, 479, 498, 518, 536, 554, 570, 587, 603, 615, 616, 619, 636, 653, 666, 667, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "from_obj": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "get": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 763, 768, 769, 785, 803, 815, 825, 835, 846, 856, 865, 869, 870], "face": [21, 46, 61, 67, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 351, 364, 375, 397, 409, 413, 428, 433, 455, 472, 479, 490, 498, 518, 536, 540, 554, 570, 587, 603, 615, 616, 619, 623, 636, 641, 653, 666, 667, 670, 674, 682, 685, 701, 719, 724, 735, 785, 803, 815, 825, 835, 846, 856, 864, 865, 877], "obj": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 841, 846, 856], "v1": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "v2": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "vertex_attribut": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "vertex_sampl": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "1": [21, 46, 61, 78, 94, 98, 109, 126, 130, 141, 159, 174, 178, 190, 194, 205, 209, 221, 225, 237, 242, 253, 268, 286, 351, 375, 397, 409, 433, 455, 465, 479, 488, 490, 498, 506, 516, 518, 522, 534, 536, 540, 552, 554, 568, 570, 575, 585, 587, 591, 601, 603, 607, 617, 619, 625, 636, 642, 651, 653, 659, 668, 670, 683, 685, 689, 699, 701, 706, 717, 719, 724, 733, 735, 742, 785, 803, 815, 825, 835, 846, 856, 871, 877, 881], "0": [21, 32, 46, 61, 78, 94, 98, 109, 126, 130, 141, 159, 174, 178, 190, 194, 205, 209, 221, 225, 237, 242, 253, 268, 286, 290, 351, 357, 360, 375, 376, 386, 389, 397, 409, 413, 419, 422, 428, 433, 434, 444, 447, 455, 465, 468, 479, 488, 491, 498, 506, 513, 516, 518, 522, 531, 534, 536, 540, 551, 552, 554, 558, 568, 570, 575, 581, 585, 587, 591, 598, 601, 603, 607, 614, 615, 616, 617, 619, 625, 632, 636, 642, 648, 651, 653, 659, 666, 667, 668, 670, 683, 685, 689, 692, 697, 699, 701, 706, 708, 714, 717, 719, 724, 732, 733, 735, 746, 761, 785, 803, 815, 825, 835, 846, 856, 861, 864, 867, 871, 875, 877], "z": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 351, 365, 366, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 558, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 780, 781, 782, 783, 785, 803, 815, 825, 835, 846, 856, 871, 872, 875, 880], "v3": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "pretti": [22, 23, 47, 48, 62, 63, 79, 80, 95, 96, 110, 111, 127, 128, 142, 143, 160, 161, 175, 176, 191, 192, 206, 207, 222, 223, 238, 239, 254, 255, 269, 270, 287, 288, 377, 378, 398, 399, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858], "compact": [22, 23, 47, 48, 62, 63, 79, 80, 95, 96, 110, 111, 127, 128, 142, 143, 160, 161, 175, 176, 191, 192, 206, 207, 222, 223, 238, 239, 254, 255, 269, 270, 287, 288, 377, 378, 398, 399, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858], "minim": [22, 23, 47, 48, 62, 63, 79, 80, 95, 96, 110, 111, 127, 128, 142, 143, 160, 161, 175, 176, 191, 192, 206, 207, 222, 223, 238, 239, 254, 255, 269, 270, 287, 288, 377, 378, 398, 399, 403, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858], "nativ": [22, 23, 47, 48, 62, 63, 79, 80, 95, 96, 110, 111, 127, 128, 142, 143, 160, 161, 175, 176, 191, 192, 206, 207, 222, 223, 238, 239, 254, 255, 269, 270, 287, 288, 377, 378, 398, 399, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858], "save": [22, 23, 45, 47, 48, 62, 63, 77, 79, 80, 93, 95, 96, 108, 110, 111, 125, 127, 128, 140, 142, 143, 158, 160, 161, 173, 175, 176, 189, 191, 192, 204, 206, 207, 219, 222, 223, 235, 238, 239, 252, 254, 255, 267, 269, 270, 285, 287, 288, 377, 378, 398, 399, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858, 865, 874], "newlin": [22, 23, 47, 48, 62, 63, 79, 80, 95, 96, 110, 111, 127, 128, 142, 143, 160, 161, 175, 176, 191, 192, 206, 207, 222, 223, 238, 239, 254, 255, 269, 270, 287, 288, 377, 378, 398, 399, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858], "indent": [22, 23, 47, 48, 62, 63, 79, 80, 95, 96, 110, 111, 127, 128, 142, 143, 160, 161, 175, 176, 191, 192, 206, 207, 222, 223, 238, 239, 254, 255, 269, 270, 287, 288, 377, 378, 398, 399, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858], "without": [22, 23, 47, 48, 62, 63, 79, 80, 95, 96, 98, 110, 111, 127, 128, 130, 142, 143, 160, 161, 175, 176, 191, 192, 194, 206, 207, 222, 223, 238, 239, 242, 254, 255, 269, 270, 287, 288, 377, 378, 398, 399, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858, 868, 871], "ani": [22, 23, 24, 35, 38, 47, 48, 49, 62, 63, 64, 79, 80, 82, 95, 96, 97, 110, 111, 112, 127, 128, 129, 142, 143, 144, 160, 161, 162, 175, 176, 177, 191, 192, 193, 206, 207, 208, 222, 223, 224, 238, 239, 240, 254, 255, 256, 269, 270, 271, 287, 288, 289, 377, 378, 381, 398, 399, 402, 410, 411, 412, 435, 436, 439, 456, 457, 460, 480, 481, 484, 499, 500, 501, 519, 520, 521, 525, 537, 538, 539, 543, 555, 556, 557, 571, 572, 573, 588, 589, 590, 604, 605, 606, 620, 621, 622, 637, 638, 639, 645, 654, 655, 656, 671, 672, 673, 686, 687, 688, 693, 703, 704, 705, 710, 720, 721, 722, 727, 736, 737, 738, 786, 787, 794, 804, 805, 806, 816, 817, 819, 826, 827, 829, 836, 837, 839, 847, 848, 850, 857, 858, 860, 868, 877, 881], "whitespac": [22, 23, 47, 48, 62, 63, 79, 80, 95, 96, 110, 111, 127, 128, 142, 143, 160, 161, 175, 176, 191, 192, 206, 207, 222, 223, 238, 239, 254, 255, 269, 270, 287, 288, 377, 378, 398, 399, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858], "exclud": [22, 23, 26, 28, 29, 47, 48, 62, 63, 79, 80, 95, 96, 110, 111, 127, 128, 142, 143, 146, 160, 161, 175, 176, 191, 192, 206, 207, 222, 223, 238, 239, 254, 255, 269, 270, 287, 288, 377, 378, 398, 399, 410, 411, 435, 436, 456, 457, 480, 481, 499, 500, 519, 520, 537, 538, 555, 556, 571, 572, 588, 589, 604, 605, 620, 621, 637, 638, 654, 655, 671, 672, 686, 687, 703, 704, 720, 721, 736, 737, 786, 787, 804, 805, 816, 817, 826, 827, 836, 837, 847, 848, 857, 858], "valid": [24, 49, 64, 82, 97, 112, 129, 144, 162, 177, 193, 208, 224, 240, 256, 271, 289, 381, 402, 412, 418, 439, 460, 484, 501, 521, 539, 557, 573, 590, 606, 622, 639, 656, 673, 688, 705, 722, 738, 794, 806, 819, 829, 839, 850, 860, 864, 865], "against": [24, 49, 64, 82, 97, 112, 129, 144, 162, 177, 193, 208, 224, 240, 256, 271, 289, 381, 402, 412, 439, 460, 484, 501, 521, 539, 557, 573, 590, 606, 622, 639, 656, 673, 688, 705, 722, 738, 794, 806, 819, 829, 839, 850, 860], "raw": [24, 49, 64, 82, 97, 112, 129, 144, 162, 177, 193, 208, 224, 240, 256, 271, 289, 381, 402, 412, 439, 460, 484, 501, 521, 539, 557, 573, 590, 606, 622, 639, 656, 673, 688, 705, 722, 738, 794, 806, 819, 829, 839, 850, 860, 871], "can": [24, 35, 49, 64, 82, 83, 97, 112, 129, 144, 162, 177, 178, 193, 208, 224, 240, 256, 271, 289, 297, 311, 323, 348, 381, 402, 403, 412, 439, 440, 460, 484, 485, 501, 521, 539, 551, 557, 566, 573, 590, 606, 622, 625, 632, 639, 656, 673, 688, 705, 722, 732, 738, 750, 794, 797, 806, 819, 829, 839, 841, 850, 860, 864, 865, 867, 869, 871, 877, 881], "__from_data__": [24, 49, 64, 82, 97, 112, 129, 144, 162, 177, 193, 208, 224, 240, 256, 271, 289, 381, 402, 412, 439, 460, 484, 501, 521, 539, 557, 573, 590, 606, 622, 639, 656, 673, 688, 705, 722, 738, 794, 806, 819, 829, 839, 850, 860], "group": [25, 27, 461, 750, 751, 752, 753, 765, 768, 771, 870], "analyz": [25, 27, 28, 29, 30, 145], "cluster": [26, 28, 29, 30, 145, 146, 147, 241, 866], "pairwis": [26, 145, 146, 147, 241], "point": [26, 27, 50, 123, 145, 146, 147, 241, 351, 357, 360, 363, 366, 386, 389, 403, 413, 419, 444, 447, 465, 468, 489, 522, 540, 558, 566, 642, 724, 748, 780, 781, 866, 877, 880], "within": [26, 33, 145, 146, 147, 241, 307, 317, 841, 864, 871], "toler": [26, 30, 33, 34, 145, 146, 147, 241, 748, 878], "One": [27, 66, 796, 841, 865], "result": [27, 257, 363, 403, 491, 509, 525, 543, 561, 578, 594, 610, 628, 645, 662, 678, 693, 710, 727, 840, 864, 871, 872], "offer": 27, "access": 27, "set": [27, 29, 32, 146, 178, 220, 236, 290, 293, 306, 342, 344, 641, 772, 861, 864, 870, 871, 872, 877, 878], "uniqu": [27, 351, 413, 763], "locat": [27, 50, 351, 841, 871], "approxim": 27, "effect": 27, "first": [27, 33, 34, 35, 98, 113, 148, 178, 209, 225, 242, 257, 291, 298, 363, 506, 514, 754, 772, 776, 864, 865, 875, 877, 881], "combin": [28, 209, 877], "find": [28, 30, 32, 145, 147, 241, 290, 490, 765, 861, 871, 877], "beamgroupanalyz": [28, 30, 35, 145, 866], "prefer": 28, "from_model": 28, "prone": 28, "manual": 28, "instanti": [28, 50, 86, 130, 440], "pair": [28, 32, 33, 290, 861, 870], "handl": [28, 864, 865, 866], "previou": [28, 356], "subsequ": 28, "composit": 29, "analysi": [29, 30, 35, 145, 146, 865, 866], "analyzers_cl": 30, "specifi": [30, 682, 763, 864, 865, 872], "provid": [31, 67, 163, 220, 236, 319, 682, 748, 750, 753, 757, 807, 863, 864, 865, 868, 869, 871, 878], "tool": [31, 178, 185, 522, 527, 540, 545, 551, 625, 632, 732, 866, 867, 869, 877, 879, 880], "detect": [31, 878], "intersect": [31, 32, 33, 34, 123, 291, 293, 297, 304, 306, 311, 323, 342, 344, 348, 509, 561, 578, 594, 610, 628, 662, 678, 682, 865], "rtree": [32, 861], "max_dist": [32, 33, 34, 291, 293, 297, 304, 306, 311, 323, 342, 344, 348, 349, 760, 761], "r": [32, 290], "tree": [32, 290, 750], "search": [32, 290, 876], "neighbor": [32, 290, 861], "addit": [32, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 425, 428, 752, 869, 870, 871, 875], "distanc": [32, 33, 34, 291, 293, 297, 304, 306, 311, 323, 342, 344, 348, 428, 522, 540, 614, 642, 724, 761, 872, 878], "apart": 32, "non": 32, "touch": 32, "still": 32, "consid": [32, 33, 34, 291, 293, 297, 304, 306, 311, 323, 342, 344, 348, 356, 369, 371, 429, 761, 865, 877], "neightbor": [32, 861], "beam_a": [33, 113, 283, 753], "beam_b": [33, 113, 283], "tol": [33, 34, 293, 306, 344, 349, 748, 864], "1e": [33, 34, 293, 297, 306, 311, 323, 344, 348, 349], "06": [33, 34, 349], "sensit": 33, "consist": [33, 864, 865], "order": [33, 290, 298, 312, 344, 488, 840, 864, 865], "second": [33, 34, 35, 98, 113, 148, 178, 209, 225, 242, 257, 291, 298, 363, 506, 514, 754, 772, 776, 865, 875], "otherwis": [33, 67, 293, 306, 319, 344, 418, 558, 868, 871], "thei": [33, 220, 236, 344, 403, 513, 865, 877, 881], "were": [33, 50, 485, 870], "input": [33, 290, 403, 741, 742, 746, 864, 869, 870, 871, 872, 874, 875, 877, 878], "todo": [33, 34, 312, 364, 382, 403, 413, 461, 487, 488, 566, 753, 768, 771, 784, 877], "need": [33, 312, 403, 864, 865, 870, 881], "rework": [33, 34], "asap": 33, "mathemat": [33, 34], "maximum": [33, 34, 291, 293, 297, 304, 306, 311, 323, 342, 344, 348, 761], "desigen": [33, 34], "unit": [33, 34, 290, 364, 461, 488, 864, 865], "tupl": [33, 34, 50, 293, 298, 306, 344, 351, 364, 370, 413, 754], "jointtopologi": [33, 34, 50, 291, 306, 342, 748, 865, 866], "wall_a": 34, "wall_b": 34, "wall": [34, 324, 440, 748, 753, 761, 866, 872], "through": [34, 50, 98, 130, 194, 242, 257, 364, 403, 558, 566, 632, 862, 877], "potenti": 34, "f": [34, 864], "inform": [35, 299, 485, 866, 872, 878, 879, 880], "It": [35, 86, 293, 344, 382, 461, 706, 866, 867, 869, 870, 871, 877, 878, 880], "joineri": [35, 491, 776], "later": [35, 178, 864, 870, 871], "perform": 35, "element_a": 35, "timberel": [35, 293, 297, 298, 304, 306, 311, 319, 323, 344, 348, 351, 382, 413, 486, 615, 666, 667, 753, 866], "element_b": 35, "must": [41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 324, 506, 522, 540, 575, 591, 607, 615, 616, 632, 642, 666, 667, 682, 689, 706, 724, 776, 864, 872, 875], "min_element_count": [41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278], "max_element_count": [41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278], "dict": [41, 50, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 291, 304, 342, 403, 425, 428, 488, 489, 607, 615, 616, 659, 666, 667, 748, 752], "keyword": [41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 291, 304, 342, 425, 428, 752], "after": [45, 77, 86, 93, 108, 125, 140, 158, 173, 189, 204, 219, 235, 252, 267, 285, 369, 509, 525, 543, 561, 578, 594, 610, 628, 645, 662, 678, 693, 710, 727, 865, 876], "interact": [50, 748, 754, 765, 769, 772, 778, 865, 881], "directli": [50, 130, 304, 371, 429, 440, 750, 751, 865, 872, 877], "liter": [50, 574, 624, 658, 723, 740], "one": [50, 87, 98, 130, 148, 178, 194, 209, 225, 242, 257, 298, 355, 385, 416, 443, 464, 490, 682, 754, 757, 840, 841, 864, 871, 877, 879], "estim": 50, "name": [50, 312, 491, 502, 741, 744, 745, 746, 747, 752, 753, 768, 771, 864, 865, 870, 879], "correspond": [50, 178, 225, 351, 363, 491, 504, 864, 865, 870, 871, 877, 880], "map": [50, 869, 880], "start": [50, 178, 225, 351, 353, 356, 363, 364, 366, 369, 371, 429, 506, 522, 531, 540, 551, 558, 575, 591, 607, 625, 632, 641, 642, 648, 658, 659, 689, 706, 724, 732, 869, 871, 877], "depend": [50, 363, 365, 366, 867, 877], "btlxprocess": [50, 506, 517, 522, 531, 535, 540, 553, 558, 569, 575, 586, 591, 602, 607, 618, 625, 635, 642, 648, 652, 659, 669, 675, 684, 689, 700, 706, 718, 724, 734, 864, 865, 866], "enumer": 65, "possibl": [65, 312, 870], "topo_unknown": [65, 66], "topo_i": [65, 865], "topo_l": [65, 66, 865], "topo_t": [65, 66, 865], "topo_x": [65, 66, 865], "valu": [66, 98, 130, 194, 236, 242, 290, 351, 413, 489, 516, 531, 534, 552, 568, 585, 601, 617, 648, 651, 668, 683, 699, 706, 717, 733, 796, 864, 870], "For": [66, 276, 290, 776, 796, 864, 865, 866, 880], "log": [66, 796], "int": [66, 145, 178, 209, 225, 351, 353, 356, 369, 370, 371, 372, 376, 413, 429, 434, 488, 491, 506, 513, 531, 540, 551, 575, 581, 591, 598, 607, 614, 615, 616, 632, 648, 666, 667, 689, 697, 706, 714, 724, 732, 742, 746, 747, 754, 796, 841], "buttjoint": [67, 163, 865], "l": [67, 83, 98, 113, 130, 225, 342, 350, 865, 879], "butt": [67, 163, 272, 276, 350, 865, 872], "main_beam": [67, 83, 98, 130, 148, 163, 178, 194, 209, 225, 242, 257, 272, 614, 865], "cross_beam": [67, 83, 98, 130, 148, 163, 178, 194, 209, 225, 242, 257, 272, 865], "mill_depth": [67, 148, 163, 272, 877], "depth": [67, 148, 163, 178, 209, 220, 225, 272, 522, 531, 540, 551, 558, 591, 607, 614, 625, 632, 642, 648, 659, 682, 689, 706, 724, 732, 877], "pocket": [67, 148, 163, 272, 522, 614, 624, 866, 877], "mill": [67, 148, 163, 272, 525, 543, 645, 693, 710, 727, 864, 877], "ignor": 67, "butt_plan": [67, 163], "small_beam_butt": [67, 81, 877], "smaller": [67, 81, 351, 871], "section": [67, 81, 351, 365, 366, 863, 869, 871, 872, 876, 877], "modify_cross": [67, 877], "extend": [67, 353, 364, 776, 865, 877], "opposit": [67, 371, 429, 574, 877], "cut": [67, 98, 130, 163, 178, 185, 194, 209, 242, 272, 491, 506, 509, 513, 514, 515, 522, 525, 527, 528, 529, 530, 531, 540, 543, 545, 546, 547, 548, 551, 561, 574, 575, 578, 580, 581, 584, 591, 594, 598, 599, 600, 607, 610, 614, 615, 616, 623, 624, 625, 628, 632, 633, 634, 640, 641, 642, 645, 647, 648, 657, 658, 659, 662, 666, 667, 674, 678, 682, 689, 693, 697, 698, 702, 706, 710, 714, 715, 716, 723, 724, 727, 729, 732, 739, 740, 864, 865, 869, 871, 877, 878], "plane": [67, 113, 123, 163, 364, 509, 513, 514, 515, 525, 531, 551, 561, 578, 581, 594, 598, 599, 600, 610, 614, 628, 632, 633, 634, 645, 648, 662, 678, 682, 693, 697, 698, 710, 714, 716, 729, 732, 864, 865, 871, 875, 877, 880], "closest": [67, 163, 872], "side": [67, 83, 98, 130, 163, 194, 242, 351, 356, 369, 370, 371, 376, 413, 429, 434, 490, 491, 506, 513, 522, 531, 540, 551, 558, 566, 575, 581, 591, 598, 607, 614, 615, 616, 625, 632, 642, 648, 659, 666, 667, 682, 689, 697, 706, 714, 724, 732, 864, 865, 872, 875, 877], "back_plan": 67, "back": [67, 356, 641, 864], "reject_i": [67, 877], "reject": 67, "necessari": [69, 85, 86, 100, 115, 150, 165, 180, 196, 211, 227, 274, 865, 867], "automat": [69, 70, 85, 100, 101, 115, 116, 150, 151, 165, 166, 178, 180, 181, 196, 197, 211, 212, 225, 227, 228, 245, 260, 274, 275, 522, 531, 540, 551, 642, 648, 724, 732, 740, 864, 877, 880], "could": [69, 85, 100, 115, 150, 165, 180, 196, 211, 227, 274, 486, 487, 531, 551, 648, 697, 714, 732, 795, 864], "both": [70, 101, 116, 151, 166, 181, 197, 212, 225, 228, 245, 260, 275, 754, 757, 864, 865, 875, 877], "flip": [81, 83, 98, 130, 194, 242, 566, 877], "priorit": 81, "lapjoint": [83, 87, 98, 194, 242, 866], "frenchridgelap": [83, 864, 866], "lap": [83, 98, 130, 194, 242, 350, 575, 584, 864, 866], "ridg": [83, 575, 584], "align": [83, 290, 351, 357, 386, 413, 419, 444, 465, 758, 869, 880], "dimens": [83, 87, 276, 351, 370, 488, 820, 865, 871], "flip_lap_sid": [83, 98, 130, 194, 242, 877], "drillhole_diam": [83, 575, 581, 877], "drill": [83, 575, 599, 864, 866], "hole": [83, 403, 575, 869, 875, 877], "made": [83, 178, 209, 225, 506, 522, 540, 566, 567, 575, 591, 607, 625, 642, 659, 689, 706, 724, 877], "process_joineri": 86, "process": [86, 178, 225, 297, 311, 312, 323, 348, 351, 413, 488, 491, 497, 509, 514, 516, 517, 525, 534, 535, 543, 552, 553, 558, 561, 566, 567, 568, 569, 578, 585, 586, 594, 599, 601, 602, 610, 617, 618, 628, 633, 635, 645, 651, 652, 662, 668, 669, 678, 683, 684, 693, 699, 700, 710, 717, 718, 727, 733, 734, 776, 865, 866, 869, 881], "execut": [86, 795, 841], "via": [86, 865, 866], "add_extens": [86, 865], "compar": 87, "addition": [87, 864], "match": [87, 344, 490, 864, 865, 877], "cut_plane_bia": [98, 130, 194, 242, 877], "shift": [98, 130, 194, 242, 877], "deeper": [98, 130, 194, 242], "complet": [98, 130, 194, 242, 461, 865, 876], "either": [98, 130, 194, 242, 363, 506, 522, 540, 575, 591, 607, 642, 689, 706, 724, 741, 872], "5": [98, 130, 194, 242, 351, 376, 434, 491, 522, 540], "miter": [113, 123, 272, 350], "bisector": [113, 877], "angl": [113, 178, 185, 506, 522, 527, 531, 540, 545, 551, 558, 575, 591, 607, 625, 632, 642, 648, 659, 724, 732, 780, 781, 865, 875, 877], "centerlin": [113, 123, 148, 178, 209, 225, 257, 306, 324, 351, 363, 365, 366, 869, 870, 871, 880], "cutoff": [113, 877], "perpendicular": [113, 123, 370, 403, 632, 871], "abstract": [130, 382, 440], "common": [130, 865], "t": [130, 148, 163, 178, 194, 209, 225, 342, 350, 865, 879], "x": [130, 242, 257, 342, 350, 351, 356, 369, 371, 429, 506, 522, 540, 558, 575, 591, 607, 625, 632, 642, 659, 689, 706, 724, 782, 783, 865, 871, 879, 880], "do": [130, 525, 543, 645, 693, 710, 727, 868], "sub": 130, "n": [145, 146, 867], "desir": [145, 865, 880], "size": [145, 516, 534, 552, 568, 585, 601, 617, 651, 668, 683, 699, 717, 733, 871, 880], "found": 146, "4": [147, 178, 225, 351, 877], "birdsmouth": 148, "along": [148, 163, 178, 194, 209, 225, 242, 257, 351, 356, 369, 370, 371, 429, 522, 531, 551, 642, 648, 732, 865, 877], "tbirdsmouth": 148, "length": [163, 178, 194, 225, 242, 257, 324, 351, 365, 413, 488, 522, 531, 540, 551, 607, 614, 625, 632, 642, 648, 659, 682, 724, 732, 865, 877], "anoth": [163, 194, 865], "dovetail": [178, 185, 522, 527, 528, 529, 531, 540, 545, 546, 547, 551, 732], "notch": [178, 209, 257, 706, 877], "fit": [178, 209, 225, 868, 877], "start_i": [178, 225, 506, 522, 540, 551, 558, 591, 607, 625, 642, 659, 706, 714, 724, 732, 877], "posit": [178, 225, 351, 361, 390, 423, 448, 469, 488, 574, 575, 625, 632, 875, 877], "y": [178, 225, 272, 276, 351, 370, 506, 522, 531, 540, 551, 558, 591, 607, 625, 642, 648, 659, 706, 724, 732, 782, 783, 871, 877, 880], "axi": [178, 225, 290, 351, 356, 357, 365, 366, 369, 370, 371, 386, 413, 419, 429, 444, 465, 522, 531, 540, 558, 607, 632, 642, 648, 724, 758, 780, 781, 871, 875, 877, 880], "start_depth": [178, 225, 522, 531, 540, 551, 591, 642, 648, 659, 724, 732, 877], "surfac": [178, 225, 324, 376, 434, 490, 531, 551, 697, 714, 875], "rotat": [178, 225, 540, 551, 558, 724, 732, 782, 783, 792, 793, 871, 877], "around": [178, 225, 413, 428, 558, 871, 877], "width": [178, 225, 324, 351, 365, 366, 413, 488, 522, 531, 540, 551, 607, 642, 648, 659, 689, 692, 706, 708, 724, 732, 865, 870, 871, 872, 877], "cone_angl": [178, 522, 531, 540, 551, 877], "determin": [178, 298, 324, 428, 865, 877], "taper": [178, 209, 723, 877], "dovetail_shap": [178, 877], "shape": [178, 209, 225, 351, 403, 413, 421, 522, 531, 540, 551, 599, 633, 642, 648, 689, 706, 723, 724, 732, 740, 864, 877], "integ": [178, 225, 351, 413, 877], "index": [178, 225, 356, 369, 370, 371, 376, 429, 434, 490, 491, 513, 531, 551, 581, 598, 614, 615, 616, 632, 648, 666, 667, 697, 714, 732, 741, 747, 864, 865, 866, 877], "squar": [178, 225, 522, 540, 642, 724, 740, 877], "2": [178, 209, 225, 351, 516, 534, 552, 568, 585, 601, 617, 651, 668, 683, 699, 717, 733, 877, 881], "round": [178, 225, 522, 540, 642, 724, 740, 877], "3": [178, 225, 241, 351, 867, 877, 881], "radiu": [178, 225, 522, 531, 540, 551, 642, 648, 724, 732, 740, 877], "tool_angl": [178, 185, 527, 545, 877], "tool_diamet": [178, 185, 527, 545, 877], "tool_height": [178, 185, 527, 545, 877], "height": [178, 185, 209, 225, 324, 351, 365, 366, 413, 488, 527, 531, 540, 545, 551, 648, 689, 692, 706, 708, 724, 732, 865, 870, 871, 872, 877], "initi": [178, 374, 396, 432, 454, 477], "flank_angl": [178, 522, 531, 540, 551], "flank": [178, 522, 531, 540, 551], "applic": [178, 225, 299, 864, 865, 877, 879], "shape_radiu": [178, 225, 522, 531, 540, 551, 642, 648, 724, 732, 877], "machin": [178, 225, 351, 413, 515, 528, 529, 530, 546, 547, 548, 580, 584, 600, 607, 615, 616, 623, 634, 640, 641, 647, 657, 659, 666, 667, 674, 698, 702, 715, 716, 729, 739, 864, 874], "cutter": [185, 527, 545], "step": [209, 220, 525, 543, 645, 689, 693, 706, 710, 723, 727, 797, 799, 840, 864, 866, 876], "more": [209, 355, 385, 403, 416, 443, 464, 485, 865, 866, 869, 871, 877], "step_shap": [209, 689, 706, 877], "heel": [209, 220, 689, 706, 723, 877], "doubl": [209, 272, 506, 513, 514, 516, 534, 552, 568, 585, 601, 617, 651, 668, 683, 689, 699, 706, 717, 723, 733, 877], "step_depth": [209, 220, 689, 697, 706, 714, 877], "heel_depth": [209, 220, 689, 697, 706, 714, 877], "tapered_heel": [209, 697, 706, 714, 723, 877], "tenon_mortise_height": [209, 877], "tenon": [209, 225, 540, 546, 547, 551, 648, 689, 692, 702, 740, 866], "mortis": [209, 225, 522, 528, 529, 531, 706, 708, 715, 866], "featru": [209, 877], "tenonmortis": 225, "main_beam_guid": [225, 865], "cross_beam_guid": [225, 865], "somewher": [242, 257, 865], "typic": [257, 841, 864], "whose": 257, "offset": [257, 357, 360, 386, 389, 419, 444, 447, 465, 468, 531, 551, 648, 732, 872], "rest": 257, "top": [257, 413, 428, 522, 540, 624, 641, 642, 724, 732, 869, 877], "No": [257, 624], "three": [272, 877, 881], "coplanar": [276, 865], "inflate_bi": [290, 465, 468, 861], "bound": [290, 351, 357, 360, 386, 389, 413, 419, 422, 444, 447, 465, 468, 758, 759, 861], "box": [290, 351, 357, 360, 386, 389, 413, 419, 422, 444, 447, 465, 468, 488, 715, 758, 759, 841, 861, 869, 871], "aabb": [290, 351, 357, 386, 413, 419, 444, 465], "enlarg": 290, "amount": [290, 353, 364, 861], "identifi": [290, 763, 865], "regard": [290, 531, 648], "inflat": [290, 357, 360, 386, 389, 419, 422, 444, 447, 465, 468, 861], "pluggabl": 290, "plugin": [290, 866], "avail": 290, "jointrul": [291, 297, 304, 311, 342, 348, 866, 878], "categori": [291, 293, 298, 870, 871, 881], "attach": 291, "rule": [291, 293, 294, 295, 296, 297, 304, 306, 308, 309, 310, 311, 319, 320, 321, 322, 323, 324, 342, 344, 345, 346, 347, 348, 356, 369, 371, 429, 866, 869, 871, 872, 878, 881], "assign": [291, 342, 748, 750, 757, 865, 877, 880], "joint_typ": [291, 304, 342], "category_a": 291, "category_b": [291, 298], "topo": [291, 865], "support": [291, 293, 413, 841, 862], "model_max_dist": [293, 306, 344], "09": [293, 297, 306, 311, 323, 344, 348], "exceed": [293, 344, 580, 581], "absolut": [293, 306, 344, 864, 865], "alreadi": [293, 306, 344, 750, 753, 864], "static": [294, 295, 296, 297, 308, 309, 310, 311, 320, 321, 322, 323, 345, 346, 347, 348], "use_default": [296, 310, 322, 347], "handled_pair": [297, 311, 323, 348], "definit": [297, 311, 323, 348, 864, 878], "jointdefinit": [297, 311, 323, 348, 866], "sort": 298, "accord": [298, 351, 413, 870], "catergory_a": 298, "debug": [299, 485, 865, 872, 878, 879], "visual": [299, 485, 797, 841, 864], "inspect": [299, 879], "relat": [299, 461, 551, 732], "feature_error": 299, "occur": [299, 485, 776, 879], "joint_error": 299, "complianc": 306, "link": 312, "delai": [312, 314], "actual": [312, 314, 363], "downstream": [312, 314], "compon": [312, 314, 741, 742, 744, 745, 746, 747, 867, 870, 871, 872, 874, 875, 876, 878, 881], "There": [312, 870, 877, 881], "wai": [312, 807], "altern": [312, 865], "transform": [312, 361, 390, 423, 448, 469, 780, 781, 782, 783, 789, 791, 792, 793], "shall": [314, 753, 868], "assembli": [324, 866, 872, 879], "geometri": [324, 351, 358, 359, 360, 361, 379, 380, 382, 386, 387, 388, 389, 390, 400, 401, 403, 413, 420, 421, 422, 423, 425, 428, 437, 438, 444, 445, 446, 447, 448, 458, 459, 465, 466, 467, 468, 469, 482, 483, 485, 487, 488, 509, 514, 525, 528, 529, 530, 543, 547, 548, 561, 563, 566, 567, 578, 580, 584, 594, 599, 600, 610, 623, 628, 633, 634, 645, 647, 657, 662, 674, 678, 693, 698, 702, 710, 714, 715, 716, 727, 729, 739, 758, 759, 780, 781, 783, 788, 792, 793, 841, 861, 865, 866, 869, 871, 872, 878, 879, 880, 881], "planar": [324, 376, 434, 472, 869, 872, 877], "beam_width": [324, 872], "aka": 324, "thick": [324, 403, 413, 425, 428, 471, 472, 682, 872], "caviti": 324, "normal": [324, 351, 370, 471, 490, 551, 632, 732], "frame_depth": [324, 872], "stud_spac": [324, 872], "space": [324, 506, 522, 540, 551, 575, 591, 607, 625, 632, 642, 659, 689, 706, 724, 732, 864, 872], "stud": [324, 351, 871, 872, 877], "z_axi": 324, "vector": [324, 365, 366, 403, 425, 428, 566, 780, 781, 792, 793, 866, 871, 872], "orient": [324, 360, 365, 366, 389, 422, 447, 468, 471, 506, 540, 575, 591, 607, 623, 658, 674, 682, 689, 706, 724, 759, 880], "post": 324, "insid": [324, 784], "frame": [324, 351, 356, 364, 369, 371, 382, 403, 413, 429, 488, 490, 513, 528, 530, 531, 543, 546, 548, 551, 580, 598, 599, 632, 633, 647, 648, 697, 714, 727, 729, 732, 753, 841, 866, 869, 871, 872, 881], "zaxi": 324, "categoryrul": [324, 866], "line": [324, 351, 365, 413, 418, 566, 567, 865, 866, 870, 871, 872, 875, 876], "panel_length": 324, "panel_height": 324, "jack_stud": [324, 872, 877], "surfaceassembli": 324, "beamdefinit": 324, "jack": [324, 591, 599, 872], "king_stud": [324, 872, 877], "king": [324, 872], "edge_stud": [324, 872, 877], "edg": [324, 351, 413, 428, 522, 531, 540, 551, 574, 642, 648, 682, 724, 732, 754, 872, 877], "sill": [324, 872, 877], "header": [324, 872, 877], "plate": [324, 403, 440, 662, 666, 667, 674, 748, 866, 872, 878], "element_on": 328, "element_two": 328, "beam_def": 335, "element_lists_to_intersect": 335, "polylin": [336, 403, 413, 418, 428, 471], "element_loop": 337, "k": 342, "topology_typ": 342, "constant": 342, "global": [342, 879], "revers": 344, "beama": 349, "beamb": 349, "x_default": 350, "t_default": 350, "l_default": 350, "slat": 351, "etc": [351, 413, 830, 864, 866, 871], "rectangular": [351, 871], "local": [351, 558, 864, 865, 871], "coordin": [351, 361, 390, 403, 413, 423, 448, 469, 488, 506, 522, 540, 551, 558, 575, 591, 607, 625, 632, 642, 659, 689, 706, 724, 732, 864, 865, 871], "system": [351, 413, 490, 558, 864, 865, 871], "major": [351, 871], "also": [351, 862, 866, 869, 870, 871, 877], "fibr": [351, 869], "direct": [351, 364, 365, 366, 428, 741, 782, 783, 861, 864, 865, 871, 872, 881], "solid": [351, 403, 878], "wood": 351, "larger": [351, 871, 877], "parametr": [351, 376, 434, 506, 522, 540, 551, 575, 591, 607, 625, 632, 642, 659, 689, 706, 724, 732, 866], "blank": [351, 353, 372, 413, 428, 488, 580, 776, 871], "materi": [351, 413, 750, 756, 757, 773, 871, 880], "stock": [351, 413, 871], "produc": [351, 413], "ref_fram": [351, 413], "btlx": [351, 413, 488, 490, 491, 502, 503, 505, 863, 865, 866], "standard": [351, 413, 865, 872], "ref_sid": [351, 413, 531, 551, 632, 648, 697, 714, 732], "6": [351, 413, 490, 615, 616, 666, 667], "ref_edg": 351, "long": [351, 364], "equal": [351, 682, 865], "centerline_start": 351, "centerline_end": 351, "xmin": [351, 413], "ymin": [351, 413], "zmin": [351, 413], "xmax": [351, 413], "ymax": [351, 413], "zmax": [351, 413], "long_edg": 351, "midpoint": 351, "middl": [351, 877], "onc": [351, 413, 871], "wide": [351, 413], "joint_kei": [353, 372], "remov": [353, 372, 373, 374, 395, 396, 431, 432, 453, 454, 476, 477, 777, 778, 779, 870, 875, 877], "well": [353, 753, 864], "lement": [354, 384, 415, 442, 463], "ref_side_index": [356, 369, 370, 371, 429, 491, 513, 531, 551, 581, 598, 614, 615, 616, 632, 648, 666, 667, 697, 714, 732, 864, 865], "right": [356, 369, 371, 429, 625, 632, 868, 877], "hand": [356, 369, 371, 429], "thumb": [356, 369, 371, 429], "rs5": [356, 369, 371, 429], "rs6": [356, 369, 371, 429, 491, 864], "rel": [356, 369, 371, 429, 625, 632], "collis": [358, 387, 420, 445, 466], "include_featur": [359, 421, 446, 467], "includ": [359, 421, 446, 467, 502, 864, 865, 868], "brep": [359, 413, 421, 425, 446, 467, 472, 509, 525, 529, 543, 547, 561, 578, 584, 594, 610, 615, 616, 628, 640, 645, 657, 662, 666, 667, 678, 693, 702, 710, 727, 739, 866, 880], "obb": [360, 389, 422, 447, 468], "world": [361, 390, 403, 423, 448, 469, 871, 872], "spatial": [361, 390, 423, 448, 469, 865], "hierarchi": [361, 390, 423, 448, 469, 748, 750, 881], "endpoint": [363, 366], "closer": 363, "interest": 363, "pln": 364, "metric": 364, "minimum": [364, 632, 864, 865], "z_vector": [365, 366], "indic": [365, 366, 485, 575, 870, 871], "worldz": [365, 366], "worldx": [365, 366], "point_start": 366, "point_end": 366, "end_point": 366, "next": 369, "front": [369, 641], "parallel": [370, 607, 614, 682, 841, 871, 877], "measur": 370, "across": [371, 429, 865], "state": [374, 396, 432, 454, 477], "debug_info": [374, 396, 432, 454, 477, 485, 865], "side_index": [376, 434], "request": [376, 434], "copi": [380, 401, 438, 459, 483, 781, 783, 790, 791, 793, 868], "compas_model": [380, 401, 438, 459, 483, 753, 765, 768, 771, 840], "screw": [382, 830], "dowel": [382, 877], "bracket": 382, "we": [382, 403, 867], "rethink": 382, "entir": [382, 632], "clear": [382, 742, 746, 865], "appropri": [382, 864], "put": [403, 488], "some": [403, 864, 865, 869, 880], "thought": 403, "what": [403, 864], "v": [403, 865], "perhap": [403, 487], "clearli": 403, "prehap": 403, "would": 403, "sens": 403, "move": 403, "stuff": 403, "over": 403, "here": [403, 776, 865, 867, 872, 873, 880], "ballnodejoint": [403, 866], "while": [403, 485, 516, 534, 552, 568, 585, 601, 617, 651, 668, 683, 699, 717, 733, 864, 865, 867, 877, 879], "attempt": [403, 879], "tightli": 403, "coupl": 403, "differec": 403, "outlin": [403, 413, 418, 428], "seem": 403, "just": 403, "outline_point": 403, "structur": [403, 789, 790, 791, 862, 865, 866, 869, 872, 878, 881], "assum": 403, "goe": [403, 625, 632], "extra": 403, "geometr": [403, 864, 866, 875, 878], "These": [403, 425, 864, 865, 870, 877], "boolean": [403, 869, 872, 875, 878], "btlxfromgeometrydefinit": 403, "plywood": 413, "clt": 413, "bottom": [413, 428, 522, 540, 551, 641, 642, 724, 732, 877], "outline_a": [413, 418], "nurbscurv": 413, "princip": [413, 418, 581], "outline_b": [413, 418], "blank_extens": [413, 428], "blank_length": 413, "area": 413, "extrud": 425, "slab": [425, 461], "open": [428, 471, 862, 866, 876], "is_beam": 440, "is_plat": 440, "is_wal": 440, "is_group_el": 440, "singl": [461, 472, 841], "serv": [461, 880], "form": [461, 865], "often": 461, "prefabr": 461, "envelop": 461, "bodi": 461, "docstr": [461, 864], "_": [467, 870], "sure": 471, "correctli": [471, 623, 674, 864, 865, 870], "except": [485, 486, 487, 754, 776, 864, 865], "try": [485, 864, 865], "suppos": 485, "debug_geometri": 485, "about": [485, 866], "cannot": [486, 487, 865, 871, 877], "messag": [486, 487, 864, 865], "renam": [487, 746, 747], "processingvisualizationerror": 487, "someth": 487, "feature_geometri": [487, 864], "element_geometri": [487, 864], "modifi": [487, 788, 864, 865, 867, 868], "act": 488, "wrapper": 488, "realli": 488, "parent": [488, 750, 751, 752, 753], "order_num": 488, "scale_factor": 488, "scale": [488, 780, 781, 792, 793, 864, 880], "factor": [488, 497, 516, 517, 534, 535, 552, 553, 568, 569, 585, 586, 601, 602, 617, 618, 635, 651, 652, 668, 669, 683, 684, 699, 700, 717, 718, 733, 734, 782, 783, 864], "anyth": 488, "mm": [488, 558, 864], "attr": [488, 752], "corner": [488, 877], "et": 489, "element_fac": 490, "essenti": [490, 865], "translat": [490, 780, 781, 782, 783], "zero": [491, 872], "rs1": [491, 513, 531, 551, 581, 598, 614, 648, 697, 714, 732, 864], "prioriti": [491, 841, 877], "process_id": 491, "id": [491, 841], "processing_nam": [491, 864], "is_joineri": 491, "subprocess": [493, 508, 524, 542, 560, 577, 593, 609, 627, 644, 661, 677, 691, 709, 726], "nest": [493, 508, 524, 542, 560, 577, 593, 609, 627, 644, 661, 677, 691, 709, 726], "write": [502, 503, 809, 870, 871], "company_nam": 502, "compani": 502, "gramazio": [502, 862, 866, 868], "kohler": [502, 862, 866, 868], "research": [502, 862, 866, 868], "file_nam": 502, "comment": 502, "xml": [503, 504, 505, 864, 874], "type_": 504, "regist": [504, 865], "callabl": [504, 768], "file_path": 505, "model_to_xml": 505, "orientationtyp": [506, 540, 575, 591, 607, 689, 706, 724, 866], "start_x": [506, 522, 540, 558, 575, 591, 607, 625, 632, 642, 659, 689, 706, 724], "100000": [506, 522, 540, 575, 591, 607, 625, 642, 659, 689, 706, 724], "50000": [506, 591, 607, 625, 659, 689, 706], "angle_1": 506, "horizont": [506, 575, 591, 607, 659, 682], "179": [506, 522, 540, 575, 591, 607, 625, 642, 659, 689, 706, 724, 875], "9": [506, 522, 540, 575, 591, 607, 625, 642, 659, 689, 706, 724, 875], "inclination_1": 506, "vertic": [506, 591, 607, 625, 659, 682, 871, 877], "angle_2": 506, "inclination_2": 506, "plane_a": [514, 865, 875], "plane_b": [514, 875], "mean": [516, 534, 552, 568, 585, 601, 617, 651, 668, 683, 699, 717, 733, 864], "5000": [522, 540, 642, 724, 753], "margin": [522, 540, 642, 724], "180": [522, 642], "slope": [522, 607, 642, 659], "reder": [522, 540, 642, 724], "inclin": [522, 540, 558, 591, 607, 625, 642, 659, 689, 706, 724], "limitation_top": 522, "limit": [522, 540, 558, 607, 615, 616, 624, 625, 641, 642, 659, 666, 667, 706, 724, 732, 868], "unlimit": [522, 624], "length_limited_bottom": [522, 540, 642, 724, 732], "whether": [522, 540, 625, 642, 706, 724, 732, 841, 865, 868], "1000": [522, 540, 642, 689, 692, 706, 708, 724], "cone": [522, 531, 540, 551], "30": [522, 540], "use_flank_angl": [522, 540], "35": [522, 540], "volum": [525, 529, 543, 547, 584, 615, 616, 623, 640, 645, 657, 666, 667, 674, 693, 702, 710, 715, 727, 739, 748, 864, 865], "itersect": [525, 543, 645, 693, 710, 727], "fail": [525, 543, 645, 693, 710, 727, 864], "80": [531, 551, 648, 732], "40": [531, 551, 648, 732], "28": [531, 551, 648, 732], "10": [531, 551, 862, 867], "15": [531, 551], "20": [531, 551, 558, 648, 697, 714, 732], "case": [531, 648, 872, 878], "hous": [531, 648], "equival": [531, 648, 864], "dovetailtenon": [531, 732, 866], "length_limited_top": [540, 642, 724, 732], "50": [551, 558, 732], "define_dovetail_tool": [551, 732], "degre": [558, 625, 632], "depth_limit": [558, 625], "go": 558, "cylind": [563, 841], "chang": [566, 877], "too": 566, "fragil": 566, "caus": 566, "issu": [566, 876], "alt": 566, "straight": [566, 865, 871], "enum": [574, 624, 658, 723, 740, 795], "refedg": [574, 575], "oppedg": [574, 575], "french": [575, 584], "ref_posit": 575, "edgepositiontyp": [575, 866], "drillhol": [575, 581], "flag": 575, "other_beam": 581, "furthest": [581, 872], "rafter": [591, 599, 871], "89": 607, "lead_angle_parallel": 607, "lead": 607, "lead_angl": 607, "lead_inclination_parallel": 607, "lead_inclin": 607, "machining_limit": [607, 615, 616, 659, 666, 667], "polyhedron": [615, 616, 623, 666, 667, 674], "subtract": [623, 674, 875, 878], "ensur": [623, 674, 864, 865], "like": [624, 866, 869, 878], "longitudin": [625, 633], "90": [625, 632], "start_limit": 625, "end_limit": 625, "certain": 625, "angle_start": [625, 632], "angle_end": [625, 632], "tool_posit": [625, 632], "alignmenttyp": [625, 632], "left": [625, 632], "center": [625, 632, 748, 862, 877], "so": [632, 864, 865, 868], "chamfer": [632, 724, 732], "chanfer": 632, "logitudin": 633, "neg": 640, "configur": [641, 748], "expected_kei": 641, "dictionari": [641, 864, 865], "face_limited_start": 641, "face_limited_end": 641, "face_limited_front": 641, "face_limited_back": 641, "face_limited_top": 641, "face_limited_bottom": 641, "awai": 658, "internal_angl": 659, "intern": [659, 864], "tilt_ref_sid": 659, "tilt": [659, 877], "tilt_end_sid": 659, "tilt_opp_sid": 659, "oppos": 659, "tilt_start_sid": 659, "full": 682, "accross": 682, "exactli": 682, "small": 682, "strut_inclin": [689, 706], "strut": [689, 706], "taperedheel": [689, 723], "presenc": [689, 706], "ye": [689, 706, 867], "tenon_width": [689, 692], "tenon_height": [689, 692], "stepjointnotch": [692, 866], "notch_limit": [706, 714], "notch_width": [706, 714], "strut_height": [706, 714], "stepshapetyp": [706, 866], "mortise_width": [706, 708], "mortise_height": [706, 708], "plana": 714, "io": 741, "ghenv": [741, 742, 746, 747], "environ": [741, 742, 746, 747, 866, 867, 871], "permanent_param_count": [742, 746], "delet": [742, 746], "param": [744, 745, 864], "input_nam": [746, 747], "rename_count": 746, "keep_connect": 746, "express": [748, 868], "center_of_mass": 748, "mass": 748, "detected_topo": 748, "beam_a_kei": 748, "beam_b_kei": 748, "total": 748, "groupnod": [750, 751, 752, 753], "under": [750, 751], "root": [750, 751], "elementnod": [750, 751], "upstream": [753, 768, 771], "mayb": 753, "wall1_group": 753, "200": 753, "3000": 753, "wall1": 753, "worldxi": 753, "100": 753, "300": 753, "add_el": 753, "has_group": 753, "b": [754, 772, 778], "graph": 754, "neither": 757, "retriev": [763, 865, 870], "yield": [764, 774, 775], "interaction_typ": 765, "group_nam": [768, 771], "filter_": 768, "queri": [768, 769, 771], "filter": [768, 870], "stop_on_first_error": 776, "feasibl": [776, 865], "instruct": [776, 795, 797, 820, 830, 841, 851, 864, 866, 876], "sequenc": [776, 840, 866], "reason": 776, "iter": 776, "encount": [776, 876], "radian": [780, 781], "connectionsolv": [784, 866], "human": [796, 841], "robot": [796, 841], "build": [797, 807, 808, 809, 840, 841, 867, 881], "collect": [797, 861, 878], "pars": 807, "implemet": 807, "your": [807, 862, 864, 865, 867], "own": [807, 877], "you": [807, 862, 864, 865, 867, 869, 872, 876, 877, 881], "want": [807, 864], "buildingplan": [808, 809, 840, 866], "building_plan": 809, "tranform": [818, 828, 838, 859], "3d": [820, 830, 866], "linear": [820, 871], "incorpor": 830, "simpl": [840, 866, 869], "per": 840, "assembl": 841, "actor": [841, 866], "element_id": 841, "cad": 841, "elements_held": 841, "held": 841, "is_built": 841, "is_plan": 841, "increment": 841, "text": [851, 874], "overlai": 851, "prior": 861, "project": [862, 866], "develop": [862, 866], "aleksandra": 862, "apolinarska": 862, "chen": 862, "kasir": 862, "gonzalo": 862, "casa": 862, "eth": [862, 866, 868], "zurich": [862, 866, 868], "swiss": 862, "nation": 862, "scienc": 862, "foundat": 862, "compet": 862, "digit": 862, "nccr": 862, "dfab": 862, "programm": 862, "As": 862, "mani": [862, 866, 867], "contributor": 862, "work": [862, 864, 865, 872], "acknowledg": 862, "misc": 862, "titl": 862, "librari": [862, 866, 869, 876], "author": [862, 868], "anna": 862, "http": [862, 864, 867], "github": [862, 867], "com": [862, 864, 867], "gramaziokohl": 862, "year": 862, "2022": 862, "2023": 862, "doi": 862, "5281": 862, "zenodo": 862, "7934267": 862, "url": 862, "welcom": 863, "comprehens": 863, "guidanc": 863, "contribut": [863, 866, 867], "framework": [863, 864, 866], "oper": [864, 865, 875, 878], "integr": [864, 865], "offici": [864, 876], "design2machin": 864, "btlx_2_3_0": 864, "pdf": 864, "studi": [864, 865], "understand": 864, "constraint": 864, "rang": [864, 877], "src": [864, 865], "__init__": [864, 865], "meaning": [864, 865], "__data__": [864, 865], "properti": [864, 865], "btlxprocessingparam": 864, "as_dict": 864, "ordereddict": 864, "btlxwriter": [864, 866], "newprocess": [864, 865], "hypotheticalprocess": 864, "def": [864, 865], "super": [864, 865], "arg_a": [864, 865], "arg_b": [864, 865], "newprocessingparam": 864, "arga": 864, "prec": 864, "_instanc": 864, "precis": 864, "argb": 864, "jackraftercut": [864, 866, 875], "doublecut": [864, 866, 875, 877], "At": [864, 866], "least": 864, "target": [864, 865], "extract": [864, 871, 879], "relationship": 864, "from_shapes_and_el": 864, "from_anygeometry_and_el": 864, "additional_arg_1": 864, "additional_arg_2": 864, "calculate_arg_a": 864, "calculate_arg_b": 864, "arg_c": 864, "arg_d": 864, "abov": [864, 868, 877], "convent": [864, 871], "descript": 864, "from_plane_and_beam": [864, 865], "from_volume_and_beam": [864, 865], "from_line_and_el": 864, "from_planes_and_beam": 864, "from_beam_beam_and_plan": 864, "invers": 864, "manag": [864, 867, 876], "geometry_from_params_and_el": 864, "feature_geometry_generated_from_param": 864, "modified_element_geometri": 864, "purpos": [864, 868], "plane_from_params_and_beam": 864, "volume_from_params_and_beam": 864, "cylinder_from_params_and_el": 864, "planes_from_params_and_beam": 864, "lap_volume_from_params_and_beam": 864, "py": [864, 865], "cover": [864, 865], "modif": [864, 865], "referencesid": 864, "bidirect": 864, "document": [864, 868, 870, 871, 876, 880], "particip": 865, "achiev": 865, "establish": 865, "how": [865, 869, 876, 877, 881], "involv": 865, "re": 865, "notat": 865, "meet": [865, 877], "relev": 865, "distinct": 865, "treat": 865, "differenti": 865, "accordingli": 865, "supported_topologi": 865, "restore_beams_from_kei": 865, "deseri": 865, "share": 865, "logic": 865, "lbuttjoint": [865, 866], "behavior": 865, "tnewjoint": 865, "default_value_a": 865, "default_value_b": 865, "hold": 865, "element_by_guid": 865, "persist": 865, "lmiterjoint": [865, 866], "xlapjoint": [865, 866], "tbirdsmouthjoint": [865, 866], "tstepjoint": [865, 866], "lfrenchridgelapjoint": [865, 866], "dimension": 865, "select": [865, 872, 877, 879], "deriv": 865, "entiti": [865, 866], "consult": [865, 876], "usag": 865, "main_ref_side_index": 865, "cross_ref_side_index": 865, "main_beam_feature_geometri": 865, "feature_geometry_for_main_beam": 865, "cross_beam_feature_geometri": 865, "feature_geometry_for_cross_beam": 865, "add_featur": 865, "accommod": 865, "check_elements_compat": 865, "assert": 865, "main_beam_cutting_plan": 865, "start_a": 865, "end_a": 865, "extension_to_plan": 865, "ex": 865, "add_blank_extens": 865, "main_featur": 865, "cross_featur": 865, "itself": 865, "are_compat": 865, "append": 865, "pattern": 865, "declar": 865, "duplic": 865, "leverag": 865, "maintain": [865, 866], "signatur": 865, "alwai": 865, "failur": 865, "aid": 865, "rebuild": 865, "packag": [866, 867, 876], "written": 866, "python": [866, 867, 869], "ecosystem": 866, "rhinocero": 866, "plug": 866, "activ": [866, 867, 871, 878, 880], "being": 866, "continu": 866, "stage": 866, "encompass": 866, "fast": 866, "intuit": 866, "custom": 866, "semant": 866, "futur": 866, "expand": 866, "entail": [866, 870], "softwar": [866, 868], "specialist": 866, "built": [866, 869], "upon": 866, "basic": 866, "complex": 866, "resolv": 866, "backend": 866, "run": 866, "rhinocommon": 866, "sdk": 866, "opencascad": 866, "occ": 866, "introduct": 866, "instal": [866, 869], "api": [866, 869], "llapjoint": 866, "genericjoint": 866, "tdovetailjoint": 866, "tlapjoint": 866, "tenonmortisejoint": 866, "xnotchjoint": 866, "ybuttjoint": 866, "nbeamkdtreeanalyz": 866, "tripletanalyz": 866, "quadanalyz": 866, "compositeanalyz": 866, "find_neighboring_el": 866, "btlxpart": 866, "dovetailmortis": 866, "longitudinalcut": 866, "slot": 866, "stepjoint": 866, "limitationtoptyp": 866, "machininglimit": 866, "tenonshapetyp": 866, "debuginfom": 866, "directrul": 866, "featuredefinit": 866, "surfacemodel": 866, "topologyrul": 866, "guess_joint_topology_2beam": 866, "set_default_joint": 866, "buildingplanpars": 866, "lineardimens": 866, "model3d": 866, "simplesequencegener": 866, "text3d": 866, "clear_gh_param": 866, "add_gh_param": 866, "manage_dynamic_param": 866, "list_input_valid": 866, "item_input_valid": 866, "get_leaf_subclass": 866, "rename_gh_input": 866, "workflow": [866, 869, 870, 871], "show": [866, 869], "util": [866, 869], "licens": 866, "cite": 866, "recommend": 867, "mamba": 867, "myenvnam": 867, "c": [867, 868], "conda": 867, "forg": 867, "7": 867, "m": 867, "compas_rhino": 867, "v7": 867, "wish": 867, "fork": 867, "repositori": 867, "clone": 867, "git": 867, "yourgithub_usernam": 867, "cd": 867, "edit": 867, "mode": 867, "pip": 867, "dev": 867, "compil": 867, "rhino7": [867, 876], "invok": 867, "ghuser": 867, "rhino8": [867, 876], "mit": 868, "copyright": 868, "2025": 868, "permiss": 868, "herebi": 868, "grant": 868, "free": 868, "charg": 868, "person": 868, "obtain": 868, "deal": 868, "restrict": 868, "merg": 868, "publish": 868, "distribut": 868, "sublicens": 868, "sell": 868, "permit": 868, "whom": 868, "furnish": 868, "subject": 868, "condit": 868, "notic": 868, "substanti": 868, "portion": 868, "THE": 868, "AS": 868, "warranti": 868, "OF": 868, "kind": [868, 877], "OR": 868, "impli": [868, 878], "BUT": 868, "NOT": 868, "TO": 868, "merchant": 868, "FOR": 868, "particular": 868, "AND": 868, "noninfring": 868, "IN": 868, "NO": 868, "event": 868, "holder": 868, "BE": 868, "liabl": 868, "claim": 868, "damag": 868, "liabil": 868, "action": 868, "contract": 868, "tort": 868, "aris": 868, "out": 868, "WITH": 868, "easi": 869, "autom": 869, "bake": 869, "textur": [869, 880], "render": [869, 880], "style": 869, "might": [869, 877], "componen": 869, "overal": 869, "idea": 869, "Then": 869, "explain": [869, 876], "concept": 869, "intend": [870, 871], "hybrid": 870, "encod": 870, "concaten": 870, "colon": 870, "entri": 870, "underscor": 870, "attr1nam": 870, "attr1value_attr2nam": 870, "attr2valu": 870, "four": [870, 877], "zvector": [870, 871], "setstandardattribut": 870, "getstandardattribut": 870, "user": [870, 872, 876], "criteria": 870, "setcustomattribut": 870, "getcustomattribut": 870, "checkstandardattribut": 870, "miss": 870, "deleteattribut": 870, "joist": 871, "where": [871, 874, 877, 880], "linecurv": 871, "referenc": [871, 872], "latter": 871, "drawn": 871, "li": [871, 880], "sai": 871, "updaterefobj": 871, "centrelin": 871, "curv": 871, "help": [872, 876], "bit": 872, "vocabulari": 872, "stud_direct": 872, "creategeometri": [872, 878], "debuginfo": [872, 878], "sheeting_outsid": 872, "sheet": 872, "sheeting_insid": 872, "lintel_post": 872, "onto": 872, "edge_stud_offset": 872, "flush": [872, 877], "custom_dimens": 872, "joint_overrid": 872, "dynam": [872, 877], "demo": 873, "content": 874, "ly": 875, "01": [875, 877], "cylindr": 875, "command": 876, "packagemanag": 876, "press": 876, "enter": 876, "window": 876, "click": [876, 877], "restart": 876, "success": 876, "toolbar": 876, "look": 876, "tab": 876, "retart": 876, "seek": 876, "forum": 876, "lower": 877, "hereaft": 877, "lowest": 877, "highest": 877, "level": 877, "canva": 877, "now": 877, "drop": 877, "down": 877, "becaus": 877, "everi": 877, "halflap": 877, "overwrit": [877, 881], "variabl": 877, "highli": 877, "By": [877, 881], "shorten": 877, "clean": 877, "half": 877, "upper": 877, "overlap": 877, "99": 877, "unlik": 877, "present": 877, "centr": 877, "keep": 877, "secur": 877, "prevent": 877, "sequenti": 877, "inner": 877, "third": 877, "outer": 877, "remain": 877, "unchang": 877, "crate": 877, "doblecut": 877, "summaris": 877, "compos": 878, "computation": 878, "expens": 878, "disabl": 878, "maxdist": 878, "max": 878, "visualis": 878, "preview": 879, "recogn": 879, "bakewithboxmap": 880, "layer": 880, "random": 880, "deviat": 880, "mapsiz": 880, "adjust": 880, "imag": 880, "ratio": 880, "bitmap": 880, "care": 881, "final": 881}, "objects": {"compas_timber.connections": [[10, 0, 1, "", "BallNodeJoint"], [25, 0, 1, "", "BeamGroupAnalyzer"], [27, 0, 1, "", "Cluster"], [28, 0, 1, "", "CompositeAnalyzer"], [31, 0, 1, "", "ConnectionSolver"], [35, 0, 1, "", "GenericJoint"], [50, 0, 1, "", "Joint"], [65, 0, 1, "", "JointTopology"], [67, 0, 1, "", "LButtJoint"], [83, 0, 1, "", "LFrenchRidgeLapJoint"], [98, 0, 1, "", "LLapJoint"], [113, 0, 1, "", "LMiterJoint"], [130, 0, 1, "", "LapJoint"], [145, 0, 1, "", "NBeamKDTreeAnalyzer"], [147, 2, 1, "", "QuadAnalyzer"], [148, 0, 1, "", "TBirdsmouthJoint"], [163, 0, 1, "", "TButtJoint"], [178, 0, 1, "", "TDovetailJoint"], [194, 0, 1, "", "TLapJoint"], [209, 0, 1, "", "TStepJoint"], [225, 0, 1, "", "TenonMortiseJoint"], [241, 2, 1, "", "TripletAnalyzer"], [242, 0, 1, "", "XLapJoint"], [257, 0, 1, "", "XNotchJoint"], [272, 0, 1, "", "YButtJoint"], [290, 2, 1, "", "find_neighboring_elements"]], "compas_timber.connections.BallNodeJoint": [[11, 1, 1, "", "ToString"], [12, 1, 1, "", "add_extensions"], [13, 1, 1, "", "add_features"], [14, 1, 1, "", "check_elements_compatibility"], [15, 1, 1, "", "copy"], [16, 1, 1, "", "create"], [17, 1, 1, "", "element_count_complies"], [18, 1, 1, "", "from_json"], [19, 1, 1, "", "from_jsonstring"], [20, 1, 1, "", "restore_beams_from_keys"], [21, 1, 1, "", "sha256"], [22, 1, 1, "", "to_json"], [23, 1, 1, "", "to_jsonstring"], [24, 1, 1, "", "validate_data"]], "compas_timber.connections.BeamGroupAnalyzer": [[26, 1, 1, "", "find"]], "compas_timber.connections.CompositeAnalyzer": [[29, 1, 1, "", "find"], [30, 1, 1, "", "from_model"]], "compas_timber.connections.ConnectionSolver": [[32, 1, 1, "", "find_intersecting_pairs"], [33, 1, 1, "", "find_topology"], [34, 1, 1, "", "find_wall_wall_topology"]], "compas_timber.connections.GenericJoint": [[36, 1, 1, "", "ToString"], [37, 1, 1, "", "add_extensions"], [38, 1, 1, "", "add_features"], [39, 1, 1, "", "check_elements_compatibility"], [40, 1, 1, "", "copy"], [41, 1, 1, "", "create"], [42, 1, 1, "", "element_count_complies"], [43, 1, 1, "", "from_json"], [44, 1, 1, "", "from_jsonstring"], [45, 1, 1, "", "restore_beams_from_keys"], [46, 1, 1, "", "sha256"], [47, 1, 1, "", "to_json"], [48, 1, 1, "", "to_jsonstring"], [49, 1, 1, "", "validate_data"]], "compas_timber.connections.Joint": [[51, 1, 1, "", "ToString"], [52, 1, 1, "", "add_extensions"], [53, 1, 1, "", "add_features"], [54, 1, 1, "", "check_elements_compatibility"], [55, 1, 1, "", "copy"], [56, 1, 1, "", "create"], [57, 1, 1, "", "element_count_complies"], [58, 1, 1, "", "from_json"], [59, 1, 1, "", "from_jsonstring"], [60, 1, 1, "", "restore_beams_from_keys"], [61, 1, 1, "", "sha256"], [62, 1, 1, "", "to_json"], [63, 1, 1, "", "to_jsonstring"], [64, 1, 1, "", "validate_data"]], "compas_timber.connections.JointTopology": [[66, 1, 1, "", "get_name"]], "compas_timber.connections.LButtJoint": [[68, 1, 1, "", "ToString"], [69, 1, 1, "", "add_extensions"], [70, 1, 1, "", "add_features"], [71, 1, 1, "", "check_elements_compatibility"], [72, 1, 1, "", "copy"], [73, 1, 1, "", "create"], [74, 1, 1, "", "element_count_complies"], [75, 1, 1, "", "from_json"], [76, 1, 1, "", "from_jsonstring"], [77, 1, 1, "", "restore_beams_from_keys"], [78, 1, 1, "", "sha256"], [79, 1, 1, "", "to_json"], [80, 1, 1, "", "to_jsonstring"], [81, 1, 1, "", "update_beam_roles"], [82, 1, 1, "", "validate_data"]], "compas_timber.connections.LFrenchRidgeLapJoint": [[84, 1, 1, "", "ToString"], [85, 1, 1, "", "add_extensions"], [86, 1, 1, "", "add_features"], [87, 1, 1, "", "check_elements_compatibility"], [88, 1, 1, "", "copy"], [89, 1, 1, "", "create"], [90, 1, 1, "", "element_count_complies"], [91, 1, 1, "", "from_json"], [92, 1, 1, "", "from_jsonstring"], [93, 1, 1, "", "restore_beams_from_keys"], [94, 1, 1, "", "sha256"], [95, 1, 1, "", "to_json"], [96, 1, 1, "", "to_jsonstring"], [97, 1, 1, "", "validate_data"]], "compas_timber.connections.LLapJoint": [[99, 1, 1, "", "ToString"], [100, 1, 1, "", "add_extensions"], [101, 1, 1, "", "add_features"], [102, 1, 1, "", "check_elements_compatibility"], [103, 1, 1, "", "copy"], [104, 1, 1, "", "create"], [105, 1, 1, "", "element_count_complies"], [106, 1, 1, "", "from_json"], [107, 1, 1, "", "from_jsonstring"], [108, 1, 1, "", "restore_beams_from_keys"], [109, 1, 1, "", "sha256"], [110, 1, 1, "", "to_json"], [111, 1, 1, "", "to_jsonstring"], [112, 1, 1, "", "validate_data"]], "compas_timber.connections.LMiterJoint": [[114, 1, 1, "", "ToString"], [115, 1, 1, "", "add_extensions"], [116, 1, 1, "", "add_features"], [117, 1, 1, "", "check_elements_compatibility"], [118, 1, 1, "", "copy"], [119, 1, 1, "", "create"], [120, 1, 1, "", "element_count_complies"], [121, 1, 1, "", "from_json"], [122, 1, 1, "", "from_jsonstring"], [123, 1, 1, "", "get_cutoff_plane"], [124, 1, 1, "", "get_cutting_planes"], [125, 1, 1, "", "restore_beams_from_keys"], [126, 1, 1, "", "sha256"], [127, 1, 1, "", "to_json"], [128, 1, 1, "", "to_jsonstring"], [129, 1, 1, "", "validate_data"]], "compas_timber.connections.LapJoint": [[131, 1, 1, "", "ToString"], [132, 1, 1, "", "add_extensions"], [133, 1, 1, "", "add_features"], [134, 1, 1, "", "check_elements_compatibility"], [135, 1, 1, "", "copy"], [136, 1, 1, "", "create"], [137, 1, 1, "", "element_count_complies"], [138, 1, 1, "", "from_json"], [139, 1, 1, "", "from_jsonstring"], [140, 1, 1, "", "restore_beams_from_keys"], [141, 1, 1, "", "sha256"], [142, 1, 1, "", "to_json"], [143, 1, 1, "", "to_jsonstring"], [144, 1, 1, "", "validate_data"]], "compas_timber.connections.NBeamKDTreeAnalyzer": [[146, 1, 1, "", "find"]], "compas_timber.connections.TBirdsmouthJoint": [[149, 1, 1, "", "ToString"], [150, 1, 1, "", "add_extensions"], [151, 1, 1, "", "add_features"], [152, 1, 1, "", "check_elements_compatibility"], [153, 1, 1, "", "copy"], [154, 1, 1, "", "create"], [155, 1, 1, "", "element_count_complies"], [156, 1, 1, "", "from_json"], [157, 1, 1, "", "from_jsonstring"], [158, 1, 1, "", "restore_beams_from_keys"], [159, 1, 1, "", "sha256"], [160, 1, 1, "", "to_json"], [161, 1, 1, "", "to_jsonstring"], [162, 1, 1, "", "validate_data"]], "compas_timber.connections.TButtJoint": [[164, 1, 1, "", "ToString"], [165, 1, 1, "", "add_extensions"], [166, 1, 1, "", "add_features"], [167, 1, 1, "", "check_elements_compatibility"], [168, 1, 1, "", "copy"], [169, 1, 1, "", "create"], [170, 1, 1, "", "element_count_complies"], [171, 1, 1, "", "from_json"], [172, 1, 1, "", "from_jsonstring"], [173, 1, 1, "", "restore_beams_from_keys"], [174, 1, 1, "", "sha256"], [175, 1, 1, "", "to_json"], [176, 1, 1, "", "to_jsonstring"], [177, 1, 1, "", "validate_data"]], "compas_timber.connections.TDovetailJoint": [[179, 1, 1, "", "ToString"], [180, 1, 1, "", "add_extensions"], [181, 1, 1, "", "add_features"], [182, 1, 1, "", "check_elements_compatibility"], [183, 1, 1, "", "copy"], [184, 1, 1, "", "create"], [185, 1, 1, "", "define_dovetail_tool"], [186, 1, 1, "", "element_count_complies"], [187, 1, 1, "", "from_json"], [188, 1, 1, "", "from_jsonstring"], [189, 1, 1, "", "restore_beams_from_keys"], [190, 1, 1, "", "sha256"], [191, 1, 1, "", "to_json"], [192, 1, 1, "", "to_jsonstring"], [193, 1, 1, "", "validate_data"]], "compas_timber.connections.TLapJoint": [[195, 1, 1, "", "ToString"], [196, 1, 1, "", "add_extensions"], [197, 1, 1, "", "add_features"], [198, 1, 1, "", "check_elements_compatibility"], [199, 1, 1, "", "copy"], [200, 1, 1, "", "create"], [201, 1, 1, "", "element_count_complies"], [202, 1, 1, "", "from_json"], [203, 1, 1, "", "from_jsonstring"], [204, 1, 1, "", "restore_beams_from_keys"], [205, 1, 1, "", "sha256"], [206, 1, 1, "", "to_json"], [207, 1, 1, "", "to_jsonstring"], [208, 1, 1, "", "validate_data"]], "compas_timber.connections.TStepJoint": [[210, 1, 1, "", "ToString"], [211, 1, 1, "", "add_extensions"], [212, 1, 1, "", "add_features"], [213, 1, 1, "", "check_elements_compatibility"], [214, 1, 1, "", "copy"], [215, 1, 1, "", "create"], [216, 1, 1, "", "element_count_complies"], [217, 1, 1, "", "from_json"], [218, 1, 1, "", "from_jsonstring"], [219, 1, 1, "", "restore_beams_from_keys"], [220, 1, 1, "", "set_step_depths"], [221, 1, 1, "", "sha256"], [222, 1, 1, "", "to_json"], [223, 1, 1, "", "to_jsonstring"], [224, 1, 1, "", "validate_data"]], "compas_timber.connections.TenonMortiseJoint": [[226, 1, 1, "", "ToString"], [227, 1, 1, "", "add_extensions"], [228, 1, 1, "", "add_features"], [229, 1, 1, "", "check_elements_compatibility"], [230, 1, 1, "", "copy"], [231, 1, 1, "", "create"], [232, 1, 1, "", "element_count_complies"], [233, 1, 1, "", "from_json"], [234, 1, 1, "", "from_jsonstring"], [235, 1, 1, "", "restore_beams_from_keys"], [236, 1, 1, "", "set_default_values"], [237, 1, 1, "", "sha256"], [238, 1, 1, "", "to_json"], [239, 1, 1, "", "to_jsonstring"], [240, 1, 1, "", "validate_data"]], "compas_timber.connections.XLapJoint": [[243, 1, 1, "", "ToString"], [244, 1, 1, "", "add_extensions"], [245, 1, 1, "", "add_features"], [246, 1, 1, "", "check_elements_compatibility"], [247, 1, 1, "", "copy"], [248, 1, 1, "", "create"], [249, 1, 1, "", "element_count_complies"], [250, 1, 1, "", "from_json"], [251, 1, 1, "", "from_jsonstring"], [252, 1, 1, "", "restore_beams_from_keys"], [253, 1, 1, "", "sha256"], [254, 1, 1, "", "to_json"], [255, 1, 1, "", "to_jsonstring"], [256, 1, 1, "", "validate_data"]], "compas_timber.connections.XNotchJoint": [[258, 1, 1, "", "ToString"], [259, 1, 1, "", "add_extensions"], [260, 1, 1, "", "add_features"], [261, 1, 1, "", "check_elements_compatibility"], [262, 1, 1, "", "copy"], [263, 1, 1, "", "create"], [264, 1, 1, "", "element_count_complies"], [265, 1, 1, "", "from_json"], [266, 1, 1, "", "from_jsonstring"], [267, 1, 1, "", "restore_beams_from_keys"], [268, 1, 1, "", "sha256"], [269, 1, 1, "", "to_json"], [270, 1, 1, "", "to_jsonstring"], [271, 1, 1, "", "validate_data"]], "compas_timber.connections.YButtJoint": [[273, 1, 1, "", "ToString"], [274, 1, 1, "", "add_extensions"], [275, 1, 1, "", "add_features"], [276, 1, 1, "", "check_elements_compatibility"], [277, 1, 1, "", "copy"], [278, 1, 1, "", "create"], [279, 1, 1, "", "cross_beam_ref_side_index"], [280, 1, 1, "", "element_count_complies"], [281, 1, 1, "", "from_json"], [282, 1, 1, "", "from_jsonstring"], [283, 1, 1, "", "get_miter_planes"], [284, 1, 1, "", "main_beam_ref_side_index"], [285, 1, 1, "", "restore_beams_from_keys"], [286, 1, 1, "", "sha256"], [287, 1, 1, "", "to_json"], [288, 1, 1, "", "to_jsonstring"], [289, 1, 1, "", "validate_data"]], "compas_timber.design": [[291, 0, 1, "", "CategoryRule"], [299, 0, 1, "", "DebugInfomation"], [304, 0, 1, "", "DirectRule"], [312, 0, 1, "", "FeatureDefinition"], [314, 0, 1, "", "JointDefinition"], [318, 0, 1, "", "JointRule"], [324, 0, 1, "", "SurfaceModel"], [342, 0, 1, "", "TopologyRule"], [349, 2, 1, "", "guess_joint_topology_2beams"], [350, 2, 1, "", "set_default_joints"]], "compas_timber.design.CategoryRule": [[292, 1, 1, "", "ToString"], [293, 1, 1, "", "comply"], [294, 1, 1, "", "get_category_rules"], [295, 1, 1, "", "get_direct_rules"], [296, 1, 1, "", "get_topology_rules"], [297, 1, 1, "", "joints_from_beams_and_rules"], [298, 1, 1, "", "reorder"]], "compas_timber.design.DebugInfomation": [[300, 1, 1, "", "ToString"], [301, 1, 1, "", "add_fastener_error"], [302, 1, 1, "", "add_feature_error"], [303, 1, 1, "", "add_joint_error"]], "compas_timber.design.DirectRule": [[305, 1, 1, "", "ToString"], [306, 1, 1, "", "comply"], [307, 1, 1, "", "contains"], [308, 1, 1, "", "get_category_rules"], [309, 1, 1, "", "get_direct_rules"], [310, 1, 1, "", "get_topology_rules"], [311, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.FeatureDefinition": [[313, 1, 1, "", "ToString"]], "compas_timber.design.JointDefinition": [[315, 1, 1, "", "ToString"], [316, 1, 1, "", "is_identical"], [317, 1, 1, "", "match"]], "compas_timber.design.JointRule": [[319, 1, 1, "", "comply"], [320, 1, 1, "", "get_category_rules"], [321, 1, 1, "", "get_direct_rules"], [322, 1, 1, "", "get_topology_rules"], [323, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.SurfaceModel": [[325, 1, 1, "", "beam_category_names"], [326, 1, 1, "", "create_model"], [327, 1, 1, "", "cull_overlaps"], [328, 1, 1, "", "distance_between_elements"], [329, 1, 1, "", "generate_frame"], [330, 1, 1, "", "generate_perimeter_beams"], [331, 1, 1, "", "generate_plates"], [332, 1, 1, "", "generate_stud_lines"], [333, 1, 1, "", "generate_studs"], [334, 1, 1, "", "generate_windows"], [335, 1, 1, "", "get_beam_intersections"], [336, 1, 1, "", "get_interior_segment_indices"], [337, 1, 1, "", "offset_elements"], [338, 1, 1, "", "parse_loops"], [339, 1, 1, "", "trim_jack_studs"], [340, 1, 1, "", "trim_king_studs"], [341, 1, 1, "", "trim_studs"]], "compas_timber.design.TopologyRule": [[343, 1, 1, "", "ToString"], [344, 1, 1, "", "comply"], [345, 1, 1, "", "get_category_rules"], [346, 1, 1, "", "get_direct_rules"], [347, 1, 1, "", "get_topology_rules"], [348, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.elements": [[351, 0, 1, "", "Beam"], [382, 0, 1, "", "Fastener"], [403, 0, 1, "", "FastenerTimberInterface"], [413, 0, 1, "", "Plate"], [440, 0, 1, "", "TimberElement"], [461, 0, 1, "", "Wall"]], "compas_timber.elements.Beam": [[352, 1, 1, "", "ToString"], [353, 1, 1, "", "add_blank_extension"], [354, 1, 1, "", "add_feature"], [355, 1, 1, "", "add_features"], [356, 1, 1, "", "back_side"], [357, 1, 1, "", "compute_aabb"], [358, 1, 1, "", "compute_collision_mesh"], [359, 1, 1, "", "compute_geometry"], [360, 1, 1, "", "compute_obb"], [361, 1, 1, "", "compute_worldtransformation"], [362, 1, 1, "", "copy"], [363, 1, 1, "", "endpoint_closest_to_point"], [364, 1, 1, "", "extension_to_plane"], [365, 1, 1, "", "from_centerline"], [366, 1, 1, "", "from_endpoints"], [367, 1, 1, "", "from_json"], [368, 1, 1, "", "from_jsonstring"], [369, 1, 1, "", "front_side"], [370, 1, 1, "", "get_dimensions_relative_to_side"], [371, 1, 1, "", "opp_side"], [372, 1, 1, "", "remove_blank_extension"], [373, 1, 1, "", "remove_features"], [374, 1, 1, "", "reset"], [375, 1, 1, "", "sha256"], [376, 1, 1, "", "side_as_surface"], [377, 1, 1, "", "to_json"], [378, 1, 1, "", "to_jsonstring"], [379, 1, 1, "", "transform"], [380, 1, 1, "", "transformed"], [381, 1, 1, "", "validate_data"]], "compas_timber.elements.Fastener": [[383, 1, 1, "", "ToString"], [384, 1, 1, "", "add_feature"], [385, 1, 1, "", "add_features"], [386, 1, 1, "", "compute_aabb"], [387, 1, 1, "", "compute_collision_mesh"], [388, 1, 1, "", "compute_geometry"], [389, 1, 1, "", "compute_obb"], [390, 1, 1, "", "compute_worldtransformation"], [391, 1, 1, "", "copy"], [392, 1, 1, "", "from_json"], [393, 1, 1, "", "from_jsonstring"], [394, 1, 1, "", "remove_blank_extension"], [395, 1, 1, "", "remove_features"], [396, 1, 1, "", "reset"], [397, 1, 1, "", "sha256"], [398, 1, 1, "", "to_json"], [399, 1, 1, "", "to_jsonstring"], [400, 1, 1, "", "transform"], [401, 1, 1, "", "transformed"], [402, 1, 1, "", "validate_data"]], "compas_timber.elements.FastenerTimberInterface": [[404, 1, 1, "", "ToString"], [405, 1, 1, "", "copy"], [406, 1, 1, "", "from_json"], [407, 1, 1, "", "from_jsonstring"], [408, 1, 1, "", "get_features"], [409, 1, 1, "", "sha256"], [410, 1, 1, "", "to_json"], [411, 1, 1, "", "to_jsonstring"], [412, 1, 1, "", "validate_data"]], "compas_timber.elements.Plate": [[414, 1, 1, "", "ToString"], [415, 1, 1, "", "add_feature"], [416, 1, 1, "", "add_features"], [417, 1, 1, "", "add_interface"], [418, 1, 1, "", "check_outlines"], [419, 1, 1, "", "compute_aabb"], [420, 1, 1, "", "compute_collision_mesh"], [421, 1, 1, "", "compute_geometry"], [422, 1, 1, "", "compute_obb"], [423, 1, 1, "", "compute_worldtransformation"], [424, 1, 1, "", "copy"], [425, 1, 1, "", "from_brep"], [426, 1, 1, "", "from_json"], [427, 1, 1, "", "from_jsonstring"], [428, 1, 1, "", "from_outline_thickness"], [429, 1, 1, "", "opp_side"], [430, 1, 1, "", "remove_blank_extension"], [431, 1, 1, "", "remove_features"], [432, 1, 1, "", "reset"], [433, 1, 1, "", "sha256"], [434, 1, 1, "", "side_as_surface"], [435, 1, 1, "", "to_json"], [436, 1, 1, "", "to_jsonstring"], [437, 1, 1, "", "transform"], [438, 1, 1, "", "transformed"], [439, 1, 1, "", "validate_data"]], "compas_timber.elements.TimberElement": [[441, 1, 1, "", "ToString"], [442, 1, 1, "", "add_feature"], [443, 1, 1, "", "add_features"], [444, 1, 1, "", "compute_aabb"], [445, 1, 1, "", "compute_collision_mesh"], [446, 1, 1, "", "compute_geometry"], [447, 1, 1, "", "compute_obb"], [448, 1, 1, "", "compute_worldtransformation"], [449, 1, 1, "", "copy"], [450, 1, 1, "", "from_json"], [451, 1, 1, "", "from_jsonstring"], [452, 1, 1, "", "remove_blank_extension"], [453, 1, 1, "", "remove_features"], [454, 1, 1, "", "reset"], [455, 1, 1, "", "sha256"], [456, 1, 1, "", "to_json"], [457, 1, 1, "", "to_jsonstring"], [458, 1, 1, "", "transform"], [459, 1, 1, "", "transformed"], [460, 1, 1, "", "validate_data"]], "compas_timber.elements.Wall": [[462, 1, 1, "", "ToString"], [463, 1, 1, "", "add_feature"], [464, 1, 1, "", "add_features"], [465, 1, 1, "", "compute_aabb"], [466, 1, 1, "", "compute_collision_mesh"], [467, 1, 1, "", "compute_geometry"], [468, 1, 1, "", "compute_obb"], [469, 1, 1, "", "compute_worldtransformation"], [470, 1, 1, "", "copy"], [471, 1, 1, "", "from_boundary"], [472, 1, 1, "", "from_brep"], [473, 1, 1, "", "from_json"], [474, 1, 1, "", "from_jsonstring"], [475, 1, 1, "", "remove_blank_extension"], [476, 1, 1, "", "remove_features"], [477, 1, 1, "", "reset"], [478, 1, 1, "", "rotate"], [479, 1, 1, "", "sha256"], [480, 1, 1, "", "to_json"], [481, 1, 1, "", "to_jsonstring"], [482, 1, 1, "", "transform"], [483, 1, 1, "", "transformed"], [484, 1, 1, "", "validate_data"]], "compas_timber.errors": [[485, 3, 1, "", "BeamJoiningError"], [486, 3, 1, "", "FastenerApplicationError"], [487, 3, 1, "", "FeatureApplicationError"]], "compas_timber.fabrication": [[488, 0, 1, "", "BTLxPart"], [491, 0, 1, "", "BTLxProcessing"], [502, 0, 1, "", "BTLxWriter"], [506, 0, 1, "", "DoubleCut"], [522, 0, 1, "", "DovetailMortise"], [540, 0, 1, "", "DovetailTenon"], [558, 0, 1, "", "Drilling"], [574, 0, 1, "", "EdgePositionType"], [575, 0, 1, "", "FrenchRidgeLap"], [591, 0, 1, "", "JackRafterCut"], [607, 0, 1, "", "Lap"], [624, 0, 1, "", "LimitationTopType"], [625, 0, 1, "", "LongitudinalCut"], [641, 0, 1, "", "MachiningLimits"], [642, 0, 1, "", "Mortise"], [658, 0, 1, "", "OrientationType"], [659, 0, 1, "", "Pocket"], [675, 0, 1, "", "Slot"], [689, 0, 1, "", "StepJoint"], [706, 0, 1, "", "StepJointNotch"], [723, 0, 1, "", "StepShapeType"], [724, 0, 1, "", "Tenon"], [740, 0, 1, "", "TenonShapeType"]], "compas_timber.fabrication.BTLxPart": [[489, 1, 1, "", "et_point_vals"], [490, 1, 1, "", "ref_side_from_face"]], "compas_timber.fabrication.BTLxProcessing": [[492, 1, 1, "", "ToString"], [493, 1, 1, "", "add_subprocessing"], [494, 1, 1, "", "copy"], [495, 1, 1, "", "from_json"], [496, 1, 1, "", "from_jsonstring"], [497, 1, 1, "", "scaled"], [498, 1, 1, "", "sha256"], [499, 1, 1, "", "to_json"], [500, 1, 1, "", "to_jsonstring"], [501, 1, 1, "", "validate_data"]], "compas_timber.fabrication.BTLxWriter": [[503, 1, 1, "", "model_to_xml"], [504, 1, 1, "", "register_type_serializer"], [505, 1, 1, "", "write"]], "compas_timber.fabrication.DoubleCut": [[507, 1, 1, "", "ToString"], [508, 1, 1, "", "add_subprocessing"], [509, 1, 1, "", "apply"], [510, 1, 1, "", "copy"], [511, 1, 1, "", "from_json"], [512, 1, 1, "", "from_jsonstring"], [513, 1, 1, "", "from_planes_and_beam"], [514, 1, 1, "", "from_shapes_and_element"], [515, 1, 1, "", "planes_from_params_and_beam"], [516, 1, 1, "", "scale"], [517, 1, 1, "", "scaled"], [518, 1, 1, "", "sha256"], [519, 1, 1, "", "to_json"], [520, 1, 1, "", "to_jsonstring"], [521, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailMortise": [[523, 1, 1, "", "ToString"], [524, 1, 1, "", "add_subprocessing"], [525, 1, 1, "", "apply"], [526, 1, 1, "", "copy"], [527, 1, 1, "", "define_dovetail_tool"], [528, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [529, 1, 1, "", "dovetail_volume_from_params_and_beam"], [530, 1, 1, "", "frame_from_params_and_beam"], [531, 1, 1, "", "from_frame_and_beam"], [532, 1, 1, "", "from_json"], [533, 1, 1, "", "from_jsonstring"], [534, 1, 1, "", "scale"], [535, 1, 1, "", "scaled"], [536, 1, 1, "", "sha256"], [537, 1, 1, "", "to_json"], [538, 1, 1, "", "to_jsonstring"], [539, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailTenon": [[541, 1, 1, "", "ToString"], [542, 1, 1, "", "add_subprocessing"], [543, 1, 1, "", "apply"], [544, 1, 1, "", "copy"], [545, 1, 1, "", "define_dovetail_tool"], [546, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [547, 1, 1, "", "dovetail_volume_from_params_and_beam"], [548, 1, 1, "", "frame_from_params_and_beam"], [549, 1, 1, "", "from_json"], [550, 1, 1, "", "from_jsonstring"], [551, 1, 1, "", "from_plane_and_beam"], [552, 1, 1, "", "scale"], [553, 1, 1, "", "scaled"], [554, 1, 1, "", "sha256"], [555, 1, 1, "", "to_json"], [556, 1, 1, "", "to_jsonstring"], [557, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Drilling": [[559, 1, 1, "", "ToString"], [560, 1, 1, "", "add_subprocessing"], [561, 1, 1, "", "apply"], [562, 1, 1, "", "copy"], [563, 1, 1, "", "cylinder_from_params_and_element"], [564, 1, 1, "", "from_json"], [565, 1, 1, "", "from_jsonstring"], [566, 1, 1, "", "from_line_and_element"], [567, 1, 1, "", "from_shapes_and_element"], [568, 1, 1, "", "scale"], [569, 1, 1, "", "scaled"], [570, 1, 1, "", "sha256"], [571, 1, 1, "", "to_json"], [572, 1, 1, "", "to_jsonstring"], [573, 1, 1, "", "validate_data"]], "compas_timber.fabrication.FrenchRidgeLap": [[576, 1, 1, "", "ToString"], [577, 1, 1, "", "add_subprocessing"], [578, 1, 1, "", "apply"], [579, 1, 1, "", "copy"], [580, 1, 1, "", "frame_from_params_and_beam"], [581, 1, 1, "", "from_beam_beam_and_plane"], [582, 1, 1, "", "from_json"], [583, 1, 1, "", "from_jsonstring"], [584, 1, 1, "", "lap_volume_from_params_and_beam"], [585, 1, 1, "", "scale"], [586, 1, 1, "", "scaled"], [587, 1, 1, "", "sha256"], [588, 1, 1, "", "to_json"], [589, 1, 1, "", "to_jsonstring"], [590, 1, 1, "", "validate_data"]], "compas_timber.fabrication.JackRafterCut": [[592, 1, 1, "", "ToString"], [593, 1, 1, "", "add_subprocessing"], [594, 1, 1, "", "apply"], [595, 1, 1, "", "copy"], [596, 1, 1, "", "from_json"], [597, 1, 1, "", "from_jsonstring"], [598, 1, 1, "", "from_plane_and_beam"], [599, 1, 1, "", "from_shapes_and_element"], [600, 1, 1, "", "plane_from_params_and_beam"], [601, 1, 1, "", "scale"], [602, 1, 1, "", "scaled"], [603, 1, 1, "", "sha256"], [604, 1, 1, "", "to_json"], [605, 1, 1, "", "to_jsonstring"], [606, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Lap": [[608, 1, 1, "", "ToString"], [609, 1, 1, "", "add_subprocessing"], [610, 1, 1, "", "apply"], [611, 1, 1, "", "copy"], [612, 1, 1, "", "from_json"], [613, 1, 1, "", "from_jsonstring"], [614, 1, 1, "", "from_plane_and_beam"], [615, 1, 1, "", "from_shapes_and_element"], [616, 1, 1, "", "from_volume_and_beam"], [617, 1, 1, "", "scale"], [618, 1, 1, "", "scaled"], [619, 1, 1, "", "sha256"], [620, 1, 1, "", "to_json"], [621, 1, 1, "", "to_jsonstring"], [622, 1, 1, "", "validate_data"], [623, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.LongitudinalCut": [[626, 1, 1, "", "ToString"], [627, 1, 1, "", "add_subprocessing"], [628, 1, 1, "", "apply"], [629, 1, 1, "", "copy"], [630, 1, 1, "", "from_json"], [631, 1, 1, "", "from_jsonstring"], [632, 1, 1, "", "from_plane_and_beam"], [633, 1, 1, "", "from_shapes_and_element"], [634, 1, 1, "", "plane_from_params_and_beam"], [635, 1, 1, "", "scaled"], [636, 1, 1, "", "sha256"], [637, 1, 1, "", "to_json"], [638, 1, 1, "", "to_jsonstring"], [639, 1, 1, "", "validate_data"], [640, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Mortise": [[643, 1, 1, "", "ToString"], [644, 1, 1, "", "add_subprocessing"], [645, 1, 1, "", "apply"], [646, 1, 1, "", "copy"], [647, 1, 1, "", "frame_from_params_and_beam"], [648, 1, 1, "", "from_frame_and_beam"], [649, 1, 1, "", "from_json"], [650, 1, 1, "", "from_jsonstring"], [651, 1, 1, "", "scale"], [652, 1, 1, "", "scaled"], [653, 1, 1, "", "sha256"], [654, 1, 1, "", "to_json"], [655, 1, 1, "", "to_jsonstring"], [656, 1, 1, "", "validate_data"], [657, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Pocket": [[660, 1, 1, "", "ToString"], [661, 1, 1, "", "add_subprocessing"], [662, 1, 1, "", "apply"], [663, 1, 1, "", "copy"], [664, 1, 1, "", "from_json"], [665, 1, 1, "", "from_jsonstring"], [666, 1, 1, "", "from_shapes_and_element"], [667, 1, 1, "", "from_volume_and_element"], [668, 1, 1, "", "scale"], [669, 1, 1, "", "scaled"], [670, 1, 1, "", "sha256"], [671, 1, 1, "", "to_json"], [672, 1, 1, "", "to_jsonstring"], [673, 1, 1, "", "validate_data"], [674, 1, 1, "", "volume_from_params_and_element"]], "compas_timber.fabrication.Slot": [[676, 1, 1, "", "ToString"], [677, 1, 1, "", "add_subprocessing"], [678, 1, 1, "", "apply"], [679, 1, 1, "", "copy"], [680, 1, 1, "", "from_json"], [681, 1, 1, "", "from_jsonstring"], [682, 1, 1, "", "from_plane_and_beam"], [683, 1, 1, "", "scale"], [684, 1, 1, "", "scaled"], [685, 1, 1, "", "sha256"], [686, 1, 1, "", "to_json"], [687, 1, 1, "", "to_jsonstring"], [688, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJoint": [[690, 1, 1, "", "ToString"], [691, 1, 1, "", "add_subprocessing"], [692, 1, 1, "", "add_tenon"], [693, 1, 1, "", "apply"], [694, 1, 1, "", "copy"], [695, 1, 1, "", "from_json"], [696, 1, 1, "", "from_jsonstring"], [697, 1, 1, "", "from_plane_and_beam"], [698, 1, 1, "", "planes_from_params_and_beam"], [699, 1, 1, "", "scale"], [700, 1, 1, "", "scaled"], [701, 1, 1, "", "sha256"], [702, 1, 1, "", "tenon_volume_from_params_and_beam"], [703, 1, 1, "", "to_json"], [704, 1, 1, "", "to_jsonstring"], [705, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJointNotch": [[707, 1, 1, "", "ToString"], [708, 1, 1, "", "add_mortise"], [709, 1, 1, "", "add_subprocessing"], [710, 1, 1, "", "apply"], [711, 1, 1, "", "copy"], [712, 1, 1, "", "from_json"], [713, 1, 1, "", "from_jsonstring"], [714, 1, 1, "", "from_plane_and_beam"], [715, 1, 1, "", "mortise_volume_from_params_and_beam"], [716, 1, 1, "", "planes_from_params_and_beam"], [717, 1, 1, "", "scale"], [718, 1, 1, "", "scaled"], [719, 1, 1, "", "sha256"], [720, 1, 1, "", "to_json"], [721, 1, 1, "", "to_jsonstring"], [722, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Tenon": [[725, 1, 1, "", "ToString"], [726, 1, 1, "", "add_subprocessing"], [727, 1, 1, "", "apply"], [728, 1, 1, "", "copy"], [729, 1, 1, "", "frame_from_params_and_beam"], [730, 1, 1, "", "from_json"], [731, 1, 1, "", "from_jsonstring"], [732, 1, 1, "", "from_plane_and_beam"], [733, 1, 1, "", "scale"], [734, 1, 1, "", "scaled"], [735, 1, 1, "", "sha256"], [736, 1, 1, "", "to_json"], [737, 1, 1, "", "to_jsonstring"], [738, 1, 1, "", "validate_data"], [739, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.ghpython": [[741, 2, 1, "", "add_gh_param"], [742, 2, 1, "", "clear_gh_params"], [743, 2, 1, "", "get_leaf_subclasses"], [744, 2, 1, "", "item_input_valid"], [745, 2, 1, "", "list_input_valid"], [746, 2, 1, "", "manage_dynamic_params"], [747, 2, 1, "", "rename_gh_input"]], "compas_timber.model": [[748, 0, 1, "", "TimberModel"]], "compas_timber.model.TimberModel": [[749, 1, 1, "", "ToString"], [750, 1, 1, "", "add_element"], [751, 1, 1, "", "add_elements"], [752, 1, 1, "", "add_group"], [753, 1, 1, "", "add_group_element"], [754, 1, 1, "", "add_interaction"], [755, 1, 1, "", "add_joint"], [756, 1, 1, "", "add_material"], [757, 1, 1, "", "assign_material"], [758, 1, 1, "", "compute_aabb"], [759, 1, 1, "", "compute_obb"], [760, 1, 1, "", "connect_adjacent_beams"], [761, 1, 1, "", "connect_adjacent_walls"], [762, 1, 1, "", "copy"], [763, 1, 1, "", "element_by_guid"], [764, 1, 1, "", "elements"], [765, 1, 1, "", "elements_connected_by"], [766, 1, 1, "", "from_json"], [767, 1, 1, "", "from_jsonstring"], [768, 1, 1, "", "get_elements_in_group"], [769, 1, 1, "", "get_interactions_for_element"], [770, 1, 1, "", "has_element"], [771, 1, 1, "", "has_group"], [772, 1, 1, "", "has_interaction"], [773, 1, 1, "", "has_material"], [774, 1, 1, "", "interactions"], [775, 1, 1, "", "materials"], [776, 1, 1, "", "process_joinery"], [777, 1, 1, "", "remove_element"], [778, 1, 1, "", "remove_interaction"], [779, 1, 1, "", "remove_joint"], [780, 1, 1, "", "rotate"], [781, 1, 1, "", "rotated"], [782, 1, 1, "", "scale"], [783, 1, 1, "", "scaled"], [784, 1, 1, "", "set_topologies"], [785, 1, 1, "", "sha256"], [786, 1, 1, "", "to_json"], [787, 1, 1, "", "to_jsonstring"], [788, 1, 1, "", "transform"], [789, 1, 1, "", "transform_numpy"], [790, 1, 1, "", "transformed"], [791, 1, 1, "", "transformed_numpy"], [792, 1, 1, "", "translate"], [793, 1, 1, "", "translated"], [794, 1, 1, "", "validate_data"]], "compas_timber.planning": [[795, 0, 1, "", "Actor"], [797, 0, 1, "", "BuildingPlan"], [807, 0, 1, "", "BuildingPlanParser"], [810, 0, 1, "", "Instruction"], [820, 0, 1, "", "LinearDimension"], [830, 0, 1, "", "Model3d"], [840, 0, 1, "", "SimpleSequenceGenerator"], [841, 0, 1, "", "Step"], [851, 0, 1, "", "Text3d"]], "compas_timber.planning.Actor": [[796, 1, 1, "", "get_name"]], "compas_timber.planning.BuildingPlan": [[798, 1, 1, "", "ToString"], [799, 1, 1, "", "add_step"], [800, 1, 1, "", "copy"], [801, 1, 1, "", "from_json"], [802, 1, 1, "", "from_jsonstring"], [803, 1, 1, "", "sha256"], [804, 1, 1, "", "to_json"], [805, 1, 1, "", "to_jsonstring"], [806, 1, 1, "", "validate_data"]], "compas_timber.planning.BuildingPlanParser": [[808, 1, 1, "", "parse"], [809, 1, 1, "", "serialize"]], "compas_timber.planning.Instruction": [[811, 1, 1, "", "ToString"], [812, 1, 1, "", "copy"], [813, 1, 1, "", "from_json"], [814, 1, 1, "", "from_jsonstring"], [815, 1, 1, "", "sha256"], [816, 1, 1, "", "to_json"], [817, 1, 1, "", "to_jsonstring"], [818, 1, 1, "", "transform"], [819, 1, 1, "", "validate_data"]], "compas_timber.planning.LinearDimension": [[821, 1, 1, "", "ToString"], [822, 1, 1, "", "copy"], [823, 1, 1, "", "from_json"], [824, 1, 1, "", "from_jsonstring"], [825, 1, 1, "", "sha256"], [826, 1, 1, "", "to_json"], [827, 1, 1, "", "to_jsonstring"], [828, 1, 1, "", "transform"], [829, 1, 1, "", "validate_data"]], "compas_timber.planning.Model3d": [[831, 1, 1, "", "ToString"], [832, 1, 1, "", "copy"], [833, 1, 1, "", "from_json"], [834, 1, 1, "", "from_jsonstring"], [835, 1, 1, "", "sha256"], [836, 1, 1, "", "to_json"], [837, 1, 1, "", "to_jsonstring"], [838, 1, 1, "", "transform"], [839, 1, 1, "", "validate_data"]], "compas_timber.planning.Step": [[842, 1, 1, "", "ToString"], [843, 1, 1, "", "copy"], [844, 1, 1, "", "from_json"], [845, 1, 1, "", "from_jsonstring"], [846, 1, 1, "", "sha256"], [847, 1, 1, "", "to_json"], [848, 1, 1, "", "to_jsonstring"], [849, 1, 1, "", "transform"], [850, 1, 1, "", "validate_data"]], "compas_timber.planning.Text3d": [[852, 1, 1, "", "ToString"], [853, 1, 1, "", "copy"], [854, 1, 1, "", "from_json"], [855, 1, 1, "", "from_jsonstring"], [856, 1, 1, "", "sha256"], [857, 1, 1, "", "to_json"], [858, 1, 1, "", "to_jsonstring"], [859, 1, 1, "", "transform"], [860, 1, 1, "", "validate_data"]], "compas_timber.rhino": [[861, 2, 1, "", "find_neighboring_elements"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"]}, "titleterms": {"api": 0, "refer": 0, "packag": 0, "compas_timb": [1, 2, 3, 4, 5, 6, 7, 8, 9], "connect": 1, "joint": [1, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 865, 877, 879], "solver": 1, "function": [1, 2, 6], "except": 1, "design": [2, 872], "class": [2, 3, 4, 5, 7, 8, 864, 865], "element": [3, 764, 865], "error": [4, 879], "fabric": [5, 874], "ghpython": 6, "model": [7, 872, 877, 878, 879], "plan": 8, "rhino": [9, 876], "plugin": [9, 869], "ballnodejoint": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "tostr": [11, 36, 51, 68, 84, 99, 114, 131, 149, 164, 179, 195, 210, 226, 243, 258, 273, 292, 300, 305, 313, 315, 343, 352, 383, 404, 414, 441, 462, 492, 507, 523, 541, 559, 576, 592, 608, 626, 643, 660, 676, 690, 707, 725, 749, 798, 811, 821, 831, 842, 852], "add_extens": [12, 37, 52, 69, 85, 100, 115, 132, 150, 165, 180, 196, 211, 227, 244, 259, 274], "add_featur": [13, 38, 53, 70, 86, 101, 116, 133, 151, 166, 181, 197, 212, 228, 245, 260, 275, 354, 355, 384, 385, 415, 416, 442, 443, 463, 464], "check_elements_compat": [14, 39, 54, 71, 87, 102, 117, 134, 152, 167, 182, 198, 213, 229, 246, 261, 276], "copi": [15, 40, 55, 72, 88, 103, 118, 135, 153, 168, 183, 199, 214, 230, 247, 262, 277, 362, 391, 405, 424, 449, 470, 494, 510, 526, 544, 562, 579, 595, 611, 629, 646, 663, 679, 694, 711, 728, 762, 800, 812, 822, 832, 843, 853], "creat": [16, 41, 56, 73, 89, 104, 119, 136, 154, 169, 184, 200, 215, 231, 248, 263, 278, 864, 865], "element_count_compli": [17, 42, 57, 74, 90, 105, 120, 137, 155, 170, 186, 201, 216, 232, 249, 264, 280], "from_json": [18, 43, 58, 75, 91, 106, 121, 138, 156, 171, 187, 202, 217, 233, 250, 265, 281, 367, 392, 406, 426, 450, 473, 495, 511, 532, 549, 564, 582, 596, 612, 630, 649, 664, 680, 695, 712, 730, 766, 801, 813, 823, 833, 844, 854], "from_jsonstr": [19, 44, 59, 76, 92, 107, 122, 139, 157, 172, 188, 203, 218, 234, 251, 266, 282, 368, 393, 407, 427, 451, 474, 496, 512, 533, 550, 565, 583, 597, 613, 631, 650, 665, 681, 696, 713, 731, 767, 802, 814, 824, 834, 845, 855], "restore_beams_from_kei": [20, 45, 60, 77, 93, 108, 125, 140, 158, 173, 189, 204, 219, 235, 252, 267, 285], "sha256": [21, 46, 61, 78, 94, 109, 126, 141, 159, 174, 190, 205, 221, 237, 253, 268, 286, 375, 397, 409, 433, 455, 479, 498, 518, 536, 554, 570, 587, 603, 619, 636, 653, 670, 685, 701, 719, 735, 785, 803, 815, 825, 835, 846, 856], "to_json": [22, 47, 62, 79, 95, 110, 127, 142, 160, 175, 191, 206, 222, 238, 254, 269, 287, 377, 398, 410, 435, 456, 480, 499, 519, 537, 555, 571, 588, 604, 620, 637, 654, 671, 686, 703, 720, 736, 786, 804, 816, 826, 836, 847, 857], "to_jsonstr": [23, 48, 63, 80, 96, 111, 128, 143, 161, 176, 192, 207, 223, 239, 255, 270, 288, 378, 399, 411, 436, 457, 481, 500, 520, 538, 556, 572, 589, 605, 621, 638, 655, 672, 687, 704, 721, 737, 787, 805, 817, 827, 837, 848, 858], "validate_data": [24, 49, 64, 82, 97, 112, 129, 144, 162, 177, 193, 208, 224, 240, 256, 271, 289, 381, 402, 412, 439, 460, 484, 501, 521, 539, 557, 573, 590, 606, 622, 639, 656, 673, 688, 705, 722, 738, 794, 806, 819, 829, 839, 850, 860], "beamgroupanalyz": [25, 26], "find": [26, 29, 146], "cluster": 27, "compositeanalyz": [28, 29, 30], "from_model": 30, "connectionsolv": [31, 32, 33, 34], "find_intersecting_pair": 32, "find_topologi": 33, "find_wall_wall_topologi": 34, "genericjoint": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "jointtopologi": [65, 66], "get_nam": [66, 796], "lbuttjoint": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "update_beam_rol": 81, "lfrenchridgelapjoint": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "llapjoint": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "lmiterjoint": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "get_cutoff_plan": 123, "get_cutting_plan": 124, "lapjoint": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "nbeamkdtreeanalyz": [145, 146], "quadanalyz": 147, "tbirdsmouthjoint": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "tbuttjoint": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "tdovetailjoint": [178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], "define_dovetail_tool": [185, 527, 545], "tlapjoint": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "tstepjoint": [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "set_step_depth": 220, "tenonmortisejoint": [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "set_default_valu": 236, "tripletanalyz": 241, "xlapjoint": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "xnotchjoint": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271], "ybuttjoint": [272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "cross_beam_ref_side_index": 279, "get_miter_plan": 283, "main_beam_ref_side_index": 284, "find_neighboring_el": [290, 861], "categoryrul": [291, 292, 293, 294, 295, 296, 297, 298], "compli": [293, 306, 319, 344], "get_category_rul": [294, 308, 320, 345], "get_direct_rul": [295, 309, 321, 346], "get_topology_rul": [296, 310, 322, 347], "joints_from_beams_and_rul": [297, 311, 323, 348], "reorder": 298, "debuginfom": [299, 300, 301, 302, 303], "add_fastener_error": 301, "add_feature_error": 302, "add_joint_error": 303, "directrul": [304, 305, 306, 307, 308, 309, 310, 311], "contain": 307, "featuredefinit": [312, 313], "jointdefinit": [314, 315, 316, 317], "is_ident": 316, "match": 317, "jointrul": [318, 319, 320, 321, 322, 323], "surfacemodel": [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "beam_category_nam": 325, "create_model": 326, "cull_overlap": 327, "distance_between_el": 328, "generate_fram": 329, "generate_perimeter_beam": 330, "generate_pl": 331, "generate_stud_lin": 332, "generate_stud": 333, "generate_window": 334, "get_beam_intersect": 335, "get_interior_segment_indic": 336, "offset_el": 337, "parse_loop": 338, "trim_jack_stud": 339, "trim_king_stud": 340, "trim_stud": 341, "topologyrul": [342, 343, 344, 345, 346, 347, 348], "guess_joint_topology_2beam": 349, "set_default_joint": 350, "beam": [351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 871, 872, 879], "add_blank_extens": 353, "back_sid": 356, "compute_aabb": [357, 386, 419, 444, 465, 758], "compute_collision_mesh": [358, 387, 420, 445, 466], "compute_geometri": [359, 388, 421, 446, 467], "compute_obb": [360, 389, 422, 447, 468, 759], "compute_worldtransform": [361, 390, 423, 448, 469], "endpoint_closest_to_point": 363, "extension_to_plan": 364, "from_centerlin": 365, "from_endpoint": 366, "front_sid": 369, "get_dimensions_relative_to_sid": 370, "opp_sid": [371, 429], "remove_blank_extens": [372, 394, 430, 452, 475], "remove_featur": [373, 395, 431, 453, 476], "reset": [374, 396, 432, 454, 477], "side_as_surfac": [376, 434], "transform": [379, 380, 400, 401, 437, 438, 458, 459, 482, 483, 788, 790, 818, 828, 838, 849, 859], "fasten": [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "fastenertimberinterfac": [403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "get_featur": 408, "plate": [413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439], "add_interfac": 417, "check_outlin": 418, "from_brep": [425, 472], "from_outline_thick": 428, "timberel": [440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460], "wall": [461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "from_boundari": 471, "rotat": [478, 780, 781], "beamjoiningerror": 485, "fastenerapplicationerror": 486, "featureapplicationerror": 487, "btlxpart": [488, 489, 490], "et_point_v": 489, "ref_side_from_fac": 490, "btlxprocess": [491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "add_subprocess": [493, 508, 524, 542, 560, 577, 593, 609, 627, 644, 661, 677, 691, 709, 726], "scale": [497, 516, 517, 534, 535, 552, 553, 568, 569, 585, 586, 601, 602, 617, 618, 635, 651, 652, 668, 669, 683, 684, 699, 700, 717, 718, 733, 734, 782, 783], "btlxwriter": [502, 503, 504, 505], "model_to_xml": 503, "register_type_seri": 504, "write": [505, 874], "doublecut": [506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "appli": [509, 525, 543, 561, 578, 594, 610, 628, 645, 662, 678, 693, 710, 727], "from_planes_and_beam": 513, "from_shapes_and_el": [514, 567, 599, 615, 633, 666], "planes_from_params_and_beam": [515, 698, 716], "dovetailmortis": [522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539], "dovetail_cutting_frames_from_params_and_beam": [528, 546], "dovetail_volume_from_params_and_beam": [529, 547], "frame_from_params_and_beam": [530, 548, 580, 647, 729], "from_frame_and_beam": [531, 648], "dovetailtenon": [540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], "from_plane_and_beam": [551, 598, 614, 632, 682, 697, 714, 732], "drill": [558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 875], "cylinder_from_params_and_el": 563, "from_line_and_el": 566, "edgepositiontyp": 574, "frenchridgelap": [575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590], "from_beam_beam_and_plan": 581, "lap_volume_from_params_and_beam": 584, "jackraftercut": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "plane_from_params_and_beam": [600, 634], "lap": [607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 877], "from_volume_and_beam": 616, "volume_from_params_and_beam": [623, 640, 657, 739], "limitationtoptyp": 624, "longitudinalcut": [625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "machininglimit": 641, "mortis": [642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 877], "orientationtyp": 658, "pocket": [659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674], "from_volume_and_el": 667, "volume_from_params_and_el": 674, "slot": [675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688], "stepjoint": [689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705], "add_tenon": 692, "tenon_volume_from_params_and_beam": 702, "stepjointnotch": [706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722], "add_mortis": 708, "mortise_volume_from_params_and_beam": 715, "stepshapetyp": 723, "tenon": [724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 877], "tenonshapetyp": 740, "add_gh_param": 741, "clear_gh_param": 742, "get_leaf_subclass": 743, "item_input_valid": 744, "list_input_valid": 745, "manage_dynamic_param": 746, "rename_gh_input": 747, "timbermodel": [748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794], "add_el": [750, 751], "add_group": 752, "add_group_el": 753, "add_interact": 754, "add_joint": 755, "add_materi": 756, "assign_materi": 757, "connect_adjacent_beam": 760, "connect_adjacent_wal": 761, "element_by_guid": 763, "elements_connected_bi": 765, "get_elements_in_group": 768, "get_interactions_for_el": 769, "has_el": 770, "has_group": 771, "has_interact": 772, "has_materi": 773, "interact": 774, "materi": 775, "process_joineri": 776, "remove_el": 777, "remove_interact": 778, "remove_joint": 779, "set_topologi": 784, "transform_numpi": 789, "transformed_numpi": 791, "translat": [792, 793], "actor": [795, 796], "buildingplan": [797, 798, 799, 800, 801, 802, 803, 804, 805, 806], "add_step": 799, "buildingplanpars": [807, 808, 809], "pars": 808, "serial": 809, "instruct": [810, 811, 812, 813, 814, 815, 816, 817, 818, 819], "lineardimens": [820, 821, 822, 823, 824, 825, 826, 827, 828, 829], "model3d": [830, 831, 832, 833, 834, 835, 836, 837, 838, 839], "simplesequencegener": 840, "step": [841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 877], "text3d": [851, 852, 853, 854, 855, 856, 857, 858, 859, 860], "cite": 862, "develop": [863, 867], "guid": [863, 864, 865, 876], "btlx": [864, 874], "contribut": [864, 865], "ad": 864, "new": [864, 865], "process": 864, "1": [864, 865], "identifi": 864, "paramet": 864, "2": [864, 865], "exampl": [864, 865, 873], "3": [864, 865], "add": [864, 865], "altern": 864, "constructor": 864, "4": [864, 865], "geometri": 864, "gener": 864, "method": [864, 865], "5": [864, 865], "updat": [864, 865], "modul": [864, 865], "import": [864, 865], "6": 864, "test": [864, 865], "kei": [864, 865], "consider": [864, 865], "defin": 865, "requir": 865, "analyz": 865, "relationship": 865, "extract": 865, "geometr": 865, "inform": 865, "implement": 865, "core": 865, "compa": 866, "timber": 866, "document": 866, "depend": 866, "tabl": [866, 877], "content": 866, "indic": 866, "instal": [867, 876], "user": 867, "licens": 868, "grasshopp": 869, "attribut": 870, "standard": 870, "custom": [870, 872], "check": 870, "delet": 870, "decomposebeam": 871, "findbeambyrhinoguid": 871, "surfac": [872, 877, 879], "option": 872, "dimens": 872, "featur": [875, 879], "jack": 875, "rafter": 875, "cut": 875, "doubl": 875, "8": 876, "7": 876, "troubleshoot": 876, "rule": 877, "compon": 877, "default": 877, "topolog": 877, "categori": 877, "direct": 877, "overrid": 877, "type": [877, 879], "l": 877, "butt": 877, "miter": 877, "french": 877, "ridg": 877, "t": 877, "birdsmouth": 877, "dovetail": 877, "x": 877, "summari": 877, "show": 879, "face": 879, "index": 879, "join": 879, "topologi": 879, "util": 880, "bake": 880, "boxmap": 880, "workflow": 881}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Packages": [[0, "packages"]], "compas_timber.connections": [[1, "compas-timber-connections"]], "Joints": [[1, "joints"]], "Solvers": [[1, "solvers"]], "Functions": [[1, "functions"], [2, "functions"], [6, "functions"]], "Exceptions": [[1, "exceptions"]], "compas_timber.design": [[2, "compas-timber-design"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"]], "compas_timber.elements": [[3, "compas-timber-elements"]], "compas_timber.errors": [[4, "compas-timber-errors"]], "compas_timber.fabrication": [[5, "compas-timber-fabrication"]], "compas_timber.ghpython": [[6, "compas-timber-ghpython"]], "compas_timber.model": [[7, "compas-timber-model"]], "compas_timber.planning": [[8, "compas-timber-planning"]], "compas_timber.rhino": [[9, "compas-timber-rhino"]], "Plugins": [[9, "plugins"]], "BallNodeJoint": [[10, "ballnodejoint"]], "BallNodeJoint.ToString": [[11, "ballnodejoint-tostring"]], "BallNodeJoint.add_extensions": [[12, "ballnodejoint-add-extensions"]], "BallNodeJoint.add_features": [[13, "ballnodejoint-add-features"]], "BallNodeJoint.check_elements_compatibility": [[14, "ballnodejoint-check-elements-compatibility"]], "BallNodeJoint.copy": [[15, "ballnodejoint-copy"]], "BallNodeJoint.create": [[16, "ballnodejoint-create"]], "BallNodeJoint.element_count_complies": [[17, "ballnodejoint-element-count-complies"]], "BallNodeJoint.from_json": [[18, "ballnodejoint-from-json"]], "BallNodeJoint.from_jsonstring": [[19, "ballnodejoint-from-jsonstring"]], "BallNodeJoint.restore_beams_from_keys": [[20, "ballnodejoint-restore-beams-from-keys"]], "BallNodeJoint.sha256": [[21, "ballnodejoint-sha256"]], "BallNodeJoint.to_json": [[22, "ballnodejoint-to-json"]], "BallNodeJoint.to_jsonstring": [[23, "ballnodejoint-to-jsonstring"]], "BallNodeJoint.validate_data": [[24, "ballnodejoint-validate-data"]], "BeamGroupAnalyzer": [[25, "beamgroupanalyzer"]], "BeamGroupAnalyzer.find": [[26, "beamgroupanalyzer-find"]], "Cluster": [[27, "cluster"]], "CompositeAnalyzer": [[28, "compositeanalyzer"]], "CompositeAnalyzer.find": [[29, "compositeanalyzer-find"]], "CompositeAnalyzer.from_model": [[30, "compositeanalyzer-from-model"]], "ConnectionSolver": [[31, "connectionsolver"]], "ConnectionSolver.find_intersecting_pairs": [[32, "connectionsolver-find-intersecting-pairs"]], "ConnectionSolver.find_topology": [[33, "connectionsolver-find-topology"]], "ConnectionSolver.find_wall_wall_topology": [[34, "connectionsolver-find-wall-wall-topology"]], "GenericJoint": [[35, "genericjoint"]], "GenericJoint.ToString": [[36, "genericjoint-tostring"]], "GenericJoint.add_extensions": [[37, "genericjoint-add-extensions"]], "GenericJoint.add_features": [[38, "genericjoint-add-features"]], "GenericJoint.check_elements_compatibility": [[39, "genericjoint-check-elements-compatibility"]], "GenericJoint.copy": [[40, "genericjoint-copy"]], "GenericJoint.create": [[41, "genericjoint-create"]], "GenericJoint.element_count_complies": [[42, "genericjoint-element-count-complies"]], "GenericJoint.from_json": [[43, "genericjoint-from-json"]], "GenericJoint.from_jsonstring": [[44, "genericjoint-from-jsonstring"]], "GenericJoint.restore_beams_from_keys": [[45, "genericjoint-restore-beams-from-keys"]], "GenericJoint.sha256": [[46, "genericjoint-sha256"]], "GenericJoint.to_json": [[47, "genericjoint-to-json"]], "GenericJoint.to_jsonstring": [[48, "genericjoint-to-jsonstring"]], "GenericJoint.validate_data": [[49, "genericjoint-validate-data"]], "Joint": [[50, "joint"]], "Joint.ToString": [[51, "joint-tostring"]], "Joint.add_extensions": [[52, "joint-add-extensions"]], "Joint.add_features": [[53, "joint-add-features"]], "Joint.check_elements_compatibility": [[54, "joint-check-elements-compatibility"]], "Joint.copy": [[55, "joint-copy"]], "Joint.create": [[56, "joint-create"]], "Joint.element_count_complies": [[57, "joint-element-count-complies"]], "Joint.from_json": [[58, "joint-from-json"]], "Joint.from_jsonstring": [[59, "joint-from-jsonstring"]], "Joint.restore_beams_from_keys": [[60, "joint-restore-beams-from-keys"]], "Joint.sha256": [[61, "joint-sha256"]], "Joint.to_json": [[62, "joint-to-json"]], "Joint.to_jsonstring": [[63, "joint-to-jsonstring"]], "Joint.validate_data": [[64, "joint-validate-data"]], "JointTopology": [[65, "jointtopology"]], "JointTopology.get_name": [[66, "jointtopology-get-name"]], "LButtJoint": [[67, "lbuttjoint"]], "LButtJoint.ToString": [[68, "lbuttjoint-tostring"]], "LButtJoint.add_extensions": [[69, "lbuttjoint-add-extensions"]], "LButtJoint.add_features": [[70, "lbuttjoint-add-features"]], "LButtJoint.check_elements_compatibility": [[71, "lbuttjoint-check-elements-compatibility"]], "LButtJoint.copy": [[72, "lbuttjoint-copy"]], "LButtJoint.create": [[73, "lbuttjoint-create"]], "LButtJoint.element_count_complies": [[74, "lbuttjoint-element-count-complies"]], "LButtJoint.from_json": [[75, "lbuttjoint-from-json"]], "LButtJoint.from_jsonstring": [[76, "lbuttjoint-from-jsonstring"]], "LButtJoint.restore_beams_from_keys": [[77, "lbuttjoint-restore-beams-from-keys"]], "LButtJoint.sha256": [[78, "lbuttjoint-sha256"]], "LButtJoint.to_json": [[79, "lbuttjoint-to-json"]], "LButtJoint.to_jsonstring": [[80, "lbuttjoint-to-jsonstring"]], "LButtJoint.update_beam_roles": [[81, "lbuttjoint-update-beam-roles"]], "LButtJoint.validate_data": [[82, "lbuttjoint-validate-data"]], "LFrenchRidgeLapJoint": [[83, "lfrenchridgelapjoint"]], "LFrenchRidgeLapJoint.ToString": [[84, "lfrenchridgelapjoint-tostring"]], "LFrenchRidgeLapJoint.add_extensions": [[85, "lfrenchridgelapjoint-add-extensions"]], "LFrenchRidgeLapJoint.add_features": [[86, "lfrenchridgelapjoint-add-features"]], "LFrenchRidgeLapJoint.check_elements_compatibility": [[87, "lfrenchridgelapjoint-check-elements-compatibility"]], "LFrenchRidgeLapJoint.copy": [[88, "lfrenchridgelapjoint-copy"]], "LFrenchRidgeLapJoint.create": [[89, "lfrenchridgelapjoint-create"]], "LFrenchRidgeLapJoint.element_count_complies": [[90, "lfrenchridgelapjoint-element-count-complies"]], "LFrenchRidgeLapJoint.from_json": [[91, "lfrenchridgelapjoint-from-json"]], "LFrenchRidgeLapJoint.from_jsonstring": [[92, "lfrenchridgelapjoint-from-jsonstring"]], "LFrenchRidgeLapJoint.restore_beams_from_keys": [[93, "lfrenchridgelapjoint-restore-beams-from-keys"]], "LFrenchRidgeLapJoint.sha256": [[94, "lfrenchridgelapjoint-sha256"]], "LFrenchRidgeLapJoint.to_json": [[95, "lfrenchridgelapjoint-to-json"]], "LFrenchRidgeLapJoint.to_jsonstring": [[96, "lfrenchridgelapjoint-to-jsonstring"]], "LFrenchRidgeLapJoint.validate_data": [[97, "lfrenchridgelapjoint-validate-data"]], "LLapJoint": [[98, "llapjoint"]], "LLapJoint.ToString": [[99, "llapjoint-tostring"]], "LLapJoint.add_extensions": [[100, "llapjoint-add-extensions"]], "LLapJoint.add_features": [[101, "llapjoint-add-features"]], "LLapJoint.check_elements_compatibility": [[102, "llapjoint-check-elements-compatibility"]], "LLapJoint.copy": [[103, "llapjoint-copy"]], "LLapJoint.create": [[104, "llapjoint-create"]], "LLapJoint.element_count_complies": [[105, "llapjoint-element-count-complies"]], "LLapJoint.from_json": [[106, "llapjoint-from-json"]], "LLapJoint.from_jsonstring": [[107, "llapjoint-from-jsonstring"]], "LLapJoint.restore_beams_from_keys": [[108, "llapjoint-restore-beams-from-keys"]], "LLapJoint.sha256": [[109, "llapjoint-sha256"]], "LLapJoint.to_json": [[110, "llapjoint-to-json"]], "LLapJoint.to_jsonstring": [[111, "llapjoint-to-jsonstring"]], "LLapJoint.validate_data": [[112, "llapjoint-validate-data"]], "LMiterJoint": [[113, "lmiterjoint"]], "LMiterJoint.ToString": [[114, "lmiterjoint-tostring"]], "LMiterJoint.add_extensions": [[115, "lmiterjoint-add-extensions"]], "LMiterJoint.add_features": [[116, "lmiterjoint-add-features"]], "LMiterJoint.check_elements_compatibility": [[117, "lmiterjoint-check-elements-compatibility"]], "LMiterJoint.copy": [[118, "lmiterjoint-copy"]], "LMiterJoint.create": [[119, "lmiterjoint-create"]], "LMiterJoint.element_count_complies": [[120, "lmiterjoint-element-count-complies"]], "LMiterJoint.from_json": [[121, "lmiterjoint-from-json"]], "LMiterJoint.from_jsonstring": [[122, "lmiterjoint-from-jsonstring"]], "LMiterJoint.get_cutoff_plane": [[123, "lmiterjoint-get-cutoff-plane"]], "LMiterJoint.get_cutting_planes": [[124, "lmiterjoint-get-cutting-planes"]], "LMiterJoint.restore_beams_from_keys": [[125, "lmiterjoint-restore-beams-from-keys"]], "LMiterJoint.sha256": [[126, "lmiterjoint-sha256"]], "LMiterJoint.to_json": [[127, "lmiterjoint-to-json"]], "LMiterJoint.to_jsonstring": [[128, "lmiterjoint-to-jsonstring"]], "LMiterJoint.validate_data": [[129, "lmiterjoint-validate-data"]], "LapJoint": [[130, "lapjoint"]], "LapJoint.ToString": [[131, "lapjoint-tostring"]], "LapJoint.add_extensions": [[132, "lapjoint-add-extensions"]], "LapJoint.add_features": [[133, "lapjoint-add-features"]], "LapJoint.check_elements_compatibility": [[134, "lapjoint-check-elements-compatibility"]], "LapJoint.copy": [[135, "lapjoint-copy"]], "LapJoint.create": [[136, "lapjoint-create"]], "LapJoint.element_count_complies": [[137, "lapjoint-element-count-complies"]], "LapJoint.from_json": [[138, "lapjoint-from-json"]], "LapJoint.from_jsonstring": [[139, "lapjoint-from-jsonstring"]], "LapJoint.restore_beams_from_keys": [[140, "lapjoint-restore-beams-from-keys"]], "LapJoint.sha256": [[141, "lapjoint-sha256"]], "LapJoint.to_json": [[142, "lapjoint-to-json"]], "LapJoint.to_jsonstring": [[143, "lapjoint-to-jsonstring"]], "LapJoint.validate_data": [[144, "lapjoint-validate-data"]], "NBeamKDTreeAnalyzer": [[145, "nbeamkdtreeanalyzer"]], "NBeamKDTreeAnalyzer.find": [[146, "nbeamkdtreeanalyzer-find"]], "QuadAnalyzer": [[147, "quadanalyzer"]], "TBirdsmouthJoint": [[148, "tbirdsmouthjoint"]], "TBirdsmouthJoint.ToString": [[149, "tbirdsmouthjoint-tostring"]], "TBirdsmouthJoint.add_extensions": [[150, "tbirdsmouthjoint-add-extensions"]], "TBirdsmouthJoint.add_features": [[151, "tbirdsmouthjoint-add-features"]], "TBirdsmouthJoint.check_elements_compatibility": [[152, "tbirdsmouthjoint-check-elements-compatibility"]], "TBirdsmouthJoint.copy": [[153, "tbirdsmouthjoint-copy"]], "TBirdsmouthJoint.create": [[154, "tbirdsmouthjoint-create"]], "TBirdsmouthJoint.element_count_complies": [[155, "tbirdsmouthjoint-element-count-complies"]], "TBirdsmouthJoint.from_json": [[156, "tbirdsmouthjoint-from-json"]], "TBirdsmouthJoint.from_jsonstring": [[157, "tbirdsmouthjoint-from-jsonstring"]], "TBirdsmouthJoint.restore_beams_from_keys": [[158, "tbirdsmouthjoint-restore-beams-from-keys"]], "TBirdsmouthJoint.sha256": [[159, "tbirdsmouthjoint-sha256"]], "TBirdsmouthJoint.to_json": [[160, "tbirdsmouthjoint-to-json"]], "TBirdsmouthJoint.to_jsonstring": [[161, "tbirdsmouthjoint-to-jsonstring"]], "TBirdsmouthJoint.validate_data": [[162, "tbirdsmouthjoint-validate-data"]], "TButtJoint": [[163, "tbuttjoint"]], "TButtJoint.ToString": [[164, "tbuttjoint-tostring"]], "TButtJoint.add_extensions": [[165, "tbuttjoint-add-extensions"]], "TButtJoint.add_features": [[166, "tbuttjoint-add-features"]], "TButtJoint.check_elements_compatibility": [[167, "tbuttjoint-check-elements-compatibility"]], "TButtJoint.copy": [[168, "tbuttjoint-copy"]], "TButtJoint.create": [[169, "tbuttjoint-create"]], "TButtJoint.element_count_complies": [[170, "tbuttjoint-element-count-complies"]], "TButtJoint.from_json": [[171, "tbuttjoint-from-json"]], "TButtJoint.from_jsonstring": [[172, "tbuttjoint-from-jsonstring"]], "TButtJoint.restore_beams_from_keys": [[173, "tbuttjoint-restore-beams-from-keys"]], "TButtJoint.sha256": [[174, "tbuttjoint-sha256"]], "TButtJoint.to_json": [[175, "tbuttjoint-to-json"]], "TButtJoint.to_jsonstring": [[176, "tbuttjoint-to-jsonstring"]], "TButtJoint.validate_data": [[177, "tbuttjoint-validate-data"]], "TDovetailJoint": [[178, "tdovetailjoint"]], "TDovetailJoint.ToString": [[179, "tdovetailjoint-tostring"]], "TDovetailJoint.add_extensions": [[180, "tdovetailjoint-add-extensions"]], "TDovetailJoint.add_features": [[181, "tdovetailjoint-add-features"]], "TDovetailJoint.check_elements_compatibility": [[182, "tdovetailjoint-check-elements-compatibility"]], "TDovetailJoint.copy": [[183, "tdovetailjoint-copy"]], "TDovetailJoint.create": [[184, "tdovetailjoint-create"]], "TDovetailJoint.define_dovetail_tool": [[185, "tdovetailjoint-define-dovetail-tool"]], "TDovetailJoint.element_count_complies": [[186, "tdovetailjoint-element-count-complies"]], "TDovetailJoint.from_json": [[187, "tdovetailjoint-from-json"]], "TDovetailJoint.from_jsonstring": [[188, "tdovetailjoint-from-jsonstring"]], "TDovetailJoint.restore_beams_from_keys": [[189, "tdovetailjoint-restore-beams-from-keys"]], "TDovetailJoint.sha256": [[190, "tdovetailjoint-sha256"]], "TDovetailJoint.to_json": [[191, "tdovetailjoint-to-json"]], "TDovetailJoint.to_jsonstring": [[192, "tdovetailjoint-to-jsonstring"]], "TDovetailJoint.validate_data": [[193, "tdovetailjoint-validate-data"]], "TLapJoint": [[194, "tlapjoint"]], "TLapJoint.ToString": [[195, "tlapjoint-tostring"]], "TLapJoint.add_extensions": [[196, "tlapjoint-add-extensions"]], "TLapJoint.add_features": [[197, "tlapjoint-add-features"]], "TLapJoint.check_elements_compatibility": [[198, "tlapjoint-check-elements-compatibility"]], "TLapJoint.copy": [[199, "tlapjoint-copy"]], "TLapJoint.create": [[200, "tlapjoint-create"]], "TLapJoint.element_count_complies": [[201, "tlapjoint-element-count-complies"]], "TLapJoint.from_json": [[202, "tlapjoint-from-json"]], "TLapJoint.from_jsonstring": [[203, "tlapjoint-from-jsonstring"]], "TLapJoint.restore_beams_from_keys": [[204, "tlapjoint-restore-beams-from-keys"]], "TLapJoint.sha256": [[205, "tlapjoint-sha256"]], "TLapJoint.to_json": [[206, "tlapjoint-to-json"]], "TLapJoint.to_jsonstring": [[207, "tlapjoint-to-jsonstring"]], "TLapJoint.validate_data": [[208, "tlapjoint-validate-data"]], "TStepJoint": [[209, "tstepjoint"]], "TStepJoint.ToString": [[210, "tstepjoint-tostring"]], "TStepJoint.add_extensions": [[211, "tstepjoint-add-extensions"]], "TStepJoint.add_features": [[212, "tstepjoint-add-features"]], "TStepJoint.check_elements_compatibility": [[213, "tstepjoint-check-elements-compatibility"]], "TStepJoint.copy": [[214, "tstepjoint-copy"]], "TStepJoint.create": [[215, "tstepjoint-create"]], "TStepJoint.element_count_complies": [[216, "tstepjoint-element-count-complies"]], "TStepJoint.from_json": [[217, "tstepjoint-from-json"]], "TStepJoint.from_jsonstring": [[218, "tstepjoint-from-jsonstring"]], "TStepJoint.restore_beams_from_keys": [[219, "tstepjoint-restore-beams-from-keys"]], "TStepJoint.set_step_depths": [[220, "tstepjoint-set-step-depths"]], "TStepJoint.sha256": [[221, "tstepjoint-sha256"]], "TStepJoint.to_json": [[222, "tstepjoint-to-json"]], "TStepJoint.to_jsonstring": [[223, "tstepjoint-to-jsonstring"]], "TStepJoint.validate_data": [[224, "tstepjoint-validate-data"]], "TenonMortiseJoint": [[225, "tenonmortisejoint"]], "TenonMortiseJoint.ToString": [[226, "tenonmortisejoint-tostring"]], "TenonMortiseJoint.add_extensions": [[227, "tenonmortisejoint-add-extensions"]], "TenonMortiseJoint.add_features": [[228, "tenonmortisejoint-add-features"]], "TenonMortiseJoint.check_elements_compatibility": [[229, "tenonmortisejoint-check-elements-compatibility"]], "TenonMortiseJoint.copy": [[230, "tenonmortisejoint-copy"]], "TenonMortiseJoint.create": [[231, "tenonmortisejoint-create"]], "TenonMortiseJoint.element_count_complies": [[232, "tenonmortisejoint-element-count-complies"]], "TenonMortiseJoint.from_json": [[233, "tenonmortisejoint-from-json"]], "TenonMortiseJoint.from_jsonstring": [[234, "tenonmortisejoint-from-jsonstring"]], "TenonMortiseJoint.restore_beams_from_keys": [[235, "tenonmortisejoint-restore-beams-from-keys"]], "TenonMortiseJoint.set_default_values": [[236, "tenonmortisejoint-set-default-values"]], "TenonMortiseJoint.sha256": [[237, "tenonmortisejoint-sha256"]], "TenonMortiseJoint.to_json": [[238, "tenonmortisejoint-to-json"]], "TenonMortiseJoint.to_jsonstring": [[239, "tenonmortisejoint-to-jsonstring"]], "TenonMortiseJoint.validate_data": [[240, "tenonmortisejoint-validate-data"]], "TripletAnalyzer": [[241, "tripletanalyzer"]], "XLapJoint": [[242, "xlapjoint"]], "XLapJoint.ToString": [[243, "xlapjoint-tostring"]], "XLapJoint.add_extensions": [[244, "xlapjoint-add-extensions"]], "XLapJoint.add_features": [[245, "xlapjoint-add-features"]], "XLapJoint.check_elements_compatibility": [[246, "xlapjoint-check-elements-compatibility"]], "XLapJoint.copy": [[247, "xlapjoint-copy"]], "XLapJoint.create": [[248, "xlapjoint-create"]], "XLapJoint.element_count_complies": [[249, "xlapjoint-element-count-complies"]], "XLapJoint.from_json": [[250, "xlapjoint-from-json"]], "XLapJoint.from_jsonstring": [[251, "xlapjoint-from-jsonstring"]], "XLapJoint.restore_beams_from_keys": [[252, "xlapjoint-restore-beams-from-keys"]], "XLapJoint.sha256": [[253, "xlapjoint-sha256"]], "XLapJoint.to_json": [[254, "xlapjoint-to-json"]], "XLapJoint.to_jsonstring": [[255, "xlapjoint-to-jsonstring"]], "XLapJoint.validate_data": [[256, "xlapjoint-validate-data"]], "XNotchJoint": [[257, "xnotchjoint"]], "XNotchJoint.ToString": [[258, "xnotchjoint-tostring"]], "XNotchJoint.add_extensions": [[259, "xnotchjoint-add-extensions"]], "XNotchJoint.add_features": [[260, "xnotchjoint-add-features"]], "XNotchJoint.check_elements_compatibility": [[261, "xnotchjoint-check-elements-compatibility"]], "XNotchJoint.copy": [[262, "xnotchjoint-copy"]], "XNotchJoint.create": [[263, "xnotchjoint-create"]], "XNotchJoint.element_count_complies": [[264, "xnotchjoint-element-count-complies"]], "XNotchJoint.from_json": [[265, "xnotchjoint-from-json"]], "XNotchJoint.from_jsonstring": [[266, "xnotchjoint-from-jsonstring"]], "XNotchJoint.restore_beams_from_keys": [[267, "xnotchjoint-restore-beams-from-keys"]], "XNotchJoint.sha256": [[268, "xnotchjoint-sha256"]], "XNotchJoint.to_json": [[269, "xnotchjoint-to-json"]], "XNotchJoint.to_jsonstring": [[270, "xnotchjoint-to-jsonstring"]], "XNotchJoint.validate_data": [[271, "xnotchjoint-validate-data"]], "YButtJoint": [[272, "ybuttjoint"]], "YButtJoint.ToString": [[273, "ybuttjoint-tostring"]], "YButtJoint.add_extensions": [[274, "ybuttjoint-add-extensions"]], "YButtJoint.add_features": [[275, "ybuttjoint-add-features"]], "YButtJoint.check_elements_compatibility": [[276, "ybuttjoint-check-elements-compatibility"]], "YButtJoint.copy": [[277, "ybuttjoint-copy"]], "YButtJoint.create": [[278, "ybuttjoint-create"]], "YButtJoint.cross_beam_ref_side_index": [[279, "ybuttjoint-cross-beam-ref-side-index"]], "YButtJoint.element_count_complies": [[280, "ybuttjoint-element-count-complies"]], "YButtJoint.from_json": [[281, "ybuttjoint-from-json"]], "YButtJoint.from_jsonstring": [[282, "ybuttjoint-from-jsonstring"]], "YButtJoint.get_miter_planes": [[283, "ybuttjoint-get-miter-planes"]], "YButtJoint.main_beam_ref_side_index": [[284, "ybuttjoint-main-beam-ref-side-index"]], "YButtJoint.restore_beams_from_keys": [[285, "ybuttjoint-restore-beams-from-keys"]], "YButtJoint.sha256": [[286, "ybuttjoint-sha256"]], "YButtJoint.to_json": [[287, "ybuttjoint-to-json"]], "YButtJoint.to_jsonstring": [[288, "ybuttjoint-to-jsonstring"]], "YButtJoint.validate_data": [[289, "ybuttjoint-validate-data"]], "find_neighboring_elements": [[290, "find-neighboring-elements"], [861, "find-neighboring-elements"]], "CategoryRule": [[291, "categoryrule"]], "CategoryRule.ToString": [[292, "categoryrule-tostring"]], "CategoryRule.comply": [[293, "categoryrule-comply"]], "CategoryRule.get_category_rules": [[294, "categoryrule-get-category-rules"]], "CategoryRule.get_direct_rules": [[295, "categoryrule-get-direct-rules"]], "CategoryRule.get_topology_rules": [[296, "categoryrule-get-topology-rules"]], "CategoryRule.joints_from_beams_and_rules": [[297, "categoryrule-joints-from-beams-and-rules"]], "CategoryRule.reorder": [[298, "categoryrule-reorder"]], "DebugInfomation": [[299, "debuginfomation"]], "DebugInfomation.ToString": [[300, "debuginfomation-tostring"]], "DebugInfomation.add_fastener_error": [[301, "debuginfomation-add-fastener-error"]], "DebugInfomation.add_feature_error": [[302, "debuginfomation-add-feature-error"]], "DebugInfomation.add_joint_error": [[303, "debuginfomation-add-joint-error"]], "DirectRule": [[304, "directrule"]], "DirectRule.ToString": [[305, "directrule-tostring"]], "DirectRule.comply": [[306, "directrule-comply"]], "DirectRule.contains": [[307, "directrule-contains"]], "DirectRule.get_category_rules": [[308, "directrule-get-category-rules"]], "DirectRule.get_direct_rules": [[309, "directrule-get-direct-rules"]], "DirectRule.get_topology_rules": [[310, "directrule-get-topology-rules"]], "DirectRule.joints_from_beams_and_rules": [[311, "directrule-joints-from-beams-and-rules"]], "FeatureDefinition": [[312, "featuredefinition"]], "FeatureDefinition.ToString": [[313, "featuredefinition-tostring"]], "JointDefinition": [[314, "jointdefinition"]], "JointDefinition.ToString": [[315, "jointdefinition-tostring"]], "JointDefinition.is_identical": [[316, "jointdefinition-is-identical"]], "JointDefinition.match": [[317, "jointdefinition-match"]], "JointRule": [[318, "jointrule"]], "JointRule.comply": [[319, "jointrule-comply"]], "JointRule.get_category_rules": [[320, "jointrule-get-category-rules"]], "JointRule.get_direct_rules": [[321, "jointrule-get-direct-rules"]], "JointRule.get_topology_rules": [[322, "jointrule-get-topology-rules"]], "JointRule.joints_from_beams_and_rules": [[323, "jointrule-joints-from-beams-and-rules"]], "SurfaceModel": [[324, "surfacemodel"]], "SurfaceModel.beam_category_names": [[325, "surfacemodel-beam-category-names"]], "SurfaceModel.create_model": [[326, "surfacemodel-create-model"]], "SurfaceModel.cull_overlaps": [[327, "surfacemodel-cull-overlaps"]], "SurfaceModel.distance_between_elements": [[328, "surfacemodel-distance-between-elements"]], "SurfaceModel.generate_frame": [[329, "surfacemodel-generate-frame"]], "SurfaceModel.generate_perimeter_beams": [[330, "surfacemodel-generate-perimeter-beams"]], "SurfaceModel.generate_plates": [[331, "surfacemodel-generate-plates"]], "SurfaceModel.generate_stud_lines": [[332, "surfacemodel-generate-stud-lines"]], "SurfaceModel.generate_studs": [[333, "surfacemodel-generate-studs"]], "SurfaceModel.generate_windows": [[334, "surfacemodel-generate-windows"]], "SurfaceModel.get_beam_intersections": [[335, "surfacemodel-get-beam-intersections"]], "SurfaceModel.get_interior_segment_indices": [[336, "surfacemodel-get-interior-segment-indices"]], "SurfaceModel.offset_elements": [[337, "surfacemodel-offset-elements"]], "SurfaceModel.parse_loops": [[338, "surfacemodel-parse-loops"]], "SurfaceModel.trim_jack_studs": [[339, "surfacemodel-trim-jack-studs"]], "SurfaceModel.trim_king_studs": [[340, "surfacemodel-trim-king-studs"]], "SurfaceModel.trim_studs": [[341, "surfacemodel-trim-studs"]], "TopologyRule": [[342, "topologyrule"]], "TopologyRule.ToString": [[343, "topologyrule-tostring"]], "TopologyRule.comply": [[344, "topologyrule-comply"]], "TopologyRule.get_category_rules": [[345, "topologyrule-get-category-rules"]], "TopologyRule.get_direct_rules": [[346, "topologyrule-get-direct-rules"]], "TopologyRule.get_topology_rules": [[347, "topologyrule-get-topology-rules"]], "TopologyRule.joints_from_beams_and_rules": [[348, "topologyrule-joints-from-beams-and-rules"]], "guess_joint_topology_2beams": [[349, "guess-joint-topology-2beams"]], "set_default_joints": [[350, "set-default-joints"]], "Beam": [[351, "beam"]], "Beam.ToString": [[352, "beam-tostring"]], "Beam.add_blank_extension": [[353, "beam-add-blank-extension"]], "Beam.add_feature": [[354, "beam-add-feature"]], "Beam.add_features": [[355, "beam-add-features"]], "Beam.back_side": [[356, "beam-back-side"]], "Beam.compute_aabb": [[357, "beam-compute-aabb"]], "Beam.compute_collision_mesh": [[358, "beam-compute-collision-mesh"]], "Beam.compute_geometry": [[359, "beam-compute-geometry"]], "Beam.compute_obb": [[360, "beam-compute-obb"]], "Beam.compute_worldtransformation": [[361, "beam-compute-worldtransformation"]], "Beam.copy": [[362, "beam-copy"]], "Beam.endpoint_closest_to_point": [[363, "beam-endpoint-closest-to-point"]], "Beam.extension_to_plane": [[364, "beam-extension-to-plane"]], "Beam.from_centerline": [[365, "beam-from-centerline"]], "Beam.from_endpoints": [[366, "beam-from-endpoints"]], "Beam.from_json": [[367, "beam-from-json"]], "Beam.from_jsonstring": [[368, "beam-from-jsonstring"]], "Beam.front_side": [[369, "beam-front-side"]], "Beam.get_dimensions_relative_to_side": [[370, "beam-get-dimensions-relative-to-side"]], "Beam.opp_side": [[371, "beam-opp-side"]], "Beam.remove_blank_extension": [[372, "beam-remove-blank-extension"]], "Beam.remove_features": [[373, "beam-remove-features"]], "Beam.reset": [[374, "beam-reset"]], "Beam.sha256": [[375, "beam-sha256"]], "Beam.side_as_surface": [[376, "beam-side-as-surface"]], "Beam.to_json": [[377, "beam-to-json"]], "Beam.to_jsonstring": [[378, "beam-to-jsonstring"]], "Beam.transform": [[379, "beam-transform"]], "Beam.transformed": [[380, "beam-transformed"]], "Beam.validate_data": [[381, "beam-validate-data"]], "Fastener": [[382, "fastener"]], "Fastener.ToString": [[383, "fastener-tostring"]], "Fastener.add_feature": [[384, "fastener-add-feature"]], "Fastener.add_features": [[385, "fastener-add-features"]], "Fastener.compute_aabb": [[386, "fastener-compute-aabb"]], "Fastener.compute_collision_mesh": [[387, "fastener-compute-collision-mesh"]], "Fastener.compute_geometry": [[388, "fastener-compute-geometry"]], "Fastener.compute_obb": [[389, "fastener-compute-obb"]], "Fastener.compute_worldtransformation": [[390, "fastener-compute-worldtransformation"]], "Fastener.copy": [[391, "fastener-copy"]], "Fastener.from_json": [[392, "fastener-from-json"]], "Fastener.from_jsonstring": [[393, "fastener-from-jsonstring"]], "Fastener.remove_blank_extension": [[394, "fastener-remove-blank-extension"]], "Fastener.remove_features": [[395, "fastener-remove-features"]], "Fastener.reset": [[396, "fastener-reset"]], "Fastener.sha256": [[397, "fastener-sha256"]], "Fastener.to_json": [[398, "fastener-to-json"]], "Fastener.to_jsonstring": [[399, "fastener-to-jsonstring"]], "Fastener.transform": [[400, "fastener-transform"]], "Fastener.transformed": [[401, "fastener-transformed"]], "Fastener.validate_data": [[402, "fastener-validate-data"]], "FastenerTimberInterface": [[403, "fastenertimberinterface"]], "FastenerTimberInterface.ToString": [[404, "fastenertimberinterface-tostring"]], "FastenerTimberInterface.copy": [[405, "fastenertimberinterface-copy"]], "FastenerTimberInterface.from_json": [[406, "fastenertimberinterface-from-json"]], "FastenerTimberInterface.from_jsonstring": [[407, "fastenertimberinterface-from-jsonstring"]], "FastenerTimberInterface.get_features": [[408, "fastenertimberinterface-get-features"]], "FastenerTimberInterface.sha256": [[409, "fastenertimberinterface-sha256"]], "FastenerTimberInterface.to_json": [[410, "fastenertimberinterface-to-json"]], "FastenerTimberInterface.to_jsonstring": [[411, "fastenertimberinterface-to-jsonstring"]], "FastenerTimberInterface.validate_data": [[412, "fastenertimberinterface-validate-data"]], "Plate": [[413, "plate"]], "Plate.ToString": [[414, "plate-tostring"]], "Plate.add_feature": [[415, "plate-add-feature"]], "Plate.add_features": [[416, "plate-add-features"]], "Plate.add_interface": [[417, "plate-add-interface"]], "Plate.check_outlines": [[418, "plate-check-outlines"]], "Plate.compute_aabb": [[419, "plate-compute-aabb"]], "Plate.compute_collision_mesh": [[420, "plate-compute-collision-mesh"]], "Plate.compute_geometry": [[421, "plate-compute-geometry"]], "Plate.compute_obb": [[422, "plate-compute-obb"]], "Plate.compute_worldtransformation": [[423, "plate-compute-worldtransformation"]], "Plate.copy": [[424, "plate-copy"]], "Plate.from_brep": [[425, "plate-from-brep"]], "Plate.from_json": [[426, "plate-from-json"]], "Plate.from_jsonstring": [[427, "plate-from-jsonstring"]], "Plate.from_outline_thickness": [[428, "plate-from-outline-thickness"]], "Plate.opp_side": [[429, "plate-opp-side"]], "Plate.remove_blank_extension": [[430, "plate-remove-blank-extension"]], "Plate.remove_features": [[431, "plate-remove-features"]], "Plate.reset": [[432, "plate-reset"]], "Plate.sha256": [[433, "plate-sha256"]], "Plate.side_as_surface": [[434, "plate-side-as-surface"]], "Plate.to_json": [[435, "plate-to-json"]], "Plate.to_jsonstring": [[436, "plate-to-jsonstring"]], "Plate.transform": [[437, "plate-transform"]], "Plate.transformed": [[438, "plate-transformed"]], "Plate.validate_data": [[439, "plate-validate-data"]], "TimberElement": [[440, "timberelement"]], "TimberElement.ToString": [[441, "timberelement-tostring"]], "TimberElement.add_feature": [[442, "timberelement-add-feature"]], "TimberElement.add_features": [[443, "timberelement-add-features"]], "TimberElement.compute_aabb": [[444, "timberelement-compute-aabb"]], "TimberElement.compute_collision_mesh": [[445, "timberelement-compute-collision-mesh"]], "TimberElement.compute_geometry": [[446, "timberelement-compute-geometry"]], "TimberElement.compute_obb": [[447, "timberelement-compute-obb"]], "TimberElement.compute_worldtransformation": [[448, "timberelement-compute-worldtransformation"]], "TimberElement.copy": [[449, "timberelement-copy"]], "TimberElement.from_json": [[450, "timberelement-from-json"]], "TimberElement.from_jsonstring": [[451, "timberelement-from-jsonstring"]], "TimberElement.remove_blank_extension": [[452, "timberelement-remove-blank-extension"]], "TimberElement.remove_features": [[453, "timberelement-remove-features"]], "TimberElement.reset": [[454, "timberelement-reset"]], "TimberElement.sha256": [[455, "timberelement-sha256"]], "TimberElement.to_json": [[456, "timberelement-to-json"]], "TimberElement.to_jsonstring": [[457, "timberelement-to-jsonstring"]], "TimberElement.transform": [[458, "timberelement-transform"]], "TimberElement.transformed": [[459, "timberelement-transformed"]], "TimberElement.validate_data": [[460, "timberelement-validate-data"]], "Wall": [[461, "wall"]], "Wall.ToString": [[462, "wall-tostring"]], "Wall.add_feature": [[463, "wall-add-feature"]], "Wall.add_features": [[464, "wall-add-features"]], "Wall.compute_aabb": [[465, "wall-compute-aabb"]], "Wall.compute_collision_mesh": [[466, "wall-compute-collision-mesh"]], "Wall.compute_geometry": [[467, "wall-compute-geometry"]], "Wall.compute_obb": [[468, "wall-compute-obb"]], "Wall.compute_worldtransformation": [[469, "wall-compute-worldtransformation"]], "Wall.copy": [[470, "wall-copy"]], "Wall.from_boundary": [[471, "wall-from-boundary"]], "Wall.from_brep": [[472, "wall-from-brep"]], "Wall.from_json": [[473, "wall-from-json"]], "Wall.from_jsonstring": [[474, "wall-from-jsonstring"]], "Wall.remove_blank_extension": [[475, "wall-remove-blank-extension"]], "Wall.remove_features": [[476, "wall-remove-features"]], "Wall.reset": [[477, "wall-reset"]], "Wall.rotate": [[478, "wall-rotate"]], "Wall.sha256": [[479, "wall-sha256"]], "Wall.to_json": [[480, "wall-to-json"]], "Wall.to_jsonstring": [[481, "wall-to-jsonstring"]], "Wall.transform": [[482, "wall-transform"]], "Wall.transformed": [[483, "wall-transformed"]], "Wall.validate_data": [[484, "wall-validate-data"]], "BeamJoiningError": [[485, "beamjoiningerror"]], "FastenerApplicationError": [[486, "fastenerapplicationerror"]], "FeatureApplicationError": [[487, "featureapplicationerror"]], "BTLxPart": [[488, "btlxpart"]], "BTLxPart.et_point_vals": [[489, "btlxpart-et-point-vals"]], "BTLxPart.ref_side_from_face": [[490, "btlxpart-ref-side-from-face"]], "BTLxProcessing": [[491, "btlxprocessing"]], "BTLxProcessing.ToString": [[492, "btlxprocessing-tostring"]], "BTLxProcessing.add_subprocessing": [[493, "btlxprocessing-add-subprocessing"]], "BTLxProcessing.copy": [[494, "btlxprocessing-copy"]], "BTLxProcessing.from_json": [[495, "btlxprocessing-from-json"]], "BTLxProcessing.from_jsonstring": [[496, "btlxprocessing-from-jsonstring"]], "BTLxProcessing.scaled": [[497, "btlxprocessing-scaled"]], "BTLxProcessing.sha256": [[498, "btlxprocessing-sha256"]], "BTLxProcessing.to_json": [[499, "btlxprocessing-to-json"]], "BTLxProcessing.to_jsonstring": [[500, "btlxprocessing-to-jsonstring"]], "BTLxProcessing.validate_data": [[501, "btlxprocessing-validate-data"]], "BTLxWriter": [[502, "btlxwriter"]], "BTLxWriter.model_to_xml": [[503, "btlxwriter-model-to-xml"]], "BTLxWriter.register_type_serializer": [[504, "btlxwriter-register-type-serializer"]], "BTLxWriter.write": [[505, "btlxwriter-write"]], "DoubleCut": [[506, "doublecut"]], "DoubleCut.ToString": [[507, "doublecut-tostring"]], "DoubleCut.add_subprocessing": [[508, "doublecut-add-subprocessing"]], "DoubleCut.apply": [[509, "doublecut-apply"]], "DoubleCut.copy": [[510, "doublecut-copy"]], "DoubleCut.from_json": [[511, "doublecut-from-json"]], "DoubleCut.from_jsonstring": [[512, "doublecut-from-jsonstring"]], "DoubleCut.from_planes_and_beam": [[513, "doublecut-from-planes-and-beam"]], "DoubleCut.from_shapes_and_element": [[514, "doublecut-from-shapes-and-element"]], "DoubleCut.planes_from_params_and_beam": [[515, "doublecut-planes-from-params-and-beam"]], "DoubleCut.scale": [[516, "doublecut-scale"]], "DoubleCut.scaled": [[517, "doublecut-scaled"]], "DoubleCut.sha256": [[518, "doublecut-sha256"]], "DoubleCut.to_json": [[519, "doublecut-to-json"]], "DoubleCut.to_jsonstring": [[520, "doublecut-to-jsonstring"]], "DoubleCut.validate_data": [[521, "doublecut-validate-data"]], "DovetailMortise": [[522, "dovetailmortise"]], "DovetailMortise.ToString": [[523, "dovetailmortise-tostring"]], "DovetailMortise.add_subprocessing": [[524, "dovetailmortise-add-subprocessing"]], "DovetailMortise.apply": [[525, "dovetailmortise-apply"]], "DovetailMortise.copy": [[526, "dovetailmortise-copy"]], "DovetailMortise.define_dovetail_tool": [[527, "dovetailmortise-define-dovetail-tool"]], "DovetailMortise.dovetail_cutting_frames_from_params_and_beam": [[528, "dovetailmortise-dovetail-cutting-frames-from-params-and-beam"]], "DovetailMortise.dovetail_volume_from_params_and_beam": [[529, "dovetailmortise-dovetail-volume-from-params-and-beam"]], "DovetailMortise.frame_from_params_and_beam": [[530, "dovetailmortise-frame-from-params-and-beam"]], "DovetailMortise.from_frame_and_beam": [[531, "dovetailmortise-from-frame-and-beam"]], "DovetailMortise.from_json": [[532, "dovetailmortise-from-json"]], "DovetailMortise.from_jsonstring": [[533, "dovetailmortise-from-jsonstring"]], "DovetailMortise.scale": [[534, "dovetailmortise-scale"]], "DovetailMortise.scaled": [[535, "dovetailmortise-scaled"]], "DovetailMortise.sha256": [[536, "dovetailmortise-sha256"]], "DovetailMortise.to_json": [[537, "dovetailmortise-to-json"]], "DovetailMortise.to_jsonstring": [[538, "dovetailmortise-to-jsonstring"]], "DovetailMortise.validate_data": [[539, "dovetailmortise-validate-data"]], "DovetailTenon": [[540, "dovetailtenon"]], "DovetailTenon.ToString": [[541, "dovetailtenon-tostring"]], "DovetailTenon.add_subprocessing": [[542, "dovetailtenon-add-subprocessing"]], "DovetailTenon.apply": [[543, "dovetailtenon-apply"]], "DovetailTenon.copy": [[544, "dovetailtenon-copy"]], "DovetailTenon.define_dovetail_tool": [[545, "dovetailtenon-define-dovetail-tool"]], "DovetailTenon.dovetail_cutting_frames_from_params_and_beam": [[546, "dovetailtenon-dovetail-cutting-frames-from-params-and-beam"]], "DovetailTenon.dovetail_volume_from_params_and_beam": [[547, "dovetailtenon-dovetail-volume-from-params-and-beam"]], "DovetailTenon.frame_from_params_and_beam": [[548, "dovetailtenon-frame-from-params-and-beam"]], "DovetailTenon.from_json": [[549, "dovetailtenon-from-json"]], "DovetailTenon.from_jsonstring": [[550, "dovetailtenon-from-jsonstring"]], "DovetailTenon.from_plane_and_beam": [[551, "dovetailtenon-from-plane-and-beam"]], "DovetailTenon.scale": [[552, "dovetailtenon-scale"]], "DovetailTenon.scaled": [[553, "dovetailtenon-scaled"]], "DovetailTenon.sha256": [[554, "dovetailtenon-sha256"]], "DovetailTenon.to_json": [[555, "dovetailtenon-to-json"]], "DovetailTenon.to_jsonstring": [[556, "dovetailtenon-to-jsonstring"]], "DovetailTenon.validate_data": [[557, "dovetailtenon-validate-data"]], "Drilling": [[558, "drilling"]], "Drilling.ToString": [[559, "drilling-tostring"]], "Drilling.add_subprocessing": [[560, "drilling-add-subprocessing"]], "Drilling.apply": [[561, "drilling-apply"]], "Drilling.copy": [[562, "drilling-copy"]], "Drilling.cylinder_from_params_and_element": [[563, "drilling-cylinder-from-params-and-element"]], "Drilling.from_json": [[564, "drilling-from-json"]], "Drilling.from_jsonstring": [[565, "drilling-from-jsonstring"]], "Drilling.from_line_and_element": [[566, "drilling-from-line-and-element"]], "Drilling.from_shapes_and_element": [[567, "drilling-from-shapes-and-element"]], "Drilling.scale": [[568, "drilling-scale"]], "Drilling.scaled": [[569, "drilling-scaled"]], "Drilling.sha256": [[570, "drilling-sha256"]], "Drilling.to_json": [[571, "drilling-to-json"]], "Drilling.to_jsonstring": [[572, "drilling-to-jsonstring"]], "Drilling.validate_data": [[573, "drilling-validate-data"]], "EdgePositionType": [[574, "edgepositiontype"]], "FrenchRidgeLap": [[575, "frenchridgelap"]], "FrenchRidgeLap.ToString": [[576, "frenchridgelap-tostring"]], "FrenchRidgeLap.add_subprocessing": [[577, "frenchridgelap-add-subprocessing"]], "FrenchRidgeLap.apply": [[578, "frenchridgelap-apply"]], "FrenchRidgeLap.copy": [[579, "frenchridgelap-copy"]], "FrenchRidgeLap.frame_from_params_and_beam": [[580, "frenchridgelap-frame-from-params-and-beam"]], "FrenchRidgeLap.from_beam_beam_and_plane": [[581, "frenchridgelap-from-beam-beam-and-plane"]], "FrenchRidgeLap.from_json": [[582, "frenchridgelap-from-json"]], "FrenchRidgeLap.from_jsonstring": [[583, "frenchridgelap-from-jsonstring"]], "FrenchRidgeLap.lap_volume_from_params_and_beam": [[584, "frenchridgelap-lap-volume-from-params-and-beam"]], "FrenchRidgeLap.scale": [[585, "frenchridgelap-scale"]], "FrenchRidgeLap.scaled": [[586, "frenchridgelap-scaled"]], "FrenchRidgeLap.sha256": [[587, "frenchridgelap-sha256"]], "FrenchRidgeLap.to_json": [[588, "frenchridgelap-to-json"]], "FrenchRidgeLap.to_jsonstring": [[589, "frenchridgelap-to-jsonstring"]], "FrenchRidgeLap.validate_data": [[590, "frenchridgelap-validate-data"]], "JackRafterCut": [[591, "jackraftercut"]], "JackRafterCut.ToString": [[592, "jackraftercut-tostring"]], "JackRafterCut.add_subprocessing": [[593, "jackraftercut-add-subprocessing"]], "JackRafterCut.apply": [[594, "jackraftercut-apply"]], "JackRafterCut.copy": [[595, "jackraftercut-copy"]], "JackRafterCut.from_json": [[596, "jackraftercut-from-json"]], "JackRafterCut.from_jsonstring": [[597, "jackraftercut-from-jsonstring"]], "JackRafterCut.from_plane_and_beam": [[598, "jackraftercut-from-plane-and-beam"]], "JackRafterCut.from_shapes_and_element": [[599, "jackraftercut-from-shapes-and-element"]], "JackRafterCut.plane_from_params_and_beam": [[600, "jackraftercut-plane-from-params-and-beam"]], "JackRafterCut.scale": [[601, "jackraftercut-scale"]], "JackRafterCut.scaled": [[602, "jackraftercut-scaled"]], "JackRafterCut.sha256": [[603, "jackraftercut-sha256"]], "JackRafterCut.to_json": [[604, "jackraftercut-to-json"]], "JackRafterCut.to_jsonstring": [[605, "jackraftercut-to-jsonstring"]], "JackRafterCut.validate_data": [[606, "jackraftercut-validate-data"]], "Lap": [[607, "lap"]], "Lap.ToString": [[608, "lap-tostring"]], "Lap.add_subprocessing": [[609, "lap-add-subprocessing"]], "Lap.apply": [[610, "lap-apply"]], "Lap.copy": [[611, "lap-copy"]], "Lap.from_json": [[612, "lap-from-json"]], "Lap.from_jsonstring": [[613, "lap-from-jsonstring"]], "Lap.from_plane_and_beam": [[614, "lap-from-plane-and-beam"]], "Lap.from_shapes_and_element": [[615, "lap-from-shapes-and-element"]], "Lap.from_volume_and_beam": [[616, "lap-from-volume-and-beam"]], "Lap.scale": [[617, "lap-scale"]], "Lap.scaled": [[618, "lap-scaled"]], "Lap.sha256": [[619, "lap-sha256"]], "Lap.to_json": [[620, "lap-to-json"]], "Lap.to_jsonstring": [[621, "lap-to-jsonstring"]], "Lap.validate_data": [[622, "lap-validate-data"]], "Lap.volume_from_params_and_beam": [[623, "lap-volume-from-params-and-beam"]], "LimitationTopType": [[624, "limitationtoptype"]], "LongitudinalCut": [[625, "longitudinalcut"]], "LongitudinalCut.ToString": [[626, "longitudinalcut-tostring"]], "LongitudinalCut.add_subprocessing": [[627, "longitudinalcut-add-subprocessing"]], "LongitudinalCut.apply": [[628, "longitudinalcut-apply"]], "LongitudinalCut.copy": [[629, "longitudinalcut-copy"]], "LongitudinalCut.from_json": [[630, "longitudinalcut-from-json"]], "LongitudinalCut.from_jsonstring": [[631, "longitudinalcut-from-jsonstring"]], "LongitudinalCut.from_plane_and_beam": [[632, "longitudinalcut-from-plane-and-beam"]], "LongitudinalCut.from_shapes_and_element": [[633, "longitudinalcut-from-shapes-and-element"]], "LongitudinalCut.plane_from_params_and_beam": [[634, "longitudinalcut-plane-from-params-and-beam"]], "LongitudinalCut.scaled": [[635, "longitudinalcut-scaled"]], "LongitudinalCut.sha256": [[636, "longitudinalcut-sha256"]], "LongitudinalCut.to_json": [[637, "longitudinalcut-to-json"]], "LongitudinalCut.to_jsonstring": [[638, "longitudinalcut-to-jsonstring"]], "LongitudinalCut.validate_data": [[639, "longitudinalcut-validate-data"]], "LongitudinalCut.volume_from_params_and_beam": [[640, "longitudinalcut-volume-from-params-and-beam"]], "MachiningLimits": [[641, "machininglimits"]], "Mortise": [[642, "mortise"]], "Mortise.ToString": [[643, "mortise-tostring"]], "Mortise.add_subprocessing": [[644, "mortise-add-subprocessing"]], "Mortise.apply": [[645, "mortise-apply"]], "Mortise.copy": [[646, "mortise-copy"]], "Mortise.frame_from_params_and_beam": [[647, "mortise-frame-from-params-and-beam"]], "Mortise.from_frame_and_beam": [[648, "mortise-from-frame-and-beam"]], "Mortise.from_json": [[649, "mortise-from-json"]], "Mortise.from_jsonstring": [[650, "mortise-from-jsonstring"]], "Mortise.scale": [[651, "mortise-scale"]], "Mortise.scaled": [[652, "mortise-scaled"]], "Mortise.sha256": [[653, "mortise-sha256"]], "Mortise.to_json": [[654, "mortise-to-json"]], "Mortise.to_jsonstring": [[655, "mortise-to-jsonstring"]], "Mortise.validate_data": [[656, "mortise-validate-data"]], "Mortise.volume_from_params_and_beam": [[657, "mortise-volume-from-params-and-beam"]], "OrientationType": [[658, "orientationtype"]], "Pocket": [[659, "pocket"]], "Pocket.ToString": [[660, "pocket-tostring"]], "Pocket.add_subprocessing": [[661, "pocket-add-subprocessing"]], "Pocket.apply": [[662, "pocket-apply"]], "Pocket.copy": [[663, "pocket-copy"]], "Pocket.from_json": [[664, "pocket-from-json"]], "Pocket.from_jsonstring": [[665, "pocket-from-jsonstring"]], "Pocket.from_shapes_and_element": [[666, "pocket-from-shapes-and-element"]], "Pocket.from_volume_and_element": [[667, "pocket-from-volume-and-element"]], "Pocket.scale": [[668, "pocket-scale"]], "Pocket.scaled": [[669, "pocket-scaled"]], "Pocket.sha256": [[670, "pocket-sha256"]], "Pocket.to_json": [[671, "pocket-to-json"]], "Pocket.to_jsonstring": [[672, "pocket-to-jsonstring"]], "Pocket.validate_data": [[673, "pocket-validate-data"]], "Pocket.volume_from_params_and_element": [[674, "pocket-volume-from-params-and-element"]], "Slot": [[675, "slot"]], "Slot.ToString": [[676, "slot-tostring"]], "Slot.add_subprocessing": [[677, "slot-add-subprocessing"]], "Slot.apply": [[678, "slot-apply"]], "Slot.copy": [[679, "slot-copy"]], "Slot.from_json": [[680, "slot-from-json"]], "Slot.from_jsonstring": [[681, "slot-from-jsonstring"]], "Slot.from_plane_and_beam": [[682, "slot-from-plane-and-beam"]], "Slot.scale": [[683, "slot-scale"]], "Slot.scaled": [[684, "slot-scaled"]], "Slot.sha256": [[685, "slot-sha256"]], "Slot.to_json": [[686, "slot-to-json"]], "Slot.to_jsonstring": [[687, "slot-to-jsonstring"]], "Slot.validate_data": [[688, "slot-validate-data"]], "StepJoint": [[689, "stepjoint"]], "StepJoint.ToString": [[690, "stepjoint-tostring"]], "StepJoint.add_subprocessing": [[691, "stepjoint-add-subprocessing"]], "StepJoint.add_tenon": [[692, "stepjoint-add-tenon"]], "StepJoint.apply": [[693, "stepjoint-apply"]], "StepJoint.copy": [[694, "stepjoint-copy"]], "StepJoint.from_json": [[695, "stepjoint-from-json"]], "StepJoint.from_jsonstring": [[696, "stepjoint-from-jsonstring"]], "StepJoint.from_plane_and_beam": [[697, "stepjoint-from-plane-and-beam"]], "StepJoint.planes_from_params_and_beam": [[698, "stepjoint-planes-from-params-and-beam"]], "StepJoint.scale": [[699, "stepjoint-scale"]], "StepJoint.scaled": [[700, "stepjoint-scaled"]], "StepJoint.sha256": [[701, "stepjoint-sha256"]], "StepJoint.tenon_volume_from_params_and_beam": [[702, "stepjoint-tenon-volume-from-params-and-beam"]], "StepJoint.to_json": [[703, "stepjoint-to-json"]], "StepJoint.to_jsonstring": [[704, "stepjoint-to-jsonstring"]], "StepJoint.validate_data": [[705, "stepjoint-validate-data"]], "StepJointNotch": [[706, "stepjointnotch"]], "StepJointNotch.ToString": [[707, "stepjointnotch-tostring"]], "StepJointNotch.add_mortise": [[708, "stepjointnotch-add-mortise"]], "StepJointNotch.add_subprocessing": [[709, "stepjointnotch-add-subprocessing"]], "StepJointNotch.apply": [[710, "stepjointnotch-apply"]], "StepJointNotch.copy": [[711, "stepjointnotch-copy"]], "StepJointNotch.from_json": [[712, "stepjointnotch-from-json"]], "StepJointNotch.from_jsonstring": [[713, "stepjointnotch-from-jsonstring"]], "StepJointNotch.from_plane_and_beam": [[714, "stepjointnotch-from-plane-and-beam"]], "StepJointNotch.mortise_volume_from_params_and_beam": [[715, "stepjointnotch-mortise-volume-from-params-and-beam"]], "StepJointNotch.planes_from_params_and_beam": [[716, "stepjointnotch-planes-from-params-and-beam"]], "StepJointNotch.scale": [[717, "stepjointnotch-scale"]], "StepJointNotch.scaled": [[718, "stepjointnotch-scaled"]], "StepJointNotch.sha256": [[719, "stepjointnotch-sha256"]], "StepJointNotch.to_json": [[720, "stepjointnotch-to-json"]], "StepJointNotch.to_jsonstring": [[721, "stepjointnotch-to-jsonstring"]], "StepJointNotch.validate_data": [[722, "stepjointnotch-validate-data"]], "StepShapeType": [[723, "stepshapetype"]], "Tenon": [[724, "tenon"]], "Tenon.ToString": [[725, "tenon-tostring"]], "Tenon.add_subprocessing": [[726, "tenon-add-subprocessing"]], "Tenon.apply": [[727, "tenon-apply"]], "Tenon.copy": [[728, "tenon-copy"]], "Tenon.frame_from_params_and_beam": [[729, "tenon-frame-from-params-and-beam"]], "Tenon.from_json": [[730, "tenon-from-json"]], "Tenon.from_jsonstring": [[731, "tenon-from-jsonstring"]], "Tenon.from_plane_and_beam": [[732, "tenon-from-plane-and-beam"]], "Tenon.scale": [[733, "tenon-scale"]], "Tenon.scaled": [[734, "tenon-scaled"]], "Tenon.sha256": [[735, "tenon-sha256"]], "Tenon.to_json": [[736, "tenon-to-json"]], "Tenon.to_jsonstring": [[737, "tenon-to-jsonstring"]], "Tenon.validate_data": [[738, "tenon-validate-data"]], "Tenon.volume_from_params_and_beam": [[739, "tenon-volume-from-params-and-beam"]], "TenonShapeType": [[740, "tenonshapetype"]], "add_gh_param": [[741, "add-gh-param"]], "clear_gh_params": [[742, "clear-gh-params"]], "get_leaf_subclasses": [[743, "get-leaf-subclasses"]], "item_input_valid": [[744, "item-input-valid"]], "list_input_valid": [[745, "list-input-valid"]], "manage_dynamic_params": [[746, "manage-dynamic-params"]], "rename_gh_input": [[747, "rename-gh-input"]], "TimberModel": [[748, "timbermodel"]], "TimberModel.ToString": [[749, "timbermodel-tostring"]], "TimberModel.add_element": [[750, "timbermodel-add-element"]], "TimberModel.add_elements": [[751, "timbermodel-add-elements"]], "TimberModel.add_group": [[752, "timbermodel-add-group"]], "TimberModel.add_group_element": [[753, "timbermodel-add-group-element"]], "TimberModel.add_interaction": [[754, "timbermodel-add-interaction"]], "TimberModel.add_joint": [[755, "timbermodel-add-joint"]], "TimberModel.add_material": [[756, "timbermodel-add-material"]], "TimberModel.assign_material": [[757, "timbermodel-assign-material"]], "TimberModel.compute_aabb": [[758, "timbermodel-compute-aabb"]], "TimberModel.compute_obb": [[759, "timbermodel-compute-obb"]], "TimberModel.connect_adjacent_beams": [[760, "timbermodel-connect-adjacent-beams"]], "TimberModel.connect_adjacent_walls": [[761, "timbermodel-connect-adjacent-walls"]], "TimberModel.copy": [[762, "timbermodel-copy"]], "TimberModel.element_by_guid": [[763, "timbermodel-element-by-guid"]], "TimberModel.elements": [[764, "timbermodel-elements"]], "TimberModel.elements_connected_by": [[765, "timbermodel-elements-connected-by"]], "TimberModel.from_json": [[766, "timbermodel-from-json"]], "TimberModel.from_jsonstring": [[767, "timbermodel-from-jsonstring"]], "TimberModel.get_elements_in_group": [[768, "timbermodel-get-elements-in-group"]], "TimberModel.get_interactions_for_element": [[769, "timbermodel-get-interactions-for-element"]], "TimberModel.has_element": [[770, "timbermodel-has-element"]], "TimberModel.has_group": [[771, "timbermodel-has-group"]], "TimberModel.has_interaction": [[772, "timbermodel-has-interaction"]], "TimberModel.has_material": [[773, "timbermodel-has-material"]], "TimberModel.interactions": [[774, "timbermodel-interactions"]], "TimberModel.materials": [[775, "timbermodel-materials"]], "TimberModel.process_joinery": [[776, "timbermodel-process-joinery"]], "TimberModel.remove_element": [[777, "timbermodel-remove-element"]], "TimberModel.remove_interaction": [[778, "timbermodel-remove-interaction"]], "TimberModel.remove_joint": [[779, "timbermodel-remove-joint"]], "TimberModel.rotate": [[780, "timbermodel-rotate"]], "TimberModel.rotated": [[781, "timbermodel-rotated"]], "TimberModel.scale": [[782, "timbermodel-scale"]], "TimberModel.scaled": [[783, "timbermodel-scaled"]], "TimberModel.set_topologies": [[784, "timbermodel-set-topologies"]], "TimberModel.sha256": [[785, "timbermodel-sha256"]], "TimberModel.to_json": [[786, "timbermodel-to-json"]], "TimberModel.to_jsonstring": [[787, "timbermodel-to-jsonstring"]], "TimberModel.transform": [[788, "timbermodel-transform"]], "TimberModel.transform_numpy": [[789, "timbermodel-transform-numpy"]], "TimberModel.transformed": [[790, "timbermodel-transformed"]], "TimberModel.transformed_numpy": [[791, "timbermodel-transformed-numpy"]], "TimberModel.translate": [[792, "timbermodel-translate"]], "TimberModel.translated": [[793, "timbermodel-translated"]], "TimberModel.validate_data": [[794, "timbermodel-validate-data"]], "Actor": [[795, "actor"]], "Actor.get_name": [[796, "actor-get-name"]], "BuildingPlan": [[797, "buildingplan"]], "BuildingPlan.ToString": [[798, "buildingplan-tostring"]], "BuildingPlan.add_step": [[799, "buildingplan-add-step"]], "BuildingPlan.copy": [[800, "buildingplan-copy"]], "BuildingPlan.from_json": [[801, "buildingplan-from-json"]], "BuildingPlan.from_jsonstring": [[802, "buildingplan-from-jsonstring"]], "BuildingPlan.sha256": [[803, "buildingplan-sha256"]], "BuildingPlan.to_json": [[804, "buildingplan-to-json"]], "BuildingPlan.to_jsonstring": [[805, "buildingplan-to-jsonstring"]], "BuildingPlan.validate_data": [[806, "buildingplan-validate-data"]], "BuildingPlanParser": [[807, "buildingplanparser"]], "BuildingPlanParser.parse": [[808, "buildingplanparser-parse"]], "BuildingPlanParser.serialize": [[809, "buildingplanparser-serialize"]], "Instruction": [[810, "instruction"]], "Instruction.ToString": [[811, "instruction-tostring"]], "Instruction.copy": [[812, "instruction-copy"]], "Instruction.from_json": [[813, "instruction-from-json"]], "Instruction.from_jsonstring": [[814, "instruction-from-jsonstring"]], "Instruction.sha256": [[815, "instruction-sha256"]], "Instruction.to_json": [[816, "instruction-to-json"]], "Instruction.to_jsonstring": [[817, "instruction-to-jsonstring"]], "Instruction.transform": [[818, "instruction-transform"]], "Instruction.validate_data": [[819, "instruction-validate-data"]], "LinearDimension": [[820, "lineardimension"]], "LinearDimension.ToString": [[821, "lineardimension-tostring"]], "LinearDimension.copy": [[822, "lineardimension-copy"]], "LinearDimension.from_json": [[823, "lineardimension-from-json"]], "LinearDimension.from_jsonstring": [[824, "lineardimension-from-jsonstring"]], "LinearDimension.sha256": [[825, "lineardimension-sha256"]], "LinearDimension.to_json": [[826, "lineardimension-to-json"]], "LinearDimension.to_jsonstring": [[827, "lineardimension-to-jsonstring"]], "LinearDimension.transform": [[828, "lineardimension-transform"]], "LinearDimension.validate_data": [[829, "lineardimension-validate-data"]], "Model3d": [[830, "model3d"]], "Model3d.ToString": [[831, "model3d-tostring"]], "Model3d.copy": [[832, "model3d-copy"]], "Model3d.from_json": [[833, "model3d-from-json"]], "Model3d.from_jsonstring": [[834, "model3d-from-jsonstring"]], "Model3d.sha256": [[835, "model3d-sha256"]], "Model3d.to_json": [[836, "model3d-to-json"]], "Model3d.to_jsonstring": [[837, "model3d-to-jsonstring"]], "Model3d.transform": [[838, "model3d-transform"]], "Model3d.validate_data": [[839, "model3d-validate-data"]], "SimpleSequenceGenerator": [[840, "simplesequencegenerator"]], "Step": [[841, "step"]], "Step.ToString": [[842, "step-tostring"]], "Step.copy": [[843, "step-copy"]], "Step.from_json": [[844, "step-from-json"]], "Step.from_jsonstring": [[845, "step-from-jsonstring"]], "Step.sha256": [[846, "step-sha256"]], "Step.to_json": [[847, "step-to-json"]], "Step.to_jsonstring": [[848, "step-to-jsonstring"]], "Step.transform": [[849, "step-transform"]], "Step.validate_data": [[850, "step-validate-data"]], "Text3d": [[851, "text3d"]], "Text3d.ToString": [[852, "text3d-tostring"]], "Text3d.copy": [[853, "text3d-copy"]], "Text3d.from_json": [[854, "text3d-from-json"]], "Text3d.from_jsonstring": [[855, "text3d-from-jsonstring"]], "Text3d.sha256": [[856, "text3d-sha256"]], "Text3d.to_json": [[857, "text3d-to-json"]], "Text3d.to_jsonstring": [[858, "text3d-to-jsonstring"]], "Text3d.transform": [[859, "text3d-transform"]], "Text3d.validate_data": [[860, "text3d-validate-data"]], "Citing": [[862, "citing"]], "Developer Guide": [[863, "developer-guide"]], "BTLx Contribution Guide": [[864, "btlx-contribution-guide"]], "Adding a new BTLx Processing": [[864, "adding-a-new-btlx-processing"]], "1. Identify the BTLx Processing and Parameters": [[864, "identify-the-btlx-processing-and-parameters"]], "2. Create the Processing Class": [[864, "create-the-processing-class"]], "Example:": [[864, "example"], [864, "id1"], [864, "id2"], [865, "example"], [865, "id1"], [865, "id2"]], "3. Add Alternative Constructors in Processing Class": [[864, "add-alternative-constructors-in-processing-class"]], "4. Add Geometry Generation Method in Processing Class": [[864, "add-geometry-generation-method-in-processing-class"]], "5. Update Module Imports": [[864, "update-module-imports"]], "6. Add Tests": [[864, "add-tests"]], "Key Considerations": [[864, "key-considerations"], [865, "key-considerations"]], "Joints Contribution Guide": [[865, "joints-contribution-guide"]], "Creating a New Joint": [[865, "creating-a-new-joint"]], "1. Define Joint Requirements and Analyze Element Relationships": [[865, "define-joint-requirements-and-analyze-element-relationships"]], "2. Create the Joint Class": [[865, "create-the-joint-class"]], "2. Extract Geometric Information": [[865, "extract-geometric-information"]], "3. Implement Core Methods": [[865, "implement-core-methods"]], "4. Update Module Imports": [[865, "update-module-imports"]], "5. Add Tests": [[865, "add-tests"]], "COMPAS Timber Documentation": [[866, "compas-timber-documentation"]], "Dependencies": [[866, "dependencies"]], "Table of Contents": [[866, "table-of-contents"]], "Indices and tables": [[866, "indices-and-tables"]], "Installation": [[867, "installation"]], "User": [[867, "user"]], "Developer": [[867, "developer"]], "License": [[868, "license"]], "Grasshopper plugin": [[869, "grasshopper-plugin"]], "Attributes": [[870, "attributes"]], "Standard Attributes": [[870, "standard-attributes"]], "Custom Attributes": [[870, "custom-attributes"]], "Check Attributes": [[870, "check-attributes"]], "Delete Attributes": [[870, "delete-attributes"]], "Beams": [[871, "beams"]], "DecomposeBeam": [[871, "decomposebeam"]], "FindBeamByRhinoGuid": [[871, "findbeambyrhinoguid"]], "Design": [[872, "design"]], "Surface Model": [[872, "surface-model"]], "Surface Model Options": [[872, "surface-model-options"]], "Custom Beam Dimensions": [[872, "custom-beam-dimensions"]], "Examples": [[873, "examples"]], "Fabrication": [[874, "fabrication"]], "Write BTLx": [[874, "write-btlx"]], "Features": [[875, "features"]], "Jack Rafter Cut Feature": [[875, "jack-rafter-cut-feature"]], "Double Cut Feature": [[875, "double-cut-feature"]], "Drilling Feature": [[875, "drilling-feature"]], "Installation Guide": [[876, "installation-guide"]], "Rhino 8 Installation": [[876, "rhino-8-installation"]], "Rhino 7 Installation": [[876, "rhino-7-installation"]], "Troubleshooting": [[876, "troubleshooting"]], "Joint Rules": [[877, "joint-rules"]], "Joint Rules Components": [[877, "joint-rules-components"]], "Default Joint Rules": [[877, "default-joint-rules"]], "Topological Joint Rules": [[877, "topological-joint-rules"]], "Category Joint Rules": [[877, "category-joint-rules"]], "Direct Joint Rules": [[877, "direct-joint-rules"]], "Surface Model Joint Override": [[877, "surface-model-joint-override"]], "Joint Types": [[877, "joint-types"]], "L-Butt": [[877, "l-butt"]], "L-Lap": [[877, "l-lap"]], "L-Miter": [[877, "l-miter"]], "French Ridge Lap": [[877, "french-ridge-lap"]], "Tenon and Mortise": [[877, "tenon-and-mortise"], [877, "id1"]], "T-Butt": [[877, "t-butt"]], "T-Lap": [[877, "t-lap"]], "T-Step": [[877, "t-step"]], "T-Birdsmouth": [[877, "t-birdsmouth"]], "T-Dovetail": [[877, "t-dovetail"]], "X-Lap": [[877, "x-lap"]], "Summary Table": [[877, "summary-table"]], "Model": [[878, "model"]], "Show": [[879, "show"]], "Show Beam Face Index": [[879, "show-beam-face-index"]], "Show Beam Index": [[879, "show-beam-index"]], "Show Surface Model Beam Types": [[879, "show-surface-model-beam-types"]], "Show Feature Errors": [[879, "show-feature-errors"]], "Show Joining Errors": [[879, "show-joining-errors"]], "Show Joint Types": [[879, "show-joint-types"]], "Show Topology Types": [[879, "show-topology-types"]], "Utils": [[880, "utils"]], "Bake with BoxMap": [[880, "bake-with-boxmap"]], "Workflow": [[881, "workflow"]]}, "indexentries": {"ballnodejoint (class in compas_timber.connections)": [[10, "compas_timber.connections.BallNodeJoint"]], "tostring() (compas_timber.connections.ballnodejoint method)": [[11, "compas_timber.connections.BallNodeJoint.ToString"]], "add_extensions() (compas_timber.connections.ballnodejoint method)": [[12, "compas_timber.connections.BallNodeJoint.add_extensions"]], "add_features() (compas_timber.connections.ballnodejoint method)": [[13, "compas_timber.connections.BallNodeJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ballnodejoint method)": [[14, "compas_timber.connections.BallNodeJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ballnodejoint method)": [[15, "compas_timber.connections.BallNodeJoint.copy"]], "create() (compas_timber.connections.ballnodejoint class method)": [[16, "compas_timber.connections.BallNodeJoint.create"]], "element_count_complies() (compas_timber.connections.ballnodejoint class method)": [[17, "compas_timber.connections.BallNodeJoint.element_count_complies"]], "from_json() (compas_timber.connections.ballnodejoint class method)": [[18, "compas_timber.connections.BallNodeJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ballnodejoint class method)": [[19, "compas_timber.connections.BallNodeJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.ballnodejoint method)": [[20, "compas_timber.connections.BallNodeJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ballnodejoint method)": [[21, "compas_timber.connections.BallNodeJoint.sha256"]], "to_json() (compas_timber.connections.ballnodejoint method)": [[22, "compas_timber.connections.BallNodeJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ballnodejoint method)": [[23, "compas_timber.connections.BallNodeJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ballnodejoint class method)": [[24, "compas_timber.connections.BallNodeJoint.validate_data"]], "beamgroupanalyzer (class in compas_timber.connections)": [[25, "compas_timber.connections.BeamGroupAnalyzer"]], "find() (compas_timber.connections.beamgroupanalyzer method)": [[26, "compas_timber.connections.BeamGroupAnalyzer.find"]], "cluster (class in compas_timber.connections)": [[27, "compas_timber.connections.Cluster"]], "compositeanalyzer (class in compas_timber.connections)": [[28, "compas_timber.connections.CompositeAnalyzer"]], "find() (compas_timber.connections.compositeanalyzer method)": [[29, "compas_timber.connections.CompositeAnalyzer.find"]], "from_model() (compas_timber.connections.compositeanalyzer class method)": [[30, "compas_timber.connections.CompositeAnalyzer.from_model"]], "connectionsolver (class in compas_timber.connections)": [[31, "compas_timber.connections.ConnectionSolver"]], "find_intersecting_pairs() (compas_timber.connections.connectionsolver class method)": [[32, "compas_timber.connections.ConnectionSolver.find_intersecting_pairs"]], "find_topology() (compas_timber.connections.connectionsolver method)": [[33, "compas_timber.connections.ConnectionSolver.find_topology"]], "find_wall_wall_topology() (compas_timber.connections.connectionsolver method)": [[34, "compas_timber.connections.ConnectionSolver.find_wall_wall_topology"]], "genericjoint (class in compas_timber.connections)": [[35, "compas_timber.connections.GenericJoint"]], "tostring() (compas_timber.connections.genericjoint method)": [[36, "compas_timber.connections.GenericJoint.ToString"]], "add_extensions() (compas_timber.connections.genericjoint method)": [[37, "compas_timber.connections.GenericJoint.add_extensions"]], "add_features() (compas_timber.connections.genericjoint method)": [[38, "compas_timber.connections.GenericJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.genericjoint method)": [[39, "compas_timber.connections.GenericJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.genericjoint method)": [[40, "compas_timber.connections.GenericJoint.copy"]], "create() (compas_timber.connections.genericjoint class method)": [[41, "compas_timber.connections.GenericJoint.create"]], "element_count_complies() (compas_timber.connections.genericjoint class method)": [[42, "compas_timber.connections.GenericJoint.element_count_complies"]], "from_json() (compas_timber.connections.genericjoint class method)": [[43, "compas_timber.connections.GenericJoint.from_json"]], "from_jsonstring() (compas_timber.connections.genericjoint class method)": [[44, "compas_timber.connections.GenericJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.genericjoint method)": [[45, "compas_timber.connections.GenericJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.genericjoint method)": [[46, "compas_timber.connections.GenericJoint.sha256"]], "to_json() (compas_timber.connections.genericjoint method)": [[47, "compas_timber.connections.GenericJoint.to_json"]], "to_jsonstring() (compas_timber.connections.genericjoint method)": [[48, "compas_timber.connections.GenericJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.genericjoint class method)": [[49, "compas_timber.connections.GenericJoint.validate_data"]], "joint (class in compas_timber.connections)": [[50, "compas_timber.connections.Joint"]], "tostring() (compas_timber.connections.joint method)": [[51, "compas_timber.connections.Joint.ToString"]], "add_extensions() (compas_timber.connections.joint method)": [[52, "compas_timber.connections.Joint.add_extensions"]], "add_features() (compas_timber.connections.joint method)": [[53, "compas_timber.connections.Joint.add_features"]], "check_elements_compatibility() (compas_timber.connections.joint method)": [[54, "compas_timber.connections.Joint.check_elements_compatibility"]], "copy() (compas_timber.connections.joint method)": [[55, "compas_timber.connections.Joint.copy"]], "create() (compas_timber.connections.joint class method)": [[56, "compas_timber.connections.Joint.create"]], "element_count_complies() (compas_timber.connections.joint class method)": [[57, "compas_timber.connections.Joint.element_count_complies"]], "from_json() (compas_timber.connections.joint class method)": [[58, "compas_timber.connections.Joint.from_json"]], "from_jsonstring() (compas_timber.connections.joint class method)": [[59, "compas_timber.connections.Joint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.joint method)": [[60, "compas_timber.connections.Joint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.joint method)": [[61, "compas_timber.connections.Joint.sha256"]], "to_json() (compas_timber.connections.joint method)": [[62, "compas_timber.connections.Joint.to_json"]], "to_jsonstring() (compas_timber.connections.joint method)": [[63, "compas_timber.connections.Joint.to_jsonstring"]], "validate_data() (compas_timber.connections.joint class method)": [[64, "compas_timber.connections.Joint.validate_data"]], "jointtopology (class in compas_timber.connections)": [[65, "compas_timber.connections.JointTopology"]], "get_name() (compas_timber.connections.jointtopology class method)": [[66, "compas_timber.connections.JointTopology.get_name"]], "lbuttjoint (class in compas_timber.connections)": [[67, "compas_timber.connections.LButtJoint"]], "tostring() (compas_timber.connections.lbuttjoint method)": [[68, "compas_timber.connections.LButtJoint.ToString"]], "add_extensions() (compas_timber.connections.lbuttjoint method)": [[69, "compas_timber.connections.LButtJoint.add_extensions"]], "add_features() (compas_timber.connections.lbuttjoint method)": [[70, "compas_timber.connections.LButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lbuttjoint method)": [[71, "compas_timber.connections.LButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lbuttjoint method)": [[72, "compas_timber.connections.LButtJoint.copy"]], "create() (compas_timber.connections.lbuttjoint class method)": [[73, "compas_timber.connections.LButtJoint.create"]], "element_count_complies() (compas_timber.connections.lbuttjoint class method)": [[74, "compas_timber.connections.LButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.lbuttjoint class method)": [[75, "compas_timber.connections.LButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lbuttjoint class method)": [[76, "compas_timber.connections.LButtJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.lbuttjoint method)": [[77, "compas_timber.connections.LButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lbuttjoint method)": [[78, "compas_timber.connections.LButtJoint.sha256"]], "to_json() (compas_timber.connections.lbuttjoint method)": [[79, "compas_timber.connections.LButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lbuttjoint method)": [[80, "compas_timber.connections.LButtJoint.to_jsonstring"]], "update_beam_roles() (compas_timber.connections.lbuttjoint method)": [[81, "compas_timber.connections.LButtJoint.update_beam_roles"]], "validate_data() (compas_timber.connections.lbuttjoint class method)": [[82, "compas_timber.connections.LButtJoint.validate_data"]], "lfrenchridgelapjoint (class in compas_timber.connections)": [[83, "compas_timber.connections.LFrenchRidgeLapJoint"]], "tostring() (compas_timber.connections.lfrenchridgelapjoint method)": [[84, "compas_timber.connections.LFrenchRidgeLapJoint.ToString"]], "add_extensions() (compas_timber.connections.lfrenchridgelapjoint method)": [[85, "compas_timber.connections.LFrenchRidgeLapJoint.add_extensions"]], "add_features() (compas_timber.connections.lfrenchridgelapjoint method)": [[86, "compas_timber.connections.LFrenchRidgeLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lfrenchridgelapjoint method)": [[87, "compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lfrenchridgelapjoint method)": [[88, "compas_timber.connections.LFrenchRidgeLapJoint.copy"]], "create() (compas_timber.connections.lfrenchridgelapjoint class method)": [[89, "compas_timber.connections.LFrenchRidgeLapJoint.create"]], "element_count_complies() (compas_timber.connections.lfrenchridgelapjoint class method)": [[90, "compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lfrenchridgelapjoint class method)": [[91, "compas_timber.connections.LFrenchRidgeLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lfrenchridgelapjoint class method)": [[92, "compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.lfrenchridgelapjoint method)": [[93, "compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lfrenchridgelapjoint method)": [[94, "compas_timber.connections.LFrenchRidgeLapJoint.sha256"]], "to_json() (compas_timber.connections.lfrenchridgelapjoint method)": [[95, "compas_timber.connections.LFrenchRidgeLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lfrenchridgelapjoint method)": [[96, "compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lfrenchridgelapjoint class method)": [[97, "compas_timber.connections.LFrenchRidgeLapJoint.validate_data"]], "llapjoint (class in compas_timber.connections)": [[98, "compas_timber.connections.LLapJoint"]], "tostring() (compas_timber.connections.llapjoint method)": [[99, "compas_timber.connections.LLapJoint.ToString"]], "add_extensions() (compas_timber.connections.llapjoint method)": [[100, "compas_timber.connections.LLapJoint.add_extensions"]], "add_features() (compas_timber.connections.llapjoint method)": [[101, "compas_timber.connections.LLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.llapjoint method)": [[102, "compas_timber.connections.LLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.llapjoint method)": [[103, "compas_timber.connections.LLapJoint.copy"]], "create() (compas_timber.connections.llapjoint class method)": [[104, "compas_timber.connections.LLapJoint.create"]], "element_count_complies() (compas_timber.connections.llapjoint class method)": [[105, "compas_timber.connections.LLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.llapjoint class method)": [[106, "compas_timber.connections.LLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.llapjoint class method)": [[107, "compas_timber.connections.LLapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.llapjoint method)": [[108, "compas_timber.connections.LLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.llapjoint method)": [[109, "compas_timber.connections.LLapJoint.sha256"]], "to_json() (compas_timber.connections.llapjoint method)": [[110, "compas_timber.connections.LLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.llapjoint method)": [[111, "compas_timber.connections.LLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.llapjoint class method)": [[112, "compas_timber.connections.LLapJoint.validate_data"]], "lmiterjoint (class in compas_timber.connections)": [[113, "compas_timber.connections.LMiterJoint"]], "tostring() (compas_timber.connections.lmiterjoint method)": [[114, "compas_timber.connections.LMiterJoint.ToString"]], "add_extensions() (compas_timber.connections.lmiterjoint method)": [[115, "compas_timber.connections.LMiterJoint.add_extensions"]], "add_features() (compas_timber.connections.lmiterjoint method)": [[116, "compas_timber.connections.LMiterJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lmiterjoint method)": [[117, "compas_timber.connections.LMiterJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lmiterjoint method)": [[118, "compas_timber.connections.LMiterJoint.copy"]], "create() (compas_timber.connections.lmiterjoint class method)": [[119, "compas_timber.connections.LMiterJoint.create"]], "element_count_complies() (compas_timber.connections.lmiterjoint class method)": [[120, "compas_timber.connections.LMiterJoint.element_count_complies"]], "from_json() (compas_timber.connections.lmiterjoint class method)": [[121, "compas_timber.connections.LMiterJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lmiterjoint class method)": [[122, "compas_timber.connections.LMiterJoint.from_jsonstring"]], "get_cutoff_plane() (compas_timber.connections.lmiterjoint method)": [[123, "compas_timber.connections.LMiterJoint.get_cutoff_plane"]], "get_cutting_planes() (compas_timber.connections.lmiterjoint method)": [[124, "compas_timber.connections.LMiterJoint.get_cutting_planes"]], "restore_beams_from_keys() (compas_timber.connections.lmiterjoint method)": [[125, "compas_timber.connections.LMiterJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lmiterjoint method)": [[126, "compas_timber.connections.LMiterJoint.sha256"]], "to_json() (compas_timber.connections.lmiterjoint method)": [[127, "compas_timber.connections.LMiterJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lmiterjoint method)": [[128, "compas_timber.connections.LMiterJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lmiterjoint class method)": [[129, "compas_timber.connections.LMiterJoint.validate_data"]], "lapjoint (class in compas_timber.connections)": [[130, "compas_timber.connections.LapJoint"]], "tostring() (compas_timber.connections.lapjoint method)": [[131, "compas_timber.connections.LapJoint.ToString"]], "add_extensions() (compas_timber.connections.lapjoint method)": [[132, "compas_timber.connections.LapJoint.add_extensions"]], "add_features() (compas_timber.connections.lapjoint method)": [[133, "compas_timber.connections.LapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lapjoint method)": [[134, "compas_timber.connections.LapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lapjoint method)": [[135, "compas_timber.connections.LapJoint.copy"]], "create() (compas_timber.connections.lapjoint class method)": [[136, "compas_timber.connections.LapJoint.create"]], "element_count_complies() (compas_timber.connections.lapjoint class method)": [[137, "compas_timber.connections.LapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lapjoint class method)": [[138, "compas_timber.connections.LapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lapjoint class method)": [[139, "compas_timber.connections.LapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.lapjoint method)": [[140, "compas_timber.connections.LapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lapjoint method)": [[141, "compas_timber.connections.LapJoint.sha256"]], "to_json() (compas_timber.connections.lapjoint method)": [[142, "compas_timber.connections.LapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lapjoint method)": [[143, "compas_timber.connections.LapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lapjoint class method)": [[144, "compas_timber.connections.LapJoint.validate_data"]], "nbeamkdtreeanalyzer (class in compas_timber.connections)": [[145, "compas_timber.connections.NBeamKDTreeAnalyzer"]], "find() (compas_timber.connections.nbeamkdtreeanalyzer method)": [[146, "compas_timber.connections.NBeamKDTreeAnalyzer.find"]], "quadanalyzer() (in module compas_timber.connections)": [[147, "compas_timber.connections.QuadAnalyzer"]], "tbirdsmouthjoint (class in compas_timber.connections)": [[148, "compas_timber.connections.TBirdsmouthJoint"]], "tostring() (compas_timber.connections.tbirdsmouthjoint method)": [[149, "compas_timber.connections.TBirdsmouthJoint.ToString"]], "add_extensions() (compas_timber.connections.tbirdsmouthjoint method)": [[150, "compas_timber.connections.TBirdsmouthJoint.add_extensions"]], "add_features() (compas_timber.connections.tbirdsmouthjoint method)": [[151, "compas_timber.connections.TBirdsmouthJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbirdsmouthjoint method)": [[152, "compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbirdsmouthjoint method)": [[153, "compas_timber.connections.TBirdsmouthJoint.copy"]], "create() (compas_timber.connections.tbirdsmouthjoint class method)": [[154, "compas_timber.connections.TBirdsmouthJoint.create"]], "element_count_complies() (compas_timber.connections.tbirdsmouthjoint class method)": [[155, "compas_timber.connections.TBirdsmouthJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbirdsmouthjoint class method)": [[156, "compas_timber.connections.TBirdsmouthJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbirdsmouthjoint class method)": [[157, "compas_timber.connections.TBirdsmouthJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tbirdsmouthjoint method)": [[158, "compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbirdsmouthjoint method)": [[159, "compas_timber.connections.TBirdsmouthJoint.sha256"]], "to_json() (compas_timber.connections.tbirdsmouthjoint method)": [[160, "compas_timber.connections.TBirdsmouthJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbirdsmouthjoint method)": [[161, "compas_timber.connections.TBirdsmouthJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbirdsmouthjoint class method)": [[162, "compas_timber.connections.TBirdsmouthJoint.validate_data"]], "tbuttjoint (class in compas_timber.connections)": [[163, "compas_timber.connections.TButtJoint"]], "tostring() (compas_timber.connections.tbuttjoint method)": [[164, "compas_timber.connections.TButtJoint.ToString"]], "add_extensions() (compas_timber.connections.tbuttjoint method)": [[165, "compas_timber.connections.TButtJoint.add_extensions"]], "add_features() (compas_timber.connections.tbuttjoint method)": [[166, "compas_timber.connections.TButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbuttjoint method)": [[167, "compas_timber.connections.TButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbuttjoint method)": [[168, "compas_timber.connections.TButtJoint.copy"]], "create() (compas_timber.connections.tbuttjoint class method)": [[169, "compas_timber.connections.TButtJoint.create"]], "element_count_complies() (compas_timber.connections.tbuttjoint class method)": [[170, "compas_timber.connections.TButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbuttjoint class method)": [[171, "compas_timber.connections.TButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbuttjoint class method)": [[172, "compas_timber.connections.TButtJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tbuttjoint method)": [[173, "compas_timber.connections.TButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbuttjoint method)": [[174, "compas_timber.connections.TButtJoint.sha256"]], "to_json() (compas_timber.connections.tbuttjoint method)": [[175, "compas_timber.connections.TButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbuttjoint method)": [[176, "compas_timber.connections.TButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbuttjoint class method)": [[177, "compas_timber.connections.TButtJoint.validate_data"]], "tdovetailjoint (class in compas_timber.connections)": [[178, "compas_timber.connections.TDovetailJoint"]], "tostring() (compas_timber.connections.tdovetailjoint method)": [[179, "compas_timber.connections.TDovetailJoint.ToString"]], "add_extensions() (compas_timber.connections.tdovetailjoint method)": [[180, "compas_timber.connections.TDovetailJoint.add_extensions"]], "add_features() (compas_timber.connections.tdovetailjoint method)": [[181, "compas_timber.connections.TDovetailJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tdovetailjoint method)": [[182, "compas_timber.connections.TDovetailJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tdovetailjoint method)": [[183, "compas_timber.connections.TDovetailJoint.copy"]], "create() (compas_timber.connections.tdovetailjoint class method)": [[184, "compas_timber.connections.TDovetailJoint.create"]], "define_dovetail_tool() (compas_timber.connections.tdovetailjoint method)": [[185, "compas_timber.connections.TDovetailJoint.define_dovetail_tool"]], "element_count_complies() (compas_timber.connections.tdovetailjoint class method)": [[186, "compas_timber.connections.TDovetailJoint.element_count_complies"]], "from_json() (compas_timber.connections.tdovetailjoint class method)": [[187, "compas_timber.connections.TDovetailJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tdovetailjoint class method)": [[188, "compas_timber.connections.TDovetailJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tdovetailjoint method)": [[189, "compas_timber.connections.TDovetailJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tdovetailjoint method)": [[190, "compas_timber.connections.TDovetailJoint.sha256"]], "to_json() (compas_timber.connections.tdovetailjoint method)": [[191, "compas_timber.connections.TDovetailJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tdovetailjoint method)": [[192, "compas_timber.connections.TDovetailJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tdovetailjoint class method)": [[193, "compas_timber.connections.TDovetailJoint.validate_data"]], "tlapjoint (class in compas_timber.connections)": [[194, "compas_timber.connections.TLapJoint"]], "tostring() (compas_timber.connections.tlapjoint method)": [[195, "compas_timber.connections.TLapJoint.ToString"]], "add_extensions() (compas_timber.connections.tlapjoint method)": [[196, "compas_timber.connections.TLapJoint.add_extensions"]], "add_features() (compas_timber.connections.tlapjoint method)": [[197, "compas_timber.connections.TLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tlapjoint method)": [[198, "compas_timber.connections.TLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tlapjoint method)": [[199, "compas_timber.connections.TLapJoint.copy"]], "create() (compas_timber.connections.tlapjoint class method)": [[200, "compas_timber.connections.TLapJoint.create"]], "element_count_complies() (compas_timber.connections.tlapjoint class method)": [[201, "compas_timber.connections.TLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.tlapjoint class method)": [[202, "compas_timber.connections.TLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tlapjoint class method)": [[203, "compas_timber.connections.TLapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tlapjoint method)": [[204, "compas_timber.connections.TLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tlapjoint method)": [[205, "compas_timber.connections.TLapJoint.sha256"]], "to_json() (compas_timber.connections.tlapjoint method)": [[206, "compas_timber.connections.TLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tlapjoint method)": [[207, "compas_timber.connections.TLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tlapjoint class method)": [[208, "compas_timber.connections.TLapJoint.validate_data"]], "tstepjoint (class in compas_timber.connections)": [[209, "compas_timber.connections.TStepJoint"]], "tostring() (compas_timber.connections.tstepjoint method)": [[210, "compas_timber.connections.TStepJoint.ToString"]], "add_extensions() (compas_timber.connections.tstepjoint method)": [[211, "compas_timber.connections.TStepJoint.add_extensions"]], "add_features() (compas_timber.connections.tstepjoint method)": [[212, "compas_timber.connections.TStepJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tstepjoint method)": [[213, "compas_timber.connections.TStepJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tstepjoint method)": [[214, "compas_timber.connections.TStepJoint.copy"]], "create() (compas_timber.connections.tstepjoint class method)": [[215, "compas_timber.connections.TStepJoint.create"]], "element_count_complies() (compas_timber.connections.tstepjoint class method)": [[216, "compas_timber.connections.TStepJoint.element_count_complies"]], "from_json() (compas_timber.connections.tstepjoint class method)": [[217, "compas_timber.connections.TStepJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tstepjoint class method)": [[218, "compas_timber.connections.TStepJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tstepjoint method)": [[219, "compas_timber.connections.TStepJoint.restore_beams_from_keys"]], "set_step_depths() (compas_timber.connections.tstepjoint method)": [[220, "compas_timber.connections.TStepJoint.set_step_depths"]], "sha256() (compas_timber.connections.tstepjoint method)": [[221, "compas_timber.connections.TStepJoint.sha256"]], "to_json() (compas_timber.connections.tstepjoint method)": [[222, "compas_timber.connections.TStepJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tstepjoint method)": [[223, "compas_timber.connections.TStepJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tstepjoint class method)": [[224, "compas_timber.connections.TStepJoint.validate_data"]], "tenonmortisejoint (class in compas_timber.connections)": [[225, "compas_timber.connections.TenonMortiseJoint"]], "tostring() (compas_timber.connections.tenonmortisejoint method)": [[226, "compas_timber.connections.TenonMortiseJoint.ToString"]], "add_extensions() (compas_timber.connections.tenonmortisejoint method)": [[227, "compas_timber.connections.TenonMortiseJoint.add_extensions"]], "add_features() (compas_timber.connections.tenonmortisejoint method)": [[228, "compas_timber.connections.TenonMortiseJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tenonmortisejoint method)": [[229, "compas_timber.connections.TenonMortiseJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tenonmortisejoint method)": [[230, "compas_timber.connections.TenonMortiseJoint.copy"]], "create() (compas_timber.connections.tenonmortisejoint class method)": [[231, "compas_timber.connections.TenonMortiseJoint.create"]], "element_count_complies() (compas_timber.connections.tenonmortisejoint class method)": [[232, "compas_timber.connections.TenonMortiseJoint.element_count_complies"]], "from_json() (compas_timber.connections.tenonmortisejoint class method)": [[233, "compas_timber.connections.TenonMortiseJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tenonmortisejoint class method)": [[234, "compas_timber.connections.TenonMortiseJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.tenonmortisejoint method)": [[235, "compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys"]], "set_default_values() (compas_timber.connections.tenonmortisejoint method)": [[236, "compas_timber.connections.TenonMortiseJoint.set_default_values"]], "sha256() (compas_timber.connections.tenonmortisejoint method)": [[237, "compas_timber.connections.TenonMortiseJoint.sha256"]], "to_json() (compas_timber.connections.tenonmortisejoint method)": [[238, "compas_timber.connections.TenonMortiseJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tenonmortisejoint method)": [[239, "compas_timber.connections.TenonMortiseJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tenonmortisejoint class method)": [[240, "compas_timber.connections.TenonMortiseJoint.validate_data"]], "tripletanalyzer() (in module compas_timber.connections)": [[241, "compas_timber.connections.TripletAnalyzer"]], "xlapjoint (class in compas_timber.connections)": [[242, "compas_timber.connections.XLapJoint"]], "tostring() (compas_timber.connections.xlapjoint method)": [[243, "compas_timber.connections.XLapJoint.ToString"]], "add_extensions() (compas_timber.connections.xlapjoint method)": [[244, "compas_timber.connections.XLapJoint.add_extensions"]], "add_features() (compas_timber.connections.xlapjoint method)": [[245, "compas_timber.connections.XLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xlapjoint method)": [[246, "compas_timber.connections.XLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xlapjoint method)": [[247, "compas_timber.connections.XLapJoint.copy"]], "create() (compas_timber.connections.xlapjoint class method)": [[248, "compas_timber.connections.XLapJoint.create"]], "element_count_complies() (compas_timber.connections.xlapjoint class method)": [[249, "compas_timber.connections.XLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.xlapjoint class method)": [[250, "compas_timber.connections.XLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xlapjoint class method)": [[251, "compas_timber.connections.XLapJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.xlapjoint method)": [[252, "compas_timber.connections.XLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xlapjoint method)": [[253, "compas_timber.connections.XLapJoint.sha256"]], "to_json() (compas_timber.connections.xlapjoint method)": [[254, "compas_timber.connections.XLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xlapjoint method)": [[255, "compas_timber.connections.XLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xlapjoint class method)": [[256, "compas_timber.connections.XLapJoint.validate_data"]], "xnotchjoint (class in compas_timber.connections)": [[257, "compas_timber.connections.XNotchJoint"]], "tostring() (compas_timber.connections.xnotchjoint method)": [[258, "compas_timber.connections.XNotchJoint.ToString"]], "add_extensions() (compas_timber.connections.xnotchjoint method)": [[259, "compas_timber.connections.XNotchJoint.add_extensions"]], "add_features() (compas_timber.connections.xnotchjoint method)": [[260, "compas_timber.connections.XNotchJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xnotchjoint method)": [[261, "compas_timber.connections.XNotchJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xnotchjoint method)": [[262, "compas_timber.connections.XNotchJoint.copy"]], "create() (compas_timber.connections.xnotchjoint class method)": [[263, "compas_timber.connections.XNotchJoint.create"]], "element_count_complies() (compas_timber.connections.xnotchjoint class method)": [[264, "compas_timber.connections.XNotchJoint.element_count_complies"]], "from_json() (compas_timber.connections.xnotchjoint class method)": [[265, "compas_timber.connections.XNotchJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xnotchjoint class method)": [[266, "compas_timber.connections.XNotchJoint.from_jsonstring"]], "restore_beams_from_keys() (compas_timber.connections.xnotchjoint method)": [[267, "compas_timber.connections.XNotchJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xnotchjoint method)": [[268, "compas_timber.connections.XNotchJoint.sha256"]], "to_json() (compas_timber.connections.xnotchjoint method)": [[269, "compas_timber.connections.XNotchJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xnotchjoint method)": [[270, "compas_timber.connections.XNotchJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xnotchjoint class method)": [[271, "compas_timber.connections.XNotchJoint.validate_data"]], "ybuttjoint (class in compas_timber.connections)": [[272, "compas_timber.connections.YButtJoint"]], "tostring() (compas_timber.connections.ybuttjoint method)": [[273, "compas_timber.connections.YButtJoint.ToString"]], "add_extensions() (compas_timber.connections.ybuttjoint method)": [[274, "compas_timber.connections.YButtJoint.add_extensions"]], "add_features() (compas_timber.connections.ybuttjoint method)": [[275, "compas_timber.connections.YButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ybuttjoint method)": [[276, "compas_timber.connections.YButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ybuttjoint method)": [[277, "compas_timber.connections.YButtJoint.copy"]], "create() (compas_timber.connections.ybuttjoint class method)": [[278, "compas_timber.connections.YButtJoint.create"]], "cross_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[279, "compas_timber.connections.YButtJoint.cross_beam_ref_side_index"]], "element_count_complies() (compas_timber.connections.ybuttjoint class method)": [[280, "compas_timber.connections.YButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.ybuttjoint class method)": [[281, "compas_timber.connections.YButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ybuttjoint class method)": [[282, "compas_timber.connections.YButtJoint.from_jsonstring"]], "get_miter_planes() (compas_timber.connections.ybuttjoint method)": [[283, "compas_timber.connections.YButtJoint.get_miter_planes"]], "main_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[284, "compas_timber.connections.YButtJoint.main_beam_ref_side_index"]], "restore_beams_from_keys() (compas_timber.connections.ybuttjoint method)": [[285, "compas_timber.connections.YButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ybuttjoint method)": [[286, "compas_timber.connections.YButtJoint.sha256"]], "to_json() (compas_timber.connections.ybuttjoint method)": [[287, "compas_timber.connections.YButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ybuttjoint method)": [[288, "compas_timber.connections.YButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ybuttjoint class method)": [[289, "compas_timber.connections.YButtJoint.validate_data"]], "find_neighboring_elements() (in module compas_timber.connections)": [[290, "compas_timber.connections.find_neighboring_elements"]], "categoryrule (class in compas_timber.design)": [[291, "compas_timber.design.CategoryRule"]], "tostring() (compas_timber.design.categoryrule method)": [[292, "compas_timber.design.CategoryRule.ToString"]], "comply() (compas_timber.design.categoryrule method)": [[293, "compas_timber.design.CategoryRule.comply"]], "get_category_rules() (compas_timber.design.categoryrule static method)": [[294, "compas_timber.design.CategoryRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.categoryrule static method)": [[295, "compas_timber.design.CategoryRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.categoryrule static method)": [[296, "compas_timber.design.CategoryRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.categoryrule static method)": [[297, "compas_timber.design.CategoryRule.joints_from_beams_and_rules"]], "reorder() (compas_timber.design.categoryrule method)": [[298, "compas_timber.design.CategoryRule.reorder"]], "debuginfomation (class in compas_timber.design)": [[299, "compas_timber.design.DebugInfomation"]], "tostring() (compas_timber.design.debuginfomation method)": [[300, "compas_timber.design.DebugInfomation.ToString"]], "add_fastener_error() (compas_timber.design.debuginfomation method)": [[301, "compas_timber.design.DebugInfomation.add_fastener_error"]], "add_feature_error() (compas_timber.design.debuginfomation method)": [[302, "compas_timber.design.DebugInfomation.add_feature_error"]], "add_joint_error() (compas_timber.design.debuginfomation method)": [[303, "compas_timber.design.DebugInfomation.add_joint_error"]], "directrule (class in compas_timber.design)": [[304, "compas_timber.design.DirectRule"]], "tostring() (compas_timber.design.directrule method)": [[305, "compas_timber.design.DirectRule.ToString"]], "comply() (compas_timber.design.directrule method)": [[306, "compas_timber.design.DirectRule.comply"]], "contains() (compas_timber.design.directrule method)": [[307, "compas_timber.design.DirectRule.contains"]], "get_category_rules() (compas_timber.design.directrule static method)": [[308, "compas_timber.design.DirectRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.directrule static method)": [[309, "compas_timber.design.DirectRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.directrule static method)": [[310, "compas_timber.design.DirectRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.directrule static method)": [[311, "compas_timber.design.DirectRule.joints_from_beams_and_rules"]], "featuredefinition (class in compas_timber.design)": [[312, "compas_timber.design.FeatureDefinition"]], "tostring() (compas_timber.design.featuredefinition method)": [[313, "compas_timber.design.FeatureDefinition.ToString"]], "jointdefinition (class in compas_timber.design)": [[314, "compas_timber.design.JointDefinition"]], "tostring() (compas_timber.design.jointdefinition method)": [[315, "compas_timber.design.JointDefinition.ToString"]], "is_identical() (compas_timber.design.jointdefinition method)": [[316, "compas_timber.design.JointDefinition.is_identical"]], "match() (compas_timber.design.jointdefinition method)": [[317, "compas_timber.design.JointDefinition.match"]], "jointrule (class in compas_timber.design)": [[318, "compas_timber.design.JointRule"]], "comply() (compas_timber.design.jointrule method)": [[319, "compas_timber.design.JointRule.comply"]], "get_category_rules() (compas_timber.design.jointrule static method)": [[320, "compas_timber.design.JointRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.jointrule static method)": [[321, "compas_timber.design.JointRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.jointrule static method)": [[322, "compas_timber.design.JointRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.jointrule static method)": [[323, "compas_timber.design.JointRule.joints_from_beams_and_rules"]], "surfacemodel (class in compas_timber.design)": [[324, "compas_timber.design.SurfaceModel"]], "beam_category_names() (compas_timber.design.surfacemodel class method)": [[325, "compas_timber.design.SurfaceModel.beam_category_names"]], "create_model() (compas_timber.design.surfacemodel method)": [[326, "compas_timber.design.SurfaceModel.create_model"]], "cull_overlaps() (compas_timber.design.surfacemodel method)": [[327, "compas_timber.design.SurfaceModel.cull_overlaps"]], "distance_between_elements() (compas_timber.design.surfacemodel method)": [[328, "compas_timber.design.SurfaceModel.distance_between_elements"]], "generate_frame() (compas_timber.design.surfacemodel method)": [[329, "compas_timber.design.SurfaceModel.generate_frame"]], "generate_perimeter_beams() (compas_timber.design.surfacemodel method)": [[330, "compas_timber.design.SurfaceModel.generate_perimeter_beams"]], "generate_plates() (compas_timber.design.surfacemodel method)": [[331, "compas_timber.design.SurfaceModel.generate_plates"]], "generate_stud_lines() (compas_timber.design.surfacemodel method)": [[332, "compas_timber.design.SurfaceModel.generate_stud_lines"]], "generate_studs() (compas_timber.design.surfacemodel method)": [[333, "compas_timber.design.SurfaceModel.generate_studs"]], "generate_windows() (compas_timber.design.surfacemodel method)": [[334, "compas_timber.design.SurfaceModel.generate_windows"]], "get_beam_intersections() (compas_timber.design.surfacemodel method)": [[335, "compas_timber.design.SurfaceModel.get_beam_intersections"]], "get_interior_segment_indices() (compas_timber.design.surfacemodel method)": [[336, "compas_timber.design.SurfaceModel.get_interior_segment_indices"]], "offset_elements() (compas_timber.design.surfacemodel method)": [[337, "compas_timber.design.SurfaceModel.offset_elements"]], "parse_loops() (compas_timber.design.surfacemodel method)": [[338, "compas_timber.design.SurfaceModel.parse_loops"]], "trim_jack_studs() (compas_timber.design.surfacemodel method)": [[339, "compas_timber.design.SurfaceModel.trim_jack_studs"]], "trim_king_studs() (compas_timber.design.surfacemodel method)": [[340, "compas_timber.design.SurfaceModel.trim_king_studs"]], "trim_studs() (compas_timber.design.surfacemodel method)": [[341, "compas_timber.design.SurfaceModel.trim_studs"]], "topologyrule (class in compas_timber.design)": [[342, "compas_timber.design.TopologyRule"]], "tostring() (compas_timber.design.topologyrule method)": [[343, "compas_timber.design.TopologyRule.ToString"]], "comply() (compas_timber.design.topologyrule method)": [[344, "compas_timber.design.TopologyRule.comply"]], "get_category_rules() (compas_timber.design.topologyrule static method)": [[345, "compas_timber.design.TopologyRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.topologyrule static method)": [[346, "compas_timber.design.TopologyRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.topologyrule static method)": [[347, "compas_timber.design.TopologyRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.topologyrule static method)": [[348, "compas_timber.design.TopologyRule.joints_from_beams_and_rules"]], "guess_joint_topology_2beams() (in module compas_timber.design)": [[349, "compas_timber.design.guess_joint_topology_2beams"]], "set_default_joints() (in module compas_timber.design)": [[350, "compas_timber.design.set_default_joints"]], "beam (class in compas_timber.elements)": [[351, "compas_timber.elements.Beam"]], "tostring() (compas_timber.elements.beam method)": [[352, "compas_timber.elements.Beam.ToString"]], "add_blank_extension() (compas_timber.elements.beam method)": [[353, "compas_timber.elements.Beam.add_blank_extension"]], "add_feature() (compas_timber.elements.beam method)": [[354, "compas_timber.elements.Beam.add_feature"]], "add_features() (compas_timber.elements.beam method)": [[355, "compas_timber.elements.Beam.add_features"]], "back_side() (compas_timber.elements.beam method)": [[356, "compas_timber.elements.Beam.back_side"]], "compute_aabb() (compas_timber.elements.beam method)": [[357, "compas_timber.elements.Beam.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.beam method)": [[358, "compas_timber.elements.Beam.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.beam method)": [[359, "compas_timber.elements.Beam.compute_geometry"]], "compute_obb() (compas_timber.elements.beam method)": [[360, "compas_timber.elements.Beam.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.beam method)": [[361, "compas_timber.elements.Beam.compute_worldtransformation"]], "copy() (compas_timber.elements.beam method)": [[362, "compas_timber.elements.Beam.copy"]], "endpoint_closest_to_point() (compas_timber.elements.beam method)": [[363, "compas_timber.elements.Beam.endpoint_closest_to_point"]], "extension_to_plane() (compas_timber.elements.beam method)": [[364, "compas_timber.elements.Beam.extension_to_plane"]], "from_centerline() (compas_timber.elements.beam class method)": [[365, "compas_timber.elements.Beam.from_centerline"]], "from_endpoints() (compas_timber.elements.beam class method)": [[366, "compas_timber.elements.Beam.from_endpoints"]], "from_json() (compas_timber.elements.beam class method)": [[367, "compas_timber.elements.Beam.from_json"]], "from_jsonstring() (compas_timber.elements.beam class method)": [[368, "compas_timber.elements.Beam.from_jsonstring"]], "front_side() (compas_timber.elements.beam method)": [[369, "compas_timber.elements.Beam.front_side"]], "get_dimensions_relative_to_side() (compas_timber.elements.beam method)": [[370, "compas_timber.elements.Beam.get_dimensions_relative_to_side"]], "opp_side() (compas_timber.elements.beam method)": [[371, "compas_timber.elements.Beam.opp_side"]], "remove_blank_extension() (compas_timber.elements.beam method)": [[372, "compas_timber.elements.Beam.remove_blank_extension"]], "remove_features() (compas_timber.elements.beam method)": [[373, "compas_timber.elements.Beam.remove_features"]], "reset() (compas_timber.elements.beam method)": [[374, "compas_timber.elements.Beam.reset"]], "sha256() (compas_timber.elements.beam method)": [[375, "compas_timber.elements.Beam.sha256"]], "side_as_surface() (compas_timber.elements.beam method)": [[376, "compas_timber.elements.Beam.side_as_surface"]], "to_json() (compas_timber.elements.beam method)": [[377, "compas_timber.elements.Beam.to_json"]], "to_jsonstring() (compas_timber.elements.beam method)": [[378, "compas_timber.elements.Beam.to_jsonstring"]], "transform() (compas_timber.elements.beam method)": [[379, "compas_timber.elements.Beam.transform"]], "transformed() (compas_timber.elements.beam method)": [[380, "compas_timber.elements.Beam.transformed"]], "validate_data() (compas_timber.elements.beam class method)": [[381, "compas_timber.elements.Beam.validate_data"]], "fastener (class in compas_timber.elements)": [[382, "compas_timber.elements.Fastener"]], "tostring() (compas_timber.elements.fastener method)": [[383, "compas_timber.elements.Fastener.ToString"]], "add_feature() (compas_timber.elements.fastener method)": [[384, "compas_timber.elements.Fastener.add_feature"]], "add_features() (compas_timber.elements.fastener method)": [[385, "compas_timber.elements.Fastener.add_features"]], "compute_aabb() (compas_timber.elements.fastener method)": [[386, "compas_timber.elements.Fastener.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.fastener method)": [[387, "compas_timber.elements.Fastener.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.fastener method)": [[388, "compas_timber.elements.Fastener.compute_geometry"]], "compute_obb() (compas_timber.elements.fastener method)": [[389, "compas_timber.elements.Fastener.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.fastener method)": [[390, "compas_timber.elements.Fastener.compute_worldtransformation"]], "copy() (compas_timber.elements.fastener method)": [[391, "compas_timber.elements.Fastener.copy"]], "from_json() (compas_timber.elements.fastener class method)": [[392, "compas_timber.elements.Fastener.from_json"]], "from_jsonstring() (compas_timber.elements.fastener class method)": [[393, "compas_timber.elements.Fastener.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.fastener method)": [[394, "compas_timber.elements.Fastener.remove_blank_extension"]], "remove_features() (compas_timber.elements.fastener method)": [[395, "compas_timber.elements.Fastener.remove_features"]], "reset() (compas_timber.elements.fastener method)": [[396, "compas_timber.elements.Fastener.reset"]], "sha256() (compas_timber.elements.fastener method)": [[397, "compas_timber.elements.Fastener.sha256"]], "to_json() (compas_timber.elements.fastener method)": [[398, "compas_timber.elements.Fastener.to_json"]], "to_jsonstring() (compas_timber.elements.fastener method)": [[399, "compas_timber.elements.Fastener.to_jsonstring"]], "transform() (compas_timber.elements.fastener method)": [[400, "compas_timber.elements.Fastener.transform"]], "transformed() (compas_timber.elements.fastener method)": [[401, "compas_timber.elements.Fastener.transformed"]], "validate_data() (compas_timber.elements.fastener class method)": [[402, "compas_timber.elements.Fastener.validate_data"]], "fastenertimberinterface (class in compas_timber.elements)": [[403, "compas_timber.elements.FastenerTimberInterface"]], "tostring() (compas_timber.elements.fastenertimberinterface method)": [[404, "compas_timber.elements.FastenerTimberInterface.ToString"]], "copy() (compas_timber.elements.fastenertimberinterface method)": [[405, "compas_timber.elements.FastenerTimberInterface.copy"]], "from_json() (compas_timber.elements.fastenertimberinterface class method)": [[406, "compas_timber.elements.FastenerTimberInterface.from_json"]], "from_jsonstring() (compas_timber.elements.fastenertimberinterface class method)": [[407, "compas_timber.elements.FastenerTimberInterface.from_jsonstring"]], "get_features() (compas_timber.elements.fastenertimberinterface method)": [[408, "compas_timber.elements.FastenerTimberInterface.get_features"]], "sha256() (compas_timber.elements.fastenertimberinterface method)": [[409, "compas_timber.elements.FastenerTimberInterface.sha256"]], "to_json() (compas_timber.elements.fastenertimberinterface method)": [[410, "compas_timber.elements.FastenerTimberInterface.to_json"]], "to_jsonstring() (compas_timber.elements.fastenertimberinterface method)": [[411, "compas_timber.elements.FastenerTimberInterface.to_jsonstring"]], "validate_data() (compas_timber.elements.fastenertimberinterface class method)": [[412, "compas_timber.elements.FastenerTimberInterface.validate_data"]], "plate (class in compas_timber.elements)": [[413, "compas_timber.elements.Plate"]], "tostring() (compas_timber.elements.plate method)": [[414, "compas_timber.elements.Plate.ToString"]], "add_feature() (compas_timber.elements.plate method)": [[415, "compas_timber.elements.Plate.add_feature"]], "add_features() (compas_timber.elements.plate method)": [[416, "compas_timber.elements.Plate.add_features"]], "add_interface() (compas_timber.elements.plate method)": [[417, "compas_timber.elements.Plate.add_interface"]], "check_outlines() (compas_timber.elements.plate method)": [[418, "compas_timber.elements.Plate.check_outlines"]], "compute_aabb() (compas_timber.elements.plate method)": [[419, "compas_timber.elements.Plate.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.plate method)": [[420, "compas_timber.elements.Plate.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.plate method)": [[421, "compas_timber.elements.Plate.compute_geometry"]], "compute_obb() (compas_timber.elements.plate method)": [[422, "compas_timber.elements.Plate.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.plate method)": [[423, "compas_timber.elements.Plate.compute_worldtransformation"]], "copy() (compas_timber.elements.plate method)": [[424, "compas_timber.elements.Plate.copy"]], "from_brep() (compas_timber.elements.plate class method)": [[425, "compas_timber.elements.Plate.from_brep"]], "from_json() (compas_timber.elements.plate class method)": [[426, "compas_timber.elements.Plate.from_json"]], "from_jsonstring() (compas_timber.elements.plate class method)": [[427, "compas_timber.elements.Plate.from_jsonstring"]], "from_outline_thickness() (compas_timber.elements.plate class method)": [[428, "compas_timber.elements.Plate.from_outline_thickness"]], "opp_side() (compas_timber.elements.plate method)": [[429, "compas_timber.elements.Plate.opp_side"]], "remove_blank_extension() (compas_timber.elements.plate method)": [[430, "compas_timber.elements.Plate.remove_blank_extension"]], "remove_features() (compas_timber.elements.plate method)": [[431, "compas_timber.elements.Plate.remove_features"]], "reset() (compas_timber.elements.plate method)": [[432, "compas_timber.elements.Plate.reset"]], "sha256() (compas_timber.elements.plate method)": [[433, "compas_timber.elements.Plate.sha256"]], "side_as_surface() (compas_timber.elements.plate method)": [[434, "compas_timber.elements.Plate.side_as_surface"]], "to_json() (compas_timber.elements.plate method)": [[435, "compas_timber.elements.Plate.to_json"]], "to_jsonstring() (compas_timber.elements.plate method)": [[436, "compas_timber.elements.Plate.to_jsonstring"]], "transform() (compas_timber.elements.plate method)": [[437, "compas_timber.elements.Plate.transform"]], "transformed() (compas_timber.elements.plate method)": [[438, "compas_timber.elements.Plate.transformed"]], "validate_data() (compas_timber.elements.plate class method)": [[439, "compas_timber.elements.Plate.validate_data"]], "timberelement (class in compas_timber.elements)": [[440, "compas_timber.elements.TimberElement"]], "tostring() (compas_timber.elements.timberelement method)": [[441, "compas_timber.elements.TimberElement.ToString"]], "add_feature() (compas_timber.elements.timberelement method)": [[442, "compas_timber.elements.TimberElement.add_feature"]], "add_features() (compas_timber.elements.timberelement method)": [[443, "compas_timber.elements.TimberElement.add_features"]], "compute_aabb() (compas_timber.elements.timberelement method)": [[444, "compas_timber.elements.TimberElement.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.timberelement method)": [[445, "compas_timber.elements.TimberElement.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.timberelement method)": [[446, "compas_timber.elements.TimberElement.compute_geometry"]], "compute_obb() (compas_timber.elements.timberelement method)": [[447, "compas_timber.elements.TimberElement.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.timberelement method)": [[448, "compas_timber.elements.TimberElement.compute_worldtransformation"]], "copy() (compas_timber.elements.timberelement method)": [[449, "compas_timber.elements.TimberElement.copy"]], "from_json() (compas_timber.elements.timberelement class method)": [[450, "compas_timber.elements.TimberElement.from_json"]], "from_jsonstring() (compas_timber.elements.timberelement class method)": [[451, "compas_timber.elements.TimberElement.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.timberelement method)": [[452, "compas_timber.elements.TimberElement.remove_blank_extension"]], "remove_features() (compas_timber.elements.timberelement method)": [[453, "compas_timber.elements.TimberElement.remove_features"]], "reset() (compas_timber.elements.timberelement method)": [[454, "compas_timber.elements.TimberElement.reset"]], "sha256() (compas_timber.elements.timberelement method)": [[455, "compas_timber.elements.TimberElement.sha256"]], "to_json() (compas_timber.elements.timberelement method)": [[456, "compas_timber.elements.TimberElement.to_json"]], "to_jsonstring() (compas_timber.elements.timberelement method)": [[457, "compas_timber.elements.TimberElement.to_jsonstring"]], "transform() (compas_timber.elements.timberelement method)": [[458, "compas_timber.elements.TimberElement.transform"]], "transformed() (compas_timber.elements.timberelement method)": [[459, "compas_timber.elements.TimberElement.transformed"]], "validate_data() (compas_timber.elements.timberelement class method)": [[460, "compas_timber.elements.TimberElement.validate_data"]], "wall (class in compas_timber.elements)": [[461, "compas_timber.elements.Wall"]], "tostring() (compas_timber.elements.wall method)": [[462, "compas_timber.elements.Wall.ToString"]], "add_feature() (compas_timber.elements.wall method)": [[463, "compas_timber.elements.Wall.add_feature"]], "add_features() (compas_timber.elements.wall method)": [[464, "compas_timber.elements.Wall.add_features"]], "compute_aabb() (compas_timber.elements.wall method)": [[465, "compas_timber.elements.Wall.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.wall method)": [[466, "compas_timber.elements.Wall.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.wall method)": [[467, "compas_timber.elements.Wall.compute_geometry"]], "compute_obb() (compas_timber.elements.wall method)": [[468, "compas_timber.elements.Wall.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.wall method)": [[469, "compas_timber.elements.Wall.compute_worldtransformation"]], "copy() (compas_timber.elements.wall method)": [[470, "compas_timber.elements.Wall.copy"]], "from_boundary() (compas_timber.elements.wall class method)": [[471, "compas_timber.elements.Wall.from_boundary"]], "from_brep() (compas_timber.elements.wall class method)": [[472, "compas_timber.elements.Wall.from_brep"]], "from_json() (compas_timber.elements.wall class method)": [[473, "compas_timber.elements.Wall.from_json"]], "from_jsonstring() (compas_timber.elements.wall class method)": [[474, "compas_timber.elements.Wall.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.wall method)": [[475, "compas_timber.elements.Wall.remove_blank_extension"]], "remove_features() (compas_timber.elements.wall method)": [[476, "compas_timber.elements.Wall.remove_features"]], "reset() (compas_timber.elements.wall method)": [[477, "compas_timber.elements.Wall.reset"]], "rotate() (compas_timber.elements.wall method)": [[478, "compas_timber.elements.Wall.rotate"]], "sha256() (compas_timber.elements.wall method)": [[479, "compas_timber.elements.Wall.sha256"]], "to_json() (compas_timber.elements.wall method)": [[480, "compas_timber.elements.Wall.to_json"]], "to_jsonstring() (compas_timber.elements.wall method)": [[481, "compas_timber.elements.Wall.to_jsonstring"]], "transform() (compas_timber.elements.wall method)": [[482, "compas_timber.elements.Wall.transform"]], "transformed() (compas_timber.elements.wall method)": [[483, "compas_timber.elements.Wall.transformed"]], "validate_data() (compas_timber.elements.wall class method)": [[484, "compas_timber.elements.Wall.validate_data"]], "beamjoiningerror": [[485, "compas_timber.errors.BeamJoiningError"]], "fastenerapplicationerror": [[486, "compas_timber.errors.FastenerApplicationError"]], "featureapplicationerror": [[487, "compas_timber.errors.FeatureApplicationError"]], "btlxpart (class in compas_timber.fabrication)": [[488, "compas_timber.fabrication.BTLxPart"]], "et_point_vals() (compas_timber.fabrication.btlxpart method)": [[489, "compas_timber.fabrication.BTLxPart.et_point_vals"]], "ref_side_from_face() (compas_timber.fabrication.btlxpart method)": [[490, "compas_timber.fabrication.BTLxPart.ref_side_from_face"]], "btlxprocessing (class in compas_timber.fabrication)": [[491, "compas_timber.fabrication.BTLxProcessing"]], "tostring() (compas_timber.fabrication.btlxprocessing method)": [[492, "compas_timber.fabrication.BTLxProcessing.ToString"]], "add_subprocessing() (compas_timber.fabrication.btlxprocessing method)": [[493, "compas_timber.fabrication.BTLxProcessing.add_subprocessing"]], "copy() (compas_timber.fabrication.btlxprocessing method)": [[494, "compas_timber.fabrication.BTLxProcessing.copy"]], "from_json() (compas_timber.fabrication.btlxprocessing class method)": [[495, "compas_timber.fabrication.BTLxProcessing.from_json"]], "from_jsonstring() (compas_timber.fabrication.btlxprocessing class method)": [[496, "compas_timber.fabrication.BTLxProcessing.from_jsonstring"]], "scaled() (compas_timber.fabrication.btlxprocessing method)": [[497, "compas_timber.fabrication.BTLxProcessing.scaled"]], "sha256() (compas_timber.fabrication.btlxprocessing method)": [[498, "compas_timber.fabrication.BTLxProcessing.sha256"]], "to_json() (compas_timber.fabrication.btlxprocessing method)": [[499, "compas_timber.fabrication.BTLxProcessing.to_json"]], "to_jsonstring() (compas_timber.fabrication.btlxprocessing method)": [[500, "compas_timber.fabrication.BTLxProcessing.to_jsonstring"]], "validate_data() (compas_timber.fabrication.btlxprocessing class method)": [[501, "compas_timber.fabrication.BTLxProcessing.validate_data"]], "btlxwriter (class in compas_timber.fabrication)": [[502, "compas_timber.fabrication.BTLxWriter"]], "model_to_xml() (compas_timber.fabrication.btlxwriter method)": [[503, "compas_timber.fabrication.BTLxWriter.model_to_xml"]], "register_type_serializer() (compas_timber.fabrication.btlxwriter class method)": [[504, "compas_timber.fabrication.BTLxWriter.register_type_serializer"]], "write() (compas_timber.fabrication.btlxwriter method)": [[505, "compas_timber.fabrication.BTLxWriter.write"]], "doublecut (class in compas_timber.fabrication)": [[506, "compas_timber.fabrication.DoubleCut"]], "tostring() (compas_timber.fabrication.doublecut method)": [[507, "compas_timber.fabrication.DoubleCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.doublecut method)": [[508, "compas_timber.fabrication.DoubleCut.add_subprocessing"]], "apply() (compas_timber.fabrication.doublecut method)": [[509, "compas_timber.fabrication.DoubleCut.apply"]], "copy() (compas_timber.fabrication.doublecut method)": [[510, "compas_timber.fabrication.DoubleCut.copy"]], "from_json() (compas_timber.fabrication.doublecut class method)": [[511, "compas_timber.fabrication.DoubleCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.doublecut class method)": [[512, "compas_timber.fabrication.DoubleCut.from_jsonstring"]], "from_planes_and_beam() (compas_timber.fabrication.doublecut class method)": [[513, "compas_timber.fabrication.DoubleCut.from_planes_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.doublecut class method)": [[514, "compas_timber.fabrication.DoubleCut.from_shapes_and_element"]], "planes_from_params_and_beam() (compas_timber.fabrication.doublecut method)": [[515, "compas_timber.fabrication.DoubleCut.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.doublecut method)": [[516, "compas_timber.fabrication.DoubleCut.scale"]], "scaled() (compas_timber.fabrication.doublecut method)": [[517, "compas_timber.fabrication.DoubleCut.scaled"]], "sha256() (compas_timber.fabrication.doublecut method)": [[518, "compas_timber.fabrication.DoubleCut.sha256"]], "to_json() (compas_timber.fabrication.doublecut method)": [[519, "compas_timber.fabrication.DoubleCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.doublecut method)": [[520, "compas_timber.fabrication.DoubleCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.doublecut class method)": [[521, "compas_timber.fabrication.DoubleCut.validate_data"]], "dovetailmortise (class in compas_timber.fabrication)": [[522, "compas_timber.fabrication.DovetailMortise"]], "tostring() (compas_timber.fabrication.dovetailmortise method)": [[523, "compas_timber.fabrication.DovetailMortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailmortise method)": [[524, "compas_timber.fabrication.DovetailMortise.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailmortise method)": [[525, "compas_timber.fabrication.DovetailMortise.apply"]], "copy() (compas_timber.fabrication.dovetailmortise method)": [[526, "compas_timber.fabrication.DovetailMortise.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailmortise class method)": [[527, "compas_timber.fabrication.DovetailMortise.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[528, "compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[529, "compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[530, "compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.dovetailmortise class method)": [[531, "compas_timber.fabrication.DovetailMortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.dovetailmortise class method)": [[532, "compas_timber.fabrication.DovetailMortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailmortise class method)": [[533, "compas_timber.fabrication.DovetailMortise.from_jsonstring"]], "scale() (compas_timber.fabrication.dovetailmortise method)": [[534, "compas_timber.fabrication.DovetailMortise.scale"]], "scaled() (compas_timber.fabrication.dovetailmortise method)": [[535, "compas_timber.fabrication.DovetailMortise.scaled"]], "sha256() (compas_timber.fabrication.dovetailmortise method)": [[536, "compas_timber.fabrication.DovetailMortise.sha256"]], "to_json() (compas_timber.fabrication.dovetailmortise method)": [[537, "compas_timber.fabrication.DovetailMortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailmortise method)": [[538, "compas_timber.fabrication.DovetailMortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailmortise class method)": [[539, "compas_timber.fabrication.DovetailMortise.validate_data"]], "dovetailtenon (class in compas_timber.fabrication)": [[540, "compas_timber.fabrication.DovetailTenon"]], "tostring() (compas_timber.fabrication.dovetailtenon method)": [[541, "compas_timber.fabrication.DovetailTenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailtenon method)": [[542, "compas_timber.fabrication.DovetailTenon.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailtenon method)": [[543, "compas_timber.fabrication.DovetailTenon.apply"]], "copy() (compas_timber.fabrication.dovetailtenon method)": [[544, "compas_timber.fabrication.DovetailTenon.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailtenon class method)": [[545, "compas_timber.fabrication.DovetailTenon.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[546, "compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[547, "compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[548, "compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.dovetailtenon class method)": [[549, "compas_timber.fabrication.DovetailTenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailtenon class method)": [[550, "compas_timber.fabrication.DovetailTenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.dovetailtenon class method)": [[551, "compas_timber.fabrication.DovetailTenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.dovetailtenon method)": [[552, "compas_timber.fabrication.DovetailTenon.scale"]], "scaled() (compas_timber.fabrication.dovetailtenon method)": [[553, "compas_timber.fabrication.DovetailTenon.scaled"]], "sha256() (compas_timber.fabrication.dovetailtenon method)": [[554, "compas_timber.fabrication.DovetailTenon.sha256"]], "to_json() (compas_timber.fabrication.dovetailtenon method)": [[555, "compas_timber.fabrication.DovetailTenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailtenon method)": [[556, "compas_timber.fabrication.DovetailTenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailtenon class method)": [[557, "compas_timber.fabrication.DovetailTenon.validate_data"]], "drilling (class in compas_timber.fabrication)": [[558, "compas_timber.fabrication.Drilling"]], "tostring() (compas_timber.fabrication.drilling method)": [[559, "compas_timber.fabrication.Drilling.ToString"]], "add_subprocessing() (compas_timber.fabrication.drilling method)": [[560, "compas_timber.fabrication.Drilling.add_subprocessing"]], "apply() (compas_timber.fabrication.drilling method)": [[561, "compas_timber.fabrication.Drilling.apply"]], "copy() (compas_timber.fabrication.drilling method)": [[562, "compas_timber.fabrication.Drilling.copy"]], "cylinder_from_params_and_element() (compas_timber.fabrication.drilling method)": [[563, "compas_timber.fabrication.Drilling.cylinder_from_params_and_element"]], "from_json() (compas_timber.fabrication.drilling class method)": [[564, "compas_timber.fabrication.Drilling.from_json"]], "from_jsonstring() (compas_timber.fabrication.drilling class method)": [[565, "compas_timber.fabrication.Drilling.from_jsonstring"]], "from_line_and_element() (compas_timber.fabrication.drilling class method)": [[566, "compas_timber.fabrication.Drilling.from_line_and_element"]], "from_shapes_and_element() (compas_timber.fabrication.drilling class method)": [[567, "compas_timber.fabrication.Drilling.from_shapes_and_element"]], "scale() (compas_timber.fabrication.drilling method)": [[568, "compas_timber.fabrication.Drilling.scale"]], "scaled() (compas_timber.fabrication.drilling method)": [[569, "compas_timber.fabrication.Drilling.scaled"]], "sha256() (compas_timber.fabrication.drilling method)": [[570, "compas_timber.fabrication.Drilling.sha256"]], "to_json() (compas_timber.fabrication.drilling method)": [[571, "compas_timber.fabrication.Drilling.to_json"]], "to_jsonstring() (compas_timber.fabrication.drilling method)": [[572, "compas_timber.fabrication.Drilling.to_jsonstring"]], "validate_data() (compas_timber.fabrication.drilling class method)": [[573, "compas_timber.fabrication.Drilling.validate_data"]], "edgepositiontype (class in compas_timber.fabrication)": [[574, "compas_timber.fabrication.EdgePositionType"]], "frenchridgelap (class in compas_timber.fabrication)": [[575, "compas_timber.fabrication.FrenchRidgeLap"]], "tostring() (compas_timber.fabrication.frenchridgelap method)": [[576, "compas_timber.fabrication.FrenchRidgeLap.ToString"]], "add_subprocessing() (compas_timber.fabrication.frenchridgelap method)": [[577, "compas_timber.fabrication.FrenchRidgeLap.add_subprocessing"]], "apply() (compas_timber.fabrication.frenchridgelap method)": [[578, "compas_timber.fabrication.FrenchRidgeLap.apply"]], "copy() (compas_timber.fabrication.frenchridgelap method)": [[579, "compas_timber.fabrication.FrenchRidgeLap.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[580, "compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam"]], "from_beam_beam_and_plane() (compas_timber.fabrication.frenchridgelap class method)": [[581, "compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane"]], "from_json() (compas_timber.fabrication.frenchridgelap class method)": [[582, "compas_timber.fabrication.FrenchRidgeLap.from_json"]], "from_jsonstring() (compas_timber.fabrication.frenchridgelap class method)": [[583, "compas_timber.fabrication.FrenchRidgeLap.from_jsonstring"]], "lap_volume_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[584, "compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam"]], "scale() (compas_timber.fabrication.frenchridgelap method)": [[585, "compas_timber.fabrication.FrenchRidgeLap.scale"]], "scaled() (compas_timber.fabrication.frenchridgelap method)": [[586, "compas_timber.fabrication.FrenchRidgeLap.scaled"]], "sha256() (compas_timber.fabrication.frenchridgelap method)": [[587, "compas_timber.fabrication.FrenchRidgeLap.sha256"]], "to_json() (compas_timber.fabrication.frenchridgelap method)": [[588, "compas_timber.fabrication.FrenchRidgeLap.to_json"]], "to_jsonstring() (compas_timber.fabrication.frenchridgelap method)": [[589, "compas_timber.fabrication.FrenchRidgeLap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.frenchridgelap class method)": [[590, "compas_timber.fabrication.FrenchRidgeLap.validate_data"]], "jackraftercut (class in compas_timber.fabrication)": [[591, "compas_timber.fabrication.JackRafterCut"]], "tostring() (compas_timber.fabrication.jackraftercut method)": [[592, "compas_timber.fabrication.JackRafterCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.jackraftercut method)": [[593, "compas_timber.fabrication.JackRafterCut.add_subprocessing"]], "apply() (compas_timber.fabrication.jackraftercut method)": [[594, "compas_timber.fabrication.JackRafterCut.apply"]], "copy() (compas_timber.fabrication.jackraftercut method)": [[595, "compas_timber.fabrication.JackRafterCut.copy"]], "from_json() (compas_timber.fabrication.jackraftercut class method)": [[596, "compas_timber.fabrication.JackRafterCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.jackraftercut class method)": [[597, "compas_timber.fabrication.JackRafterCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.jackraftercut class method)": [[598, "compas_timber.fabrication.JackRafterCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.jackraftercut class method)": [[599, "compas_timber.fabrication.JackRafterCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.jackraftercut method)": [[600, "compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam"]], "scale() (compas_timber.fabrication.jackraftercut method)": [[601, "compas_timber.fabrication.JackRafterCut.scale"]], "scaled() (compas_timber.fabrication.jackraftercut method)": [[602, "compas_timber.fabrication.JackRafterCut.scaled"]], "sha256() (compas_timber.fabrication.jackraftercut method)": [[603, "compas_timber.fabrication.JackRafterCut.sha256"]], "to_json() (compas_timber.fabrication.jackraftercut method)": [[604, "compas_timber.fabrication.JackRafterCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.jackraftercut method)": [[605, "compas_timber.fabrication.JackRafterCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.jackraftercut class method)": [[606, "compas_timber.fabrication.JackRafterCut.validate_data"]], "lap (class in compas_timber.fabrication)": [[607, "compas_timber.fabrication.Lap"]], "tostring() (compas_timber.fabrication.lap method)": [[608, "compas_timber.fabrication.Lap.ToString"]], "add_subprocessing() (compas_timber.fabrication.lap method)": [[609, "compas_timber.fabrication.Lap.add_subprocessing"]], "apply() (compas_timber.fabrication.lap method)": [[610, "compas_timber.fabrication.Lap.apply"]], "copy() (compas_timber.fabrication.lap method)": [[611, "compas_timber.fabrication.Lap.copy"]], "from_json() (compas_timber.fabrication.lap class method)": [[612, "compas_timber.fabrication.Lap.from_json"]], "from_jsonstring() (compas_timber.fabrication.lap class method)": [[613, "compas_timber.fabrication.Lap.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.lap class method)": [[614, "compas_timber.fabrication.Lap.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.lap class method)": [[615, "compas_timber.fabrication.Lap.from_shapes_and_element"]], "from_volume_and_beam() (compas_timber.fabrication.lap class method)": [[616, "compas_timber.fabrication.Lap.from_volume_and_beam"]], "scale() (compas_timber.fabrication.lap method)": [[617, "compas_timber.fabrication.Lap.scale"]], "scaled() (compas_timber.fabrication.lap method)": [[618, "compas_timber.fabrication.Lap.scaled"]], "sha256() (compas_timber.fabrication.lap method)": [[619, "compas_timber.fabrication.Lap.sha256"]], "to_json() (compas_timber.fabrication.lap method)": [[620, "compas_timber.fabrication.Lap.to_json"]], "to_jsonstring() (compas_timber.fabrication.lap method)": [[621, "compas_timber.fabrication.Lap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.lap class method)": [[622, "compas_timber.fabrication.Lap.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.lap method)": [[623, "compas_timber.fabrication.Lap.volume_from_params_and_beam"]], "limitationtoptype (class in compas_timber.fabrication)": [[624, "compas_timber.fabrication.LimitationTopType"]], "longitudinalcut (class in compas_timber.fabrication)": [[625, "compas_timber.fabrication.LongitudinalCut"]], "tostring() (compas_timber.fabrication.longitudinalcut method)": [[626, "compas_timber.fabrication.LongitudinalCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.longitudinalcut method)": [[627, "compas_timber.fabrication.LongitudinalCut.add_subprocessing"]], "apply() (compas_timber.fabrication.longitudinalcut method)": [[628, "compas_timber.fabrication.LongitudinalCut.apply"]], "copy() (compas_timber.fabrication.longitudinalcut method)": [[629, "compas_timber.fabrication.LongitudinalCut.copy"]], "from_json() (compas_timber.fabrication.longitudinalcut class method)": [[630, "compas_timber.fabrication.LongitudinalCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.longitudinalcut class method)": [[631, "compas_timber.fabrication.LongitudinalCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.longitudinalcut class method)": [[632, "compas_timber.fabrication.LongitudinalCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.longitudinalcut class method)": [[633, "compas_timber.fabrication.LongitudinalCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[634, "compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam"]], "scaled() (compas_timber.fabrication.longitudinalcut method)": [[635, "compas_timber.fabrication.LongitudinalCut.scaled"]], "sha256() (compas_timber.fabrication.longitudinalcut method)": [[636, "compas_timber.fabrication.LongitudinalCut.sha256"]], "to_json() (compas_timber.fabrication.longitudinalcut method)": [[637, "compas_timber.fabrication.LongitudinalCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.longitudinalcut method)": [[638, "compas_timber.fabrication.LongitudinalCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.longitudinalcut class method)": [[639, "compas_timber.fabrication.LongitudinalCut.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[640, "compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam"]], "machininglimits (class in compas_timber.fabrication)": [[641, "compas_timber.fabrication.MachiningLimits"]], "mortise (class in compas_timber.fabrication)": [[642, "compas_timber.fabrication.Mortise"]], "tostring() (compas_timber.fabrication.mortise method)": [[643, "compas_timber.fabrication.Mortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.mortise method)": [[644, "compas_timber.fabrication.Mortise.add_subprocessing"]], "apply() (compas_timber.fabrication.mortise method)": [[645, "compas_timber.fabrication.Mortise.apply"]], "copy() (compas_timber.fabrication.mortise method)": [[646, "compas_timber.fabrication.Mortise.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[647, "compas_timber.fabrication.Mortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.mortise class method)": [[648, "compas_timber.fabrication.Mortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.mortise class method)": [[649, "compas_timber.fabrication.Mortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.mortise class method)": [[650, "compas_timber.fabrication.Mortise.from_jsonstring"]], "scale() (compas_timber.fabrication.mortise method)": [[651, "compas_timber.fabrication.Mortise.scale"]], "scaled() (compas_timber.fabrication.mortise method)": [[652, "compas_timber.fabrication.Mortise.scaled"]], "sha256() (compas_timber.fabrication.mortise method)": [[653, "compas_timber.fabrication.Mortise.sha256"]], "to_json() (compas_timber.fabrication.mortise method)": [[654, "compas_timber.fabrication.Mortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.mortise method)": [[655, "compas_timber.fabrication.Mortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.mortise class method)": [[656, "compas_timber.fabrication.Mortise.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[657, "compas_timber.fabrication.Mortise.volume_from_params_and_beam"]], "orientationtype (class in compas_timber.fabrication)": [[658, "compas_timber.fabrication.OrientationType"]], "pocket (class in compas_timber.fabrication)": [[659, "compas_timber.fabrication.Pocket"]], "tostring() (compas_timber.fabrication.pocket method)": [[660, "compas_timber.fabrication.Pocket.ToString"]], "add_subprocessing() (compas_timber.fabrication.pocket method)": [[661, "compas_timber.fabrication.Pocket.add_subprocessing"]], "apply() (compas_timber.fabrication.pocket method)": [[662, "compas_timber.fabrication.Pocket.apply"]], "copy() (compas_timber.fabrication.pocket method)": [[663, "compas_timber.fabrication.Pocket.copy"]], "from_json() (compas_timber.fabrication.pocket class method)": [[664, "compas_timber.fabrication.Pocket.from_json"]], "from_jsonstring() (compas_timber.fabrication.pocket class method)": [[665, "compas_timber.fabrication.Pocket.from_jsonstring"]], "from_shapes_and_element() (compas_timber.fabrication.pocket class method)": [[666, "compas_timber.fabrication.Pocket.from_shapes_and_element"]], "from_volume_and_element() (compas_timber.fabrication.pocket class method)": [[667, "compas_timber.fabrication.Pocket.from_volume_and_element"]], "scale() (compas_timber.fabrication.pocket method)": [[668, "compas_timber.fabrication.Pocket.scale"]], "scaled() (compas_timber.fabrication.pocket method)": [[669, "compas_timber.fabrication.Pocket.scaled"]], "sha256() (compas_timber.fabrication.pocket method)": [[670, "compas_timber.fabrication.Pocket.sha256"]], "to_json() (compas_timber.fabrication.pocket method)": [[671, "compas_timber.fabrication.Pocket.to_json"]], "to_jsonstring() (compas_timber.fabrication.pocket method)": [[672, "compas_timber.fabrication.Pocket.to_jsonstring"]], "validate_data() (compas_timber.fabrication.pocket class method)": [[673, "compas_timber.fabrication.Pocket.validate_data"]], "volume_from_params_and_element() (compas_timber.fabrication.pocket method)": [[674, "compas_timber.fabrication.Pocket.volume_from_params_and_element"]], "slot (class in compas_timber.fabrication)": [[675, "compas_timber.fabrication.Slot"]], "tostring() (compas_timber.fabrication.slot method)": [[676, "compas_timber.fabrication.Slot.ToString"]], "add_subprocessing() (compas_timber.fabrication.slot method)": [[677, "compas_timber.fabrication.Slot.add_subprocessing"]], "apply() (compas_timber.fabrication.slot method)": [[678, "compas_timber.fabrication.Slot.apply"]], "copy() (compas_timber.fabrication.slot method)": [[679, "compas_timber.fabrication.Slot.copy"]], "from_json() (compas_timber.fabrication.slot class method)": [[680, "compas_timber.fabrication.Slot.from_json"]], "from_jsonstring() (compas_timber.fabrication.slot class method)": [[681, "compas_timber.fabrication.Slot.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.slot class method)": [[682, "compas_timber.fabrication.Slot.from_plane_and_beam"]], "scale() (compas_timber.fabrication.slot method)": [[683, "compas_timber.fabrication.Slot.scale"]], "scaled() (compas_timber.fabrication.slot method)": [[684, "compas_timber.fabrication.Slot.scaled"]], "sha256() (compas_timber.fabrication.slot method)": [[685, "compas_timber.fabrication.Slot.sha256"]], "to_json() (compas_timber.fabrication.slot method)": [[686, "compas_timber.fabrication.Slot.to_json"]], "to_jsonstring() (compas_timber.fabrication.slot method)": [[687, "compas_timber.fabrication.Slot.to_jsonstring"]], "validate_data() (compas_timber.fabrication.slot class method)": [[688, "compas_timber.fabrication.Slot.validate_data"]], "stepjoint (class in compas_timber.fabrication)": [[689, "compas_timber.fabrication.StepJoint"]], "tostring() (compas_timber.fabrication.stepjoint method)": [[690, "compas_timber.fabrication.StepJoint.ToString"]], "add_subprocessing() (compas_timber.fabrication.stepjoint method)": [[691, "compas_timber.fabrication.StepJoint.add_subprocessing"]], "add_tenon() (compas_timber.fabrication.stepjoint method)": [[692, "compas_timber.fabrication.StepJoint.add_tenon"]], "apply() (compas_timber.fabrication.stepjoint method)": [[693, "compas_timber.fabrication.StepJoint.apply"]], "copy() (compas_timber.fabrication.stepjoint method)": [[694, "compas_timber.fabrication.StepJoint.copy"]], "from_json() (compas_timber.fabrication.stepjoint class method)": [[695, "compas_timber.fabrication.StepJoint.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjoint class method)": [[696, "compas_timber.fabrication.StepJoint.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjoint class method)": [[697, "compas_timber.fabrication.StepJoint.from_plane_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[698, "compas_timber.fabrication.StepJoint.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjoint method)": [[699, "compas_timber.fabrication.StepJoint.scale"]], "scaled() (compas_timber.fabrication.stepjoint method)": [[700, "compas_timber.fabrication.StepJoint.scaled"]], "sha256() (compas_timber.fabrication.stepjoint method)": [[701, "compas_timber.fabrication.StepJoint.sha256"]], "tenon_volume_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[702, "compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam"]], "to_json() (compas_timber.fabrication.stepjoint method)": [[703, "compas_timber.fabrication.StepJoint.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjoint method)": [[704, "compas_timber.fabrication.StepJoint.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjoint class method)": [[705, "compas_timber.fabrication.StepJoint.validate_data"]], "stepjointnotch (class in compas_timber.fabrication)": [[706, "compas_timber.fabrication.StepJointNotch"]], "tostring() (compas_timber.fabrication.stepjointnotch method)": [[707, "compas_timber.fabrication.StepJointNotch.ToString"]], "add_mortise() (compas_timber.fabrication.stepjointnotch method)": [[708, "compas_timber.fabrication.StepJointNotch.add_mortise"]], "add_subprocessing() (compas_timber.fabrication.stepjointnotch method)": [[709, "compas_timber.fabrication.StepJointNotch.add_subprocessing"]], "apply() (compas_timber.fabrication.stepjointnotch method)": [[710, "compas_timber.fabrication.StepJointNotch.apply"]], "copy() (compas_timber.fabrication.stepjointnotch method)": [[711, "compas_timber.fabrication.StepJointNotch.copy"]], "from_json() (compas_timber.fabrication.stepjointnotch class method)": [[712, "compas_timber.fabrication.StepJointNotch.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjointnotch class method)": [[713, "compas_timber.fabrication.StepJointNotch.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjointnotch class method)": [[714, "compas_timber.fabrication.StepJointNotch.from_plane_and_beam"]], "mortise_volume_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[715, "compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[716, "compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjointnotch method)": [[717, "compas_timber.fabrication.StepJointNotch.scale"]], "scaled() (compas_timber.fabrication.stepjointnotch method)": [[718, "compas_timber.fabrication.StepJointNotch.scaled"]], "sha256() (compas_timber.fabrication.stepjointnotch method)": [[719, "compas_timber.fabrication.StepJointNotch.sha256"]], "to_json() (compas_timber.fabrication.stepjointnotch method)": [[720, "compas_timber.fabrication.StepJointNotch.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjointnotch method)": [[721, "compas_timber.fabrication.StepJointNotch.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjointnotch class method)": [[722, "compas_timber.fabrication.StepJointNotch.validate_data"]], "stepshapetype (class in compas_timber.fabrication)": [[723, "compas_timber.fabrication.StepShapeType"]], "tenon (class in compas_timber.fabrication)": [[724, "compas_timber.fabrication.Tenon"]], "tostring() (compas_timber.fabrication.tenon method)": [[725, "compas_timber.fabrication.Tenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.tenon method)": [[726, "compas_timber.fabrication.Tenon.add_subprocessing"]], "apply() (compas_timber.fabrication.tenon method)": [[727, "compas_timber.fabrication.Tenon.apply"]], "copy() (compas_timber.fabrication.tenon method)": [[728, "compas_timber.fabrication.Tenon.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[729, "compas_timber.fabrication.Tenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.tenon class method)": [[730, "compas_timber.fabrication.Tenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.tenon class method)": [[731, "compas_timber.fabrication.Tenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.tenon class method)": [[732, "compas_timber.fabrication.Tenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.tenon method)": [[733, "compas_timber.fabrication.Tenon.scale"]], "scaled() (compas_timber.fabrication.tenon method)": [[734, "compas_timber.fabrication.Tenon.scaled"]], "sha256() (compas_timber.fabrication.tenon method)": [[735, "compas_timber.fabrication.Tenon.sha256"]], "to_json() (compas_timber.fabrication.tenon method)": [[736, "compas_timber.fabrication.Tenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.tenon method)": [[737, "compas_timber.fabrication.Tenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.tenon class method)": [[738, "compas_timber.fabrication.Tenon.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[739, "compas_timber.fabrication.Tenon.volume_from_params_and_beam"]], "tenonshapetype (class in compas_timber.fabrication)": [[740, "compas_timber.fabrication.TenonShapeType"]], "add_gh_param() (in module compas_timber.ghpython)": [[741, "compas_timber.ghpython.add_gh_param"]], "clear_gh_params() (in module compas_timber.ghpython)": [[742, "compas_timber.ghpython.clear_gh_params"]], "get_leaf_subclasses() (in module compas_timber.ghpython)": [[743, "compas_timber.ghpython.get_leaf_subclasses"]], "item_input_valid() (in module compas_timber.ghpython)": [[744, "compas_timber.ghpython.item_input_valid"]], "list_input_valid() (in module compas_timber.ghpython)": [[745, "compas_timber.ghpython.list_input_valid"]], "manage_dynamic_params() (in module compas_timber.ghpython)": [[746, "compas_timber.ghpython.manage_dynamic_params"]], "rename_gh_input() (in module compas_timber.ghpython)": [[747, "compas_timber.ghpython.rename_gh_input"]], "timbermodel (class in compas_timber.model)": [[748, "compas_timber.model.TimberModel"]], "tostring() (compas_timber.model.timbermodel method)": [[749, "compas_timber.model.TimberModel.ToString"]], "add_element() (compas_timber.model.timbermodel method)": [[750, "compas_timber.model.TimberModel.add_element"]], "add_elements() (compas_timber.model.timbermodel method)": [[751, "compas_timber.model.TimberModel.add_elements"]], "add_group() (compas_timber.model.timbermodel method)": [[752, "compas_timber.model.TimberModel.add_group"]], "add_group_element() (compas_timber.model.timbermodel method)": [[753, "compas_timber.model.TimberModel.add_group_element"]], "add_interaction() (compas_timber.model.timbermodel method)": [[754, "compas_timber.model.TimberModel.add_interaction"]], "add_joint() (compas_timber.model.timbermodel method)": [[755, "compas_timber.model.TimberModel.add_joint"]], "add_material() (compas_timber.model.timbermodel method)": [[756, "compas_timber.model.TimberModel.add_material"]], "assign_material() (compas_timber.model.timbermodel method)": [[757, "compas_timber.model.TimberModel.assign_material"]], "compute_aabb() (compas_timber.model.timbermodel method)": [[758, "compas_timber.model.TimberModel.compute_aabb"]], "compute_obb() (compas_timber.model.timbermodel method)": [[759, "compas_timber.model.TimberModel.compute_obb"]], "connect_adjacent_beams() (compas_timber.model.timbermodel method)": [[760, "compas_timber.model.TimberModel.connect_adjacent_beams"]], "connect_adjacent_walls() (compas_timber.model.timbermodel method)": [[761, "compas_timber.model.TimberModel.connect_adjacent_walls"]], "copy() (compas_timber.model.timbermodel method)": [[762, "compas_timber.model.TimberModel.copy"]], "element_by_guid() (compas_timber.model.timbermodel method)": [[763, "compas_timber.model.TimberModel.element_by_guid"]], "elements() (compas_timber.model.timbermodel method)": [[764, "compas_timber.model.TimberModel.elements"]], "elements_connected_by() (compas_timber.model.timbermodel method)": [[765, "compas_timber.model.TimberModel.elements_connected_by"]], "from_json() (compas_timber.model.timbermodel class method)": [[766, "compas_timber.model.TimberModel.from_json"]], "from_jsonstring() (compas_timber.model.timbermodel class method)": [[767, "compas_timber.model.TimberModel.from_jsonstring"]], "get_elements_in_group() (compas_timber.model.timbermodel method)": [[768, "compas_timber.model.TimberModel.get_elements_in_group"]], "get_interactions_for_element() (compas_timber.model.timbermodel method)": [[769, "compas_timber.model.TimberModel.get_interactions_for_element"]], "has_element() (compas_timber.model.timbermodel method)": [[770, "compas_timber.model.TimberModel.has_element"]], "has_group() (compas_timber.model.timbermodel method)": [[771, "compas_timber.model.TimberModel.has_group"]], "has_interaction() (compas_timber.model.timbermodel method)": [[772, "compas_timber.model.TimberModel.has_interaction"]], "has_material() (compas_timber.model.timbermodel method)": [[773, "compas_timber.model.TimberModel.has_material"]], "interactions() (compas_timber.model.timbermodel method)": [[774, "compas_timber.model.TimberModel.interactions"]], "materials() (compas_timber.model.timbermodel method)": [[775, "compas_timber.model.TimberModel.materials"]], "process_joinery() (compas_timber.model.timbermodel method)": [[776, "compas_timber.model.TimberModel.process_joinery"]], "remove_element() (compas_timber.model.timbermodel method)": [[777, "compas_timber.model.TimberModel.remove_element"]], "remove_interaction() (compas_timber.model.timbermodel method)": [[778, "compas_timber.model.TimberModel.remove_interaction"]], "remove_joint() (compas_timber.model.timbermodel method)": [[779, "compas_timber.model.TimberModel.remove_joint"]], "rotate() (compas_timber.model.timbermodel method)": [[780, "compas_timber.model.TimberModel.rotate"]], "rotated() (compas_timber.model.timbermodel method)": [[781, "compas_timber.model.TimberModel.rotated"]], "scale() (compas_timber.model.timbermodel method)": [[782, "compas_timber.model.TimberModel.scale"]], "scaled() (compas_timber.model.timbermodel method)": [[783, "compas_timber.model.TimberModel.scaled"]], "set_topologies() (compas_timber.model.timbermodel method)": [[784, "compas_timber.model.TimberModel.set_topologies"]], "sha256() (compas_timber.model.timbermodel method)": [[785, "compas_timber.model.TimberModel.sha256"]], "to_json() (compas_timber.model.timbermodel method)": [[786, "compas_timber.model.TimberModel.to_json"]], "to_jsonstring() (compas_timber.model.timbermodel method)": [[787, "compas_timber.model.TimberModel.to_jsonstring"]], "transform() (compas_timber.model.timbermodel method)": [[788, "compas_timber.model.TimberModel.transform"]], "transform_numpy() (compas_timber.model.timbermodel method)": [[789, "compas_timber.model.TimberModel.transform_numpy"]], "transformed() (compas_timber.model.timbermodel method)": [[790, "compas_timber.model.TimberModel.transformed"]], "transformed_numpy() (compas_timber.model.timbermodel method)": [[791, "compas_timber.model.TimberModel.transformed_numpy"]], "translate() (compas_timber.model.timbermodel method)": [[792, "compas_timber.model.TimberModel.translate"]], "translated() (compas_timber.model.timbermodel method)": [[793, "compas_timber.model.TimberModel.translated"]], "validate_data() (compas_timber.model.timbermodel class method)": [[794, "compas_timber.model.TimberModel.validate_data"]], "actor (class in compas_timber.planning)": [[795, "compas_timber.planning.Actor"]], "get_name() (compas_timber.planning.actor class method)": [[796, "compas_timber.planning.Actor.get_name"]], "buildingplan (class in compas_timber.planning)": [[797, "compas_timber.planning.BuildingPlan"]], "tostring() (compas_timber.planning.buildingplan method)": [[798, "compas_timber.planning.BuildingPlan.ToString"]], "add_step() (compas_timber.planning.buildingplan method)": [[799, "compas_timber.planning.BuildingPlan.add_step"]], "copy() (compas_timber.planning.buildingplan method)": [[800, "compas_timber.planning.BuildingPlan.copy"]], "from_json() (compas_timber.planning.buildingplan class method)": [[801, "compas_timber.planning.BuildingPlan.from_json"]], "from_jsonstring() (compas_timber.planning.buildingplan class method)": [[802, "compas_timber.planning.BuildingPlan.from_jsonstring"]], "sha256() (compas_timber.planning.buildingplan method)": [[803, "compas_timber.planning.BuildingPlan.sha256"]], "to_json() (compas_timber.planning.buildingplan method)": [[804, "compas_timber.planning.BuildingPlan.to_json"]], "to_jsonstring() (compas_timber.planning.buildingplan method)": [[805, "compas_timber.planning.BuildingPlan.to_jsonstring"]], "validate_data() (compas_timber.planning.buildingplan class method)": [[806, "compas_timber.planning.BuildingPlan.validate_data"]], "buildingplanparser (class in compas_timber.planning)": [[807, "compas_timber.planning.BuildingPlanParser"]], "parse() (compas_timber.planning.buildingplanparser class method)": [[808, "compas_timber.planning.BuildingPlanParser.parse"]], "serialize() (compas_timber.planning.buildingplanparser class method)": [[809, "compas_timber.planning.BuildingPlanParser.serialize"]], "instruction (class in compas_timber.planning)": [[810, "compas_timber.planning.Instruction"]], "tostring() (compas_timber.planning.instruction method)": [[811, "compas_timber.planning.Instruction.ToString"]], "copy() (compas_timber.planning.instruction method)": [[812, "compas_timber.planning.Instruction.copy"]], "from_json() (compas_timber.planning.instruction class method)": [[813, "compas_timber.planning.Instruction.from_json"]], "from_jsonstring() (compas_timber.planning.instruction class method)": [[814, "compas_timber.planning.Instruction.from_jsonstring"]], "sha256() (compas_timber.planning.instruction method)": [[815, "compas_timber.planning.Instruction.sha256"]], "to_json() (compas_timber.planning.instruction method)": [[816, "compas_timber.planning.Instruction.to_json"]], "to_jsonstring() (compas_timber.planning.instruction method)": [[817, "compas_timber.planning.Instruction.to_jsonstring"]], "transform() (compas_timber.planning.instruction method)": [[818, "compas_timber.planning.Instruction.transform"]], "validate_data() (compas_timber.planning.instruction class method)": [[819, "compas_timber.planning.Instruction.validate_data"]], "lineardimension (class in compas_timber.planning)": [[820, "compas_timber.planning.LinearDimension"]], "tostring() (compas_timber.planning.lineardimension method)": [[821, "compas_timber.planning.LinearDimension.ToString"]], "copy() (compas_timber.planning.lineardimension method)": [[822, "compas_timber.planning.LinearDimension.copy"]], "from_json() (compas_timber.planning.lineardimension class method)": [[823, "compas_timber.planning.LinearDimension.from_json"]], "from_jsonstring() (compas_timber.planning.lineardimension class method)": [[824, "compas_timber.planning.LinearDimension.from_jsonstring"]], "sha256() (compas_timber.planning.lineardimension method)": [[825, "compas_timber.planning.LinearDimension.sha256"]], "to_json() (compas_timber.planning.lineardimension method)": [[826, "compas_timber.planning.LinearDimension.to_json"]], "to_jsonstring() (compas_timber.planning.lineardimension method)": [[827, "compas_timber.planning.LinearDimension.to_jsonstring"]], "transform() (compas_timber.planning.lineardimension method)": [[828, "compas_timber.planning.LinearDimension.transform"]], "validate_data() (compas_timber.planning.lineardimension class method)": [[829, "compas_timber.planning.LinearDimension.validate_data"]], "model3d (class in compas_timber.planning)": [[830, "compas_timber.planning.Model3d"]], "tostring() (compas_timber.planning.model3d method)": [[831, "compas_timber.planning.Model3d.ToString"]], "copy() (compas_timber.planning.model3d method)": [[832, "compas_timber.planning.Model3d.copy"]], "from_json() (compas_timber.planning.model3d class method)": [[833, "compas_timber.planning.Model3d.from_json"]], "from_jsonstring() (compas_timber.planning.model3d class method)": [[834, "compas_timber.planning.Model3d.from_jsonstring"]], "sha256() (compas_timber.planning.model3d method)": [[835, "compas_timber.planning.Model3d.sha256"]], "to_json() (compas_timber.planning.model3d method)": [[836, "compas_timber.planning.Model3d.to_json"]], "to_jsonstring() (compas_timber.planning.model3d method)": [[837, "compas_timber.planning.Model3d.to_jsonstring"]], "transform() (compas_timber.planning.model3d method)": [[838, "compas_timber.planning.Model3d.transform"]], "validate_data() (compas_timber.planning.model3d class method)": [[839, "compas_timber.planning.Model3d.validate_data"]], "simplesequencegenerator (class in compas_timber.planning)": [[840, "compas_timber.planning.SimpleSequenceGenerator"]], "step (class in compas_timber.planning)": [[841, "compas_timber.planning.Step"]], "tostring() (compas_timber.planning.step method)": [[842, "compas_timber.planning.Step.ToString"]], "copy() (compas_timber.planning.step method)": [[843, "compas_timber.planning.Step.copy"]], "from_json() (compas_timber.planning.step class method)": [[844, "compas_timber.planning.Step.from_json"]], "from_jsonstring() (compas_timber.planning.step class method)": [[845, "compas_timber.planning.Step.from_jsonstring"]], "sha256() (compas_timber.planning.step method)": [[846, "compas_timber.planning.Step.sha256"]], "to_json() (compas_timber.planning.step method)": [[847, "compas_timber.planning.Step.to_json"]], "to_jsonstring() (compas_timber.planning.step method)": [[848, "compas_timber.planning.Step.to_jsonstring"]], "transform() (compas_timber.planning.step method)": [[849, "compas_timber.planning.Step.transform"]], "validate_data() (compas_timber.planning.step class method)": [[850, "compas_timber.planning.Step.validate_data"]], "text3d (class in compas_timber.planning)": [[851, "compas_timber.planning.Text3d"]], "tostring() (compas_timber.planning.text3d method)": [[852, "compas_timber.planning.Text3d.ToString"]], "copy() (compas_timber.planning.text3d method)": [[853, "compas_timber.planning.Text3d.copy"]], "from_json() (compas_timber.planning.text3d class method)": [[854, "compas_timber.planning.Text3d.from_json"]], "from_jsonstring() (compas_timber.planning.text3d class method)": [[855, "compas_timber.planning.Text3d.from_jsonstring"]], "sha256() (compas_timber.planning.text3d method)": [[856, "compas_timber.planning.Text3d.sha256"]], "to_json() (compas_timber.planning.text3d method)": [[857, "compas_timber.planning.Text3d.to_json"]], "to_jsonstring() (compas_timber.planning.text3d method)": [[858, "compas_timber.planning.Text3d.to_jsonstring"]], "transform() (compas_timber.planning.text3d method)": [[859, "compas_timber.planning.Text3d.transform"]], "validate_data() (compas_timber.planning.text3d class method)": [[860, "compas_timber.planning.Text3d.validate_data"]], "find_neighboring_elements() (in module compas_timber.rhino)": [[861, "compas_timber.rhino.find_neighboring_elements"]]}})