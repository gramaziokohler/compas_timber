Search.setIndex({"docnames": ["api", "api/compas_timber.connections", "api/compas_timber.elements", "api/compas_timber.fabrication", "api/compas_timber.ghpython", "api/compas_timber.model", "api/compas_timber.planning", "api/compas_timber.rhino", "api/generated/compas_timber.connections.BeamJoinningError", "api/generated/compas_timber.connections.ConnectionSolver", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs", "api/generated/compas_timber.connections.ConnectionSolver.find_topology", "api/generated/compas_timber.connections.FrenchRidgeLapJoint", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.ToString", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.add_features", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.check_geometry", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.copy", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.create", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.from_json", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.from_jsonstring", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.sha256", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.to_json", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.to_jsonstring", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.validate_data", "api/generated/compas_timber.connections.Joint", "api/generated/compas_timber.connections.Joint.ToString", "api/generated/compas_timber.connections.Joint.add_features", "api/generated/compas_timber.connections.Joint.copy", "api/generated/compas_timber.connections.Joint.create", "api/generated/compas_timber.connections.Joint.from_json", "api/generated/compas_timber.connections.Joint.from_jsonstring", "api/generated/compas_timber.connections.Joint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.Joint.get_face_most_towards_beam", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys", "api/generated/compas_timber.connections.Joint.sha256", "api/generated/compas_timber.connections.Joint.to_json", "api/generated/compas_timber.connections.Joint.to_jsonstring", "api/generated/compas_timber.connections.Joint.validate_data", "api/generated/compas_timber.connections.JointTopology", "api/generated/compas_timber.connections.JointTopology.get_name", "api/generated/compas_timber.connections.LButtJoint", "api/generated/compas_timber.connections.LButtJoint.ToString", "api/generated/compas_timber.connections.LButtJoint.add_features", "api/generated/compas_timber.connections.LButtJoint.back_surface_main", "api/generated/compas_timber.connections.LButtJoint.copy", "api/generated/compas_timber.connections.LButtJoint.create", "api/generated/compas_timber.connections.LButtJoint.from_json", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring", "api/generated/compas_timber.connections.LButtJoint.front_back_surface_main", "api/generated/compas_timber.connections.LButtJoint.get_cross_cutting_plane", "api/generated/compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LButtJoint.get_main_cutting_plane", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LButtJoint.sha256", "api/generated/compas_timber.connections.LButtJoint.side_surfaces_cross", "api/generated/compas_timber.connections.LButtJoint.subtraction_volume", "api/generated/compas_timber.connections.LButtJoint.to_json", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring", "api/generated/compas_timber.connections.LButtJoint.validate_data", "api/generated/compas_timber.connections.LHalfLapJoint", "api/generated/compas_timber.connections.LHalfLapJoint.ToString", "api/generated/compas_timber.connections.LHalfLapJoint.add_features", "api/generated/compas_timber.connections.LHalfLapJoint.copy", "api/generated/compas_timber.connections.LHalfLapJoint.create", "api/generated/compas_timber.connections.LHalfLapJoint.from_json", "api/generated/compas_timber.connections.LHalfLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LHalfLapJoint.get_cross_cutting_frame", "api/generated/compas_timber.connections.LHalfLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LHalfLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LHalfLapJoint.get_main_cutting_frame", "api/generated/compas_timber.connections.LHalfLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LHalfLapJoint.sha256", "api/generated/compas_timber.connections.LHalfLapJoint.to_json", "api/generated/compas_timber.connections.LHalfLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LHalfLapJoint.validate_data", "api/generated/compas_timber.connections.LMiterJoint", "api/generated/compas_timber.connections.LMiterJoint.ToString", "api/generated/compas_timber.connections.LMiterJoint.add_features", "api/generated/compas_timber.connections.LMiterJoint.copy", "api/generated/compas_timber.connections.LMiterJoint.create", "api/generated/compas_timber.connections.LMiterJoint.from_json", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LMiterJoint.sha256", "api/generated/compas_timber.connections.LMiterJoint.to_json", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.validate_data", "api/generated/compas_timber.connections.LapJoint", "api/generated/compas_timber.connections.LapJoint.ToString", "api/generated/compas_timber.connections.LapJoint.add_features", "api/generated/compas_timber.connections.LapJoint.copy", "api/generated/compas_timber.connections.LapJoint.create", "api/generated/compas_timber.connections.LapJoint.from_json", "api/generated/compas_timber.connections.LapJoint.from_jsonstring", "api/generated/compas_timber.connections.LapJoint.get_cross_cutting_frame", "api/generated/compas_timber.connections.LapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.LapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.LapJoint.get_main_cutting_frame", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LapJoint.sha256", "api/generated/compas_timber.connections.LapJoint.to_json", "api/generated/compas_timber.connections.LapJoint.to_jsonstring", "api/generated/compas_timber.connections.LapJoint.validate_data", "api/generated/compas_timber.connections.TButtJoint", "api/generated/compas_timber.connections.TButtJoint.ToString", "api/generated/compas_timber.connections.TButtJoint.add_features", "api/generated/compas_timber.connections.TButtJoint.back_surface_main", "api/generated/compas_timber.connections.TButtJoint.copy", "api/generated/compas_timber.connections.TButtJoint.create", "api/generated/compas_timber.connections.TButtJoint.from_json", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring", "api/generated/compas_timber.connections.TButtJoint.front_back_surface_main", "api/generated/compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.TButtJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.TButtJoint.get_main_cutting_plane", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TButtJoint.sha256", "api/generated/compas_timber.connections.TButtJoint.side_surfaces_cross", "api/generated/compas_timber.connections.TButtJoint.subtraction_volume", "api/generated/compas_timber.connections.TButtJoint.to_json", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring", "api/generated/compas_timber.connections.TButtJoint.validate_data", "api/generated/compas_timber.connections.THalfLapJoint", "api/generated/compas_timber.connections.THalfLapJoint.ToString", "api/generated/compas_timber.connections.THalfLapJoint.add_features", "api/generated/compas_timber.connections.THalfLapJoint.copy", "api/generated/compas_timber.connections.THalfLapJoint.create", "api/generated/compas_timber.connections.THalfLapJoint.from_json", "api/generated/compas_timber.connections.THalfLapJoint.from_jsonstring", "api/generated/compas_timber.connections.THalfLapJoint.get_cross_cutting_frame", "api/generated/compas_timber.connections.THalfLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.THalfLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.THalfLapJoint.get_main_cutting_frame", "api/generated/compas_timber.connections.THalfLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.THalfLapJoint.sha256", "api/generated/compas_timber.connections.THalfLapJoint.to_json", "api/generated/compas_timber.connections.THalfLapJoint.to_jsonstring", "api/generated/compas_timber.connections.THalfLapJoint.validate_data", "api/generated/compas_timber.connections.XHalfLapJoint", "api/generated/compas_timber.connections.XHalfLapJoint.ToString", "api/generated/compas_timber.connections.XHalfLapJoint.add_features", "api/generated/compas_timber.connections.XHalfLapJoint.copy", "api/generated/compas_timber.connections.XHalfLapJoint.create", "api/generated/compas_timber.connections.XHalfLapJoint.from_json", "api/generated/compas_timber.connections.XHalfLapJoint.from_jsonstring", "api/generated/compas_timber.connections.XHalfLapJoint.get_cross_cutting_frame", "api/generated/compas_timber.connections.XHalfLapJoint.get_face_most_ortho_to_beam", "api/generated/compas_timber.connections.XHalfLapJoint.get_face_most_towards_beam", "api/generated/compas_timber.connections.XHalfLapJoint.get_main_cutting_frame", "api/generated/compas_timber.connections.XHalfLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XHalfLapJoint.sha256", "api/generated/compas_timber.connections.XHalfLapJoint.to_json", "api/generated/compas_timber.connections.XHalfLapJoint.to_jsonstring", "api/generated/compas_timber.connections.XHalfLapJoint.validate_data", "api/generated/compas_timber.connections.find_neighboring_beams", "api/generated/compas_timber.elements.Beam", "api/generated/compas_timber.elements.Beam.ToString", "api/generated/compas_timber.elements.Beam.add_blank_extension", "api/generated/compas_timber.elements.Beam.add_feature", "api/generated/compas_timber.elements.Beam.add_features", "api/generated/compas_timber.elements.Beam.compute_aabb", "api/generated/compas_timber.elements.Beam.compute_collision_mesh", "api/generated/compas_timber.elements.Beam.compute_geometry", "api/generated/compas_timber.elements.Beam.compute_obb", "api/generated/compas_timber.elements.Beam.compute_worldtransformation", "api/generated/compas_timber.elements.Beam.copy", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point", "api/generated/compas_timber.elements.Beam.extension_to_plane", "api/generated/compas_timber.elements.Beam.from_centerline", "api/generated/compas_timber.elements.Beam.from_endpoints", "api/generated/compas_timber.elements.Beam.from_json", "api/generated/compas_timber.elements.Beam.from_jsonstring", "api/generated/compas_timber.elements.Beam.remove_blank_extension", "api/generated/compas_timber.elements.Beam.remove_features", "api/generated/compas_timber.elements.Beam.sha256", "api/generated/compas_timber.elements.Beam.to_json", "api/generated/compas_timber.elements.Beam.to_jsonstring", "api/generated/compas_timber.elements.Beam.transform", "api/generated/compas_timber.elements.Beam.transformed", "api/generated/compas_timber.elements.Beam.validate_data", "api/generated/compas_timber.fabrication.BTLx", "api/generated/compas_timber.fabrication.BTLx.btlx_string", "api/generated/compas_timber.fabrication.BTLx.process_model", "api/generated/compas_timber.fabrication.BTLx.register_joint", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.create_process", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.get_params", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.process_joints", "api/generated/compas_timber.fabrication.BTLxJackCut", "api/generated/compas_timber.fabrication.BTLxJackCut.create_process", "api/generated/compas_timber.fabrication.BTLxJackCut.generate_process", "api/generated/compas_timber.fabrication.BTLxProcess", "api/generated/compas_timber.fabrication.FrenchRidgeFactory", "api/generated/compas_timber.fabrication.FrenchRidgeFactory.apply_processings", "api/generated/compas_timber.fabrication.LButtFactory", "api/generated/compas_timber.fabrication.LButtFactory.apply_processings", "api/generated/compas_timber.fabrication.LMiterFactory", "api/generated/compas_timber.fabrication.LMiterFactory.apply_processings", "api/generated/compas_timber.fabrication.TButtFactory", "api/generated/compas_timber.fabrication.TButtFactory.apply_processings", "api/generated/compas_timber.ghpython.CategoryRule", "api/generated/compas_timber.ghpython.CategoryRule.ToString", "api/generated/compas_timber.ghpython.CategoryRule.comply", "api/generated/compas_timber.ghpython.CategoryRule.reorder", "api/generated/compas_timber.ghpython.DebugInfomation", "api/generated/compas_timber.ghpython.DebugInfomation.ToString", "api/generated/compas_timber.ghpython.DebugInfomation.add_feature_error", "api/generated/compas_timber.ghpython.DebugInfomation.add_joint_error", "api/generated/compas_timber.ghpython.DirectRule", "api/generated/compas_timber.ghpython.DirectRule.ToString", "api/generated/compas_timber.ghpython.DirectRule.comply", "api/generated/compas_timber.ghpython.FeatureDefinition", "api/generated/compas_timber.ghpython.FeatureDefinition.ToString", "api/generated/compas_timber.ghpython.JointDefinition", "api/generated/compas_timber.ghpython.JointDefinition.ToString", "api/generated/compas_timber.ghpython.JointDefinition.is_identical", "api/generated/compas_timber.ghpython.JointDefinition.match", "api/generated/compas_timber.ghpython.TopologyRule", "api/generated/compas_timber.ghpython.TopologyRule.ToString", "api/generated/compas_timber.ghpython.TopologyRule.comply", "api/generated/compas_timber.model.TimberModel", "api/generated/compas_timber.model.TimberModel.ToString", "api/generated/compas_timber.model.TimberModel.add_beam", "api/generated/compas_timber.model.TimberModel.add_element", "api/generated/compas_timber.model.TimberModel.add_elements", "api/generated/compas_timber.model.TimberModel.add_group", "api/generated/compas_timber.model.TimberModel.add_interaction", "api/generated/compas_timber.model.TimberModel.add_joint", "api/generated/compas_timber.model.TimberModel.add_material", "api/generated/compas_timber.model.TimberModel.add_wall", "api/generated/compas_timber.model.TimberModel.assign_material", "api/generated/compas_timber.model.TimberModel.beam_by_guid", "api/generated/compas_timber.model.TimberModel.compute_aabb", "api/generated/compas_timber.model.TimberModel.compute_obb", "api/generated/compas_timber.model.TimberModel.copy", "api/generated/compas_timber.model.TimberModel.elements", "api/generated/compas_timber.model.TimberModel.elements_connected_by", "api/generated/compas_timber.model.TimberModel.from_json", "api/generated/compas_timber.model.TimberModel.from_jsonstring", "api/generated/compas_timber.model.TimberModel.has_element", "api/generated/compas_timber.model.TimberModel.has_interaction", "api/generated/compas_timber.model.TimberModel.has_material", "api/generated/compas_timber.model.TimberModel.interactions", "api/generated/compas_timber.model.TimberModel.materials", "api/generated/compas_timber.model.TimberModel.remove_element", "api/generated/compas_timber.model.TimberModel.remove_interaction", "api/generated/compas_timber.model.TimberModel.remove_joint", "api/generated/compas_timber.model.TimberModel.rotate", "api/generated/compas_timber.model.TimberModel.rotated", "api/generated/compas_timber.model.TimberModel.scale", "api/generated/compas_timber.model.TimberModel.scaled", "api/generated/compas_timber.model.TimberModel.set_topologies", "api/generated/compas_timber.model.TimberModel.sha256", "api/generated/compas_timber.model.TimberModel.to_json", "api/generated/compas_timber.model.TimberModel.to_jsonstring", "api/generated/compas_timber.model.TimberModel.transform", "api/generated/compas_timber.model.TimberModel.transform_numpy", "api/generated/compas_timber.model.TimberModel.transformed", "api/generated/compas_timber.model.TimberModel.transformed_numpy", "api/generated/compas_timber.model.TimberModel.translate", "api/generated/compas_timber.model.TimberModel.translated", "api/generated/compas_timber.model.TimberModel.validate_data", "api/generated/compas_timber.planning.Actor", "api/generated/compas_timber.planning.Actor.get_name", "api/generated/compas_timber.planning.BuildingPlan", "api/generated/compas_timber.planning.BuildingPlan.ToString", "api/generated/compas_timber.planning.BuildingPlan.add_step", "api/generated/compas_timber.planning.BuildingPlan.copy", "api/generated/compas_timber.planning.BuildingPlan.from_json", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.sha256", "api/generated/compas_timber.planning.BuildingPlan.to_json", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.validate_data", "api/generated/compas_timber.planning.SimpleSequenceGenerator", "api/generated/compas_timber.planning.Step", "api/generated/compas_timber.planning.Step.ToString", "api/generated/compas_timber.planning.Step.copy", "api/generated/compas_timber.planning.Step.from_json", "api/generated/compas_timber.planning.Step.from_jsonstring", "api/generated/compas_timber.planning.Step.sha256", "api/generated/compas_timber.planning.Step.to_json", "api/generated/compas_timber.planning.Step.to_jsonstring", "api/generated/compas_timber.planning.Step.transform", "api/generated/compas_timber.planning.Step.validate_data", "api/generated/compas_timber.rhino.find_neighboring_beams", "citing", "examples", "examples/create_joint", "index", "installation", "license", "tutorials", "tutorials/BTLx_contribution_guide", "tutorials/grasshopper/assembly", "tutorials/grasshopper/attributes", "tutorials/grasshopper/beam", "tutorials/grasshopper/examples", "tutorials/grasshopper/features", "tutorials/grasshopper/joints", "tutorials/grasshopper/rules", "tutorials/grasshopper/show", "tutorials/grasshopper/utils", "tutorials/grasshopper/workflow"], "filenames": ["api.rst", "api/compas_timber.connections.rst", "api/compas_timber.elements.rst", "api/compas_timber.fabrication.rst", "api/compas_timber.ghpython.rst", "api/compas_timber.model.rst", "api/compas_timber.planning.rst", "api/compas_timber.rhino.rst", "api/generated/compas_timber.connections.BeamJoinningError.rst", "api/generated/compas_timber.connections.ConnectionSolver.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_topology.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.ToString.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.add_features.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.check_geometry.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.copy.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.create.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.from_json.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.sha256.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.to_json.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.FrenchRidgeLapJoint.validate_data.rst", "api/generated/compas_timber.connections.Joint.rst", "api/generated/compas_timber.connections.Joint.ToString.rst", "api/generated/compas_timber.connections.Joint.add_features.rst", "api/generated/compas_timber.connections.Joint.copy.rst", "api/generated/compas_timber.connections.Joint.create.rst", "api/generated/compas_timber.connections.Joint.from_json.rst", "api/generated/compas_timber.connections.Joint.from_jsonstring.rst", "api/generated/compas_timber.connections.Joint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.Joint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.Joint.sha256.rst", "api/generated/compas_timber.connections.Joint.to_json.rst", "api/generated/compas_timber.connections.Joint.to_jsonstring.rst", "api/generated/compas_timber.connections.Joint.validate_data.rst", "api/generated/compas_timber.connections.JointTopology.rst", "api/generated/compas_timber.connections.JointTopology.get_name.rst", "api/generated/compas_timber.connections.LButtJoint.rst", "api/generated/compas_timber.connections.LButtJoint.ToString.rst", "api/generated/compas_timber.connections.LButtJoint.add_features.rst", "api/generated/compas_timber.connections.LButtJoint.back_surface_main.rst", "api/generated/compas_timber.connections.LButtJoint.copy.rst", "api/generated/compas_timber.connections.LButtJoint.create.rst", "api/generated/compas_timber.connections.LButtJoint.from_json.rst", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.front_back_surface_main.rst", "api/generated/compas_timber.connections.LButtJoint.get_cross_cutting_plane.rst", "api/generated/compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LButtJoint.get_main_cutting_plane.rst", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LButtJoint.sha256.rst", "api/generated/compas_timber.connections.LButtJoint.side_surfaces_cross.rst", "api/generated/compas_timber.connections.LButtJoint.subtraction_volume.rst", "api/generated/compas_timber.connections.LButtJoint.to_json.rst", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.validate_data.rst", "api/generated/compas_timber.connections.LHalfLapJoint.rst", "api/generated/compas_timber.connections.LHalfLapJoint.ToString.rst", "api/generated/compas_timber.connections.LHalfLapJoint.add_features.rst", "api/generated/compas_timber.connections.LHalfLapJoint.copy.rst", "api/generated/compas_timber.connections.LHalfLapJoint.create.rst", "api/generated/compas_timber.connections.LHalfLapJoint.from_json.rst", "api/generated/compas_timber.connections.LHalfLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LHalfLapJoint.get_cross_cutting_frame.rst", "api/generated/compas_timber.connections.LHalfLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LHalfLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LHalfLapJoint.get_main_cutting_frame.rst", "api/generated/compas_timber.connections.LHalfLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LHalfLapJoint.sha256.rst", "api/generated/compas_timber.connections.LHalfLapJoint.to_json.rst", "api/generated/compas_timber.connections.LHalfLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LHalfLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LMiterJoint.rst", "api/generated/compas_timber.connections.LMiterJoint.ToString.rst", "api/generated/compas_timber.connections.LMiterJoint.add_features.rst", "api/generated/compas_timber.connections.LMiterJoint.copy.rst", "api/generated/compas_timber.connections.LMiterJoint.create.rst", "api/generated/compas_timber.connections.LMiterJoint.from_json.rst", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes.rst", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LMiterJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LMiterJoint.sha256.rst", "api/generated/compas_timber.connections.LMiterJoint.to_json.rst", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.validate_data.rst", "api/generated/compas_timber.connections.LapJoint.rst", "api/generated/compas_timber.connections.LapJoint.ToString.rst", "api/generated/compas_timber.connections.LapJoint.add_features.rst", "api/generated/compas_timber.connections.LapJoint.copy.rst", "api/generated/compas_timber.connections.LapJoint.create.rst", "api/generated/compas_timber.connections.LapJoint.from_json.rst", "api/generated/compas_timber.connections.LapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.get_cross_cutting_frame.rst", "api/generated/compas_timber.connections.LapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.LapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.LapJoint.get_main_cutting_frame.rst", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LapJoint.sha256.rst", "api/generated/compas_timber.connections.LapJoint.to_json.rst", "api/generated/compas_timber.connections.LapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.validate_data.rst", "api/generated/compas_timber.connections.TButtJoint.rst", "api/generated/compas_timber.connections.TButtJoint.ToString.rst", "api/generated/compas_timber.connections.TButtJoint.add_features.rst", "api/generated/compas_timber.connections.TButtJoint.back_surface_main.rst", "api/generated/compas_timber.connections.TButtJoint.copy.rst", "api/generated/compas_timber.connections.TButtJoint.create.rst", "api/generated/compas_timber.connections.TButtJoint.from_json.rst", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.front_back_surface_main.rst", "api/generated/compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.TButtJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.TButtJoint.get_main_cutting_plane.rst", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TButtJoint.sha256.rst", "api/generated/compas_timber.connections.TButtJoint.side_surfaces_cross.rst", "api/generated/compas_timber.connections.TButtJoint.subtraction_volume.rst", "api/generated/compas_timber.connections.TButtJoint.to_json.rst", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.validate_data.rst", "api/generated/compas_timber.connections.THalfLapJoint.rst", "api/generated/compas_timber.connections.THalfLapJoint.ToString.rst", "api/generated/compas_timber.connections.THalfLapJoint.add_features.rst", "api/generated/compas_timber.connections.THalfLapJoint.copy.rst", "api/generated/compas_timber.connections.THalfLapJoint.create.rst", "api/generated/compas_timber.connections.THalfLapJoint.from_json.rst", "api/generated/compas_timber.connections.THalfLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.THalfLapJoint.get_cross_cutting_frame.rst", "api/generated/compas_timber.connections.THalfLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.THalfLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.THalfLapJoint.get_main_cutting_frame.rst", "api/generated/compas_timber.connections.THalfLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.THalfLapJoint.sha256.rst", "api/generated/compas_timber.connections.THalfLapJoint.to_json.rst", "api/generated/compas_timber.connections.THalfLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.THalfLapJoint.validate_data.rst", "api/generated/compas_timber.connections.XHalfLapJoint.rst", "api/generated/compas_timber.connections.XHalfLapJoint.ToString.rst", "api/generated/compas_timber.connections.XHalfLapJoint.add_features.rst", "api/generated/compas_timber.connections.XHalfLapJoint.copy.rst", "api/generated/compas_timber.connections.XHalfLapJoint.create.rst", "api/generated/compas_timber.connections.XHalfLapJoint.from_json.rst", "api/generated/compas_timber.connections.XHalfLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XHalfLapJoint.get_cross_cutting_frame.rst", "api/generated/compas_timber.connections.XHalfLapJoint.get_face_most_ortho_to_beam.rst", "api/generated/compas_timber.connections.XHalfLapJoint.get_face_most_towards_beam.rst", "api/generated/compas_timber.connections.XHalfLapJoint.get_main_cutting_frame.rst", "api/generated/compas_timber.connections.XHalfLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XHalfLapJoint.sha256.rst", "api/generated/compas_timber.connections.XHalfLapJoint.to_json.rst", "api/generated/compas_timber.connections.XHalfLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XHalfLapJoint.validate_data.rst", "api/generated/compas_timber.connections.find_neighboring_beams.rst", "api/generated/compas_timber.elements.Beam.rst", "api/generated/compas_timber.elements.Beam.ToString.rst", "api/generated/compas_timber.elements.Beam.add_blank_extension.rst", "api/generated/compas_timber.elements.Beam.add_feature.rst", "api/generated/compas_timber.elements.Beam.add_features.rst", "api/generated/compas_timber.elements.Beam.compute_aabb.rst", "api/generated/compas_timber.elements.Beam.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Beam.compute_geometry.rst", "api/generated/compas_timber.elements.Beam.compute_obb.rst", "api/generated/compas_timber.elements.Beam.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Beam.copy.rst", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point.rst", "api/generated/compas_timber.elements.Beam.extension_to_plane.rst", "api/generated/compas_timber.elements.Beam.from_centerline.rst", "api/generated/compas_timber.elements.Beam.from_endpoints.rst", "api/generated/compas_timber.elements.Beam.from_json.rst", "api/generated/compas_timber.elements.Beam.from_jsonstring.rst", "api/generated/compas_timber.elements.Beam.remove_blank_extension.rst", "api/generated/compas_timber.elements.Beam.remove_features.rst", "api/generated/compas_timber.elements.Beam.sha256.rst", "api/generated/compas_timber.elements.Beam.to_json.rst", "api/generated/compas_timber.elements.Beam.to_jsonstring.rst", "api/generated/compas_timber.elements.Beam.transform.rst", "api/generated/compas_timber.elements.Beam.transformed.rst", "api/generated/compas_timber.elements.Beam.validate_data.rst", "api/generated/compas_timber.fabrication.BTLx.rst", "api/generated/compas_timber.fabrication.BTLx.btlx_string.rst", "api/generated/compas_timber.fabrication.BTLx.process_model.rst", "api/generated/compas_timber.fabrication.BTLx.register_joint.rst", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.rst", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.create_process.rst", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.get_params.rst", "api/generated/compas_timber.fabrication.BTLxFrenchRidgeLap.process_joints.rst", "api/generated/compas_timber.fabrication.BTLxJackCut.rst", "api/generated/compas_timber.fabrication.BTLxJackCut.create_process.rst", "api/generated/compas_timber.fabrication.BTLxJackCut.generate_process.rst", "api/generated/compas_timber.fabrication.BTLxProcess.rst", "api/generated/compas_timber.fabrication.FrenchRidgeFactory.rst", "api/generated/compas_timber.fabrication.FrenchRidgeFactory.apply_processings.rst", "api/generated/compas_timber.fabrication.LButtFactory.rst", "api/generated/compas_timber.fabrication.LButtFactory.apply_processings.rst", "api/generated/compas_timber.fabrication.LMiterFactory.rst", "api/generated/compas_timber.fabrication.LMiterFactory.apply_processings.rst", "api/generated/compas_timber.fabrication.TButtFactory.rst", "api/generated/compas_timber.fabrication.TButtFactory.apply_processings.rst", "api/generated/compas_timber.ghpython.CategoryRule.rst", "api/generated/compas_timber.ghpython.CategoryRule.ToString.rst", "api/generated/compas_timber.ghpython.CategoryRule.comply.rst", "api/generated/compas_timber.ghpython.CategoryRule.reorder.rst", "api/generated/compas_timber.ghpython.DebugInfomation.rst", "api/generated/compas_timber.ghpython.DebugInfomation.ToString.rst", "api/generated/compas_timber.ghpython.DebugInfomation.add_feature_error.rst", "api/generated/compas_timber.ghpython.DebugInfomation.add_joint_error.rst", "api/generated/compas_timber.ghpython.DirectRule.rst", "api/generated/compas_timber.ghpython.DirectRule.ToString.rst", "api/generated/compas_timber.ghpython.DirectRule.comply.rst", "api/generated/compas_timber.ghpython.FeatureDefinition.rst", "api/generated/compas_timber.ghpython.FeatureDefinition.ToString.rst", "api/generated/compas_timber.ghpython.JointDefinition.rst", "api/generated/compas_timber.ghpython.JointDefinition.ToString.rst", "api/generated/compas_timber.ghpython.JointDefinition.is_identical.rst", "api/generated/compas_timber.ghpython.JointDefinition.match.rst", "api/generated/compas_timber.ghpython.TopologyRule.rst", "api/generated/compas_timber.ghpython.TopologyRule.ToString.rst", "api/generated/compas_timber.ghpython.TopologyRule.comply.rst", "api/generated/compas_timber.model.TimberModel.rst", "api/generated/compas_timber.model.TimberModel.ToString.rst", "api/generated/compas_timber.model.TimberModel.add_beam.rst", "api/generated/compas_timber.model.TimberModel.add_element.rst", "api/generated/compas_timber.model.TimberModel.add_elements.rst", "api/generated/compas_timber.model.TimberModel.add_group.rst", "api/generated/compas_timber.model.TimberModel.add_interaction.rst", "api/generated/compas_timber.model.TimberModel.add_joint.rst", "api/generated/compas_timber.model.TimberModel.add_material.rst", "api/generated/compas_timber.model.TimberModel.add_wall.rst", "api/generated/compas_timber.model.TimberModel.assign_material.rst", "api/generated/compas_timber.model.TimberModel.beam_by_guid.rst", "api/generated/compas_timber.model.TimberModel.compute_aabb.rst", "api/generated/compas_timber.model.TimberModel.compute_obb.rst", "api/generated/compas_timber.model.TimberModel.copy.rst", "api/generated/compas_timber.model.TimberModel.elements.rst", "api/generated/compas_timber.model.TimberModel.elements_connected_by.rst", "api/generated/compas_timber.model.TimberModel.from_json.rst", "api/generated/compas_timber.model.TimberModel.from_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.has_element.rst", "api/generated/compas_timber.model.TimberModel.has_interaction.rst", "api/generated/compas_timber.model.TimberModel.has_material.rst", "api/generated/compas_timber.model.TimberModel.interactions.rst", "api/generated/compas_timber.model.TimberModel.materials.rst", "api/generated/compas_timber.model.TimberModel.remove_element.rst", "api/generated/compas_timber.model.TimberModel.remove_interaction.rst", "api/generated/compas_timber.model.TimberModel.remove_joint.rst", "api/generated/compas_timber.model.TimberModel.rotate.rst", "api/generated/compas_timber.model.TimberModel.rotated.rst", "api/generated/compas_timber.model.TimberModel.scale.rst", "api/generated/compas_timber.model.TimberModel.scaled.rst", "api/generated/compas_timber.model.TimberModel.set_topologies.rst", "api/generated/compas_timber.model.TimberModel.sha256.rst", "api/generated/compas_timber.model.TimberModel.to_json.rst", "api/generated/compas_timber.model.TimberModel.to_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.transform.rst", "api/generated/compas_timber.model.TimberModel.transform_numpy.rst", "api/generated/compas_timber.model.TimberModel.transformed.rst", "api/generated/compas_timber.model.TimberModel.transformed_numpy.rst", "api/generated/compas_timber.model.TimberModel.translate.rst", "api/generated/compas_timber.model.TimberModel.translated.rst", "api/generated/compas_timber.model.TimberModel.validate_data.rst", "api/generated/compas_timber.planning.Actor.rst", "api/generated/compas_timber.planning.Actor.get_name.rst", "api/generated/compas_timber.planning.BuildingPlan.rst", "api/generated/compas_timber.planning.BuildingPlan.ToString.rst", "api/generated/compas_timber.planning.BuildingPlan.add_step.rst", "api/generated/compas_timber.planning.BuildingPlan.copy.rst", "api/generated/compas_timber.planning.BuildingPlan.from_json.rst", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.sha256.rst", "api/generated/compas_timber.planning.BuildingPlan.to_json.rst", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.validate_data.rst", "api/generated/compas_timber.planning.SimpleSequenceGenerator.rst", "api/generated/compas_timber.planning.Step.rst", "api/generated/compas_timber.planning.Step.ToString.rst", "api/generated/compas_timber.planning.Step.copy.rst", "api/generated/compas_timber.planning.Step.from_json.rst", "api/generated/compas_timber.planning.Step.from_jsonstring.rst", "api/generated/compas_timber.planning.Step.sha256.rst", "api/generated/compas_timber.planning.Step.to_json.rst", "api/generated/compas_timber.planning.Step.to_jsonstring.rst", "api/generated/compas_timber.planning.Step.transform.rst", "api/generated/compas_timber.planning.Step.validate_data.rst", "api/generated/compas_timber.rhino.find_neighboring_beams.rst", "citing.rst", "examples.rst", "examples/create_joint.rst", "index.rst", "installation.rst", "license.rst", "tutorials.rst", "tutorials/BTLx_contribution_guide.rst", "tutorials/grasshopper/assembly.rst", "tutorials/grasshopper/attributes.rst", "tutorials/grasshopper/beam.rst", "tutorials/grasshopper/examples.rst", "tutorials/grasshopper/features.rst", "tutorials/grasshopper/joints.rst", "tutorials/grasshopper/rules.rst", "tutorials/grasshopper/show.rst", "tutorials/grasshopper/utils.rst", "tutorials/grasshopper/workflow.rst"], "titles": ["API Reference", "compas_timber.connections", "compas_timber.elements", "compas_timber.fabrication", "compas_timber.ghpython", "compas_timber.model", "compas_timber.planning", "rhino", "BeamJoinningError", "ConnectionSolver", "ConnectionSolver.find_intersecting_pairs", "ConnectionSolver.find_topology", "FrenchRidgeLapJoint", "FrenchRidgeLapJoint.ToString", "FrenchRidgeLapJoint.add_features", "FrenchRidgeLapJoint.check_geometry", "FrenchRidgeLapJoint.copy", "FrenchRidgeLapJoint.create", "FrenchRidgeLapJoint.from_json", "FrenchRidgeLapJoint.from_jsonstring", "FrenchRidgeLapJoint.get_face_most_ortho_to_beam", "FrenchRidgeLapJoint.get_face_most_towards_beam", "FrenchRidgeLapJoint.restore_beams_from_keys", "FrenchRidgeLapJoint.sha256", "FrenchRidgeLapJoint.to_json", "FrenchRidgeLapJoint.to_jsonstring", "FrenchRidgeLapJoint.validate_data", "Joint", "Joint.ToString", "Joint.add_features", "Joint.copy", "Joint.create", "Joint.from_json", "Joint.from_jsonstring", "Joint.get_face_most_ortho_to_beam", "Joint.get_face_most_towards_beam", "Joint.restore_beams_from_keys", "Joint.sha256", "Joint.to_json", "Joint.to_jsonstring", "Joint.validate_data", "JointTopology", "JointTopology.get_name", "LButtJoint", "LButtJoint.ToString", "LButtJoint.add_features", "LButtJoint.back_surface_main", "LButtJoint.copy", "LButtJoint.create", "LButtJoint.from_json", "LButtJoint.from_jsonstring", "LButtJoint.front_back_surface_main", "LButtJoint.get_cross_cutting_plane", "LButtJoint.get_face_most_ortho_to_beam", "LButtJoint.get_face_most_towards_beam", "LButtJoint.get_main_cutting_plane", "LButtJoint.restore_beams_from_keys", "LButtJoint.sha256", "LButtJoint.side_surfaces_cross", "LButtJoint.subtraction_volume", "LButtJoint.to_json", "LButtJoint.to_jsonstring", "LButtJoint.validate_data", "LHalfLapJoint", "LHalfLapJoint.ToString", "LHalfLapJoint.add_features", "LHalfLapJoint.copy", "LHalfLapJoint.create", "LHalfLapJoint.from_json", "LHalfLapJoint.from_jsonstring", "LHalfLapJoint.get_cross_cutting_frame", "LHalfLapJoint.get_face_most_ortho_to_beam", "LHalfLapJoint.get_face_most_towards_beam", "LHalfLapJoint.get_main_cutting_frame", "LHalfLapJoint.restore_beams_from_keys", "LHalfLapJoint.sha256", "LHalfLapJoint.to_json", "LHalfLapJoint.to_jsonstring", "LHalfLapJoint.validate_data", "LMiterJoint", "LMiterJoint.ToString", "LMiterJoint.add_features", "LMiterJoint.copy", "LMiterJoint.create", "LMiterJoint.from_json", "LMiterJoint.from_jsonstring", "LMiterJoint.get_cutting_planes", "LMiterJoint.get_face_most_ortho_to_beam", "LMiterJoint.get_face_most_towards_beam", "LMiterJoint.restore_beams_from_keys", "LMiterJoint.sha256", "LMiterJoint.to_json", "LMiterJoint.to_jsonstring", "LMiterJoint.validate_data", "LapJoint", "LapJoint.ToString", "LapJoint.add_features", "LapJoint.copy", "LapJoint.create", "LapJoint.from_json", "LapJoint.from_jsonstring", "LapJoint.get_cross_cutting_frame", "LapJoint.get_face_most_ortho_to_beam", "LapJoint.get_face_most_towards_beam", "LapJoint.get_main_cutting_frame", "LapJoint.restore_beams_from_keys", "LapJoint.sha256", "LapJoint.to_json", "LapJoint.to_jsonstring", "LapJoint.validate_data", "TButtJoint", "TButtJoint.ToString", "TButtJoint.add_features", "TButtJoint.back_surface_main", "TButtJoint.copy", "TButtJoint.create", "TButtJoint.from_json", "TButtJoint.from_jsonstring", "TButtJoint.front_back_surface_main", "TButtJoint.get_face_most_ortho_to_beam", "TButtJoint.get_face_most_towards_beam", "TButtJoint.get_main_cutting_plane", "TButtJoint.restore_beams_from_keys", "TButtJoint.sha256", "TButtJoint.side_surfaces_cross", "TButtJoint.subtraction_volume", "TButtJoint.to_json", "TButtJoint.to_jsonstring", "TButtJoint.validate_data", "THalfLapJoint", "THalfLapJoint.ToString", "THalfLapJoint.add_features", "THalfLapJoint.copy", "THalfLapJoint.create", "THalfLapJoint.from_json", "THalfLapJoint.from_jsonstring", "THalfLapJoint.get_cross_cutting_frame", "THalfLapJoint.get_face_most_ortho_to_beam", "THalfLapJoint.get_face_most_towards_beam", "THalfLapJoint.get_main_cutting_frame", "THalfLapJoint.restore_beams_from_keys", "THalfLapJoint.sha256", "THalfLapJoint.to_json", "THalfLapJoint.to_jsonstring", "THalfLapJoint.validate_data", "XHalfLapJoint", "XHalfLapJoint.ToString", "XHalfLapJoint.add_features", "XHalfLapJoint.copy", "XHalfLapJoint.create", "XHalfLapJoint.from_json", "XHalfLapJoint.from_jsonstring", "XHalfLapJoint.get_cross_cutting_frame", "XHalfLapJoint.get_face_most_ortho_to_beam", "XHalfLapJoint.get_face_most_towards_beam", "XHalfLapJoint.get_main_cutting_frame", "XHalfLapJoint.restore_beams_from_keys", "XHalfLapJoint.sha256", "XHalfLapJoint.to_json", "XHalfLapJoint.to_jsonstring", "XHalfLapJoint.validate_data", "find_neighboring_beams", "Beam", "Beam.ToString", "Beam.add_blank_extension", "Beam.add_feature", "Beam.add_features", "Beam.compute_aabb", "Beam.compute_collision_mesh", "Beam.compute_geometry", "Beam.compute_obb", "Beam.compute_worldtransformation", "Beam.copy", "Beam.endpoint_closest_to_point", "Beam.extension_to_plane", "Beam.from_centerline", "Beam.from_endpoints", "Beam.from_json", "Beam.from_jsonstring", "Beam.remove_blank_extension", "Beam.remove_features", "Beam.sha256", "Beam.to_json", "Beam.to_jsonstring", "Beam.transform", "Beam.transformed", "Beam.validate_data", "BTLx", "BTLx.btlx_string", "BTLx.process_model", "BTLx.register_joint", "BTLxFrenchRidgeLap", "BTLxFrenchRidgeLap.create_process", "BTLxFrenchRidgeLap.get_params", "BTLxFrenchRidgeLap.process_joints", "BTLxJackCut", "BTLxJackCut.create_process", "BTLxJackCut.generate_process", "BTLxProcess", "FrenchRidgeFactory", "FrenchRidgeFactory.apply_processings", "LButtFactory", "LButtFactory.apply_processings", "LMiterFactory", "LMiterFactory.apply_processings", "TButtFactory", "TButtFactory.apply_processings", "CategoryRule", "CategoryRule.ToString", "CategoryRule.comply", "CategoryRule.reorder", "DebugInfomation", "DebugInfomation.ToString", "DebugInfomation.add_feature_error", "DebugInfomation.add_joint_error", "DirectRule", "DirectRule.ToString", "DirectRule.comply", "FeatureDefinition", "FeatureDefinition.ToString", "JointDefinition", "JointDefinition.ToString", "JointDefinition.is_identical", "JointDefinition.match", "TopologyRule", "TopologyRule.ToString", "TopologyRule.comply", "TimberModel", "TimberModel.ToString", "TimberModel.add_beam", "TimberModel.add_element", "TimberModel.add_elements", "TimberModel.add_group", "TimberModel.add_interaction", "TimberModel.add_joint", "TimberModel.add_material", "TimberModel.add_wall", "TimberModel.assign_material", "TimberModel.beam_by_guid", "TimberModel.compute_aabb", "TimberModel.compute_obb", "TimberModel.copy", "TimberModel.elements", "TimberModel.elements_connected_by", "TimberModel.from_json", "TimberModel.from_jsonstring", "TimberModel.has_element", "TimberModel.has_interaction", "TimberModel.has_material", "TimberModel.interactions", "TimberModel.materials", "TimberModel.remove_element", "TimberModel.remove_interaction", "TimberModel.remove_joint", "TimberModel.rotate", "TimberModel.rotated", "TimberModel.scale", "TimberModel.scaled", "TimberModel.set_topologies", "TimberModel.sha256", "TimberModel.to_json", "TimberModel.to_jsonstring", "TimberModel.transform", "TimberModel.transform_numpy", "TimberModel.transformed", "TimberModel.transformed_numpy", "TimberModel.translate", "TimberModel.translated", "TimberModel.validate_data", "Actor", "Actor.get_name", "BuildingPlan", "BuildingPlan.ToString", "BuildingPlan.add_step", "BuildingPlan.copy", "BuildingPlan.from_json", "BuildingPlan.from_jsonstring", "BuildingPlan.sha256", "BuildingPlan.to_json", "BuildingPlan.to_jsonstring", "BuildingPlan.validate_data", "SimpleSequenceGenerator", "Step", "Step.ToString", "Step.copy", "Step.from_json", "Step.from_jsonstring", "Step.sha256", "Step.to_json", "Step.to_jsonstring", "Step.transform", "Step.validate_data", "find_neighboring_beams", "Citing", "Examples", "Create Joint", "COMPAS Timber Documentation", "Installation", "License", "Grasshopper plugin", "BTLx Contribution Guide", "Assembly", "Attributes", "Beam", "Examples", "Features", "Joints", "Joint Rules", "Show", "Utils", "Workflow"], "terms": {"compas_timb": [0, 8, 9, 12, 17, 27, 31, 36, 41, 43, 48, 63, 67, 79, 83, 94, 98, 110, 115, 129, 133, 145, 149, 161, 162, 187, 190, 191, 195, 198, 199, 201, 203, 205, 207, 211, 215, 218, 220, 224, 227, 269, 271, 281, 282, 292, 293, 296, 297], "model": [0, 12, 17, 22, 31, 36, 43, 48, 56, 63, 67, 74, 79, 83, 89, 94, 98, 105, 110, 115, 122, 129, 133, 140, 145, 149, 156, 171, 187, 189, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 246, 248, 249, 250, 251, 253, 258, 262, 269, 281, 296], "element": [0, 161, 162, 167, 168, 169, 170, 171, 173, 184, 185, 198, 227, 230, 231, 233, 237, 243, 246, 247, 249, 251, 252, 281, 282, 296], "connect": [0, 8, 9, 12, 13, 17, 27, 28, 31, 36, 41, 43, 44, 48, 63, 64, 67, 79, 80, 83, 94, 95, 98, 110, 111, 115, 129, 130, 133, 145, 146, 149, 161, 163, 200, 202, 204, 206, 224, 228, 243, 272, 283, 296, 298, 301, 306], "fabric": [0, 187, 190, 191, 194, 195, 198, 199, 201, 203, 205, 293, 296], "plan": [0, 269, 271, 281, 282, 296], "ghpython": [0, 207, 211, 215, 218, 220, 224, 296, 299], "rhino": [0, 13, 28, 44, 64, 80, 95, 111, 130, 146, 161, 163, 228, 272, 283, 292, 294, 296, 297, 302, 303, 307, 309], "The": [7, 8, 12, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 47, 48, 49, 50, 53, 54, 60, 61, 62, 63, 66, 67, 68, 69, 71, 72, 76, 77, 78, 82, 83, 84, 85, 87, 88, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 107, 108, 109, 110, 114, 115, 116, 117, 119, 120, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 158, 159, 160, 161, 162, 164, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 190, 191, 195, 198, 200, 202, 204, 206, 210, 224, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 241, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 274, 275, 276, 278, 279, 280, 284, 285, 286, 288, 289, 291, 292, 298, 299, 302, 303, 305, 306, 307, 309, 310], "modul": [7, 198, 296, 300], "contain": [7, 8, 10, 12, 17, 18, 19, 20, 21, 31, 32, 33, 34, 35, 48, 49, 50, 53, 54, 67, 68, 69, 71, 72, 83, 84, 85, 87, 88, 98, 99, 100, 102, 103, 115, 116, 117, 119, 120, 133, 134, 135, 137, 138, 149, 150, 151, 153, 154, 161, 162, 177, 178, 210, 211, 218, 220, 227, 230, 242, 244, 245, 246, 248, 250, 262, 271, 275, 276, 282, 285, 286, 292], "function": [7, 94, 161, 198, 299, 300, 306], "type": [7, 11, 12, 13, 16, 18, 19, 26, 28, 30, 32, 33, 40, 43, 44, 47, 49, 50, 62, 63, 64, 66, 68, 69, 78, 79, 80, 82, 84, 85, 93, 94, 95, 97, 99, 100, 109, 110, 111, 114, 116, 117, 128, 129, 130, 132, 134, 135, 144, 145, 146, 148, 150, 151, 160, 163, 172, 177, 178, 186, 190, 191, 194, 198, 220, 224, 228, 241, 243, 244, 245, 268, 269, 272, 274, 275, 276, 280, 282, 283, 284, 285, 286, 291, 296, 300, 301, 307, 310], "meant": 7, "us": [7, 8, 10, 11, 12, 13, 15, 23, 26, 27, 28, 37, 40, 42, 43, 44, 57, 62, 63, 64, 75, 78, 79, 80, 90, 93, 94, 95, 106, 109, 110, 111, 123, 128, 129, 130, 141, 144, 145, 146, 157, 160, 161, 163, 174, 181, 186, 187, 194, 210, 228, 258, 259, 263, 264, 265, 266, 267, 268, 270, 272, 277, 280, 282, 283, 287, 291, 292, 293, 296, 298, 299, 300, 302, 303, 305, 306, 307, 309], "context": 7, "except": [8, 233], "sourc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 302, 303], "base": [8, 9, 12, 27, 41, 43, 63, 79, 94, 110, 129, 145, 162, 169, 171, 187, 191, 195, 198, 199, 201, 203, 205, 207, 211, 215, 218, 220, 224, 227, 254, 255, 269, 271, 281, 282, 301, 308, 310], "indic": [8, 12, 175, 176, 191, 302, 303], "an": [8, 10, 12, 16, 17, 18, 19, 24, 25, 26, 30, 31, 32, 33, 38, 39, 40, 43, 47, 48, 49, 50, 60, 61, 62, 63, 66, 67, 68, 69, 76, 77, 78, 79, 82, 83, 84, 85, 91, 92, 93, 94, 97, 98, 99, 100, 107, 108, 109, 110, 114, 115, 116, 117, 126, 127, 128, 129, 132, 133, 134, 135, 142, 143, 144, 145, 148, 149, 150, 151, 158, 159, 160, 162, 172, 177, 178, 182, 183, 186, 193, 197, 230, 233, 234, 237, 241, 244, 245, 247, 251, 260, 261, 268, 269, 274, 275, 276, 278, 279, 280, 284, 285, 286, 288, 289, 291, 293, 294, 296, 297, 298, 299, 301, 302, 303, 306], "error": [8, 167, 170, 211, 213, 214, 301, 302], "ha": [8, 18, 19, 32, 33, 49, 50, 68, 69, 84, 85, 99, 100, 116, 117, 134, 135, 150, 151, 161, 177, 178, 244, 245, 275, 276, 282, 285, 286, 303, 309], "occur": [8, 211, 301], "while": [8, 306], "try": 8, "join": [8, 12, 17, 27, 31, 43, 48, 63, 67, 79, 83, 94, 98, 110, 115, 129, 133, 145, 149, 191, 211, 215, 220, 234, 301], "two": [8, 11, 12, 17, 27, 31, 43, 48, 63, 67, 79, 83, 98, 115, 133, 149, 173, 210, 215, 233, 234, 247, 252, 306, 307], "more": [8, 166, 296, 299, 300, 303, 306], "beam": [8, 9, 10, 11, 12, 14, 17, 20, 21, 22, 27, 29, 31, 34, 35, 36, 43, 45, 48, 53, 54, 56, 63, 65, 67, 71, 72, 74, 79, 81, 83, 87, 88, 89, 94, 96, 98, 102, 103, 105, 110, 112, 115, 119, 120, 122, 129, 131, 133, 137, 138, 140, 145, 147, 149, 153, 154, 156, 161, 191, 195, 207, 209, 210, 211, 215, 217, 218, 220, 223, 226, 227, 229, 234, 238, 292, 295, 296, 299, 301, 302, 305, 306, 307, 308, 309, 310], "thi": [8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 43, 44, 45, 47, 48, 49, 50, 53, 54, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 93, 95, 96, 97, 98, 99, 100, 102, 103, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 160, 161, 162, 163, 164, 171, 172, 174, 177, 178, 179, 186, 191, 193, 194, 197, 198, 200, 202, 204, 206, 207, 209, 210, 217, 218, 220, 223, 224, 226, 227, 228, 229, 236, 241, 244, 245, 253, 255, 257, 264, 265, 267, 268, 272, 274, 275, 276, 280, 282, 283, 284, 285, 286, 291, 292, 294, 298, 300, 302, 306, 310], "should": [8, 14, 27, 29, 36, 63, 65, 94, 96, 129, 131, 145, 147, 161, 164, 198, 218, 230, 234, 300], "calcul": [8, 14, 20, 21, 29, 34, 35, 53, 54, 65, 71, 72, 87, 88, 96, 102, 103, 119, 120, 131, 137, 138, 147, 153, 154, 227, 258], "featur": [8, 14, 27, 29, 45, 63, 65, 81, 96, 112, 131, 147, 162, 165, 166, 169, 180, 211, 218, 296, 299, 301, 303, 310], "which": [8, 10, 11, 12, 15, 17, 20, 21, 31, 34, 35, 43, 48, 53, 54, 63, 67, 71, 72, 79, 83, 87, 88, 98, 102, 103, 110, 115, 119, 120, 129, 133, 137, 138, 145, 149, 153, 154, 161, 164, 173, 174, 179, 191, 198, 218, 224, 232, 269, 271, 282, 300, 301, 303], "appli": [8, 14, 29, 65, 96, 131, 147, 184, 185, 191, 198, 200, 202, 204, 206, 218, 224, 262, 300, 306, 307, 310], "joint": [8, 9, 12, 14, 17, 41, 43, 45, 48, 63, 65, 67, 79, 81, 83, 94, 96, 98, 110, 112, 115, 129, 131, 133, 145, 147, 149, 164, 179, 187, 190, 191, 192, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 211, 215, 220, 224, 227, 234, 253, 294, 296, 299, 300, 301, 303, 308, 310], "attribut": [8, 12, 27, 41, 43, 63, 79, 94, 110, 162, 187, 191, 198, 207, 210, 211, 227, 232, 281, 282, 296, 299, 300, 303], "list": [8, 10, 12, 17, 27, 31, 48, 63, 67, 83, 98, 115, 133, 149, 161, 162, 165, 166, 173, 180, 187, 198, 209, 211, 217, 226, 227, 231, 237, 243, 282, 292, 300, 307, 308], "were": [8, 11, 27, 302], "suppos": 8, "debug_geometri": 8, "geometri": [8, 162, 168, 169, 170, 171, 184, 185, 239, 240, 254, 255, 257, 262, 266, 267, 282, 292, 296, 299, 301, 303, 305, 306, 309, 310], "A": [8, 10, 12, 17, 27, 31, 48, 63, 67, 83, 98, 115, 133, 149, 161, 162, 165, 175, 176, 187, 200, 202, 204, 206, 210, 227, 230, 235, 248, 293, 298, 303, 306], "can": [8, 26, 40, 62, 78, 93, 109, 128, 144, 160, 186, 198, 230, 268, 271, 280, 282, 291, 294, 299, 300, 303, 306, 307], "visual": [8, 187, 188, 211, 271, 282, 294], "debug_info": 8, "str": [8, 12, 18, 19, 23, 24, 25, 27, 32, 33, 37, 38, 39, 42, 49, 50, 57, 60, 61, 63, 68, 69, 75, 76, 77, 84, 85, 90, 91, 92, 99, 100, 106, 107, 108, 116, 117, 123, 126, 127, 134, 135, 141, 142, 143, 150, 151, 157, 158, 159, 173, 177, 178, 181, 182, 183, 187, 191, 195, 198, 232, 238, 244, 245, 259, 260, 261, 270, 275, 276, 277, 278, 279, 282, 285, 286, 287, 288, 289], "string": [8, 12, 13, 19, 25, 28, 33, 39, 42, 44, 50, 61, 63, 64, 69, 77, 80, 85, 92, 95, 100, 108, 111, 117, 127, 130, 135, 143, 146, 151, 159, 163, 178, 183, 187, 188, 228, 245, 261, 270, 272, 276, 279, 283, 286, 289, 302, 303, 307], "debug": [8, 211, 301], "inform": [8, 211, 296, 301, 309], "about": [8, 296], "wa": [8, 14, 29, 65, 96, 131, 147], "class": [9, 12, 13, 27, 28, 41, 43, 44, 63, 64, 79, 80, 94, 95, 110, 111, 129, 130, 145, 146, 162, 163, 187, 190, 191, 195, 198, 199, 201, 203, 205, 207, 211, 215, 218, 220, 224, 227, 228, 234, 262, 269, 271, 272, 281, 282, 283, 296, 300], "object": [9, 10, 13, 16, 17, 18, 19, 24, 25, 26, 28, 30, 31, 32, 33, 36, 38, 39, 40, 41, 44, 47, 48, 49, 50, 60, 61, 62, 64, 66, 67, 68, 69, 76, 77, 78, 80, 82, 83, 84, 85, 91, 92, 93, 95, 97, 98, 99, 100, 107, 108, 109, 111, 114, 115, 116, 117, 126, 127, 128, 130, 132, 133, 134, 135, 142, 143, 144, 146, 148, 149, 150, 151, 158, 159, 160, 161, 163, 172, 177, 178, 182, 183, 186, 187, 191, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 211, 218, 220, 228, 233, 234, 241, 244, 245, 253, 260, 261, 268, 269, 272, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 288, 289, 291, 296, 301, 302, 303, 309], "provid": [9, 209, 217, 226, 230, 237, 298, 299, 301, 303], "tool": [9, 296, 299, 308, 309], "detect": [9, 301], "intersect": [9, 10, 11], "topologi": [9, 11, 12, 17, 31, 41, 42, 43, 48, 63, 67, 79, 83, 98, 110, 115, 129, 133, 145, 149, 224, 227, 258, 301, 307, 310], "method": [9, 11, 12, 13, 15, 17, 27, 28, 31, 36, 41, 43, 44, 45, 48, 63, 64, 67, 79, 80, 81, 83, 94, 95, 98, 110, 111, 112, 115, 129, 130, 133, 145, 146, 149, 162, 163, 187, 191, 193, 195, 197, 199, 201, 203, 205, 207, 211, 215, 218, 220, 224, 227, 228, 269, 271, 272, 282, 283, 296, 300], "classmethod": [10, 17, 18, 19, 26, 31, 32, 33, 40, 42, 48, 49, 50, 62, 67, 68, 69, 78, 83, 84, 85, 93, 98, 99, 100, 109, 115, 116, 117, 128, 133, 134, 135, 144, 149, 150, 151, 160, 175, 176, 177, 178, 186, 190, 192, 196, 200, 202, 204, 206, 244, 245, 268, 270, 275, 276, 280, 285, 286, 291], "rtree": [10, 292], "fals": [10, 23, 24, 25, 37, 38, 39, 43, 57, 60, 61, 75, 76, 77, 90, 91, 92, 106, 107, 108, 123, 126, 127, 141, 142, 143, 157, 158, 159, 169, 181, 182, 183, 209, 217, 226, 259, 260, 261, 277, 278, 279, 287, 288, 289, 301], "max_dist": [10, 11], "0": [10, 20, 23, 34, 37, 53, 57, 63, 71, 75, 87, 90, 94, 102, 106, 119, 123, 129, 137, 141, 145, 153, 157, 161, 162, 167, 170, 181, 259, 277, 287, 292, 295, 297, 303], "find": [10, 161, 243, 292, 303, 307], "pair": [10, 11, 161, 292, 302], "given": [10, 11, 17, 31, 42, 48, 67, 83, 98, 115, 133, 149, 161, 173, 174, 176, 210, 224, 246, 270, 302], "paramet": [10, 11, 12, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 53, 54, 57, 60, 61, 62, 63, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 114, 115, 116, 117, 119, 120, 123, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 157, 158, 159, 160, 161, 162, 165, 166, 167, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 193, 194, 195, 197, 198, 200, 202, 204, 206, 209, 210, 217, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 291, 292, 300, 302, 309], "bool": [10, 20, 21, 23, 24, 25, 34, 35, 37, 38, 39, 43, 53, 54, 57, 60, 61, 63, 71, 72, 75, 76, 77, 87, 88, 90, 91, 92, 94, 102, 103, 106, 107, 108, 119, 120, 123, 126, 127, 129, 137, 138, 141, 142, 143, 145, 153, 154, 157, 158, 159, 169, 181, 182, 183, 191, 209, 217, 226, 246, 247, 248, 259, 260, 261, 277, 278, 279, 282, 287, 288, 289], "when": [10, 13, 28, 44, 45, 64, 80, 81, 95, 111, 112, 130, 146, 163, 164, 228, 272, 283, 302, 306], "set": [10, 161, 247, 292, 301, 302, 303], "true": [10, 20, 21, 23, 24, 25, 34, 35, 37, 38, 39, 43, 53, 54, 57, 60, 61, 63, 71, 72, 75, 76, 77, 87, 88, 90, 91, 92, 94, 102, 103, 106, 107, 108, 119, 120, 123, 126, 127, 129, 137, 138, 141, 142, 143, 145, 153, 154, 157, 158, 159, 169, 174, 181, 182, 183, 209, 217, 223, 226, 246, 247, 259, 260, 261, 277, 278, 279, 287, 288, 289, 301, 303, 306], "r": [10, 161, 297], "tree": [10, 161, 230], "search": [10, 161], "neighbor": [10, 161, 292], "float": [10, 11, 63, 94, 129, 145, 161, 162, 164, 167, 170, 174, 175, 176, 191, 227, 254, 255, 256, 257, 292], "option": [10, 11, 16, 20, 21, 23, 24, 25, 30, 34, 35, 37, 38, 39, 47, 53, 54, 57, 60, 61, 66, 71, 72, 75, 76, 77, 82, 87, 88, 90, 91, 92, 97, 102, 103, 106, 107, 108, 114, 119, 120, 123, 126, 127, 132, 137, 138, 141, 142, 143, 148, 153, 154, 157, 158, 159, 161, 167, 169, 172, 181, 182, 183, 195, 230, 231, 232, 233, 237, 241, 252, 254, 255, 256, 257, 259, 260, 261, 274, 277, 278, 279, 284, 287, 288, 289, 303, 306, 310], "i": [10, 11, 12, 15, 17, 18, 19, 20, 21, 26, 27, 31, 32, 33, 34, 35, 36, 40, 43, 45, 48, 49, 50, 53, 54, 62, 63, 67, 68, 69, 71, 72, 78, 79, 81, 83, 84, 85, 87, 88, 93, 94, 98, 99, 100, 102, 103, 109, 110, 112, 115, 116, 117, 119, 120, 128, 129, 133, 134, 135, 137, 138, 144, 145, 149, 150, 151, 153, 154, 160, 161, 162, 164, 173, 174, 177, 178, 186, 187, 191, 193, 194, 197, 224, 227, 230, 237, 244, 245, 262, 268, 271, 275, 276, 280, 281, 285, 286, 291, 293, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309], "addit": [10, 27, 232, 299, 302, 303, 305], "distanc": [10, 11, 301, 306], "apart": 10, "non": 10, "touch": 10, "ar": [10, 11, 13, 15, 17, 20, 21, 28, 31, 34, 35, 36, 43, 44, 48, 53, 54, 64, 67, 71, 72, 80, 83, 87, 88, 95, 98, 102, 103, 111, 115, 119, 120, 130, 133, 137, 138, 146, 149, 153, 154, 161, 163, 198, 210, 223, 228, 233, 237, 272, 282, 283, 294, 300, 301, 302, 303, 305, 306, 307, 309, 310], "still": 10, "consid": [10, 11, 306], "return": [10, 11, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 39, 40, 42, 47, 48, 49, 50, 53, 54, 57, 61, 62, 66, 67, 68, 69, 71, 72, 75, 77, 78, 82, 83, 84, 85, 87, 88, 90, 92, 93, 97, 98, 99, 100, 102, 103, 106, 108, 109, 114, 115, 116, 117, 119, 120, 123, 127, 128, 132, 133, 134, 135, 137, 138, 141, 143, 144, 148, 149, 150, 151, 153, 154, 157, 159, 160, 161, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 190, 194, 200, 202, 204, 206, 209, 210, 217, 223, 226, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 274, 275, 276, 277, 279, 280, 284, 285, 286, 287, 289, 291, 292, 301], "neightbor": [10, 292], "beam_a": [11, 12, 20, 21, 34, 35, 53, 54, 71, 72, 79, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "beam_b": [11, 12, 20, 21, 34, 35, 53, 54, 71, 72, 79, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "tol": 11, "1e": 11, "06": 11, "none": [11, 16, 30, 47, 66, 82, 97, 114, 132, 148, 164, 165, 172, 175, 176, 179, 180, 184, 190, 195, 196, 200, 202, 204, 206, 230, 231, 232, 233, 235, 237, 241, 251, 252, 254, 255, 256, 257, 262, 263, 266, 274, 284, 303], "If": [11, 18, 19, 20, 21, 23, 24, 25, 32, 33, 34, 35, 37, 38, 39, 43, 49, 50, 53, 54, 57, 60, 61, 63, 68, 69, 71, 72, 75, 76, 77, 84, 85, 87, 88, 90, 91, 92, 94, 99, 100, 102, 103, 106, 107, 108, 116, 117, 119, 120, 123, 126, 127, 129, 134, 135, 137, 138, 141, 142, 143, 145, 150, 151, 153, 154, 157, 158, 159, 169, 177, 178, 180, 181, 182, 183, 230, 231, 233, 237, 244, 245, 259, 260, 261, 275, 276, 277, 278, 279, 285, 286, 287, 288, 289, 292, 293, 301, 303, 306], "within": [11, 223, 282, 303], "role": [11, 36, 210], "sensit": 11, "output": [11, 13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283, 301, 303, 305, 306], "consist": 11, "specif": [11, 36, 198, 243, 248, 296, 300, 306, 307], "order": [11, 161, 194, 210, 281, 310], "e": [11, 36, 43, 294, 302, 306, 307, 309], "g": [11, 36, 294, 302], "main": [11, 36, 43, 56, 63, 74, 89, 94, 105, 110, 112, 122, 129, 140, 145, 156, 306], "first": [11, 79, 173, 210, 233, 247, 307, 310], "cross": [11, 36, 43, 56, 63, 74, 89, 94, 105, 110, 112, 122, 129, 140, 145, 156, 162, 175, 176, 303, 306], "second": [11, 79, 173, 210, 233, 247, 307], "otherwis": [11, 43, 209, 217, 226, 298, 303], "same": [11, 43, 281, 282], "thei": [11, 310], "input": [11, 161, 198, 299, 300, 301, 302, 303, 305, 306, 307], "from": [11, 18, 19, 23, 32, 33, 37, 49, 50, 57, 68, 69, 75, 84, 85, 90, 99, 100, 106, 116, 117, 123, 134, 135, 141, 150, 151, 157, 175, 176, 177, 178, 179, 180, 181, 198, 244, 245, 251, 253, 259, 275, 276, 277, 285, 286, 287, 294, 296, 298, 299, 300, 302, 303, 305, 306, 307, 308], "gener": [11, 189, 193, 197, 198, 281, 300, 303, 306, 310], "toler": [11, 301, 306], "mathemat": 11, "comput": [11, 23, 37, 57, 75, 90, 106, 123, 141, 157, 167, 168, 169, 170, 171, 181, 239, 240, 259, 277, 287], "maximum": 11, "desigen": 11, "unit": [11, 161, 174], "tupl": [11, 20, 21, 27, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 162, 174, 210, 233, 234], "jointtopologi": [11, 224, 227, 296], "repres": [12, 43, 63, 79, 110, 129, 145, 162, 187, 191, 195, 227, 233, 269, 303], "french": [12, 15, 191, 199, 306], "ridg": [12, 15, 191, 199, 306], "lap": [12, 15, 63, 94, 129, 145, 191, 306], "end": [12, 20, 21, 27, 34, 35, 43, 53, 54, 63, 71, 72, 79, 87, 88, 102, 103, 110, 119, 120, 129, 137, 138, 145, 153, 154, 162, 164, 173, 174, 176, 191, 306], "compat": [12, 13, 28, 43, 44, 63, 64, 79, 80, 95, 110, 111, 129, 130, 145, 146, 161, 163, 228, 272, 283], "l": [12, 43, 63, 79, 94, 201, 203, 204, 224, 307], "pleas": [12, 43, 63, 79, 94, 110, 129, 145, 293], "lbuttjoint": [12, 296], "creat": [12, 15, 27, 43, 45, 63, 79, 81, 94, 110, 112, 129, 145, 175, 176, 185, 190, 191, 199, 201, 203, 205, 215, 294, 296, 297, 299, 300, 301, 302, 303, 306, 310], "properli": [12, 43, 63, 79, 94, 110, 129, 145], "instanc": [12, 13, 17, 18, 19, 28, 31, 32, 33, 43, 44, 48, 49, 50, 63, 64, 67, 68, 69, 79, 80, 83, 84, 85, 94, 95, 98, 99, 100, 110, 111, 115, 116, 117, 129, 130, 133, 134, 135, 145, 146, 149, 150, 151, 163, 177, 178, 198, 209, 217, 226, 228, 234, 244, 245, 272, 275, 276, 283, 285, 286, 294, 300], "associ": [12, 36, 43, 63, 79, 94, 110, 129, 145, 191, 202, 206, 282, 298], "top": [12, 22, 191, 299, 306], "bottom": [12, 22, 191, 306], "joint_typ": [12, 63, 190, 224], "represent": [12, 13, 24, 25, 28, 38, 39, 42, 44, 60, 61, 63, 64, 76, 77, 80, 91, 92, 95, 107, 108, 111, 126, 127, 130, 142, 143, 146, 158, 159, 163, 182, 183, 228, 260, 261, 270, 272, 278, 279, 283, 288, 289, 300], "": [12, 14, 20, 21, 26, 29, 34, 35, 40, 53, 54, 62, 63, 65, 71, 72, 78, 87, 88, 93, 96, 102, 103, 109, 119, 120, 128, 131, 137, 138, 144, 147, 153, 154, 160, 162, 173, 175, 176, 186, 268, 280, 291, 302, 303, 309], "reference_face_indic": 12, "dict": [12, 27, 187, 191, 194, 198, 200, 202, 204, 206, 224, 227, 232, 300], "dictionari": [12, 27, 187, 200, 202, 204, 206], "refer": [12, 15, 22, 36, 56, 74, 89, 105, 122, 140, 156, 191, 296, 299, 300, 302], "face": [12, 15, 20, 21, 23, 34, 35, 37, 43, 53, 54, 57, 71, 72, 75, 87, 88, 90, 102, 103, 106, 119, 120, 123, 137, 138, 141, 153, 154, 157, 162, 174, 181, 191, 259, 277, 287, 306, 308], "both": [12, 45, 81, 233, 237], "inherit": [12, 27, 43, 63, 79, 94, 110, 129, 145, 162, 224, 227, 271, 282, 296, 300], "convert": [13, 24, 25, 28, 38, 39, 44, 60, 61, 64, 76, 77, 80, 91, 92, 95, 107, 108, 111, 126, 127, 130, 142, 143, 146, 158, 159, 163, 182, 183, 228, 260, 261, 272, 278, 279, 283, 288, 289], "exist": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283, 300], "net": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "ironpython": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "implicit": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "convers": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "usual": [13, 28, 44, 64, 80, 95, 111, 130, 146, 162, 163, 228, 272, 283], "take": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283, 300, 310], "place": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 262, 272, 283, 306], "cpython": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "kick": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "its": [13, 20, 21, 24, 25, 28, 34, 35, 38, 39, 44, 53, 54, 60, 61, 64, 71, 72, 76, 77, 80, 87, 88, 91, 92, 95, 102, 103, 107, 108, 111, 119, 120, 126, 127, 130, 137, 138, 142, 143, 146, 153, 154, 158, 159, 163, 171, 175, 182, 183, 190, 202, 206, 228, 238, 260, 261, 272, 278, 279, 283, 288, 289, 297, 302, 306], "default": [13, 16, 24, 25, 28, 30, 38, 39, 43, 44, 47, 60, 61, 63, 64, 66, 76, 77, 80, 82, 91, 92, 94, 95, 97, 107, 108, 111, 114, 126, 127, 129, 130, 132, 142, 143, 145, 146, 148, 158, 159, 163, 172, 175, 176, 182, 183, 195, 228, 241, 254, 255, 256, 257, 260, 261, 272, 274, 278, 279, 283, 284, 288, 289, 296, 301, 303, 307, 309], "print": [13, 24, 25, 28, 38, 39, 44, 60, 61, 64, 76, 77, 80, 91, 92, 95, 107, 108, 111, 126, 127, 130, 142, 143, 146, 158, 159, 163, 182, 183, 228, 260, 261, 272, 278, 279, 283, 288, 289], "self": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 198, 228, 272, 283, 300], "gettyp": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "fullnam": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "similar": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283, 306], "overrid": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283, 307], "fix": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "make": [13, 16, 28, 30, 44, 47, 64, 66, 80, 82, 95, 97, 111, 114, 130, 132, 146, 148, 163, 172, 228, 241, 272, 274, 283, 284], "grasshopp": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283, 294, 296, 297, 303], "displai": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283, 302, 308], "proper": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "panel": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 228, 272, 283], "other": [13, 20, 21, 28, 34, 35, 44, 53, 54, 63, 64, 71, 72, 80, 87, 88, 94, 95, 102, 103, 111, 119, 120, 129, 130, 137, 138, 145, 146, 153, 154, 163, 191, 222, 228, 272, 283, 293, 298, 301, 306, 310], "add": [14, 29, 45, 65, 81, 96, 112, 131, 147, 164, 165, 166, 229, 230, 231, 232, 233, 234, 235, 236, 299, 300, 301, 309], "defin": [14, 29, 65, 96, 131, 147, 175, 191, 209, 217, 223, 226, 302, 303, 306, 307, 309, 310], "affect": [14, 29, 65, 96, 131, 147], "rais": [14, 17, 18, 19, 29, 31, 32, 33, 48, 49, 50, 65, 67, 68, 69, 83, 84, 85, 96, 98, 99, 100, 115, 116, 117, 131, 133, 134, 135, 147, 149, 150, 151, 177, 178, 230, 233, 237, 244, 245, 275, 276, 285, 286], "beamjoinningerror": [14, 29, 65, 96, 131, 147, 296], "whenev": [14, 29, 65, 96, 131, 147], "abl": [14, 29, 65, 96, 131, 147], "check": [15, 246, 292, 296, 302], "whether": [15, 282, 298], "part": [15, 36, 187, 189, 191, 192, 195, 196, 200, 202, 204, 206, 230, 237, 292, 296, 300, 303, 305], "align": [15, 161, 162, 167, 239, 299, 309], "necessari": [15, 297, 300], "determin": [15, 210, 306], "machin": [15, 300], "cl": [16, 30, 47, 66, 82, 97, 114, 132, 148, 172, 224, 241, 274, 284], "independ": [16, 30, 47, 66, 82, 97, 114, 132, 148, 172, 241, 274, 284], "data": [16, 18, 19, 23, 24, 25, 26, 30, 32, 33, 37, 38, 39, 40, 47, 49, 50, 57, 60, 61, 62, 66, 68, 69, 75, 76, 77, 78, 82, 84, 85, 90, 91, 92, 93, 97, 99, 100, 106, 107, 108, 109, 114, 116, 117, 123, 126, 127, 128, 132, 134, 135, 141, 142, 143, 144, 148, 150, 151, 157, 158, 159, 160, 172, 177, 178, 181, 182, 183, 186, 187, 241, 244, 245, 259, 260, 261, 263, 264, 265, 268, 271, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 291, 308], "compa": [16, 18, 19, 23, 30, 32, 33, 37, 47, 49, 50, 57, 66, 68, 69, 75, 82, 84, 85, 90, 97, 99, 100, 106, 114, 116, 117, 123, 132, 134, 135, 141, 148, 150, 151, 157, 162, 168, 169, 170, 171, 172, 177, 178, 181, 184, 185, 239, 240, 241, 244, 245, 254, 255, 259, 262, 266, 267, 274, 275, 276, 277, 282, 284, 285, 286, 287, 293, 299, 306], "current": [16, 30, 47, 66, 82, 97, 114, 132, 148, 172, 241, 274, 284, 296, 306], "kwarg": [17, 31, 48, 67, 83, 98, 115, 133, 149, 224, 232], "new": [17, 31, 48, 67, 83, 98, 115, 133, 149, 297, 300, 303], "expect": [17, 31, 48, 67, 83, 98, 115, 133, 149], "have": [17, 31, 48, 67, 83, 98, 115, 133, 149, 198, 230, 247, 303], "been": [17, 31, 48, 67, 83, 98, 115, 133, 149, 230, 282], "ad": [17, 27, 31, 48, 67, 83, 98, 115, 133, 149, 166, 230, 231, 232, 292, 307], "befor": [17, 31, 48, 67, 83, 98, 115, 133, 149, 230], "call": [17, 31, 36, 45, 48, 67, 81, 83, 98, 112, 115, 133, 149, 198, 300, 303], "code": [17, 31, 48, 67, 83, 98, 115, 133, 149, 294, 296], "doe": [17, 31, 48, 67, 83, 98, 115, 133, 149, 300, 303], "verifi": [17, 31, 48, 67, 83, 98, 115, 133, 149, 174, 248], "adjac": [17, 31, 48, 67, 83, 98, 115, 133, 149], "lie": [17, 31, 48, 67, 83, 98, 115, 133, 149], "allow": [17, 31, 48, 63, 67, 83, 94, 98, 115, 129, 133, 145, 149, 174, 210, 211, 218, 220, 227, 282], "them": [17, 31, 48, 67, 79, 83, 98, 115, 133, 149, 198, 247, 294, 300, 302, 306, 307], "respons": [17, 31, 48, 67, 83, 98, 115, 133, 149], "valueerror": [17, 31, 48, 67, 83, 98, 115, 133, 149, 230, 237], "less": [17, 31, 48, 67, 83, 98, 115, 133, 149, 162, 306], "than": [17, 23, 31, 37, 48, 57, 67, 75, 83, 90, 98, 106, 115, 123, 133, 141, 149, 157, 181, 259, 277, 287, 306], "timbermodel": [17, 31, 48, 67, 83, 98, 115, 133, 149, 296], "jo": [17, 31, 48, 67, 83, 98, 115, 133, 149], "belong": [17, 31, 48, 67, 83, 98, 115, 133, 149], "whould": [17, 31, 48, 67, 83, 98, 115, 133, 149], "togeth": [17, 31, 48, 67, 83, 98, 115, 133, 149, 303], "filepath": [18, 24, 32, 38, 49, 60, 68, 76, 84, 91, 99, 107, 116, 126, 134, 142, 150, 158, 177, 182, 244, 260, 275, 278, 285, 288], "construct": [18, 19, 26, 32, 33, 40, 49, 50, 62, 68, 69, 78, 84, 85, 93, 99, 100, 109, 116, 117, 128, 134, 135, 144, 150, 151, 160, 177, 178, 186, 244, 245, 268, 275, 276, 280, 285, 286, 291, 296], "json": [18, 19, 24, 25, 32, 33, 38, 39, 49, 50, 60, 61, 68, 69, 76, 77, 84, 85, 91, 92, 99, 100, 107, 108, 116, 117, 126, 127, 134, 135, 142, 143, 150, 151, 158, 159, 177, 178, 182, 183, 244, 245, 260, 261, 275, 276, 278, 279, 285, 286, 288, 289], "file": [18, 24, 32, 38, 49, 60, 68, 76, 84, 91, 99, 107, 116, 126, 134, 142, 150, 158, 177, 182, 187, 244, 260, 275, 278, 285, 288, 298, 300, 304], "path": [18, 24, 32, 38, 49, 60, 68, 76, 84, 91, 99, 107, 116, 126, 134, 142, 150, 158, 177, 182, 244, 260, 275, 278, 285, 288], "correct": [18, 19, 32, 33, 49, 50, 68, 69, 84, 85, 99, 100, 116, 117, 134, 135, 150, 151, 177, 178, 244, 245, 275, 276, 285, 286], "schema": [18, 19, 26, 32, 33, 40, 49, 50, 62, 68, 69, 78, 84, 85, 93, 99, 100, 109, 116, 117, 128, 134, 135, 144, 150, 151, 160, 177, 178, 186, 244, 245, 268, 275, 276, 280, 285, 286, 291], "typeerror": [18, 19, 32, 33, 49, 50, 68, 69, 84, 85, 99, 100, 116, 117, 134, 135, 150, 151, 177, 178, 244, 245, 275, 276, 285, 286], "static": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "ignore_end": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "Of": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "all": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 174, 180, 194, 242, 249, 250, 262, 292, 298, 302], "one": [20, 21, 34, 35, 53, 54, 63, 71, 72, 87, 88, 94, 102, 103, 119, 120, 129, 137, 138, 145, 153, 154, 166, 210, 233, 237, 281, 282, 300, 303, 306], "whose": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "normal": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 162], "most": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "orthogon": [20, 34, 53, 71, 87, 102, 119, 137, 153], "done": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "inner": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 306], "product": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "centerlin": [20, 21, 34, 35, 53, 54, 71, 72, 79, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 162, 173, 175, 176, 299, 302, 303, 309], "each": [20, 21, 27, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 174, 198, 271, 300, 302, 306, 307, 308], "result": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 173, 281, 303], "closest": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "chosen": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "attach": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 207], "ignor": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "face_index": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154], "frame": [20, 21, 27, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 162, 191, 195, 196, 282, 295, 296, 299, 303, 310], "index": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 191, 296, 301, 308], "center": [20, 21, 34, 35, 53, 54, 71, 72, 87, 88, 102, 103, 119, 120, 137, 138, 153, 154, 227, 293], "1": [21, 23, 35, 37, 54, 57, 63, 72, 75, 88, 90, 94, 103, 106, 120, 123, 129, 138, 141, 145, 154, 157, 162, 181, 259, 277, 287, 295, 300, 303, 310], "assemli": 22, "after": [22, 56, 74, 89, 105, 122, 140, 156], "de": [22, 36, 56, 74, 89, 105, 122, 140, 156], "serial": [22, 36, 56, 74, 89, 105, 122, 140, 156], "restor": [22, 36, 56, 74, 89, 105, 122, 140, 156], "save": [22, 24, 25, 38, 39, 56, 60, 61, 74, 76, 77, 89, 91, 92, 105, 107, 108, 122, 126, 127, 140, 142, 143, 156, 158, 159, 182, 183, 260, 261, 278, 279, 288, 289], "as_str": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "hash": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "comparison": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "dure": [23, 36, 37, 57, 75, 90, 106, 123, 141, 157, 181, 211, 259, 277, 282, 287, 301], "version": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287, 297, 306], "control": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287, 306], "algorithm": [23, 37, 57, 75, 90, 106, 123, 141, 157, 161, 181, 259, 277, 287], "digest": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "hexadecim": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "format": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 187, 259, 277, 287, 302], "rather": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "byte": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "exampl": [23, 36, 37, 57, 75, 90, 106, 123, 141, 157, 161, 181, 259, 277, 287, 296, 299, 302, 303, 310], "datastructur": [23, 37, 57, 75, 90, 106, 123, 141, 157, 168, 169, 181, 239, 240, 254, 256, 259, 264, 265, 266, 267, 277, 287], "import": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287, 300, 310], "mesh": [23, 37, 57, 75, 90, 106, 123, 141, 157, 168, 169, 181, 259, 277, 287, 295], "from_obj": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "get": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 238, 259, 277, 287, 297, 299], "obj": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 282, 287], "v1": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "v2": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "vertex_attribut": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "vertex_sampl": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "z": [23, 37, 57, 75, 90, 106, 123, 141, 157, 162, 175, 176, 181, 254, 255, 256, 257, 259, 277, 287, 303, 305, 309], "v3": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "pretti": [24, 25, 38, 39, 60, 61, 76, 77, 91, 92, 107, 108, 126, 127, 142, 143, 158, 159, 182, 183, 187, 188, 260, 261, 278, 279, 288, 289], "nativ": [24, 25, 38, 39, 60, 61, 76, 77, 91, 92, 107, 108, 126, 127, 142, 143, 158, 159, 182, 183, 260, 261, 278, 279, 288, 289], "valid": [26, 40, 62, 78, 93, 109, 128, 144, 160, 186, 268, 280, 291], "against": [26, 40, 62, 78, 93, 109, 128, 144, 160, 186, 268, 280, 291], "raw": [26, 40, 62, 78, 93, 109, 128, 144, 160, 186, 268, 280, 291, 303], "__from_data__": [26, 40, 62, 78, 93, 109, 128, 144, 160, 186, 268, 280, 291], "ani": [26, 40, 62, 78, 93, 109, 128, 144, 160, 186, 268, 280, 291, 294, 298, 305, 307], "interact": [27, 227, 233, 243, 247, 252, 294], "instanti": [27, 94, 198, 300], "directli": [27, 94, 215, 230, 231, 307], "respect": [27, 36], "implement": [27, 36, 292, 296, 306], "instead": [27, 303], "map": [27, 299, 309], "ehich": 27, "kei": [27, 36, 63, 164, 179, 200, 202, 204, 206, 302], "uniqu": [27, 238], "identifi": [27, 161, 238], "To": [36, 297, 299, 300, 301, 310], "avoid": [36, 167, 170], "circular": 36, "onli": [36, 169, 302], "store": [36, 302, 303], "sinc": 36, "concret": 36, "see": [36, 227, 299, 301, 303, 304, 305, 307, 309, 310], "tbuttjoint": [36, 295, 296], "enumer": 41, "possibl": [41, 302], "topo_unknown": [41, 42], "topo_i": 41, "topo_l": [41, 42], "topo_t": [41, 42], "topo_x": [41, 42], "valu": [42, 63, 94, 129, 145, 161, 162, 270, 302], "For": [42, 161, 270, 296, 301, 306, 309], "log": [42, 270], "int": [42, 164, 179, 191, 233, 270, 282], "One": [42, 270, 282, 306], "buttjoint": [43, 110], "butt": [43, 110, 201, 205, 306, 307], "trim": [43, 45, 63, 79, 81, 110, 112, 129, 145, 301, 305], "main_beam": [43, 63, 94, 110, 129, 145, 295], "cross_beam": [43, 63, 94, 110, 129, 145, 295], "small_beam_butt": 43, "smaller": [43, 162, 303], "section": [43, 162, 175, 176, 294, 299, 303, 306], "modify_cross": 43, "extend": [43, 164, 174, 306], "opposit": [43, 306], "cut": [43, 63, 94, 129, 145, 195, 299, 301, 303, 305, 306], "plane": [43, 79, 112, 174, 195, 303, 305, 306, 309], "reject_i": 43, "reject": 43, "requir": [45, 81, 164, 179, 194, 198, 297], "extens": [45, 81, 164, 174, 179, 306], "automat": [45, 81, 112, 307, 309], "lapjoint": [63, 129, 145, 296], "flip_lap_sid": [63, 94, 129, 145], "flip": [63, 94, 129, 145, 306], "side": [63, 94, 129, 145, 162, 305, 306], "cut_plane_bia": [63, 94, 129, 145], "shift": [63, 94, 129, 145, 306], "deeper": [63, 94, 129, 145], "between": [63, 79, 94, 129, 145, 227, 233, 247, 249, 252, 302, 306, 307, 310], "without": [63, 94, 129, 145, 298, 303], "complet": [63, 94, 129, 145], "through": [63, 94, 129, 145, 174, 293, 307], "either": [63, 94, 129, 145, 173], "5": [63, 94, 129, 145, 162], "main_beam_kei": 63, "cross_beam_kei": 63, "miter": [79, 203, 204, 306, 307], "bisector": [79, 306], "angl": [79, 191, 254, 255, 306], "abstract": [94, 301], "common": 94, "t": [94, 110, 129, 145, 205, 224, 307], "x": [94, 145, 162, 224, 256, 257, 303, 307, 309], "do": [94, 298, 300], "sub": 94, "along": [110, 129, 145, 162, 306], "length": [110, 129, 145, 162, 175, 306], "anoth": [110, 129, 145], "inflate_bi": [161, 292], "axi": [161, 162, 167, 175, 176, 239, 254, 255, 303, 305, 309], "bound": [161, 162, 167, 170, 239, 240, 292], "box": [161, 162, 167, 170, 239, 240, 282, 292, 299, 303], "aabb": [161, 162, 167], "enlarg": 161, "amount": [161, 164, 174, 292], "design": [161, 293, 296, 299, 302, 303], "regard": 161, "inflat": [161, 167, 170, 292], "note": [161, 230, 293], "pluggabl": 161, "In": [161, 296, 297, 306, 310], "plugin": [161, 296], "avail": 161, "timber": [162, 187, 195, 227, 293, 299, 303, 306, 310], "stud": [162, 303], "slat": 162, "etc": [162, 187, 188, 294, 296, 303], "rectangular": [162, 303], "local": [162, 303], "coordin": [162, 171, 303], "system": [162, 303], "origin": [162, 194, 254, 255, 303, 309], "locat": [162, 282, 301, 303], "start": [162, 164, 173, 174, 176, 299, 303], "point": [162, 167, 170, 173, 176, 227, 254, 255, 296, 306, 309], "correspond": [162, 173, 190, 302, 303, 307, 309], "major": [162, 303], "also": [162, 293, 296, 299, 302, 303, 306, 307], "fibr": [162, 299], "direct": [162, 174, 175, 176, 256, 257, 292, 303, 307, 310], "solid": [162, 301], "wood": 162, "y": [162, 256, 257, 303, 309], "width": [162, 175, 176, 295, 302, 303], "dimens": [162, 303], "height": [162, 175, 176, 295, 302, 303], "larger": [162, 303, 306], "shape": 162, "parametr": [162, 296], "blank": [162, 164, 179, 303], "materi": [162, 230, 235, 237, 248, 303, 309], "stock": [162, 303], "produc": 162, "6": 162, "equal": 162, "posit": [162, 171, 305], "2": [162, 295, 300, 310], "3": [162, 297, 300, 306, 310], "4": [162, 295, 300], "line": [162, 175, 296, 302, 303, 305, 307], "centerline_start": 162, "centerline_end": 162, "xmin": 162, "ymin": 162, "zmin": 162, "xmax": 162, "ymax": 162, "zmax": 162, "long_edg": 162, "long": [162, 174], "midpoint": 162, "middl": [162, 306], "joint_kei": [164, 179], "remov": [164, 179, 180, 251, 252, 253, 302, 305, 306], "well": [164, 307], "lement": 165, "offset": [167, 170], "collis": 168, "include_featur": 169, "includ": [169, 298, 300], "brep": [169, 296, 301, 305, 309], "orient": [170, 175, 176, 191, 240, 309], "obb": 170, "transform": [171, 254, 255, 256, 257, 263, 265, 266, 267], "world": [171, 303], "spatial": [171, 301], "hierarchi": [171, 227, 230], "endpoint": [173, 176], "closer": 173, "interest": 173, "depend": [173, 175, 176, 297, 300], "actual": [173, 218, 220], "pln": 174, "metric": 174, "todo": [174, 258], "minimum": 174, "pass": [174, 224], "z_vector": [175, 176], "vector": [175, 176, 254, 255, 266, 267, 296, 303], "worldz": [175, 176], "worldx": [175, 176], "point_start": 176, "point_end": 176, "end_point": 176, "copi": [185, 255, 257, 264, 265, 267, 298], "compas_model": [185, 243, 281], "histori": 187, "btlx_string": 187, "xml": [187, 188], "gh": [187, 188], "termin": [187, 188], "btlxpart": [187, 191, 195, 198, 200, 202, 204, 206, 300], "process": [189, 191, 193, 194, 195, 197, 198, 200, 202, 204, 206, 296, 299, 300, 301, 310], "joint_factori": [190, 198, 300], "regist": 190, "factori": [190, 198, 199, 201, 203, 205, 300], "jointfactori": 190, "is_top": [191, 192], "flag": 191, "process_typ": [191, 198, 300], "frenchridgelap": 191, "other_beam": 191, "drill_hole_diamet": 191, "diamet": [191, 305], "drill": [191, 305], "hole": [191, 299, 305], "ref_face_index": 191, "ref_fac": 191, "surfac": [191, 300, 305, 306], "header_attribut": [191, 198, 300], "header": 191, "process_paramet": [191, 198], "geometr": [191, 194, 198, 296, 300, 301, 305], "btlx": [191, 198, 296, 299], "degre": 191, "intern": [193, 197], "properti": 194, "It": [194, 296, 299, 301, 302, 303, 306, 307, 309], "ordereddict": 194, "maintain": [194, 296], "jack": 195, "joint_nam": [195, 196], "name": [195, 198, 232, 300, 302, 308], "append": [198, 300], "btlx_process": [198, 300], "eg": 198, "btlxjackcut": [198, 296], "match": [198, 300, 306], "describ": [198, 300], "deriv": [198, 300], "relat": [198, 211, 300], "some": [198, 299, 309], "combin": [198, 306, 307], "multipl": [198, 231, 294, 300], "cover": 198, "register_joint": [198, 300], "so": [198, 298, 300], "typic": [198, 282, 300], "need": [198, 300, 302, 310], "individu": 198, "attr": [198, 232], "param": 198, "et_el": 198, "et": 198, "involv": 204, "jointrul": [207, 215, 224], "categori": [207, 210, 302, 303, 306, 307, 310], "rule": [207, 209, 215, 217, 224, 226, 296, 299, 301, 303, 306, 310], "assign": [207, 224, 227, 230, 237, 307, 309], "sort": 210, "accord": [210, 302, 306], "catergory_a": 210, "category_b": 210, "inspect": [211, 308], "featureapplicationerror": 211, "beamjoiningerror": 211, "feature_error": 211, "applic": 211, "joint_error": 211, "link": 218, "delai": [218, 220], "downstream": [218, 220], "compon": [218, 220, 297, 301, 302, 303, 305, 306, 307], "shall": [220, 298], "k": 224, "topology_typ": 224, "constant": 224, "keyword": [224, 232], "argument": [224, 232], "differ": [227, 294, 300, 306, 307], "wall": [227, 236], "express": [227, 298], "center_of_mass": 227, "mass": 227, "detected_topo": 227, "beam_a_kei": 227, "beam_b_kei": 227, "volum": 227, "total": 227, "parent": [230, 231, 232], "groupnod": [230, 231, 232], "group": [230, 231, 232, 243, 302], "node": [230, 231, 232], "under": [230, 231], "root": [230, 231], "alreadi": 230, "elementnod": [230, 231], "b": [233, 247, 252], "edg": [233, 306], "graph": 233, "neither": 237, "guid": [238, 296, 299, 303, 307], "retriev": [238, 302], "specifi": 238, "yield": [242, 249, 250], "interaction_typ": 243, "radian": [254, 255], "translat": [254, 255, 256, 257], "scale": [254, 255, 266, 267, 309], "factor": [256, 257], "rotat": [256, 257, 266, 267, 303], "insid": [258, 294], "connectionsolv": [258, 296], "modifi": [262, 298], "structur": [263, 264, 265, 293, 296, 299, 301, 310], "enum": 269, "could": 269, "execut": [269, 282, 294], "instruct": [269, 271, 282], "human": [270, 282], "robot": [270, 282], "build": [271, 281, 282, 297, 310], "step": [271, 273, 281, 296, 300], "collect": [271, 292, 301], "simpl": [281, 296, 299], "sequenc": [281, 296], "per": 281, "buildingplan": [281, 296], "assembl": 282, "singl": [282, 300, 307], "actor": [282, 296], "element_id": 282, "cad": [282, 294], "id": [282, 294], "elements_held": 282, "held": 282, "support": [282, 293, 294], "is_built": 282, "is_plan": 282, "increment": 282, "cylind": 282, "prioriti": [282, 307], "parallel": [282, 303, 306], "prior": 292, "research": [293, 296, 298], "project": [293, 296], "develop": [293, 296], "aleksandra": 293, "apolinarska": 293, "chen": 293, "kasir": 293, "gonzalo": 293, "casa": 293, "gramazio": [293, 296, 298], "kohler": [293, 296, 298], "eth": [293, 296], "zurich": [293, 296], "swiss": 293, "nation": 293, "scienc": 293, "foundat": 293, "compet": 293, "digit": 293, "nccr": 293, "dfab": 293, "programm": 293, "As": 293, "open": [293, 296], "mani": [293, 294, 296], "contributor": 293, "you": [293, 299, 310], "your": 293, "work": 293, "acknowledg": 293, "misc": 293, "titl": 293, "librari": [293, 294, 296, 299], "author": [293, 298], "anna": 293, "http": [293, 297, 300], "github": [293, 297], "com": [293, 297, 300], "gramaziokohl": 293, "year": 293, "2022": 293, "2023": 293, "doi": 293, "10": [293, 297], "5281": 293, "zenodo": 293, "7934267": 293, "url": 293, "present": [294, 306], "concept": [294, 299], "There": [294, 302, 306, 307, 310], "wai": 294, "run": [294, 296], "python": [294, 296, 297, 299], "environ": [294, 296, 297, 303], "session": 294, "text": 294, "editor": 294, "sublim": 294, "studio": 294, "eclips": 294, "blender": 294, "assembli": [295, 296, 299, 303, 305, 306, 307, 308, 310], "timberassembli": 295, "worldxi": 295, "depth": [295, 306], "geometry_typ": 295, "add_beam": 295, "packag": [296, 297, 300], "written": 296, "ecosystem": 296, "rhinocero": 296, "3d": 296, "plug": 296, "activ": [296, 297, 301, 303, 309], "being": 296, "continu": 296, "At": 296, "stage": 296, "encompass": 296, "fast": 296, "intuit": 296, "custom": [296, 302], "entiti": 296, "semant": 296, "futur": 296, "expand": 296, "entail": [296, 302], "interfac": 296, "analysi": 296, "softwar": [296, 298], "specialist": 296, "built": [296, 299], "upon": 296, "framework": 296, "basic": 296, "like": [296, 299, 301], "complex": [296, 306], "resolv": 296, "backend": 296, "rhinocommon": 296, "sdk": 296, "handl": 296, "opencascad": 296, "via": 296, "occ": 296, "introduct": 296, "instal": 296, "api": [296, 299], "frenchridgelapjoint": 296, "lhalflapjoint": 296, "lmiterjoint": 296, "thalflapjoint": 296, "xhalflapjoint": 296, "find_neighboring_beam": 296, "btlxprocess": [296, 300], "btlxfrenchridgelap": 296, "lbuttfactori": 296, "tbuttfactori": 296, "lmiterfactori": 296, "frenchridgefactori": 296, "simplesequencegener": 296, "jointdefinit": 296, "categoryrul": 296, "topologyrul": 296, "directrul": 296, "featuredefinit": 296, "debuginfom": 296, "workflow": [296, 299, 302, 303], "show": [296, 299, 301], "util": [296, 299], "contribut": [296, 299], "licens": 296, "cite": 296, "n": 297, "myenvnam": 297, "ye": 297, "7": 297, "m": 297, "compas_rhino": 297, "v7": 297, "latest": 297, "fork": 297, "repositori": 297, "clone": 297, "git": 297, "yourgithub_usernam": 297, "cd": 297, "edit": 297, "mode": 297, "pip": 297, "dev": 297, "txt": 297, "compil": 297, "invok": 297, "ghuser": 297, "mit": 298, "copyright": 298, "c": 298, "2020": 298, "02": 298, "17": 298, "permiss": 298, "herebi": 298, "grant": 298, "free": 298, "charg": 298, "person": 298, "obtain": 298, "document": [298, 300, 302, 303, 309], "deal": 298, "restrict": 298, "limit": [298, 306], "right": 298, "merg": 298, "publish": 298, "distribut": 298, "sublicens": 298, "sell": 298, "permit": 298, "whom": 298, "furnish": 298, "subject": 298, "follow": [298, 299, 300, 303, 306], "condit": 298, "abov": [298, 306], "notic": 298, "substanti": 298, "portion": 298, "THE": 298, "AS": 298, "warranti": 298, "OF": 298, "kind": 298, "OR": 298, "impli": [298, 301], "BUT": 298, "NOT": 298, "TO": 298, "merchant": 298, "fit": 298, "FOR": 298, "particular": 298, "purpos": 298, "AND": 298, "noninfring": 298, "IN": 298, "NO": 298, "event": 298, "holder": 298, "BE": 298, "liabl": 298, "claim": 298, "damag": 298, "liabil": 298, "action": 298, "contract": 298, "tort": 298, "aris": 298, "out": 298, "WITH": 298, "easi": 299, "autom": 299, "bake": 299, "textur": [299, 309], "render": [299, 309], "boolean": [299, 301, 305], "style": 299, "planar": [299, 306], "might": 299, "componen": 299, "detail": 299, "overal": 299, "idea": 299, "how": [299, 306, 310], "Then": 299, "explain": 299, "requr": 300, "found": 300, "here": [300, 304, 309], "design2machin": 300, "btlx_2_1_0": 300, "pdf": 300, "process_param": 300, "where": [300, 303, 306, 307, 309], "btlxjoint": 300, "__init__": 300, "py": 300, "mind": 300, "definit": [300, 301], "compos": 301, "oper": [301, 305], "subtract": [301, 305], "mai": [301, 302], "computation": 301, "expens": 301, "disabl": 301, "creategeometri": 301, "jointsrul": 301, "maxdist": 301, "max": 301, "visualis": [301, 306], "debuginfo": 301, "case": 301, "showassembli": 301, "help": [301, 306], "showfeatureerror": [301, 308], "showjoiningerror": [301, 308], "intend": [302, 303], "hybrid": 302, "encod": 302, "concaten": 302, "colon": 302, "separ": 302, "entri": 302, "underscor": 302, "_": 302, "attr1nam": 302, "attr1value_attr2nam": 302, "attr2valu": 302, "four": [302, 306], "standard": 302, "zvector": [302, 303], "setstandardattribut": 302, "write": [302, 303], "readstandardattribut": 302, "read": 302, "checkstandardattribut": 302, "correctli": 302, "miss": 302, "user": 302, "later": [302, 303], "filter": 302, "criteria": 302, "These": 302, "deleteattribut": 302, "setcustomattribut": 302, "readallattribut": 302, "linear": 303, "straight": 303, "rafter": 303, "joist": 303, "linecurv": 303, "referenc": 303, "latter": 303, "drawn": 303, "around": 303, "li": [303, 309], "sai": 303, "perpendicular": 303, "cannot": 303, "vertic": [303, 306], "convent": 303, "updaterefobj": 303, "size": [303, 309], "onc": 303, "decomposebeam": 303, "extract": [303, 308], "centrelin": 303, "findbeambyrhinogeometri": 303, "curv": 303, "demo": 304, "brepsubtractionfeatur": 305, "brepdrillholefeatur": 305, "trimfeatur": 305, "ly": 305, "three": [306, 307, 310], "corner": 306, "meet": 306, "sever": 306, "half": 306, "shorten": 306, "clean": 306, "smallbeambutt": 306, "modifycross": 306, "flush": 306, "rejecti": 306, "upper": 306, "overlap": 306, "lower": [306, 307], "fliplapsid": 306, "cutplanebia": 306, "fulli": 306, "unlik": 306, "made": 306, "centr": 306, "keep": 306, "secur": 306, "prevent": 306, "tilt": 306, "sequenti": 306, "third": 306, "outer": 306, "cutoff": 306, "veri": 306, "acut": 306, "tip": 306, "beak": 306, "remain": 306, "unchang": 306, "gap": 306, "crate": 306, "halflap": [306, 307], "null": 306, "nulljoint": 306, "situat": 306, "summaris": 306, "final": [306, 310], "level": 307, "hereaft": 307, "lowest": 307, "highest": 307, "topolog": 307, "entir": 307, "recognis": 307, "jointopt": 307, "cata": 307, "catb": 307, "select": 307, "By": [307, 310], "mainbeam": 307, "secondarybeam": 307, "preview": 308, "showbeamfac": 308, "showbeamindex": 308, "global": 308, "showjointtyp": 308, "showtopologytyp": 308, "bakewithboxmap": 309, "layer": 309, "desir": 309, "random": 309, "deviat": 309, "mapsiz": 309, "serv": 309, "adjust": 309, "imag": 309, "ratio": 309, "bitmap": 309, "care": 310, "overwrit": 310}, "objects": {"compas_timber.connections": [[8, 0, 1, "", "BeamJoinningError"], [9, 1, 1, "", "ConnectionSolver"], [12, 1, 1, "", "FrenchRidgeLapJoint"], [27, 1, 1, "", "Joint"], [41, 1, 1, "", "JointTopology"], [43, 1, 1, "", "LButtJoint"], [63, 1, 1, "", "LHalfLapJoint"], [79, 1, 1, "", "LMiterJoint"], [94, 1, 1, "", "LapJoint"], [110, 1, 1, "", "TButtJoint"], [129, 1, 1, "", "THalfLapJoint"], [145, 1, 1, "", "XHalfLapJoint"], [161, 3, 1, "", "find_neighboring_beams"]], "compas_timber.connections.ConnectionSolver": [[10, 2, 1, "", "find_intersecting_pairs"], [11, 2, 1, "", "find_topology"]], "compas_timber.connections.FrenchRidgeLapJoint": [[13, 2, 1, "", "ToString"], [14, 2, 1, "", "add_features"], [15, 2, 1, "", "check_geometry"], [16, 2, 1, "", "copy"], [17, 2, 1, "", "create"], [18, 2, 1, "", "from_json"], [19, 2, 1, "", "from_jsonstring"], [20, 2, 1, "", "get_face_most_ortho_to_beam"], [21, 2, 1, "", "get_face_most_towards_beam"], [22, 2, 1, "", "restore_beams_from_keys"], [23, 2, 1, "", "sha256"], [24, 2, 1, "", "to_json"], [25, 2, 1, "", "to_jsonstring"], [26, 2, 1, "", "validate_data"]], "compas_timber.connections.Joint": [[28, 2, 1, "", "ToString"], [29, 2, 1, "", "add_features"], [30, 2, 1, "", "copy"], [31, 2, 1, "", "create"], [32, 2, 1, "", "from_json"], [33, 2, 1, "", "from_jsonstring"], [34, 2, 1, "", "get_face_most_ortho_to_beam"], [35, 2, 1, "", "get_face_most_towards_beam"], [36, 2, 1, "", "restore_beams_from_keys"], [37, 2, 1, "", "sha256"], [38, 2, 1, "", "to_json"], [39, 2, 1, "", "to_jsonstring"], [40, 2, 1, "", "validate_data"]], "compas_timber.connections.JointTopology": [[42, 2, 1, "", "get_name"]], "compas_timber.connections.LButtJoint": [[44, 2, 1, "", "ToString"], [45, 2, 1, "", "add_features"], [46, 2, 1, "", "back_surface_main"], [47, 2, 1, "", "copy"], [48, 2, 1, "", "create"], [49, 2, 1, "", "from_json"], [50, 2, 1, "", "from_jsonstring"], [51, 2, 1, "", "front_back_surface_main"], [52, 2, 1, "", "get_cross_cutting_plane"], [53, 2, 1, "", "get_face_most_ortho_to_beam"], [54, 2, 1, "", "get_face_most_towards_beam"], [55, 2, 1, "", "get_main_cutting_plane"], [56, 2, 1, "", "restore_beams_from_keys"], [57, 2, 1, "", "sha256"], [58, 2, 1, "", "side_surfaces_cross"], [59, 2, 1, "", "subtraction_volume"], [60, 2, 1, "", "to_json"], [61, 2, 1, "", "to_jsonstring"], [62, 2, 1, "", "validate_data"]], "compas_timber.connections.LHalfLapJoint": [[64, 2, 1, "", "ToString"], [65, 2, 1, "", "add_features"], [66, 2, 1, "", "copy"], [67, 2, 1, "", "create"], [68, 2, 1, "", "from_json"], [69, 2, 1, "", "from_jsonstring"], [70, 2, 1, "", "get_cross_cutting_frame"], [71, 2, 1, "", "get_face_most_ortho_to_beam"], [72, 2, 1, "", "get_face_most_towards_beam"], [73, 2, 1, "", "get_main_cutting_frame"], [74, 2, 1, "", "restore_beams_from_keys"], [75, 2, 1, "", "sha256"], [76, 2, 1, "", "to_json"], [77, 2, 1, "", "to_jsonstring"], [78, 2, 1, "", "validate_data"]], "compas_timber.connections.LMiterJoint": [[80, 2, 1, "", "ToString"], [81, 2, 1, "", "add_features"], [82, 2, 1, "", "copy"], [83, 2, 1, "", "create"], [84, 2, 1, "", "from_json"], [85, 2, 1, "", "from_jsonstring"], [86, 2, 1, "", "get_cutting_planes"], [87, 2, 1, "", "get_face_most_ortho_to_beam"], [88, 2, 1, "", "get_face_most_towards_beam"], [89, 2, 1, "", "restore_beams_from_keys"], [90, 2, 1, "", "sha256"], [91, 2, 1, "", "to_json"], [92, 2, 1, "", "to_jsonstring"], [93, 2, 1, "", "validate_data"]], "compas_timber.connections.LapJoint": [[95, 2, 1, "", "ToString"], [96, 2, 1, "", "add_features"], [97, 2, 1, "", "copy"], [98, 2, 1, "", "create"], [99, 2, 1, "", "from_json"], [100, 2, 1, "", "from_jsonstring"], [101, 2, 1, "", "get_cross_cutting_frame"], [102, 2, 1, "", "get_face_most_ortho_to_beam"], [103, 2, 1, "", "get_face_most_towards_beam"], [104, 2, 1, "", "get_main_cutting_frame"], [105, 2, 1, "", "restore_beams_from_keys"], [106, 2, 1, "", "sha256"], [107, 2, 1, "", "to_json"], [108, 2, 1, "", "to_jsonstring"], [109, 2, 1, "", "validate_data"]], "compas_timber.connections.TButtJoint": [[111, 2, 1, "", "ToString"], [112, 2, 1, "", "add_features"], [113, 2, 1, "", "back_surface_main"], [114, 2, 1, "", "copy"], [115, 2, 1, "", "create"], [116, 2, 1, "", "from_json"], [117, 2, 1, "", "from_jsonstring"], [118, 2, 1, "", "front_back_surface_main"], [119, 2, 1, "", "get_face_most_ortho_to_beam"], [120, 2, 1, "", "get_face_most_towards_beam"], [121, 2, 1, "", "get_main_cutting_plane"], [122, 2, 1, "", "restore_beams_from_keys"], [123, 2, 1, "", "sha256"], [124, 2, 1, "", "side_surfaces_cross"], [125, 2, 1, "", "subtraction_volume"], [126, 2, 1, "", "to_json"], [127, 2, 1, "", "to_jsonstring"], [128, 2, 1, "", "validate_data"]], "compas_timber.connections.THalfLapJoint": [[130, 2, 1, "", "ToString"], [131, 2, 1, "", "add_features"], [132, 2, 1, "", "copy"], [133, 2, 1, "", "create"], [134, 2, 1, "", "from_json"], [135, 2, 1, "", "from_jsonstring"], [136, 2, 1, "", "get_cross_cutting_frame"], [137, 2, 1, "", "get_face_most_ortho_to_beam"], [138, 2, 1, "", "get_face_most_towards_beam"], [139, 2, 1, "", "get_main_cutting_frame"], [140, 2, 1, "", "restore_beams_from_keys"], [141, 2, 1, "", "sha256"], [142, 2, 1, "", "to_json"], [143, 2, 1, "", "to_jsonstring"], [144, 2, 1, "", "validate_data"]], "compas_timber.connections.XHalfLapJoint": [[146, 2, 1, "", "ToString"], [147, 2, 1, "", "add_features"], [148, 2, 1, "", "copy"], [149, 2, 1, "", "create"], [150, 2, 1, "", "from_json"], [151, 2, 1, "", "from_jsonstring"], [152, 2, 1, "", "get_cross_cutting_frame"], [153, 2, 1, "", "get_face_most_ortho_to_beam"], [154, 2, 1, "", "get_face_most_towards_beam"], [155, 2, 1, "", "get_main_cutting_frame"], [156, 2, 1, "", "restore_beams_from_keys"], [157, 2, 1, "", "sha256"], [158, 2, 1, "", "to_json"], [159, 2, 1, "", "to_jsonstring"], [160, 2, 1, "", "validate_data"]], "compas_timber.elements": [[162, 1, 1, "", "Beam"]], "compas_timber.elements.Beam": [[163, 2, 1, "", "ToString"], [164, 2, 1, "", "add_blank_extension"], [165, 2, 1, "", "add_feature"], [166, 2, 1, "", "add_features"], [167, 2, 1, "", "compute_aabb"], [168, 2, 1, "", "compute_collision_mesh"], [169, 2, 1, "", "compute_geometry"], [170, 2, 1, "", "compute_obb"], [171, 2, 1, "", "compute_worldtransformation"], [172, 2, 1, "", "copy"], [173, 2, 1, "", "endpoint_closest_to_point"], [174, 2, 1, "", "extension_to_plane"], [175, 2, 1, "", "from_centerline"], [176, 2, 1, "", "from_endpoints"], [177, 2, 1, "", "from_json"], [178, 2, 1, "", "from_jsonstring"], [179, 2, 1, "", "remove_blank_extension"], [180, 2, 1, "", "remove_features"], [181, 2, 1, "", "sha256"], [182, 2, 1, "", "to_json"], [183, 2, 1, "", "to_jsonstring"], [184, 2, 1, "", "transform"], [185, 2, 1, "", "transformed"], [186, 2, 1, "", "validate_data"]], "compas_timber.fabrication": [[187, 1, 1, "", "BTLx"], [191, 1, 1, "", "BTLxFrenchRidgeLap"], [195, 1, 1, "", "BTLxJackCut"], [198, 1, 1, "", "BTLxProcess"], [199, 1, 1, "", "FrenchRidgeFactory"], [201, 1, 1, "", "LButtFactory"], [203, 1, 1, "", "LMiterFactory"], [205, 1, 1, "", "TButtFactory"]], "compas_timber.fabrication.BTLx": [[188, 2, 1, "", "btlx_string"], [189, 2, 1, "", "process_model"], [190, 2, 1, "", "register_joint"]], "compas_timber.fabrication.BTLxFrenchRidgeLap": [[192, 2, 1, "", "create_process"], [193, 2, 1, "", "get_params"], [194, 2, 1, "", "process_joints"]], "compas_timber.fabrication.BTLxJackCut": [[196, 2, 1, "", "create_process"], [197, 2, 1, "", "generate_process"]], "compas_timber.fabrication.FrenchRidgeFactory": [[200, 2, 1, "", "apply_processings"]], "compas_timber.fabrication.LButtFactory": [[202, 2, 1, "", "apply_processings"]], "compas_timber.fabrication.LMiterFactory": [[204, 2, 1, "", "apply_processings"]], "compas_timber.fabrication.TButtFactory": [[206, 2, 1, "", "apply_processings"]], "compas_timber.ghpython": [[207, 1, 1, "", "CategoryRule"], [211, 1, 1, "", "DebugInfomation"], [215, 1, 1, "", "DirectRule"], [218, 1, 1, "", "FeatureDefinition"], [220, 1, 1, "", "JointDefinition"], [224, 1, 1, "", "TopologyRule"]], "compas_timber.ghpython.CategoryRule": [[208, 2, 1, "", "ToString"], [209, 2, 1, "", "comply"], [210, 2, 1, "", "reorder"]], "compas_timber.ghpython.DebugInfomation": [[212, 2, 1, "", "ToString"], [213, 2, 1, "", "add_feature_error"], [214, 2, 1, "", "add_joint_error"]], "compas_timber.ghpython.DirectRule": [[216, 2, 1, "", "ToString"], [217, 2, 1, "", "comply"]], "compas_timber.ghpython.FeatureDefinition": [[219, 2, 1, "", "ToString"]], "compas_timber.ghpython.JointDefinition": [[221, 2, 1, "", "ToString"], [222, 2, 1, "", "is_identical"], [223, 2, 1, "", "match"]], "compas_timber.ghpython.TopologyRule": [[225, 2, 1, "", "ToString"], [226, 2, 1, "", "comply"]], "compas_timber.model": [[227, 1, 1, "", "TimberModel"]], "compas_timber.model.TimberModel": [[228, 2, 1, "", "ToString"], [229, 2, 1, "", "add_beam"], [230, 2, 1, "", "add_element"], [231, 2, 1, "", "add_elements"], [232, 2, 1, "", "add_group"], [233, 2, 1, "", "add_interaction"], [234, 2, 1, "", "add_joint"], [235, 2, 1, "", "add_material"], [236, 2, 1, "", "add_wall"], [237, 2, 1, "", "assign_material"], [238, 2, 1, "", "beam_by_guid"], [239, 2, 1, "", "compute_aabb"], [240, 2, 1, "", "compute_obb"], [241, 2, 1, "", "copy"], [242, 2, 1, "", "elements"], [243, 2, 1, "", "elements_connected_by"], [244, 2, 1, "", "from_json"], [245, 2, 1, "", "from_jsonstring"], [246, 2, 1, "", "has_element"], [247, 2, 1, "", "has_interaction"], [248, 2, 1, "", "has_material"], [249, 2, 1, "", "interactions"], [250, 2, 1, "", "materials"], [251, 2, 1, "", "remove_element"], [252, 2, 1, "", "remove_interaction"], [253, 2, 1, "", "remove_joint"], [254, 2, 1, "", "rotate"], [255, 2, 1, "", "rotated"], [256, 2, 1, "", "scale"], [257, 2, 1, "", "scaled"], [258, 2, 1, "", "set_topologies"], [259, 2, 1, "", "sha256"], [260, 2, 1, "", "to_json"], [261, 2, 1, "", "to_jsonstring"], [262, 2, 1, "", "transform"], [263, 2, 1, "", "transform_numpy"], [264, 2, 1, "", "transformed"], [265, 2, 1, "", "transformed_numpy"], [266, 2, 1, "", "translate"], [267, 2, 1, "", "translated"], [268, 2, 1, "", "validate_data"]], "compas_timber.planning": [[269, 1, 1, "", "Actor"], [271, 1, 1, "", "BuildingPlan"], [281, 1, 1, "", "SimpleSequenceGenerator"], [282, 1, 1, "", "Step"]], "compas_timber.planning.Actor": [[270, 2, 1, "", "get_name"]], "compas_timber.planning.BuildingPlan": [[272, 2, 1, "", "ToString"], [273, 2, 1, "", "add_step"], [274, 2, 1, "", "copy"], [275, 2, 1, "", "from_json"], [276, 2, 1, "", "from_jsonstring"], [277, 2, 1, "", "sha256"], [278, 2, 1, "", "to_json"], [279, 2, 1, "", "to_jsonstring"], [280, 2, 1, "", "validate_data"]], "compas_timber.planning.Step": [[283, 2, 1, "", "ToString"], [284, 2, 1, "", "copy"], [285, 2, 1, "", "from_json"], [286, 2, 1, "", "from_jsonstring"], [287, 2, 1, "", "sha256"], [288, 2, 1, "", "to_json"], [289, 2, 1, "", "to_jsonstring"], [290, 2, 1, "", "transform"], [291, 2, 1, "", "validate_data"]], "compas_timber.rhino": [[292, 3, 1, "", "find_neighboring_beams"]]}, "objtypes": {"0": "py:exception", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "exception", "Python exception"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "packag": 0, "compas_timb": [1, 2, 3, 4, 5, 6], "connect": 1, "class": [1, 2, 3, 4, 5, 6], "function": 1, "except": 1, "element": [2, 242], "fabric": 3, "ghpython": 4, "model": 5, "plan": 6, "rhino": 7, "plugin": [7, 299], "beamjoinningerror": 8, "connectionsolv": [9, 10, 11], "find_intersecting_pair": 10, "find_topologi": 11, "frenchridgelapjoint": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "tostr": [13, 28, 44, 64, 80, 95, 111, 130, 146, 163, 208, 212, 216, 219, 221, 225, 228, 272, 283], "add_featur": [14, 29, 45, 65, 81, 96, 112, 131, 147, 165, 166], "check_geometri": 15, "copi": [16, 30, 47, 66, 82, 97, 114, 132, 148, 172, 241, 274, 284], "creat": [17, 31, 48, 67, 83, 98, 115, 133, 149, 295], "from_json": [18, 32, 49, 68, 84, 99, 116, 134, 150, 177, 244, 275, 285], "from_jsonstr": [19, 33, 50, 69, 85, 100, 117, 135, 151, 178, 245, 276, 286], "get_face_most_ortho_to_beam": [20, 34, 53, 71, 87, 102, 119, 137, 153], "get_face_most_towards_beam": [21, 35, 54, 72, 88, 103, 120, 138, 154], "restore_beams_from_kei": [22, 36, 56, 74, 89, 105, 122, 140, 156], "sha256": [23, 37, 57, 75, 90, 106, 123, 141, 157, 181, 259, 277, 287], "to_json": [24, 38, 60, 76, 91, 107, 126, 142, 158, 182, 260, 278, 288], "to_jsonstr": [25, 39, 61, 77, 92, 108, 127, 143, 159, 183, 261, 279, 289], "validate_data": [26, 40, 62, 78, 93, 109, 128, 144, 160, 186, 268, 280, 291], "joint": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 295, 306, 307], "jointtopologi": [41, 42], "get_nam": [42, 270], "lbuttjoint": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "back_surface_main": [46, 113], "front_back_surface_main": [51, 118], "get_cross_cutting_plan": 52, "get_main_cutting_plan": [55, 121], "side_surfaces_cross": [58, 124], "subtraction_volum": [59, 125], "lhalflapjoint": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "get_cross_cutting_fram": [70, 101, 136, 152], "get_main_cutting_fram": [73, 104, 139, 155], "lmiterjoint": [79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "get_cutting_plan": 86, "lapjoint": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "tbuttjoint": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "thalflapjoint": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "xhalflapjoint": [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], "find_neighboring_beam": [161, 292], "beam": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 303], "add_blank_extens": 164, "compute_aabb": [167, 239], "compute_collision_mesh": 168, "compute_geometri": 169, "compute_obb": [170, 240], "compute_worldtransform": 171, "endpoint_closest_to_point": 173, "extension_to_plan": 174, "from_centerlin": 175, "from_endpoint": 176, "remove_blank_extens": 179, "remove_featur": 180, "transform": [184, 185, 262, 264, 290], "btlx": [187, 188, 189, 190, 300], "btlx_string": 188, "process_model": 189, "register_joint": 190, "btlxfrenchridgelap": [191, 192, 193, 194], "create_process": [192, 196], "get_param": 193, "process_joint": 194, "btlxjackcut": [195, 196, 197], "generate_process": 197, "btlxprocess": 198, "frenchridgefactori": [199, 200], "apply_process": [200, 202, 204, 206], "lbuttfactori": [201, 202], "lmiterfactori": [203, 204], "tbuttfactori": [205, 206], "categoryrul": [207, 208, 209, 210], "compli": [209, 217, 226], "reorder": 210, "debuginfom": [211, 212, 213, 214], "add_feature_error": 213, "add_joint_error": 214, "directrul": [215, 216, 217], "featuredefinit": [218, 219], "jointdefinit": [220, 221, 222, 223], "is_ident": 222, "match": 223, "topologyrul": [224, 225, 226], "timbermodel": [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "add_beam": 229, "add_el": [230, 231], "add_group": 232, "add_interact": 233, "add_joint": 234, "add_materi": 235, "add_wal": 236, "assign_materi": 237, "beam_by_guid": 238, "elements_connected_bi": 243, "has_el": 246, "has_interact": 247, "has_materi": 248, "interact": 249, "materi": 250, "remove_el": 251, "remove_interact": 252, "remove_joint": 253, "rotat": [254, 255], "scale": [256, 257], "set_topologi": 258, "transform_numpi": 263, "transformed_numpi": 265, "translat": [266, 267], "actor": [269, 270], "buildingplan": [271, 272, 273, 274, 275, 276, 277, 278, 279, 280], "add_step": 273, "simplesequencegener": 281, "step": [282, 283, 284, 285, 286, 287, 288, 289, 290, 291], "cite": 293, "exampl": [294, 304], "timber": [294, 296], "assembli": [294, 301], "compa": 296, "document": 296, "depend": 296, "tabl": [296, 306], "content": 296, "indic": 296, "instal": 297, "stabl": 297, "conda": 297, "develop": 297, "licens": 298, "grasshopp": 299, "contribut": 300, "guid": 300, "attribut": 302, "featur": 305, "topologi": 306, "type": [306, 308], "l": 306, "t": 306, "x": 306, "summari": 306, "rule": 307, "show": 308, "visualis": 308, "geometri": 308, "error": 308, "util": 309, "bake": 309, "boxmap": 309, "workflow": 310}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Packages": [[0, "packages"]], "compas_timber.connections": [[1, "compas-timber-connections"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"]], "Functions": [[1, "functions"]], "Exceptions": [[1, "exceptions"]], "compas_timber.elements": [[2, "compas-timber-elements"]], "compas_timber.fabrication": [[3, "compas-timber-fabrication"]], "compas_timber.ghpython": [[4, "compas-timber-ghpython"]], "compas_timber.model": [[5, "compas-timber-model"]], "compas_timber.planning": [[6, "compas-timber-planning"]], "rhino": [[7, "rhino"]], "Plugins": [[7, "plugins"]], "BeamJoinningError": [[8, "beamjoinningerror"]], "ConnectionSolver": [[9, "connectionsolver"]], "ConnectionSolver.find_intersecting_pairs": [[10, "connectionsolver-find-intersecting-pairs"]], "ConnectionSolver.find_topology": [[11, "connectionsolver-find-topology"]], "FrenchRidgeLapJoint": [[12, "frenchridgelapjoint"]], "FrenchRidgeLapJoint.ToString": [[13, "frenchridgelapjoint-tostring"]], "FrenchRidgeLapJoint.add_features": [[14, "frenchridgelapjoint-add-features"]], "FrenchRidgeLapJoint.check_geometry": [[15, "frenchridgelapjoint-check-geometry"]], "FrenchRidgeLapJoint.copy": [[16, "frenchridgelapjoint-copy"]], "FrenchRidgeLapJoint.create": [[17, "frenchridgelapjoint-create"]], "FrenchRidgeLapJoint.from_json": [[18, "frenchridgelapjoint-from-json"]], "FrenchRidgeLapJoint.from_jsonstring": [[19, "frenchridgelapjoint-from-jsonstring"]], "FrenchRidgeLapJoint.get_face_most_ortho_to_beam": [[20, "frenchridgelapjoint-get-face-most-ortho-to-beam"]], "FrenchRidgeLapJoint.get_face_most_towards_beam": [[21, "frenchridgelapjoint-get-face-most-towards-beam"]], "FrenchRidgeLapJoint.restore_beams_from_keys": [[22, "frenchridgelapjoint-restore-beams-from-keys"]], "FrenchRidgeLapJoint.sha256": [[23, "frenchridgelapjoint-sha256"]], "FrenchRidgeLapJoint.to_json": [[24, "frenchridgelapjoint-to-json"]], "FrenchRidgeLapJoint.to_jsonstring": [[25, "frenchridgelapjoint-to-jsonstring"]], "FrenchRidgeLapJoint.validate_data": [[26, "frenchridgelapjoint-validate-data"]], "Joint": [[27, "joint"]], "Joint.ToString": [[28, "joint-tostring"]], "Joint.add_features": [[29, "joint-add-features"]], "Joint.copy": [[30, "joint-copy"]], "Joint.create": [[31, "joint-create"]], "Joint.from_json": [[32, "joint-from-json"]], "Joint.from_jsonstring": [[33, "joint-from-jsonstring"]], "Joint.get_face_most_ortho_to_beam": [[34, "joint-get-face-most-ortho-to-beam"]], "Joint.get_face_most_towards_beam": [[35, "joint-get-face-most-towards-beam"]], "Joint.restore_beams_from_keys": [[36, "joint-restore-beams-from-keys"]], "Joint.sha256": [[37, "joint-sha256"]], "Joint.to_json": [[38, "joint-to-json"]], "Joint.to_jsonstring": [[39, "joint-to-jsonstring"]], "Joint.validate_data": [[40, "joint-validate-data"]], "JointTopology": [[41, "jointtopology"]], "JointTopology.get_name": [[42, "jointtopology-get-name"]], "LButtJoint": [[43, "lbuttjoint"]], "LButtJoint.ToString": [[44, "lbuttjoint-tostring"]], "LButtJoint.add_features": [[45, "lbuttjoint-add-features"]], "LButtJoint.back_surface_main": [[46, "lbuttjoint-back-surface-main"]], "LButtJoint.copy": [[47, "lbuttjoint-copy"]], "LButtJoint.create": [[48, "lbuttjoint-create"]], "LButtJoint.from_json": [[49, "lbuttjoint-from-json"]], "LButtJoint.from_jsonstring": [[50, "lbuttjoint-from-jsonstring"]], "LButtJoint.front_back_surface_main": [[51, "lbuttjoint-front-back-surface-main"]], "LButtJoint.get_cross_cutting_plane": [[52, "lbuttjoint-get-cross-cutting-plane"]], "LButtJoint.get_face_most_ortho_to_beam": [[53, "lbuttjoint-get-face-most-ortho-to-beam"]], "LButtJoint.get_face_most_towards_beam": [[54, "lbuttjoint-get-face-most-towards-beam"]], "LButtJoint.get_main_cutting_plane": [[55, "lbuttjoint-get-main-cutting-plane"]], "LButtJoint.restore_beams_from_keys": [[56, "lbuttjoint-restore-beams-from-keys"]], "LButtJoint.sha256": [[57, "lbuttjoint-sha256"]], "LButtJoint.side_surfaces_cross": [[58, "lbuttjoint-side-surfaces-cross"]], "LButtJoint.subtraction_volume": [[59, "lbuttjoint-subtraction-volume"]], "LButtJoint.to_json": [[60, "lbuttjoint-to-json"]], "LButtJoint.to_jsonstring": [[61, "lbuttjoint-to-jsonstring"]], "LButtJoint.validate_data": [[62, "lbuttjoint-validate-data"]], "LHalfLapJoint": [[63, "lhalflapjoint"]], "LHalfLapJoint.ToString": [[64, "lhalflapjoint-tostring"]], "LHalfLapJoint.add_features": [[65, "lhalflapjoint-add-features"]], "LHalfLapJoint.copy": [[66, "lhalflapjoint-copy"]], "LHalfLapJoint.create": [[67, "lhalflapjoint-create"]], "LHalfLapJoint.from_json": [[68, "lhalflapjoint-from-json"]], "LHalfLapJoint.from_jsonstring": [[69, "lhalflapjoint-from-jsonstring"]], "LHalfLapJoint.get_cross_cutting_frame": [[70, "lhalflapjoint-get-cross-cutting-frame"]], "LHalfLapJoint.get_face_most_ortho_to_beam": [[71, "lhalflapjoint-get-face-most-ortho-to-beam"]], "LHalfLapJoint.get_face_most_towards_beam": [[72, "lhalflapjoint-get-face-most-towards-beam"]], "LHalfLapJoint.get_main_cutting_frame": [[73, "lhalflapjoint-get-main-cutting-frame"]], "LHalfLapJoint.restore_beams_from_keys": [[74, "lhalflapjoint-restore-beams-from-keys"]], "LHalfLapJoint.sha256": [[75, "lhalflapjoint-sha256"]], "LHalfLapJoint.to_json": [[76, "lhalflapjoint-to-json"]], "LHalfLapJoint.to_jsonstring": [[77, "lhalflapjoint-to-jsonstring"]], "LHalfLapJoint.validate_data": [[78, "lhalflapjoint-validate-data"]], "LMiterJoint": [[79, "lmiterjoint"]], "LMiterJoint.ToString": [[80, "lmiterjoint-tostring"]], "LMiterJoint.add_features": [[81, "lmiterjoint-add-features"]], "LMiterJoint.copy": [[82, "lmiterjoint-copy"]], "LMiterJoint.create": [[83, "lmiterjoint-create"]], "LMiterJoint.from_json": [[84, "lmiterjoint-from-json"]], "LMiterJoint.from_jsonstring": [[85, "lmiterjoint-from-jsonstring"]], "LMiterJoint.get_cutting_planes": [[86, "lmiterjoint-get-cutting-planes"]], "LMiterJoint.get_face_most_ortho_to_beam": [[87, "lmiterjoint-get-face-most-ortho-to-beam"]], "LMiterJoint.get_face_most_towards_beam": [[88, "lmiterjoint-get-face-most-towards-beam"]], "LMiterJoint.restore_beams_from_keys": [[89, "lmiterjoint-restore-beams-from-keys"]], "LMiterJoint.sha256": [[90, "lmiterjoint-sha256"]], "LMiterJoint.to_json": [[91, "lmiterjoint-to-json"]], "LMiterJoint.to_jsonstring": [[92, "lmiterjoint-to-jsonstring"]], "LMiterJoint.validate_data": [[93, "lmiterjoint-validate-data"]], "LapJoint": [[94, "lapjoint"]], "LapJoint.ToString": [[95, "lapjoint-tostring"]], "LapJoint.add_features": [[96, "lapjoint-add-features"]], "LapJoint.copy": [[97, "lapjoint-copy"]], "LapJoint.create": [[98, "lapjoint-create"]], "LapJoint.from_json": [[99, "lapjoint-from-json"]], "LapJoint.from_jsonstring": [[100, "lapjoint-from-jsonstring"]], "LapJoint.get_cross_cutting_frame": [[101, "lapjoint-get-cross-cutting-frame"]], "LapJoint.get_face_most_ortho_to_beam": [[102, "lapjoint-get-face-most-ortho-to-beam"]], "LapJoint.get_face_most_towards_beam": [[103, "lapjoint-get-face-most-towards-beam"]], "LapJoint.get_main_cutting_frame": [[104, "lapjoint-get-main-cutting-frame"]], "LapJoint.restore_beams_from_keys": [[105, "lapjoint-restore-beams-from-keys"]], "LapJoint.sha256": [[106, "lapjoint-sha256"]], "LapJoint.to_json": [[107, "lapjoint-to-json"]], "LapJoint.to_jsonstring": [[108, "lapjoint-to-jsonstring"]], "LapJoint.validate_data": [[109, "lapjoint-validate-data"]], "TButtJoint": [[110, "tbuttjoint"]], "TButtJoint.ToString": [[111, "tbuttjoint-tostring"]], "TButtJoint.add_features": [[112, "tbuttjoint-add-features"]], "TButtJoint.back_surface_main": [[113, "tbuttjoint-back-surface-main"]], "TButtJoint.copy": [[114, "tbuttjoint-copy"]], "TButtJoint.create": [[115, "tbuttjoint-create"]], "TButtJoint.from_json": [[116, "tbuttjoint-from-json"]], "TButtJoint.from_jsonstring": [[117, "tbuttjoint-from-jsonstring"]], "TButtJoint.front_back_surface_main": [[118, "tbuttjoint-front-back-surface-main"]], "TButtJoint.get_face_most_ortho_to_beam": [[119, "tbuttjoint-get-face-most-ortho-to-beam"]], "TButtJoint.get_face_most_towards_beam": [[120, "tbuttjoint-get-face-most-towards-beam"]], "TButtJoint.get_main_cutting_plane": [[121, "tbuttjoint-get-main-cutting-plane"]], "TButtJoint.restore_beams_from_keys": [[122, "tbuttjoint-restore-beams-from-keys"]], "TButtJoint.sha256": [[123, "tbuttjoint-sha256"]], "TButtJoint.side_surfaces_cross": [[124, "tbuttjoint-side-surfaces-cross"]], "TButtJoint.subtraction_volume": [[125, "tbuttjoint-subtraction-volume"]], "TButtJoint.to_json": [[126, "tbuttjoint-to-json"]], "TButtJoint.to_jsonstring": [[127, "tbuttjoint-to-jsonstring"]], "TButtJoint.validate_data": [[128, "tbuttjoint-validate-data"]], "THalfLapJoint": [[129, "thalflapjoint"]], "THalfLapJoint.ToString": [[130, "thalflapjoint-tostring"]], "THalfLapJoint.add_features": [[131, "thalflapjoint-add-features"]], "THalfLapJoint.copy": [[132, "thalflapjoint-copy"]], "THalfLapJoint.create": [[133, "thalflapjoint-create"]], "THalfLapJoint.from_json": [[134, "thalflapjoint-from-json"]], "THalfLapJoint.from_jsonstring": [[135, "thalflapjoint-from-jsonstring"]], "THalfLapJoint.get_cross_cutting_frame": [[136, "thalflapjoint-get-cross-cutting-frame"]], "THalfLapJoint.get_face_most_ortho_to_beam": [[137, "thalflapjoint-get-face-most-ortho-to-beam"]], "THalfLapJoint.get_face_most_towards_beam": [[138, "thalflapjoint-get-face-most-towards-beam"]], "THalfLapJoint.get_main_cutting_frame": [[139, "thalflapjoint-get-main-cutting-frame"]], "THalfLapJoint.restore_beams_from_keys": [[140, "thalflapjoint-restore-beams-from-keys"]], "THalfLapJoint.sha256": [[141, "thalflapjoint-sha256"]], "THalfLapJoint.to_json": [[142, "thalflapjoint-to-json"]], "THalfLapJoint.to_jsonstring": [[143, "thalflapjoint-to-jsonstring"]], "THalfLapJoint.validate_data": [[144, "thalflapjoint-validate-data"]], "XHalfLapJoint": [[145, "xhalflapjoint"]], "XHalfLapJoint.ToString": [[146, "xhalflapjoint-tostring"]], "XHalfLapJoint.add_features": [[147, "xhalflapjoint-add-features"]], "XHalfLapJoint.copy": [[148, "xhalflapjoint-copy"]], "XHalfLapJoint.create": [[149, "xhalflapjoint-create"]], "XHalfLapJoint.from_json": [[150, "xhalflapjoint-from-json"]], "XHalfLapJoint.from_jsonstring": [[151, "xhalflapjoint-from-jsonstring"]], "XHalfLapJoint.get_cross_cutting_frame": [[152, "xhalflapjoint-get-cross-cutting-frame"]], "XHalfLapJoint.get_face_most_ortho_to_beam": [[153, "xhalflapjoint-get-face-most-ortho-to-beam"]], "XHalfLapJoint.get_face_most_towards_beam": [[154, "xhalflapjoint-get-face-most-towards-beam"]], "XHalfLapJoint.get_main_cutting_frame": [[155, "xhalflapjoint-get-main-cutting-frame"]], "XHalfLapJoint.restore_beams_from_keys": [[156, "xhalflapjoint-restore-beams-from-keys"]], "XHalfLapJoint.sha256": [[157, "xhalflapjoint-sha256"]], "XHalfLapJoint.to_json": [[158, "xhalflapjoint-to-json"]], "XHalfLapJoint.to_jsonstring": [[159, "xhalflapjoint-to-jsonstring"]], "XHalfLapJoint.validate_data": [[160, "xhalflapjoint-validate-data"]], "find_neighboring_beams": [[161, "find-neighboring-beams"], [292, "find-neighboring-beams"]], "Beam": [[162, "beam"], [303, "beam"]], "Beam.ToString": [[163, "beam-tostring"]], "Beam.add_blank_extension": [[164, "beam-add-blank-extension"]], "Beam.add_feature": [[165, "beam-add-feature"]], "Beam.add_features": [[166, "beam-add-features"]], "Beam.compute_aabb": [[167, "beam-compute-aabb"]], "Beam.compute_collision_mesh": [[168, "beam-compute-collision-mesh"]], "Beam.compute_geometry": [[169, "beam-compute-geometry"]], "Beam.compute_obb": [[170, "beam-compute-obb"]], "Beam.compute_worldtransformation": [[171, "beam-compute-worldtransformation"]], "Beam.copy": [[172, "beam-copy"]], "Beam.endpoint_closest_to_point": [[173, "beam-endpoint-closest-to-point"]], "Beam.extension_to_plane": [[174, "beam-extension-to-plane"]], "Beam.from_centerline": [[175, "beam-from-centerline"]], "Beam.from_endpoints": [[176, "beam-from-endpoints"]], "Beam.from_json": [[177, "beam-from-json"]], "Beam.from_jsonstring": [[178, "beam-from-jsonstring"]], "Beam.remove_blank_extension": [[179, "beam-remove-blank-extension"]], "Beam.remove_features": [[180, "beam-remove-features"]], "Beam.sha256": [[181, "beam-sha256"]], "Beam.to_json": [[182, "beam-to-json"]], "Beam.to_jsonstring": [[183, "beam-to-jsonstring"]], "Beam.transform": [[184, "beam-transform"]], "Beam.transformed": [[185, "beam-transformed"]], "Beam.validate_data": [[186, "beam-validate-data"]], "BTLx": [[187, "btlx"]], "BTLx.btlx_string": [[188, "btlx-btlx-string"]], "BTLx.process_model": [[189, "btlx-process-model"]], "BTLx.register_joint": [[190, "btlx-register-joint"]], "BTLxFrenchRidgeLap": [[191, "btlxfrenchridgelap"]], "BTLxFrenchRidgeLap.create_process": [[192, "btlxfrenchridgelap-create-process"]], "BTLxFrenchRidgeLap.get_params": [[193, "btlxfrenchridgelap-get-params"]], "BTLxFrenchRidgeLap.process_joints": [[194, "btlxfrenchridgelap-process-joints"]], "BTLxJackCut": [[195, "btlxjackcut"]], "BTLxJackCut.create_process": [[196, "btlxjackcut-create-process"]], "BTLxJackCut.generate_process": [[197, "btlxjackcut-generate-process"]], "BTLxProcess": [[198, "btlxprocess"]], "FrenchRidgeFactory": [[199, "frenchridgefactory"]], "FrenchRidgeFactory.apply_processings": [[200, "frenchridgefactory-apply-processings"]], "LButtFactory": [[201, "lbuttfactory"]], "LButtFactory.apply_processings": [[202, "lbuttfactory-apply-processings"]], "LMiterFactory": [[203, "lmiterfactory"]], "LMiterFactory.apply_processings": [[204, "lmiterfactory-apply-processings"]], "TButtFactory": [[205, "tbuttfactory"]], "TButtFactory.apply_processings": [[206, "tbuttfactory-apply-processings"]], "CategoryRule": [[207, "categoryrule"]], "CategoryRule.ToString": [[208, "categoryrule-tostring"]], "CategoryRule.comply": [[209, "categoryrule-comply"]], "CategoryRule.reorder": [[210, "categoryrule-reorder"]], "DebugInfomation": [[211, "debuginfomation"]], "DebugInfomation.ToString": [[212, "debuginfomation-tostring"]], "DebugInfomation.add_feature_error": [[213, "debuginfomation-add-feature-error"]], "DebugInfomation.add_joint_error": [[214, "debuginfomation-add-joint-error"]], "DirectRule": [[215, "directrule"]], "DirectRule.ToString": [[216, "directrule-tostring"]], "DirectRule.comply": [[217, "directrule-comply"]], "FeatureDefinition": [[218, "featuredefinition"]], "FeatureDefinition.ToString": [[219, "featuredefinition-tostring"]], "JointDefinition": [[220, "jointdefinition"]], "JointDefinition.ToString": [[221, "jointdefinition-tostring"]], "JointDefinition.is_identical": [[222, "jointdefinition-is-identical"]], "JointDefinition.match": [[223, "jointdefinition-match"]], "TopologyRule": [[224, "topologyrule"]], "TopologyRule.ToString": [[225, "topologyrule-tostring"]], "TopologyRule.comply": [[226, "topologyrule-comply"]], "TimberModel": [[227, "timbermodel"]], "TimberModel.ToString": [[228, "timbermodel-tostring"]], "TimberModel.add_beam": [[229, "timbermodel-add-beam"]], "TimberModel.add_element": [[230, "timbermodel-add-element"]], "TimberModel.add_elements": [[231, "timbermodel-add-elements"]], "TimberModel.add_group": [[232, "timbermodel-add-group"]], "TimberModel.add_interaction": [[233, "timbermodel-add-interaction"]], "TimberModel.add_joint": [[234, "timbermodel-add-joint"]], "TimberModel.add_material": [[235, "timbermodel-add-material"]], "TimberModel.add_wall": [[236, "timbermodel-add-wall"]], "TimberModel.assign_material": [[237, "timbermodel-assign-material"]], "TimberModel.beam_by_guid": [[238, "timbermodel-beam-by-guid"]], "TimberModel.compute_aabb": [[239, "timbermodel-compute-aabb"]], "TimberModel.compute_obb": [[240, "timbermodel-compute-obb"]], "TimberModel.copy": [[241, "timbermodel-copy"]], "TimberModel.elements": [[242, "timbermodel-elements"]], "TimberModel.elements_connected_by": [[243, "timbermodel-elements-connected-by"]], "TimberModel.from_json": [[244, "timbermodel-from-json"]], "TimberModel.from_jsonstring": [[245, "timbermodel-from-jsonstring"]], "TimberModel.has_element": [[246, "timbermodel-has-element"]], "TimberModel.has_interaction": [[247, "timbermodel-has-interaction"]], "TimberModel.has_material": [[248, "timbermodel-has-material"]], "TimberModel.interactions": [[249, "timbermodel-interactions"]], "TimberModel.materials": [[250, "timbermodel-materials"]], "TimberModel.remove_element": [[251, "timbermodel-remove-element"]], "TimberModel.remove_interaction": [[252, "timbermodel-remove-interaction"]], "TimberModel.remove_joint": [[253, "timbermodel-remove-joint"]], "TimberModel.rotate": [[254, "timbermodel-rotate"]], "TimberModel.rotated": [[255, "timbermodel-rotated"]], "TimberModel.scale": [[256, "timbermodel-scale"]], "TimberModel.scaled": [[257, "timbermodel-scaled"]], "TimberModel.set_topologies": [[258, "timbermodel-set-topologies"]], "TimberModel.sha256": [[259, "timbermodel-sha256"]], "TimberModel.to_json": [[260, "timbermodel-to-json"]], "TimberModel.to_jsonstring": [[261, "timbermodel-to-jsonstring"]], "TimberModel.transform": [[262, "timbermodel-transform"]], "TimberModel.transform_numpy": [[263, "timbermodel-transform-numpy"]], "TimberModel.transformed": [[264, "timbermodel-transformed"]], "TimberModel.transformed_numpy": [[265, "timbermodel-transformed-numpy"]], "TimberModel.translate": [[266, "timbermodel-translate"]], "TimberModel.translated": [[267, "timbermodel-translated"]], "TimberModel.validate_data": [[268, "timbermodel-validate-data"]], "Actor": [[269, "actor"]], "Actor.get_name": [[270, "actor-get-name"]], "BuildingPlan": [[271, "buildingplan"]], "BuildingPlan.ToString": [[272, "buildingplan-tostring"]], "BuildingPlan.add_step": [[273, "buildingplan-add-step"]], "BuildingPlan.copy": [[274, "buildingplan-copy"]], "BuildingPlan.from_json": [[275, "buildingplan-from-json"]], "BuildingPlan.from_jsonstring": [[276, "buildingplan-from-jsonstring"]], "BuildingPlan.sha256": [[277, "buildingplan-sha256"]], "BuildingPlan.to_json": [[278, "buildingplan-to-json"]], "BuildingPlan.to_jsonstring": [[279, "buildingplan-to-jsonstring"]], "BuildingPlan.validate_data": [[280, "buildingplan-validate-data"]], "SimpleSequenceGenerator": [[281, "simplesequencegenerator"]], "Step": [[282, "step"]], "Step.ToString": [[283, "step-tostring"]], "Step.copy": [[284, "step-copy"]], "Step.from_json": [[285, "step-from-json"]], "Step.from_jsonstring": [[286, "step-from-jsonstring"]], "Step.sha256": [[287, "step-sha256"]], "Step.to_json": [[288, "step-to-json"]], "Step.to_jsonstring": [[289, "step-to-jsonstring"]], "Step.transform": [[290, "step-transform"]], "Step.validate_data": [[291, "step-validate-data"]], "Citing": [[293, "citing"]], "Examples": [[294, "examples"], [304, "examples"]], "Timber Assembly Examples": [[294, "timber-assembly-examples"]], "Create Joint": [[295, "create-joint"]], "COMPAS Timber Documentation": [[296, "compas-timber-documentation"]], "Dependencies": [[296, "dependencies"]], "Table of Contents": [[296, "table-of-contents"]], "Indices and tables": [[296, "indices-and-tables"]], "Installation": [[297, "installation"]], "Stable": [[297, "stable"]], "Install with conda": [[297, "install-with-conda"]], "Development": [[297, "development"]], "License": [[298, "license"]], "Grasshopper plugin": [[299, "grasshopper-plugin"]], "BTLx Contribution Guide": [[300, "btlx-contribution-guide"]], "Assembly": [[301, "assembly"]], "Attributes": [[302, "attributes"]], "Features": [[305, "features"]], "Joints": [[306, "joints"]], "Joint Topologies": [[306, "joint-topologies"]], "Joint Types": [[306, "joint-types"]], "Joints for L Topologies": [[306, "joints-for-l-topologies"]], "Joints for T Topologies": [[306, "joints-for-t-topologies"]], "Joints for X Topologies": [[306, "joints-for-x-topologies"]], "Summary Table": [[306, "summary-table"]], "Joint Topologies and Joint Types": [[306, "id1"]], "Joint Rules": [[307, "joint-rules"]], "Show": [[308, "show"]], "Visualisation": [[308, "visualisation"]], "Geometries": [[308, "geometries"]], "Errors": [[308, "errors"]], "Types": [[308, "types"]], "Utils": [[309, "utils"]], "Bake with BoxMap": [[309, "bake-with-boxmap"]], "Workflow": [[310, "workflow"]]}, "indexentries": {"beamjoinningerror": [[8, "compas_timber.connections.BeamJoinningError"]], "connectionsolver (class in compas_timber.connections)": [[9, "compas_timber.connections.ConnectionSolver"]], "find_intersecting_pairs() (compas_timber.connections.connectionsolver class method)": [[10, "compas_timber.connections.ConnectionSolver.find_intersecting_pairs"]], "find_topology() (compas_timber.connections.connectionsolver method)": [[11, "compas_timber.connections.ConnectionSolver.find_topology"]], "frenchridgelapjoint (class in compas_timber.connections)": [[12, "compas_timber.connections.FrenchRidgeLapJoint"]], "tostring() (compas_timber.connections.frenchridgelapjoint method)": [[13, "compas_timber.connections.FrenchRidgeLapJoint.ToString"]], "add_features() (compas_timber.connections.frenchridgelapjoint method)": [[14, "compas_timber.connections.FrenchRidgeLapJoint.add_features"]], "check_geometry() (compas_timber.connections.frenchridgelapjoint method)": [[15, "compas_timber.connections.FrenchRidgeLapJoint.check_geometry"]], "copy() (compas_timber.connections.frenchridgelapjoint method)": [[16, "compas_timber.connections.FrenchRidgeLapJoint.copy"]], "create() (compas_timber.connections.frenchridgelapjoint class method)": [[17, "compas_timber.connections.FrenchRidgeLapJoint.create"]], "from_json() (compas_timber.connections.frenchridgelapjoint class method)": [[18, "compas_timber.connections.FrenchRidgeLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.frenchridgelapjoint class method)": [[19, "compas_timber.connections.FrenchRidgeLapJoint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.frenchridgelapjoint static method)": [[20, "compas_timber.connections.FrenchRidgeLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.frenchridgelapjoint static method)": [[21, "compas_timber.connections.FrenchRidgeLapJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.frenchridgelapjoint method)": [[22, "compas_timber.connections.FrenchRidgeLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.frenchridgelapjoint method)": [[23, "compas_timber.connections.FrenchRidgeLapJoint.sha256"]], "to_json() (compas_timber.connections.frenchridgelapjoint method)": [[24, "compas_timber.connections.FrenchRidgeLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.frenchridgelapjoint method)": [[25, "compas_timber.connections.FrenchRidgeLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.frenchridgelapjoint class method)": [[26, "compas_timber.connections.FrenchRidgeLapJoint.validate_data"]], "joint (class in compas_timber.connections)": [[27, "compas_timber.connections.Joint"]], "tostring() (compas_timber.connections.joint method)": [[28, "compas_timber.connections.Joint.ToString"]], "add_features() (compas_timber.connections.joint method)": [[29, "compas_timber.connections.Joint.add_features"]], "copy() (compas_timber.connections.joint method)": [[30, "compas_timber.connections.Joint.copy"]], "create() (compas_timber.connections.joint class method)": [[31, "compas_timber.connections.Joint.create"]], "from_json() (compas_timber.connections.joint class method)": [[32, "compas_timber.connections.Joint.from_json"]], "from_jsonstring() (compas_timber.connections.joint class method)": [[33, "compas_timber.connections.Joint.from_jsonstring"]], "get_face_most_ortho_to_beam() (compas_timber.connections.joint static method)": [[34, "compas_timber.connections.Joint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.joint static method)": [[35, "compas_timber.connections.Joint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.joint method)": [[36, "compas_timber.connections.Joint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.joint method)": [[37, "compas_timber.connections.Joint.sha256"]], "to_json() (compas_timber.connections.joint method)": [[38, "compas_timber.connections.Joint.to_json"]], "to_jsonstring() (compas_timber.connections.joint method)": [[39, "compas_timber.connections.Joint.to_jsonstring"]], "validate_data() (compas_timber.connections.joint class method)": [[40, "compas_timber.connections.Joint.validate_data"]], "jointtopology (class in compas_timber.connections)": [[41, "compas_timber.connections.JointTopology"]], "get_name() (compas_timber.connections.jointtopology class method)": [[42, "compas_timber.connections.JointTopology.get_name"]], "lbuttjoint (class in compas_timber.connections)": [[43, "compas_timber.connections.LButtJoint"]], "tostring() (compas_timber.connections.lbuttjoint method)": [[44, "compas_timber.connections.LButtJoint.ToString"]], "add_features() (compas_timber.connections.lbuttjoint method)": [[45, "compas_timber.connections.LButtJoint.add_features"]], "back_surface_main() (compas_timber.connections.lbuttjoint method)": [[46, "compas_timber.connections.LButtJoint.back_surface_main"]], "copy() (compas_timber.connections.lbuttjoint method)": [[47, "compas_timber.connections.LButtJoint.copy"]], "create() (compas_timber.connections.lbuttjoint class method)": [[48, "compas_timber.connections.LButtJoint.create"]], "from_json() (compas_timber.connections.lbuttjoint class method)": [[49, "compas_timber.connections.LButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lbuttjoint class method)": [[50, "compas_timber.connections.LButtJoint.from_jsonstring"]], "front_back_surface_main() (compas_timber.connections.lbuttjoint method)": [[51, "compas_timber.connections.LButtJoint.front_back_surface_main"]], "get_cross_cutting_plane() (compas_timber.connections.lbuttjoint method)": [[52, "compas_timber.connections.LButtJoint.get_cross_cutting_plane"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lbuttjoint static method)": [[53, "compas_timber.connections.LButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lbuttjoint static method)": [[54, "compas_timber.connections.LButtJoint.get_face_most_towards_beam"]], "get_main_cutting_plane() (compas_timber.connections.lbuttjoint method)": [[55, "compas_timber.connections.LButtJoint.get_main_cutting_plane"]], "restore_beams_from_keys() (compas_timber.connections.lbuttjoint method)": [[56, "compas_timber.connections.LButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lbuttjoint method)": [[57, "compas_timber.connections.LButtJoint.sha256"]], "side_surfaces_cross() (compas_timber.connections.lbuttjoint method)": [[58, "compas_timber.connections.LButtJoint.side_surfaces_cross"]], "subtraction_volume() (compas_timber.connections.lbuttjoint method)": [[59, "compas_timber.connections.LButtJoint.subtraction_volume"]], "to_json() (compas_timber.connections.lbuttjoint method)": [[60, "compas_timber.connections.LButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lbuttjoint method)": [[61, "compas_timber.connections.LButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lbuttjoint class method)": [[62, "compas_timber.connections.LButtJoint.validate_data"]], "lhalflapjoint (class in compas_timber.connections)": [[63, "compas_timber.connections.LHalfLapJoint"]], "tostring() (compas_timber.connections.lhalflapjoint method)": [[64, "compas_timber.connections.LHalfLapJoint.ToString"]], "add_features() (compas_timber.connections.lhalflapjoint method)": [[65, "compas_timber.connections.LHalfLapJoint.add_features"]], "copy() (compas_timber.connections.lhalflapjoint method)": [[66, "compas_timber.connections.LHalfLapJoint.copy"]], "create() (compas_timber.connections.lhalflapjoint class method)": [[67, "compas_timber.connections.LHalfLapJoint.create"]], "from_json() (compas_timber.connections.lhalflapjoint class method)": [[68, "compas_timber.connections.LHalfLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lhalflapjoint class method)": [[69, "compas_timber.connections.LHalfLapJoint.from_jsonstring"]], "get_cross_cutting_frame() (compas_timber.connections.lhalflapjoint method)": [[70, "compas_timber.connections.LHalfLapJoint.get_cross_cutting_frame"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lhalflapjoint static method)": [[71, "compas_timber.connections.LHalfLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lhalflapjoint static method)": [[72, "compas_timber.connections.LHalfLapJoint.get_face_most_towards_beam"]], "get_main_cutting_frame() (compas_timber.connections.lhalflapjoint method)": [[73, "compas_timber.connections.LHalfLapJoint.get_main_cutting_frame"]], "restore_beams_from_keys() (compas_timber.connections.lhalflapjoint method)": [[74, "compas_timber.connections.LHalfLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lhalflapjoint method)": [[75, "compas_timber.connections.LHalfLapJoint.sha256"]], "to_json() (compas_timber.connections.lhalflapjoint method)": [[76, "compas_timber.connections.LHalfLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lhalflapjoint method)": [[77, "compas_timber.connections.LHalfLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lhalflapjoint class method)": [[78, "compas_timber.connections.LHalfLapJoint.validate_data"]], "lmiterjoint (class in compas_timber.connections)": [[79, "compas_timber.connections.LMiterJoint"]], "tostring() (compas_timber.connections.lmiterjoint method)": [[80, "compas_timber.connections.LMiterJoint.ToString"]], "add_features() (compas_timber.connections.lmiterjoint method)": [[81, "compas_timber.connections.LMiterJoint.add_features"]], "copy() (compas_timber.connections.lmiterjoint method)": [[82, "compas_timber.connections.LMiterJoint.copy"]], "create() (compas_timber.connections.lmiterjoint class method)": [[83, "compas_timber.connections.LMiterJoint.create"]], "from_json() (compas_timber.connections.lmiterjoint class method)": [[84, "compas_timber.connections.LMiterJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lmiterjoint class method)": [[85, "compas_timber.connections.LMiterJoint.from_jsonstring"]], "get_cutting_planes() (compas_timber.connections.lmiterjoint method)": [[86, "compas_timber.connections.LMiterJoint.get_cutting_planes"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lmiterjoint static method)": [[87, "compas_timber.connections.LMiterJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lmiterjoint static method)": [[88, "compas_timber.connections.LMiterJoint.get_face_most_towards_beam"]], "restore_beams_from_keys() (compas_timber.connections.lmiterjoint method)": [[89, "compas_timber.connections.LMiterJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lmiterjoint method)": [[90, "compas_timber.connections.LMiterJoint.sha256"]], "to_json() (compas_timber.connections.lmiterjoint method)": [[91, "compas_timber.connections.LMiterJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lmiterjoint method)": [[92, "compas_timber.connections.LMiterJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lmiterjoint class method)": [[93, "compas_timber.connections.LMiterJoint.validate_data"]], "lapjoint (class in compas_timber.connections)": [[94, "compas_timber.connections.LapJoint"]], "tostring() (compas_timber.connections.lapjoint method)": [[95, "compas_timber.connections.LapJoint.ToString"]], "add_features() (compas_timber.connections.lapjoint method)": [[96, "compas_timber.connections.LapJoint.add_features"]], "copy() (compas_timber.connections.lapjoint method)": [[97, "compas_timber.connections.LapJoint.copy"]], "create() (compas_timber.connections.lapjoint class method)": [[98, "compas_timber.connections.LapJoint.create"]], "from_json() (compas_timber.connections.lapjoint class method)": [[99, "compas_timber.connections.LapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lapjoint class method)": [[100, "compas_timber.connections.LapJoint.from_jsonstring"]], "get_cross_cutting_frame() (compas_timber.connections.lapjoint method)": [[101, "compas_timber.connections.LapJoint.get_cross_cutting_frame"]], "get_face_most_ortho_to_beam() (compas_timber.connections.lapjoint static method)": [[102, "compas_timber.connections.LapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.lapjoint static method)": [[103, "compas_timber.connections.LapJoint.get_face_most_towards_beam"]], "get_main_cutting_frame() (compas_timber.connections.lapjoint method)": [[104, "compas_timber.connections.LapJoint.get_main_cutting_frame"]], "restore_beams_from_keys() (compas_timber.connections.lapjoint method)": [[105, "compas_timber.connections.LapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lapjoint method)": [[106, "compas_timber.connections.LapJoint.sha256"]], "to_json() (compas_timber.connections.lapjoint method)": [[107, "compas_timber.connections.LapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lapjoint method)": [[108, "compas_timber.connections.LapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lapjoint class method)": [[109, "compas_timber.connections.LapJoint.validate_data"]], "tbuttjoint (class in compas_timber.connections)": [[110, "compas_timber.connections.TButtJoint"]], "tostring() (compas_timber.connections.tbuttjoint method)": [[111, "compas_timber.connections.TButtJoint.ToString"]], "add_features() (compas_timber.connections.tbuttjoint method)": [[112, "compas_timber.connections.TButtJoint.add_features"]], "back_surface_main() (compas_timber.connections.tbuttjoint method)": [[113, "compas_timber.connections.TButtJoint.back_surface_main"]], "copy() (compas_timber.connections.tbuttjoint method)": [[114, "compas_timber.connections.TButtJoint.copy"]], "create() (compas_timber.connections.tbuttjoint class method)": [[115, "compas_timber.connections.TButtJoint.create"]], "from_json() (compas_timber.connections.tbuttjoint class method)": [[116, "compas_timber.connections.TButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbuttjoint class method)": [[117, "compas_timber.connections.TButtJoint.from_jsonstring"]], "front_back_surface_main() (compas_timber.connections.tbuttjoint method)": [[118, "compas_timber.connections.TButtJoint.front_back_surface_main"]], "get_face_most_ortho_to_beam() (compas_timber.connections.tbuttjoint static method)": [[119, "compas_timber.connections.TButtJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.tbuttjoint static method)": [[120, "compas_timber.connections.TButtJoint.get_face_most_towards_beam"]], "get_main_cutting_plane() (compas_timber.connections.tbuttjoint method)": [[121, "compas_timber.connections.TButtJoint.get_main_cutting_plane"]], "restore_beams_from_keys() (compas_timber.connections.tbuttjoint method)": [[122, "compas_timber.connections.TButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbuttjoint method)": [[123, "compas_timber.connections.TButtJoint.sha256"]], "side_surfaces_cross() (compas_timber.connections.tbuttjoint method)": [[124, "compas_timber.connections.TButtJoint.side_surfaces_cross"]], "subtraction_volume() (compas_timber.connections.tbuttjoint method)": [[125, "compas_timber.connections.TButtJoint.subtraction_volume"]], "to_json() (compas_timber.connections.tbuttjoint method)": [[126, "compas_timber.connections.TButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbuttjoint method)": [[127, "compas_timber.connections.TButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbuttjoint class method)": [[128, "compas_timber.connections.TButtJoint.validate_data"]], "thalflapjoint (class in compas_timber.connections)": [[129, "compas_timber.connections.THalfLapJoint"]], "tostring() (compas_timber.connections.thalflapjoint method)": [[130, "compas_timber.connections.THalfLapJoint.ToString"]], "add_features() (compas_timber.connections.thalflapjoint method)": [[131, "compas_timber.connections.THalfLapJoint.add_features"]], "copy() (compas_timber.connections.thalflapjoint method)": [[132, "compas_timber.connections.THalfLapJoint.copy"]], "create() (compas_timber.connections.thalflapjoint class method)": [[133, "compas_timber.connections.THalfLapJoint.create"]], "from_json() (compas_timber.connections.thalflapjoint class method)": [[134, "compas_timber.connections.THalfLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.thalflapjoint class method)": [[135, "compas_timber.connections.THalfLapJoint.from_jsonstring"]], "get_cross_cutting_frame() (compas_timber.connections.thalflapjoint method)": [[136, "compas_timber.connections.THalfLapJoint.get_cross_cutting_frame"]], "get_face_most_ortho_to_beam() (compas_timber.connections.thalflapjoint static method)": [[137, "compas_timber.connections.THalfLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.thalflapjoint static method)": [[138, "compas_timber.connections.THalfLapJoint.get_face_most_towards_beam"]], "get_main_cutting_frame() (compas_timber.connections.thalflapjoint method)": [[139, "compas_timber.connections.THalfLapJoint.get_main_cutting_frame"]], "restore_beams_from_keys() (compas_timber.connections.thalflapjoint method)": [[140, "compas_timber.connections.THalfLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.thalflapjoint method)": [[141, "compas_timber.connections.THalfLapJoint.sha256"]], "to_json() (compas_timber.connections.thalflapjoint method)": [[142, "compas_timber.connections.THalfLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.thalflapjoint method)": [[143, "compas_timber.connections.THalfLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.thalflapjoint class method)": [[144, "compas_timber.connections.THalfLapJoint.validate_data"]], "xhalflapjoint (class in compas_timber.connections)": [[145, "compas_timber.connections.XHalfLapJoint"]], "tostring() (compas_timber.connections.xhalflapjoint method)": [[146, "compas_timber.connections.XHalfLapJoint.ToString"]], "add_features() (compas_timber.connections.xhalflapjoint method)": [[147, "compas_timber.connections.XHalfLapJoint.add_features"]], "copy() (compas_timber.connections.xhalflapjoint method)": [[148, "compas_timber.connections.XHalfLapJoint.copy"]], "create() (compas_timber.connections.xhalflapjoint class method)": [[149, "compas_timber.connections.XHalfLapJoint.create"]], "from_json() (compas_timber.connections.xhalflapjoint class method)": [[150, "compas_timber.connections.XHalfLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xhalflapjoint class method)": [[151, "compas_timber.connections.XHalfLapJoint.from_jsonstring"]], "get_cross_cutting_frame() (compas_timber.connections.xhalflapjoint method)": [[152, "compas_timber.connections.XHalfLapJoint.get_cross_cutting_frame"]], "get_face_most_ortho_to_beam() (compas_timber.connections.xhalflapjoint static method)": [[153, "compas_timber.connections.XHalfLapJoint.get_face_most_ortho_to_beam"]], "get_face_most_towards_beam() (compas_timber.connections.xhalflapjoint static method)": [[154, "compas_timber.connections.XHalfLapJoint.get_face_most_towards_beam"]], "get_main_cutting_frame() (compas_timber.connections.xhalflapjoint method)": [[155, "compas_timber.connections.XHalfLapJoint.get_main_cutting_frame"]], "restore_beams_from_keys() (compas_timber.connections.xhalflapjoint method)": [[156, "compas_timber.connections.XHalfLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xhalflapjoint method)": [[157, "compas_timber.connections.XHalfLapJoint.sha256"]], "to_json() (compas_timber.connections.xhalflapjoint method)": [[158, "compas_timber.connections.XHalfLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xhalflapjoint method)": [[159, "compas_timber.connections.XHalfLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xhalflapjoint class method)": [[160, "compas_timber.connections.XHalfLapJoint.validate_data"]], "find_neighboring_beams() (in module compas_timber.connections)": [[161, "compas_timber.connections.find_neighboring_beams"]], "beam (class in compas_timber.elements)": [[162, "compas_timber.elements.Beam"]], "tostring() (compas_timber.elements.beam method)": [[163, "compas_timber.elements.Beam.ToString"]], "add_blank_extension() (compas_timber.elements.beam method)": [[164, "compas_timber.elements.Beam.add_blank_extension"]], "add_feature() (compas_timber.elements.beam method)": [[165, "compas_timber.elements.Beam.add_feature"]], "add_features() (compas_timber.elements.beam method)": [[166, "compas_timber.elements.Beam.add_features"]], "compute_aabb() (compas_timber.elements.beam method)": [[167, "compas_timber.elements.Beam.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.beam method)": [[168, "compas_timber.elements.Beam.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.beam method)": [[169, "compas_timber.elements.Beam.compute_geometry"]], "compute_obb() (compas_timber.elements.beam method)": [[170, "compas_timber.elements.Beam.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.beam method)": [[171, "compas_timber.elements.Beam.compute_worldtransformation"]], "copy() (compas_timber.elements.beam method)": [[172, "compas_timber.elements.Beam.copy"]], "endpoint_closest_to_point() (compas_timber.elements.beam method)": [[173, "compas_timber.elements.Beam.endpoint_closest_to_point"]], "extension_to_plane() (compas_timber.elements.beam method)": [[174, "compas_timber.elements.Beam.extension_to_plane"]], "from_centerline() (compas_timber.elements.beam class method)": [[175, "compas_timber.elements.Beam.from_centerline"]], "from_endpoints() (compas_timber.elements.beam class method)": [[176, "compas_timber.elements.Beam.from_endpoints"]], "from_json() (compas_timber.elements.beam class method)": [[177, "compas_timber.elements.Beam.from_json"]], "from_jsonstring() (compas_timber.elements.beam class method)": [[178, "compas_timber.elements.Beam.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.beam method)": [[179, "compas_timber.elements.Beam.remove_blank_extension"]], "remove_features() (compas_timber.elements.beam method)": [[180, "compas_timber.elements.Beam.remove_features"]], "sha256() (compas_timber.elements.beam method)": [[181, "compas_timber.elements.Beam.sha256"]], "to_json() (compas_timber.elements.beam method)": [[182, "compas_timber.elements.Beam.to_json"]], "to_jsonstring() (compas_timber.elements.beam method)": [[183, "compas_timber.elements.Beam.to_jsonstring"]], "transform() (compas_timber.elements.beam method)": [[184, "compas_timber.elements.Beam.transform"]], "transformed() (compas_timber.elements.beam method)": [[185, "compas_timber.elements.Beam.transformed"]], "validate_data() (compas_timber.elements.beam class method)": [[186, "compas_timber.elements.Beam.validate_data"]], "btlx (class in compas_timber.fabrication)": [[187, "compas_timber.fabrication.BTLx"]], "btlx_string() (compas_timber.fabrication.btlx method)": [[188, "compas_timber.fabrication.BTLx.btlx_string"]], "process_model() (compas_timber.fabrication.btlx method)": [[189, "compas_timber.fabrication.BTLx.process_model"]], "register_joint() (compas_timber.fabrication.btlx class method)": [[190, "compas_timber.fabrication.BTLx.register_joint"]], "btlxfrenchridgelap (class in compas_timber.fabrication)": [[191, "compas_timber.fabrication.BTLxFrenchRidgeLap"]], "create_process() (compas_timber.fabrication.btlxfrenchridgelap class method)": [[192, "compas_timber.fabrication.BTLxFrenchRidgeLap.create_process"]], "get_params() (compas_timber.fabrication.btlxfrenchridgelap method)": [[193, "compas_timber.fabrication.BTLxFrenchRidgeLap.get_params"]], "process_joints() (compas_timber.fabrication.btlxfrenchridgelap method)": [[194, "compas_timber.fabrication.BTLxFrenchRidgeLap.process_joints"]], "btlxjackcut (class in compas_timber.fabrication)": [[195, "compas_timber.fabrication.BTLxJackCut"]], "create_process() (compas_timber.fabrication.btlxjackcut class method)": [[196, "compas_timber.fabrication.BTLxJackCut.create_process"]], "generate_process() (compas_timber.fabrication.btlxjackcut method)": [[197, "compas_timber.fabrication.BTLxJackCut.generate_process"]], "btlxprocess (class in compas_timber.fabrication)": [[198, "compas_timber.fabrication.BTLxProcess"]], "frenchridgefactory (class in compas_timber.fabrication)": [[199, "compas_timber.fabrication.FrenchRidgeFactory"]], "apply_processings() (compas_timber.fabrication.frenchridgefactory class method)": [[200, "compas_timber.fabrication.FrenchRidgeFactory.apply_processings"]], "lbuttfactory (class in compas_timber.fabrication)": [[201, "compas_timber.fabrication.LButtFactory"]], "apply_processings() (compas_timber.fabrication.lbuttfactory class method)": [[202, "compas_timber.fabrication.LButtFactory.apply_processings"]], "lmiterfactory (class in compas_timber.fabrication)": [[203, "compas_timber.fabrication.LMiterFactory"]], "apply_processings() (compas_timber.fabrication.lmiterfactory class method)": [[204, "compas_timber.fabrication.LMiterFactory.apply_processings"]], "tbuttfactory (class in compas_timber.fabrication)": [[205, "compas_timber.fabrication.TButtFactory"]], "apply_processings() (compas_timber.fabrication.tbuttfactory class method)": [[206, "compas_timber.fabrication.TButtFactory.apply_processings"]], "categoryrule (class in compas_timber.ghpython)": [[207, "compas_timber.ghpython.CategoryRule"]], "tostring() (compas_timber.ghpython.categoryrule method)": [[208, "compas_timber.ghpython.CategoryRule.ToString"]], "comply() (compas_timber.ghpython.categoryrule method)": [[209, "compas_timber.ghpython.CategoryRule.comply"]], "reorder() (compas_timber.ghpython.categoryrule method)": [[210, "compas_timber.ghpython.CategoryRule.reorder"]], "debuginfomation (class in compas_timber.ghpython)": [[211, "compas_timber.ghpython.DebugInfomation"]], "tostring() (compas_timber.ghpython.debuginfomation method)": [[212, "compas_timber.ghpython.DebugInfomation.ToString"]], "add_feature_error() (compas_timber.ghpython.debuginfomation method)": [[213, "compas_timber.ghpython.DebugInfomation.add_feature_error"]], "add_joint_error() (compas_timber.ghpython.debuginfomation method)": [[214, "compas_timber.ghpython.DebugInfomation.add_joint_error"]], "directrule (class in compas_timber.ghpython)": [[215, "compas_timber.ghpython.DirectRule"]], "tostring() (compas_timber.ghpython.directrule method)": [[216, "compas_timber.ghpython.DirectRule.ToString"]], "comply() (compas_timber.ghpython.directrule method)": [[217, "compas_timber.ghpython.DirectRule.comply"]], "featuredefinition (class in compas_timber.ghpython)": [[218, "compas_timber.ghpython.FeatureDefinition"]], "tostring() (compas_timber.ghpython.featuredefinition method)": [[219, "compas_timber.ghpython.FeatureDefinition.ToString"]], "jointdefinition (class in compas_timber.ghpython)": [[220, "compas_timber.ghpython.JointDefinition"]], "tostring() (compas_timber.ghpython.jointdefinition method)": [[221, "compas_timber.ghpython.JointDefinition.ToString"]], "is_identical() (compas_timber.ghpython.jointdefinition method)": [[222, "compas_timber.ghpython.JointDefinition.is_identical"]], "match() (compas_timber.ghpython.jointdefinition method)": [[223, "compas_timber.ghpython.JointDefinition.match"]], "topologyrule (class in compas_timber.ghpython)": [[224, "compas_timber.ghpython.TopologyRule"]], "tostring() (compas_timber.ghpython.topologyrule method)": [[225, "compas_timber.ghpython.TopologyRule.ToString"]], "comply() (compas_timber.ghpython.topologyrule method)": [[226, "compas_timber.ghpython.TopologyRule.comply"]], "timbermodel (class in compas_timber.model)": [[227, "compas_timber.model.TimberModel"]], "tostring() (compas_timber.model.timbermodel method)": [[228, "compas_timber.model.TimberModel.ToString"]], "add_beam() (compas_timber.model.timbermodel method)": [[229, "compas_timber.model.TimberModel.add_beam"]], "add_element() (compas_timber.model.timbermodel method)": [[230, "compas_timber.model.TimberModel.add_element"]], "add_elements() (compas_timber.model.timbermodel method)": [[231, "compas_timber.model.TimberModel.add_elements"]], "add_group() (compas_timber.model.timbermodel method)": [[232, "compas_timber.model.TimberModel.add_group"]], "add_interaction() (compas_timber.model.timbermodel method)": [[233, "compas_timber.model.TimberModel.add_interaction"]], "add_joint() (compas_timber.model.timbermodel method)": [[234, "compas_timber.model.TimberModel.add_joint"]], "add_material() (compas_timber.model.timbermodel method)": [[235, "compas_timber.model.TimberModel.add_material"]], "add_wall() (compas_timber.model.timbermodel method)": [[236, "compas_timber.model.TimberModel.add_wall"]], "assign_material() (compas_timber.model.timbermodel method)": [[237, "compas_timber.model.TimberModel.assign_material"]], "beam_by_guid() (compas_timber.model.timbermodel method)": [[238, "compas_timber.model.TimberModel.beam_by_guid"]], "compute_aabb() (compas_timber.model.timbermodel method)": [[239, "compas_timber.model.TimberModel.compute_aabb"]], "compute_obb() (compas_timber.model.timbermodel method)": [[240, "compas_timber.model.TimberModel.compute_obb"]], "copy() (compas_timber.model.timbermodel method)": [[241, "compas_timber.model.TimberModel.copy"]], "elements() (compas_timber.model.timbermodel method)": [[242, "compas_timber.model.TimberModel.elements"]], "elements_connected_by() (compas_timber.model.timbermodel method)": [[243, "compas_timber.model.TimberModel.elements_connected_by"]], "from_json() (compas_timber.model.timbermodel class method)": [[244, "compas_timber.model.TimberModel.from_json"]], "from_jsonstring() (compas_timber.model.timbermodel class method)": [[245, "compas_timber.model.TimberModel.from_jsonstring"]], "has_element() (compas_timber.model.timbermodel method)": [[246, "compas_timber.model.TimberModel.has_element"]], "has_interaction() (compas_timber.model.timbermodel method)": [[247, "compas_timber.model.TimberModel.has_interaction"]], "has_material() (compas_timber.model.timbermodel method)": [[248, "compas_timber.model.TimberModel.has_material"]], "interactions() (compas_timber.model.timbermodel method)": [[249, "compas_timber.model.TimberModel.interactions"]], "materials() (compas_timber.model.timbermodel method)": [[250, "compas_timber.model.TimberModel.materials"]], "remove_element() (compas_timber.model.timbermodel method)": [[251, "compas_timber.model.TimberModel.remove_element"]], "remove_interaction() (compas_timber.model.timbermodel method)": [[252, "compas_timber.model.TimberModel.remove_interaction"]], "remove_joint() (compas_timber.model.timbermodel method)": [[253, "compas_timber.model.TimberModel.remove_joint"]], "rotate() (compas_timber.model.timbermodel method)": [[254, "compas_timber.model.TimberModel.rotate"]], "rotated() (compas_timber.model.timbermodel method)": [[255, "compas_timber.model.TimberModel.rotated"]], "scale() (compas_timber.model.timbermodel method)": [[256, "compas_timber.model.TimberModel.scale"]], "scaled() (compas_timber.model.timbermodel method)": [[257, "compas_timber.model.TimberModel.scaled"]], "set_topologies() (compas_timber.model.timbermodel method)": [[258, "compas_timber.model.TimberModel.set_topologies"]], "sha256() (compas_timber.model.timbermodel method)": [[259, "compas_timber.model.TimberModel.sha256"]], "to_json() (compas_timber.model.timbermodel method)": [[260, "compas_timber.model.TimberModel.to_json"]], "to_jsonstring() (compas_timber.model.timbermodel method)": [[261, "compas_timber.model.TimberModel.to_jsonstring"]], "transform() (compas_timber.model.timbermodel method)": [[262, "compas_timber.model.TimberModel.transform"]], "transform_numpy() (compas_timber.model.timbermodel method)": [[263, "compas_timber.model.TimberModel.transform_numpy"]], "transformed() (compas_timber.model.timbermodel method)": [[264, "compas_timber.model.TimberModel.transformed"]], "transformed_numpy() (compas_timber.model.timbermodel method)": [[265, "compas_timber.model.TimberModel.transformed_numpy"]], "translate() (compas_timber.model.timbermodel method)": [[266, "compas_timber.model.TimberModel.translate"]], "translated() (compas_timber.model.timbermodel method)": [[267, "compas_timber.model.TimberModel.translated"]], "validate_data() (compas_timber.model.timbermodel class method)": [[268, "compas_timber.model.TimberModel.validate_data"]], "actor (class in compas_timber.planning)": [[269, "compas_timber.planning.Actor"]], "get_name() (compas_timber.planning.actor class method)": [[270, "compas_timber.planning.Actor.get_name"]], "buildingplan (class in compas_timber.planning)": [[271, "compas_timber.planning.BuildingPlan"]], "tostring() (compas_timber.planning.buildingplan method)": [[272, "compas_timber.planning.BuildingPlan.ToString"]], "add_step() (compas_timber.planning.buildingplan method)": [[273, "compas_timber.planning.BuildingPlan.add_step"]], "copy() (compas_timber.planning.buildingplan method)": [[274, "compas_timber.planning.BuildingPlan.copy"]], "from_json() (compas_timber.planning.buildingplan class method)": [[275, "compas_timber.planning.BuildingPlan.from_json"]], "from_jsonstring() (compas_timber.planning.buildingplan class method)": [[276, "compas_timber.planning.BuildingPlan.from_jsonstring"]], "sha256() (compas_timber.planning.buildingplan method)": [[277, "compas_timber.planning.BuildingPlan.sha256"]], "to_json() (compas_timber.planning.buildingplan method)": [[278, "compas_timber.planning.BuildingPlan.to_json"]], "to_jsonstring() (compas_timber.planning.buildingplan method)": [[279, "compas_timber.planning.BuildingPlan.to_jsonstring"]], "validate_data() (compas_timber.planning.buildingplan class method)": [[280, "compas_timber.planning.BuildingPlan.validate_data"]], "simplesequencegenerator (class in compas_timber.planning)": [[281, "compas_timber.planning.SimpleSequenceGenerator"]], "step (class in compas_timber.planning)": [[282, "compas_timber.planning.Step"]], "tostring() (compas_timber.planning.step method)": [[283, "compas_timber.planning.Step.ToString"]], "copy() (compas_timber.planning.step method)": [[284, "compas_timber.planning.Step.copy"]], "from_json() (compas_timber.planning.step class method)": [[285, "compas_timber.planning.Step.from_json"]], "from_jsonstring() (compas_timber.planning.step class method)": [[286, "compas_timber.planning.Step.from_jsonstring"]], "sha256() (compas_timber.planning.step method)": [[287, "compas_timber.planning.Step.sha256"]], "to_json() (compas_timber.planning.step method)": [[288, "compas_timber.planning.Step.to_json"]], "to_jsonstring() (compas_timber.planning.step method)": [[289, "compas_timber.planning.Step.to_jsonstring"]], "transform() (compas_timber.planning.step method)": [[290, "compas_timber.planning.Step.transform"]], "validate_data() (compas_timber.planning.step class method)": [[291, "compas_timber.planning.Step.validate_data"]], "find_neighboring_beams() (in module compas_timber.rhino)": [[292, "compas_timber.rhino.find_neighboring_beams"]]}})