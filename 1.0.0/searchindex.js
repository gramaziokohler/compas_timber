Search.setIndex({"docnames": ["api", "api/compas_timber.connections", "api/compas_timber.design", "api/compas_timber.elements", "api/compas_timber.errors", "api/compas_timber.fabrication", "api/compas_timber.ghpython", "api/compas_timber.model", "api/compas_timber.planning", "api/compas_timber.rhino", "api/generated/compas_timber.connections.BallNodeJoint", "api/generated/compas_timber.connections.BallNodeJoint.ToString", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions", "api/generated/compas_timber.connections.BallNodeJoint.add_features", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility", "api/generated/compas_timber.connections.BallNodeJoint.copy", "api/generated/compas_timber.connections.BallNodeJoint.create", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies", "api/generated/compas_timber.connections.BallNodeJoint.from_json", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.promote_cluster", "api/generated/compas_timber.connections.BallNodeJoint.promote_joint_candidate", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.BallNodeJoint.sha256", "api/generated/compas_timber.connections.BallNodeJoint.to_json", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring", "api/generated/compas_timber.connections.BallNodeJoint.validate_data", "api/generated/compas_timber.connections.BeamGroupAnalyzer", "api/generated/compas_timber.connections.BeamGroupAnalyzer.find", "api/generated/compas_timber.connections.ButtJoint", "api/generated/compas_timber.connections.ButtJoint.ToString", "api/generated/compas_timber.connections.ButtJoint.add_extensions", "api/generated/compas_timber.connections.ButtJoint.add_features", "api/generated/compas_timber.connections.ButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.ButtJoint.copy", "api/generated/compas_timber.connections.ButtJoint.create", "api/generated/compas_timber.connections.ButtJoint.element_count_complies", "api/generated/compas_timber.connections.ButtJoint.from_json", "api/generated/compas_timber.connections.ButtJoint.from_jsonstring", "api/generated/compas_timber.connections.ButtJoint.promote_cluster", "api/generated/compas_timber.connections.ButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.ButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.ButtJoint.sha256", "api/generated/compas_timber.connections.ButtJoint.to_json", "api/generated/compas_timber.connections.ButtJoint.to_jsonstring", "api/generated/compas_timber.connections.ButtJoint.validate_data", "api/generated/compas_timber.connections.Cluster", "api/generated/compas_timber.connections.CompositeAnalyzer", "api/generated/compas_timber.connections.CompositeAnalyzer.find", "api/generated/compas_timber.connections.CompositeAnalyzer.from_model", "api/generated/compas_timber.connections.ConnectionSolver", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs", "api/generated/compas_timber.connections.ConnectionSolver.find_topology", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology", "api/generated/compas_timber.connections.InterfaceLocation", "api/generated/compas_timber.connections.InterfaceRole", "api/generated/compas_timber.connections.Joint", "api/generated/compas_timber.connections.Joint.ToString", "api/generated/compas_timber.connections.Joint.add_extensions", "api/generated/compas_timber.connections.Joint.add_features", "api/generated/compas_timber.connections.Joint.check_elements_compatibility", "api/generated/compas_timber.connections.Joint.copy", "api/generated/compas_timber.connections.Joint.create", "api/generated/compas_timber.connections.Joint.element_count_complies", "api/generated/compas_timber.connections.Joint.from_json", "api/generated/compas_timber.connections.Joint.from_jsonstring", "api/generated/compas_timber.connections.Joint.promote_cluster", "api/generated/compas_timber.connections.Joint.promote_joint_candidate", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys", "api/generated/compas_timber.connections.Joint.sha256", "api/generated/compas_timber.connections.Joint.to_json", "api/generated/compas_timber.connections.Joint.to_jsonstring", "api/generated/compas_timber.connections.Joint.validate_data", "api/generated/compas_timber.connections.JointCandidate", "api/generated/compas_timber.connections.JointCandidate.ToString", "api/generated/compas_timber.connections.JointCandidate.add_extensions", "api/generated/compas_timber.connections.JointCandidate.add_features", "api/generated/compas_timber.connections.JointCandidate.check_elements_compatibility", "api/generated/compas_timber.connections.JointCandidate.copy", "api/generated/compas_timber.connections.JointCandidate.create", "api/generated/compas_timber.connections.JointCandidate.element_count_complies", "api/generated/compas_timber.connections.JointCandidate.from_json", "api/generated/compas_timber.connections.JointCandidate.from_jsonstring", "api/generated/compas_timber.connections.JointCandidate.promote_cluster", "api/generated/compas_timber.connections.JointCandidate.promote_joint_candidate", "api/generated/compas_timber.connections.JointCandidate.restore_beams_from_keys", "api/generated/compas_timber.connections.JointCandidate.sha256", "api/generated/compas_timber.connections.JointCandidate.to_json", "api/generated/compas_timber.connections.JointCandidate.to_jsonstring", "api/generated/compas_timber.connections.JointCandidate.validate_data", "api/generated/compas_timber.connections.JointTopology", "api/generated/compas_timber.connections.JointTopology.get_name", "api/generated/compas_timber.connections.LButtJoint", "api/generated/compas_timber.connections.LButtJoint.ToString", "api/generated/compas_timber.connections.LButtJoint.add_extensions", "api/generated/compas_timber.connections.LButtJoint.add_features", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LButtJoint.copy", "api/generated/compas_timber.connections.LButtJoint.create", "api/generated/compas_timber.connections.LButtJoint.element_count_complies", "api/generated/compas_timber.connections.LButtJoint.from_json", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring", "api/generated/compas_timber.connections.LButtJoint.promote_cluster", "api/generated/compas_timber.connections.LButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LButtJoint.sha256", "api/generated/compas_timber.connections.LButtJoint.to_json", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles", "api/generated/compas_timber.connections.LButtJoint.validate_data", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.promote_cluster", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data", "api/generated/compas_timber.connections.LLapJoint", "api/generated/compas_timber.connections.LLapJoint.ToString", "api/generated/compas_timber.connections.LLapJoint.add_extensions", "api/generated/compas_timber.connections.LLapJoint.add_features", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LLapJoint.copy", "api/generated/compas_timber.connections.LLapJoint.create", "api/generated/compas_timber.connections.LLapJoint.element_count_complies", "api/generated/compas_timber.connections.LLapJoint.from_json", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring", "api/generated/compas_timber.connections.LLapJoint.promote_cluster", "api/generated/compas_timber.connections.LLapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LLapJoint.sha256", "api/generated/compas_timber.connections.LLapJoint.to_json", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring", "api/generated/compas_timber.connections.LLapJoint.validate_data", "api/generated/compas_timber.connections.LMiterJoint", "api/generated/compas_timber.connections.LMiterJoint.ToString", "api/generated/compas_timber.connections.LMiterJoint.add_extensions", "api/generated/compas_timber.connections.LMiterJoint.add_features", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LMiterJoint.copy", "api/generated/compas_timber.connections.LMiterJoint.create", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies", "api/generated/compas_timber.connections.LMiterJoint.from_json", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes", "api/generated/compas_timber.connections.LMiterJoint.promote_cluster", "api/generated/compas_timber.connections.LMiterJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LMiterJoint.sha256", "api/generated/compas_timber.connections.LMiterJoint.to_json", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring", "api/generated/compas_timber.connections.LMiterJoint.validate_data", "api/generated/compas_timber.connections.LapJoint", "api/generated/compas_timber.connections.LapJoint.ToString", "api/generated/compas_timber.connections.LapJoint.add_extensions", "api/generated/compas_timber.connections.LapJoint.add_features", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.LapJoint.copy", "api/generated/compas_timber.connections.LapJoint.create", "api/generated/compas_timber.connections.LapJoint.element_count_complies", "api/generated/compas_timber.connections.LapJoint.from_json", "api/generated/compas_timber.connections.LapJoint.from_jsonstring", "api/generated/compas_timber.connections.LapJoint.promote_cluster", "api/generated/compas_timber.connections.LapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.LapJoint.sha256", "api/generated/compas_timber.connections.LapJoint.to_json", "api/generated/compas_timber.connections.LapJoint.to_jsonstring", "api/generated/compas_timber.connections.LapJoint.validate_data", "api/generated/compas_timber.connections.MaxNCompositeAnalyzer", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.find", "api/generated/compas_timber.connections.PlateButtJoint", "api/generated/compas_timber.connections.PlateButtJoint.ToString", "api/generated/compas_timber.connections.PlateButtJoint.add_extensions", "api/generated/compas_timber.connections.PlateButtJoint.add_features", "api/generated/compas_timber.connections.PlateButtJoint.calculate_topology", "api/generated/compas_timber.connections.PlateButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.PlateButtJoint.copy", "api/generated/compas_timber.connections.PlateButtJoint.create", "api/generated/compas_timber.connections.PlateButtJoint.element_count_complies", "api/generated/compas_timber.connections.PlateButtJoint.flip_roles", "api/generated/compas_timber.connections.PlateButtJoint.from_json", "api/generated/compas_timber.connections.PlateButtJoint.from_jsonstring", "api/generated/compas_timber.connections.PlateButtJoint.get_interface_for_plate", "api/generated/compas_timber.connections.PlateButtJoint.promote_cluster", "api/generated/compas_timber.connections.PlateButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.PlateButtJoint.reorder_planes_and_outlines", "api/generated/compas_timber.connections.PlateButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.PlateButtJoint.restore_plates_from_keys", "api/generated/compas_timber.connections.PlateButtJoint.sha256", "api/generated/compas_timber.connections.PlateButtJoint.to_json", "api/generated/compas_timber.connections.PlateButtJoint.to_jsonstring", "api/generated/compas_timber.connections.PlateButtJoint.validate_data", "api/generated/compas_timber.connections.PlateConnectionSolver", "api/generated/compas_timber.connections.PlateConnectionSolver.do_segments_overlap", "api/generated/compas_timber.connections.PlateConnectionSolver.does_segment_intersect_outline", "api/generated/compas_timber.connections.PlateConnectionSolver.find_intersecting_pairs", "api/generated/compas_timber.connections.PlateConnectionSolver.find_topology", "api/generated/compas_timber.connections.PlateConnectionSolver.find_wall_wall_topology", "api/generated/compas_timber.connections.PlateJoint", "api/generated/compas_timber.connections.PlateJoint.ToString", "api/generated/compas_timber.connections.PlateJoint.add_extensions", "api/generated/compas_timber.connections.PlateJoint.add_features", "api/generated/compas_timber.connections.PlateJoint.calculate_topology", "api/generated/compas_timber.connections.PlateJoint.check_elements_compatibility", "api/generated/compas_timber.connections.PlateJoint.copy", "api/generated/compas_timber.connections.PlateJoint.create", "api/generated/compas_timber.connections.PlateJoint.element_count_complies", "api/generated/compas_timber.connections.PlateJoint.flip_roles", "api/generated/compas_timber.connections.PlateJoint.from_json", "api/generated/compas_timber.connections.PlateJoint.from_jsonstring", "api/generated/compas_timber.connections.PlateJoint.get_interface_for_plate", "api/generated/compas_timber.connections.PlateJoint.promote_cluster", "api/generated/compas_timber.connections.PlateJoint.promote_joint_candidate", "api/generated/compas_timber.connections.PlateJoint.reorder_planes_and_outlines", "api/generated/compas_timber.connections.PlateJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.PlateJoint.restore_plates_from_keys", "api/generated/compas_timber.connections.PlateJoint.sha256", "api/generated/compas_timber.connections.PlateJoint.to_json", "api/generated/compas_timber.connections.PlateJoint.to_jsonstring", "api/generated/compas_timber.connections.PlateJoint.validate_data", "api/generated/compas_timber.connections.PlateLButtJoint", "api/generated/compas_timber.connections.PlateLButtJoint.ToString", "api/generated/compas_timber.connections.PlateLButtJoint.add_extensions", "api/generated/compas_timber.connections.PlateLButtJoint.add_features", "api/generated/compas_timber.connections.PlateLButtJoint.calculate_topology", "api/generated/compas_timber.connections.PlateLButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.PlateLButtJoint.copy", "api/generated/compas_timber.connections.PlateLButtJoint.create", "api/generated/compas_timber.connections.PlateLButtJoint.element_count_complies", "api/generated/compas_timber.connections.PlateLButtJoint.flip_roles", "api/generated/compas_timber.connections.PlateLButtJoint.from_json", "api/generated/compas_timber.connections.PlateLButtJoint.from_jsonstring", "api/generated/compas_timber.connections.PlateLButtJoint.get_interface_for_plate", "api/generated/compas_timber.connections.PlateLButtJoint.promote_cluster", "api/generated/compas_timber.connections.PlateLButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.PlateLButtJoint.reorder_planes_and_outlines", "api/generated/compas_timber.connections.PlateLButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.PlateLButtJoint.restore_plates_from_keys", "api/generated/compas_timber.connections.PlateLButtJoint.sha256", "api/generated/compas_timber.connections.PlateLButtJoint.to_json", "api/generated/compas_timber.connections.PlateLButtJoint.to_jsonstring", "api/generated/compas_timber.connections.PlateLButtJoint.validate_data", "api/generated/compas_timber.connections.PlateMiterJoint", "api/generated/compas_timber.connections.PlateMiterJoint.ToString", "api/generated/compas_timber.connections.PlateMiterJoint.add_extensions", "api/generated/compas_timber.connections.PlateMiterJoint.add_features", "api/generated/compas_timber.connections.PlateMiterJoint.calculate_topology", "api/generated/compas_timber.connections.PlateMiterJoint.check_elements_compatibility", "api/generated/compas_timber.connections.PlateMiterJoint.copy", "api/generated/compas_timber.connections.PlateMiterJoint.create", "api/generated/compas_timber.connections.PlateMiterJoint.element_count_complies", "api/generated/compas_timber.connections.PlateMiterJoint.flip_roles", "api/generated/compas_timber.connections.PlateMiterJoint.from_json", "api/generated/compas_timber.connections.PlateMiterJoint.from_jsonstring", "api/generated/compas_timber.connections.PlateMiterJoint.get_interface_for_plate", "api/generated/compas_timber.connections.PlateMiterJoint.promote_cluster", "api/generated/compas_timber.connections.PlateMiterJoint.promote_joint_candidate", "api/generated/compas_timber.connections.PlateMiterJoint.reorder_planes_and_outlines", "api/generated/compas_timber.connections.PlateMiterJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.PlateMiterJoint.restore_plates_from_keys", "api/generated/compas_timber.connections.PlateMiterJoint.sha256", "api/generated/compas_timber.connections.PlateMiterJoint.to_json", "api/generated/compas_timber.connections.PlateMiterJoint.to_jsonstring", "api/generated/compas_timber.connections.PlateMiterJoint.validate_data", "api/generated/compas_timber.connections.PlateTButtJoint", "api/generated/compas_timber.connections.PlateTButtJoint.ToString", "api/generated/compas_timber.connections.PlateTButtJoint.add_extensions", "api/generated/compas_timber.connections.PlateTButtJoint.add_features", "api/generated/compas_timber.connections.PlateTButtJoint.calculate_topology", "api/generated/compas_timber.connections.PlateTButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.PlateTButtJoint.copy", "api/generated/compas_timber.connections.PlateTButtJoint.create", "api/generated/compas_timber.connections.PlateTButtJoint.element_count_complies", "api/generated/compas_timber.connections.PlateTButtJoint.flip_roles", "api/generated/compas_timber.connections.PlateTButtJoint.from_json", "api/generated/compas_timber.connections.PlateTButtJoint.from_jsonstring", "api/generated/compas_timber.connections.PlateTButtJoint.get_interface_for_plate", "api/generated/compas_timber.connections.PlateTButtJoint.promote_cluster", "api/generated/compas_timber.connections.PlateTButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.PlateTButtJoint.reorder_planes_and_outlines", "api/generated/compas_timber.connections.PlateTButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.PlateTButtJoint.restore_plates_from_keys", "api/generated/compas_timber.connections.PlateTButtJoint.sha256", "api/generated/compas_timber.connections.PlateTButtJoint.to_json", "api/generated/compas_timber.connections.PlateTButtJoint.to_jsonstring", "api/generated/compas_timber.connections.PlateTButtJoint.validate_data", "api/generated/compas_timber.connections.PlateToPlateInterface", "api/generated/compas_timber.connections.PlateToPlateInterface.as_plane", "api/generated/compas_timber.connections.QuadAnalyzer", "api/generated/compas_timber.connections.TBirdsmouthJoint", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy", "api/generated/compas_timber.connections.TBirdsmouthJoint.create", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.promote_cluster", "api/generated/compas_timber.connections.TBirdsmouthJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data", "api/generated/compas_timber.connections.TButtJoint", "api/generated/compas_timber.connections.TButtJoint.ToString", "api/generated/compas_timber.connections.TButtJoint.add_extensions", "api/generated/compas_timber.connections.TButtJoint.add_features", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TButtJoint.copy", "api/generated/compas_timber.connections.TButtJoint.create", "api/generated/compas_timber.connections.TButtJoint.element_count_complies", "api/generated/compas_timber.connections.TButtJoint.from_json", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring", "api/generated/compas_timber.connections.TButtJoint.promote_cluster", "api/generated/compas_timber.connections.TButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TButtJoint.sha256", "api/generated/compas_timber.connections.TButtJoint.to_json", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring", "api/generated/compas_timber.connections.TButtJoint.validate_data", "api/generated/compas_timber.connections.TDovetailJoint", "api/generated/compas_timber.connections.TDovetailJoint.ToString", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions", "api/generated/compas_timber.connections.TDovetailJoint.add_features", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TDovetailJoint.copy", "api/generated/compas_timber.connections.TDovetailJoint.create", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies", "api/generated/compas_timber.connections.TDovetailJoint.from_json", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.promote_cluster", "api/generated/compas_timber.connections.TDovetailJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TDovetailJoint.sha256", "api/generated/compas_timber.connections.TDovetailJoint.to_json", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring", "api/generated/compas_timber.connections.TDovetailJoint.validate_data", "api/generated/compas_timber.connections.TLapJoint", "api/generated/compas_timber.connections.TLapJoint.ToString", "api/generated/compas_timber.connections.TLapJoint.add_extensions", "api/generated/compas_timber.connections.TLapJoint.add_features", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TLapJoint.copy", "api/generated/compas_timber.connections.TLapJoint.create", "api/generated/compas_timber.connections.TLapJoint.element_count_complies", "api/generated/compas_timber.connections.TLapJoint.from_json", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring", "api/generated/compas_timber.connections.TLapJoint.promote_cluster", "api/generated/compas_timber.connections.TLapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TLapJoint.sha256", "api/generated/compas_timber.connections.TLapJoint.to_json", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring", "api/generated/compas_timber.connections.TLapJoint.validate_data", "api/generated/compas_timber.connections.TOliGinaJoint", "api/generated/compas_timber.connections.TOliGinaJoint.ToString", "api/generated/compas_timber.connections.TOliGinaJoint.add_extensions", "api/generated/compas_timber.connections.TOliGinaJoint.add_features", "api/generated/compas_timber.connections.TOliGinaJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TOliGinaJoint.copy", "api/generated/compas_timber.connections.TOliGinaJoint.create", "api/generated/compas_timber.connections.TOliGinaJoint.element_count_complies", "api/generated/compas_timber.connections.TOliGinaJoint.from_json", "api/generated/compas_timber.connections.TOliGinaJoint.from_jsonstring", "api/generated/compas_timber.connections.TOliGinaJoint.promote_cluster", "api/generated/compas_timber.connections.TOliGinaJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TOliGinaJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TOliGinaJoint.sha256", "api/generated/compas_timber.connections.TOliGinaJoint.to_json", "api/generated/compas_timber.connections.TOliGinaJoint.to_jsonstring", "api/generated/compas_timber.connections.TOliGinaJoint.validate_data", "api/generated/compas_timber.connections.TStepJoint", "api/generated/compas_timber.connections.TStepJoint.ToString", "api/generated/compas_timber.connections.TStepJoint.add_extensions", "api/generated/compas_timber.connections.TStepJoint.add_features", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TStepJoint.copy", "api/generated/compas_timber.connections.TStepJoint.create", "api/generated/compas_timber.connections.TStepJoint.element_count_complies", "api/generated/compas_timber.connections.TStepJoint.from_json", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring", "api/generated/compas_timber.connections.TStepJoint.promote_cluster", "api/generated/compas_timber.connections.TStepJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TStepJoint.set_step_depths", "api/generated/compas_timber.connections.TStepJoint.sha256", "api/generated/compas_timber.connections.TStepJoint.to_json", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring", "api/generated/compas_timber.connections.TStepJoint.validate_data", "api/generated/compas_timber.connections.TenonMortiseJoint", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility", "api/generated/compas_timber.connections.TenonMortiseJoint.copy", "api/generated/compas_timber.connections.TenonMortiseJoint.create", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.promote_cluster", "api/generated/compas_timber.connections.TenonMortiseJoint.promote_joint_candidate", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data", "api/generated/compas_timber.connections.TripletAnalyzer", "api/generated/compas_timber.connections.WallJoint", "api/generated/compas_timber.connections.WallJoint.ToString", "api/generated/compas_timber.connections.WallJoint.add_extensions", "api/generated/compas_timber.connections.WallJoint.add_features", "api/generated/compas_timber.connections.WallJoint.check_elements_compatibility", "api/generated/compas_timber.connections.WallJoint.copy", "api/generated/compas_timber.connections.WallJoint.create", "api/generated/compas_timber.connections.WallJoint.element_count_complies", "api/generated/compas_timber.connections.WallJoint.flip_roles", "api/generated/compas_timber.connections.WallJoint.from_json", "api/generated/compas_timber.connections.WallJoint.from_jsonstring", "api/generated/compas_timber.connections.WallJoint.get_interface_for_wall", "api/generated/compas_timber.connections.WallJoint.promote_cluster", "api/generated/compas_timber.connections.WallJoint.promote_joint_candidate", "api/generated/compas_timber.connections.WallJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.WallJoint.restore_walls_from_keys", "api/generated/compas_timber.connections.WallJoint.sha256", "api/generated/compas_timber.connections.WallJoint.to_json", "api/generated/compas_timber.connections.WallJoint.to_jsonstring", "api/generated/compas_timber.connections.WallJoint.validate_data", "api/generated/compas_timber.connections.XLapJoint", "api/generated/compas_timber.connections.XLapJoint.ToString", "api/generated/compas_timber.connections.XLapJoint.add_extensions", "api/generated/compas_timber.connections.XLapJoint.add_features", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XLapJoint.copy", "api/generated/compas_timber.connections.XLapJoint.create", "api/generated/compas_timber.connections.XLapJoint.element_count_complies", "api/generated/compas_timber.connections.XLapJoint.from_json", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring", "api/generated/compas_timber.connections.XLapJoint.promote_cluster", "api/generated/compas_timber.connections.XLapJoint.promote_joint_candidate", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XLapJoint.sha256", "api/generated/compas_timber.connections.XLapJoint.to_json", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring", "api/generated/compas_timber.connections.XLapJoint.validate_data", "api/generated/compas_timber.connections.XNotchJoint", "api/generated/compas_timber.connections.XNotchJoint.ToString", "api/generated/compas_timber.connections.XNotchJoint.add_extensions", "api/generated/compas_timber.connections.XNotchJoint.add_features", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility", "api/generated/compas_timber.connections.XNotchJoint.copy", "api/generated/compas_timber.connections.XNotchJoint.create", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies", "api/generated/compas_timber.connections.XNotchJoint.from_json", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.promote_cluster", "api/generated/compas_timber.connections.XNotchJoint.promote_joint_candidate", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.XNotchJoint.sha256", "api/generated/compas_timber.connections.XNotchJoint.to_json", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring", "api/generated/compas_timber.connections.XNotchJoint.validate_data", "api/generated/compas_timber.connections.YButtJoint", "api/generated/compas_timber.connections.YButtJoint.ToString", "api/generated/compas_timber.connections.YButtJoint.add_extensions", "api/generated/compas_timber.connections.YButtJoint.add_features", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility", "api/generated/compas_timber.connections.YButtJoint.copy", "api/generated/compas_timber.connections.YButtJoint.create", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.element_count_complies", "api/generated/compas_timber.connections.YButtJoint.from_json", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index", "api/generated/compas_timber.connections.YButtJoint.promote_cluster", "api/generated/compas_timber.connections.YButtJoint.promote_joint_candidate", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys", "api/generated/compas_timber.connections.YButtJoint.sha256", "api/generated/compas_timber.connections.YButtJoint.to_json", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring", "api/generated/compas_timber.connections.YButtJoint.validate_data", "api/generated/compas_timber.connections.beam_ref_side_incidence", "api/generated/compas_timber.connections.beam_ref_side_incidence_with_vector", "api/generated/compas_timber.connections.find_neighboring_elements", "api/generated/compas_timber.connections.point_centerline_towards_joint", "api/generated/compas_timber.design.CategoryRule", "api/generated/compas_timber.design.CategoryRule.ToString", "api/generated/compas_timber.design.CategoryRule.comply", "api/generated/compas_timber.design.CategoryRule.get_category_rules", "api/generated/compas_timber.design.CategoryRule.get_direct_rules", "api/generated/compas_timber.design.CategoryRule.get_topology_rules", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.CategoryRule.reorder", "api/generated/compas_timber.design.DebugInfomation", "api/generated/compas_timber.design.DebugInfomation.ToString", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error", "api/generated/compas_timber.design.DebugInfomation.add_feature_error", "api/generated/compas_timber.design.DebugInfomation.add_joint_error", "api/generated/compas_timber.design.DirectRule", "api/generated/compas_timber.design.DirectRule.ToString", "api/generated/compas_timber.design.DirectRule.comply", "api/generated/compas_timber.design.DirectRule.contains", "api/generated/compas_timber.design.DirectRule.get_category_rules", "api/generated/compas_timber.design.DirectRule.get_direct_rules", "api/generated/compas_timber.design.DirectRule.get_topology_rules", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.FeatureDefinition", "api/generated/compas_timber.design.FeatureDefinition.ToString", "api/generated/compas_timber.design.JointDefinition", "api/generated/compas_timber.design.JointDefinition.ToString", "api/generated/compas_timber.design.JointDefinition.is_identical", "api/generated/compas_timber.design.JointDefinition.match", "api/generated/compas_timber.design.JointRule", "api/generated/compas_timber.design.JointRule.comply", "api/generated/compas_timber.design.JointRule.get_category_rules", "api/generated/compas_timber.design.JointRule.get_direct_rules", "api/generated/compas_timber.design.JointRule.get_topology_rules", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.SurfaceModel", "api/generated/compas_timber.design.SurfaceModel.beam_category_names", "api/generated/compas_timber.design.SurfaceModel.create_model", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements", "api/generated/compas_timber.design.SurfaceModel.generate_frame", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams", "api/generated/compas_timber.design.SurfaceModel.generate_plates", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines", "api/generated/compas_timber.design.SurfaceModel.generate_studs", "api/generated/compas_timber.design.SurfaceModel.generate_windows", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices", "api/generated/compas_timber.design.SurfaceModel.offset_elements", "api/generated/compas_timber.design.SurfaceModel.parse_loops", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs", "api/generated/compas_timber.design.SurfaceModel.trim_studs", "api/generated/compas_timber.design.TopologyRule", "api/generated/compas_timber.design.TopologyRule.ToString", "api/generated/compas_timber.design.TopologyRule.comply", "api/generated/compas_timber.design.TopologyRule.get_category_rules", "api/generated/compas_timber.design.TopologyRule.get_direct_rules", "api/generated/compas_timber.design.TopologyRule.get_topology_rules", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules", "api/generated/compas_timber.design.guess_joint_topology_2beams", "api/generated/compas_timber.design.set_default_joints", "api/generated/compas_timber.elements.BallNodeFastener", "api/generated/compas_timber.elements.BallNodeFastener.ToString", "api/generated/compas_timber.elements.BallNodeFastener.add_feature", "api/generated/compas_timber.elements.BallNodeFastener.add_features", "api/generated/compas_timber.elements.BallNodeFastener.compute_aabb", "api/generated/compas_timber.elements.BallNodeFastener.compute_collision_mesh", "api/generated/compas_timber.elements.BallNodeFastener.compute_geometry", "api/generated/compas_timber.elements.BallNodeFastener.compute_obb", "api/generated/compas_timber.elements.BallNodeFastener.compute_worldtransformation", "api/generated/compas_timber.elements.BallNodeFastener.copy", "api/generated/compas_timber.elements.BallNodeFastener.from_json", "api/generated/compas_timber.elements.BallNodeFastener.from_jsonstring", "api/generated/compas_timber.elements.BallNodeFastener.remove_blank_extension", "api/generated/compas_timber.elements.BallNodeFastener.remove_features", "api/generated/compas_timber.elements.BallNodeFastener.reset", "api/generated/compas_timber.elements.BallNodeFastener.sha256", "api/generated/compas_timber.elements.BallNodeFastener.to_json", "api/generated/compas_timber.elements.BallNodeFastener.to_jsonstring", "api/generated/compas_timber.elements.BallNodeFastener.transform", "api/generated/compas_timber.elements.BallNodeFastener.transformed", "api/generated/compas_timber.elements.BallNodeFastener.update_interface", "api/generated/compas_timber.elements.BallNodeFastener.validate_data", "api/generated/compas_timber.elements.Beam", "api/generated/compas_timber.elements.Beam.ToString", "api/generated/compas_timber.elements.Beam.add_blank_extension", "api/generated/compas_timber.elements.Beam.add_feature", "api/generated/compas_timber.elements.Beam.add_features", "api/generated/compas_timber.elements.Beam.back_side", "api/generated/compas_timber.elements.Beam.compute_aabb", "api/generated/compas_timber.elements.Beam.compute_collision_mesh", "api/generated/compas_timber.elements.Beam.compute_geometry", "api/generated/compas_timber.elements.Beam.compute_obb", "api/generated/compas_timber.elements.Beam.compute_worldtransformation", "api/generated/compas_timber.elements.Beam.copy", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point", "api/generated/compas_timber.elements.Beam.extension_to_plane", "api/generated/compas_timber.elements.Beam.from_centerline", "api/generated/compas_timber.elements.Beam.from_endpoints", "api/generated/compas_timber.elements.Beam.from_json", "api/generated/compas_timber.elements.Beam.from_jsonstring", "api/generated/compas_timber.elements.Beam.front_side", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side", "api/generated/compas_timber.elements.Beam.opp_side", "api/generated/compas_timber.elements.Beam.remove_blank_extension", "api/generated/compas_timber.elements.Beam.remove_features", "api/generated/compas_timber.elements.Beam.reset", "api/generated/compas_timber.elements.Beam.sha256", "api/generated/compas_timber.elements.Beam.side_as_surface", "api/generated/compas_timber.elements.Beam.to_json", "api/generated/compas_timber.elements.Beam.to_jsonstring", "api/generated/compas_timber.elements.Beam.transform", "api/generated/compas_timber.elements.Beam.transformed", "api/generated/compas_timber.elements.Beam.validate_data", "api/generated/compas_timber.elements.Fastener", "api/generated/compas_timber.elements.Fastener.ToString", "api/generated/compas_timber.elements.Fastener.add_feature", "api/generated/compas_timber.elements.Fastener.add_features", "api/generated/compas_timber.elements.Fastener.compute_aabb", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh", "api/generated/compas_timber.elements.Fastener.compute_geometry", "api/generated/compas_timber.elements.Fastener.compute_obb", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation", "api/generated/compas_timber.elements.Fastener.copy", "api/generated/compas_timber.elements.Fastener.from_json", "api/generated/compas_timber.elements.Fastener.from_jsonstring", "api/generated/compas_timber.elements.Fastener.remove_blank_extension", "api/generated/compas_timber.elements.Fastener.remove_features", "api/generated/compas_timber.elements.Fastener.reset", "api/generated/compas_timber.elements.Fastener.sha256", "api/generated/compas_timber.elements.Fastener.to_json", "api/generated/compas_timber.elements.Fastener.to_jsonstring", "api/generated/compas_timber.elements.Fastener.transform", "api/generated/compas_timber.elements.Fastener.transformed", "api/generated/compas_timber.elements.Fastener.validate_data", "api/generated/compas_timber.elements.FastenerTimberInterface", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString", "api/generated/compas_timber.elements.FastenerTimberInterface.copy", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data", "api/generated/compas_timber.elements.Opening", "api/generated/compas_timber.elements.Opening.ToString", "api/generated/compas_timber.elements.Opening.copy", "api/generated/compas_timber.elements.Opening.from_json", "api/generated/compas_timber.elements.Opening.from_jsonstring", "api/generated/compas_timber.elements.Opening.orient_polyline", "api/generated/compas_timber.elements.Opening.sha256", "api/generated/compas_timber.elements.Opening.to_json", "api/generated/compas_timber.elements.Opening.to_jsonstring", "api/generated/compas_timber.elements.Opening.validate_data", "api/generated/compas_timber.elements.OpeningType", "api/generated/compas_timber.elements.Plate", "api/generated/compas_timber.elements.Plate.ToString", "api/generated/compas_timber.elements.Plate.add_feature", "api/generated/compas_timber.elements.Plate.add_features", "api/generated/compas_timber.elements.Plate.add_interface", "api/generated/compas_timber.elements.Plate.check_outlines", "api/generated/compas_timber.elements.Plate.compute_aabb", "api/generated/compas_timber.elements.Plate.compute_collision_mesh", "api/generated/compas_timber.elements.Plate.compute_geometry", "api/generated/compas_timber.elements.Plate.compute_obb", "api/generated/compas_timber.elements.Plate.compute_worldtransformation", "api/generated/compas_timber.elements.Plate.copy", "api/generated/compas_timber.elements.Plate.from_brep", "api/generated/compas_timber.elements.Plate.from_json", "api/generated/compas_timber.elements.Plate.from_jsonstring", "api/generated/compas_timber.elements.Plate.from_outline_thickness", "api/generated/compas_timber.elements.Plate.opp_side", "api/generated/compas_timber.elements.Plate.remove_blank_extension", "api/generated/compas_timber.elements.Plate.remove_features", "api/generated/compas_timber.elements.Plate.reset", "api/generated/compas_timber.elements.Plate.sha256", "api/generated/compas_timber.elements.Plate.side_as_surface", "api/generated/compas_timber.elements.Plate.to_json", "api/generated/compas_timber.elements.Plate.to_jsonstring", "api/generated/compas_timber.elements.Plate.transform", "api/generated/compas_timber.elements.Plate.transformed", "api/generated/compas_timber.elements.Plate.validate_data", "api/generated/compas_timber.elements.PlateFastener", "api/generated/compas_timber.elements.PlateFastener.ToString", "api/generated/compas_timber.elements.PlateFastener.add_feature", "api/generated/compas_timber.elements.PlateFastener.add_features", "api/generated/compas_timber.elements.PlateFastener.compute_aabb", "api/generated/compas_timber.elements.PlateFastener.compute_collision_mesh", "api/generated/compas_timber.elements.PlateFastener.compute_geometry", "api/generated/compas_timber.elements.PlateFastener.compute_obb", "api/generated/compas_timber.elements.PlateFastener.compute_worldtransformation", "api/generated/compas_timber.elements.PlateFastener.copy", "api/generated/compas_timber.elements.PlateFastener.from_json", "api/generated/compas_timber.elements.PlateFastener.from_jsonstring", "api/generated/compas_timber.elements.PlateFastener.get_fastener_frames", "api/generated/compas_timber.elements.PlateFastener.place_instances", "api/generated/compas_timber.elements.PlateFastener.remove_blank_extension", "api/generated/compas_timber.elements.PlateFastener.remove_features", "api/generated/compas_timber.elements.PlateFastener.reset", "api/generated/compas_timber.elements.PlateFastener.set_default", "api/generated/compas_timber.elements.PlateFastener.sha256", "api/generated/compas_timber.elements.PlateFastener.to_json", "api/generated/compas_timber.elements.PlateFastener.to_jsonstring", "api/generated/compas_timber.elements.PlateFastener.transform", "api/generated/compas_timber.elements.PlateFastener.transformed", "api/generated/compas_timber.elements.PlateFastener.validate_data", "api/generated/compas_timber.elements.PlateFastener.validate_fastener_beam_compatibility", "api/generated/compas_timber.elements.Slab", "api/generated/compas_timber.elements.Slab.ToString", "api/generated/compas_timber.elements.Slab.add_feature", "api/generated/compas_timber.elements.Slab.add_features", "api/generated/compas_timber.elements.Slab.compute_aabb", "api/generated/compas_timber.elements.Slab.compute_collision_mesh", "api/generated/compas_timber.elements.Slab.compute_geometry", "api/generated/compas_timber.elements.Slab.compute_obb", "api/generated/compas_timber.elements.Slab.compute_worldtransformation", "api/generated/compas_timber.elements.Slab.copy", "api/generated/compas_timber.elements.Slab.from_boundary", "api/generated/compas_timber.elements.Slab.from_brep", "api/generated/compas_timber.elements.Slab.from_json", "api/generated/compas_timber.elements.Slab.from_jsonstring", "api/generated/compas_timber.elements.Slab.remove_blank_extension", "api/generated/compas_timber.elements.Slab.remove_features", "api/generated/compas_timber.elements.Slab.reset", "api/generated/compas_timber.elements.Slab.rotate", "api/generated/compas_timber.elements.Slab.sha256", "api/generated/compas_timber.elements.Slab.to_json", "api/generated/compas_timber.elements.Slab.to_jsonstring", "api/generated/compas_timber.elements.Slab.transform", "api/generated/compas_timber.elements.Slab.transformed", "api/generated/compas_timber.elements.Slab.validate_data", "api/generated/compas_timber.elements.TimberElement", "api/generated/compas_timber.elements.TimberElement.ToString", "api/generated/compas_timber.elements.TimberElement.add_feature", "api/generated/compas_timber.elements.TimberElement.add_features", "api/generated/compas_timber.elements.TimberElement.compute_aabb", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh", "api/generated/compas_timber.elements.TimberElement.compute_geometry", "api/generated/compas_timber.elements.TimberElement.compute_obb", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation", "api/generated/compas_timber.elements.TimberElement.copy", "api/generated/compas_timber.elements.TimberElement.from_json", "api/generated/compas_timber.elements.TimberElement.from_jsonstring", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension", "api/generated/compas_timber.elements.TimberElement.remove_features", "api/generated/compas_timber.elements.TimberElement.reset", "api/generated/compas_timber.elements.TimberElement.sha256", "api/generated/compas_timber.elements.TimberElement.to_json", "api/generated/compas_timber.elements.TimberElement.to_jsonstring", "api/generated/compas_timber.elements.TimberElement.transform", "api/generated/compas_timber.elements.TimberElement.transformed", "api/generated/compas_timber.elements.TimberElement.validate_data", "api/generated/compas_timber.elements.Wall", "api/generated/compas_timber.elements.Wall.ToString", "api/generated/compas_timber.elements.Wall.add_feature", "api/generated/compas_timber.elements.Wall.add_features", "api/generated/compas_timber.elements.Wall.compute_aabb", "api/generated/compas_timber.elements.Wall.compute_collision_mesh", "api/generated/compas_timber.elements.Wall.compute_geometry", "api/generated/compas_timber.elements.Wall.compute_obb", "api/generated/compas_timber.elements.Wall.compute_worldtransformation", "api/generated/compas_timber.elements.Wall.copy", "api/generated/compas_timber.elements.Wall.from_boundary", "api/generated/compas_timber.elements.Wall.from_brep", "api/generated/compas_timber.elements.Wall.from_json", "api/generated/compas_timber.elements.Wall.from_jsonstring", "api/generated/compas_timber.elements.Wall.remove_blank_extension", "api/generated/compas_timber.elements.Wall.remove_features", "api/generated/compas_timber.elements.Wall.reset", "api/generated/compas_timber.elements.Wall.rotate", "api/generated/compas_timber.elements.Wall.sha256", "api/generated/compas_timber.elements.Wall.to_json", "api/generated/compas_timber.elements.Wall.to_jsonstring", "api/generated/compas_timber.elements.Wall.transform", "api/generated/compas_timber.elements.Wall.transformed", "api/generated/compas_timber.elements.Wall.validate_data", "api/generated/compas_timber.errors.BTLxProcessingError", "api/generated/compas_timber.errors.BeamJoiningError", "api/generated/compas_timber.errors.FastenerApplicationError", "api/generated/compas_timber.errors.FeatureApplicationError", "api/generated/compas_timber.fabrication.AlignmentType", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.ToString", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.copy", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.feature_from_element", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.from_json", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.from_jsonstring", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.sha256", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.to_json", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.to_jsonstring", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.transform", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.transformed", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.validate_data", "api/generated/compas_timber.fabrication.BTLxPart", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face", "api/generated/compas_timber.fabrication.BTLxProcessing", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing", "api/generated/compas_timber.fabrication.BTLxProcessing.copy", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data", "api/generated/compas_timber.fabrication.BTLxWriter", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer", "api/generated/compas_timber.fabrication.BTLxWriter.write", "api/generated/compas_timber.fabrication.Contour", "api/generated/compas_timber.fabrication.Contour.ToString", "api/generated/compas_timber.fabrication.Contour.copy", "api/generated/compas_timber.fabrication.Contour.from_json", "api/generated/compas_timber.fabrication.Contour.from_jsonstring", "api/generated/compas_timber.fabrication.Contour.scale", "api/generated/compas_timber.fabrication.Contour.scaled", "api/generated/compas_timber.fabrication.Contour.sha256", "api/generated/compas_timber.fabrication.Contour.to_json", "api/generated/compas_timber.fabrication.Contour.to_jsonstring", "api/generated/compas_timber.fabrication.Contour.validate_data", "api/generated/compas_timber.fabrication.DoubleCut", "api/generated/compas_timber.fabrication.DoubleCut.ToString", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing", "api/generated/compas_timber.fabrication.DoubleCut.apply", "api/generated/compas_timber.fabrication.DoubleCut.copy", "api/generated/compas_timber.fabrication.DoubleCut.from_json", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.DoubleCut.scale", "api/generated/compas_timber.fabrication.DoubleCut.scaled", "api/generated/compas_timber.fabrication.DoubleCut.sha256", "api/generated/compas_timber.fabrication.DoubleCut.to_json", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring", "api/generated/compas_timber.fabrication.DoubleCut.validate_data", "api/generated/compas_timber.fabrication.DovetailMortise", "api/generated/compas_timber.fabrication.DovetailMortise.ToString", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailMortise.apply", "api/generated/compas_timber.fabrication.DovetailMortise.copy", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.DovetailMortise.from_json", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.scale", "api/generated/compas_timber.fabrication.DovetailMortise.scaled", "api/generated/compas_timber.fabrication.DovetailMortise.sha256", "api/generated/compas_timber.fabrication.DovetailMortise.to_json", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data", "api/generated/compas_timber.fabrication.DovetailTenon", "api/generated/compas_timber.fabrication.DovetailTenon.ToString", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing", "api/generated/compas_timber.fabrication.DovetailTenon.apply", "api/generated/compas_timber.fabrication.DovetailTenon.copy", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.from_json", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.DovetailTenon.scale", "api/generated/compas_timber.fabrication.DovetailTenon.scaled", "api/generated/compas_timber.fabrication.DovetailTenon.sha256", "api/generated/compas_timber.fabrication.DovetailTenon.to_json", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data", "api/generated/compas_timber.fabrication.Drilling", "api/generated/compas_timber.fabrication.Drilling.ToString", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing", "api/generated/compas_timber.fabrication.Drilling.apply", "api/generated/compas_timber.fabrication.Drilling.copy", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element", "api/generated/compas_timber.fabrication.Drilling.from_json", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element", "api/generated/compas_timber.fabrication.Drilling.scale", "api/generated/compas_timber.fabrication.Drilling.scaled", "api/generated/compas_timber.fabrication.Drilling.sha256", "api/generated/compas_timber.fabrication.Drilling.to_json", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring", "api/generated/compas_timber.fabrication.Drilling.validate_data", "api/generated/compas_timber.fabrication.DualContour", "api/generated/compas_timber.fabrication.DualContour.ToString", "api/generated/compas_timber.fabrication.DualContour.copy", "api/generated/compas_timber.fabrication.DualContour.from_json", "api/generated/compas_timber.fabrication.DualContour.from_jsonstring", "api/generated/compas_timber.fabrication.DualContour.scale", "api/generated/compas_timber.fabrication.DualContour.scaled", "api/generated/compas_timber.fabrication.DualContour.sha256", "api/generated/compas_timber.fabrication.DualContour.to_json", "api/generated/compas_timber.fabrication.DualContour.to_jsonstring", "api/generated/compas_timber.fabrication.DualContour.validate_data", "api/generated/compas_timber.fabrication.EdgePositionType", "api/generated/compas_timber.fabrication.FreeContour", "api/generated/compas_timber.fabrication.FreeContour.ToString", "api/generated/compas_timber.fabrication.FreeContour.add_subprocessing", "api/generated/compas_timber.fabrication.FreeContour.apply", "api/generated/compas_timber.fabrication.FreeContour.are_all_segments_parallel", "api/generated/compas_timber.fabrication.FreeContour.copy", "api/generated/compas_timber.fabrication.FreeContour.from_json", "api/generated/compas_timber.fabrication.FreeContour.from_jsonstring", "api/generated/compas_timber.fabrication.FreeContour.from_polyline_and_element", "api/generated/compas_timber.fabrication.FreeContour.from_shapes_and_element", "api/generated/compas_timber.fabrication.FreeContour.from_top_bottom_and_elements", "api/generated/compas_timber.fabrication.FreeContour.get_ref_face_index", "api/generated/compas_timber.fabrication.FreeContour.parse_tool_position", "api/generated/compas_timber.fabrication.FreeContour.scale", "api/generated/compas_timber.fabrication.FreeContour.scaled", "api/generated/compas_timber.fabrication.FreeContour.sha256", "api/generated/compas_timber.fabrication.FreeContour.to_json", "api/generated/compas_timber.fabrication.FreeContour.to_jsonstring", "api/generated/compas_timber.fabrication.FreeContour.validate_data", "api/generated/compas_timber.fabrication.FrenchRidgeLap", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data", "api/generated/compas_timber.fabrication.JackRafterCut", "api/generated/compas_timber.fabrication.JackRafterCut.ToString", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing", "api/generated/compas_timber.fabrication.JackRafterCut.apply", "api/generated/compas_timber.fabrication.JackRafterCut.copy", "api/generated/compas_timber.fabrication.JackRafterCut.from_json", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.JackRafterCut.scale", "api/generated/compas_timber.fabrication.JackRafterCut.scaled", "api/generated/compas_timber.fabrication.JackRafterCut.sha256", "api/generated/compas_timber.fabrication.JackRafterCut.to_json", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data", "api/generated/compas_timber.fabrication.JackRafterCutProxy", "api/generated/compas_timber.fabrication.JackRafterCutProxy.apply", "api/generated/compas_timber.fabrication.JackRafterCutProxy.from_plane_and_beam", "api/generated/compas_timber.fabrication.JackRafterCutProxy.unproxified", "api/generated/compas_timber.fabrication.Lap", "api/generated/compas_timber.fabrication.Lap.ToString", "api/generated/compas_timber.fabrication.Lap.add_subprocessing", "api/generated/compas_timber.fabrication.Lap.apply", "api/generated/compas_timber.fabrication.Lap.copy", "api/generated/compas_timber.fabrication.Lap.from_json", "api/generated/compas_timber.fabrication.Lap.from_jsonstring", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam", "api/generated/compas_timber.fabrication.Lap.scale", "api/generated/compas_timber.fabrication.Lap.scaled", "api/generated/compas_timber.fabrication.Lap.sha256", "api/generated/compas_timber.fabrication.Lap.to_json", "api/generated/compas_timber.fabrication.Lap.to_jsonstring", "api/generated/compas_timber.fabrication.Lap.validate_data", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.LapProxy", "api/generated/compas_timber.fabrication.LapProxy.apply", "api/generated/compas_timber.fabrication.LapProxy.from_volume_and_beam", "api/generated/compas_timber.fabrication.LapProxy.unproxified", "api/generated/compas_timber.fabrication.LimitationTopType", "api/generated/compas_timber.fabrication.LongitudinalCut", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing", "api/generated/compas_timber.fabrication.LongitudinalCut.apply", "api/generated/compas_timber.fabrication.LongitudinalCut.copy", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.MachiningLimits", "api/generated/compas_timber.fabrication.Mortise", "api/generated/compas_timber.fabrication.Mortise.ToString", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing", "api/generated/compas_timber.fabrication.Mortise.apply", "api/generated/compas_timber.fabrication.Mortise.copy", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam", "api/generated/compas_timber.fabrication.Mortise.from_json", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring", "api/generated/compas_timber.fabrication.Mortise.scale", "api/generated/compas_timber.fabrication.Mortise.scaled", "api/generated/compas_timber.fabrication.Mortise.sha256", "api/generated/compas_timber.fabrication.Mortise.to_json", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring", "api/generated/compas_timber.fabrication.Mortise.validate_data", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.OrientationType", "api/generated/compas_timber.fabrication.Pocket", "api/generated/compas_timber.fabrication.Pocket.ToString", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing", "api/generated/compas_timber.fabrication.Pocket.apply", "api/generated/compas_timber.fabrication.Pocket.copy", "api/generated/compas_timber.fabrication.Pocket.from_json", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element", "api/generated/compas_timber.fabrication.Pocket.scale", "api/generated/compas_timber.fabrication.Pocket.scaled", "api/generated/compas_timber.fabrication.Pocket.sha256", "api/generated/compas_timber.fabrication.Pocket.to_json", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring", "api/generated/compas_timber.fabrication.Pocket.validate_data", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element", "api/generated/compas_timber.fabrication.PocketProxy", "api/generated/compas_timber.fabrication.PocketProxy.apply", "api/generated/compas_timber.fabrication.PocketProxy.from_volume_and_element", "api/generated/compas_timber.fabrication.PocketProxy.unproxified", "api/generated/compas_timber.fabrication.Slot", "api/generated/compas_timber.fabrication.Slot.ToString", "api/generated/compas_timber.fabrication.Slot.add_subprocessing", "api/generated/compas_timber.fabrication.Slot.apply", "api/generated/compas_timber.fabrication.Slot.copy", "api/generated/compas_timber.fabrication.Slot.from_json", "api/generated/compas_timber.fabrication.Slot.from_jsonstring", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam", "api/generated/compas_timber.fabrication.Slot.scale", "api/generated/compas_timber.fabrication.Slot.scaled", "api/generated/compas_timber.fabrication.Slot.sha256", "api/generated/compas_timber.fabrication.Slot.to_json", "api/generated/compas_timber.fabrication.Slot.to_jsonstring", "api/generated/compas_timber.fabrication.Slot.validate_data", "api/generated/compas_timber.fabrication.StepJoint", "api/generated/compas_timber.fabrication.StepJoint.ToString", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing", "api/generated/compas_timber.fabrication.StepJoint.add_tenon", "api/generated/compas_timber.fabrication.StepJoint.apply", "api/generated/compas_timber.fabrication.StepJoint.copy", "api/generated/compas_timber.fabrication.StepJoint.from_json", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.scale", "api/generated/compas_timber.fabrication.StepJoint.scaled", "api/generated/compas_timber.fabrication.StepJoint.sha256", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJoint.to_json", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring", "api/generated/compas_timber.fabrication.StepJoint.validate_data", "api/generated/compas_timber.fabrication.StepJointNotch", "api/generated/compas_timber.fabrication.StepJointNotch.ToString", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing", "api/generated/compas_timber.fabrication.StepJointNotch.apply", "api/generated/compas_timber.fabrication.StepJointNotch.copy", "api/generated/compas_timber.fabrication.StepJointNotch.from_json", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam", "api/generated/compas_timber.fabrication.StepJointNotch.scale", "api/generated/compas_timber.fabrication.StepJointNotch.scaled", "api/generated/compas_timber.fabrication.StepJointNotch.sha256", "api/generated/compas_timber.fabrication.StepJointNotch.to_json", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data", "api/generated/compas_timber.fabrication.StepShapeType", "api/generated/compas_timber.fabrication.Tenon", "api/generated/compas_timber.fabrication.Tenon.ToString", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing", "api/generated/compas_timber.fabrication.Tenon.apply", "api/generated/compas_timber.fabrication.Tenon.copy", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam", "api/generated/compas_timber.fabrication.Tenon.from_json", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam", "api/generated/compas_timber.fabrication.Tenon.scale", "api/generated/compas_timber.fabrication.Tenon.scaled", "api/generated/compas_timber.fabrication.Tenon.sha256", "api/generated/compas_timber.fabrication.Tenon.to_json", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring", "api/generated/compas_timber.fabrication.Tenon.validate_data", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam", "api/generated/compas_timber.fabrication.TenonShapeType", "api/generated/compas_timber.fabrication.Text", "api/generated/compas_timber.fabrication.Text.ToString", "api/generated/compas_timber.fabrication.Text.add_subprocessing", "api/generated/compas_timber.fabrication.Text.apply", "api/generated/compas_timber.fabrication.Text.copy", "api/generated/compas_timber.fabrication.Text.create_text_curves_for_element", "api/generated/compas_timber.fabrication.Text.from_json", "api/generated/compas_timber.fabrication.Text.from_jsonstring", "api/generated/compas_timber.fabrication.Text.scale", "api/generated/compas_timber.fabrication.Text.scaled", "api/generated/compas_timber.fabrication.Text.sha256", "api/generated/compas_timber.fabrication.Text.to_json", "api/generated/compas_timber.fabrication.Text.to_jsonstring", "api/generated/compas_timber.fabrication.Text.validate_data", "api/generated/compas_timber.ghpython.add_gh_param", "api/generated/compas_timber.ghpython.clear_gh_params", "api/generated/compas_timber.ghpython.get_leaf_subclasses", "api/generated/compas_timber.ghpython.item_input_valid", "api/generated/compas_timber.ghpython.list_input_valid", "api/generated/compas_timber.ghpython.manage_dynamic_params", "api/generated/compas_timber.ghpython.rename_gh_input", "api/generated/compas_timber.model.TimberModel", "api/generated/compas_timber.model.TimberModel.ToString", "api/generated/compas_timber.model.TimberModel.add_element", "api/generated/compas_timber.model.TimberModel.add_elements", "api/generated/compas_timber.model.TimberModel.add_group", "api/generated/compas_timber.model.TimberModel.add_group_element", "api/generated/compas_timber.model.TimberModel.add_interaction", "api/generated/compas_timber.model.TimberModel.add_joint", "api/generated/compas_timber.model.TimberModel.add_joint_candidate", "api/generated/compas_timber.model.TimberModel.add_material", "api/generated/compas_timber.model.TimberModel.assign_material", "api/generated/compas_timber.model.TimberModel.compute_aabb", "api/generated/compas_timber.model.TimberModel.compute_obb", "api/generated/compas_timber.model.TimberModel.connect_adjacent_beams", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls", "api/generated/compas_timber.model.TimberModel.copy", "api/generated/compas_timber.model.TimberModel.element_by_guid", "api/generated/compas_timber.model.TimberModel.elements", "api/generated/compas_timber.model.TimberModel.elements_connected_by", "api/generated/compas_timber.model.TimberModel.from_json", "api/generated/compas_timber.model.TimberModel.from_jsonstring", "api/generated/compas_timber.model.TimberModel.get_elements_in_group", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element", "api/generated/compas_timber.model.TimberModel.has_element", "api/generated/compas_timber.model.TimberModel.has_group", "api/generated/compas_timber.model.TimberModel.has_interaction", "api/generated/compas_timber.model.TimberModel.has_material", "api/generated/compas_timber.model.TimberModel.interactions", "api/generated/compas_timber.model.TimberModel.materials", "api/generated/compas_timber.model.TimberModel.process_joinery", "api/generated/compas_timber.model.TimberModel.remove_element", "api/generated/compas_timber.model.TimberModel.remove_interaction", "api/generated/compas_timber.model.TimberModel.remove_joint", "api/generated/compas_timber.model.TimberModel.remove_joint_candidate", "api/generated/compas_timber.model.TimberModel.rotate", "api/generated/compas_timber.model.TimberModel.rotated", "api/generated/compas_timber.model.TimberModel.scale", "api/generated/compas_timber.model.TimberModel.scaled", "api/generated/compas_timber.model.TimberModel.set_topologies", "api/generated/compas_timber.model.TimberModel.sha256", "api/generated/compas_timber.model.TimberModel.to_json", "api/generated/compas_timber.model.TimberModel.to_jsonstring", "api/generated/compas_timber.model.TimberModel.transform", "api/generated/compas_timber.model.TimberModel.transform_numpy", "api/generated/compas_timber.model.TimberModel.transformed", "api/generated/compas_timber.model.TimberModel.transformed_numpy", "api/generated/compas_timber.model.TimberModel.translate", "api/generated/compas_timber.model.TimberModel.translated", "api/generated/compas_timber.model.TimberModel.validate_data", "api/generated/compas_timber.planning.Actor", "api/generated/compas_timber.planning.Actor.get_name", "api/generated/compas_timber.planning.BuildingPlan", "api/generated/compas_timber.planning.BuildingPlan.ToString", "api/generated/compas_timber.planning.BuildingPlan.add_step", "api/generated/compas_timber.planning.BuildingPlan.copy", "api/generated/compas_timber.planning.BuildingPlan.from_json", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.sha256", "api/generated/compas_timber.planning.BuildingPlan.to_json", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring", "api/generated/compas_timber.planning.BuildingPlan.validate_data", "api/generated/compas_timber.planning.BuildingPlanParser", "api/generated/compas_timber.planning.BuildingPlanParser.parse", "api/generated/compas_timber.planning.BuildingPlanParser.serialize", "api/generated/compas_timber.planning.Instruction", "api/generated/compas_timber.planning.Instruction.ToString", "api/generated/compas_timber.planning.Instruction.copy", "api/generated/compas_timber.planning.Instruction.from_json", "api/generated/compas_timber.planning.Instruction.from_jsonstring", "api/generated/compas_timber.planning.Instruction.sha256", "api/generated/compas_timber.planning.Instruction.to_json", "api/generated/compas_timber.planning.Instruction.to_jsonstring", "api/generated/compas_timber.planning.Instruction.transform", "api/generated/compas_timber.planning.Instruction.validate_data", "api/generated/compas_timber.planning.LinearDimension", "api/generated/compas_timber.planning.LinearDimension.ToString", "api/generated/compas_timber.planning.LinearDimension.copy", "api/generated/compas_timber.planning.LinearDimension.from_json", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring", "api/generated/compas_timber.planning.LinearDimension.sha256", "api/generated/compas_timber.planning.LinearDimension.to_json", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring", "api/generated/compas_timber.planning.LinearDimension.transform", "api/generated/compas_timber.planning.LinearDimension.validate_data", "api/generated/compas_timber.planning.Model3d", "api/generated/compas_timber.planning.Model3d.ToString", "api/generated/compas_timber.planning.Model3d.copy", "api/generated/compas_timber.planning.Model3d.from_json", "api/generated/compas_timber.planning.Model3d.from_jsonstring", "api/generated/compas_timber.planning.Model3d.sha256", "api/generated/compas_timber.planning.Model3d.to_json", "api/generated/compas_timber.planning.Model3d.to_jsonstring", "api/generated/compas_timber.planning.Model3d.transform", "api/generated/compas_timber.planning.Model3d.validate_data", "api/generated/compas_timber.planning.SimpleSequenceGenerator", "api/generated/compas_timber.planning.Step", "api/generated/compas_timber.planning.Step.ToString", "api/generated/compas_timber.planning.Step.copy", "api/generated/compas_timber.planning.Step.from_json", "api/generated/compas_timber.planning.Step.from_jsonstring", "api/generated/compas_timber.planning.Step.sha256", "api/generated/compas_timber.planning.Step.to_json", "api/generated/compas_timber.planning.Step.to_jsonstring", "api/generated/compas_timber.planning.Step.transform", "api/generated/compas_timber.planning.Step.validate_data", "api/generated/compas_timber.planning.Text3d", "api/generated/compas_timber.planning.Text3d.ToString", "api/generated/compas_timber.planning.Text3d.copy", "api/generated/compas_timber.planning.Text3d.from_json", "api/generated/compas_timber.planning.Text3d.from_jsonstring", "api/generated/compas_timber.planning.Text3d.sha256", "api/generated/compas_timber.planning.Text3d.to_json", "api/generated/compas_timber.planning.Text3d.to_jsonstring", "api/generated/compas_timber.planning.Text3d.transform", "api/generated/compas_timber.planning.Text3d.validate_data", "api/generated/compas_timber.rhino.find_neighboring_elements", "citing", "contribution", "contribution/BTLx_contribution_guide", "contribution/class_diagrams", "contribution/joints_contribution_guide", "index", "installation", "license", "tutorials", "tutorials/grasshopper/attributes", "tutorials/grasshopper/beams", "tutorials/grasshopper/design", "tutorials/grasshopper/examples", "tutorials/grasshopper/fabrication", "tutorials/grasshopper/features", "tutorials/grasshopper/installation", "tutorials/grasshopper/joint_rules", "tutorials/grasshopper/model", "tutorials/grasshopper/show", "tutorials/grasshopper/utils", "tutorials/grasshopper/workflow"], "filenames": ["api.rst", "api/compas_timber.connections.rst", "api/compas_timber.design.rst", "api/compas_timber.elements.rst", "api/compas_timber.errors.rst", "api/compas_timber.fabrication.rst", "api/compas_timber.ghpython.rst", "api/compas_timber.model.rst", "api/compas_timber.planning.rst", "api/compas_timber.rhino.rst", "api/generated/compas_timber.connections.BallNodeJoint.rst", "api/generated/compas_timber.connections.BallNodeJoint.ToString.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_extensions.rst", "api/generated/compas_timber.connections.BallNodeJoint.add_features.rst", "api/generated/compas_timber.connections.BallNodeJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.BallNodeJoint.copy.rst", "api/generated/compas_timber.connections.BallNodeJoint.create.rst", "api/generated/compas_timber.connections.BallNodeJoint.element_count_complies.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.promote_cluster.rst", "api/generated/compas_timber.connections.BallNodeJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.BallNodeJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.BallNodeJoint.sha256.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_json.rst", "api/generated/compas_timber.connections.BallNodeJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.BallNodeJoint.validate_data.rst", "api/generated/compas_timber.connections.BeamGroupAnalyzer.rst", "api/generated/compas_timber.connections.BeamGroupAnalyzer.find.rst", "api/generated/compas_timber.connections.ButtJoint.rst", "api/generated/compas_timber.connections.ButtJoint.ToString.rst", "api/generated/compas_timber.connections.ButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.ButtJoint.add_features.rst", "api/generated/compas_timber.connections.ButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.ButtJoint.copy.rst", "api/generated/compas_timber.connections.ButtJoint.create.rst", "api/generated/compas_timber.connections.ButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.ButtJoint.from_json.rst", "api/generated/compas_timber.connections.ButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.ButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.ButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.ButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.ButtJoint.sha256.rst", "api/generated/compas_timber.connections.ButtJoint.to_json.rst", "api/generated/compas_timber.connections.ButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.ButtJoint.validate_data.rst", "api/generated/compas_timber.connections.Cluster.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.find.rst", "api/generated/compas_timber.connections.CompositeAnalyzer.from_model.rst", "api/generated/compas_timber.connections.ConnectionSolver.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_intersecting_pairs.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_topology.rst", "api/generated/compas_timber.connections.ConnectionSolver.find_wall_wall_topology.rst", "api/generated/compas_timber.connections.InterfaceLocation.rst", "api/generated/compas_timber.connections.InterfaceRole.rst", "api/generated/compas_timber.connections.Joint.rst", "api/generated/compas_timber.connections.Joint.ToString.rst", "api/generated/compas_timber.connections.Joint.add_extensions.rst", "api/generated/compas_timber.connections.Joint.add_features.rst", "api/generated/compas_timber.connections.Joint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.Joint.copy.rst", "api/generated/compas_timber.connections.Joint.create.rst", "api/generated/compas_timber.connections.Joint.element_count_complies.rst", "api/generated/compas_timber.connections.Joint.from_json.rst", "api/generated/compas_timber.connections.Joint.from_jsonstring.rst", "api/generated/compas_timber.connections.Joint.promote_cluster.rst", "api/generated/compas_timber.connections.Joint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.Joint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.Joint.sha256.rst", "api/generated/compas_timber.connections.Joint.to_json.rst", "api/generated/compas_timber.connections.Joint.to_jsonstring.rst", "api/generated/compas_timber.connections.Joint.validate_data.rst", "api/generated/compas_timber.connections.JointCandidate.rst", "api/generated/compas_timber.connections.JointCandidate.ToString.rst", "api/generated/compas_timber.connections.JointCandidate.add_extensions.rst", "api/generated/compas_timber.connections.JointCandidate.add_features.rst", "api/generated/compas_timber.connections.JointCandidate.check_elements_compatibility.rst", "api/generated/compas_timber.connections.JointCandidate.copy.rst", "api/generated/compas_timber.connections.JointCandidate.create.rst", "api/generated/compas_timber.connections.JointCandidate.element_count_complies.rst", "api/generated/compas_timber.connections.JointCandidate.from_json.rst", "api/generated/compas_timber.connections.JointCandidate.from_jsonstring.rst", "api/generated/compas_timber.connections.JointCandidate.promote_cluster.rst", "api/generated/compas_timber.connections.JointCandidate.promote_joint_candidate.rst", "api/generated/compas_timber.connections.JointCandidate.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.JointCandidate.sha256.rst", "api/generated/compas_timber.connections.JointCandidate.to_json.rst", "api/generated/compas_timber.connections.JointCandidate.to_jsonstring.rst", "api/generated/compas_timber.connections.JointCandidate.validate_data.rst", "api/generated/compas_timber.connections.JointTopology.rst", "api/generated/compas_timber.connections.JointTopology.get_name.rst", "api/generated/compas_timber.connections.LButtJoint.rst", "api/generated/compas_timber.connections.LButtJoint.ToString.rst", "api/generated/compas_timber.connections.LButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.LButtJoint.add_features.rst", "api/generated/compas_timber.connections.LButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LButtJoint.copy.rst", "api/generated/compas_timber.connections.LButtJoint.create.rst", "api/generated/compas_timber.connections.LButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LButtJoint.from_json.rst", "api/generated/compas_timber.connections.LButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LButtJoint.sha256.rst", "api/generated/compas_timber.connections.LButtJoint.to_json.rst", "api/generated/compas_timber.connections.LButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LButtJoint.update_beam_roles.rst", "api/generated/compas_timber.connections.LButtJoint.validate_data.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.ToString.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.add_features.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.copy.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.create.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.sha256.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_json.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LFrenchRidgeLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LLapJoint.rst", "api/generated/compas_timber.connections.LLapJoint.ToString.rst", "api/generated/compas_timber.connections.LLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LLapJoint.add_features.rst", "api/generated/compas_timber.connections.LLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LLapJoint.copy.rst", "api/generated/compas_timber.connections.LLapJoint.create.rst", "api/generated/compas_timber.connections.LLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LLapJoint.from_json.rst", "api/generated/compas_timber.connections.LLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LLapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LLapJoint.sha256.rst", "api/generated/compas_timber.connections.LLapJoint.to_json.rst", "api/generated/compas_timber.connections.LLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LLapJoint.validate_data.rst", "api/generated/compas_timber.connections.LMiterJoint.rst", "api/generated/compas_timber.connections.LMiterJoint.ToString.rst", "api/generated/compas_timber.connections.LMiterJoint.add_extensions.rst", "api/generated/compas_timber.connections.LMiterJoint.add_features.rst", "api/generated/compas_timber.connections.LMiterJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LMiterJoint.copy.rst", "api/generated/compas_timber.connections.LMiterJoint.create.rst", "api/generated/compas_timber.connections.LMiterJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LMiterJoint.from_json.rst", "api/generated/compas_timber.connections.LMiterJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutoff_plane.rst", "api/generated/compas_timber.connections.LMiterJoint.get_cutting_planes.rst", "api/generated/compas_timber.connections.LMiterJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LMiterJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LMiterJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LMiterJoint.sha256.rst", "api/generated/compas_timber.connections.LMiterJoint.to_json.rst", "api/generated/compas_timber.connections.LMiterJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LMiterJoint.validate_data.rst", "api/generated/compas_timber.connections.LapJoint.rst", "api/generated/compas_timber.connections.LapJoint.ToString.rst", "api/generated/compas_timber.connections.LapJoint.add_extensions.rst", "api/generated/compas_timber.connections.LapJoint.add_features.rst", "api/generated/compas_timber.connections.LapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.LapJoint.copy.rst", "api/generated/compas_timber.connections.LapJoint.create.rst", "api/generated/compas_timber.connections.LapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.LapJoint.from_json.rst", "api/generated/compas_timber.connections.LapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.LapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.LapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.LapJoint.sha256.rst", "api/generated/compas_timber.connections.LapJoint.to_json.rst", "api/generated/compas_timber.connections.LapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.LapJoint.validate_data.rst", "api/generated/compas_timber.connections.MaxNCompositeAnalyzer.rst", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.rst", "api/generated/compas_timber.connections.NBeamKDTreeAnalyzer.find.rst", "api/generated/compas_timber.connections.PlateButtJoint.rst", "api/generated/compas_timber.connections.PlateButtJoint.ToString.rst", "api/generated/compas_timber.connections.PlateButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.PlateButtJoint.add_features.rst", "api/generated/compas_timber.connections.PlateButtJoint.calculate_topology.rst", "api/generated/compas_timber.connections.PlateButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.PlateButtJoint.copy.rst", "api/generated/compas_timber.connections.PlateButtJoint.create.rst", "api/generated/compas_timber.connections.PlateButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.PlateButtJoint.flip_roles.rst", "api/generated/compas_timber.connections.PlateButtJoint.from_json.rst", "api/generated/compas_timber.connections.PlateButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.PlateButtJoint.get_interface_for_plate.rst", "api/generated/compas_timber.connections.PlateButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.PlateButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.PlateButtJoint.reorder_planes_and_outlines.rst", "api/generated/compas_timber.connections.PlateButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.PlateButtJoint.restore_plates_from_keys.rst", "api/generated/compas_timber.connections.PlateButtJoint.sha256.rst", "api/generated/compas_timber.connections.PlateButtJoint.to_json.rst", "api/generated/compas_timber.connections.PlateButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.PlateButtJoint.validate_data.rst", "api/generated/compas_timber.connections.PlateConnectionSolver.rst", "api/generated/compas_timber.connections.PlateConnectionSolver.do_segments_overlap.rst", "api/generated/compas_timber.connections.PlateConnectionSolver.does_segment_intersect_outline.rst", "api/generated/compas_timber.connections.PlateConnectionSolver.find_intersecting_pairs.rst", "api/generated/compas_timber.connections.PlateConnectionSolver.find_topology.rst", "api/generated/compas_timber.connections.PlateConnectionSolver.find_wall_wall_topology.rst", "api/generated/compas_timber.connections.PlateJoint.rst", "api/generated/compas_timber.connections.PlateJoint.ToString.rst", "api/generated/compas_timber.connections.PlateJoint.add_extensions.rst", "api/generated/compas_timber.connections.PlateJoint.add_features.rst", "api/generated/compas_timber.connections.PlateJoint.calculate_topology.rst", "api/generated/compas_timber.connections.PlateJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.PlateJoint.copy.rst", "api/generated/compas_timber.connections.PlateJoint.create.rst", "api/generated/compas_timber.connections.PlateJoint.element_count_complies.rst", "api/generated/compas_timber.connections.PlateJoint.flip_roles.rst", "api/generated/compas_timber.connections.PlateJoint.from_json.rst", "api/generated/compas_timber.connections.PlateJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.PlateJoint.get_interface_for_plate.rst", "api/generated/compas_timber.connections.PlateJoint.promote_cluster.rst", "api/generated/compas_timber.connections.PlateJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.PlateJoint.reorder_planes_and_outlines.rst", "api/generated/compas_timber.connections.PlateJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.PlateJoint.restore_plates_from_keys.rst", "api/generated/compas_timber.connections.PlateJoint.sha256.rst", "api/generated/compas_timber.connections.PlateJoint.to_json.rst", "api/generated/compas_timber.connections.PlateJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.PlateJoint.validate_data.rst", "api/generated/compas_timber.connections.PlateLButtJoint.rst", "api/generated/compas_timber.connections.PlateLButtJoint.ToString.rst", "api/generated/compas_timber.connections.PlateLButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.PlateLButtJoint.add_features.rst", "api/generated/compas_timber.connections.PlateLButtJoint.calculate_topology.rst", "api/generated/compas_timber.connections.PlateLButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.PlateLButtJoint.copy.rst", "api/generated/compas_timber.connections.PlateLButtJoint.create.rst", "api/generated/compas_timber.connections.PlateLButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.PlateLButtJoint.flip_roles.rst", "api/generated/compas_timber.connections.PlateLButtJoint.from_json.rst", "api/generated/compas_timber.connections.PlateLButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.PlateLButtJoint.get_interface_for_plate.rst", "api/generated/compas_timber.connections.PlateLButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.PlateLButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.PlateLButtJoint.reorder_planes_and_outlines.rst", "api/generated/compas_timber.connections.PlateLButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.PlateLButtJoint.restore_plates_from_keys.rst", "api/generated/compas_timber.connections.PlateLButtJoint.sha256.rst", "api/generated/compas_timber.connections.PlateLButtJoint.to_json.rst", "api/generated/compas_timber.connections.PlateLButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.PlateLButtJoint.validate_data.rst", "api/generated/compas_timber.connections.PlateMiterJoint.rst", "api/generated/compas_timber.connections.PlateMiterJoint.ToString.rst", "api/generated/compas_timber.connections.PlateMiterJoint.add_extensions.rst", "api/generated/compas_timber.connections.PlateMiterJoint.add_features.rst", "api/generated/compas_timber.connections.PlateMiterJoint.calculate_topology.rst", "api/generated/compas_timber.connections.PlateMiterJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.PlateMiterJoint.copy.rst", "api/generated/compas_timber.connections.PlateMiterJoint.create.rst", "api/generated/compas_timber.connections.PlateMiterJoint.element_count_complies.rst", "api/generated/compas_timber.connections.PlateMiterJoint.flip_roles.rst", "api/generated/compas_timber.connections.PlateMiterJoint.from_json.rst", "api/generated/compas_timber.connections.PlateMiterJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.PlateMiterJoint.get_interface_for_plate.rst", "api/generated/compas_timber.connections.PlateMiterJoint.promote_cluster.rst", "api/generated/compas_timber.connections.PlateMiterJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.PlateMiterJoint.reorder_planes_and_outlines.rst", "api/generated/compas_timber.connections.PlateMiterJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.PlateMiterJoint.restore_plates_from_keys.rst", "api/generated/compas_timber.connections.PlateMiterJoint.sha256.rst", "api/generated/compas_timber.connections.PlateMiterJoint.to_json.rst", "api/generated/compas_timber.connections.PlateMiterJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.PlateMiterJoint.validate_data.rst", "api/generated/compas_timber.connections.PlateTButtJoint.rst", "api/generated/compas_timber.connections.PlateTButtJoint.ToString.rst", "api/generated/compas_timber.connections.PlateTButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.PlateTButtJoint.add_features.rst", "api/generated/compas_timber.connections.PlateTButtJoint.calculate_topology.rst", "api/generated/compas_timber.connections.PlateTButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.PlateTButtJoint.copy.rst", "api/generated/compas_timber.connections.PlateTButtJoint.create.rst", "api/generated/compas_timber.connections.PlateTButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.PlateTButtJoint.flip_roles.rst", "api/generated/compas_timber.connections.PlateTButtJoint.from_json.rst", "api/generated/compas_timber.connections.PlateTButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.PlateTButtJoint.get_interface_for_plate.rst", "api/generated/compas_timber.connections.PlateTButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.PlateTButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.PlateTButtJoint.reorder_planes_and_outlines.rst", "api/generated/compas_timber.connections.PlateTButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.PlateTButtJoint.restore_plates_from_keys.rst", "api/generated/compas_timber.connections.PlateTButtJoint.sha256.rst", "api/generated/compas_timber.connections.PlateTButtJoint.to_json.rst", "api/generated/compas_timber.connections.PlateTButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.PlateTButtJoint.validate_data.rst", "api/generated/compas_timber.connections.PlateToPlateInterface.rst", "api/generated/compas_timber.connections.PlateToPlateInterface.as_plane.rst", "api/generated/compas_timber.connections.QuadAnalyzer.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.ToString.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_extensions.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.add_features.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.copy.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.create.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.sha256.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_json.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TBirdsmouthJoint.validate_data.rst", "api/generated/compas_timber.connections.TButtJoint.rst", "api/generated/compas_timber.connections.TButtJoint.ToString.rst", "api/generated/compas_timber.connections.TButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.TButtJoint.add_features.rst", "api/generated/compas_timber.connections.TButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TButtJoint.copy.rst", "api/generated/compas_timber.connections.TButtJoint.create.rst", "api/generated/compas_timber.connections.TButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TButtJoint.from_json.rst", "api/generated/compas_timber.connections.TButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TButtJoint.sha256.rst", "api/generated/compas_timber.connections.TButtJoint.to_json.rst", "api/generated/compas_timber.connections.TButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TButtJoint.validate_data.rst", "api/generated/compas_timber.connections.TDovetailJoint.rst", "api/generated/compas_timber.connections.TDovetailJoint.ToString.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_extensions.rst", "api/generated/compas_timber.connections.TDovetailJoint.add_features.rst", "api/generated/compas_timber.connections.TDovetailJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TDovetailJoint.copy.rst", "api/generated/compas_timber.connections.TDovetailJoint.create.rst", "api/generated/compas_timber.connections.TDovetailJoint.define_dovetail_tool.rst", "api/generated/compas_timber.connections.TDovetailJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TDovetailJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TDovetailJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TDovetailJoint.sha256.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_json.rst", "api/generated/compas_timber.connections.TDovetailJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TDovetailJoint.validate_data.rst", "api/generated/compas_timber.connections.TLapJoint.rst", "api/generated/compas_timber.connections.TLapJoint.ToString.rst", "api/generated/compas_timber.connections.TLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.TLapJoint.add_features.rst", "api/generated/compas_timber.connections.TLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TLapJoint.copy.rst", "api/generated/compas_timber.connections.TLapJoint.create.rst", "api/generated/compas_timber.connections.TLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TLapJoint.from_json.rst", "api/generated/compas_timber.connections.TLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TLapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TLapJoint.sha256.rst", "api/generated/compas_timber.connections.TLapJoint.to_json.rst", "api/generated/compas_timber.connections.TLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TLapJoint.validate_data.rst", "api/generated/compas_timber.connections.TOliGinaJoint.rst", "api/generated/compas_timber.connections.TOliGinaJoint.ToString.rst", "api/generated/compas_timber.connections.TOliGinaJoint.add_extensions.rst", "api/generated/compas_timber.connections.TOliGinaJoint.add_features.rst", "api/generated/compas_timber.connections.TOliGinaJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TOliGinaJoint.copy.rst", "api/generated/compas_timber.connections.TOliGinaJoint.create.rst", "api/generated/compas_timber.connections.TOliGinaJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TOliGinaJoint.from_json.rst", "api/generated/compas_timber.connections.TOliGinaJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TOliGinaJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TOliGinaJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TOliGinaJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TOliGinaJoint.sha256.rst", "api/generated/compas_timber.connections.TOliGinaJoint.to_json.rst", "api/generated/compas_timber.connections.TOliGinaJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TOliGinaJoint.validate_data.rst", "api/generated/compas_timber.connections.TStepJoint.rst", "api/generated/compas_timber.connections.TStepJoint.ToString.rst", "api/generated/compas_timber.connections.TStepJoint.add_extensions.rst", "api/generated/compas_timber.connections.TStepJoint.add_features.rst", "api/generated/compas_timber.connections.TStepJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TStepJoint.copy.rst", "api/generated/compas_timber.connections.TStepJoint.create.rst", "api/generated/compas_timber.connections.TStepJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TStepJoint.from_json.rst", "api/generated/compas_timber.connections.TStepJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TStepJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TStepJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TStepJoint.set_step_depths.rst", "api/generated/compas_timber.connections.TStepJoint.sha256.rst", "api/generated/compas_timber.connections.TStepJoint.to_json.rst", "api/generated/compas_timber.connections.TStepJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TStepJoint.validate_data.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.ToString.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_extensions.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.add_features.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.copy.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.create.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.element_count_complies.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.promote_cluster.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.sha256.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_json.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.TenonMortiseJoint.validate_data.rst", "api/generated/compas_timber.connections.TripletAnalyzer.rst", "api/generated/compas_timber.connections.WallJoint.rst", "api/generated/compas_timber.connections.WallJoint.ToString.rst", "api/generated/compas_timber.connections.WallJoint.add_extensions.rst", "api/generated/compas_timber.connections.WallJoint.add_features.rst", "api/generated/compas_timber.connections.WallJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.WallJoint.copy.rst", "api/generated/compas_timber.connections.WallJoint.create.rst", "api/generated/compas_timber.connections.WallJoint.element_count_complies.rst", "api/generated/compas_timber.connections.WallJoint.flip_roles.rst", "api/generated/compas_timber.connections.WallJoint.from_json.rst", "api/generated/compas_timber.connections.WallJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.WallJoint.get_interface_for_wall.rst", "api/generated/compas_timber.connections.WallJoint.promote_cluster.rst", "api/generated/compas_timber.connections.WallJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.WallJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.WallJoint.restore_walls_from_keys.rst", "api/generated/compas_timber.connections.WallJoint.sha256.rst", "api/generated/compas_timber.connections.WallJoint.to_json.rst", "api/generated/compas_timber.connections.WallJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.WallJoint.validate_data.rst", "api/generated/compas_timber.connections.XLapJoint.rst", "api/generated/compas_timber.connections.XLapJoint.ToString.rst", "api/generated/compas_timber.connections.XLapJoint.add_extensions.rst", "api/generated/compas_timber.connections.XLapJoint.add_features.rst", "api/generated/compas_timber.connections.XLapJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XLapJoint.copy.rst", "api/generated/compas_timber.connections.XLapJoint.create.rst", "api/generated/compas_timber.connections.XLapJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XLapJoint.from_json.rst", "api/generated/compas_timber.connections.XLapJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.promote_cluster.rst", "api/generated/compas_timber.connections.XLapJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.XLapJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XLapJoint.sha256.rst", "api/generated/compas_timber.connections.XLapJoint.to_json.rst", "api/generated/compas_timber.connections.XLapJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XLapJoint.validate_data.rst", "api/generated/compas_timber.connections.XNotchJoint.rst", "api/generated/compas_timber.connections.XNotchJoint.ToString.rst", "api/generated/compas_timber.connections.XNotchJoint.add_extensions.rst", "api/generated/compas_timber.connections.XNotchJoint.add_features.rst", "api/generated/compas_timber.connections.XNotchJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.XNotchJoint.copy.rst", "api/generated/compas_timber.connections.XNotchJoint.create.rst", "api/generated/compas_timber.connections.XNotchJoint.element_count_complies.rst", "api/generated/compas_timber.connections.XNotchJoint.from_json.rst", "api/generated/compas_timber.connections.XNotchJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.promote_cluster.rst", "api/generated/compas_timber.connections.XNotchJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.XNotchJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.XNotchJoint.sha256.rst", "api/generated/compas_timber.connections.XNotchJoint.to_json.rst", "api/generated/compas_timber.connections.XNotchJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.XNotchJoint.validate_data.rst", "api/generated/compas_timber.connections.YButtJoint.rst", "api/generated/compas_timber.connections.YButtJoint.ToString.rst", "api/generated/compas_timber.connections.YButtJoint.add_extensions.rst", "api/generated/compas_timber.connections.YButtJoint.add_features.rst", "api/generated/compas_timber.connections.YButtJoint.check_elements_compatibility.rst", "api/generated/compas_timber.connections.YButtJoint.copy.rst", "api/generated/compas_timber.connections.YButtJoint.create.rst", "api/generated/compas_timber.connections.YButtJoint.cross_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.element_count_complies.rst", "api/generated/compas_timber.connections.YButtJoint.from_json.rst", "api/generated/compas_timber.connections.YButtJoint.from_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.get_miter_planes.rst", "api/generated/compas_timber.connections.YButtJoint.main_beam_ref_side_index.rst", "api/generated/compas_timber.connections.YButtJoint.promote_cluster.rst", "api/generated/compas_timber.connections.YButtJoint.promote_joint_candidate.rst", "api/generated/compas_timber.connections.YButtJoint.restore_beams_from_keys.rst", "api/generated/compas_timber.connections.YButtJoint.sha256.rst", "api/generated/compas_timber.connections.YButtJoint.to_json.rst", "api/generated/compas_timber.connections.YButtJoint.to_jsonstring.rst", "api/generated/compas_timber.connections.YButtJoint.validate_data.rst", "api/generated/compas_timber.connections.beam_ref_side_incidence.rst", "api/generated/compas_timber.connections.beam_ref_side_incidence_with_vector.rst", "api/generated/compas_timber.connections.find_neighboring_elements.rst", "api/generated/compas_timber.connections.point_centerline_towards_joint.rst", "api/generated/compas_timber.design.CategoryRule.rst", "api/generated/compas_timber.design.CategoryRule.ToString.rst", "api/generated/compas_timber.design.CategoryRule.comply.rst", "api/generated/compas_timber.design.CategoryRule.get_category_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_direct_rules.rst", "api/generated/compas_timber.design.CategoryRule.get_topology_rules.rst", "api/generated/compas_timber.design.CategoryRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.CategoryRule.reorder.rst", "api/generated/compas_timber.design.DebugInfomation.rst", "api/generated/compas_timber.design.DebugInfomation.ToString.rst", "api/generated/compas_timber.design.DebugInfomation.add_fastener_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_feature_error.rst", "api/generated/compas_timber.design.DebugInfomation.add_joint_error.rst", "api/generated/compas_timber.design.DirectRule.rst", "api/generated/compas_timber.design.DirectRule.ToString.rst", "api/generated/compas_timber.design.DirectRule.comply.rst", "api/generated/compas_timber.design.DirectRule.contains.rst", "api/generated/compas_timber.design.DirectRule.get_category_rules.rst", "api/generated/compas_timber.design.DirectRule.get_direct_rules.rst", "api/generated/compas_timber.design.DirectRule.get_topology_rules.rst", "api/generated/compas_timber.design.DirectRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.FeatureDefinition.rst", "api/generated/compas_timber.design.FeatureDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.rst", "api/generated/compas_timber.design.JointDefinition.ToString.rst", "api/generated/compas_timber.design.JointDefinition.is_identical.rst", "api/generated/compas_timber.design.JointDefinition.match.rst", "api/generated/compas_timber.design.JointRule.rst", "api/generated/compas_timber.design.JointRule.comply.rst", "api/generated/compas_timber.design.JointRule.get_category_rules.rst", "api/generated/compas_timber.design.JointRule.get_direct_rules.rst", "api/generated/compas_timber.design.JointRule.get_topology_rules.rst", "api/generated/compas_timber.design.JointRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.SurfaceModel.rst", "api/generated/compas_timber.design.SurfaceModel.beam_category_names.rst", "api/generated/compas_timber.design.SurfaceModel.create_model.rst", "api/generated/compas_timber.design.SurfaceModel.cull_overlaps.rst", "api/generated/compas_timber.design.SurfaceModel.distance_between_elements.rst", "api/generated/compas_timber.design.SurfaceModel.generate_frame.rst", "api/generated/compas_timber.design.SurfaceModel.generate_perimeter_beams.rst", "api/generated/compas_timber.design.SurfaceModel.generate_plates.rst", "api/generated/compas_timber.design.SurfaceModel.generate_stud_lines.rst", "api/generated/compas_timber.design.SurfaceModel.generate_studs.rst", "api/generated/compas_timber.design.SurfaceModel.generate_windows.rst", "api/generated/compas_timber.design.SurfaceModel.get_beam_intersections.rst", "api/generated/compas_timber.design.SurfaceModel.get_interior_segment_indices.rst", "api/generated/compas_timber.design.SurfaceModel.offset_elements.rst", "api/generated/compas_timber.design.SurfaceModel.parse_loops.rst", "api/generated/compas_timber.design.SurfaceModel.trim_jack_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_king_studs.rst", "api/generated/compas_timber.design.SurfaceModel.trim_studs.rst", "api/generated/compas_timber.design.TopologyRule.rst", "api/generated/compas_timber.design.TopologyRule.ToString.rst", "api/generated/compas_timber.design.TopologyRule.comply.rst", "api/generated/compas_timber.design.TopologyRule.get_category_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_direct_rules.rst", "api/generated/compas_timber.design.TopologyRule.get_topology_rules.rst", "api/generated/compas_timber.design.TopologyRule.joints_from_beams_and_rules.rst", "api/generated/compas_timber.design.guess_joint_topology_2beams.rst", "api/generated/compas_timber.design.set_default_joints.rst", "api/generated/compas_timber.elements.BallNodeFastener.rst", "api/generated/compas_timber.elements.BallNodeFastener.ToString.rst", "api/generated/compas_timber.elements.BallNodeFastener.add_feature.rst", "api/generated/compas_timber.elements.BallNodeFastener.add_features.rst", "api/generated/compas_timber.elements.BallNodeFastener.compute_aabb.rst", "api/generated/compas_timber.elements.BallNodeFastener.compute_collision_mesh.rst", "api/generated/compas_timber.elements.BallNodeFastener.compute_geometry.rst", "api/generated/compas_timber.elements.BallNodeFastener.compute_obb.rst", "api/generated/compas_timber.elements.BallNodeFastener.compute_worldtransformation.rst", "api/generated/compas_timber.elements.BallNodeFastener.copy.rst", "api/generated/compas_timber.elements.BallNodeFastener.from_json.rst", "api/generated/compas_timber.elements.BallNodeFastener.from_jsonstring.rst", "api/generated/compas_timber.elements.BallNodeFastener.remove_blank_extension.rst", "api/generated/compas_timber.elements.BallNodeFastener.remove_features.rst", "api/generated/compas_timber.elements.BallNodeFastener.reset.rst", "api/generated/compas_timber.elements.BallNodeFastener.sha256.rst", "api/generated/compas_timber.elements.BallNodeFastener.to_json.rst", "api/generated/compas_timber.elements.BallNodeFastener.to_jsonstring.rst", "api/generated/compas_timber.elements.BallNodeFastener.transform.rst", "api/generated/compas_timber.elements.BallNodeFastener.transformed.rst", "api/generated/compas_timber.elements.BallNodeFastener.update_interface.rst", "api/generated/compas_timber.elements.BallNodeFastener.validate_data.rst", "api/generated/compas_timber.elements.Beam.rst", "api/generated/compas_timber.elements.Beam.ToString.rst", "api/generated/compas_timber.elements.Beam.add_blank_extension.rst", "api/generated/compas_timber.elements.Beam.add_feature.rst", "api/generated/compas_timber.elements.Beam.add_features.rst", "api/generated/compas_timber.elements.Beam.back_side.rst", "api/generated/compas_timber.elements.Beam.compute_aabb.rst", "api/generated/compas_timber.elements.Beam.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Beam.compute_geometry.rst", "api/generated/compas_timber.elements.Beam.compute_obb.rst", "api/generated/compas_timber.elements.Beam.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Beam.copy.rst", "api/generated/compas_timber.elements.Beam.endpoint_closest_to_point.rst", "api/generated/compas_timber.elements.Beam.extension_to_plane.rst", "api/generated/compas_timber.elements.Beam.from_centerline.rst", "api/generated/compas_timber.elements.Beam.from_endpoints.rst", "api/generated/compas_timber.elements.Beam.from_json.rst", "api/generated/compas_timber.elements.Beam.from_jsonstring.rst", "api/generated/compas_timber.elements.Beam.front_side.rst", "api/generated/compas_timber.elements.Beam.get_dimensions_relative_to_side.rst", "api/generated/compas_timber.elements.Beam.opp_side.rst", "api/generated/compas_timber.elements.Beam.remove_blank_extension.rst", "api/generated/compas_timber.elements.Beam.remove_features.rst", "api/generated/compas_timber.elements.Beam.reset.rst", "api/generated/compas_timber.elements.Beam.sha256.rst", "api/generated/compas_timber.elements.Beam.side_as_surface.rst", "api/generated/compas_timber.elements.Beam.to_json.rst", "api/generated/compas_timber.elements.Beam.to_jsonstring.rst", "api/generated/compas_timber.elements.Beam.transform.rst", "api/generated/compas_timber.elements.Beam.transformed.rst", "api/generated/compas_timber.elements.Beam.validate_data.rst", "api/generated/compas_timber.elements.Fastener.rst", "api/generated/compas_timber.elements.Fastener.ToString.rst", "api/generated/compas_timber.elements.Fastener.add_feature.rst", "api/generated/compas_timber.elements.Fastener.add_features.rst", "api/generated/compas_timber.elements.Fastener.compute_aabb.rst", "api/generated/compas_timber.elements.Fastener.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Fastener.compute_geometry.rst", "api/generated/compas_timber.elements.Fastener.compute_obb.rst", "api/generated/compas_timber.elements.Fastener.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Fastener.copy.rst", "api/generated/compas_timber.elements.Fastener.from_json.rst", "api/generated/compas_timber.elements.Fastener.from_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.remove_blank_extension.rst", "api/generated/compas_timber.elements.Fastener.remove_features.rst", "api/generated/compas_timber.elements.Fastener.reset.rst", "api/generated/compas_timber.elements.Fastener.sha256.rst", "api/generated/compas_timber.elements.Fastener.to_json.rst", "api/generated/compas_timber.elements.Fastener.to_jsonstring.rst", "api/generated/compas_timber.elements.Fastener.transform.rst", "api/generated/compas_timber.elements.Fastener.transformed.rst", "api/generated/compas_timber.elements.Fastener.validate_data.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.ToString.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.copy.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.from_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.get_features.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.sha256.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_json.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.to_jsonstring.rst", "api/generated/compas_timber.elements.FastenerTimberInterface.validate_data.rst", "api/generated/compas_timber.elements.Opening.rst", "api/generated/compas_timber.elements.Opening.ToString.rst", "api/generated/compas_timber.elements.Opening.copy.rst", "api/generated/compas_timber.elements.Opening.from_json.rst", "api/generated/compas_timber.elements.Opening.from_jsonstring.rst", "api/generated/compas_timber.elements.Opening.orient_polyline.rst", "api/generated/compas_timber.elements.Opening.sha256.rst", "api/generated/compas_timber.elements.Opening.to_json.rst", "api/generated/compas_timber.elements.Opening.to_jsonstring.rst", "api/generated/compas_timber.elements.Opening.validate_data.rst", "api/generated/compas_timber.elements.OpeningType.rst", "api/generated/compas_timber.elements.Plate.rst", "api/generated/compas_timber.elements.Plate.ToString.rst", "api/generated/compas_timber.elements.Plate.add_feature.rst", "api/generated/compas_timber.elements.Plate.add_features.rst", "api/generated/compas_timber.elements.Plate.add_interface.rst", "api/generated/compas_timber.elements.Plate.check_outlines.rst", "api/generated/compas_timber.elements.Plate.compute_aabb.rst", "api/generated/compas_timber.elements.Plate.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Plate.compute_geometry.rst", "api/generated/compas_timber.elements.Plate.compute_obb.rst", "api/generated/compas_timber.elements.Plate.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Plate.copy.rst", "api/generated/compas_timber.elements.Plate.from_brep.rst", "api/generated/compas_timber.elements.Plate.from_json.rst", "api/generated/compas_timber.elements.Plate.from_jsonstring.rst", "api/generated/compas_timber.elements.Plate.from_outline_thickness.rst", "api/generated/compas_timber.elements.Plate.opp_side.rst", "api/generated/compas_timber.elements.Plate.remove_blank_extension.rst", "api/generated/compas_timber.elements.Plate.remove_features.rst", "api/generated/compas_timber.elements.Plate.reset.rst", "api/generated/compas_timber.elements.Plate.sha256.rst", "api/generated/compas_timber.elements.Plate.side_as_surface.rst", "api/generated/compas_timber.elements.Plate.to_json.rst", "api/generated/compas_timber.elements.Plate.to_jsonstring.rst", "api/generated/compas_timber.elements.Plate.transform.rst", "api/generated/compas_timber.elements.Plate.transformed.rst", "api/generated/compas_timber.elements.Plate.validate_data.rst", "api/generated/compas_timber.elements.PlateFastener.rst", "api/generated/compas_timber.elements.PlateFastener.ToString.rst", "api/generated/compas_timber.elements.PlateFastener.add_feature.rst", "api/generated/compas_timber.elements.PlateFastener.add_features.rst", "api/generated/compas_timber.elements.PlateFastener.compute_aabb.rst", "api/generated/compas_timber.elements.PlateFastener.compute_collision_mesh.rst", "api/generated/compas_timber.elements.PlateFastener.compute_geometry.rst", "api/generated/compas_timber.elements.PlateFastener.compute_obb.rst", "api/generated/compas_timber.elements.PlateFastener.compute_worldtransformation.rst", "api/generated/compas_timber.elements.PlateFastener.copy.rst", "api/generated/compas_timber.elements.PlateFastener.from_json.rst", "api/generated/compas_timber.elements.PlateFastener.from_jsonstring.rst", "api/generated/compas_timber.elements.PlateFastener.get_fastener_frames.rst", "api/generated/compas_timber.elements.PlateFastener.place_instances.rst", "api/generated/compas_timber.elements.PlateFastener.remove_blank_extension.rst", "api/generated/compas_timber.elements.PlateFastener.remove_features.rst", "api/generated/compas_timber.elements.PlateFastener.reset.rst", "api/generated/compas_timber.elements.PlateFastener.set_default.rst", "api/generated/compas_timber.elements.PlateFastener.sha256.rst", "api/generated/compas_timber.elements.PlateFastener.to_json.rst", "api/generated/compas_timber.elements.PlateFastener.to_jsonstring.rst", "api/generated/compas_timber.elements.PlateFastener.transform.rst", "api/generated/compas_timber.elements.PlateFastener.transformed.rst", "api/generated/compas_timber.elements.PlateFastener.validate_data.rst", "api/generated/compas_timber.elements.PlateFastener.validate_fastener_beam_compatibility.rst", "api/generated/compas_timber.elements.Slab.rst", "api/generated/compas_timber.elements.Slab.ToString.rst", "api/generated/compas_timber.elements.Slab.add_feature.rst", "api/generated/compas_timber.elements.Slab.add_features.rst", "api/generated/compas_timber.elements.Slab.compute_aabb.rst", "api/generated/compas_timber.elements.Slab.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Slab.compute_geometry.rst", "api/generated/compas_timber.elements.Slab.compute_obb.rst", "api/generated/compas_timber.elements.Slab.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Slab.copy.rst", "api/generated/compas_timber.elements.Slab.from_boundary.rst", "api/generated/compas_timber.elements.Slab.from_brep.rst", "api/generated/compas_timber.elements.Slab.from_json.rst", "api/generated/compas_timber.elements.Slab.from_jsonstring.rst", "api/generated/compas_timber.elements.Slab.remove_blank_extension.rst", "api/generated/compas_timber.elements.Slab.remove_features.rst", "api/generated/compas_timber.elements.Slab.reset.rst", "api/generated/compas_timber.elements.Slab.rotate.rst", "api/generated/compas_timber.elements.Slab.sha256.rst", "api/generated/compas_timber.elements.Slab.to_json.rst", "api/generated/compas_timber.elements.Slab.to_jsonstring.rst", "api/generated/compas_timber.elements.Slab.transform.rst", "api/generated/compas_timber.elements.Slab.transformed.rst", "api/generated/compas_timber.elements.Slab.validate_data.rst", "api/generated/compas_timber.elements.TimberElement.rst", "api/generated/compas_timber.elements.TimberElement.ToString.rst", "api/generated/compas_timber.elements.TimberElement.add_feature.rst", "api/generated/compas_timber.elements.TimberElement.add_features.rst", "api/generated/compas_timber.elements.TimberElement.compute_aabb.rst", "api/generated/compas_timber.elements.TimberElement.compute_collision_mesh.rst", "api/generated/compas_timber.elements.TimberElement.compute_geometry.rst", "api/generated/compas_timber.elements.TimberElement.compute_obb.rst", "api/generated/compas_timber.elements.TimberElement.compute_worldtransformation.rst", "api/generated/compas_timber.elements.TimberElement.copy.rst", "api/generated/compas_timber.elements.TimberElement.from_json.rst", "api/generated/compas_timber.elements.TimberElement.from_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.remove_blank_extension.rst", "api/generated/compas_timber.elements.TimberElement.remove_features.rst", "api/generated/compas_timber.elements.TimberElement.reset.rst", "api/generated/compas_timber.elements.TimberElement.sha256.rst", "api/generated/compas_timber.elements.TimberElement.to_json.rst", "api/generated/compas_timber.elements.TimberElement.to_jsonstring.rst", "api/generated/compas_timber.elements.TimberElement.transform.rst", "api/generated/compas_timber.elements.TimberElement.transformed.rst", "api/generated/compas_timber.elements.TimberElement.validate_data.rst", "api/generated/compas_timber.elements.Wall.rst", "api/generated/compas_timber.elements.Wall.ToString.rst", "api/generated/compas_timber.elements.Wall.add_feature.rst", "api/generated/compas_timber.elements.Wall.add_features.rst", "api/generated/compas_timber.elements.Wall.compute_aabb.rst", "api/generated/compas_timber.elements.Wall.compute_collision_mesh.rst", "api/generated/compas_timber.elements.Wall.compute_geometry.rst", "api/generated/compas_timber.elements.Wall.compute_obb.rst", "api/generated/compas_timber.elements.Wall.compute_worldtransformation.rst", "api/generated/compas_timber.elements.Wall.copy.rst", "api/generated/compas_timber.elements.Wall.from_boundary.rst", "api/generated/compas_timber.elements.Wall.from_brep.rst", "api/generated/compas_timber.elements.Wall.from_json.rst", "api/generated/compas_timber.elements.Wall.from_jsonstring.rst", "api/generated/compas_timber.elements.Wall.remove_blank_extension.rst", "api/generated/compas_timber.elements.Wall.remove_features.rst", "api/generated/compas_timber.elements.Wall.reset.rst", "api/generated/compas_timber.elements.Wall.rotate.rst", "api/generated/compas_timber.elements.Wall.sha256.rst", "api/generated/compas_timber.elements.Wall.to_json.rst", "api/generated/compas_timber.elements.Wall.to_jsonstring.rst", "api/generated/compas_timber.elements.Wall.transform.rst", "api/generated/compas_timber.elements.Wall.transformed.rst", "api/generated/compas_timber.elements.Wall.validate_data.rst", "api/generated/compas_timber.errors.BTLxProcessingError.rst", "api/generated/compas_timber.errors.BeamJoiningError.rst", "api/generated/compas_timber.errors.FastenerApplicationError.rst", "api/generated/compas_timber.errors.FeatureApplicationError.rst", "api/generated/compas_timber.fabrication.AlignmentType.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.ToString.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.copy.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.feature_from_element.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.from_json.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.from_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.sha256.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.to_json.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.to_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.transform.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.transformed.rst", "api/generated/compas_timber.fabrication.BTLxFromGeometryDefinition.validate_data.rst", "api/generated/compas_timber.fabrication.BTLxPart.rst", "api/generated/compas_timber.fabrication.BTLxPart.et_point_vals.rst", "api/generated/compas_timber.fabrication.BTLxPart.ref_side_from_face.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.ToString.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.add_subprocessing.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.copy.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.from_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.scaled.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.sha256.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_json.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.to_jsonstring.rst", "api/generated/compas_timber.fabrication.BTLxProcessing.validate_data.rst", "api/generated/compas_timber.fabrication.BTLxWriter.rst", "api/generated/compas_timber.fabrication.BTLxWriter.model_to_xml.rst", "api/generated/compas_timber.fabrication.BTLxWriter.register_type_serializer.rst", "api/generated/compas_timber.fabrication.BTLxWriter.write.rst", "api/generated/compas_timber.fabrication.Contour.rst", "api/generated/compas_timber.fabrication.Contour.ToString.rst", "api/generated/compas_timber.fabrication.Contour.copy.rst", "api/generated/compas_timber.fabrication.Contour.from_json.rst", "api/generated/compas_timber.fabrication.Contour.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Contour.scale.rst", "api/generated/compas_timber.fabrication.Contour.scaled.rst", "api/generated/compas_timber.fabrication.Contour.sha256.rst", "api/generated/compas_timber.fabrication.Contour.to_json.rst", "api/generated/compas_timber.fabrication.Contour.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Contour.validate_data.rst", "api/generated/compas_timber.fabrication.DoubleCut.rst", "api/generated/compas_timber.fabrication.DoubleCut.ToString.rst", "api/generated/compas_timber.fabrication.DoubleCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DoubleCut.apply.rst", "api/generated/compas_timber.fabrication.DoubleCut.copy.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_planes_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.DoubleCut.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DoubleCut.scale.rst", "api/generated/compas_timber.fabrication.DoubleCut.scaled.rst", "api/generated/compas_timber.fabrication.DoubleCut.sha256.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_json.rst", "api/generated/compas_timber.fabrication.DoubleCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DoubleCut.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailMortise.rst", "api/generated/compas_timber.fabrication.DovetailMortise.ToString.rst", "api/generated/compas_timber.fabrication.DovetailMortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailMortise.apply.rst", "api/generated/compas_timber.fabrication.DovetailMortise.copy.rst", "api/generated/compas_timber.fabrication.DovetailMortise.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scale.rst", "api/generated/compas_timber.fabrication.DovetailMortise.scaled.rst", "api/generated/compas_timber.fabrication.DovetailMortise.sha256.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_json.rst", "api/generated/compas_timber.fabrication.DovetailMortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailMortise.validate_data.rst", "api/generated/compas_timber.fabrication.DovetailTenon.rst", "api/generated/compas_timber.fabrication.DovetailTenon.ToString.rst", "api/generated/compas_timber.fabrication.DovetailTenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.DovetailTenon.apply.rst", "api/generated/compas_timber.fabrication.DovetailTenon.copy.rst", "api/generated/compas_timber.fabrication.DovetailTenon.define_dovetail_tool.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scale.rst", "api/generated/compas_timber.fabrication.DovetailTenon.scaled.rst", "api/generated/compas_timber.fabrication.DovetailTenon.sha256.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_json.rst", "api/generated/compas_timber.fabrication.DovetailTenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DovetailTenon.validate_data.rst", "api/generated/compas_timber.fabrication.Drilling.rst", "api/generated/compas_timber.fabrication.Drilling.ToString.rst", "api/generated/compas_timber.fabrication.Drilling.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Drilling.apply.rst", "api/generated/compas_timber.fabrication.Drilling.copy.rst", "api/generated/compas_timber.fabrication.Drilling.cylinder_from_params_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_json.rst", "api/generated/compas_timber.fabrication.Drilling.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.from_line_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Drilling.scale.rst", "api/generated/compas_timber.fabrication.Drilling.scaled.rst", "api/generated/compas_timber.fabrication.Drilling.sha256.rst", "api/generated/compas_timber.fabrication.Drilling.to_json.rst", "api/generated/compas_timber.fabrication.Drilling.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Drilling.validate_data.rst", "api/generated/compas_timber.fabrication.DualContour.rst", "api/generated/compas_timber.fabrication.DualContour.ToString.rst", "api/generated/compas_timber.fabrication.DualContour.copy.rst", "api/generated/compas_timber.fabrication.DualContour.from_json.rst", "api/generated/compas_timber.fabrication.DualContour.from_jsonstring.rst", "api/generated/compas_timber.fabrication.DualContour.scale.rst", "api/generated/compas_timber.fabrication.DualContour.scaled.rst", "api/generated/compas_timber.fabrication.DualContour.sha256.rst", "api/generated/compas_timber.fabrication.DualContour.to_json.rst", "api/generated/compas_timber.fabrication.DualContour.to_jsonstring.rst", "api/generated/compas_timber.fabrication.DualContour.validate_data.rst", "api/generated/compas_timber.fabrication.EdgePositionType.rst", "api/generated/compas_timber.fabrication.FreeContour.rst", "api/generated/compas_timber.fabrication.FreeContour.ToString.rst", "api/generated/compas_timber.fabrication.FreeContour.add_subprocessing.rst", "api/generated/compas_timber.fabrication.FreeContour.apply.rst", "api/generated/compas_timber.fabrication.FreeContour.are_all_segments_parallel.rst", "api/generated/compas_timber.fabrication.FreeContour.copy.rst", "api/generated/compas_timber.fabrication.FreeContour.from_json.rst", "api/generated/compas_timber.fabrication.FreeContour.from_jsonstring.rst", "api/generated/compas_timber.fabrication.FreeContour.from_polyline_and_element.rst", "api/generated/compas_timber.fabrication.FreeContour.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.FreeContour.from_top_bottom_and_elements.rst", "api/generated/compas_timber.fabrication.FreeContour.get_ref_face_index.rst", "api/generated/compas_timber.fabrication.FreeContour.parse_tool_position.rst", "api/generated/compas_timber.fabrication.FreeContour.scale.rst", "api/generated/compas_timber.fabrication.FreeContour.scaled.rst", "api/generated/compas_timber.fabrication.FreeContour.sha256.rst", "api/generated/compas_timber.fabrication.FreeContour.to_json.rst", "api/generated/compas_timber.fabrication.FreeContour.to_jsonstring.rst", "api/generated/compas_timber.fabrication.FreeContour.validate_data.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.ToString.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.apply.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.copy.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scale.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.scaled.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.sha256.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_json.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.FrenchRidgeLap.validate_data.rst", "api/generated/compas_timber.fabrication.JackRafterCut.rst", "api/generated/compas_timber.fabrication.JackRafterCut.ToString.rst", "api/generated/compas_timber.fabrication.JackRafterCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.JackRafterCut.apply.rst", "api/generated/compas_timber.fabrication.JackRafterCut.copy.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scale.rst", "api/generated/compas_timber.fabrication.JackRafterCut.scaled.rst", "api/generated/compas_timber.fabrication.JackRafterCut.sha256.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_json.rst", "api/generated/compas_timber.fabrication.JackRafterCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.JackRafterCut.validate_data.rst", "api/generated/compas_timber.fabrication.JackRafterCutProxy.rst", "api/generated/compas_timber.fabrication.JackRafterCutProxy.apply.rst", "api/generated/compas_timber.fabrication.JackRafterCutProxy.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.JackRafterCutProxy.unproxified.rst", "api/generated/compas_timber.fabrication.Lap.rst", "api/generated/compas_timber.fabrication.Lap.ToString.rst", "api/generated/compas_timber.fabrication.Lap.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Lap.apply.rst", "api/generated/compas_timber.fabrication.Lap.copy.rst", "api/generated/compas_timber.fabrication.Lap.from_json.rst", "api/generated/compas_timber.fabrication.Lap.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Lap.from_volume_and_beam.rst", "api/generated/compas_timber.fabrication.Lap.scale.rst", "api/generated/compas_timber.fabrication.Lap.scaled.rst", "api/generated/compas_timber.fabrication.Lap.sha256.rst", "api/generated/compas_timber.fabrication.Lap.to_json.rst", "api/generated/compas_timber.fabrication.Lap.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Lap.validate_data.rst", "api/generated/compas_timber.fabrication.Lap.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LapProxy.rst", "api/generated/compas_timber.fabrication.LapProxy.apply.rst", "api/generated/compas_timber.fabrication.LapProxy.from_volume_and_beam.rst", "api/generated/compas_timber.fabrication.LapProxy.unproxified.rst", "api/generated/compas_timber.fabrication.LimitationTopType.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.ToString.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.add_subprocessing.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.apply.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.copy.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.scaled.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.sha256.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_json.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.to_jsonstring.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.validate_data.rst", "api/generated/compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.MachiningLimits.rst", "api/generated/compas_timber.fabrication.Mortise.rst", "api/generated/compas_timber.fabrication.Mortise.ToString.rst", "api/generated/compas_timber.fabrication.Mortise.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Mortise.apply.rst", "api/generated/compas_timber.fabrication.Mortise.copy.rst", "api/generated/compas_timber.fabrication.Mortise.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_frame_and_beam.rst", "api/generated/compas_timber.fabrication.Mortise.from_json.rst", "api/generated/compas_timber.fabrication.Mortise.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.scale.rst", "api/generated/compas_timber.fabrication.Mortise.scaled.rst", "api/generated/compas_timber.fabrication.Mortise.sha256.rst", "api/generated/compas_timber.fabrication.Mortise.to_json.rst", "api/generated/compas_timber.fabrication.Mortise.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Mortise.validate_data.rst", "api/generated/compas_timber.fabrication.Mortise.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.OrientationType.rst", "api/generated/compas_timber.fabrication.Pocket.rst", "api/generated/compas_timber.fabrication.Pocket.ToString.rst", "api/generated/compas_timber.fabrication.Pocket.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Pocket.apply.rst", "api/generated/compas_timber.fabrication.Pocket.copy.rst", "api/generated/compas_timber.fabrication.Pocket.from_json.rst", "api/generated/compas_timber.fabrication.Pocket.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.from_shapes_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.from_volume_and_element.rst", "api/generated/compas_timber.fabrication.Pocket.scale.rst", "api/generated/compas_timber.fabrication.Pocket.scaled.rst", "api/generated/compas_timber.fabrication.Pocket.sha256.rst", "api/generated/compas_timber.fabrication.Pocket.to_json.rst", "api/generated/compas_timber.fabrication.Pocket.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Pocket.validate_data.rst", "api/generated/compas_timber.fabrication.Pocket.volume_from_params_and_element.rst", "api/generated/compas_timber.fabrication.PocketProxy.rst", "api/generated/compas_timber.fabrication.PocketProxy.apply.rst", "api/generated/compas_timber.fabrication.PocketProxy.from_volume_and_element.rst", "api/generated/compas_timber.fabrication.PocketProxy.unproxified.rst", "api/generated/compas_timber.fabrication.Slot.rst", "api/generated/compas_timber.fabrication.Slot.ToString.rst", "api/generated/compas_timber.fabrication.Slot.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Slot.apply.rst", "api/generated/compas_timber.fabrication.Slot.copy.rst", "api/generated/compas_timber.fabrication.Slot.from_json.rst", "api/generated/compas_timber.fabrication.Slot.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Slot.scale.rst", "api/generated/compas_timber.fabrication.Slot.scaled.rst", "api/generated/compas_timber.fabrication.Slot.sha256.rst", "api/generated/compas_timber.fabrication.Slot.to_json.rst", "api/generated/compas_timber.fabrication.Slot.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Slot.validate_data.rst", "api/generated/compas_timber.fabrication.StepJoint.rst", "api/generated/compas_timber.fabrication.StepJoint.ToString.rst", "api/generated/compas_timber.fabrication.StepJoint.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJoint.add_tenon.rst", "api/generated/compas_timber.fabrication.StepJoint.apply.rst", "api/generated/compas_timber.fabrication.StepJoint.copy.rst", "api/generated/compas_timber.fabrication.StepJoint.from_json.rst", "api/generated/compas_timber.fabrication.StepJoint.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.scale.rst", "api/generated/compas_timber.fabrication.StepJoint.scaled.rst", "api/generated/compas_timber.fabrication.StepJoint.sha256.rst", "api/generated/compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJoint.to_json.rst", "api/generated/compas_timber.fabrication.StepJoint.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJoint.validate_data.rst", "api/generated/compas_timber.fabrication.StepJointNotch.rst", "api/generated/compas_timber.fabrication.StepJointNotch.ToString.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_mortise.rst", "api/generated/compas_timber.fabrication.StepJointNotch.add_subprocessing.rst", "api/generated/compas_timber.fabrication.StepJointNotch.apply.rst", "api/generated/compas_timber.fabrication.StepJointNotch.copy.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scale.rst", "api/generated/compas_timber.fabrication.StepJointNotch.scaled.rst", "api/generated/compas_timber.fabrication.StepJointNotch.sha256.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_json.rst", "api/generated/compas_timber.fabrication.StepJointNotch.to_jsonstring.rst", "api/generated/compas_timber.fabrication.StepJointNotch.validate_data.rst", "api/generated/compas_timber.fabrication.StepShapeType.rst", "api/generated/compas_timber.fabrication.Tenon.rst", "api/generated/compas_timber.fabrication.Tenon.ToString.rst", "api/generated/compas_timber.fabrication.Tenon.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Tenon.apply.rst", "api/generated/compas_timber.fabrication.Tenon.copy.rst", "api/generated/compas_timber.fabrication.Tenon.frame_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.from_json.rst", "api/generated/compas_timber.fabrication.Tenon.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.from_plane_and_beam.rst", "api/generated/compas_timber.fabrication.Tenon.scale.rst", "api/generated/compas_timber.fabrication.Tenon.scaled.rst", "api/generated/compas_timber.fabrication.Tenon.sha256.rst", "api/generated/compas_timber.fabrication.Tenon.to_json.rst", "api/generated/compas_timber.fabrication.Tenon.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Tenon.validate_data.rst", "api/generated/compas_timber.fabrication.Tenon.volume_from_params_and_beam.rst", "api/generated/compas_timber.fabrication.TenonShapeType.rst", "api/generated/compas_timber.fabrication.Text.rst", "api/generated/compas_timber.fabrication.Text.ToString.rst", "api/generated/compas_timber.fabrication.Text.add_subprocessing.rst", "api/generated/compas_timber.fabrication.Text.apply.rst", "api/generated/compas_timber.fabrication.Text.copy.rst", "api/generated/compas_timber.fabrication.Text.create_text_curves_for_element.rst", "api/generated/compas_timber.fabrication.Text.from_json.rst", "api/generated/compas_timber.fabrication.Text.from_jsonstring.rst", "api/generated/compas_timber.fabrication.Text.scale.rst", "api/generated/compas_timber.fabrication.Text.scaled.rst", "api/generated/compas_timber.fabrication.Text.sha256.rst", "api/generated/compas_timber.fabrication.Text.to_json.rst", "api/generated/compas_timber.fabrication.Text.to_jsonstring.rst", "api/generated/compas_timber.fabrication.Text.validate_data.rst", "api/generated/compas_timber.ghpython.add_gh_param.rst", "api/generated/compas_timber.ghpython.clear_gh_params.rst", "api/generated/compas_timber.ghpython.get_leaf_subclasses.rst", "api/generated/compas_timber.ghpython.item_input_valid.rst", "api/generated/compas_timber.ghpython.list_input_valid.rst", "api/generated/compas_timber.ghpython.manage_dynamic_params.rst", "api/generated/compas_timber.ghpython.rename_gh_input.rst", "api/generated/compas_timber.model.TimberModel.rst", "api/generated/compas_timber.model.TimberModel.ToString.rst", "api/generated/compas_timber.model.TimberModel.add_element.rst", "api/generated/compas_timber.model.TimberModel.add_elements.rst", "api/generated/compas_timber.model.TimberModel.add_group.rst", "api/generated/compas_timber.model.TimberModel.add_group_element.rst", "api/generated/compas_timber.model.TimberModel.add_interaction.rst", "api/generated/compas_timber.model.TimberModel.add_joint.rst", "api/generated/compas_timber.model.TimberModel.add_joint_candidate.rst", "api/generated/compas_timber.model.TimberModel.add_material.rst", "api/generated/compas_timber.model.TimberModel.assign_material.rst", "api/generated/compas_timber.model.TimberModel.compute_aabb.rst", "api/generated/compas_timber.model.TimberModel.compute_obb.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_beams.rst", "api/generated/compas_timber.model.TimberModel.connect_adjacent_walls.rst", "api/generated/compas_timber.model.TimberModel.copy.rst", "api/generated/compas_timber.model.TimberModel.element_by_guid.rst", "api/generated/compas_timber.model.TimberModel.elements.rst", "api/generated/compas_timber.model.TimberModel.elements_connected_by.rst", "api/generated/compas_timber.model.TimberModel.from_json.rst", "api/generated/compas_timber.model.TimberModel.from_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.get_elements_in_group.rst", "api/generated/compas_timber.model.TimberModel.get_interactions_for_element.rst", "api/generated/compas_timber.model.TimberModel.has_element.rst", "api/generated/compas_timber.model.TimberModel.has_group.rst", "api/generated/compas_timber.model.TimberModel.has_interaction.rst", "api/generated/compas_timber.model.TimberModel.has_material.rst", "api/generated/compas_timber.model.TimberModel.interactions.rst", "api/generated/compas_timber.model.TimberModel.materials.rst", "api/generated/compas_timber.model.TimberModel.process_joinery.rst", "api/generated/compas_timber.model.TimberModel.remove_element.rst", "api/generated/compas_timber.model.TimberModel.remove_interaction.rst", "api/generated/compas_timber.model.TimberModel.remove_joint.rst", "api/generated/compas_timber.model.TimberModel.remove_joint_candidate.rst", "api/generated/compas_timber.model.TimberModel.rotate.rst", "api/generated/compas_timber.model.TimberModel.rotated.rst", "api/generated/compas_timber.model.TimberModel.scale.rst", "api/generated/compas_timber.model.TimberModel.scaled.rst", "api/generated/compas_timber.model.TimberModel.set_topologies.rst", "api/generated/compas_timber.model.TimberModel.sha256.rst", "api/generated/compas_timber.model.TimberModel.to_json.rst", "api/generated/compas_timber.model.TimberModel.to_jsonstring.rst", "api/generated/compas_timber.model.TimberModel.transform.rst", "api/generated/compas_timber.model.TimberModel.transform_numpy.rst", "api/generated/compas_timber.model.TimberModel.transformed.rst", "api/generated/compas_timber.model.TimberModel.transformed_numpy.rst", "api/generated/compas_timber.model.TimberModel.translate.rst", "api/generated/compas_timber.model.TimberModel.translated.rst", "api/generated/compas_timber.model.TimberModel.validate_data.rst", "api/generated/compas_timber.planning.Actor.rst", "api/generated/compas_timber.planning.Actor.get_name.rst", "api/generated/compas_timber.planning.BuildingPlan.rst", "api/generated/compas_timber.planning.BuildingPlan.ToString.rst", "api/generated/compas_timber.planning.BuildingPlan.add_step.rst", "api/generated/compas_timber.planning.BuildingPlan.copy.rst", "api/generated/compas_timber.planning.BuildingPlan.from_json.rst", "api/generated/compas_timber.planning.BuildingPlan.from_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.sha256.rst", "api/generated/compas_timber.planning.BuildingPlan.to_json.rst", "api/generated/compas_timber.planning.BuildingPlan.to_jsonstring.rst", "api/generated/compas_timber.planning.BuildingPlan.validate_data.rst", "api/generated/compas_timber.planning.BuildingPlanParser.rst", "api/generated/compas_timber.planning.BuildingPlanParser.parse.rst", "api/generated/compas_timber.planning.BuildingPlanParser.serialize.rst", "api/generated/compas_timber.planning.Instruction.rst", "api/generated/compas_timber.planning.Instruction.ToString.rst", "api/generated/compas_timber.planning.Instruction.copy.rst", "api/generated/compas_timber.planning.Instruction.from_json.rst", "api/generated/compas_timber.planning.Instruction.from_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.sha256.rst", "api/generated/compas_timber.planning.Instruction.to_json.rst", "api/generated/compas_timber.planning.Instruction.to_jsonstring.rst", "api/generated/compas_timber.planning.Instruction.transform.rst", "api/generated/compas_timber.planning.Instruction.validate_data.rst", "api/generated/compas_timber.planning.LinearDimension.rst", "api/generated/compas_timber.planning.LinearDimension.ToString.rst", "api/generated/compas_timber.planning.LinearDimension.copy.rst", "api/generated/compas_timber.planning.LinearDimension.from_json.rst", "api/generated/compas_timber.planning.LinearDimension.from_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.sha256.rst", "api/generated/compas_timber.planning.LinearDimension.to_json.rst", "api/generated/compas_timber.planning.LinearDimension.to_jsonstring.rst", "api/generated/compas_timber.planning.LinearDimension.transform.rst", "api/generated/compas_timber.planning.LinearDimension.validate_data.rst", "api/generated/compas_timber.planning.Model3d.rst", "api/generated/compas_timber.planning.Model3d.ToString.rst", "api/generated/compas_timber.planning.Model3d.copy.rst", "api/generated/compas_timber.planning.Model3d.from_json.rst", "api/generated/compas_timber.planning.Model3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.sha256.rst", "api/generated/compas_timber.planning.Model3d.to_json.rst", "api/generated/compas_timber.planning.Model3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Model3d.transform.rst", "api/generated/compas_timber.planning.Model3d.validate_data.rst", "api/generated/compas_timber.planning.SimpleSequenceGenerator.rst", "api/generated/compas_timber.planning.Step.rst", "api/generated/compas_timber.planning.Step.ToString.rst", "api/generated/compas_timber.planning.Step.copy.rst", "api/generated/compas_timber.planning.Step.from_json.rst", "api/generated/compas_timber.planning.Step.from_jsonstring.rst", "api/generated/compas_timber.planning.Step.sha256.rst", "api/generated/compas_timber.planning.Step.to_json.rst", "api/generated/compas_timber.planning.Step.to_jsonstring.rst", "api/generated/compas_timber.planning.Step.transform.rst", "api/generated/compas_timber.planning.Step.validate_data.rst", "api/generated/compas_timber.planning.Text3d.rst", "api/generated/compas_timber.planning.Text3d.ToString.rst", "api/generated/compas_timber.planning.Text3d.copy.rst", "api/generated/compas_timber.planning.Text3d.from_json.rst", "api/generated/compas_timber.planning.Text3d.from_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.sha256.rst", "api/generated/compas_timber.planning.Text3d.to_json.rst", "api/generated/compas_timber.planning.Text3d.to_jsonstring.rst", "api/generated/compas_timber.planning.Text3d.transform.rst", "api/generated/compas_timber.planning.Text3d.validate_data.rst", "api/generated/compas_timber.rhino.find_neighboring_elements.rst", "citing.rst", "contribution.rst", "contribution/BTLx_contribution_guide.rst", "contribution/class_diagrams.rst", "contribution/joints_contribution_guide.rst", "index.rst", "installation.rst", "license.rst", "tutorials.rst", "tutorials/grasshopper/attributes.rst", "tutorials/grasshopper/beams.rst", "tutorials/grasshopper/design.rst", "tutorials/grasshopper/examples.rst", "tutorials/grasshopper/fabrication.rst", "tutorials/grasshopper/features.rst", "tutorials/grasshopper/installation.rst", "tutorials/grasshopper/joint_rules.rst", "tutorials/grasshopper/model.rst", "tutorials/grasshopper/show.rst", "tutorials/grasshopper/utils.rst", "tutorials/grasshopper/workflow.rst"], "titles": ["API Reference", "compas_timber.connections", "compas_timber.design", "compas_timber.elements", "compas_timber.errors", "compas_timber.fabrication", "compas_timber.ghpython", "compas_timber.model", "compas_timber.planning", "compas_timber.rhino", "BallNodeJoint", "BallNodeJoint.ToString", "BallNodeJoint.add_extensions", "BallNodeJoint.add_features", "BallNodeJoint.check_elements_compatibility", "BallNodeJoint.copy", "BallNodeJoint.create", "BallNodeJoint.element_count_complies", "BallNodeJoint.from_json", "BallNodeJoint.from_jsonstring", "BallNodeJoint.promote_cluster", "BallNodeJoint.promote_joint_candidate", "BallNodeJoint.restore_beams_from_keys", "BallNodeJoint.sha256", "BallNodeJoint.to_json", "BallNodeJoint.to_jsonstring", "BallNodeJoint.validate_data", "BeamGroupAnalyzer", "BeamGroupAnalyzer.find", "ButtJoint", "ButtJoint.ToString", "ButtJoint.add_extensions", "ButtJoint.add_features", "ButtJoint.check_elements_compatibility", "ButtJoint.copy", "ButtJoint.create", "ButtJoint.element_count_complies", "ButtJoint.from_json", "ButtJoint.from_jsonstring", "ButtJoint.promote_cluster", "ButtJoint.promote_joint_candidate", "ButtJoint.restore_beams_from_keys", "ButtJoint.sha256", "ButtJoint.to_json", "ButtJoint.to_jsonstring", "ButtJoint.validate_data", "Cluster", "CompositeAnalyzer", "CompositeAnalyzer.find", "CompositeAnalyzer.from_model", "ConnectionSolver", "ConnectionSolver.find_intersecting_pairs", "ConnectionSolver.find_topology", "ConnectionSolver.find_wall_wall_topology", "InterfaceLocation", "InterfaceRole", "Joint", "Joint.ToString", "Joint.add_extensions", "Joint.add_features", "Joint.check_elements_compatibility", "Joint.copy", "Joint.create", "Joint.element_count_complies", "Joint.from_json", "Joint.from_jsonstring", "Joint.promote_cluster", "Joint.promote_joint_candidate", "Joint.restore_beams_from_keys", "Joint.sha256", "Joint.to_json", "Joint.to_jsonstring", "Joint.validate_data", "JointCandidate", "JointCandidate.ToString", "JointCandidate.add_extensions", "JointCandidate.add_features", "JointCandidate.check_elements_compatibility", "JointCandidate.copy", "JointCandidate.create", "JointCandidate.element_count_complies", "JointCandidate.from_json", "JointCandidate.from_jsonstring", "JointCandidate.promote_cluster", "JointCandidate.promote_joint_candidate", "JointCandidate.restore_beams_from_keys", "JointCandidate.sha256", "JointCandidate.to_json", "JointCandidate.to_jsonstring", "JointCandidate.validate_data", "JointTopology", "JointTopology.get_name", "LButtJoint", "LButtJoint.ToString", "LButtJoint.add_extensions", "LButtJoint.add_features", "LButtJoint.check_elements_compatibility", "LButtJoint.copy", "LButtJoint.create", "LButtJoint.element_count_complies", "LButtJoint.from_json", "LButtJoint.from_jsonstring", "LButtJoint.promote_cluster", "LButtJoint.promote_joint_candidate", "LButtJoint.restore_beams_from_keys", "LButtJoint.sha256", "LButtJoint.to_json", "LButtJoint.to_jsonstring", "LButtJoint.update_beam_roles", "LButtJoint.validate_data", "LFrenchRidgeLapJoint", "LFrenchRidgeLapJoint.ToString", "LFrenchRidgeLapJoint.add_extensions", "LFrenchRidgeLapJoint.add_features", "LFrenchRidgeLapJoint.check_elements_compatibility", "LFrenchRidgeLapJoint.copy", "LFrenchRidgeLapJoint.create", "LFrenchRidgeLapJoint.element_count_complies", "LFrenchRidgeLapJoint.from_json", "LFrenchRidgeLapJoint.from_jsonstring", "LFrenchRidgeLapJoint.promote_cluster", "LFrenchRidgeLapJoint.promote_joint_candidate", "LFrenchRidgeLapJoint.restore_beams_from_keys", "LFrenchRidgeLapJoint.sha256", "LFrenchRidgeLapJoint.to_json", "LFrenchRidgeLapJoint.to_jsonstring", "LFrenchRidgeLapJoint.validate_data", "LLapJoint", "LLapJoint.ToString", "LLapJoint.add_extensions", "LLapJoint.add_features", "LLapJoint.check_elements_compatibility", "LLapJoint.copy", "LLapJoint.create", "LLapJoint.element_count_complies", "LLapJoint.from_json", "LLapJoint.from_jsonstring", "LLapJoint.promote_cluster", "LLapJoint.promote_joint_candidate", "LLapJoint.restore_beams_from_keys", "LLapJoint.sha256", "LLapJoint.to_json", "LLapJoint.to_jsonstring", "LLapJoint.validate_data", "LMiterJoint", "LMiterJoint.ToString", "LMiterJoint.add_extensions", "LMiterJoint.add_features", "LMiterJoint.check_elements_compatibility", "LMiterJoint.copy", "LMiterJoint.create", "LMiterJoint.element_count_complies", "LMiterJoint.from_json", "LMiterJoint.from_jsonstring", "LMiterJoint.get_cutoff_plane", "LMiterJoint.get_cutting_planes", "LMiterJoint.promote_cluster", "LMiterJoint.promote_joint_candidate", "LMiterJoint.restore_beams_from_keys", "LMiterJoint.sha256", "LMiterJoint.to_json", "LMiterJoint.to_jsonstring", "LMiterJoint.validate_data", "LapJoint", "LapJoint.ToString", "LapJoint.add_extensions", "LapJoint.add_features", "LapJoint.check_elements_compatibility", "LapJoint.copy", "LapJoint.create", "LapJoint.element_count_complies", "LapJoint.from_json", "LapJoint.from_jsonstring", "LapJoint.promote_cluster", "LapJoint.promote_joint_candidate", "LapJoint.restore_beams_from_keys", "LapJoint.sha256", "LapJoint.to_json", "LapJoint.to_jsonstring", "LapJoint.validate_data", "MaxNCompositeAnalyzer", "NBeamKDTreeAnalyzer", "NBeamKDTreeAnalyzer.find", "PlateButtJoint", "PlateButtJoint.ToString", "PlateButtJoint.add_extensions", "PlateButtJoint.add_features", "PlateButtJoint.calculate_topology", "PlateButtJoint.check_elements_compatibility", "PlateButtJoint.copy", "PlateButtJoint.create", "PlateButtJoint.element_count_complies", "PlateButtJoint.flip_roles", "PlateButtJoint.from_json", "PlateButtJoint.from_jsonstring", "PlateButtJoint.get_interface_for_plate", "PlateButtJoint.promote_cluster", "PlateButtJoint.promote_joint_candidate", "PlateButtJoint.reorder_planes_and_outlines", "PlateButtJoint.restore_beams_from_keys", "PlateButtJoint.restore_plates_from_keys", "PlateButtJoint.sha256", "PlateButtJoint.to_json", "PlateButtJoint.to_jsonstring", "PlateButtJoint.validate_data", "PlateConnectionSolver", "PlateConnectionSolver.do_segments_overlap", "PlateConnectionSolver.does_segment_intersect_outline", "PlateConnectionSolver.find_intersecting_pairs", "PlateConnectionSolver.find_topology", "PlateConnectionSolver.find_wall_wall_topology", "PlateJoint", "PlateJoint.ToString", "PlateJoint.add_extensions", "PlateJoint.add_features", "PlateJoint.calculate_topology", "PlateJoint.check_elements_compatibility", "PlateJoint.copy", "PlateJoint.create", "PlateJoint.element_count_complies", "PlateJoint.flip_roles", "PlateJoint.from_json", "PlateJoint.from_jsonstring", "PlateJoint.get_interface_for_plate", "PlateJoint.promote_cluster", "PlateJoint.promote_joint_candidate", "PlateJoint.reorder_planes_and_outlines", "PlateJoint.restore_beams_from_keys", "PlateJoint.restore_plates_from_keys", "PlateJoint.sha256", "PlateJoint.to_json", "PlateJoint.to_jsonstring", "PlateJoint.validate_data", "PlateLButtJoint", "PlateLButtJoint.ToString", "PlateLButtJoint.add_extensions", "PlateLButtJoint.add_features", "PlateLButtJoint.calculate_topology", "PlateLButtJoint.check_elements_compatibility", "PlateLButtJoint.copy", "PlateLButtJoint.create", "PlateLButtJoint.element_count_complies", "PlateLButtJoint.flip_roles", "PlateLButtJoint.from_json", "PlateLButtJoint.from_jsonstring", "PlateLButtJoint.get_interface_for_plate", "PlateLButtJoint.promote_cluster", "PlateLButtJoint.promote_joint_candidate", "PlateLButtJoint.reorder_planes_and_outlines", "PlateLButtJoint.restore_beams_from_keys", "PlateLButtJoint.restore_plates_from_keys", "PlateLButtJoint.sha256", "PlateLButtJoint.to_json", "PlateLButtJoint.to_jsonstring", "PlateLButtJoint.validate_data", "PlateMiterJoint", "PlateMiterJoint.ToString", "PlateMiterJoint.add_extensions", "PlateMiterJoint.add_features", "PlateMiterJoint.calculate_topology", "PlateMiterJoint.check_elements_compatibility", "PlateMiterJoint.copy", "PlateMiterJoint.create", "PlateMiterJoint.element_count_complies", "PlateMiterJoint.flip_roles", "PlateMiterJoint.from_json", "PlateMiterJoint.from_jsonstring", "PlateMiterJoint.get_interface_for_plate", "PlateMiterJoint.promote_cluster", "PlateMiterJoint.promote_joint_candidate", "PlateMiterJoint.reorder_planes_and_outlines", "PlateMiterJoint.restore_beams_from_keys", "PlateMiterJoint.restore_plates_from_keys", "PlateMiterJoint.sha256", "PlateMiterJoint.to_json", "PlateMiterJoint.to_jsonstring", "PlateMiterJoint.validate_data", "PlateTButtJoint", "PlateTButtJoint.ToString", "PlateTButtJoint.add_extensions", "PlateTButtJoint.add_features", "PlateTButtJoint.calculate_topology", "PlateTButtJoint.check_elements_compatibility", "PlateTButtJoint.copy", "PlateTButtJoint.create", "PlateTButtJoint.element_count_complies", "PlateTButtJoint.flip_roles", "PlateTButtJoint.from_json", "PlateTButtJoint.from_jsonstring", "PlateTButtJoint.get_interface_for_plate", "PlateTButtJoint.promote_cluster", "PlateTButtJoint.promote_joint_candidate", "PlateTButtJoint.reorder_planes_and_outlines", "PlateTButtJoint.restore_beams_from_keys", "PlateTButtJoint.restore_plates_from_keys", "PlateTButtJoint.sha256", "PlateTButtJoint.to_json", "PlateTButtJoint.to_jsonstring", "PlateTButtJoint.validate_data", "PlateToPlateInterface", "PlateToPlateInterface.as_plane", "QuadAnalyzer", "TBirdsmouthJoint", "TBirdsmouthJoint.ToString", "TBirdsmouthJoint.add_extensions", "TBirdsmouthJoint.add_features", "TBirdsmouthJoint.check_elements_compatibility", "TBirdsmouthJoint.copy", "TBirdsmouthJoint.create", "TBirdsmouthJoint.element_count_complies", "TBirdsmouthJoint.from_json", "TBirdsmouthJoint.from_jsonstring", "TBirdsmouthJoint.promote_cluster", "TBirdsmouthJoint.promote_joint_candidate", "TBirdsmouthJoint.restore_beams_from_keys", "TBirdsmouthJoint.sha256", "TBirdsmouthJoint.to_json", "TBirdsmouthJoint.to_jsonstring", "TBirdsmouthJoint.validate_data", "TButtJoint", "TButtJoint.ToString", "TButtJoint.add_extensions", "TButtJoint.add_features", "TButtJoint.check_elements_compatibility", "TButtJoint.copy", "TButtJoint.create", "TButtJoint.element_count_complies", "TButtJoint.from_json", "TButtJoint.from_jsonstring", "TButtJoint.promote_cluster", "TButtJoint.promote_joint_candidate", "TButtJoint.restore_beams_from_keys", "TButtJoint.sha256", "TButtJoint.to_json", "TButtJoint.to_jsonstring", "TButtJoint.validate_data", "TDovetailJoint", "TDovetailJoint.ToString", "TDovetailJoint.add_extensions", "TDovetailJoint.add_features", "TDovetailJoint.check_elements_compatibility", "TDovetailJoint.copy", "TDovetailJoint.create", "TDovetailJoint.define_dovetail_tool", "TDovetailJoint.element_count_complies", "TDovetailJoint.from_json", "TDovetailJoint.from_jsonstring", "TDovetailJoint.promote_cluster", "TDovetailJoint.promote_joint_candidate", "TDovetailJoint.restore_beams_from_keys", "TDovetailJoint.sha256", "TDovetailJoint.to_json", "TDovetailJoint.to_jsonstring", "TDovetailJoint.validate_data", "TLapJoint", "TLapJoint.ToString", "TLapJoint.add_extensions", "TLapJoint.add_features", "TLapJoint.check_elements_compatibility", "TLapJoint.copy", "TLapJoint.create", "TLapJoint.element_count_complies", "TLapJoint.from_json", "TLapJoint.from_jsonstring", "TLapJoint.promote_cluster", "TLapJoint.promote_joint_candidate", "TLapJoint.restore_beams_from_keys", "TLapJoint.sha256", "TLapJoint.to_json", "TLapJoint.to_jsonstring", "TLapJoint.validate_data", "TOliGinaJoint", "TOliGinaJoint.ToString", "TOliGinaJoint.add_extensions", "TOliGinaJoint.add_features", "TOliGinaJoint.check_elements_compatibility", "TOliGinaJoint.copy", "TOliGinaJoint.create", "TOliGinaJoint.element_count_complies", "TOliGinaJoint.from_json", "TOliGinaJoint.from_jsonstring", "TOliGinaJoint.promote_cluster", "TOliGinaJoint.promote_joint_candidate", "TOliGinaJoint.restore_beams_from_keys", "TOliGinaJoint.sha256", "TOliGinaJoint.to_json", "TOliGinaJoint.to_jsonstring", "TOliGinaJoint.validate_data", "TStepJoint", "TStepJoint.ToString", "TStepJoint.add_extensions", "TStepJoint.add_features", "TStepJoint.check_elements_compatibility", "TStepJoint.copy", "TStepJoint.create", "TStepJoint.element_count_complies", "TStepJoint.from_json", "TStepJoint.from_jsonstring", "TStepJoint.promote_cluster", "TStepJoint.promote_joint_candidate", "TStepJoint.restore_beams_from_keys", "TStepJoint.set_step_depths", "TStepJoint.sha256", "TStepJoint.to_json", "TStepJoint.to_jsonstring", "TStepJoint.validate_data", "TenonMortiseJoint", "TenonMortiseJoint.ToString", "TenonMortiseJoint.add_extensions", "TenonMortiseJoint.add_features", "TenonMortiseJoint.check_elements_compatibility", "TenonMortiseJoint.copy", "TenonMortiseJoint.create", "TenonMortiseJoint.element_count_complies", "TenonMortiseJoint.from_json", "TenonMortiseJoint.from_jsonstring", "TenonMortiseJoint.promote_cluster", "TenonMortiseJoint.promote_joint_candidate", "TenonMortiseJoint.restore_beams_from_keys", "TenonMortiseJoint.sha256", "TenonMortiseJoint.to_json", "TenonMortiseJoint.to_jsonstring", "TenonMortiseJoint.validate_data", "TripletAnalyzer", "WallJoint", "WallJoint.ToString", "WallJoint.add_extensions", "WallJoint.add_features", "WallJoint.check_elements_compatibility", "WallJoint.copy", "WallJoint.create", "WallJoint.element_count_complies", "WallJoint.flip_roles", "WallJoint.from_json", "WallJoint.from_jsonstring", "WallJoint.get_interface_for_wall", "WallJoint.promote_cluster", "WallJoint.promote_joint_candidate", "WallJoint.restore_beams_from_keys", "WallJoint.restore_walls_from_keys", "WallJoint.sha256", "WallJoint.to_json", "WallJoint.to_jsonstring", "WallJoint.validate_data", "XLapJoint", "XLapJoint.ToString", "XLapJoint.add_extensions", "XLapJoint.add_features", "XLapJoint.check_elements_compatibility", "XLapJoint.copy", "XLapJoint.create", "XLapJoint.element_count_complies", "XLapJoint.from_json", "XLapJoint.from_jsonstring", "XLapJoint.promote_cluster", "XLapJoint.promote_joint_candidate", "XLapJoint.restore_beams_from_keys", "XLapJoint.sha256", "XLapJoint.to_json", "XLapJoint.to_jsonstring", "XLapJoint.validate_data", "XNotchJoint", "XNotchJoint.ToString", "XNotchJoint.add_extensions", "XNotchJoint.add_features", "XNotchJoint.check_elements_compatibility", "XNotchJoint.copy", "XNotchJoint.create", "XNotchJoint.element_count_complies", "XNotchJoint.from_json", "XNotchJoint.from_jsonstring", "XNotchJoint.promote_cluster", "XNotchJoint.promote_joint_candidate", "XNotchJoint.restore_beams_from_keys", "XNotchJoint.sha256", "XNotchJoint.to_json", "XNotchJoint.to_jsonstring", "XNotchJoint.validate_data", "YButtJoint", "YButtJoint.ToString", "YButtJoint.add_extensions", "YButtJoint.add_features", "YButtJoint.check_elements_compatibility", "YButtJoint.copy", "YButtJoint.create", "YButtJoint.cross_beam_ref_side_index", "YButtJoint.element_count_complies", "YButtJoint.from_json", "YButtJoint.from_jsonstring", "YButtJoint.get_miter_planes", "YButtJoint.main_beam_ref_side_index", "YButtJoint.promote_cluster", "YButtJoint.promote_joint_candidate", "YButtJoint.restore_beams_from_keys", "YButtJoint.sha256", "YButtJoint.to_json", "YButtJoint.to_jsonstring", "YButtJoint.validate_data", "beam_ref_side_incidence", "beam_ref_side_incidence_with_vector", "find_neighboring_elements", "point_centerline_towards_joint", "CategoryRule", "CategoryRule.ToString", "CategoryRule.comply", "CategoryRule.get_category_rules", "CategoryRule.get_direct_rules", "CategoryRule.get_topology_rules", "CategoryRule.joints_from_beams_and_rules", "CategoryRule.reorder", "DebugInfomation", "DebugInfomation.ToString", "DebugInfomation.add_fastener_error", "DebugInfomation.add_feature_error", "DebugInfomation.add_joint_error", "DirectRule", "DirectRule.ToString", "DirectRule.comply", "DirectRule.contains", "DirectRule.get_category_rules", "DirectRule.get_direct_rules", "DirectRule.get_topology_rules", "DirectRule.joints_from_beams_and_rules", "FeatureDefinition", "FeatureDefinition.ToString", "JointDefinition", "JointDefinition.ToString", "JointDefinition.is_identical", "JointDefinition.match", "JointRule", "JointRule.comply", "JointRule.get_category_rules", "JointRule.get_direct_rules", "JointRule.get_topology_rules", "JointRule.joints_from_beams_and_rules", "SurfaceModel", "SurfaceModel.beam_category_names", "SurfaceModel.create_model", "SurfaceModel.cull_overlaps", "SurfaceModel.distance_between_elements", "SurfaceModel.generate_frame", "SurfaceModel.generate_perimeter_beams", "SurfaceModel.generate_plates", "SurfaceModel.generate_stud_lines", "SurfaceModel.generate_studs", "SurfaceModel.generate_windows", "SurfaceModel.get_beam_intersections", "SurfaceModel.get_interior_segment_indices", "SurfaceModel.offset_elements", "SurfaceModel.parse_loops", "SurfaceModel.trim_jack_studs", "SurfaceModel.trim_king_studs", "SurfaceModel.trim_studs", "TopologyRule", "TopologyRule.ToString", "TopologyRule.comply", "TopologyRule.get_category_rules", "TopologyRule.get_direct_rules", "TopologyRule.get_topology_rules", "TopologyRule.joints_from_beams_and_rules", "guess_joint_topology_2beams", "set_default_joints", "BallNodeFastener", "BallNodeFastener.ToString", "BallNodeFastener.add_feature", "BallNodeFastener.add_features", "BallNodeFastener.compute_aabb", "BallNodeFastener.compute_collision_mesh", "BallNodeFastener.compute_geometry", "BallNodeFastener.compute_obb", "BallNodeFastener.compute_worldtransformation", "BallNodeFastener.copy", "BallNodeFastener.from_json", "BallNodeFastener.from_jsonstring", "BallNodeFastener.remove_blank_extension", "BallNodeFastener.remove_features", "BallNodeFastener.reset", "BallNodeFastener.sha256", "BallNodeFastener.to_json", "BallNodeFastener.to_jsonstring", "BallNodeFastener.transform", "BallNodeFastener.transformed", "BallNodeFastener.update_interface", "BallNodeFastener.validate_data", "Beam", "Beam.ToString", "Beam.add_blank_extension", "Beam.add_feature", "Beam.add_features", "Beam.back_side", "Beam.compute_aabb", "Beam.compute_collision_mesh", "Beam.compute_geometry", "Beam.compute_obb", "Beam.compute_worldtransformation", "Beam.copy", "Beam.endpoint_closest_to_point", "Beam.extension_to_plane", "Beam.from_centerline", "Beam.from_endpoints", "Beam.from_json", "Beam.from_jsonstring", "Beam.front_side", "Beam.get_dimensions_relative_to_side", "Beam.opp_side", "Beam.remove_blank_extension", "Beam.remove_features", "Beam.reset", "Beam.sha256", "Beam.side_as_surface", "Beam.to_json", "Beam.to_jsonstring", "Beam.transform", "Beam.transformed", "Beam.validate_data", "Fastener", "Fastener.ToString", "Fastener.add_feature", "Fastener.add_features", "Fastener.compute_aabb", "Fastener.compute_collision_mesh", "Fastener.compute_geometry", "Fastener.compute_obb", "Fastener.compute_worldtransformation", "Fastener.copy", "Fastener.from_json", "Fastener.from_jsonstring", "Fastener.remove_blank_extension", "Fastener.remove_features", "Fastener.reset", "Fastener.sha256", "Fastener.to_json", "Fastener.to_jsonstring", "Fastener.transform", "Fastener.transformed", "Fastener.validate_data", "FastenerTimberInterface", "FastenerTimberInterface.ToString", "FastenerTimberInterface.copy", "FastenerTimberInterface.from_json", "FastenerTimberInterface.from_jsonstring", "FastenerTimberInterface.get_features", "FastenerTimberInterface.sha256", "FastenerTimberInterface.to_json", "FastenerTimberInterface.to_jsonstring", "FastenerTimberInterface.validate_data", "Opening", "Opening.ToString", "Opening.copy", "Opening.from_json", "Opening.from_jsonstring", "Opening.orient_polyline", "Opening.sha256", "Opening.to_json", "Opening.to_jsonstring", "Opening.validate_data", "OpeningType", "Plate", "Plate.ToString", "Plate.add_feature", "Plate.add_features", "Plate.add_interface", "Plate.check_outlines", "Plate.compute_aabb", "Plate.compute_collision_mesh", "Plate.compute_geometry", "Plate.compute_obb", "Plate.compute_worldtransformation", "Plate.copy", "Plate.from_brep", "Plate.from_json", "Plate.from_jsonstring", "Plate.from_outline_thickness", "Plate.opp_side", "Plate.remove_blank_extension", "Plate.remove_features", "Plate.reset", "Plate.sha256", "Plate.side_as_surface", "Plate.to_json", "Plate.to_jsonstring", "Plate.transform", "Plate.transformed", "Plate.validate_data", "PlateFastener", "PlateFastener.ToString", "PlateFastener.add_feature", "PlateFastener.add_features", "PlateFastener.compute_aabb", "PlateFastener.compute_collision_mesh", "PlateFastener.compute_geometry", "PlateFastener.compute_obb", "PlateFastener.compute_worldtransformation", "PlateFastener.copy", "PlateFastener.from_json", "PlateFastener.from_jsonstring", "PlateFastener.get_fastener_frames", "PlateFastener.place_instances", "PlateFastener.remove_blank_extension", "PlateFastener.remove_features", "PlateFastener.reset", "PlateFastener.set_default", "PlateFastener.sha256", "PlateFastener.to_json", "PlateFastener.to_jsonstring", "PlateFastener.transform", "PlateFastener.transformed", "PlateFastener.validate_data", "PlateFastener.validate_fastener_beam_compatibility", "Slab", "Slab.ToString", "Slab.add_feature", "Slab.add_features", "Slab.compute_aabb", "Slab.compute_collision_mesh", "Slab.compute_geometry", "Slab.compute_obb", "Slab.compute_worldtransformation", "Slab.copy", "Slab.from_boundary", "Slab.from_brep", "Slab.from_json", "Slab.from_jsonstring", "Slab.remove_blank_extension", "Slab.remove_features", "Slab.reset", "Slab.rotate", "Slab.sha256", "Slab.to_json", "Slab.to_jsonstring", "Slab.transform", "Slab.transformed", "Slab.validate_data", "TimberElement", "TimberElement.ToString", "TimberElement.add_feature", "TimberElement.add_features", "TimberElement.compute_aabb", "TimberElement.compute_collision_mesh", "TimberElement.compute_geometry", "TimberElement.compute_obb", "TimberElement.compute_worldtransformation", "TimberElement.copy", "TimberElement.from_json", "TimberElement.from_jsonstring", "TimberElement.remove_blank_extension", "TimberElement.remove_features", "TimberElement.reset", "TimberElement.sha256", "TimberElement.to_json", "TimberElement.to_jsonstring", "TimberElement.transform", "TimberElement.transformed", "TimberElement.validate_data", "Wall", "Wall.ToString", "Wall.add_feature", "Wall.add_features", "Wall.compute_aabb", "Wall.compute_collision_mesh", "Wall.compute_geometry", "Wall.compute_obb", "Wall.compute_worldtransformation", "Wall.copy", "Wall.from_boundary", "Wall.from_brep", "Wall.from_json", "Wall.from_jsonstring", "Wall.remove_blank_extension", "Wall.remove_features", "Wall.reset", "Wall.rotate", "Wall.sha256", "Wall.to_json", "Wall.to_jsonstring", "Wall.transform", "Wall.transformed", "Wall.validate_data", "BTLxProcessingError", "BeamJoiningError", "FastenerApplicationError", "FeatureApplicationError", "AlignmentType", "BTLxFromGeometryDefinition", "BTLxFromGeometryDefinition.ToString", "BTLxFromGeometryDefinition.copy", "BTLxFromGeometryDefinition.feature_from_element", "BTLxFromGeometryDefinition.from_json", "BTLxFromGeometryDefinition.from_jsonstring", "BTLxFromGeometryDefinition.sha256", "BTLxFromGeometryDefinition.to_json", "BTLxFromGeometryDefinition.to_jsonstring", "BTLxFromGeometryDefinition.transform", "BTLxFromGeometryDefinition.transformed", "BTLxFromGeometryDefinition.validate_data", "BTLxPart", "BTLxPart.et_point_vals", "BTLxPart.ref_side_from_face", "BTLxProcessing", "BTLxProcessing.ToString", "BTLxProcessing.add_subprocessing", "BTLxProcessing.copy", "BTLxProcessing.from_json", "BTLxProcessing.from_jsonstring", "BTLxProcessing.scaled", "BTLxProcessing.sha256", "BTLxProcessing.to_json", "BTLxProcessing.to_jsonstring", "BTLxProcessing.validate_data", "BTLxWriter", "BTLxWriter.model_to_xml", "BTLxWriter.register_type_serializer", "BTLxWriter.write", "Contour", "Contour.ToString", "Contour.copy", "Contour.from_json", "Contour.from_jsonstring", "Contour.scale", "Contour.scaled", "Contour.sha256", "Contour.to_json", "Contour.to_jsonstring", "Contour.validate_data", "DoubleCut", "DoubleCut.ToString", "DoubleCut.add_subprocessing", "DoubleCut.apply", "DoubleCut.copy", "DoubleCut.from_json", "DoubleCut.from_jsonstring", "DoubleCut.from_planes_and_beam", "DoubleCut.from_shapes_and_element", "DoubleCut.planes_from_params_and_beam", "DoubleCut.scale", "DoubleCut.scaled", "DoubleCut.sha256", "DoubleCut.to_json", "DoubleCut.to_jsonstring", "DoubleCut.validate_data", "DovetailMortise", "DovetailMortise.ToString", "DovetailMortise.add_subprocessing", "DovetailMortise.apply", "DovetailMortise.copy", "DovetailMortise.define_dovetail_tool", "DovetailMortise.dovetail_cutting_frames_from_params_and_beam", "DovetailMortise.dovetail_volume_from_params_and_beam", "DovetailMortise.frame_from_params_and_beam", "DovetailMortise.from_frame_and_beam", "DovetailMortise.from_json", "DovetailMortise.from_jsonstring", "DovetailMortise.scale", "DovetailMortise.scaled", "DovetailMortise.sha256", "DovetailMortise.to_json", "DovetailMortise.to_jsonstring", "DovetailMortise.validate_data", "DovetailTenon", "DovetailTenon.ToString", "DovetailTenon.add_subprocessing", "DovetailTenon.apply", "DovetailTenon.copy", "DovetailTenon.define_dovetail_tool", "DovetailTenon.dovetail_cutting_frames_from_params_and_beam", "DovetailTenon.dovetail_volume_from_params_and_beam", "DovetailTenon.frame_from_params_and_beam", "DovetailTenon.from_json", "DovetailTenon.from_jsonstring", "DovetailTenon.from_plane_and_beam", "DovetailTenon.scale", "DovetailTenon.scaled", "DovetailTenon.sha256", "DovetailTenon.to_json", "DovetailTenon.to_jsonstring", "DovetailTenon.validate_data", "Drilling", "Drilling.ToString", "Drilling.add_subprocessing", "Drilling.apply", "Drilling.copy", "Drilling.cylinder_from_params_and_element", "Drilling.from_json", "Drilling.from_jsonstring", "Drilling.from_line_and_element", "Drilling.from_shapes_and_element", "Drilling.scale", "Drilling.scaled", "Drilling.sha256", "Drilling.to_json", "Drilling.to_jsonstring", "Drilling.validate_data", "DualContour", "DualContour.ToString", "DualContour.copy", "DualContour.from_json", "DualContour.from_jsonstring", "DualContour.scale", "DualContour.scaled", "DualContour.sha256", "DualContour.to_json", "DualContour.to_jsonstring", "DualContour.validate_data", "EdgePositionType", "FreeContour", "FreeContour.ToString", "FreeContour.add_subprocessing", "FreeContour.apply", "FreeContour.are_all_segments_parallel", "FreeContour.copy", "FreeContour.from_json", "FreeContour.from_jsonstring", "FreeContour.from_polyline_and_element", "FreeContour.from_shapes_and_element", "FreeContour.from_top_bottom_and_elements", "FreeContour.get_ref_face_index", "FreeContour.parse_tool_position", "FreeContour.scale", "FreeContour.scaled", "FreeContour.sha256", "FreeContour.to_json", "FreeContour.to_jsonstring", "FreeContour.validate_data", "FrenchRidgeLap", "FrenchRidgeLap.ToString", "FrenchRidgeLap.add_subprocessing", "FrenchRidgeLap.apply", "FrenchRidgeLap.copy", "FrenchRidgeLap.frame_from_params_and_beam", "FrenchRidgeLap.from_beam_beam_and_plane", "FrenchRidgeLap.from_json", "FrenchRidgeLap.from_jsonstring", "FrenchRidgeLap.lap_volume_from_params_and_beam", "FrenchRidgeLap.scale", "FrenchRidgeLap.scaled", "FrenchRidgeLap.sha256", "FrenchRidgeLap.to_json", "FrenchRidgeLap.to_jsonstring", "FrenchRidgeLap.validate_data", "JackRafterCut", "JackRafterCut.ToString", "JackRafterCut.add_subprocessing", "JackRafterCut.apply", "JackRafterCut.copy", "JackRafterCut.from_json", "JackRafterCut.from_jsonstring", "JackRafterCut.from_plane_and_beam", "JackRafterCut.from_shapes_and_element", "JackRafterCut.plane_from_params_and_beam", "JackRafterCut.scale", "JackRafterCut.scaled", "JackRafterCut.sha256", "JackRafterCut.to_json", "JackRafterCut.to_jsonstring", "JackRafterCut.validate_data", "JackRafterCutProxy", "JackRafterCutProxy.apply", "JackRafterCutProxy.from_plane_and_beam", "JackRafterCutProxy.unproxified", "Lap", "Lap.ToString", "Lap.add_subprocessing", "Lap.apply", "Lap.copy", "Lap.from_json", "Lap.from_jsonstring", "Lap.from_plane_and_beam", "Lap.from_shapes_and_element", "Lap.from_volume_and_beam", "Lap.scale", "Lap.scaled", "Lap.sha256", "Lap.to_json", "Lap.to_jsonstring", "Lap.validate_data", "Lap.volume_from_params_and_beam", "LapProxy", "LapProxy.apply", "LapProxy.from_volume_and_beam", "LapProxy.unproxified", "LimitationTopType", "LongitudinalCut", "LongitudinalCut.ToString", "LongitudinalCut.add_subprocessing", "LongitudinalCut.apply", "LongitudinalCut.copy", "LongitudinalCut.from_json", "LongitudinalCut.from_jsonstring", "LongitudinalCut.from_plane_and_beam", "LongitudinalCut.from_shapes_and_element", "LongitudinalCut.plane_from_params_and_beam", "LongitudinalCut.scaled", "LongitudinalCut.sha256", "LongitudinalCut.to_json", "LongitudinalCut.to_jsonstring", "LongitudinalCut.validate_data", "LongitudinalCut.volume_from_params_and_beam", "MachiningLimits", "Mortise", "Mortise.ToString", "Mortise.add_subprocessing", "Mortise.apply", "Mortise.copy", "Mortise.frame_from_params_and_beam", "Mortise.from_frame_and_beam", "Mortise.from_json", "Mortise.from_jsonstring", "Mortise.scale", "Mortise.scaled", "Mortise.sha256", "Mortise.to_json", "Mortise.to_jsonstring", "Mortise.validate_data", "Mortise.volume_from_params_and_beam", "OrientationType", "Pocket", "Pocket.ToString", "Pocket.add_subprocessing", "Pocket.apply", "Pocket.copy", "Pocket.from_json", "Pocket.from_jsonstring", "Pocket.from_shapes_and_element", "Pocket.from_volume_and_element", "Pocket.scale", "Pocket.scaled", "Pocket.sha256", "Pocket.to_json", "Pocket.to_jsonstring", "Pocket.validate_data", "Pocket.volume_from_params_and_element", "PocketProxy", "PocketProxy.apply", "PocketProxy.from_volume_and_element", "PocketProxy.unproxified", "Slot", "Slot.ToString", "Slot.add_subprocessing", "Slot.apply", "Slot.copy", "Slot.from_json", "Slot.from_jsonstring", "Slot.from_plane_and_beam", "Slot.scale", "Slot.scaled", "Slot.sha256", "Slot.to_json", "Slot.to_jsonstring", "Slot.validate_data", "StepJoint", "StepJoint.ToString", "StepJoint.add_subprocessing", "StepJoint.add_tenon", "StepJoint.apply", "StepJoint.copy", "StepJoint.from_json", "StepJoint.from_jsonstring", "StepJoint.from_plane_and_beam", "StepJoint.planes_from_params_and_beam", "StepJoint.scale", "StepJoint.scaled", "StepJoint.sha256", "StepJoint.tenon_volume_from_params_and_beam", "StepJoint.to_json", "StepJoint.to_jsonstring", "StepJoint.validate_data", "StepJointNotch", "StepJointNotch.ToString", "StepJointNotch.add_mortise", "StepJointNotch.add_subprocessing", "StepJointNotch.apply", "StepJointNotch.copy", "StepJointNotch.from_json", "StepJointNotch.from_jsonstring", "StepJointNotch.from_plane_and_beam", "StepJointNotch.mortise_volume_from_params_and_beam", "StepJointNotch.planes_from_params_and_beam", "StepJointNotch.scale", "StepJointNotch.scaled", "StepJointNotch.sha256", "StepJointNotch.to_json", "StepJointNotch.to_jsonstring", "StepJointNotch.validate_data", "StepShapeType", "Tenon", "Tenon.ToString", "Tenon.add_subprocessing", "Tenon.apply", "Tenon.copy", "Tenon.frame_from_params_and_beam", "Tenon.from_json", "Tenon.from_jsonstring", "Tenon.from_plane_and_beam", "Tenon.scale", "Tenon.scaled", "Tenon.sha256", "Tenon.to_json", "Tenon.to_jsonstring", "Tenon.validate_data", "Tenon.volume_from_params_and_beam", "TenonShapeType", "Text", "Text.ToString", "Text.add_subprocessing", "Text.apply", "Text.copy", "Text.create_text_curves_for_element", "Text.from_json", "Text.from_jsonstring", "Text.scale", "Text.scaled", "Text.sha256", "Text.to_json", "Text.to_jsonstring", "Text.validate_data", "add_gh_param", "clear_gh_params", "get_leaf_subclasses", "item_input_valid", "list_input_valid", "manage_dynamic_params", "rename_gh_input", "TimberModel", "TimberModel.ToString", "TimberModel.add_element", "TimberModel.add_elements", "TimberModel.add_group", "TimberModel.add_group_element", "TimberModel.add_interaction", "TimberModel.add_joint", "TimberModel.add_joint_candidate", "TimberModel.add_material", "TimberModel.assign_material", "TimberModel.compute_aabb", "TimberModel.compute_obb", "TimberModel.connect_adjacent_beams", "TimberModel.connect_adjacent_walls", "TimberModel.copy", "TimberModel.element_by_guid", "TimberModel.elements", "TimberModel.elements_connected_by", "TimberModel.from_json", "TimberModel.from_jsonstring", "TimberModel.get_elements_in_group", "TimberModel.get_interactions_for_element", "TimberModel.has_element", "TimberModel.has_group", "TimberModel.has_interaction", "TimberModel.has_material", "TimberModel.interactions", "TimberModel.materials", "TimberModel.process_joinery", "TimberModel.remove_element", "TimberModel.remove_interaction", "TimberModel.remove_joint", "TimberModel.remove_joint_candidate", "TimberModel.rotate", "TimberModel.rotated", "TimberModel.scale", "TimberModel.scaled", "TimberModel.set_topologies", "TimberModel.sha256", "TimberModel.to_json", "TimberModel.to_jsonstring", "TimberModel.transform", "TimberModel.transform_numpy", "TimberModel.transformed", "TimberModel.transformed_numpy", "TimberModel.translate", "TimberModel.translated", "TimberModel.validate_data", "Actor", "Actor.get_name", "BuildingPlan", "BuildingPlan.ToString", "BuildingPlan.add_step", "BuildingPlan.copy", "BuildingPlan.from_json", "BuildingPlan.from_jsonstring", "BuildingPlan.sha256", "BuildingPlan.to_json", "BuildingPlan.to_jsonstring", "BuildingPlan.validate_data", "BuildingPlanParser", "BuildingPlanParser.parse", "BuildingPlanParser.serialize", "Instruction", "Instruction.ToString", "Instruction.copy", "Instruction.from_json", "Instruction.from_jsonstring", "Instruction.sha256", "Instruction.to_json", "Instruction.to_jsonstring", "Instruction.transform", "Instruction.validate_data", "LinearDimension", "LinearDimension.ToString", "LinearDimension.copy", "LinearDimension.from_json", "LinearDimension.from_jsonstring", "LinearDimension.sha256", "LinearDimension.to_json", "LinearDimension.to_jsonstring", "LinearDimension.transform", "LinearDimension.validate_data", "Model3d", "Model3d.ToString", "Model3d.copy", "Model3d.from_json", "Model3d.from_jsonstring", "Model3d.sha256", "Model3d.to_json", "Model3d.to_jsonstring", "Model3d.transform", "Model3d.validate_data", "SimpleSequenceGenerator", "Step", "Step.ToString", "Step.copy", "Step.from_json", "Step.from_jsonstring", "Step.sha256", "Step.to_json", "Step.to_jsonstring", "Step.transform", "Step.validate_data", "Text3d", "Text3d.ToString", "Text3d.copy", "Text3d.from_json", "Text3d.from_jsonstring", "Text3d.sha256", "Text3d.to_json", "Text3d.to_jsonstring", "Text3d.transform", "Text3d.validate_data", "find_neighboring_elements", "Citing", "Developer Guide", "BTLx Contribution Guide", "Class Diagrams", "Joints Contribution Guide", "COMPAS Timber Documentation", "Installation", "License", "Grasshopper plugin", "Attributes", "Beams", "Design", "Examples", "Fabrication", "Features", "Installation Guide", "Joint Rules", "Model", "Show", "Utils", "Workflow"], "terms": {"compas_timb": [0, 10, 16, 20, 21, 22, 27, 29, 35, 39, 40, 46, 47, 50, 54, 55, 56, 62, 66, 67, 68, 73, 79, 83, 84, 90, 92, 98, 102, 103, 110, 116, 120, 121, 127, 133, 137, 138, 144, 150, 156, 157, 163, 169, 173, 174, 180, 181, 183, 190, 196, 197, 199, 205, 209, 211, 218, 224, 225, 227, 233, 240, 246, 247, 249, 255, 262, 268, 269, 271, 277, 284, 290, 291, 293, 299, 301, 302, 308, 312, 313, 319, 325, 329, 330, 336, 342, 347, 348, 354, 360, 364, 365, 371, 377, 381, 382, 388, 394, 398, 399, 406, 412, 416, 417, 423, 424, 430, 436, 437, 438, 444, 450, 454, 455, 461, 467, 471, 472, 478, 484, 491, 492, 498, 499, 500, 501, 502, 510, 515, 523, 525, 529, 535, 553, 560, 561, 562, 584, 615, 636, 646, 656, 657, 669, 684, 709, 733, 754, 778, 779, 780, 781, 782, 783, 795, 798, 809, 813, 824, 827, 832, 833, 840, 843, 846, 847, 848, 858, 861, 865, 866, 876, 879, 881, 884, 885, 892, 903, 904, 907, 912, 913, 914, 923, 926, 928, 932, 939, 942, 947, 948, 955, 956, 959, 962, 975, 976, 977, 980, 981, 984, 989, 990, 996, 997, 998, 1001, 1003, 1013, 1014, 1015, 1018, 1030, 1031, 1035, 1038, 1049, 1053, 1058, 1062, 1066, 1070, 1075, 1076, 1083, 1084, 1087, 1089, 1099, 1100, 1101, 1106, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1127, 1171, 1173, 1183, 1186, 1196, 1206, 1216, 1217, 1227, 1237, 1238, 1240, 1242, 1243, 1244, 1253], "model": [0, 10, 16, 20, 21, 22, 29, 35, 39, 40, 41, 49, 62, 66, 67, 68, 73, 79, 83, 84, 85, 92, 98, 102, 103, 104, 110, 113, 116, 120, 121, 122, 127, 133, 137, 138, 139, 144, 150, 156, 157, 158, 163, 169, 173, 174, 175, 180, 181, 182, 190, 196, 197, 199, 200, 211, 218, 224, 225, 227, 228, 240, 246, 247, 249, 250, 262, 268, 269, 271, 272, 284, 290, 291, 293, 294, 301, 302, 308, 312, 313, 314, 319, 325, 329, 330, 331, 336, 342, 347, 348, 349, 354, 360, 364, 365, 366, 377, 381, 382, 383, 388, 394, 398, 399, 400, 406, 412, 416, 417, 418, 423, 424, 430, 436, 437, 438, 439, 444, 450, 454, 455, 456, 461, 467, 471, 472, 473, 478, 484, 491, 492, 493, 535, 561, 570, 584, 594, 621, 623, 636, 657, 667, 684, 692, 717, 741, 762, 809, 810, 812, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1139, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1160, 1164, 1171, 1206, 1216, 1241, 1242, 1243, 1246, 1248, 1251, 1252, 1258], "element": [0, 10, 13, 14, 16, 17, 20, 21, 22, 33, 35, 36, 39, 40, 46, 47, 56, 60, 62, 63, 66, 67, 68, 73, 77, 79, 80, 83, 84, 85, 96, 98, 99, 102, 103, 114, 116, 117, 120, 121, 131, 133, 134, 137, 138, 148, 150, 151, 156, 157, 163, 167, 169, 170, 173, 174, 188, 190, 191, 196, 197, 199, 209, 211, 216, 218, 219, 224, 225, 227, 238, 240, 241, 246, 247, 249, 260, 262, 263, 268, 269, 271, 282, 284, 285, 290, 291, 293, 306, 308, 309, 312, 313, 323, 325, 326, 329, 330, 340, 342, 344, 347, 348, 358, 360, 361, 364, 365, 375, 377, 378, 381, 382, 392, 394, 395, 398, 399, 406, 410, 412, 413, 416, 417, 424, 428, 430, 431, 436, 437, 438, 448, 450, 451, 454, 455, 465, 467, 468, 471, 472, 482, 484, 486, 491, 492, 500, 502, 504, 508, 509, 515, 517, 518, 522, 523, 525, 528, 530, 534, 535, 553, 555, 559, 562, 566, 567, 569, 570, 576, 580, 581, 584, 590, 591, 592, 593, 594, 596, 607, 612, 613, 615, 619, 620, 622, 623, 629, 633, 634, 636, 641, 646, 656, 657, 663, 664, 665, 666, 667, 669, 676, 681, 682, 684, 688, 689, 691, 692, 700, 705, 706, 709, 713, 714, 715, 716, 717, 725, 730, 731, 733, 737, 738, 739, 740, 741, 747, 751, 752, 754, 758, 759, 760, 761, 762, 770, 775, 776, 780, 781, 783, 786, 795, 796, 797, 798, 811, 827, 832, 833, 843, 846, 847, 848, 861, 865, 866, 876, 879, 881, 884, 885, 904, 907, 912, 913, 914, 915, 926, 928, 932, 942, 947, 948, 956, 962, 967, 968, 975, 977, 978, 984, 989, 990, 996, 1001, 1003, 1013, 1014, 1018, 1022, 1023, 1030, 1031, 1032, 1033, 1038, 1053, 1058, 1062, 1070, 1075, 1076, 1087, 1089, 1099, 1106, 1122, 1124, 1125, 1127, 1128, 1132, 1138, 1140, 1143, 1144, 1145, 1147, 1149, 1152, 1153, 1216, 1217, 1237, 1240, 1243, 1255], "connect": [0, 10, 11, 16, 20, 21, 22, 27, 28, 29, 30, 35, 39, 40, 46, 47, 50, 54, 55, 56, 57, 62, 66, 67, 68, 73, 74, 79, 83, 84, 90, 92, 93, 98, 102, 103, 110, 111, 116, 120, 121, 127, 128, 133, 137, 138, 144, 145, 150, 156, 157, 163, 164, 169, 173, 174, 180, 181, 182, 183, 184, 190, 196, 197, 199, 205, 211, 212, 218, 224, 225, 227, 233, 234, 240, 246, 247, 249, 255, 256, 262, 268, 269, 271, 277, 278, 284, 290, 291, 293, 299, 301, 302, 303, 308, 312, 313, 319, 320, 325, 329, 330, 336, 337, 342, 347, 348, 354, 355, 360, 364, 365, 371, 372, 377, 381, 382, 388, 389, 394, 398, 399, 406, 407, 412, 416, 417, 423, 424, 425, 430, 436, 437, 438, 444, 445, 450, 454, 455, 461, 462, 467, 471, 472, 478, 479, 484, 491, 492, 498, 499, 500, 501, 553, 562, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1136, 1140, 1174, 1187, 1197, 1207, 1218, 1228, 1242, 1243, 1245, 1254, 1255], "fabric": [0, 782, 783, 795, 798, 809, 813, 824, 832, 840, 858, 876, 884, 885, 892, 903, 904, 923, 939, 947, 955, 959, 976, 980, 981, 989, 997, 998, 1014, 1015, 1031, 1035, 1049, 1066, 1083, 1084, 1100, 1101, 1238, 1240, 1243, 1246], "design": [0, 52, 500, 502, 510, 515, 523, 525, 529, 535, 553, 560, 561, 795, 1238, 1243, 1246, 1247, 1248], "plan": [0, 1171, 1173, 1183, 1184, 1185, 1186, 1196, 1206, 1216, 1217, 1227, 1243], "error": [0, 1, 47, 510, 512, 513, 514, 566, 569, 590, 593, 619, 622, 663, 688, 691, 713, 716, 737, 740, 758, 761, 778, 779, 780, 781, 879, 907, 1151, 1240, 1242, 1243, 1247, 1249, 1255], "ghpython": [0, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1243, 1246], "rhino": [0, 11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 500, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1237, 1243, 1244, 1247, 1248, 1254, 1257], "The": [1, 9, 10, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 29, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 49, 52, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 92, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 149, 150, 151, 152, 153, 156, 157, 160, 161, 162, 163, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 189, 190, 191, 193, 194, 196, 197, 202, 203, 204, 206, 207, 209, 211, 217, 218, 219, 221, 222, 224, 225, 230, 231, 232, 239, 240, 241, 243, 244, 246, 247, 252, 253, 254, 261, 262, 263, 265, 266, 268, 269, 274, 275, 276, 283, 284, 285, 287, 288, 290, 291, 296, 297, 298, 299, 300, 302, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 429, 430, 431, 433, 434, 436, 437, 441, 442, 443, 444, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 483, 484, 486, 487, 488, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 504, 508, 509, 515, 517, 522, 534, 535, 553, 555, 559, 562, 565, 566, 567, 569, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 622, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 638, 639, 640, 643, 644, 645, 648, 649, 650, 653, 654, 655, 657, 660, 663, 664, 666, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 683, 684, 688, 689, 691, 693, 694, 695, 696, 699, 703, 704, 705, 706, 707, 712, 713, 714, 716, 718, 721, 722, 724, 728, 729, 730, 731, 732, 736, 737, 738, 740, 742, 743, 744, 746, 749, 750, 751, 752, 753, 757, 758, 759, 761, 763, 766, 767, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 787, 788, 790, 791, 794, 795, 796, 797, 798, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 895, 896, 897, 898, 900, 901, 902, 904, 907, 909, 910, 911, 912, 913, 914, 917, 918, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 981, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1101, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1132, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1176, 1177, 1178, 1180, 1181, 1182, 1188, 1189, 1190, 1192, 1193, 1195, 1198, 1199, 1200, 1202, 1203, 1205, 1208, 1209, 1210, 1212, 1213, 1215, 1219, 1220, 1221, 1223, 1224, 1226, 1229, 1230, 1231, 1233, 1234, 1236, 1237, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1252, 1254, 1255, 1257, 1258], "follow": [1, 589, 602, 604, 636, 673, 684, 1240, 1242, 1245, 1246, 1248, 1253, 1254], "mai": [1, 1240, 1242, 1247, 1255], "rais": [1, 12, 14, 16, 18, 19, 31, 33, 37, 38, 58, 59, 60, 64, 65, 75, 77, 81, 82, 94, 96, 100, 101, 112, 114, 118, 119, 129, 131, 135, 136, 146, 148, 152, 153, 165, 166, 167, 171, 172, 185, 188, 193, 194, 213, 216, 221, 222, 235, 238, 243, 244, 257, 260, 265, 266, 279, 282, 287, 288, 304, 306, 310, 311, 321, 323, 327, 328, 338, 340, 345, 346, 356, 358, 362, 363, 373, 375, 379, 380, 390, 392, 396, 397, 408, 410, 414, 415, 426, 427, 428, 433, 434, 446, 448, 452, 453, 463, 465, 469, 470, 480, 482, 487, 488, 572, 573, 600, 601, 625, 626, 639, 640, 649, 650, 670, 671, 694, 695, 708, 721, 722, 743, 744, 766, 767, 778, 780, 781, 787, 788, 802, 803, 816, 817, 827, 829, 830, 843, 850, 851, 861, 867, 868, 879, 882, 883, 895, 896, 907, 910, 911, 926, 930, 931, 942, 944, 945, 956, 962, 964, 965, 977, 984, 986, 987, 1001, 1005, 1006, 1018, 1020, 1021, 1032, 1038, 1040, 1041, 1053, 1055, 1056, 1070, 1072, 1073, 1087, 1090, 1091, 1104, 1107, 1108, 1124, 1127, 1128, 1132, 1141, 1142, 1151, 1177, 1178, 1189, 1190, 1199, 1200, 1209, 1210, 1220, 1221, 1230, 1231, 1240, 1242], "thi": [1, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 45, 46, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 156, 157, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 179, 184, 185, 188, 189, 190, 193, 194, 196, 197, 199, 204, 210, 212, 213, 216, 217, 218, 221, 222, 224, 225, 227, 232, 234, 235, 238, 239, 240, 243, 244, 246, 247, 249, 254, 256, 257, 260, 261, 262, 265, 266, 268, 269, 271, 276, 278, 279, 282, 283, 284, 287, 288, 290, 291, 293, 298, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 387, 388, 389, 390, 391, 393, 394, 396, 397, 398, 399, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 491, 492, 497, 498, 499, 500, 502, 504, 509, 517, 518, 523, 525, 528, 530, 553, 555, 562, 563, 570, 571, 572, 573, 583, 584, 585, 586, 589, 594, 595, 597, 600, 601, 602, 604, 605, 614, 615, 616, 623, 624, 625, 626, 635, 636, 637, 638, 639, 640, 645, 647, 648, 649, 650, 655, 657, 658, 662, 667, 668, 670, 671, 673, 683, 685, 692, 693, 694, 695, 697, 707, 709, 710, 717, 718, 719, 721, 722, 732, 733, 734, 741, 742, 743, 744, 753, 754, 755, 762, 763, 764, 766, 767, 777, 778, 779, 783, 784, 785, 787, 788, 794, 795, 797, 799, 801, 802, 803, 808, 814, 815, 816, 817, 823, 825, 827, 828, 829, 830, 831, 833, 839, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 857, 859, 861, 862, 864, 865, 866, 867, 868, 869, 875, 877, 880, 881, 882, 883, 884, 886, 891, 893, 894, 895, 896, 902, 905, 909, 910, 911, 917, 922, 924, 926, 927, 928, 929, 930, 931, 932, 933, 938, 940, 942, 943, 944, 945, 946, 948, 949, 954, 955, 956, 957, 960, 962, 963, 964, 965, 966, 967, 968, 969, 974, 975, 976, 977, 978, 982, 984, 985, 986, 987, 988, 990, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1029, 1030, 1031, 1032, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1065, 1067, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1082, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1098, 1099, 1102, 1105, 1106, 1107, 1108, 1109, 1114, 1122, 1123, 1127, 1137, 1141, 1142, 1143, 1146, 1151, 1154, 1155, 1157, 1159, 1166, 1167, 1169, 1170, 1174, 1176, 1177, 1178, 1182, 1183, 1187, 1188, 1189, 1190, 1195, 1197, 1198, 1199, 1200, 1205, 1207, 1208, 1209, 1210, 1215, 1217, 1218, 1219, 1220, 1221, 1226, 1228, 1229, 1230, 1231, 1236, 1237, 1239, 1240, 1241, 1242, 1245, 1247, 1249, 1253, 1254, 1258], "modul": [1, 9, 1243], "see": [1, 22, 68, 199, 227, 249, 271, 293, 438, 1122, 1240, 1242, 1246, 1248, 1250, 1252, 1253, 1254, 1257], "detail": [1, 1246], "beamjoiningerror": [1, 12, 14, 31, 33, 58, 59, 60, 75, 77, 94, 96, 112, 114, 129, 131, 146, 148, 165, 166, 167, 185, 188, 213, 216, 235, 238, 257, 260, 279, 282, 304, 306, 321, 323, 338, 340, 356, 358, 373, 375, 390, 392, 408, 410, 426, 427, 428, 446, 448, 463, 465, 480, 482, 510, 708, 1151, 1242, 1243], "featureapplicationerror": [1, 510, 778, 827, 843, 861, 879, 907, 926, 942, 956, 962, 977, 984, 1001, 1018, 1032, 1038, 1053, 1070, 1087, 1240, 1243], "fastenerapplicationerror": [1, 1243], "can": [5, 26, 45, 72, 73, 89, 109, 110, 126, 143, 162, 179, 204, 232, 254, 276, 298, 318, 335, 336, 353, 370, 387, 405, 422, 443, 460, 477, 497, 508, 522, 534, 559, 583, 614, 635, 636, 645, 655, 683, 707, 732, 733, 753, 777, 779, 794, 808, 823, 839, 857, 869, 875, 884, 891, 902, 922, 938, 954, 955, 974, 976, 981, 988, 995, 1012, 1029, 1031, 1048, 1065, 1082, 1092, 1098, 1114, 1124, 1170, 1173, 1182, 1195, 1205, 1215, 1217, 1226, 1236, 1240, 1241, 1242, 1244, 1246, 1248, 1254, 1258], "us": [5, 9, 10, 11, 20, 21, 23, 26, 29, 30, 39, 40, 42, 45, 47, 48, 49, 51, 53, 56, 57, 66, 67, 69, 72, 73, 74, 83, 84, 86, 89, 91, 92, 93, 102, 103, 105, 109, 110, 111, 120, 121, 123, 126, 127, 128, 137, 138, 140, 143, 144, 145, 156, 157, 159, 162, 163, 164, 173, 174, 176, 179, 180, 181, 184, 196, 197, 201, 204, 208, 209, 210, 212, 224, 225, 229, 232, 234, 246, 247, 251, 254, 256, 268, 269, 273, 276, 278, 290, 291, 295, 298, 299, 302, 303, 312, 313, 315, 318, 319, 320, 329, 330, 332, 335, 336, 337, 347, 348, 350, 353, 354, 355, 364, 365, 367, 370, 372, 381, 382, 384, 387, 388, 389, 398, 399, 402, 405, 406, 407, 416, 417, 419, 422, 425, 436, 437, 440, 443, 444, 445, 454, 455, 457, 460, 461, 462, 471, 472, 474, 477, 478, 479, 491, 492, 494, 497, 498, 499, 500, 504, 509, 517, 555, 563, 577, 583, 585, 597, 608, 614, 616, 630, 635, 637, 642, 645, 647, 652, 655, 658, 677, 683, 685, 702, 707, 710, 719, 727, 732, 733, 734, 748, 753, 755, 764, 772, 777, 779, 783, 784, 789, 794, 795, 799, 805, 808, 809, 814, 820, 823, 825, 836, 839, 840, 841, 849, 854, 857, 858, 859, 869, 872, 875, 877, 881, 888, 891, 893, 899, 902, 905, 919, 922, 924, 929, 935, 938, 940, 951, 954, 955, 960, 966, 971, 974, 976, 982, 992, 995, 999, 1004, 1009, 1012, 1016, 1026, 1029, 1031, 1036, 1045, 1048, 1050, 1061, 1065, 1067, 1079, 1082, 1085, 1092, 1095, 1098, 1102, 1111, 1114, 1122, 1123, 1127, 1160, 1161, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1174, 1179, 1182, 1183, 1187, 1191, 1195, 1197, 1201, 1205, 1207, 1211, 1215, 1217, 1218, 1222, 1226, 1228, 1232, 1236, 1237, 1238, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1257], "interchang": 5, "correspond": [5, 56, 336, 406, 584, 596, 798, 811, 1106, 1240, 1242, 1247, 1248, 1254, 1257], "order": [5, 20, 21, 39, 40, 52, 66, 67, 83, 84, 102, 103, 120, 121, 137, 138, 156, 157, 173, 174, 196, 197, 224, 225, 246, 247, 268, 269, 290, 291, 312, 313, 329, 330, 347, 348, 364, 365, 381, 382, 398, 399, 416, 417, 436, 437, 454, 455, 471, 472, 491, 492, 500, 509, 523, 555, 795, 1216, 1240, 1242], "speed": 5, "up": [5, 180, 299], "visual": [5, 510, 779, 955, 976, 1031, 1173, 1217, 1240, 1241], "upon": [5, 1243], "creat": [5, 10, 13, 20, 21, 29, 31, 32, 39, 40, 47, 49, 56, 66, 67, 73, 83, 84, 92, 94, 95, 102, 103, 110, 112, 120, 121, 127, 129, 130, 137, 138, 144, 146, 147, 156, 157, 163, 173, 174, 183, 196, 197, 224, 225, 233, 246, 247, 255, 268, 269, 277, 290, 291, 302, 304, 305, 312, 313, 319, 321, 322, 329, 330, 336, 338, 339, 347, 348, 354, 356, 357, 364, 365, 373, 374, 381, 382, 388, 390, 391, 398, 399, 406, 408, 409, 416, 417, 436, 437, 444, 447, 454, 455, 461, 464, 471, 472, 478, 480, 481, 491, 492, 515, 523, 535, 581, 598, 599, 613, 634, 669, 682, 697, 706, 720, 731, 752, 765, 776, 778, 831, 843, 849, 861, 869, 929, 946, 957, 966, 988, 1001, 1004, 1053, 1057, 1070, 1074, 1087, 1092, 1244, 1246, 1247, 1248, 1249, 1251, 1254, 1255, 1258], "btlx": [5, 584, 657, 687, 778, 783, 795, 797, 798, 809, 810, 812, 904, 912, 914, 1239, 1241, 1242, 1243], "file": [5, 18, 24, 37, 43, 64, 70, 81, 87, 100, 106, 118, 124, 135, 141, 152, 160, 171, 177, 193, 202, 221, 230, 243, 252, 265, 274, 287, 296, 310, 316, 327, 333, 345, 351, 362, 368, 379, 385, 396, 403, 414, 420, 433, 441, 452, 458, 469, 475, 487, 495, 572, 578, 600, 610, 625, 631, 639, 643, 649, 653, 670, 679, 694, 703, 721, 728, 743, 749, 766, 773, 778, 787, 790, 802, 806, 809, 810, 812, 816, 821, 829, 837, 850, 855, 867, 873, 882, 889, 895, 900, 910, 920, 930, 936, 944, 952, 964, 972, 986, 993, 1005, 1010, 1020, 1027, 1040, 1046, 1055, 1063, 1072, 1080, 1090, 1096, 1107, 1112, 1141, 1162, 1177, 1180, 1183, 1184, 1185, 1189, 1192, 1199, 1202, 1209, 1212, 1220, 1223, 1230, 1233, 1245, 1250, 1251], "ar": [5, 11, 12, 14, 16, 20, 21, 22, 30, 33, 35, 39, 40, 46, 51, 52, 53, 56, 57, 58, 60, 62, 66, 67, 68, 74, 75, 77, 79, 83, 84, 90, 93, 96, 98, 102, 103, 110, 111, 114, 116, 120, 121, 128, 131, 133, 137, 138, 145, 148, 150, 156, 157, 164, 165, 167, 169, 173, 174, 182, 184, 185, 188, 190, 196, 197, 199, 208, 209, 210, 211, 212, 213, 216, 218, 224, 225, 227, 234, 235, 238, 240, 246, 247, 249, 256, 257, 260, 262, 268, 269, 271, 278, 279, 282, 284, 290, 291, 293, 303, 306, 308, 312, 313, 320, 323, 325, 329, 330, 337, 340, 342, 347, 348, 355, 358, 360, 364, 365, 372, 375, 377, 381, 382, 388, 389, 392, 394, 398, 399, 401, 407, 410, 412, 416, 417, 424, 425, 426, 428, 430, 436, 437, 438, 445, 446, 448, 450, 454, 455, 461, 462, 463, 465, 467, 471, 472, 479, 482, 484, 491, 492, 498, 499, 500, 502, 509, 518, 528, 555, 562, 563, 585, 616, 636, 637, 647, 658, 662, 669, 685, 708, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1084, 1085, 1092, 1102, 1123, 1128, 1130, 1132, 1153, 1174, 1187, 1197, 1207, 1217, 1218, 1228, 1240, 1241, 1242, 1244, 1247, 1248, 1251, 1252, 1254, 1255, 1257, 1258], "convert": [5, 11, 21, 24, 25, 30, 40, 43, 44, 57, 67, 70, 71, 74, 84, 87, 88, 93, 103, 106, 107, 111, 121, 124, 125, 128, 138, 141, 142, 145, 157, 160, 161, 164, 174, 177, 178, 184, 197, 202, 203, 212, 225, 230, 231, 234, 247, 252, 253, 256, 269, 274, 275, 278, 291, 296, 297, 303, 313, 316, 317, 320, 330, 333, 334, 337, 348, 351, 352, 355, 365, 368, 369, 372, 382, 385, 386, 389, 399, 403, 404, 407, 417, 420, 421, 425, 437, 441, 442, 445, 455, 458, 459, 462, 472, 475, 476, 479, 492, 495, 496, 523, 563, 578, 579, 585, 610, 611, 616, 631, 632, 637, 643, 644, 647, 653, 654, 658, 679, 680, 685, 703, 704, 710, 728, 729, 734, 749, 750, 755, 773, 774, 784, 790, 791, 796, 799, 806, 807, 810, 814, 821, 822, 825, 837, 838, 841, 855, 856, 859, 873, 874, 877, 889, 890, 893, 900, 901, 905, 920, 921, 924, 936, 937, 940, 952, 953, 960, 972, 973, 982, 993, 994, 999, 1010, 1011, 1016, 1027, 1028, 1036, 1046, 1047, 1050, 1063, 1064, 1067, 1080, 1081, 1085, 1096, 1097, 1102, 1112, 1113, 1123, 1162, 1163, 1174, 1180, 1181, 1187, 1192, 1193, 1197, 1202, 1203, 1207, 1212, 1213, 1218, 1223, 1224, 1228, 1233, 1234, 1240], "respect": [5, 22, 56, 68, 199, 227, 249, 271, 293, 438, 498, 499], "contain": [9, 16, 18, 19, 20, 37, 38, 39, 51, 56, 64, 65, 66, 81, 82, 83, 100, 101, 102, 118, 119, 120, 135, 136, 137, 152, 153, 156, 171, 172, 173, 182, 193, 194, 196, 208, 221, 222, 224, 243, 244, 246, 265, 266, 268, 287, 288, 290, 310, 311, 312, 327, 328, 329, 345, 346, 347, 362, 363, 364, 379, 380, 381, 396, 397, 398, 414, 415, 416, 433, 434, 436, 452, 453, 454, 469, 470, 471, 487, 488, 491, 500, 504, 509, 510, 517, 523, 525, 555, 572, 573, 584, 600, 601, 625, 626, 639, 640, 649, 650, 657, 670, 671, 694, 695, 709, 721, 722, 733, 743, 744, 754, 766, 767, 779, 783, 787, 788, 802, 803, 816, 817, 829, 830, 850, 851, 867, 868, 882, 883, 895, 896, 910, 911, 930, 931, 944, 945, 964, 965, 986, 987, 1005, 1006, 1020, 1021, 1040, 1041, 1055, 1056, 1072, 1073, 1090, 1091, 1107, 1108, 1122, 1124, 1127, 1139, 1141, 1142, 1145, 1148, 1150, 1164, 1173, 1177, 1178, 1189, 1190, 1199, 1200, 1209, 1210, 1217, 1220, 1221, 1230, 1231, 1237, 1241], "function": [9, 163, 498, 500, 687, 783, 811, 912, 914, 1143, 1246], "type": [9, 10, 11, 15, 18, 19, 26, 29, 30, 34, 37, 38, 45, 49, 52, 57, 61, 64, 65, 72, 74, 78, 81, 82, 89, 92, 93, 97, 100, 101, 109, 110, 111, 115, 118, 119, 126, 127, 128, 132, 135, 136, 143, 144, 145, 149, 152, 153, 162, 163, 164, 168, 171, 172, 179, 184, 189, 193, 194, 204, 212, 217, 221, 222, 232, 234, 239, 243, 244, 254, 256, 261, 265, 266, 276, 278, 283, 287, 288, 298, 302, 303, 307, 310, 311, 318, 319, 320, 324, 327, 328, 335, 336, 337, 341, 345, 346, 353, 354, 355, 359, 362, 363, 370, 372, 376, 379, 380, 387, 388, 389, 393, 396, 397, 401, 405, 406, 407, 411, 414, 415, 422, 425, 429, 433, 434, 443, 444, 445, 449, 452, 453, 460, 461, 462, 466, 469, 470, 477, 478, 479, 483, 487, 488, 497, 502, 515, 525, 553, 563, 571, 572, 573, 583, 585, 595, 600, 601, 614, 616, 624, 625, 626, 635, 637, 638, 639, 640, 645, 647, 648, 649, 650, 655, 658, 668, 670, 671, 683, 685, 693, 694, 695, 707, 710, 718, 721, 722, 732, 734, 742, 743, 744, 753, 755, 763, 766, 767, 777, 778, 783, 784, 785, 787, 788, 794, 799, 801, 802, 803, 808, 811, 813, 814, 815, 816, 817, 823, 825, 828, 829, 830, 839, 840, 841, 844, 850, 851, 857, 859, 862, 867, 868, 875, 877, 880, 882, 883, 891, 892, 893, 894, 895, 896, 902, 905, 909, 910, 911, 922, 924, 927, 930, 931, 938, 940, 943, 944, 945, 954, 960, 963, 964, 965, 974, 982, 985, 986, 987, 995, 999, 1002, 1005, 1006, 1012, 1016, 1019, 1020, 1021, 1029, 1036, 1039, 1040, 1041, 1048, 1050, 1054, 1055, 1056, 1065, 1067, 1071, 1072, 1073, 1082, 1085, 1088, 1090, 1091, 1098, 1102, 1105, 1107, 1108, 1114, 1123, 1137, 1140, 1141, 1142, 1170, 1171, 1174, 1176, 1177, 1178, 1182, 1187, 1188, 1189, 1190, 1195, 1197, 1198, 1199, 1200, 1205, 1207, 1208, 1209, 1210, 1215, 1217, 1218, 1219, 1220, 1221, 1226, 1228, 1229, 1230, 1231, 1236, 1240, 1241, 1242, 1243, 1249, 1253, 1258], "meant": 9, "context": [9, 1242], "class": [10, 11, 27, 29, 30, 35, 46, 47, 49, 50, 54, 55, 56, 57, 62, 73, 74, 79, 90, 92, 93, 98, 110, 111, 116, 127, 128, 133, 144, 145, 150, 163, 164, 169, 181, 183, 184, 190, 205, 209, 211, 212, 218, 233, 234, 240, 255, 256, 262, 277, 278, 284, 299, 302, 303, 308, 319, 320, 325, 336, 337, 342, 354, 355, 360, 371, 372, 377, 388, 389, 394, 406, 407, 412, 424, 425, 430, 444, 445, 450, 461, 462, 467, 478, 479, 484, 502, 510, 515, 523, 525, 529, 535, 553, 562, 563, 584, 585, 615, 616, 636, 637, 646, 647, 656, 657, 658, 684, 685, 709, 710, 733, 734, 754, 755, 780, 782, 783, 784, 795, 798, 799, 809, 813, 814, 824, 825, 840, 841, 858, 859, 876, 877, 892, 893, 903, 904, 905, 923, 924, 939, 940, 955, 959, 960, 976, 980, 981, 982, 997, 998, 999, 1014, 1015, 1016, 1031, 1035, 1036, 1049, 1050, 1066, 1067, 1074, 1083, 1084, 1085, 1100, 1101, 1102, 1122, 1123, 1129, 1130, 1164, 1171, 1173, 1174, 1183, 1186, 1187, 1196, 1197, 1206, 1207, 1216, 1217, 1218, 1227, 1228, 1239, 1243], "sourc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1243, 1247, 1248], "base": [10, 27, 29, 46, 47, 50, 54, 55, 56, 73, 90, 92, 108, 110, 127, 144, 163, 181, 183, 186, 187, 205, 211, 214, 215, 233, 236, 237, 255, 258, 259, 277, 280, 281, 299, 302, 319, 336, 343, 354, 371, 388, 401, 406, 424, 444, 461, 478, 502, 510, 515, 523, 525, 529, 535, 553, 562, 570, 584, 592, 594, 615, 623, 636, 646, 656, 657, 667, 684, 692, 709, 715, 717, 733, 739, 741, 754, 760, 762, 778, 779, 780, 781, 782, 783, 795, 797, 798, 809, 813, 824, 840, 845, 858, 863, 876, 892, 903, 904, 912, 914, 923, 939, 955, 959, 976, 980, 981, 988, 997, 998, 1014, 1015, 1031, 1035, 1049, 1066, 1083, 1084, 1100, 1101, 1122, 1151, 1156, 1157, 1171, 1173, 1183, 1186, 1196, 1206, 1216, 1217, 1227, 1240, 1241, 1242, 1255, 1256, 1258], "joint": [10, 12, 13, 14, 16, 17, 20, 21, 22, 29, 31, 32, 33, 35, 36, 39, 40, 46, 48, 50, 73, 75, 76, 77, 79, 80, 83, 84, 90, 92, 94, 95, 96, 98, 99, 102, 103, 108, 110, 112, 113, 114, 116, 117, 120, 121, 127, 129, 130, 131, 133, 134, 137, 138, 144, 146, 147, 148, 150, 151, 156, 157, 163, 165, 166, 167, 169, 170, 173, 174, 182, 183, 185, 186, 187, 188, 190, 191, 196, 197, 199, 205, 211, 213, 214, 215, 216, 218, 219, 224, 225, 227, 233, 235, 236, 237, 238, 240, 241, 246, 247, 249, 257, 258, 259, 260, 262, 263, 268, 269, 271, 277, 279, 280, 281, 282, 284, 285, 290, 291, 293, 299, 302, 304, 305, 306, 308, 309, 312, 313, 319, 321, 322, 323, 325, 326, 329, 330, 336, 338, 339, 340, 342, 344, 347, 348, 354, 356, 357, 358, 360, 361, 364, 365, 373, 374, 375, 377, 378, 381, 382, 388, 390, 391, 392, 394, 395, 398, 399, 401, 406, 408, 409, 410, 412, 413, 416, 417, 424, 426, 427, 428, 430, 431, 436, 437, 438, 444, 446, 447, 448, 450, 451, 454, 455, 461, 463, 464, 465, 467, 468, 471, 472, 478, 480, 481, 482, 484, 486, 491, 492, 498, 499, 501, 502, 504, 508, 510, 515, 522, 525, 534, 553, 559, 586, 605, 636, 696, 697, 701, 708, 709, 754, 779, 780, 849, 869, 1004, 1049, 1057, 1066, 1074, 1092, 1122, 1129, 1130, 1151, 1154, 1155, 1239, 1240, 1241, 1243, 1246, 1248, 1249, 1255, 1258], "repres": [10, 29, 92, 110, 127, 144, 302, 319, 336, 354, 388, 406, 444, 461, 478, 499, 562, 584, 615, 636, 657, 662, 669, 672, 684, 709, 754, 795, 809, 824, 840, 858, 876, 904, 923, 939, 959, 981, 996, 998, 1015, 1049, 1066, 1084, 1101, 1106, 1122, 1128, 1171, 1242, 1248, 1254], "ball": 10, "node": [10, 1124, 1125, 1126, 1127], "which": [10, 16, 20, 21, 29, 35, 39, 40, 51, 52, 53, 56, 62, 66, 67, 73, 79, 83, 84, 92, 98, 102, 103, 110, 116, 120, 121, 127, 133, 137, 138, 144, 150, 156, 157, 169, 173, 174, 190, 196, 197, 208, 209, 210, 211, 218, 224, 225, 240, 246, 247, 262, 268, 269, 284, 290, 291, 299, 302, 308, 312, 313, 319, 325, 329, 330, 336, 342, 347, 348, 354, 360, 364, 365, 377, 381, 382, 388, 394, 398, 399, 406, 412, 416, 417, 424, 430, 436, 437, 444, 450, 454, 455, 461, 467, 471, 472, 478, 484, 491, 492, 499, 500, 523, 553, 586, 589, 596, 597, 602, 603, 604, 605, 669, 673, 779, 780, 811, 869, 884, 885, 1042, 1092, 1106, 1126, 1127, 1130, 1171, 1173, 1206, 1217, 1240, 1242, 1248, 1249, 1255], "join": [10, 16, 29, 56, 73, 92, 110, 127, 144, 163, 302, 319, 336, 354, 388, 406, 444, 461, 478, 498, 499, 508, 510, 515, 522, 525, 534, 559, 779, 1242, 1249, 1255], "end": [10, 29, 56, 90, 92, 110, 127, 144, 302, 319, 336, 354, 388, 406, 478, 498, 501, 584, 586, 589, 596, 597, 599, 602, 604, 673, 824, 858, 923, 939, 959, 981, 988, 997, 1014, 1015, 1042, 1049, 1066, 1084, 1242, 1254], "multipl": [10, 47, 515, 1125], "beam": [10, 12, 13, 14, 16, 22, 27, 28, 29, 31, 32, 33, 41, 46, 47, 48, 50, 51, 52, 53, 56, 58, 59, 60, 68, 75, 77, 90, 92, 94, 95, 96, 104, 108, 110, 112, 113, 114, 122, 127, 129, 130, 131, 139, 144, 146, 147, 148, 158, 163, 165, 166, 167, 175, 180, 181, 182, 185, 188, 199, 208, 210, 213, 216, 227, 235, 238, 249, 257, 260, 271, 279, 282, 293, 301, 302, 304, 305, 306, 314, 319, 321, 322, 323, 331, 336, 338, 339, 340, 349, 354, 356, 357, 358, 366, 373, 374, 375, 383, 388, 390, 391, 400, 406, 408, 409, 410, 418, 423, 426, 427, 428, 438, 444, 446, 447, 448, 456, 461, 463, 464, 465, 473, 478, 480, 481, 482, 485, 490, 493, 498, 499, 500, 501, 510, 535, 565, 575, 618, 628, 660, 673, 675, 678, 684, 687, 699, 708, 709, 712, 724, 733, 736, 746, 754, 757, 769, 779, 824, 827, 831, 833, 840, 843, 846, 847, 848, 849, 858, 861, 864, 865, 866, 869, 907, 912, 913, 914, 923, 926, 928, 929, 932, 939, 942, 946, 947, 948, 955, 956, 957, 959, 962, 966, 967, 968, 975, 976, 977, 978, 981, 984, 988, 989, 990, 996, 998, 1001, 1003, 1004, 1013, 1015, 1018, 1022, 1023, 1030, 1031, 1032, 1033, 1038, 1042, 1049, 1053, 1057, 1058, 1062, 1066, 1070, 1074, 1075, 1076, 1084, 1087, 1089, 1092, 1099, 1101, 1104, 1106, 1122, 1127, 1138, 1151, 1206, 1237, 1242, 1243, 1246, 1247, 1252, 1254, 1255, 1257, 1258], "trim": [10, 29, 32, 92, 95, 144, 147, 305, 319, 322, 339, 357, 374, 391, 409, 447, 464, 478, 481, 932, 1252, 1255], "main": [10, 22, 29, 41, 52, 55, 68, 92, 104, 108, 110, 122, 139, 158, 163, 175, 199, 227, 249, 271, 293, 302, 314, 319, 331, 336, 349, 354, 366, 383, 388, 400, 406, 418, 438, 456, 473, 478, 493, 869, 1004, 1057, 1074, 1092, 1242, 1254], "pleas": [10, 29, 73, 92, 110, 127, 144, 163, 302, 319, 336, 354, 388, 406, 444, 461, 478, 1238, 1253], "properli": [10, 29, 73, 92, 110, 127, 144, 163, 302, 319, 336, 354, 388, 406, 444, 461, 478, 1242], "an": [10, 15, 16, 18, 19, 20, 21, 24, 25, 26, 29, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 51, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 78, 79, 81, 82, 83, 84, 87, 88, 89, 92, 97, 98, 100, 101, 102, 103, 106, 107, 109, 110, 115, 116, 118, 119, 120, 121, 124, 125, 126, 127, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 149, 150, 152, 153, 156, 157, 160, 161, 162, 163, 168, 169, 171, 172, 173, 174, 177, 178, 179, 180, 189, 190, 193, 194, 196, 197, 202, 203, 204, 208, 217, 218, 221, 222, 224, 225, 230, 231, 232, 239, 240, 243, 244, 246, 247, 252, 253, 254, 261, 262, 265, 266, 268, 269, 274, 275, 276, 283, 284, 287, 288, 290, 291, 296, 297, 298, 302, 307, 308, 310, 311, 312, 313, 316, 317, 318, 319, 324, 325, 327, 328, 329, 330, 333, 334, 335, 336, 341, 342, 345, 346, 347, 348, 351, 352, 353, 354, 359, 360, 362, 363, 364, 365, 368, 369, 370, 376, 377, 379, 380, 381, 382, 385, 386, 387, 388, 393, 394, 396, 397, 398, 399, 403, 404, 405, 406, 411, 412, 414, 415, 416, 417, 420, 421, 422, 429, 430, 433, 434, 436, 437, 441, 442, 443, 444, 449, 450, 452, 453, 454, 455, 458, 459, 460, 461, 466, 467, 469, 470, 471, 472, 475, 476, 477, 478, 483, 484, 487, 488, 491, 492, 495, 496, 497, 571, 572, 573, 578, 579, 583, 584, 595, 600, 601, 610, 611, 614, 615, 624, 625, 626, 631, 632, 635, 636, 638, 639, 640, 643, 644, 645, 648, 649, 650, 653, 654, 655, 657, 668, 670, 671, 679, 680, 683, 693, 694, 695, 703, 704, 707, 709, 718, 721, 722, 728, 729, 732, 733, 742, 743, 744, 749, 750, 753, 754, 763, 766, 767, 773, 774, 777, 778, 779, 781, 783, 785, 787, 788, 790, 791, 794, 795, 797, 801, 802, 803, 806, 807, 808, 810, 811, 815, 816, 817, 821, 822, 823, 828, 829, 830, 832, 837, 838, 839, 844, 850, 851, 855, 856, 857, 862, 867, 868, 869, 873, 874, 875, 880, 882, 883, 889, 890, 891, 894, 895, 896, 900, 901, 902, 909, 910, 911, 912, 913, 914, 920, 921, 922, 927, 930, 931, 936, 937, 938, 943, 944, 945, 952, 953, 954, 963, 964, 965, 972, 973, 974, 985, 986, 987, 993, 994, 995, 1002, 1005, 1006, 1010, 1011, 1012, 1019, 1020, 1021, 1027, 1028, 1029, 1039, 1040, 1041, 1046, 1047, 1048, 1054, 1055, 1056, 1063, 1064, 1065, 1071, 1072, 1073, 1080, 1081, 1082, 1088, 1090, 1091, 1092, 1096, 1097, 1098, 1105, 1107, 1108, 1112, 1113, 1114, 1124, 1127, 1128, 1129, 1130, 1132, 1137, 1141, 1142, 1147, 1151, 1152, 1162, 1163, 1170, 1171, 1176, 1177, 1178, 1180, 1181, 1182, 1188, 1189, 1190, 1192, 1193, 1195, 1198, 1199, 1200, 1202, 1203, 1205, 1208, 1209, 1210, 1212, 1213, 1215, 1219, 1220, 1221, 1223, 1224, 1226, 1229, 1230, 1231, 1233, 1234, 1236, 1238, 1242, 1243, 1245, 1246, 1247, 1248, 1254], "instanc": [10, 11, 16, 18, 19, 20, 21, 29, 30, 35, 37, 38, 39, 40, 46, 47, 49, 57, 62, 64, 65, 66, 67, 73, 74, 79, 81, 82, 83, 84, 92, 93, 98, 100, 101, 102, 103, 110, 111, 116, 118, 119, 120, 121, 127, 128, 133, 135, 136, 137, 138, 144, 145, 150, 152, 153, 156, 157, 163, 164, 169, 171, 172, 173, 174, 180, 184, 190, 193, 194, 196, 197, 212, 218, 221, 222, 224, 225, 234, 240, 243, 244, 246, 247, 256, 262, 265, 266, 268, 269, 278, 284, 287, 288, 290, 291, 302, 303, 308, 310, 311, 312, 313, 319, 320, 325, 327, 328, 329, 330, 336, 337, 342, 345, 346, 347, 348, 354, 355, 360, 362, 363, 364, 365, 372, 377, 379, 380, 381, 382, 388, 389, 394, 396, 397, 398, 399, 406, 407, 412, 414, 415, 416, 417, 425, 430, 433, 434, 436, 437, 444, 445, 450, 452, 453, 454, 455, 461, 462, 467, 469, 470, 471, 472, 478, 479, 484, 487, 488, 491, 492, 530, 563, 572, 573, 585, 600, 601, 616, 625, 626, 636, 637, 639, 640, 647, 649, 650, 658, 670, 671, 684, 685, 694, 695, 710, 721, 722, 734, 743, 744, 755, 766, 767, 784, 787, 788, 799, 802, 803, 804, 811, 814, 816, 817, 819, 825, 827, 829, 830, 831, 833, 835, 841, 843, 846, 847, 848, 849, 850, 851, 853, 859, 861, 864, 865, 866, 867, 868, 869, 871, 877, 881, 882, 883, 887, 893, 895, 896, 898, 905, 910, 911, 918, 924, 926, 928, 929, 930, 931, 932, 934, 940, 942, 944, 945, 946, 948, 950, 955, 956, 957, 958, 960, 962, 964, 965, 966, 967, 968, 970, 975, 976, 977, 978, 979, 982, 984, 986, 987, 988, 990, 991, 996, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1013, 1016, 1018, 1020, 1021, 1022, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1040, 1041, 1042, 1044, 1050, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1062, 1067, 1068, 1070, 1072, 1073, 1074, 1075, 1076, 1078, 1085, 1087, 1089, 1090, 1091, 1092, 1094, 1099, 1102, 1107, 1108, 1110, 1123, 1129, 1130, 1141, 1142, 1174, 1177, 1178, 1187, 1189, 1190, 1197, 1199, 1200, 1207, 1209, 1210, 1218, 1220, 1221, 1228, 1230, 1231, 1240, 1242], "associ": [10, 22, 29, 68, 73, 92, 110, 127, 144, 163, 199, 227, 249, 271, 293, 302, 319, 336, 354, 388, 406, 438, 444, 461, 478, 657, 662, 892, 1217, 1242, 1245], "paramet": [10, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 56, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 156, 157, 159, 160, 161, 162, 163, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 189, 190, 191, 193, 194, 196, 197, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 217, 218, 219, 221, 222, 224, 225, 229, 230, 231, 232, 239, 240, 241, 243, 244, 246, 247, 251, 252, 253, 254, 261, 262, 263, 265, 266, 268, 269, 273, 274, 275, 276, 283, 284, 285, 287, 288, 290, 291, 295, 296, 297, 298, 302, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 429, 430, 431, 433, 434, 436, 437, 440, 441, 442, 443, 444, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 483, 484, 486, 487, 488, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 508, 509, 515, 517, 522, 530, 534, 535, 553, 555, 559, 562, 564, 565, 566, 569, 571, 572, 573, 575, 577, 578, 579, 580, 581, 583, 584, 587, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 642, 643, 644, 645, 648, 649, 650, 652, 653, 654, 655, 657, 659, 660, 662, 663, 665, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 691, 693, 694, 695, 699, 702, 703, 704, 705, 706, 707, 711, 712, 713, 715, 716, 718, 721, 722, 724, 727, 728, 729, 730, 731, 732, 735, 736, 737, 739, 740, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 756, 757, 758, 760, 761, 763, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 783, 785, 787, 788, 789, 790, 791, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 909, 910, 911, 912, 913, 914, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1120, 1121, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1242, 1247, 1257], "list": [10, 16, 17, 20, 21, 36, 39, 40, 46, 47, 49, 51, 56, 63, 66, 67, 80, 83, 84, 99, 102, 103, 117, 120, 121, 134, 137, 138, 151, 156, 157, 163, 170, 173, 174, 182, 191, 196, 197, 208, 219, 224, 225, 241, 246, 247, 263, 268, 269, 285, 290, 291, 309, 312, 313, 326, 329, 330, 336, 344, 347, 348, 361, 364, 365, 378, 381, 382, 395, 398, 399, 406, 413, 416, 417, 431, 436, 437, 451, 454, 455, 468, 471, 472, 478, 486, 491, 492, 500, 502, 508, 510, 515, 522, 530, 534, 535, 555, 559, 562, 564, 565, 575, 584, 587, 588, 596, 606, 617, 618, 628, 636, 659, 660, 675, 684, 686, 699, 711, 712, 724, 735, 736, 746, 756, 757, 769, 779, 780, 783, 795, 831, 833, 846, 912, 913, 914, 1106, 1120, 1122, 1125, 1132, 1140, 1144, 1151, 1217, 1237, 1242, 1254, 1256], "base_interfac": 10, "fastenertimberinterfac": [10, 13, 1243], "describ": [10, 1242], "interfac": [10, 27, 54, 55, 211, 299, 300, 424, 568, 582, 636, 641, 661, 1241, 1243], "between": [10, 52, 53, 90, 110, 127, 144, 209, 210, 354, 444, 517, 535, 636, 684, 797, 840, 858, 988, 998, 1084, 1122, 1128, 1136, 1147, 1149, 1153, 1242, 1247, 1249, 1252, 1254, 1258], "fasten": [10, 13, 319, 562, 568, 636, 684, 690, 696, 697, 780, 1243], "each": [10, 56, 182, 461, 597, 988, 1173, 1240, 1242, 1247, 1254, 1256], "timber": [10, 13, 535, 562, 584, 615, 636, 657, 684, 709, 733, 754, 809, 1122, 1153, 1238, 1239, 1240, 1242, 1244, 1246, 1248, 1249, 1251, 1253, 1256, 1258], "ball_diamet": 10, "float": [10, 29, 51, 52, 53, 92, 110, 127, 206, 207, 208, 209, 210, 302, 319, 336, 343, 354, 388, 406, 444, 478, 498, 499, 500, 502, 504, 508, 515, 517, 522, 534, 535, 553, 555, 559, 566, 569, 584, 586, 590, 593, 597, 598, 599, 603, 619, 622, 636, 657, 663, 669, 672, 684, 688, 691, 713, 716, 737, 740, 758, 761, 795, 804, 813, 818, 819, 824, 834, 835, 840, 845, 849, 852, 853, 858, 863, 869, 870, 871, 876, 884, 885, 886, 887, 897, 898, 912, 913, 917, 918, 923, 929, 933, 934, 939, 949, 950, 959, 966, 969, 970, 981, 988, 991, 998, 1004, 1007, 1008, 1015, 1024, 1025, 1043, 1044, 1049, 1052, 1059, 1060, 1066, 1068, 1077, 1078, 1084, 1092, 1093, 1094, 1101, 1109, 1110, 1122, 1136, 1156, 1157, 1158, 1159, 1237, 1240, 1254], "diamet": [10, 110, 336, 343, 636, 684, 845, 863, 876, 884, 885, 923, 929, 1252, 1254], "attribut": [10, 29, 35, 46, 54, 55, 56, 62, 73, 79, 90, 92, 98, 110, 116, 127, 133, 144, 150, 163, 169, 190, 211, 218, 240, 262, 284, 302, 308, 319, 325, 336, 342, 354, 360, 377, 388, 394, 406, 412, 424, 430, 444, 450, 461, 467, 478, 484, 502, 504, 509, 510, 535, 562, 584, 615, 636, 657, 684, 733, 778, 779, 780, 781, 782, 783, 795, 798, 813, 892, 903, 980, 997, 1014, 1083, 1100, 1122, 1126, 1130, 1153, 1216, 1217, 1240, 1242, 1243, 1246, 1248], "generated_el": [10, 56], "gener": [10, 13, 16, 21, 40, 53, 56, 67, 84, 103, 121, 138, 157, 174, 197, 209, 210, 225, 247, 269, 291, 313, 330, 348, 365, 382, 388, 399, 417, 437, 455, 472, 492, 615, 636, 783, 813, 892, 1122, 1143, 1216, 1242, 1248, 1249, 1254, 1258], "method": [10, 11, 16, 22, 27, 29, 30, 31, 32, 35, 47, 50, 52, 56, 57, 62, 68, 73, 74, 79, 90, 92, 93, 94, 95, 98, 110, 111, 112, 113, 114, 116, 127, 128, 129, 130, 133, 144, 145, 146, 147, 150, 163, 164, 169, 181, 183, 184, 190, 199, 205, 211, 212, 218, 227, 233, 234, 240, 249, 255, 256, 262, 271, 277, 278, 284, 293, 299, 302, 303, 304, 305, 308, 319, 320, 321, 322, 325, 336, 337, 338, 339, 342, 354, 355, 356, 357, 360, 371, 372, 373, 374, 377, 388, 389, 390, 391, 394, 406, 407, 408, 409, 412, 424, 425, 430, 438, 444, 445, 447, 450, 461, 462, 464, 467, 478, 479, 480, 481, 482, 484, 502, 510, 515, 523, 525, 529, 535, 553, 562, 563, 584, 585, 589, 602, 604, 615, 616, 636, 637, 646, 647, 657, 658, 673, 684, 685, 697, 709, 710, 733, 734, 754, 755, 783, 784, 795, 798, 799, 809, 813, 814, 824, 825, 840, 841, 858, 859, 869, 876, 877, 892, 893, 904, 905, 923, 924, 939, 940, 955, 959, 960, 966, 976, 981, 982, 998, 999, 1015, 1016, 1031, 1035, 1036, 1049, 1050, 1066, 1067, 1084, 1085, 1092, 1101, 1102, 1122, 1123, 1151, 1171, 1173, 1174, 1183, 1186, 1187, 1196, 1197, 1206, 1207, 1217, 1218, 1227, 1228, 1243], "inherit": [10, 29, 56, 73, 92, 110, 127, 144, 163, 183, 205, 211, 233, 255, 277, 302, 319, 336, 354, 371, 388, 406, 424, 444, 461, 478, 502, 515, 553, 562, 584, 615, 636, 646, 657, 684, 709, 733, 754, 783, 798, 813, 824, 840, 858, 876, 892, 904, 923, 939, 959, 981, 998, 1015, 1035, 1049, 1066, 1084, 1101, 1122, 1173, 1186, 1196, 1206, 1217, 1227, 1240, 1241, 1242, 1243], "string": [11, 19, 25, 30, 38, 44, 57, 65, 71, 74, 82, 88, 91, 93, 101, 107, 111, 119, 125, 128, 136, 142, 145, 153, 161, 164, 172, 178, 184, 194, 203, 212, 222, 231, 234, 244, 253, 256, 266, 275, 278, 288, 297, 303, 311, 317, 320, 328, 334, 337, 346, 352, 355, 363, 369, 372, 380, 386, 389, 397, 404, 407, 415, 421, 425, 434, 442, 445, 453, 459, 462, 470, 476, 479, 488, 496, 563, 573, 579, 585, 601, 611, 616, 626, 632, 637, 640, 644, 647, 650, 654, 658, 671, 680, 685, 695, 704, 710, 722, 729, 734, 744, 750, 755, 767, 774, 779, 784, 788, 791, 799, 803, 807, 810, 812, 814, 817, 822, 825, 830, 838, 841, 851, 856, 859, 868, 874, 877, 883, 890, 893, 896, 901, 905, 911, 921, 924, 931, 937, 940, 945, 953, 960, 965, 973, 982, 987, 994, 999, 1006, 1011, 1016, 1021, 1028, 1036, 1041, 1047, 1050, 1056, 1064, 1067, 1073, 1081, 1085, 1091, 1097, 1102, 1108, 1113, 1123, 1142, 1163, 1172, 1174, 1178, 1181, 1187, 1190, 1193, 1197, 1200, 1203, 1207, 1210, 1213, 1218, 1221, 1224, 1228, 1231, 1234, 1240, 1247, 1248, 1254], "exist": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1052, 1067, 1068, 1085, 1102, 1123, 1127, 1146, 1174, 1187, 1197, 1207, 1218, 1228, 1240], "net": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "compat": [11, 14, 29, 30, 33, 57, 60, 74, 77, 92, 93, 96, 110, 111, 114, 127, 128, 131, 144, 145, 148, 164, 167, 184, 188, 212, 216, 234, 238, 256, 260, 278, 282, 302, 303, 306, 319, 320, 323, 336, 337, 340, 354, 355, 358, 372, 375, 388, 389, 392, 406, 407, 410, 425, 428, 444, 445, 448, 461, 462, 465, 479, 482, 500, 563, 585, 616, 637, 647, 658, 685, 708, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1242], "when": [11, 30, 31, 32, 51, 57, 74, 93, 94, 95, 111, 112, 128, 129, 130, 145, 146, 147, 164, 184, 208, 212, 234, 256, 278, 303, 304, 305, 320, 321, 322, 337, 338, 339, 355, 356, 357, 372, 373, 374, 389, 390, 391, 407, 408, 409, 425, 445, 447, 462, 464, 479, 480, 481, 498, 499, 563, 585, 586, 616, 637, 647, 658, 685, 697, 710, 734, 755, 778, 780, 781, 784, 795, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1240, 1242, 1247, 1254], "ironpython": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "implicit": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "convers": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1240], "usual": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 584, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "take": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 811, 814, 825, 841, 859, 877, 884, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1240, 1258], "place": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1164, 1174, 1187, 1197, 1207, 1218, 1228, 1254], "cpython": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1244], "kick": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "its": [11, 24, 25, 30, 43, 44, 57, 70, 71, 74, 87, 88, 93, 106, 107, 111, 124, 125, 128, 141, 142, 145, 160, 161, 164, 177, 178, 184, 202, 203, 212, 230, 231, 234, 252, 253, 256, 274, 275, 278, 296, 297, 303, 316, 317, 320, 333, 334, 336, 337, 351, 352, 355, 368, 369, 372, 385, 386, 389, 403, 404, 406, 407, 420, 421, 425, 441, 442, 445, 458, 459, 462, 475, 476, 479, 495, 496, 498, 501, 563, 570, 576, 578, 579, 585, 594, 598, 607, 610, 611, 616, 623, 629, 631, 632, 637, 643, 644, 647, 653, 654, 658, 667, 676, 679, 680, 685, 692, 700, 703, 704, 710, 717, 725, 728, 729, 734, 741, 747, 749, 750, 755, 762, 770, 773, 774, 778, 784, 790, 791, 799, 806, 807, 811, 814, 821, 822, 825, 837, 838, 841, 855, 856, 859, 873, 874, 877, 889, 890, 893, 900, 901, 905, 920, 921, 924, 936, 937, 940, 952, 953, 960, 972, 973, 982, 993, 994, 999, 1010, 1011, 1016, 1027, 1028, 1036, 1042, 1046, 1047, 1050, 1063, 1064, 1067, 1080, 1081, 1085, 1096, 1097, 1102, 1112, 1113, 1123, 1138, 1162, 1163, 1174, 1180, 1181, 1187, 1192, 1193, 1197, 1202, 1203, 1207, 1212, 1213, 1218, 1223, 1224, 1228, 1233, 1234, 1242, 1244, 1247, 1254], "default": [11, 15, 29, 30, 34, 48, 49, 57, 61, 74, 78, 92, 93, 97, 111, 115, 127, 128, 132, 145, 149, 164, 168, 180, 181, 182, 184, 189, 212, 217, 234, 239, 256, 261, 278, 283, 303, 307, 320, 324, 337, 341, 354, 355, 359, 372, 376, 389, 393, 401, 407, 411, 425, 429, 444, 445, 449, 462, 466, 479, 483, 504, 517, 535, 555, 563, 571, 585, 595, 598, 599, 616, 624, 637, 638, 647, 648, 657, 658, 668, 672, 684, 685, 693, 710, 718, 734, 742, 755, 763, 784, 785, 795, 798, 799, 801, 809, 814, 815, 825, 828, 831, 841, 844, 849, 859, 862, 869, 876, 877, 880, 893, 894, 904, 905, 909, 912, 913, 914, 924, 927, 929, 940, 943, 946, 955, 957, 959, 960, 963, 966, 967, 968, 976, 978, 982, 985, 988, 999, 1002, 1004, 1015, 1016, 1019, 1022, 1023, 1031, 1033, 1036, 1039, 1050, 1054, 1057, 1067, 1071, 1074, 1085, 1088, 1092, 1101, 1102, 1105, 1116, 1120, 1123, 1136, 1137, 1151, 1156, 1157, 1158, 1159, 1174, 1176, 1187, 1188, 1197, 1198, 1207, 1208, 1218, 1219, 1228, 1229, 1240, 1243, 1248, 1249, 1255, 1257], "print": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "self": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1240, 1242], "gettyp": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "fullnam": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "similar": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 778, 781, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1242, 1244, 1254], "overrid": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 553, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1249], "object": [11, 15, 16, 18, 19, 22, 24, 25, 26, 27, 30, 34, 37, 38, 43, 44, 45, 46, 47, 50, 51, 54, 55, 57, 61, 64, 65, 68, 70, 71, 72, 74, 78, 81, 82, 87, 88, 89, 90, 93, 97, 100, 101, 106, 107, 109, 111, 115, 118, 119, 124, 125, 126, 128, 132, 135, 136, 141, 142, 143, 145, 149, 152, 153, 160, 161, 162, 164, 168, 171, 172, 177, 178, 179, 184, 189, 193, 194, 199, 202, 203, 204, 208, 212, 217, 221, 222, 227, 230, 231, 232, 234, 239, 243, 244, 249, 252, 253, 254, 256, 261, 265, 266, 271, 274, 275, 276, 278, 283, 287, 288, 293, 296, 297, 298, 299, 303, 307, 310, 311, 316, 317, 318, 320, 324, 327, 328, 333, 334, 335, 337, 341, 345, 346, 351, 352, 353, 355, 359, 362, 363, 368, 369, 370, 372, 376, 379, 380, 385, 386, 387, 389, 393, 396, 397, 403, 404, 405, 407, 411, 414, 415, 420, 421, 422, 425, 429, 433, 434, 438, 441, 442, 443, 445, 449, 452, 453, 458, 459, 460, 462, 466, 469, 470, 475, 476, 477, 479, 483, 487, 488, 495, 496, 497, 500, 510, 523, 525, 529, 535, 563, 571, 572, 573, 578, 579, 583, 585, 595, 600, 601, 610, 611, 614, 616, 624, 625, 626, 631, 632, 635, 637, 638, 639, 640, 643, 644, 645, 647, 648, 649, 650, 653, 654, 655, 656, 658, 668, 669, 670, 671, 672, 679, 680, 683, 685, 693, 694, 695, 703, 704, 707, 710, 718, 721, 722, 728, 729, 732, 734, 742, 743, 744, 749, 750, 753, 755, 763, 766, 767, 773, 774, 777, 782, 784, 785, 787, 788, 790, 791, 794, 795, 799, 801, 802, 803, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 837, 838, 839, 841, 844, 850, 851, 855, 856, 857, 859, 862, 867, 868, 873, 874, 875, 877, 880, 881, 882, 883, 889, 890, 891, 893, 894, 895, 896, 900, 901, 902, 903, 904, 905, 909, 910, 911, 920, 921, 922, 924, 927, 930, 931, 936, 937, 938, 940, 943, 944, 945, 952, 953, 954, 955, 960, 963, 964, 965, 972, 973, 974, 976, 980, 982, 985, 986, 987, 993, 994, 995, 997, 999, 1002, 1005, 1006, 1010, 1011, 1012, 1014, 1016, 1019, 1020, 1021, 1027, 1028, 1029, 1031, 1036, 1039, 1040, 1041, 1046, 1047, 1048, 1050, 1054, 1055, 1056, 1063, 1064, 1065, 1067, 1071, 1072, 1073, 1080, 1081, 1082, 1083, 1085, 1088, 1090, 1091, 1096, 1097, 1098, 1100, 1102, 1105, 1107, 1108, 1112, 1113, 1114, 1115, 1116, 1120, 1121, 1122, 1123, 1128, 1129, 1137, 1141, 1142, 1154, 1162, 1163, 1170, 1171, 1174, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1187, 1188, 1189, 1190, 1192, 1193, 1195, 1197, 1198, 1199, 1200, 1202, 1203, 1205, 1207, 1208, 1209, 1210, 1212, 1213, 1215, 1216, 1218, 1219, 1220, 1221, 1223, 1224, 1226, 1228, 1229, 1230, 1231, 1233, 1234, 1236, 1240, 1243, 1247, 1248, 1249, 1255, 1257], "fix": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "make": [11, 15, 30, 34, 57, 61, 74, 78, 93, 97, 111, 115, 128, 132, 145, 149, 164, 168, 184, 189, 212, 217, 234, 239, 256, 261, 278, 283, 303, 307, 320, 324, 337, 341, 355, 359, 372, 376, 389, 393, 407, 411, 425, 429, 445, 449, 462, 466, 479, 483, 563, 571, 585, 595, 616, 624, 636, 637, 638, 647, 648, 658, 668, 685, 693, 710, 718, 719, 734, 742, 755, 763, 764, 784, 785, 795, 799, 801, 814, 815, 825, 828, 841, 844, 859, 862, 877, 880, 884, 893, 894, 905, 909, 924, 927, 940, 943, 960, 963, 982, 985, 999, 1002, 1016, 1019, 1036, 1039, 1042, 1050, 1054, 1067, 1071, 1085, 1088, 1102, 1105, 1123, 1137, 1174, 1176, 1187, 1188, 1197, 1198, 1207, 1208, 1218, 1219, 1228, 1229], "grasshopp": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1115, 1116, 1120, 1121, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1243, 1244, 1248, 1253, 1254, 1258], "displai": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1104, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1247, 1256], "proper": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228, 1242], "represent": [11, 24, 25, 30, 43, 44, 57, 70, 71, 74, 87, 88, 91, 93, 106, 107, 111, 124, 125, 128, 141, 142, 145, 160, 161, 164, 177, 178, 184, 202, 203, 212, 230, 231, 234, 252, 253, 256, 274, 275, 278, 296, 297, 303, 316, 317, 320, 333, 334, 337, 351, 352, 355, 368, 369, 372, 385, 386, 389, 403, 404, 407, 420, 421, 425, 441, 442, 445, 458, 459, 462, 475, 476, 479, 495, 496, 563, 578, 579, 585, 610, 611, 616, 631, 632, 636, 637, 643, 644, 647, 653, 654, 658, 679, 680, 685, 703, 704, 710, 728, 729, 734, 749, 750, 755, 773, 774, 784, 790, 791, 799, 806, 807, 814, 821, 822, 825, 837, 838, 841, 855, 856, 859, 873, 874, 877, 889, 890, 893, 900, 901, 905, 920, 921, 924, 936, 937, 940, 952, 953, 960, 972, 973, 982, 993, 994, 999, 1010, 1011, 1016, 1027, 1028, 1036, 1046, 1047, 1050, 1063, 1064, 1067, 1080, 1081, 1085, 1096, 1097, 1102, 1112, 1113, 1123, 1162, 1163, 1172, 1174, 1180, 1181, 1187, 1192, 1193, 1197, 1202, 1203, 1207, 1212, 1213, 1218, 1223, 1224, 1228, 1233, 1234, 1240, 1241], "panel": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 535, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "other": [11, 30, 54, 56, 57, 74, 90, 93, 110, 111, 127, 128, 145, 163, 164, 184, 209, 212, 234, 256, 278, 299, 302, 303, 320, 336, 337, 354, 355, 372, 388, 389, 406, 407, 425, 444, 445, 461, 462, 479, 498, 501, 527, 563, 585, 616, 637, 647, 657, 658, 685, 709, 710, 733, 734, 754, 755, 784, 795, 799, 813, 814, 825, 841, 859, 877, 892, 893, 905, 924, 929, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1127, 1153, 1174, 1187, 1197, 1207, 1218, 1228, 1238, 1240, 1242, 1245, 1254, 1258], "output": [11, 24, 25, 30, 43, 44, 52, 57, 70, 71, 74, 87, 88, 93, 106, 107, 111, 124, 125, 128, 141, 142, 145, 160, 161, 164, 177, 178, 184, 202, 203, 212, 230, 231, 234, 252, 253, 256, 274, 275, 278, 296, 297, 303, 316, 317, 320, 333, 334, 337, 351, 352, 355, 368, 369, 372, 385, 386, 389, 403, 404, 407, 420, 421, 425, 441, 442, 445, 458, 459, 462, 475, 476, 479, 495, 496, 563, 578, 579, 585, 610, 611, 616, 631, 632, 637, 643, 644, 647, 653, 654, 658, 679, 680, 685, 703, 704, 710, 728, 729, 734, 749, 750, 755, 773, 774, 784, 790, 791, 799, 806, 807, 814, 821, 822, 825, 837, 838, 841, 855, 856, 859, 873, 874, 877, 889, 890, 893, 900, 901, 905, 920, 921, 924, 936, 937, 940, 952, 953, 960, 972, 973, 982, 993, 994, 999, 1010, 1011, 1016, 1027, 1028, 1036, 1046, 1047, 1050, 1063, 1064, 1067, 1080, 1081, 1085, 1096, 1097, 1102, 1112, 1113, 1115, 1123, 1162, 1163, 1174, 1180, 1181, 1187, 1192, 1193, 1197, 1202, 1203, 1207, 1212, 1213, 1218, 1223, 1224, 1228, 1233, 1234, 1248, 1249, 1251, 1252, 1255], "add": [12, 13, 31, 32, 58, 59, 73, 75, 76, 94, 95, 112, 113, 129, 130, 146, 147, 165, 166, 185, 186, 213, 214, 235, 236, 257, 258, 279, 280, 304, 305, 321, 322, 338, 339, 356, 357, 373, 374, 390, 391, 408, 409, 426, 427, 446, 447, 463, 464, 480, 481, 564, 565, 586, 587, 588, 617, 618, 641, 657, 659, 660, 686, 687, 697, 711, 712, 735, 736, 756, 757, 800, 813, 826, 842, 860, 878, 892, 906, 925, 941, 961, 983, 1000, 1017, 1037, 1051, 1052, 1068, 1069, 1086, 1103, 1115, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1151, 1246, 1255, 1257, 1258], "extens": [12, 31, 32, 58, 75, 94, 95, 112, 113, 129, 146, 147, 165, 185, 213, 235, 257, 279, 304, 321, 322, 338, 356, 357, 373, 390, 408, 426, 446, 447, 463, 464, 480, 481, 576, 586, 597, 605, 607, 629, 657, 672, 676, 700, 725, 747, 770, 1151, 1242], "defin": [12, 20, 21, 39, 40, 58, 59, 66, 67, 75, 83, 84, 102, 103, 120, 121, 137, 138, 156, 157, 165, 166, 173, 174, 185, 196, 197, 213, 224, 225, 235, 246, 247, 257, 268, 269, 279, 290, 291, 312, 313, 329, 330, 336, 343, 347, 348, 364, 365, 381, 382, 398, 399, 406, 416, 417, 426, 427, 436, 437, 446, 454, 455, 463, 471, 472, 491, 492, 518, 528, 530, 598, 636, 657, 684, 831, 845, 863, 869, 966, 1092, 1240, 1241, 1247, 1248, 1249, 1254, 1257, 1258], "affect": [12, 58, 59, 75, 165, 166, 185, 213, 235, 257, 279, 426, 427, 446, 463], "": [12, 17, 20, 21, 26, 35, 36, 39, 40, 45, 58, 59, 62, 63, 66, 67, 72, 75, 79, 80, 83, 84, 89, 98, 99, 102, 103, 109, 114, 116, 117, 120, 121, 126, 133, 134, 137, 138, 143, 150, 151, 156, 157, 162, 165, 166, 169, 170, 173, 174, 179, 185, 190, 191, 196, 197, 204, 211, 213, 218, 219, 224, 225, 232, 235, 240, 241, 246, 247, 254, 257, 262, 263, 268, 269, 276, 279, 284, 285, 290, 291, 298, 302, 308, 309, 312, 313, 318, 325, 326, 329, 330, 335, 336, 342, 344, 347, 348, 353, 360, 361, 364, 365, 370, 377, 378, 381, 382, 387, 388, 394, 395, 398, 399, 405, 406, 412, 413, 416, 417, 422, 426, 427, 430, 431, 436, 437, 443, 446, 450, 451, 454, 455, 460, 463, 467, 468, 471, 472, 477, 484, 486, 491, 492, 497, 498, 499, 583, 584, 589, 596, 598, 599, 602, 604, 614, 615, 635, 636, 645, 655, 673, 683, 707, 732, 753, 777, 794, 795, 808, 823, 839, 849, 857, 875, 891, 902, 922, 938, 954, 974, 988, 995, 1004, 1012, 1029, 1048, 1065, 1066, 1082, 1098, 1114, 1127, 1170, 1182, 1195, 1205, 1215, 1226, 1236, 1240, 1242, 1247, 1248, 1253, 1254, 1257], "i": [12, 14, 16, 18, 19, 20, 21, 22, 26, 29, 31, 32, 33, 35, 37, 38, 39, 40, 45, 49, 51, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 67, 68, 72, 73, 75, 77, 79, 81, 82, 83, 84, 89, 90, 92, 94, 95, 96, 98, 100, 101, 102, 103, 108, 109, 110, 112, 113, 116, 118, 119, 120, 121, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138, 143, 144, 146, 147, 148, 150, 152, 153, 154, 156, 157, 162, 163, 165, 167, 169, 171, 172, 173, 174, 179, 180, 181, 185, 188, 190, 193, 194, 196, 197, 199, 204, 207, 208, 213, 216, 218, 221, 222, 224, 225, 227, 232, 235, 238, 240, 243, 244, 246, 247, 249, 254, 257, 260, 262, 265, 266, 268, 269, 271, 276, 279, 282, 284, 287, 288, 290, 291, 293, 298, 299, 302, 304, 305, 306, 308, 310, 311, 312, 313, 318, 319, 321, 322, 323, 325, 327, 328, 329, 330, 335, 336, 338, 339, 340, 342, 345, 346, 347, 348, 353, 354, 356, 357, 358, 360, 362, 363, 364, 365, 370, 373, 374, 375, 377, 379, 380, 381, 382, 387, 388, 390, 391, 394, 396, 397, 398, 399, 405, 406, 408, 409, 410, 412, 414, 415, 416, 417, 422, 424, 426, 428, 430, 433, 434, 436, 437, 438, 443, 444, 446, 447, 448, 450, 452, 453, 454, 455, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 477, 480, 481, 484, 487, 488, 491, 492, 497, 498, 499, 500, 504, 517, 535, 553, 555, 572, 573, 583, 584, 586, 596, 597, 600, 601, 604, 614, 615, 625, 626, 635, 636, 639, 640, 645, 649, 650, 655, 657, 669, 670, 671, 672, 673, 683, 684, 694, 695, 697, 707, 709, 719, 721, 722, 732, 733, 743, 744, 753, 754, 764, 766, 767, 777, 778, 787, 788, 794, 795, 798, 802, 803, 808, 809, 813, 816, 817, 823, 827, 829, 830, 831, 833, 839, 840, 843, 846, 847, 848, 849, 850, 851, 857, 858, 861, 865, 866, 867, 868, 869, 875, 876, 882, 883, 884, 885, 891, 892, 895, 896, 902, 904, 910, 911, 912, 913, 914, 922, 926, 928, 929, 930, 931, 932, 938, 942, 944, 945, 946, 948, 954, 955, 956, 957, 959, 962, 964, 965, 966, 967, 968, 974, 975, 976, 977, 978, 981, 984, 986, 987, 988, 990, 995, 996, 998, 1001, 1003, 1004, 1005, 1006, 1012, 1013, 1014, 1015, 1018, 1020, 1021, 1022, 1023, 1029, 1030, 1031, 1032, 1033, 1038, 1040, 1041, 1042, 1048, 1053, 1055, 1056, 1057, 1058, 1062, 1065, 1066, 1070, 1072, 1073, 1074, 1075, 1076, 1082, 1084, 1087, 1089, 1090, 1091, 1092, 1098, 1099, 1101, 1106, 1107, 1108, 1114, 1116, 1120, 1122, 1124, 1127, 1132, 1136, 1141, 1142, 1151, 1164, 1170, 1173, 1177, 1178, 1182, 1189, 1190, 1195, 1199, 1200, 1205, 1209, 1210, 1215, 1216, 1220, 1221, 1226, 1230, 1231, 1236, 1238, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1254, 1255, 1257, 1258], "option": [12, 14, 15, 20, 21, 23, 24, 25, 29, 33, 34, 39, 40, 42, 43, 44, 51, 52, 53, 58, 60, 61, 66, 67, 69, 70, 71, 75, 77, 78, 83, 84, 86, 87, 88, 92, 96, 97, 102, 103, 105, 106, 107, 115, 120, 121, 123, 124, 125, 131, 132, 137, 138, 140, 141, 142, 144, 148, 149, 156, 157, 159, 160, 161, 165, 167, 168, 173, 174, 176, 177, 178, 185, 188, 189, 196, 197, 201, 202, 203, 206, 207, 208, 209, 210, 211, 213, 216, 217, 224, 225, 229, 230, 231, 235, 238, 239, 246, 247, 251, 252, 253, 257, 260, 261, 268, 269, 273, 274, 275, 279, 282, 283, 290, 291, 295, 296, 297, 306, 307, 312, 313, 315, 316, 317, 319, 323, 324, 329, 330, 332, 333, 334, 336, 340, 341, 347, 348, 350, 351, 352, 358, 359, 364, 365, 367, 368, 369, 375, 376, 381, 382, 384, 385, 386, 393, 398, 399, 402, 403, 404, 410, 411, 416, 417, 419, 420, 421, 426, 428, 429, 436, 437, 440, 441, 442, 446, 448, 449, 454, 455, 457, 458, 459, 463, 465, 466, 471, 472, 474, 475, 476, 483, 491, 492, 494, 495, 496, 498, 499, 500, 502, 504, 508, 515, 517, 522, 534, 535, 553, 555, 559, 566, 571, 577, 578, 579, 584, 590, 592, 595, 608, 610, 611, 619, 624, 630, 631, 632, 636, 638, 642, 643, 644, 648, 652, 653, 654, 657, 663, 665, 668, 669, 672, 677, 679, 680, 684, 688, 693, 702, 703, 704, 713, 715, 718, 727, 728, 729, 737, 739, 742, 748, 749, 750, 758, 760, 763, 772, 773, 774, 785, 789, 790, 791, 795, 801, 805, 806, 807, 809, 815, 820, 821, 822, 828, 831, 836, 837, 838, 844, 849, 854, 855, 856, 862, 869, 872, 873, 874, 880, 888, 889, 890, 894, 899, 900, 901, 904, 909, 912, 913, 914, 919, 920, 921, 927, 929, 935, 936, 937, 943, 946, 951, 952, 953, 955, 957, 959, 963, 966, 967, 968, 971, 972, 973, 976, 978, 985, 988, 992, 993, 994, 1002, 1004, 1009, 1010, 1011, 1015, 1019, 1022, 1023, 1026, 1027, 1028, 1031, 1033, 1039, 1045, 1046, 1047, 1054, 1057, 1061, 1063, 1064, 1071, 1074, 1079, 1080, 1081, 1088, 1092, 1095, 1096, 1097, 1101, 1105, 1111, 1112, 1113, 1116, 1120, 1124, 1125, 1126, 1127, 1128, 1132, 1136, 1137, 1143, 1151, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1176, 1179, 1180, 1181, 1188, 1191, 1192, 1193, 1198, 1201, 1202, 1203, 1208, 1211, 1212, 1213, 1219, 1222, 1223, 1224, 1229, 1232, 1233, 1234, 1248, 1258], "should": [12, 14, 22, 33, 53, 56, 58, 59, 60, 68, 75, 77, 96, 127, 131, 148, 165, 166, 167, 185, 188, 199, 210, 213, 216, 227, 235, 238, 249, 257, 260, 271, 279, 282, 293, 306, 323, 340, 354, 358, 375, 410, 426, 427, 428, 438, 444, 446, 448, 463, 465, 500, 523, 586, 589, 597, 602, 603, 604, 615, 636, 657, 673, 684, 733, 779, 781, 831, 840, 849, 869, 923, 946, 957, 976, 988, 1004, 1057, 1074, 1092, 1116, 1120, 1124, 1240, 1242, 1253, 1254], "onli": [12, 14, 22, 33, 58, 60, 68, 73, 75, 77, 96, 110, 131, 148, 165, 167, 185, 188, 199, 213, 216, 227, 235, 238, 249, 257, 260, 271, 279, 282, 293, 306, 323, 340, 358, 375, 410, 426, 428, 438, 446, 448, 463, 465, 498, 499, 504, 517, 555, 592, 665, 715, 739, 760, 778, 955, 976, 1031, 1151, 1247], "implement": [12, 14, 22, 33, 56, 58, 60, 68, 75, 77, 96, 131, 148, 165, 167, 185, 188, 199, 213, 216, 227, 235, 238, 249, 257, 260, 271, 279, 282, 293, 306, 323, 340, 358, 375, 410, 426, 428, 438, 446, 448, 463, 465, 498, 615, 1183, 1237, 1240, 1243], "requir": [12, 14, 17, 32, 33, 36, 58, 60, 63, 75, 77, 80, 95, 96, 99, 117, 130, 131, 134, 147, 148, 151, 165, 167, 170, 185, 188, 191, 209, 213, 216, 219, 235, 238, 241, 257, 260, 263, 279, 282, 285, 305, 306, 309, 322, 323, 326, 339, 340, 344, 357, 358, 361, 374, 375, 378, 391, 395, 409, 410, 413, 426, 428, 431, 446, 447, 448, 451, 463, 464, 465, 468, 481, 486, 523, 586, 605, 1240], "whenev": [12, 14, 33, 58, 59, 60, 75, 77, 96, 131, 148, 165, 166, 167, 185, 188, 213, 216, 235, 238, 257, 260, 279, 282, 306, 323, 340, 358, 375, 410, 426, 427, 428, 446, 448, 463, 465], "wa": [12, 58, 59, 75, 165, 166, 185, 213, 235, 257, 279, 426, 427, 446, 463, 779], "abl": [12, 58, 59, 75, 165, 166, 185, 213, 235, 257, 279, 426, 427, 446, 463], "calcul": [12, 31, 53, 58, 59, 75, 94, 112, 129, 146, 165, 166, 185, 187, 209, 210, 213, 215, 235, 237, 257, 259, 279, 281, 304, 321, 338, 356, 373, 390, 408, 426, 427, 446, 463, 480, 499, 589, 602, 603, 604, 673, 696, 779, 833, 846, 847, 848, 864, 865, 866, 928, 932, 948, 955, 975, 976, 988, 990, 996, 1003, 1013, 1030, 1031, 1058, 1062, 1075, 1076, 1089, 1099, 1101, 1122, 1151, 1160, 1240, 1242], "appli": [12, 58, 59, 75, 165, 166, 185, 213, 235, 257, 279, 336, 406, 426, 427, 446, 461, 463, 502, 508, 515, 522, 523, 534, 553, 559, 580, 581, 612, 613, 633, 634, 636, 657, 681, 682, 684, 705, 706, 730, 731, 751, 752, 775, 776, 779, 780, 781, 783, 795, 966, 976, 1143, 1164, 1240, 1242, 1254, 1258], "note": [12, 47, 58, 75, 165, 185, 213, 235, 257, 279, 426, 446, 463, 500, 1124, 1238], "ad": [12, 16, 35, 56, 58, 62, 75, 79, 98, 113, 116, 133, 150, 165, 169, 185, 190, 213, 218, 235, 240, 257, 262, 279, 284, 308, 325, 342, 360, 377, 394, 406, 412, 426, 430, 446, 450, 463, 467, 484, 565, 584, 588, 618, 657, 660, 712, 736, 757, 1124, 1125, 1126, 1127, 1237, 1249, 1254], "all": [12, 48, 58, 75, 90, 165, 185, 213, 235, 257, 279, 426, 446, 463, 498, 499, 568, 575, 576, 597, 606, 607, 628, 629, 636, 675, 676, 699, 700, 724, 725, 733, 746, 747, 769, 770, 904, 1116, 1120, 1122, 1139, 1143, 1144, 1149, 1150, 1151, 1164, 1237, 1240, 1241, 1242, 1245, 1247, 1249, 1254, 1256], "befor": [12, 16, 35, 58, 62, 75, 79, 98, 116, 133, 150, 165, 169, 185, 190, 213, 218, 235, 240, 257, 262, 279, 284, 308, 325, 342, 360, 377, 394, 412, 426, 430, 446, 450, 463, 467, 484, 523, 589, 657, 1124, 1242], "featur": [12, 13, 32, 56, 58, 59, 73, 75, 76, 95, 113, 130, 147, 165, 166, 185, 186, 213, 214, 235, 236, 257, 258, 279, 280, 305, 322, 336, 339, 343, 357, 374, 388, 391, 406, 409, 426, 427, 446, 447, 461, 463, 464, 481, 510, 523, 564, 565, 575, 576, 584, 587, 588, 592, 606, 607, 617, 618, 628, 629, 636, 641, 657, 659, 660, 665, 675, 676, 686, 687, 699, 700, 711, 712, 715, 724, 725, 735, 736, 739, 746, 747, 756, 757, 760, 769, 770, 778, 779, 781, 783, 824, 827, 840, 843, 845, 858, 861, 863, 879, 907, 923, 926, 939, 942, 956, 959, 962, 967, 968, 977, 978, 981, 984, 998, 1001, 1015, 1018, 1022, 1023, 1031, 1032, 1033, 1038, 1042, 1049, 1053, 1066, 1070, 1084, 1087, 1101, 1104, 1151, 1241, 1242, 1243, 1246, 1248, 1249, 1254, 1255, 1258], "In": [13, 500, 876, 1242, 1243, 1253], "adapt": [13, 523], "therefor": [13, 1042], "check": [14, 17, 33, 36, 60, 63, 77, 80, 96, 99, 114, 117, 131, 134, 148, 151, 167, 170, 188, 191, 206, 207, 216, 219, 238, 241, 260, 263, 282, 285, 306, 309, 323, 326, 340, 344, 358, 361, 375, 378, 392, 395, 410, 413, 428, 431, 448, 451, 465, 468, 482, 486, 504, 517, 555, 662, 708, 1145, 1146, 1151, 1237, 1242, 1243], "creation": [14, 33, 60, 77, 96, 114, 131, 148, 167, 188, 216, 238, 260, 282, 306, 323, 340, 358, 375, 392, 410, 428, 448, 465, 482, 955, 976, 1031, 1241, 1242, 1254], "did": [14, 33, 60, 77, 96, 131, 148, 167, 188, 216, 238, 260, 282, 306, 323, 340, 358, 375, 410, 428, 448, 465], "compli": [14, 17, 33, 35, 36, 60, 62, 63, 77, 79, 80, 96, 98, 99, 116, 117, 131, 133, 134, 148, 150, 151, 167, 169, 170, 188, 190, 191, 216, 218, 219, 238, 240, 241, 260, 262, 263, 282, 284, 285, 306, 308, 309, 323, 325, 326, 340, 342, 344, 358, 360, 361, 375, 377, 378, 394, 395, 410, 412, 413, 428, 430, 431, 448, 450, 451, 465, 467, 468, 484, 486], "cl": [15, 34, 61, 78, 97, 115, 132, 149, 168, 189, 217, 239, 261, 283, 307, 324, 341, 359, 376, 393, 411, 429, 449, 466, 483, 502, 515, 553, 571, 595, 624, 638, 648, 668, 693, 718, 742, 763, 785, 801, 815, 828, 844, 862, 880, 894, 909, 927, 943, 963, 985, 1002, 1019, 1039, 1054, 1071, 1088, 1105, 1117, 1137, 1176, 1188, 1198, 1208, 1219, 1229, 1240], "none": [15, 20, 21, 28, 34, 39, 40, 48, 49, 52, 53, 61, 66, 67, 78, 83, 84, 97, 102, 103, 115, 120, 121, 132, 137, 138, 149, 156, 157, 168, 173, 174, 180, 181, 182, 189, 196, 197, 210, 217, 224, 225, 239, 246, 247, 261, 268, 269, 283, 290, 291, 301, 307, 312, 313, 324, 329, 330, 341, 347, 348, 359, 364, 365, 376, 381, 382, 388, 393, 398, 399, 411, 416, 417, 423, 429, 436, 437, 449, 454, 455, 466, 471, 472, 483, 491, 492, 508, 522, 534, 559, 564, 571, 575, 580, 586, 587, 595, 598, 599, 605, 606, 612, 617, 624, 628, 633, 636, 638, 648, 659, 668, 669, 672, 675, 681, 686, 693, 699, 705, 711, 718, 719, 724, 730, 735, 742, 746, 751, 756, 763, 764, 769, 775, 785, 801, 809, 815, 828, 831, 844, 862, 880, 894, 909, 912, 913, 914, 916, 927, 943, 959, 963, 967, 968, 976, 978, 985, 988, 1002, 1015, 1019, 1022, 1023, 1031, 1033, 1039, 1054, 1071, 1088, 1105, 1115, 1116, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1131, 1132, 1135, 1136, 1137, 1143, 1152, 1153, 1156, 1157, 1158, 1159, 1164, 1165, 1168, 1176, 1188, 1198, 1208, 1219, 1229, 1240, 1242, 1248, 1254], "copy_guid": [15, 34, 61, 78, 97, 115, 132, 149, 168, 189, 217, 239, 261, 283, 307, 324, 341, 359, 376, 393, 411, 429, 449, 466, 483, 571, 595, 624, 638, 648, 668, 693, 718, 742, 763, 785, 801, 815, 828, 844, 862, 880, 894, 909, 927, 943, 963, 985, 1002, 1019, 1039, 1054, 1071, 1088, 1105, 1137, 1176, 1188, 1198, 1208, 1219, 1229], "fals": [15, 23, 24, 25, 29, 34, 42, 43, 44, 51, 61, 69, 70, 71, 78, 86, 87, 88, 92, 97, 105, 106, 107, 115, 123, 124, 125, 132, 140, 141, 142, 149, 159, 160, 161, 168, 176, 177, 178, 187, 189, 201, 202, 203, 206, 207, 208, 215, 217, 229, 230, 231, 237, 239, 251, 252, 253, 259, 261, 273, 274, 275, 281, 283, 295, 296, 297, 307, 315, 316, 317, 324, 332, 333, 334, 341, 350, 351, 352, 359, 367, 368, 369, 376, 384, 385, 386, 393, 402, 403, 404, 411, 419, 420, 421, 429, 440, 441, 442, 449, 457, 458, 459, 466, 474, 475, 476, 483, 494, 495, 496, 504, 507, 517, 521, 530, 533, 555, 558, 571, 577, 578, 579, 592, 595, 608, 610, 611, 624, 630, 631, 632, 638, 642, 643, 644, 648, 652, 653, 654, 662, 665, 668, 677, 679, 680, 693, 702, 703, 704, 715, 718, 727, 728, 729, 739, 742, 748, 749, 750, 760, 763, 772, 773, 774, 785, 789, 790, 791, 801, 805, 806, 807, 815, 820, 821, 822, 828, 836, 837, 838, 840, 844, 854, 855, 856, 858, 862, 872, 873, 874, 880, 888, 889, 890, 894, 899, 900, 901, 904, 909, 912, 914, 919, 920, 921, 927, 935, 936, 937, 943, 951, 952, 953, 963, 971, 972, 973, 985, 992, 993, 994, 998, 1002, 1009, 1010, 1011, 1019, 1026, 1027, 1028, 1039, 1045, 1046, 1047, 1054, 1057, 1061, 1063, 1064, 1071, 1074, 1079, 1080, 1081, 1084, 1088, 1092, 1095, 1096, 1097, 1101, 1105, 1111, 1112, 1113, 1137, 1151, 1161, 1162, 1163, 1176, 1179, 1180, 1181, 1188, 1191, 1192, 1193, 1198, 1201, 1202, 1203, 1208, 1211, 1212, 1213, 1219, 1222, 1223, 1224, 1229, 1232, 1233, 1234, 1249, 1255], "independ": [15, 34, 61, 78, 97, 115, 132, 149, 168, 189, 217, 239, 261, 283, 307, 324, 341, 359, 376, 393, 411, 429, 449, 466, 483, 571, 595, 624, 638, 648, 668, 693, 718, 742, 763, 785, 801, 815, 828, 844, 862, 880, 894, 909, 927, 943, 963, 985, 1002, 1019, 1039, 1054, 1071, 1088, 1105, 1137, 1176, 1188, 1198, 1208, 1219, 1229], "data": [15, 18, 19, 23, 24, 25, 26, 34, 37, 38, 42, 43, 44, 45, 61, 64, 65, 69, 70, 71, 72, 78, 81, 82, 86, 87, 88, 89, 97, 100, 101, 105, 106, 107, 109, 115, 118, 119, 123, 124, 125, 126, 132, 135, 136, 140, 141, 142, 143, 149, 152, 153, 159, 160, 161, 162, 168, 171, 172, 176, 177, 178, 179, 189, 193, 194, 201, 202, 203, 204, 217, 221, 222, 229, 230, 231, 232, 239, 243, 244, 251, 252, 253, 254, 261, 265, 266, 273, 274, 275, 276, 283, 287, 288, 295, 296, 297, 298, 307, 310, 311, 315, 316, 317, 318, 324, 327, 328, 332, 333, 334, 335, 341, 345, 346, 350, 351, 352, 353, 359, 362, 363, 367, 368, 369, 370, 376, 379, 380, 384, 385, 386, 387, 393, 396, 397, 402, 403, 404, 405, 411, 414, 415, 419, 420, 421, 422, 429, 433, 434, 440, 441, 442, 443, 449, 452, 453, 457, 458, 459, 460, 466, 469, 470, 474, 475, 476, 477, 483, 487, 488, 494, 495, 496, 497, 571, 572, 573, 577, 578, 579, 583, 595, 600, 601, 608, 610, 611, 614, 624, 625, 626, 630, 631, 632, 635, 636, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 652, 653, 654, 655, 668, 670, 671, 677, 679, 680, 683, 693, 694, 695, 702, 703, 704, 707, 718, 721, 722, 727, 728, 729, 732, 742, 743, 744, 748, 749, 750, 753, 763, 766, 767, 772, 773, 774, 777, 783, 785, 787, 788, 789, 790, 791, 794, 798, 801, 802, 803, 805, 806, 807, 808, 809, 813, 815, 816, 817, 820, 821, 822, 823, 828, 829, 830, 836, 837, 838, 839, 844, 850, 851, 854, 855, 856, 857, 862, 867, 868, 872, 873, 874, 875, 880, 882, 883, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 909, 910, 911, 919, 920, 921, 922, 927, 930, 931, 935, 936, 937, 938, 943, 944, 945, 951, 952, 953, 954, 963, 964, 965, 971, 972, 973, 974, 985, 986, 987, 992, 993, 994, 995, 1002, 1005, 1006, 1009, 1010, 1011, 1012, 1019, 1020, 1021, 1026, 1027, 1028, 1029, 1039, 1040, 1041, 1045, 1046, 1047, 1048, 1054, 1055, 1056, 1061, 1063, 1064, 1065, 1071, 1072, 1073, 1079, 1080, 1081, 1082, 1088, 1090, 1091, 1095, 1096, 1097, 1098, 1105, 1107, 1108, 1111, 1112, 1113, 1114, 1137, 1141, 1142, 1161, 1162, 1163, 1165, 1166, 1167, 1170, 1173, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1240, 1242, 1251, 1256], "compa": [15, 18, 19, 23, 34, 37, 38, 42, 61, 64, 65, 69, 78, 81, 82, 86, 97, 100, 101, 105, 115, 118, 119, 123, 132, 135, 136, 140, 149, 152, 153, 159, 168, 171, 172, 176, 189, 193, 194, 201, 211, 217, 221, 222, 229, 239, 243, 244, 251, 261, 265, 266, 273, 283, 287, 288, 295, 299, 300, 307, 310, 311, 315, 324, 327, 328, 332, 341, 345, 346, 350, 359, 362, 363, 367, 376, 379, 380, 384, 393, 396, 397, 402, 411, 414, 415, 419, 424, 429, 433, 434, 440, 449, 452, 453, 457, 466, 469, 470, 474, 483, 487, 488, 494, 535, 566, 567, 569, 570, 571, 572, 573, 577, 580, 581, 584, 591, 592, 593, 594, 595, 600, 601, 608, 612, 613, 619, 620, 622, 623, 624, 625, 626, 630, 633, 634, 636, 638, 639, 640, 642, 648, 649, 650, 652, 664, 665, 666, 667, 668, 669, 670, 671, 677, 681, 682, 688, 689, 691, 692, 693, 694, 695, 702, 705, 706, 713, 714, 715, 716, 717, 718, 721, 722, 727, 730, 731, 737, 738, 739, 740, 741, 742, 743, 744, 748, 751, 752, 758, 759, 760, 761, 762, 763, 766, 767, 772, 775, 776, 785, 787, 788, 789, 801, 802, 803, 805, 813, 815, 816, 817, 820, 828, 829, 830, 832, 836, 843, 844, 846, 847, 848, 850, 851, 854, 861, 862, 865, 866, 867, 868, 872, 879, 880, 881, 882, 883, 884, 885, 888, 892, 894, 895, 896, 899, 907, 909, 910, 911, 912, 913, 914, 919, 927, 928, 930, 931, 932, 935, 943, 944, 945, 947, 948, 951, 963, 964, 965, 971, 975, 985, 986, 987, 989, 990, 992, 1001, 1002, 1003, 1005, 1006, 1009, 1013, 1019, 1020, 1021, 1026, 1030, 1039, 1040, 1041, 1045, 1053, 1054, 1055, 1056, 1058, 1061, 1062, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1087, 1088, 1089, 1090, 1091, 1095, 1099, 1104, 1105, 1106, 1107, 1108, 1111, 1133, 1134, 1137, 1141, 1142, 1156, 1157, 1161, 1164, 1168, 1169, 1176, 1177, 1178, 1179, 1183, 1188, 1189, 1190, 1191, 1198, 1199, 1200, 1201, 1208, 1209, 1210, 1211, 1217, 1219, 1220, 1221, 1222, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1244, 1246, 1249, 1251, 1253, 1256], "return": [15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 49, 51, 52, 53, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 149, 150, 151, 152, 153, 154, 156, 157, 159, 161, 162, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 189, 190, 191, 193, 194, 196, 197, 201, 203, 204, 206, 207, 208, 209, 210, 217, 218, 219, 221, 222, 224, 225, 229, 231, 232, 239, 240, 241, 243, 244, 246, 247, 251, 253, 254, 261, 262, 263, 265, 266, 268, 269, 273, 275, 276, 283, 284, 285, 287, 288, 290, 291, 295, 297, 298, 300, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 393, 394, 395, 396, 397, 398, 399, 402, 404, 405, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 429, 430, 431, 433, 434, 436, 437, 440, 442, 443, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 483, 484, 486, 487, 488, 491, 492, 494, 496, 497, 498, 499, 500, 501, 504, 508, 509, 517, 518, 522, 528, 530, 534, 555, 559, 564, 566, 567, 568, 569, 570, 571, 572, 573, 577, 579, 580, 581, 583, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 617, 619, 620, 621, 622, 623, 624, 625, 626, 630, 632, 633, 634, 635, 636, 638, 639, 640, 642, 644, 645, 648, 649, 650, 652, 654, 655, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 678, 680, 681, 682, 683, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 702, 704, 705, 706, 707, 708, 711, 713, 714, 715, 716, 717, 718, 721, 722, 727, 729, 730, 731, 732, 735, 737, 738, 739, 740, 741, 742, 743, 744, 748, 750, 751, 752, 753, 756, 758, 759, 760, 761, 762, 763, 766, 767, 772, 774, 775, 776, 777, 785, 787, 788, 789, 791, 794, 796, 797, 801, 802, 803, 804, 805, 807, 808, 810, 811, 812, 815, 816, 817, 819, 820, 822, 823, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 856, 857, 861, 862, 865, 866, 867, 868, 869, 871, 872, 874, 875, 879, 880, 881, 882, 883, 884, 885, 887, 888, 890, 891, 894, 895, 896, 898, 899, 901, 902, 907, 909, 910, 911, 918, 919, 921, 922, 926, 927, 928, 929, 930, 931, 932, 934, 935, 937, 938, 942, 943, 944, 945, 946, 947, 948, 950, 951, 953, 954, 956, 957, 958, 962, 963, 964, 965, 966, 967, 968, 970, 971, 973, 974, 975, 977, 978, 979, 984, 985, 986, 987, 989, 990, 991, 992, 994, 995, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1064, 1065, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1081, 1082, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1097, 1098, 1099, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1116, 1120, 1121, 1124, 1125, 1126, 1127, 1128, 1131, 1132, 1133, 1134, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1151, 1152, 1153, 1156, 1157, 1158, 1159, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1176, 1177, 1178, 1179, 1181, 1182, 1184, 1188, 1189, 1190, 1191, 1193, 1195, 1198, 1199, 1200, 1201, 1203, 1205, 1208, 1209, 1210, 1211, 1213, 1215, 1219, 1220, 1221, 1222, 1224, 1226, 1229, 1230, 1231, 1232, 1234, 1236, 1237, 1240, 1242], "current": [15, 34, 61, 78, 97, 115, 132, 149, 168, 189, 217, 239, 261, 283, 307, 324, 341, 359, 376, 393, 411, 429, 449, 466, 483, 571, 595, 624, 638, 648, 668, 693, 718, 742, 763, 785, 801, 815, 828, 844, 862, 880, 894, 909, 927, 943, 963, 985, 1002, 1019, 1039, 1054, 1071, 1088, 1105, 1137, 1176, 1188, 1198, 1208, 1219, 1229, 1243], "bool": [15, 17, 23, 24, 25, 29, 34, 36, 42, 43, 44, 51, 61, 63, 69, 70, 71, 78, 80, 86, 87, 88, 92, 97, 99, 105, 106, 107, 110, 115, 117, 123, 124, 125, 127, 132, 134, 140, 141, 142, 144, 149, 151, 159, 160, 161, 163, 168, 170, 176, 177, 178, 189, 191, 201, 202, 203, 206, 207, 208, 217, 219, 229, 230, 231, 239, 241, 251, 252, 253, 261, 263, 273, 274, 275, 283, 285, 295, 296, 297, 307, 309, 315, 316, 317, 324, 326, 332, 333, 334, 341, 344, 350, 351, 352, 354, 359, 361, 367, 368, 369, 376, 378, 384, 385, 386, 388, 393, 395, 402, 403, 404, 411, 413, 419, 420, 421, 429, 431, 440, 441, 442, 444, 449, 451, 457, 458, 459, 466, 468, 474, 475, 476, 483, 486, 494, 495, 496, 498, 499, 504, 517, 530, 555, 571, 577, 578, 579, 592, 595, 608, 610, 611, 624, 630, 631, 632, 636, 638, 642, 643, 644, 648, 652, 653, 654, 662, 665, 668, 677, 679, 680, 693, 702, 703, 704, 715, 718, 727, 728, 729, 733, 739, 742, 748, 749, 750, 760, 763, 772, 773, 774, 785, 789, 790, 791, 798, 801, 805, 806, 807, 813, 815, 820, 821, 822, 828, 836, 837, 838, 840, 844, 854, 855, 856, 858, 862, 872, 873, 874, 876, 880, 888, 889, 890, 892, 894, 899, 900, 901, 904, 909, 912, 913, 914, 919, 920, 921, 923, 927, 935, 936, 937, 943, 951, 952, 953, 959, 963, 971, 972, 973, 981, 985, 992, 993, 994, 997, 998, 1002, 1009, 1010, 1011, 1019, 1026, 1027, 1028, 1039, 1045, 1046, 1047, 1054, 1061, 1063, 1064, 1066, 1071, 1079, 1080, 1081, 1084, 1088, 1092, 1095, 1096, 1097, 1101, 1105, 1111, 1112, 1113, 1137, 1145, 1146, 1147, 1148, 1151, 1161, 1162, 1163, 1176, 1179, 1180, 1181, 1188, 1191, 1192, 1193, 1198, 1201, 1202, 1203, 1208, 1211, 1212, 1213, 1217, 1219, 1222, 1223, 1224, 1229, 1232, 1233, 1234], "If": [15, 18, 19, 20, 21, 23, 24, 25, 29, 31, 34, 37, 38, 39, 40, 42, 43, 44, 49, 52, 61, 64, 65, 66, 67, 69, 70, 71, 78, 81, 82, 83, 84, 86, 87, 88, 92, 94, 97, 100, 101, 102, 103, 105, 106, 107, 110, 112, 114, 115, 118, 119, 120, 121, 123, 124, 125, 127, 129, 132, 135, 136, 137, 138, 140, 141, 142, 144, 146, 149, 152, 153, 156, 157, 159, 160, 161, 163, 168, 171, 172, 173, 174, 176, 177, 178, 180, 181, 189, 193, 194, 196, 197, 201, 202, 203, 217, 221, 222, 224, 225, 229, 230, 231, 239, 243, 244, 246, 247, 251, 252, 253, 261, 265, 266, 268, 269, 273, 274, 275, 283, 287, 288, 290, 291, 295, 296, 297, 304, 307, 310, 311, 312, 313, 315, 316, 317, 319, 321, 324, 327, 328, 329, 330, 332, 333, 334, 338, 341, 345, 346, 347, 348, 350, 351, 352, 354, 356, 359, 362, 363, 364, 365, 367, 368, 369, 373, 376, 379, 380, 381, 382, 384, 385, 386, 388, 390, 392, 393, 396, 397, 398, 399, 402, 403, 404, 408, 411, 414, 415, 416, 417, 419, 420, 421, 429, 433, 434, 436, 437, 440, 441, 442, 444, 449, 452, 453, 454, 455, 457, 458, 459, 466, 469, 470, 471, 472, 474, 475, 476, 480, 482, 483, 487, 488, 491, 492, 494, 495, 496, 498, 499, 555, 571, 572, 573, 575, 577, 578, 579, 592, 595, 600, 601, 606, 608, 610, 611, 624, 625, 626, 628, 630, 631, 632, 638, 639, 640, 642, 643, 644, 648, 649, 650, 652, 653, 654, 665, 668, 670, 671, 672, 675, 677, 679, 680, 693, 694, 695, 699, 702, 703, 704, 708, 715, 718, 721, 722, 724, 727, 728, 729, 739, 742, 743, 744, 746, 748, 749, 750, 760, 763, 766, 767, 769, 772, 773, 774, 785, 787, 788, 789, 790, 791, 798, 801, 802, 803, 805, 806, 807, 813, 815, 816, 817, 820, 821, 822, 827, 828, 829, 830, 836, 837, 838, 843, 844, 850, 851, 854, 855, 856, 861, 862, 867, 868, 872, 873, 874, 876, 879, 880, 882, 883, 888, 889, 890, 892, 894, 895, 896, 899, 900, 901, 904, 907, 909, 910, 911, 912, 913, 914, 919, 920, 921, 926, 927, 930, 931, 935, 936, 937, 942, 943, 944, 945, 951, 952, 953, 956, 962, 963, 964, 965, 971, 972, 973, 977, 981, 984, 985, 986, 987, 992, 993, 994, 1001, 1002, 1005, 1006, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1026, 1027, 1028, 1032, 1038, 1039, 1040, 1041, 1045, 1046, 1047, 1053, 1054, 1055, 1056, 1061, 1063, 1064, 1066, 1070, 1071, 1072, 1073, 1079, 1080, 1081, 1087, 1088, 1090, 1091, 1095, 1096, 1097, 1101, 1105, 1107, 1108, 1111, 1112, 1113, 1124, 1125, 1127, 1128, 1132, 1137, 1141, 1142, 1151, 1161, 1162, 1163, 1176, 1177, 1178, 1179, 1180, 1181, 1188, 1189, 1190, 1191, 1192, 1193, 1198, 1199, 1200, 1201, 1202, 1203, 1208, 1209, 1210, 1211, 1212, 1213, 1219, 1220, 1221, 1222, 1223, 1224, 1229, 1230, 1231, 1232, 1233, 1234, 1237, 1238, 1244, 1248, 1249, 1253, 1254, 1255], "true": [15, 23, 24, 25, 29, 34, 42, 43, 44, 51, 61, 69, 70, 71, 78, 86, 87, 88, 92, 97, 105, 106, 107, 108, 110, 115, 123, 124, 125, 127, 132, 140, 141, 142, 144, 149, 159, 160, 161, 163, 168, 176, 177, 178, 189, 201, 202, 203, 206, 207, 208, 217, 229, 230, 231, 239, 251, 252, 253, 261, 273, 274, 275, 283, 295, 296, 297, 307, 315, 316, 317, 324, 332, 333, 334, 341, 350, 351, 352, 354, 359, 367, 368, 369, 376, 384, 385, 386, 388, 393, 402, 403, 404, 411, 419, 420, 421, 429, 440, 441, 442, 444, 449, 457, 458, 459, 466, 474, 475, 476, 483, 494, 495, 496, 498, 499, 504, 517, 518, 528, 530, 555, 571, 577, 578, 579, 592, 595, 597, 608, 610, 611, 624, 630, 631, 632, 636, 638, 642, 643, 644, 648, 652, 653, 654, 662, 665, 668, 677, 679, 680, 693, 702, 703, 704, 715, 718, 727, 728, 729, 733, 739, 742, 748, 749, 750, 760, 763, 772, 773, 774, 785, 789, 790, 791, 798, 801, 805, 806, 807, 813, 815, 820, 821, 822, 828, 836, 837, 838, 840, 844, 854, 855, 856, 858, 862, 872, 873, 874, 876, 880, 888, 889, 890, 892, 894, 899, 900, 901, 904, 909, 912, 913, 914, 919, 920, 921, 927, 935, 936, 937, 943, 951, 952, 953, 963, 971, 972, 973, 981, 985, 992, 993, 994, 998, 1002, 1009, 1010, 1011, 1019, 1026, 1027, 1028, 1039, 1045, 1046, 1047, 1054, 1061, 1063, 1064, 1066, 1071, 1079, 1080, 1081, 1084, 1088, 1092, 1095, 1096, 1097, 1101, 1105, 1111, 1112, 1113, 1120, 1127, 1137, 1145, 1146, 1147, 1151, 1161, 1162, 1163, 1176, 1179, 1180, 1181, 1188, 1191, 1192, 1193, 1198, 1201, 1202, 1203, 1208, 1211, 1212, 1213, 1219, 1222, 1223, 1224, 1229, 1232, 1233, 1234, 1248, 1249, 1251, 1254, 1255], "have": [15, 16, 34, 35, 61, 62, 78, 79, 97, 98, 110, 113, 115, 116, 132, 133, 149, 150, 168, 169, 189, 190, 217, 218, 239, 240, 261, 262, 283, 284, 307, 308, 324, 325, 341, 342, 359, 360, 376, 377, 393, 394, 411, 412, 429, 430, 449, 450, 461, 466, 467, 482, 483, 484, 504, 517, 555, 571, 584, 595, 624, 638, 648, 657, 668, 693, 718, 742, 763, 785, 801, 815, 828, 844, 862, 880, 892, 894, 909, 927, 943, 963, 967, 968, 978, 985, 1002, 1019, 1022, 1023, 1031, 1033, 1039, 1054, 1071, 1088, 1105, 1124, 1137, 1147, 1176, 1188, 1198, 1208, 1219, 1229, 1242, 1248], "same": [15, 28, 29, 34, 52, 61, 78, 92, 97, 110, 115, 132, 149, 168, 181, 182, 189, 217, 239, 261, 283, 301, 307, 324, 341, 359, 376, 393, 411, 423, 429, 449, 466, 482, 483, 571, 595, 624, 638, 648, 657, 668, 684, 693, 718, 742, 763, 785, 801, 815, 828, 844, 862, 880, 892, 894, 909, 927, 943, 963, 985, 1002, 1019, 1039, 1054, 1071, 1088, 1105, 1127, 1137, 1153, 1176, 1188, 1198, 1208, 1216, 1217, 1219, 1229, 1240, 1242, 1253], "guid": [15, 24, 25, 34, 43, 44, 56, 61, 70, 71, 78, 87, 88, 97, 106, 107, 115, 124, 125, 132, 141, 142, 149, 160, 161, 168, 177, 178, 189, 202, 203, 217, 230, 231, 239, 252, 253, 261, 274, 275, 283, 296, 297, 307, 316, 317, 324, 333, 334, 341, 351, 352, 359, 368, 369, 376, 385, 386, 393, 403, 404, 406, 411, 420, 421, 429, 441, 442, 449, 458, 459, 466, 475, 476, 483, 495, 496, 571, 578, 579, 595, 610, 611, 624, 631, 632, 638, 643, 644, 648, 653, 654, 668, 679, 680, 693, 703, 704, 718, 728, 729, 742, 749, 750, 763, 773, 774, 785, 790, 791, 801, 806, 807, 815, 821, 822, 828, 837, 838, 844, 855, 856, 862, 873, 874, 880, 889, 890, 894, 900, 901, 909, 920, 921, 927, 936, 937, 943, 952, 953, 963, 972, 973, 985, 993, 994, 1002, 1010, 1011, 1019, 1027, 1028, 1039, 1046, 1047, 1054, 1063, 1064, 1071, 1080, 1081, 1088, 1096, 1097, 1105, 1112, 1113, 1137, 1138, 1162, 1163, 1176, 1180, 1181, 1188, 1192, 1193, 1198, 1202, 1203, 1208, 1212, 1213, 1219, 1223, 1224, 1229, 1233, 1234, 1243, 1246, 1248, 1254], "origin": [15, 34, 61, 78, 97, 115, 132, 149, 168, 189, 217, 239, 261, 283, 307, 324, 341, 359, 376, 393, 411, 429, 449, 466, 483, 571, 584, 595, 624, 638, 648, 668, 684, 693, 718, 742, 763, 785, 801, 815, 828, 844, 862, 880, 894, 909, 927, 943, 963, 985, 1002, 1019, 1039, 1054, 1071, 1088, 1105, 1137, 1156, 1157, 1176, 1188, 1198, 1208, 1219, 1229, 1248, 1257], "classmethod": [16, 17, 18, 19, 20, 21, 26, 35, 36, 37, 38, 39, 40, 45, 49, 51, 62, 63, 64, 65, 66, 67, 72, 79, 80, 81, 82, 83, 84, 89, 91, 98, 99, 100, 101, 102, 103, 109, 116, 117, 118, 119, 120, 121, 126, 133, 134, 135, 136, 137, 138, 143, 150, 151, 152, 153, 156, 157, 162, 169, 170, 171, 172, 173, 174, 179, 190, 191, 193, 194, 196, 197, 204, 208, 218, 219, 221, 222, 224, 225, 232, 240, 241, 243, 244, 246, 247, 254, 262, 263, 265, 266, 268, 269, 276, 284, 285, 287, 288, 290, 291, 298, 308, 309, 310, 311, 312, 313, 318, 325, 326, 327, 328, 329, 330, 335, 342, 344, 345, 346, 347, 348, 353, 360, 361, 362, 363, 364, 365, 370, 377, 378, 379, 380, 381, 382, 387, 394, 395, 396, 397, 398, 399, 405, 412, 413, 414, 415, 416, 417, 422, 430, 431, 433, 434, 436, 437, 443, 450, 451, 452, 453, 454, 455, 460, 467, 468, 469, 470, 471, 472, 477, 484, 486, 487, 488, 491, 492, 497, 536, 572, 573, 583, 598, 599, 600, 601, 614, 625, 626, 635, 639, 640, 645, 649, 650, 655, 669, 670, 671, 672, 683, 694, 695, 707, 719, 720, 721, 722, 732, 743, 744, 753, 764, 765, 766, 767, 777, 787, 788, 794, 802, 803, 808, 811, 816, 817, 823, 829, 830, 831, 832, 839, 845, 849, 850, 851, 857, 863, 867, 868, 869, 875, 882, 883, 884, 885, 891, 895, 896, 902, 910, 911, 912, 913, 914, 922, 929, 930, 931, 938, 944, 945, 946, 947, 954, 957, 964, 965, 966, 967, 968, 974, 978, 986, 987, 988, 989, 995, 1004, 1005, 1006, 1012, 1020, 1021, 1022, 1023, 1029, 1033, 1040, 1041, 1042, 1048, 1055, 1056, 1057, 1065, 1072, 1073, 1074, 1082, 1090, 1091, 1092, 1098, 1107, 1108, 1114, 1141, 1142, 1170, 1172, 1177, 1178, 1182, 1184, 1185, 1189, 1190, 1195, 1199, 1200, 1205, 1209, 1210, 1215, 1220, 1221, 1226, 1230, 1231, 1236, 1240], "kwarg": [16, 20, 21, 35, 39, 40, 62, 66, 67, 79, 83, 84, 98, 102, 103, 116, 120, 121, 133, 137, 138, 150, 156, 157, 169, 173, 174, 190, 196, 197, 199, 211, 218, 224, 225, 227, 240, 246, 247, 249, 262, 268, 269, 271, 284, 290, 291, 293, 308, 312, 313, 325, 329, 330, 342, 347, 348, 360, 364, 365, 377, 381, 382, 394, 398, 399, 412, 416, 417, 430, 436, 437, 438, 450, 454, 455, 467, 471, 472, 484, 491, 492, 502, 515, 553, 669, 672, 719, 720, 764, 765, 831, 832, 849, 885, 912, 913, 946, 947, 967, 968, 988, 989, 1022, 1124, 1126, 1240, 1242], "new": [16, 35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 498, 804, 819, 835, 853, 871, 887, 898, 918, 934, 950, 970, 991, 1008, 1025, 1044, 1060, 1078, 1094, 1110, 1121, 1244, 1248], "differ": [16, 778, 1122, 1183, 1240, 1241, 1249, 1254], "fom": 16, "pass": [16, 20, 21, 35, 39, 40, 53, 62, 66, 67, 73, 79, 83, 84, 98, 102, 103, 116, 120, 121, 133, 137, 138, 150, 156, 157, 169, 173, 174, 190, 196, 197, 210, 211, 218, 224, 225, 240, 246, 247, 262, 268, 269, 284, 290, 291, 308, 312, 313, 325, 329, 330, 342, 347, 348, 360, 364, 365, 377, 381, 382, 394, 398, 399, 412, 416, 417, 430, 436, 437, 450, 454, 455, 467, 471, 472, 484, 491, 492, 502, 515, 553, 597, 669, 672], "constructor": [16, 20, 21, 35, 39, 40, 62, 66, 67, 79, 83, 84, 98, 102, 103, 116, 120, 121, 133, 137, 138, 150, 156, 157, 169, 173, 174, 190, 196, 197, 218, 224, 225, 240, 246, 247, 262, 268, 269, 284, 290, 291, 308, 312, 313, 325, 329, 330, 342, 347, 348, 360, 364, 365, 377, 381, 382, 394, 398, 399, 412, 416, 417, 430, 436, 437, 450, 454, 455, 467, 471, 472, 484, 491, 492, 523, 669, 672, 884, 1242], "instead": [16, 56, 884, 1248], "separ": [16, 687, 1130, 1247], "argument": [16, 20, 21, 35, 39, 40, 62, 66, 67, 79, 83, 84, 98, 102, 103, 116, 120, 121, 133, 137, 138, 150, 156, 157, 169, 173, 174, 190, 196, 197, 211, 218, 224, 225, 240, 246, 247, 262, 268, 269, 284, 290, 291, 308, 312, 313, 325, 329, 330, 342, 347, 348, 360, 364, 365, 377, 381, 382, 394, 398, 399, 412, 416, 417, 430, 436, 437, 450, 454, 455, 467, 471, 472, 484, 491, 492, 502, 515, 523, 553, 669, 672, 1126, 1242], "expect": [16, 35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 504, 997], "been": [16, 35, 62, 79, 98, 113, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 1124, 1217], "call": [16, 22, 31, 32, 35, 62, 68, 79, 94, 95, 98, 112, 113, 116, 129, 130, 133, 146, 147, 150, 169, 190, 199, 218, 227, 240, 249, 262, 271, 284, 293, 304, 305, 308, 321, 322, 325, 338, 339, 342, 356, 357, 360, 373, 374, 377, 390, 391, 394, 408, 409, 412, 430, 438, 447, 450, 464, 467, 480, 481, 484, 523, 697, 1240, 1248], "code": [16, 35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 1242, 1243], "doe": [16, 35, 62, 73, 76, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 504, 517, 555, 589, 602, 604, 615, 673, 827, 879, 907, 926, 942, 956, 962, 977, 984, 1018, 1032, 1038, 1183, 1248], "verifi": [16, 35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 597, 1148, 1240, 1242], "given": [16, 28, 35, 51, 52, 62, 79, 91, 98, 116, 133, 150, 169, 181, 182, 190, 208, 218, 240, 262, 284, 301, 308, 325, 342, 360, 377, 394, 412, 423, 430, 450, 467, 484, 499, 500, 504, 508, 509, 517, 518, 522, 534, 553, 555, 559, 596, 597, 599, 603, 669, 672, 796, 797, 804, 809, 812, 818, 819, 833, 834, 835, 846, 847, 848, 852, 853, 864, 865, 866, 870, 871, 886, 887, 897, 898, 912, 914, 917, 918, 928, 932, 933, 934, 948, 949, 950, 966, 969, 970, 975, 990, 991, 996, 1003, 1007, 1008, 1013, 1024, 1025, 1030, 1043, 1044, 1058, 1059, 1060, 1062, 1075, 1076, 1077, 1078, 1089, 1093, 1094, 1099, 1109, 1110, 1144, 1145, 1172, 1247], "adjac": [16, 35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 1136], "lie": [16, 35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484], "topologi": [16, 29, 35, 50, 52, 53, 56, 62, 79, 90, 91, 92, 98, 110, 116, 127, 133, 144, 150, 169, 187, 190, 205, 209, 210, 211, 215, 218, 237, 240, 259, 262, 281, 284, 299, 302, 308, 319, 325, 336, 342, 354, 360, 377, 388, 394, 406, 412, 424, 430, 444, 450, 461, 467, 484, 502, 504, 553, 555, 1122, 1160, 1241, 1242, 1254, 1255, 1258], "allow": [16, 35, 62, 79, 98, 116, 127, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 354, 360, 377, 394, 412, 430, 444, 450, 467, 484, 509, 510, 523, 525, 597, 783, 1122, 1217, 1249, 1254], "them": [16, 35, 62, 79, 98, 110, 116, 133, 144, 150, 169, 190, 218, 240, 262, 284, 302, 308, 325, 336, 342, 360, 377, 388, 394, 406, 412, 430, 450, 467, 484, 709, 754, 1136, 1147, 1240, 1242, 1247, 1254], "respons": [16, 35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 636], "A": [16, 47, 48, 49, 51, 56, 73, 182, 208, 336, 406, 498, 499, 500, 504, 508, 509, 517, 522, 534, 555, 559, 562, 564, 584, 587, 598, 599, 615, 617, 636, 657, 659, 662, 669, 672, 684, 686, 711, 735, 756, 779, 795, 804, 809, 819, 834, 835, 852, 853, 870, 871, 886, 887, 898, 917, 918, 933, 934, 949, 950, 969, 970, 991, 1007, 1008, 1024, 1025, 1043, 1044, 1059, 1060, 1077, 1078, 1083, 1093, 1094, 1109, 1110, 1122, 1124, 1131, 1143, 1144, 1148, 1151, 1238, 1240, 1245, 1248, 1249, 1254], "valueerror": [16, 1124, 1127, 1132], "less": [16, 517, 584, 657], "than": [16, 23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 517, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 795, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "two": [16, 29, 52, 53, 56, 90, 92, 110, 127, 144, 154, 206, 209, 210, 302, 336, 388, 406, 444, 461, 482, 498, 499, 502, 504, 508, 509, 515, 517, 522, 534, 553, 555, 559, 596, 779, 831, 832, 929, 1042, 1128, 1147, 1153, 1242, 1252, 1254], "timbermodel": [16, 20, 21, 22, 35, 39, 40, 49, 62, 66, 67, 68, 79, 83, 84, 98, 102, 103, 116, 120, 121, 133, 137, 138, 150, 156, 157, 169, 173, 174, 180, 181, 190, 196, 197, 199, 218, 224, 225, 227, 240, 246, 247, 249, 262, 268, 269, 271, 284, 290, 291, 293, 308, 312, 313, 325, 329, 330, 342, 347, 348, 360, 364, 365, 377, 381, 382, 394, 398, 399, 412, 416, 417, 430, 436, 437, 438, 450, 454, 455, 467, 471, 472, 484, 491, 492, 810, 812, 1243], "jo": 16, "belong": [16, 20, 21, 35, 39, 40, 62, 66, 67, 79, 83, 84, 98, 102, 103, 116, 120, 121, 133, 137, 138, 150, 156, 157, 169, 173, 174, 190, 196, 197, 218, 224, 225, 240, 246, 247, 262, 268, 269, 284, 290, 291, 308, 312, 313, 325, 329, 330, 342, 347, 348, 360, 364, 365, 377, 381, 382, 394, 398, 399, 412, 416, 417, 430, 436, 437, 450, 454, 455, 467, 471, 472, 484, 491, 492], "whould": 16, "togeth": [16, 46, 709, 754, 1248], "number": [17, 35, 36, 62, 63, 79, 80, 98, 99, 116, 117, 133, 134, 150, 151, 169, 170, 181, 190, 191, 218, 219, 240, 241, 262, 263, 284, 285, 308, 309, 325, 326, 342, 344, 360, 361, 377, 378, 394, 395, 412, 413, 430, 431, 450, 451, 467, 468, 484, 486, 657, 795, 892, 1116, 1120, 1249, 1258], "filepath": [18, 24, 37, 43, 64, 70, 81, 87, 100, 106, 118, 124, 135, 141, 152, 160, 171, 177, 193, 202, 221, 230, 243, 252, 265, 274, 287, 296, 310, 316, 327, 333, 345, 351, 362, 368, 379, 385, 396, 403, 414, 420, 433, 441, 452, 458, 469, 475, 487, 495, 572, 578, 600, 610, 625, 631, 639, 643, 649, 653, 670, 679, 694, 703, 721, 728, 743, 749, 766, 773, 787, 790, 802, 806, 816, 821, 829, 837, 850, 855, 867, 873, 882, 889, 895, 900, 910, 920, 930, 936, 944, 952, 964, 972, 986, 993, 1005, 1010, 1020, 1027, 1040, 1046, 1055, 1063, 1072, 1080, 1090, 1096, 1107, 1112, 1141, 1162, 1177, 1180, 1184, 1185, 1189, 1192, 1199, 1202, 1209, 1212, 1220, 1223, 1230, 1233], "construct": [18, 19, 26, 37, 38, 45, 64, 65, 72, 81, 82, 89, 100, 101, 109, 118, 119, 126, 135, 136, 143, 152, 153, 162, 171, 172, 179, 193, 194, 204, 221, 222, 232, 243, 244, 254, 265, 266, 276, 287, 288, 298, 310, 311, 318, 327, 328, 335, 345, 346, 353, 362, 363, 370, 379, 380, 387, 396, 397, 405, 414, 415, 422, 433, 434, 443, 452, 453, 460, 469, 470, 477, 487, 488, 497, 572, 573, 583, 600, 601, 614, 625, 626, 635, 639, 640, 645, 649, 650, 655, 670, 671, 672, 683, 690, 694, 695, 707, 721, 722, 732, 743, 744, 753, 766, 767, 777, 787, 788, 794, 802, 803, 808, 816, 817, 823, 829, 830, 832, 839, 850, 851, 857, 867, 868, 875, 881, 882, 883, 884, 885, 891, 895, 896, 902, 910, 911, 912, 913, 914, 922, 930, 931, 938, 944, 945, 947, 954, 964, 965, 967, 968, 974, 978, 986, 987, 989, 995, 1005, 1006, 1012, 1020, 1021, 1022, 1023, 1029, 1033, 1040, 1041, 1042, 1048, 1055, 1056, 1065, 1072, 1073, 1082, 1090, 1091, 1098, 1107, 1108, 1114, 1141, 1142, 1170, 1177, 1178, 1182, 1189, 1190, 1195, 1199, 1200, 1205, 1209, 1210, 1215, 1220, 1221, 1226, 1230, 1231, 1236, 1243, 1249], "from": [18, 19, 20, 21, 23, 24, 25, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 52, 64, 65, 66, 67, 69, 70, 71, 81, 82, 83, 84, 86, 87, 88, 100, 101, 102, 103, 105, 106, 107, 118, 119, 120, 121, 123, 124, 125, 135, 136, 137, 138, 140, 141, 142, 152, 153, 156, 157, 159, 160, 161, 171, 172, 173, 174, 176, 177, 178, 182, 193, 194, 196, 197, 201, 202, 203, 221, 222, 224, 225, 229, 230, 231, 243, 244, 246, 247, 251, 252, 253, 265, 266, 268, 269, 273, 274, 275, 287, 288, 290, 291, 295, 296, 297, 310, 311, 312, 313, 315, 316, 317, 327, 328, 329, 330, 332, 333, 334, 336, 345, 346, 347, 348, 350, 351, 352, 362, 363, 364, 365, 367, 368, 369, 379, 380, 381, 382, 384, 385, 386, 396, 397, 398, 399, 402, 403, 404, 406, 414, 415, 416, 417, 419, 420, 421, 433, 434, 436, 437, 440, 441, 442, 452, 453, 454, 455, 457, 458, 459, 461, 469, 470, 471, 472, 474, 475, 476, 487, 488, 491, 492, 494, 495, 496, 535, 572, 573, 575, 577, 578, 579, 598, 599, 600, 601, 604, 605, 606, 608, 610, 611, 615, 625, 626, 628, 630, 631, 632, 636, 639, 640, 642, 643, 644, 649, 650, 652, 653, 654, 669, 670, 671, 672, 673, 675, 677, 679, 680, 694, 695, 699, 702, 703, 704, 720, 721, 722, 724, 727, 728, 729, 743, 744, 746, 748, 749, 750, 765, 766, 767, 769, 772, 773, 774, 778, 787, 788, 789, 790, 791, 797, 802, 803, 805, 806, 807, 809, 816, 817, 820, 821, 822, 829, 830, 831, 832, 833, 836, 837, 838, 840, 846, 847, 848, 849, 850, 851, 854, 855, 856, 858, 864, 865, 866, 867, 868, 869, 872, 873, 874, 882, 883, 884, 885, 888, 889, 890, 895, 896, 899, 900, 901, 910, 911, 912, 913, 914, 919, 920, 921, 928, 929, 930, 931, 932, 935, 936, 937, 944, 945, 946, 947, 948, 951, 952, 953, 957, 964, 965, 966, 967, 968, 971, 972, 973, 975, 978, 986, 987, 988, 989, 990, 992, 993, 994, 996, 998, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1013, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1030, 1033, 1040, 1041, 1045, 1046, 1047, 1055, 1056, 1057, 1058, 1061, 1062, 1063, 1064, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1081, 1084, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1099, 1104, 1107, 1108, 1111, 1112, 1113, 1116, 1120, 1127, 1130, 1141, 1142, 1152, 1154, 1155, 1161, 1162, 1163, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1189, 1190, 1191, 1192, 1193, 1199, 1200, 1201, 1202, 1203, 1209, 1210, 1211, 1212, 1213, 1220, 1221, 1222, 1223, 1224, 1230, 1231, 1232, 1233, 1234, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1254, 1256], "json": [18, 19, 24, 25, 37, 38, 43, 44, 64, 65, 70, 71, 81, 82, 87, 88, 100, 101, 106, 107, 118, 119, 124, 125, 135, 136, 141, 142, 152, 153, 160, 161, 171, 172, 177, 178, 193, 194, 202, 203, 221, 222, 230, 231, 243, 244, 252, 253, 265, 266, 274, 275, 287, 288, 296, 297, 310, 311, 316, 317, 327, 328, 333, 334, 345, 346, 351, 352, 362, 363, 368, 369, 379, 380, 385, 386, 396, 397, 403, 404, 414, 415, 420, 421, 433, 434, 441, 442, 452, 453, 458, 459, 469, 470, 475, 476, 487, 488, 495, 496, 572, 573, 578, 579, 600, 601, 610, 611, 625, 626, 631, 632, 639, 640, 643, 644, 649, 650, 653, 654, 670, 671, 679, 680, 694, 695, 703, 704, 721, 722, 728, 729, 743, 744, 749, 750, 766, 767, 773, 774, 787, 788, 790, 791, 802, 803, 806, 807, 816, 817, 821, 822, 829, 830, 837, 838, 850, 851, 855, 856, 867, 868, 873, 874, 882, 883, 889, 890, 895, 896, 900, 901, 910, 911, 920, 921, 930, 931, 936, 937, 944, 945, 952, 953, 964, 965, 972, 973, 986, 987, 993, 994, 1005, 1006, 1010, 1011, 1020, 1021, 1027, 1028, 1040, 1041, 1046, 1047, 1055, 1056, 1063, 1064, 1072, 1073, 1080, 1081, 1090, 1091, 1096, 1097, 1107, 1108, 1112, 1113, 1141, 1142, 1162, 1163, 1177, 1178, 1180, 1181, 1183, 1184, 1185, 1189, 1190, 1192, 1193, 1199, 1200, 1202, 1203, 1209, 1210, 1212, 1213, 1220, 1221, 1223, 1224, 1230, 1231, 1233, 1234], "str": [18, 19, 23, 24, 25, 37, 38, 42, 43, 44, 56, 64, 65, 69, 70, 71, 81, 82, 86, 87, 88, 91, 100, 101, 105, 106, 107, 118, 119, 123, 124, 125, 135, 136, 140, 141, 142, 152, 153, 159, 160, 161, 171, 172, 176, 177, 178, 193, 194, 201, 202, 203, 221, 222, 229, 230, 231, 243, 244, 251, 252, 253, 265, 266, 273, 274, 275, 287, 288, 295, 296, 297, 310, 311, 315, 316, 317, 327, 328, 332, 333, 334, 345, 346, 350, 351, 352, 362, 363, 367, 368, 369, 379, 380, 384, 385, 386, 396, 397, 402, 403, 404, 406, 414, 415, 419, 420, 421, 433, 434, 440, 441, 442, 452, 453, 457, 458, 459, 469, 470, 474, 475, 476, 487, 488, 494, 495, 496, 502, 572, 573, 577, 578, 579, 596, 600, 601, 608, 610, 611, 625, 626, 630, 631, 632, 639, 640, 642, 643, 644, 649, 650, 652, 653, 654, 670, 671, 677, 679, 680, 694, 695, 702, 703, 704, 721, 722, 727, 728, 729, 743, 744, 748, 749, 750, 766, 767, 772, 773, 774, 778, 779, 780, 781, 787, 788, 789, 790, 791, 797, 798, 802, 803, 805, 806, 807, 809, 810, 812, 816, 817, 820, 821, 822, 829, 830, 836, 837, 838, 840, 849, 850, 851, 854, 855, 856, 858, 867, 868, 869, 872, 873, 874, 882, 883, 888, 889, 890, 895, 896, 899, 900, 901, 904, 910, 911, 919, 920, 921, 930, 931, 935, 936, 937, 944, 945, 951, 952, 953, 964, 965, 971, 972, 973, 986, 987, 992, 993, 994, 998, 1004, 1005, 1006, 1009, 1010, 1011, 1020, 1021, 1026, 1027, 1028, 1040, 1041, 1045, 1046, 1047, 1049, 1055, 1056, 1061, 1063, 1064, 1066, 1072, 1073, 1079, 1080, 1081, 1084, 1090, 1091, 1092, 1095, 1096, 1097, 1101, 1107, 1108, 1111, 1112, 1113, 1115, 1120, 1121, 1126, 1127, 1138, 1141, 1142, 1143, 1146, 1161, 1162, 1163, 1172, 1177, 1178, 1179, 1180, 1181, 1184, 1185, 1189, 1190, 1191, 1192, 1193, 1199, 1200, 1201, 1202, 1203, 1209, 1210, 1211, 1212, 1213, 1217, 1220, 1221, 1222, 1223, 1224, 1230, 1231, 1232, 1233, 1234, 1242], "path": [18, 24, 37, 43, 64, 70, 81, 87, 100, 106, 118, 124, 135, 141, 152, 160, 171, 177, 193, 202, 221, 230, 243, 252, 265, 274, 287, 296, 310, 316, 327, 333, 345, 351, 362, 368, 379, 385, 396, 403, 414, 420, 433, 441, 452, 458, 469, 475, 487, 495, 572, 578, 600, 610, 625, 631, 639, 643, 649, 653, 670, 679, 694, 703, 721, 728, 743, 749, 766, 773, 787, 790, 802, 806, 809, 812, 816, 821, 829, 837, 850, 855, 867, 873, 882, 889, 895, 900, 910, 920, 930, 936, 944, 952, 964, 972, 986, 993, 1005, 1010, 1020, 1027, 1040, 1046, 1055, 1063, 1072, 1080, 1090, 1096, 1107, 1112, 1141, 1162, 1177, 1180, 1184, 1185, 1189, 1192, 1199, 1202, 1209, 1212, 1220, 1223, 1230, 1233, 1251], "ha": [18, 19, 37, 38, 64, 65, 81, 82, 100, 101, 113, 118, 119, 135, 136, 152, 153, 171, 172, 193, 194, 221, 222, 243, 244, 265, 266, 287, 288, 310, 311, 327, 328, 345, 346, 362, 363, 379, 380, 396, 397, 414, 415, 433, 434, 452, 453, 469, 470, 487, 488, 500, 572, 573, 600, 601, 625, 626, 639, 640, 649, 650, 670, 671, 694, 695, 721, 722, 743, 744, 766, 767, 779, 787, 788, 802, 803, 816, 817, 829, 830, 850, 851, 867, 868, 882, 883, 895, 896, 910, 911, 930, 931, 944, 945, 964, 965, 986, 987, 1005, 1006, 1020, 1021, 1040, 1041, 1055, 1056, 1072, 1073, 1090, 1091, 1107, 1108, 1127, 1141, 1142, 1177, 1178, 1189, 1190, 1199, 1200, 1209, 1210, 1217, 1220, 1221, 1230, 1231, 1248, 1254, 1257], "correct": [18, 19, 37, 38, 64, 65, 81, 82, 100, 101, 118, 119, 135, 136, 152, 153, 171, 172, 193, 194, 221, 222, 243, 244, 265, 266, 287, 288, 310, 311, 327, 328, 345, 346, 362, 363, 379, 380, 396, 397, 414, 415, 433, 434, 452, 453, 469, 470, 487, 488, 555, 572, 573, 600, 601, 625, 626, 639, 640, 649, 650, 670, 671, 694, 695, 721, 722, 743, 744, 766, 767, 787, 788, 802, 803, 816, 817, 829, 830, 850, 851, 867, 868, 882, 883, 895, 896, 910, 911, 930, 931, 944, 945, 964, 965, 975, 986, 987, 1005, 1006, 1020, 1021, 1030, 1040, 1041, 1055, 1056, 1072, 1073, 1090, 1091, 1107, 1108, 1141, 1142, 1177, 1178, 1189, 1190, 1199, 1200, 1209, 1210, 1220, 1221, 1230, 1231, 1242], "schema": [18, 19, 26, 37, 38, 45, 64, 65, 72, 81, 82, 89, 100, 101, 109, 118, 119, 126, 135, 136, 143, 152, 153, 162, 171, 172, 179, 193, 194, 204, 221, 222, 232, 243, 244, 254, 265, 266, 276, 287, 288, 298, 310, 311, 318, 327, 328, 335, 345, 346, 353, 362, 363, 370, 379, 380, 387, 396, 397, 405, 414, 415, 422, 433, 434, 443, 452, 453, 460, 469, 470, 477, 487, 488, 497, 572, 573, 583, 600, 601, 614, 625, 626, 635, 639, 640, 645, 649, 650, 655, 670, 671, 683, 694, 695, 707, 721, 722, 732, 743, 744, 753, 766, 767, 777, 787, 788, 794, 802, 803, 808, 816, 817, 823, 829, 830, 839, 850, 851, 857, 867, 868, 875, 882, 883, 891, 895, 896, 902, 910, 911, 922, 930, 931, 938, 944, 945, 954, 964, 965, 974, 986, 987, 995, 1005, 1006, 1012, 1020, 1021, 1029, 1040, 1041, 1048, 1055, 1056, 1065, 1072, 1073, 1082, 1090, 1091, 1098, 1107, 1108, 1114, 1141, 1142, 1170, 1177, 1178, 1182, 1189, 1190, 1195, 1199, 1200, 1205, 1209, 1210, 1215, 1220, 1221, 1226, 1230, 1231, 1236], "typeerror": [18, 19, 37, 38, 64, 65, 81, 82, 100, 101, 118, 119, 135, 136, 152, 153, 171, 172, 193, 194, 221, 222, 243, 244, 265, 266, 287, 288, 310, 311, 327, 328, 345, 346, 362, 363, 379, 380, 396, 397, 414, 415, 433, 434, 452, 453, 469, 470, 487, 488, 572, 573, 600, 601, 625, 626, 639, 640, 649, 650, 670, 671, 694, 695, 721, 722, 743, 744, 766, 767, 787, 788, 802, 803, 816, 817, 829, 830, 850, 851, 867, 868, 882, 883, 895, 896, 910, 911, 930, 931, 944, 945, 964, 965, 986, 987, 1005, 1006, 1020, 1021, 1040, 1041, 1055, 1056, 1072, 1073, 1090, 1091, 1107, 1108, 1141, 1142, 1177, 1178, 1189, 1190, 1199, 1200, 1209, 1210, 1220, 1221, 1230, 1231], "cluster": [20, 28, 39, 47, 48, 49, 66, 83, 102, 120, 137, 156, 173, 180, 181, 182, 196, 224, 246, 268, 290, 301, 312, 329, 347, 364, 381, 398, 416, 423, 436, 454, 471, 491, 1243], "reordered_el": [20, 21, 39, 40, 66, 67, 83, 84, 102, 103, 120, 121, 137, 138, 156, 157, 173, 174, 196, 197, 224, 225, 246, 247, 268, 269, 290, 291, 312, 313, 329, 330, 347, 348, 364, 365, 381, 382, 398, 399, 416, 417, 436, 437, 454, 455, 471, 472, 491, 492], "provid": [20, 21, 29, 39, 40, 50, 66, 67, 83, 84, 92, 102, 103, 120, 121, 137, 138, 156, 157, 173, 174, 196, 197, 205, 224, 225, 246, 247, 268, 269, 290, 291, 312, 313, 319, 329, 330, 347, 348, 364, 365, 381, 382, 398, 399, 401, 416, 417, 436, 437, 454, 455, 471, 472, 491, 492, 530, 1042, 1122, 1124, 1127, 1132, 1183, 1239, 1240, 1241, 1242, 1245, 1246, 1248, 1255], "explicitli": [20, 21, 39, 40, 66, 67, 83, 84, 102, 103, 120, 121, 137, 138, 156, 157, 173, 174, 196, 197, 224, 225, 246, 247, 268, 269, 290, 291, 312, 313, 329, 330, 347, 348, 364, 365, 381, 382, 398, 399, 416, 417, 436, 437, 454, 455, 471, 472, 491, 492], "dict": [20, 21, 35, 39, 40, 56, 62, 66, 67, 79, 83, 84, 98, 102, 103, 116, 120, 121, 133, 137, 138, 150, 156, 157, 169, 173, 174, 190, 196, 197, 211, 218, 224, 225, 240, 246, 247, 262, 268, 269, 284, 290, 291, 308, 312, 313, 325, 329, 330, 342, 347, 348, 360, 364, 365, 377, 381, 382, 394, 398, 399, 412, 416, 417, 430, 436, 437, 450, 454, 455, 467, 471, 472, 484, 491, 492, 498, 499, 502, 515, 553, 636, 669, 672, 795, 796, 959, 967, 968, 976, 978, 1015, 1022, 1023, 1031, 1033, 1122, 1126], "addit": [20, 21, 35, 39, 40, 51, 62, 66, 67, 79, 83, 84, 98, 102, 103, 116, 120, 121, 133, 137, 138, 150, 156, 157, 169, 173, 174, 190, 196, 197, 208, 211, 218, 224, 225, 240, 246, 247, 262, 268, 269, 284, 290, 291, 308, 312, 313, 325, 329, 330, 342, 347, 348, 360, 364, 365, 377, 381, 382, 394, 398, 399, 412, 416, 417, 430, 436, 437, 450, 454, 455, 467, 471, 472, 484, 491, 492, 669, 672, 1126, 1246, 1247, 1248, 1252], "keyword": [20, 21, 35, 39, 40, 62, 66, 67, 79, 83, 84, 98, 102, 103, 116, 120, 121, 133, 137, 138, 150, 156, 157, 169, 173, 174, 190, 196, 197, 211, 218, 224, 225, 240, 246, 247, 262, 268, 269, 284, 290, 291, 308, 312, 313, 325, 329, 330, 342, 347, 348, 360, 364, 365, 377, 381, 382, 394, 398, 399, 412, 416, 417, 430, 436, 437, 450, 454, 455, 467, 471, 472, 484, 491, 492, 502, 515, 553, 669, 672, 1126], "candid": [21, 40, 67, 84, 103, 121, 138, 157, 174, 197, 225, 247, 269, 291, 313, 330, 348, 365, 382, 399, 417, 437, 455, 472, 492, 1122, 1130, 1155], "jointcandid": [21, 40, 67, 103, 121, 138, 157, 174, 313, 330, 348, 365, 382, 399, 417, 437, 455, 472, 492, 1122, 1130, 1155, 1243], "restor": [22, 41, 68, 85, 104, 122, 139, 158, 175, 199, 227, 249, 271, 293, 314, 331, 349, 366, 383, 400, 418, 438, 456, 473, 493, 1242], "refer": [22, 41, 68, 85, 104, 122, 139, 158, 175, 199, 227, 249, 271, 293, 314, 331, 349, 366, 383, 400, 418, 438, 456, 473, 493, 499, 584, 589, 602, 603, 604, 609, 657, 673, 678, 709, 754, 797, 798, 824, 831, 840, 849, 858, 869, 876, 884, 903, 912, 914, 923, 929, 939, 946, 955, 957, 959, 966, 967, 968, 976, 978, 981, 988, 998, 1004, 1015, 1022, 1023, 1031, 1033, 1049, 1057, 1066, 1074, 1084, 1092, 1101, 1240, 1242, 1243, 1246, 1247], "dure": [22, 23, 42, 68, 69, 86, 105, 113, 123, 140, 159, 176, 199, 201, 227, 229, 249, 251, 271, 273, 293, 295, 315, 332, 336, 350, 367, 384, 402, 419, 438, 440, 457, 474, 494, 510, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1151, 1161, 1179, 1191, 1201, 1211, 1217, 1222, 1232, 1240, 1241, 1242], "serial": [22, 41, 68, 85, 104, 122, 139, 158, 175, 199, 227, 249, 271, 293, 314, 331, 349, 366, 383, 400, 418, 438, 456, 473, 493, 811, 1183, 1240, 1242], "part": [22, 46, 68, 199, 227, 249, 271, 293, 438, 498, 778, 795, 928, 929, 1124, 1132, 1237, 1243, 1248, 1252], "To": [22, 68, 199, 227, 249, 271, 293, 438, 1244, 1246, 1253, 1255, 1258], "avoid": [22, 47, 68, 199, 227, 249, 271, 293, 438, 566, 569, 590, 593, 619, 622, 663, 688, 691, 713, 716, 737, 740, 758, 761, 1242], "circular": [22, 68, 199, 227, 249, 271, 293, 438], "store": [22, 68, 199, 227, 249, 271, 293, 438, 1130, 1242, 1247, 1248], "kei": [22, 68, 199, 227, 249, 271, 293, 438, 498, 499, 584, 586, 605, 657, 797, 997, 1247], "de": [22, 41, 68, 85, 104, 122, 139, 158, 175, 199, 227, 249, 271, 293, 314, 331, 349, 366, 383, 400, 418, 438, 456, 473, 493, 1242], "sinc": [22, 68, 199, 227, 249, 271, 293, 438, 1151], "role": [22, 52, 55, 68, 199, 227, 249, 271, 293, 299, 438, 509, 1242], "specif": [22, 52, 68, 199, 227, 249, 271, 293, 438, 813, 892, 1140, 1148, 1240, 1242, 1243, 1248, 1249, 1254], "e": [22, 52, 68, 181, 199, 227, 249, 271, 293, 299, 438, 684, 831, 849, 869, 929, 946, 955, 957, 966, 1004, 1057, 1074, 1092, 1240, 1242, 1244, 1247, 1257], "g": [22, 52, 68, 199, 227, 249, 271, 293, 299, 438, 684, 1242, 1247], "cross": [22, 29, 41, 52, 55, 68, 92, 104, 108, 110, 122, 139, 158, 163, 175, 199, 227, 249, 271, 293, 302, 314, 319, 331, 336, 349, 354, 366, 383, 388, 400, 406, 418, 438, 456, 473, 478, 482, 493, 584, 598, 599, 708, 849, 869, 1004, 1057, 1066, 1074, 1092, 1242, 1248, 1249, 1254], "concret": [22, 68, 199, 227, 249, 271, 293, 438, 1242], "exampl": [22, 23, 42, 68, 69, 86, 105, 123, 140, 159, 176, 199, 201, 227, 229, 249, 251, 271, 273, 293, 295, 315, 332, 350, 367, 384, 402, 419, 438, 440, 457, 474, 494, 498, 499, 500, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1127, 1161, 1179, 1191, 1201, 1211, 1222, 1232, 1243, 1246, 1247, 1248, 1258], "tbuttjoint": [22, 68, 199, 227, 249, 271, 293, 438, 1242, 1243], "as_str": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "comput": [23, 42, 53, 69, 86, 105, 123, 140, 159, 176, 201, 209, 210, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 566, 567, 569, 570, 577, 590, 591, 592, 593, 594, 608, 619, 620, 622, 623, 630, 642, 652, 663, 664, 665, 666, 667, 677, 688, 689, 691, 692, 702, 713, 714, 715, 716, 717, 727, 737, 738, 739, 740, 741, 748, 758, 759, 760, 761, 762, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1133, 1134, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "hash": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "comparison": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "version": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "control": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "algorithm": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 500, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "digest": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "hexadecim": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "format": [23, 24, 25, 42, 43, 44, 69, 70, 71, 86, 87, 88, 105, 106, 107, 123, 124, 125, 140, 141, 142, 159, 160, 161, 176, 177, 178, 201, 202, 203, 209, 229, 230, 231, 251, 252, 253, 273, 274, 275, 295, 296, 297, 315, 316, 317, 332, 333, 334, 350, 351, 352, 367, 368, 369, 384, 385, 386, 402, 403, 404, 419, 420, 421, 440, 441, 442, 457, 458, 459, 474, 475, 476, 494, 495, 496, 577, 578, 579, 608, 610, 611, 630, 631, 632, 642, 643, 644, 652, 653, 654, 677, 679, 680, 702, 703, 704, 727, 728, 729, 748, 749, 750, 772, 773, 774, 789, 790, 791, 796, 805, 806, 807, 809, 820, 821, 822, 836, 837, 838, 854, 855, 856, 872, 873, 874, 888, 889, 890, 899, 900, 901, 919, 920, 921, 935, 936, 937, 951, 952, 953, 971, 972, 973, 992, 993, 994, 1009, 1010, 1011, 1026, 1027, 1028, 1045, 1046, 1047, 1061, 1063, 1064, 1079, 1080, 1081, 1095, 1096, 1097, 1111, 1112, 1113, 1161, 1162, 1163, 1179, 1180, 1181, 1183, 1191, 1192, 1193, 1201, 1202, 1203, 1211, 1212, 1213, 1222, 1223, 1224, 1232, 1233, 1234, 1240, 1247], "rather": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 778, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "byte": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "datastructur": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 567, 577, 591, 608, 620, 630, 642, 652, 664, 665, 677, 689, 702, 714, 715, 727, 738, 739, 748, 759, 760, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1133, 1134, 1156, 1158, 1161, 1166, 1167, 1168, 1169, 1179, 1191, 1201, 1211, 1222, 1232], "import": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1127, 1151, 1161, 1179, 1191, 1201, 1211, 1222, 1232, 1258], "mesh": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 567, 577, 591, 608, 620, 630, 642, 652, 664, 665, 677, 689, 702, 714, 715, 727, 738, 739, 748, 759, 760, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 967, 968, 971, 992, 1009, 1022, 1023, 1026, 1031, 1033, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "from_obj": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "get": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 498, 499, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1138, 1143, 1144, 1161, 1179, 1191, 1201, 1211, 1222, 1232, 1242, 1246, 1247], "face": [23, 29, 42, 69, 86, 90, 92, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 498, 577, 584, 597, 608, 630, 642, 652, 657, 672, 677, 702, 708, 720, 727, 748, 765, 772, 789, 797, 805, 820, 836, 854, 858, 872, 888, 899, 919, 935, 951, 967, 968, 971, 975, 978, 992, 997, 1009, 1022, 1023, 1026, 1030, 1031, 1033, 1042, 1045, 1061, 1079, 1084, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232, 1240, 1242, 1254], "obj": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1217, 1222, 1232], "v1": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "v2": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "vertex_attribut": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "vertex_sampl": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "1": [23, 42, 54, 55, 69, 86, 105, 123, 127, 140, 159, 176, 201, 207, 229, 251, 273, 295, 315, 332, 336, 350, 354, 367, 384, 388, 402, 406, 419, 440, 444, 457, 474, 494, 499, 577, 584, 608, 630, 642, 652, 677, 702, 713, 727, 748, 758, 772, 789, 795, 797, 805, 820, 824, 834, 836, 840, 852, 854, 858, 870, 872, 886, 888, 899, 917, 919, 923, 933, 935, 939, 949, 951, 959, 969, 971, 981, 992, 998, 1007, 1009, 1015, 1024, 1026, 1043, 1045, 1049, 1059, 1061, 1066, 1077, 1079, 1084, 1093, 1095, 1109, 1111, 1116, 1161, 1179, 1191, 1201, 1211, 1222, 1232, 1248, 1254, 1258], "0": [23, 42, 51, 54, 55, 69, 86, 105, 123, 127, 140, 159, 176, 201, 207, 208, 229, 251, 273, 295, 315, 332, 336, 350, 354, 367, 384, 388, 402, 406, 419, 440, 444, 457, 474, 494, 499, 500, 566, 569, 577, 584, 590, 593, 608, 609, 619, 622, 630, 642, 652, 657, 663, 666, 672, 677, 678, 688, 691, 702, 713, 716, 727, 737, 740, 748, 758, 761, 772, 789, 795, 798, 805, 820, 824, 831, 834, 836, 840, 849, 852, 854, 858, 869, 870, 872, 876, 886, 888, 899, 917, 919, 923, 929, 933, 935, 939, 946, 949, 951, 955, 957, 959, 966, 967, 968, 969, 971, 978, 981, 988, 992, 998, 1004, 1007, 1009, 1015, 1022, 1023, 1024, 1026, 1031, 1033, 1043, 1045, 1049, 1052, 1057, 1059, 1061, 1066, 1068, 1074, 1077, 1079, 1084, 1092, 1093, 1095, 1101, 1109, 1111, 1120, 1136, 1161, 1179, 1191, 1201, 1211, 1222, 1232, 1237, 1240, 1244, 1248, 1252, 1254], "z": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 584, 598, 599, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 876, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1156, 1157, 1158, 1159, 1161, 1179, 1191, 1201, 1211, 1222, 1232, 1248, 1249, 1252, 1257], "v3": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "pretti": [24, 25, 43, 44, 70, 71, 87, 88, 106, 107, 124, 125, 141, 142, 160, 161, 177, 178, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 316, 317, 333, 334, 351, 352, 368, 369, 385, 386, 403, 404, 420, 421, 441, 442, 458, 459, 475, 476, 495, 496, 578, 579, 610, 611, 631, 632, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234], "compact": [24, 25, 43, 44, 70, 71, 87, 88, 106, 107, 124, 125, 141, 142, 160, 161, 177, 178, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 316, 317, 333, 334, 351, 352, 368, 369, 385, 386, 403, 404, 420, 421, 441, 442, 458, 459, 475, 476, 495, 496, 578, 579, 610, 611, 631, 632, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234], "minim": [24, 25, 43, 44, 70, 71, 87, 88, 106, 107, 124, 125, 141, 142, 160, 161, 177, 178, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 316, 317, 333, 334, 351, 352, 368, 369, 385, 386, 403, 404, 420, 421, 424, 441, 442, 458, 459, 475, 476, 495, 496, 578, 579, 610, 611, 631, 632, 636, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234], "nativ": [24, 25, 43, 44, 70, 71, 87, 88, 106, 107, 124, 125, 141, 142, 160, 161, 177, 178, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 316, 317, 333, 334, 351, 352, 368, 369, 385, 386, 403, 404, 420, 421, 441, 442, 458, 459, 475, 476, 495, 496, 578, 579, 610, 611, 631, 632, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234], "save": [24, 25, 41, 43, 44, 70, 71, 85, 87, 88, 104, 106, 107, 122, 124, 125, 139, 141, 142, 158, 160, 161, 175, 177, 178, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 314, 316, 317, 331, 333, 334, 349, 351, 352, 366, 368, 369, 383, 385, 386, 400, 403, 404, 418, 420, 421, 441, 442, 456, 458, 459, 473, 475, 476, 493, 495, 496, 578, 579, 610, 611, 631, 632, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234, 1242, 1251], "newlin": [24, 25, 43, 44, 70, 71, 87, 88, 106, 107, 124, 125, 141, 142, 160, 161, 177, 178, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 316, 317, 333, 334, 351, 352, 368, 369, 385, 386, 403, 404, 420, 421, 441, 442, 458, 459, 475, 476, 495, 496, 578, 579, 610, 611, 631, 632, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234], "indent": [24, 25, 43, 44, 70, 71, 87, 88, 106, 107, 124, 125, 141, 142, 160, 161, 177, 178, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 316, 317, 333, 334, 351, 352, 368, 369, 385, 386, 403, 404, 420, 421, 441, 442, 458, 459, 475, 476, 495, 496, 578, 579, 610, 611, 631, 632, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234], "without": [24, 25, 43, 44, 70, 71, 87, 88, 106, 107, 124, 125, 127, 141, 142, 160, 161, 177, 178, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 316, 317, 333, 334, 351, 352, 354, 368, 369, 385, 386, 403, 404, 420, 421, 441, 442, 444, 458, 459, 475, 476, 495, 496, 578, 579, 610, 611, 631, 632, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234, 1245, 1248], "ani": [24, 25, 26, 43, 44, 45, 70, 71, 72, 73, 76, 87, 88, 89, 106, 107, 109, 124, 125, 126, 141, 142, 143, 160, 161, 162, 177, 178, 179, 202, 203, 204, 230, 231, 232, 252, 253, 254, 274, 275, 276, 296, 297, 298, 316, 317, 318, 333, 334, 335, 351, 352, 353, 368, 369, 370, 385, 386, 387, 403, 404, 405, 420, 421, 422, 441, 442, 443, 458, 459, 460, 475, 476, 477, 495, 496, 497, 578, 579, 583, 610, 611, 614, 631, 632, 635, 643, 644, 645, 653, 654, 655, 679, 680, 683, 703, 704, 707, 728, 729, 732, 749, 750, 753, 773, 774, 777, 790, 791, 794, 806, 807, 808, 821, 822, 823, 837, 838, 839, 843, 855, 856, 857, 861, 873, 874, 875, 889, 890, 891, 900, 901, 902, 920, 921, 922, 936, 937, 938, 952, 953, 954, 972, 973, 974, 993, 994, 995, 1001, 1010, 1011, 1012, 1027, 1028, 1029, 1046, 1047, 1048, 1053, 1063, 1064, 1065, 1070, 1080, 1081, 1082, 1087, 1096, 1097, 1098, 1112, 1113, 1114, 1162, 1163, 1170, 1180, 1181, 1182, 1192, 1193, 1195, 1202, 1203, 1205, 1212, 1213, 1215, 1223, 1224, 1226, 1233, 1234, 1236, 1245, 1254, 1258], "whitespac": [24, 25, 43, 44, 70, 71, 87, 88, 106, 107, 124, 125, 141, 142, 160, 161, 177, 178, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 316, 317, 333, 334, 351, 352, 368, 369, 385, 386, 403, 404, 420, 421, 441, 442, 458, 459, 475, 476, 495, 496, 578, 579, 610, 611, 631, 632, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234], "exclud": [24, 25, 28, 43, 44, 47, 48, 70, 71, 87, 88, 106, 107, 124, 125, 141, 142, 160, 161, 177, 178, 182, 202, 203, 230, 231, 252, 253, 274, 275, 296, 297, 316, 317, 333, 334, 351, 352, 368, 369, 385, 386, 403, 404, 420, 421, 441, 442, 458, 459, 475, 476, 495, 496, 578, 579, 610, 611, 631, 632, 643, 644, 653, 654, 679, 680, 703, 704, 728, 729, 749, 750, 773, 774, 790, 791, 806, 807, 821, 822, 837, 838, 855, 856, 873, 874, 889, 890, 900, 901, 920, 921, 936, 937, 952, 953, 972, 973, 993, 994, 1010, 1011, 1027, 1028, 1046, 1047, 1063, 1064, 1080, 1081, 1096, 1097, 1112, 1113, 1162, 1163, 1180, 1181, 1192, 1193, 1202, 1203, 1212, 1213, 1223, 1224, 1233, 1234], "valid": [26, 45, 72, 89, 109, 126, 143, 162, 179, 204, 232, 254, 276, 298, 318, 335, 353, 370, 387, 405, 422, 443, 460, 477, 497, 583, 614, 635, 645, 655, 662, 683, 707, 732, 753, 777, 794, 808, 823, 839, 857, 875, 891, 902, 922, 938, 954, 974, 995, 1012, 1029, 1048, 1065, 1082, 1098, 1114, 1170, 1182, 1195, 1205, 1215, 1226, 1236, 1240, 1242], "against": [26, 45, 72, 89, 109, 126, 143, 162, 179, 204, 232, 254, 276, 298, 318, 335, 353, 370, 387, 405, 422, 443, 460, 477, 497, 499, 583, 614, 635, 645, 655, 683, 707, 732, 753, 777, 794, 808, 823, 839, 857, 875, 891, 902, 922, 938, 954, 974, 995, 1012, 1029, 1048, 1065, 1082, 1098, 1114, 1170, 1182, 1195, 1205, 1215, 1226, 1236], "raw": [26, 45, 72, 89, 109, 126, 143, 162, 179, 204, 232, 254, 276, 298, 318, 335, 353, 370, 387, 405, 422, 443, 460, 477, 497, 583, 614, 635, 645, 655, 683, 707, 732, 753, 777, 794, 808, 823, 839, 857, 875, 891, 902, 922, 938, 954, 974, 995, 1012, 1029, 1048, 1065, 1082, 1098, 1114, 1170, 1182, 1195, 1205, 1215, 1226, 1236, 1248], "__from_data__": [26, 45, 72, 89, 109, 126, 143, 162, 179, 204, 232, 254, 276, 298, 318, 335, 353, 370, 387, 405, 422, 443, 460, 477, 497, 583, 614, 635, 645, 655, 683, 707, 732, 753, 777, 794, 808, 823, 839, 857, 875, 891, 902, 922, 938, 954, 974, 995, 1012, 1029, 1048, 1065, 1082, 1098, 1114, 1170, 1182, 1195, 1205, 1215, 1226, 1236], "group": [27, 46, 709, 754, 1124, 1125, 1126, 1127, 1140, 1143, 1146, 1247], "analyz": [27, 46, 47, 48, 49, 180, 181], "pairwis": [28, 181, 182, 301, 423], "point": [28, 46, 56, 154, 181, 182, 301, 423, 501, 566, 569, 584, 590, 593, 596, 599, 619, 622, 636, 657, 663, 684, 688, 691, 713, 716, 737, 740, 758, 761, 796, 813, 840, 858, 876, 884, 892, 912, 914, 998, 1084, 1122, 1156, 1157, 1243, 1254, 1257], "within": [28, 52, 54, 181, 182, 301, 423, 518, 528, 1217, 1240, 1248], "toler": [28, 49, 53, 180, 181, 182, 206, 207, 209, 210, 301, 423, 1122, 1255], "l": [29, 92, 110, 127, 144, 163, 299, 406, 553, 561, 1242, 1256], "butt": [29, 92, 183, 233, 277, 319, 478, 482, 561, 1242, 1249], "lbuttjoint": [29, 1242, 1243], "main_beam": [29, 92, 110, 127, 163, 302, 319, 336, 354, 388, 406, 444, 461, 478, 684, 696, 966, 1242], "cross_beam": [29, 92, 110, 127, 163, 302, 319, 336, 354, 388, 406, 444, 461, 478, 696, 1242], "mill_depth": [29, 92, 302, 319, 478, 1254], "depth": [29, 92, 302, 319, 336, 388, 401, 406, 478, 813, 840, 849, 858, 869, 876, 892, 904, 912, 913, 939, 959, 966, 981, 988, 998, 1004, 1015, 1042, 1049, 1066, 1084, 1092, 1254], "pocket": [29, 92, 302, 319, 478, 840, 966, 980, 1031, 1032, 1033, 1034, 1243, 1254], "mill": [29, 92, 302, 319, 478, 843, 861, 1001, 1053, 1070, 1087, 1240, 1254], "ignor": [29, 92], "butt_plan": [29, 92, 319], "modify_cross": [29, 92, 1254], "extend": [29, 92, 586, 597, 1151, 1153, 1242, 1254], "opposit": [29, 92, 604, 673, 903, 1254], "cut": [29, 92, 127, 319, 336, 343, 354, 388, 444, 478, 498, 499, 782, 798, 824, 827, 831, 832, 833, 840, 843, 845, 846, 847, 848, 849, 858, 861, 863, 864, 865, 866, 869, 879, 903, 904, 907, 923, 926, 928, 929, 932, 939, 942, 946, 947, 948, 955, 956, 957, 959, 962, 966, 967, 968, 975, 976, 978, 980, 981, 984, 988, 989, 990, 996, 997, 998, 1001, 1003, 1004, 1013, 1014, 1015, 1018, 1022, 1023, 1030, 1031, 1032, 1033, 1038, 1042, 1049, 1053, 1057, 1058, 1062, 1066, 1070, 1074, 1075, 1076, 1083, 1084, 1087, 1089, 1092, 1099, 1100, 1101, 1240, 1242, 1246, 1248, 1254, 1255], "plane": [29, 92, 144, 154, 209, 300, 319, 498, 499, 597, 684, 827, 831, 832, 833, 843, 849, 869, 879, 907, 926, 929, 942, 946, 947, 948, 955, 956, 957, 962, 966, 984, 988, 989, 990, 1001, 1004, 1018, 1038, 1042, 1053, 1057, 1058, 1070, 1074, 1076, 1089, 1092, 1240, 1242, 1248, 1252, 1254, 1257], "closest": [29, 92, 319, 1249], "side": [29, 92, 110, 127, 163, 299, 319, 354, 444, 498, 499, 501, 584, 589, 602, 603, 604, 609, 657, 673, 678, 797, 798, 824, 831, 840, 849, 858, 869, 876, 884, 912, 914, 923, 929, 939, 946, 955, 957, 959, 966, 967, 968, 976, 978, 981, 988, 998, 1004, 1015, 1022, 1023, 1031, 1033, 1042, 1049, 1057, 1066, 1074, 1084, 1092, 1101, 1240, 1242, 1249, 1252, 1254], "necessari": [31, 94, 112, 113, 129, 146, 304, 321, 338, 356, 373, 390, 408, 480, 1242, 1244], "automat": [31, 32, 94, 95, 112, 129, 130, 146, 147, 304, 305, 321, 322, 336, 338, 339, 356, 357, 373, 374, 390, 391, 406, 408, 409, 447, 464, 480, 481, 697, 840, 849, 858, 869, 998, 1004, 1084, 1092, 1100, 1101, 1240, 1254, 1257], "could": [31, 94, 112, 129, 146, 304, 321, 338, 356, 373, 390, 408, 480, 780, 781, 849, 869, 1004, 1057, 1074, 1092, 1171, 1240], "both": [32, 90, 95, 130, 147, 305, 322, 339, 357, 374, 391, 406, 409, 447, 464, 481, 1128, 1132, 1240, 1242, 1252, 1254], "must": [35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 535, 684, 824, 840, 858, 892, 923, 939, 959, 967, 968, 978, 988, 998, 1022, 1023, 1031, 1033, 1042, 1049, 1066, 1084, 1151, 1240, 1249, 1252], "min_element_count": [35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484], "max_element_count": [35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484], "after": [41, 85, 104, 113, 122, 139, 158, 175, 314, 331, 349, 366, 383, 400, 418, 456, 473, 493, 602, 827, 843, 861, 879, 907, 926, 942, 956, 962, 977, 984, 1001, 1018, 1032, 1038, 1053, 1070, 1087, 1104, 1242, 1253], "One": [46, 91, 1172, 1217, 1242], "result": [46, 52, 461, 596, 636, 798, 827, 843, 861, 879, 907, 926, 942, 956, 962, 977, 984, 1001, 1018, 1032, 1038, 1053, 1070, 1087, 1104, 1216, 1240, 1248, 1249], "offer": 46, "access": 46, "set": [46, 48, 51, 182, 208, 336, 401, 500, 504, 517, 553, 555, 708, 997, 1122, 1147, 1237, 1240, 1247, 1248, 1249, 1254, 1255], "uniqu": [46, 584, 657, 1138], "locat": [46, 54, 56, 584, 1217, 1248], "approxim": [46, 207], "effect": 46, "first": [46, 52, 53, 73, 127, 144, 180, 206, 209, 210, 211, 302, 336, 388, 406, 424, 444, 461, 498, 499, 502, 509, 596, 824, 832, 1101, 1128, 1147, 1151, 1240, 1242, 1252, 1254, 1258], "combin": [47, 388, 1254], "find": [47, 49, 51, 180, 181, 208, 301, 423, 498, 499, 500, 797, 912, 914, 1140, 1237, 1248, 1254], "beamgroupanalyz": [47, 49, 73, 181, 1243], "prefer": [47, 180], "from_model": 47, "prone": 47, "manual": 47, "instanti": [47, 56, 113, 163, 733], "pair": [47, 51, 52, 208, 500, 1237, 1247], "handl": [47, 1240, 1241, 1242, 1243], "previou": [47, 589], "subsequ": 47, "composit": 48, "analysi": [48, 49, 73, 180, 181, 182, 1242, 1243], "analyzers_cl": 49, "specifi": [49, 1042, 1138, 1240, 1242, 1249], "tool": [50, 205, 336, 343, 840, 845, 858, 863, 869, 904, 912, 914, 981, 988, 1092, 1243, 1244, 1246, 1254, 1256, 1257], "detect": [50, 205, 1255], "intersect": [50, 51, 52, 53, 154, 205, 207, 208, 209, 210, 502, 504, 508, 515, 517, 522, 534, 553, 555, 559, 827, 879, 907, 926, 942, 956, 962, 977, 984, 1018, 1032, 1038, 1042, 1242], "rtree": [51, 208, 1237], "max_dist": [51, 52, 53, 208, 209, 210, 502, 504, 508, 515, 517, 522, 534, 553, 555, 559, 560, 1135, 1136], "r": [51, 208, 500], "tree": [51, 208, 500, 1124], "search": [51, 208, 500, 1253], "neighbor": [51, 208, 500, 1237], "distanc": [51, 52, 53, 208, 209, 210, 502, 504, 508, 515, 517, 522, 534, 553, 555, 559, 672, 840, 858, 966, 998, 1084, 1136, 1249, 1255], "apart": [51, 208], "non": [51, 90, 208], "touch": [51, 208], "still": [51, 208, 1153], "consid": [51, 52, 53, 208, 209, 210, 498, 499, 502, 504, 508, 515, 517, 522, 534, 553, 555, 559, 589, 602, 604, 673, 1136, 1242, 1254], "neightbor": [51, 208, 1237], "beam_a": [52, 144, 489, 498, 499, 501, 1127], "beam_b": [52, 144, 489, 498, 499, 501], "sensit": 52, "consist": [52, 1240, 1242], "second": [52, 53, 73, 127, 144, 206, 209, 210, 211, 302, 336, 388, 406, 424, 444, 461, 502, 509, 596, 824, 832, 1128, 1147, 1151, 1242, 1252], "otherwis": [52, 92, 206, 207, 498, 499, 504, 517, 530, 555, 662, 876, 1245, 1248], "thei": [52, 401, 555, 636, 831, 1242, 1254, 1258], "were": [52, 56, 779, 1247], "input": [52, 500, 636, 783, 1115, 1116, 1120, 1240, 1246, 1247, 1248, 1249, 1251, 1252, 1254, 1255], "maximum": [52, 53, 180, 209, 210, 502, 504, 508, 515, 517, 522, 534, 553, 555, 559, 1136], "unit": [52, 53, 207, 209, 210, 500, 597, 709, 754, 795, 1240, 1242], "beamsolverresult": 52, "wall_a": [53, 210, 424], "wall_b": [53, 210, 424], "tol": [53, 206, 207, 209, 210, 504, 517, 555, 560, 1122, 1240], "1e": [53, 207, 209, 210, 504, 508, 517, 522, 534, 555, 559, 560], "06": [53, 207, 209, 210, 560], "wall": [53, 54, 210, 424, 435, 535, 709, 720, 733, 1122, 1127, 1136, 1243, 1249], "todo": [53, 210, 424, 523, 562, 597, 615, 636, 657, 687, 709, 754, 778, 781, 795, 813, 884, 892, 1104, 1127, 1143, 1146, 1160, 1254], "through": [53, 56, 127, 210, 354, 444, 461, 597, 636, 876, 884, 904, 988, 1238, 1254], "rework": [53, 210], "potenti": [53, 209, 210], "mathemat": [53, 209, 210], "desigen": [53, 209, 210], "f": [53, 210, 1240], "tupl": [53, 56, 209, 210, 211, 424, 504, 509, 517, 555, 584, 597, 603, 657, 684, 1128], "jointtopologi": [53, 56, 209, 210, 211, 299, 424, 502, 517, 553, 1122, 1242, 1243], "enumer": [54, 55, 90], "possibl": [54, 55, 90, 523, 1247], "back": [54, 92, 589, 708, 997, 1240], "liter": [54, 55, 56, 211, 299, 424, 782, 903, 980, 1014, 1083, 1100], "front": [54, 602, 708, 997], "top": [54, 461, 657, 672, 782, 840, 858, 914, 980, 997, 998, 1084, 1092, 1101, 1246, 1254], "2": [54, 180, 336, 388, 406, 584, 684, 834, 852, 870, 886, 917, 933, 949, 969, 1007, 1024, 1043, 1059, 1077, 1093, 1109, 1254, 1258], "bottom": [54, 657, 672, 782, 840, 858, 869, 914, 997, 998, 1084, 1092, 1101, 1254], "3": [54, 207, 336, 406, 423, 584, 1244, 1254, 1258], "4": [54, 301, 336, 406, 584, 1254], "some": [54, 636, 778, 1240, 1242, 1246, 1257], "interact": [56, 211, 424, 1122, 1128, 1130, 1140, 1144, 1147, 1153, 1242, 1258], "directli": [56, 163, 515, 604, 673, 733, 1124, 1125, 1242, 1249, 1254], "one": [56, 90, 114, 127, 209, 302, 336, 354, 388, 406, 444, 461, 498, 499, 501, 509, 565, 588, 618, 660, 712, 736, 757, 778, 797, 1042, 1128, 1132, 1216, 1217, 1240, 1248, 1254, 1256], "estim": 56, "name": [56, 523, 798, 809, 1115, 1118, 1119, 1120, 1121, 1126, 1127, 1143, 1146, 1240, 1242, 1247, 1256], "map": [56, 498, 499, 1246, 1257], "start": [56, 336, 406, 584, 586, 589, 596, 597, 599, 602, 604, 673, 824, 840, 849, 858, 869, 876, 923, 939, 959, 981, 988, 997, 998, 1004, 1014, 1015, 1049, 1066, 1084, 1092, 1101, 1246, 1248, 1254], "depend": [56, 596, 598, 599, 1244, 1254], "btlxprocess": [56, 778, 824, 835, 840, 849, 853, 858, 871, 876, 887, 904, 918, 923, 934, 939, 950, 959, 970, 981, 991, 998, 1004, 1008, 1015, 1025, 1035, 1044, 1049, 1060, 1066, 1078, 1084, 1094, 1101, 1110, 1240, 1241, 1242, 1243], "inform": [73, 510, 779, 1243, 1249, 1255, 1256, 1257], "It": [73, 113, 504, 555, 615, 709, 754, 1066, 1243, 1244, 1246, 1247, 1248, 1254, 1255, 1257], "joineri": [73, 798, 1151], "later": [73, 336, 1240, 1247, 1248], "perform": [73, 955, 976, 1031], "element_a": 73, "timberel": [73, 504, 508, 509, 515, 517, 522, 530, 534, 555, 559, 584, 615, 657, 709, 780, 967, 1022, 1023, 1033, 1127, 1153, 1241, 1243], "element_b": 73, "topo_unknown": [90, 91], "topo_i": [90, 91, 1242], "parallel": [90, 603, 959, 966, 1042, 1217, 1248, 1254], "topo_l": [90, 91, 1242], "topo_t": [90, 91, 1242], "middl": [90, 584, 1254], "topo_x": [90, 91, 1242], "three": [90, 478, 1254, 1258], "more": [90, 388, 565, 588, 618, 636, 660, 712, 736, 757, 779, 1242, 1243, 1246, 1248, 1254], "where": [90, 209, 211, 424, 499, 976, 1248, 1251, 1254, 1257], "meet": [90, 211, 424, 1242, 1254], "topo_k": [90, 91], "least": [90, 1240], "topo_edge_edg": [90, 91], "plate": [90, 183, 186, 187, 195, 205, 209, 211, 214, 215, 223, 233, 236, 237, 245, 255, 258, 259, 267, 277, 280, 281, 289, 299, 535, 636, 684, 733, 912, 913, 914, 1018, 1022, 1023, 1030, 1031, 1032, 1033, 1122, 1243, 1249, 1255], "edg": [90, 209, 255, 535, 584, 657, 672, 840, 849, 858, 869, 903, 998, 1004, 1042, 1084, 1092, 1128, 1130, 1153, 1249, 1254], "align": [90, 110, 500, 566, 584, 590, 619, 657, 663, 688, 713, 737, 758, 782, 1101, 1133, 1246, 1257], "topo_edge_fac": [90, 91], "valu": [91, 127, 354, 444, 500, 584, 657, 796, 834, 849, 852, 870, 886, 917, 933, 949, 969, 1004, 1007, 1024, 1043, 1059, 1066, 1077, 1093, 1109, 1172, 1240, 1247], "For": [91, 482, 500, 1151, 1172, 1240, 1242, 1243, 1257], "log": [91, 1172], "int": [91, 180, 181, 209, 211, 336, 388, 406, 498, 499, 584, 586, 589, 602, 603, 604, 605, 609, 657, 673, 678, 795, 798, 824, 831, 849, 858, 869, 912, 914, 923, 929, 939, 946, 955, 957, 959, 966, 967, 968, 976, 978, 988, 1004, 1022, 1023, 1031, 1033, 1049, 1057, 1066, 1074, 1084, 1092, 1116, 1120, 1121, 1128, 1172, 1217], "buttjoint": [92, 319, 1242, 1243], "small_beam_butt": [92, 108, 1254], "smaller": [92, 108, 584, 1248], "section": [92, 108, 584, 598, 599, 1239, 1241, 1246, 1248, 1249, 1253, 1254], "back_plan": 92, "reject_i": [92, 1254], "reject": 92, "flip": [108, 110, 127, 163, 354, 444, 884, 1254], "priorit": 108, "lapjoint": [110, 114, 127, 354, 444, 1243], "frenchridgelap": [110, 1240, 1243], "lap": [110, 127, 163, 354, 444, 561, 923, 932, 976, 977, 978, 979, 1240, 1243], "ridg": [110, 923, 932], "dimens": [110, 114, 482, 584, 603, 795, 1196, 1242, 1248], "flip_lap_sid": [110, 127, 163, 354, 444, 1254], "drillhole_diam": [110, 923, 929, 1254], "drill": [110, 923, 947, 1240, 1243], "hole": [110, 636, 684, 923, 1246, 1252, 1254], "made": [110, 336, 388, 406, 824, 840, 858, 884, 885, 923, 939, 959, 981, 998, 1015, 1049, 1066, 1084, 1101, 1254], "process_joineri": 113, "process": [113, 336, 406, 508, 522, 523, 534, 559, 584, 657, 778, 783, 795, 798, 804, 813, 827, 832, 834, 835, 843, 852, 853, 861, 870, 871, 876, 879, 884, 885, 886, 887, 892, 904, 907, 912, 913, 914, 917, 918, 926, 933, 934, 942, 947, 949, 950, 955, 956, 958, 962, 969, 970, 976, 977, 979, 984, 989, 991, 1001, 1007, 1008, 1018, 1024, 1025, 1031, 1032, 1034, 1038, 1043, 1044, 1053, 1059, 1060, 1070, 1077, 1078, 1087, 1093, 1094, 1104, 1109, 1110, 1151, 1241, 1242, 1243, 1246, 1258], "execut": [113, 1171, 1217], "via": [113, 1242, 1243], "add_extens": [113, 1242], "compar": [114, 498, 499], "addition": [114, 1240], "match": [114, 555, 797, 1240, 1242, 1254], "cut_plane_bia": [127, 354, 444, 1254], "shift": [127, 354, 444, 1254], "deeper": [127, 354, 444], "complet": [127, 354, 444, 709, 754, 1242, 1253], "either": [127, 354, 444, 596, 824, 840, 858, 923, 939, 959, 998, 1049, 1066, 1084, 1115, 1249], "5": [127, 354, 444, 584, 609, 678, 798, 840, 858], "miter": [144, 154, 255, 478, 561], "bisector": [144, 1254], "angl": [144, 336, 343, 498, 499, 684, 824, 840, 845, 849, 858, 863, 869, 876, 923, 939, 959, 981, 988, 998, 1004, 1015, 1084, 1092, 1101, 1156, 1157, 1242, 1252, 1254], "centerlin": [144, 154, 302, 336, 388, 406, 461, 498, 501, 517, 535, 584, 596, 598, 599, 696, 1246, 1247, 1248, 1257], "cutoff": [144, 1254], "perpendicular": [144, 154, 299, 603, 636, 988, 1248], "abstract": [163, 615, 733], "common": [163, 1242], "t": [163, 299, 302, 319, 336, 354, 388, 406, 553, 561, 1242, 1256], "x": [163, 444, 461, 553, 561, 584, 589, 602, 604, 673, 684, 696, 824, 840, 858, 876, 923, 939, 959, 981, 988, 998, 1015, 1049, 1066, 1084, 1101, 1158, 1159, 1242, 1248, 1256, 1257], "do": [163, 843, 861, 1001, 1053, 1070, 1087, 1245], "sub": 163, "n": [180, 181, 182, 1244], "minimum": [180, 597, 988, 1240, 1242], "larger": [180, 584, 1248, 1254], "size": [180, 181, 834, 852, 870, 886, 917, 933, 949, 969, 1007, 1024, 1043, 1059, 1077, 1093, 1109, 1248, 1257], "compositeanalyz": [180, 1243], "down": [180, 1254], "desir": [181, 1242, 1257], "found": 182, "platejoint": [183, 255, 1243], "allow_reord": [187, 215, 237, 259, 281], "arg": [199, 227, 249, 271, 293, 438], "connectionsolv": [205, 1160, 1243], "static": [206, 207, 505, 506, 507, 508, 519, 520, 521, 522, 531, 532, 533, 534, 556, 557, 558, 559, 908, 915, 916], "segment_a": 206, "segment_b": 206, "segment": [206, 207, 209, 211, 892], "overlap": [206, 1254], "seg_a": 206, "seg_b": 206, "polylin": [207, 299, 547, 636, 657, 662, 672, 719, 764, 813, 892, 912, 913, 914, 916], "mm": [207, 795, 876, 1240], "absolut": [207, 504, 517, 555, 1240, 1242], "001": 207, "rel": [207, 589, 602, 604, 673, 981, 988], "angular": 207, "precis": [207, 1240], "lineardeflect": 207, "angulardeflect": 207, "outlin": [207, 209, 211, 299, 636, 657, 662, 672], "whose": [207, 461], "plate_a": [209, 211], "plate_b": [209, 211], "li": [209, 1248, 1257], "themselv": 209, "indic": [209, 498, 499, 598, 599, 708, 779, 923, 1247, 1248], "occur": [209, 510, 778, 779, 1151, 1241, 1256], "plate_a_segment_index": 209, "plate_b_segment_index": 209, "a_segment_index": 211, "index": [211, 336, 406, 589, 602, 603, 604, 609, 673, 678, 797, 798, 831, 849, 869, 912, 914, 929, 946, 955, 957, 966, 967, 968, 976, 978, 988, 1004, 1022, 1023, 1031, 1033, 1057, 1074, 1092, 1115, 1121, 1240, 1242, 1243, 1254], "b_segment_index": 211, "parent": [211, 795, 1124, 1125, 1126, 1127], "interface_a": 211, "geometri": [211, 299, 300, 424, 535, 566, 567, 568, 569, 570, 580, 581, 584, 591, 592, 593, 594, 612, 613, 615, 619, 620, 621, 622, 623, 633, 634, 636, 657, 664, 665, 666, 667, 669, 672, 681, 682, 684, 688, 689, 690, 691, 692, 705, 706, 713, 714, 715, 716, 717, 730, 731, 737, 738, 739, 740, 741, 751, 752, 758, 759, 760, 761, 762, 775, 776, 779, 781, 783, 795, 813, 827, 832, 843, 846, 847, 848, 861, 865, 866, 879, 881, 884, 885, 892, 907, 912, 913, 914, 926, 928, 932, 942, 947, 948, 956, 962, 975, 977, 984, 989, 990, 1001, 1003, 1013, 1018, 1030, 1032, 1038, 1053, 1058, 1062, 1070, 1074, 1075, 1076, 1087, 1089, 1099, 1104, 1106, 1133, 1134, 1156, 1157, 1159, 1164, 1168, 1169, 1217, 1237, 1242, 1243, 1246, 1248, 1249, 1255, 1256, 1257, 1258], "planarsurfac": [211, 424], "surfac": [211, 336, 406, 424, 535, 609, 678, 797, 849, 869, 1057, 1074, 1252], "interface_b": 211, "platebuttjoint": [233, 277, 1243], "area": [299, 657], "frame": [299, 535, 562, 584, 589, 597, 602, 604, 615, 636, 657, 673, 684, 696, 795, 797, 831, 846, 848, 849, 861, 864, 866, 869, 928, 946, 947, 955, 957, 988, 989, 1003, 1004, 1057, 1074, 1087, 1089, 1092, 1127, 1217, 1243, 1246, 1248, 1249, 1258], "xaxi": 299, "normal": [299, 498, 499, 535, 584, 603, 651, 719, 764, 797, 869, 988, 1092], "toward": [299, 501], "yaxi": 299, "along": [299, 302, 319, 336, 354, 388, 406, 444, 461, 584, 589, 602, 603, 604, 673, 696, 840, 849, 869, 998, 1004, 1092, 1242, 1254], "width": [299, 336, 406, 535, 584, 598, 599, 657, 795, 840, 849, 858, 869, 913, 959, 998, 1004, 1015, 1049, 1052, 1066, 1068, 1084, 1092, 1242, 1247, 1248, 1249, 1254], "direct": [299, 584, 597, 598, 599, 672, 684, 1115, 1158, 1159, 1237, 1240, 1242, 1248, 1249, 1258], "interface_rol": 299, "interfacerol": [299, 1243], "birdsmouth": 302, "tbirdsmouth": 302, "length": [319, 336, 354, 406, 444, 461, 535, 584, 598, 657, 795, 840, 849, 858, 869, 959, 966, 981, 988, 998, 1004, 1015, 1042, 1084, 1092, 1242, 1254], "anoth": [319, 354, 1242], "dovetail": [336, 343, 840, 845, 846, 847, 849, 858, 863, 864, 865, 869, 1092], "notch": [336, 388, 461, 1066, 1254], "fit": [336, 388, 406, 1245, 1254], "start_i": [336, 406, 824, 840, 858, 869, 876, 939, 959, 981, 998, 1015, 1066, 1074, 1084, 1092, 1101, 1254], "posit": [336, 406, 570, 584, 594, 623, 667, 692, 717, 741, 762, 795, 903, 904, 912, 914, 923, 981, 988, 1252, 1254], "y": [336, 406, 478, 482, 584, 603, 696, 824, 840, 849, 858, 869, 876, 939, 959, 981, 998, 1004, 1015, 1066, 1084, 1092, 1101, 1158, 1159, 1248, 1254, 1257], "axi": [336, 406, 500, 566, 584, 589, 590, 598, 599, 602, 603, 604, 619, 657, 663, 673, 684, 688, 696, 713, 737, 758, 840, 849, 858, 876, 959, 988, 998, 1004, 1084, 1133, 1156, 1157, 1248, 1252, 1254, 1257], "start_depth": [336, 406, 840, 849, 858, 869, 939, 998, 1004, 1015, 1084, 1092, 1254], "rotat": [336, 406, 858, 869, 876, 1084, 1092, 1158, 1159, 1168, 1169, 1248, 1254], "around": [336, 406, 657, 672, 876, 1248, 1254], "cone_angl": [336, 840, 849, 858, 869, 1254], "determin": [336, 509, 535, 672, 1242, 1254], "taper": [336, 388, 1083, 1254], "dovetail_shap": [336, 1254], "shape": [336, 388, 406, 584, 636, 657, 665, 684, 840, 849, 858, 869, 913, 947, 989, 998, 1004, 1049, 1066, 1083, 1084, 1092, 1100, 1240, 1254], "integ": [336, 406, 584, 657, 1254], "squar": [336, 406, 840, 858, 998, 1084, 1100, 1254], "round": [336, 406, 840, 858, 998, 1084, 1100, 1254], "radiu": [336, 406, 840, 849, 858, 869, 998, 1004, 1084, 1092, 1100, 1254], "tool_angl": [336, 343, 845, 863, 1254], "tool_diamet": [336, 343, 845, 863, 1254], "tool_height": [336, 343, 845, 863, 1254], "height": [336, 343, 388, 406, 535, 584, 598, 599, 657, 795, 845, 849, 858, 863, 869, 1004, 1049, 1052, 1066, 1068, 1084, 1092, 1101, 1242, 1247, 1248, 1249, 1254], "initi": [336, 576, 607, 629, 676, 700, 725, 747, 770], "flank_angl": [336, 840, 849, 858, 869], "flank": [336, 840, 849, 858, 869], "applic": [336, 406, 510, 1240, 1242, 1254, 1256], "shape_radiu": [336, 406, 840, 849, 858, 869, 998, 1004, 1084, 1092, 1254], "machin": [336, 406, 584, 657, 833, 846, 847, 848, 864, 865, 866, 904, 928, 932, 948, 955, 959, 967, 968, 975, 976, 978, 990, 996, 997, 1003, 1013, 1015, 1022, 1023, 1030, 1031, 1033, 1058, 1062, 1075, 1076, 1089, 1099, 1240, 1251], "cutter": [343, 845, 863], "tenonmortisejoint": [371, 1243], "step": [388, 401, 843, 861, 1001, 1049, 1053, 1066, 1070, 1083, 1087, 1173, 1175, 1216, 1240, 1243, 1253], "step_shap": [388, 1049, 1066, 1254], "heel": [388, 401, 1049, 1066, 1083, 1254], "doubl": [388, 478, 824, 831, 832, 834, 852, 870, 886, 917, 933, 949, 969, 1007, 1024, 1043, 1049, 1059, 1066, 1077, 1083, 1093, 1109, 1254], "step_depth": [388, 1049, 1057, 1066, 1074, 1254], "heel_depth": [388, 1049, 1057, 1066, 1074, 1254], "tapered_heel": [388, 1057, 1066, 1074, 1083, 1254], "tenon_mortise_height": [388, 1254], "tenon": [388, 406, 858, 864, 865, 869, 1004, 1049, 1052, 1062, 1100, 1243], "mortis": [388, 406, 840, 846, 847, 849, 1066, 1068, 1075, 1243], "featru": [388, 1254], "tenonmortis": 406, "main_beam_guid": [406, 1242], "cross_beam_guid": [406, 1242], "veri": 424, "wai": [424, 523, 904, 1104, 1183], "until": [424, 955, 976, 1031], "we": [424, 615, 636, 1244], "know": 424, "go": [424, 876], "wall_a_interfac": 424, "wall_b_interfac": 424, "somewher": [444, 461, 1242], "typic": [461, 1217, 1240], "offset": [461, 566, 569, 590, 593, 619, 622, 663, 688, 691, 696, 713, 716, 737, 740, 758, 761, 849, 869, 1004, 1092, 1249], "rest": 461, "No": [461, 980], "coplanar": [482, 1242], "ignore_end": [498, 499], "ref_sid": [498, 499, 584, 657, 849, 869, 916, 988, 1004, 1057, 1074, 1092], "beam_side_incid": 498, "form": [498, 709, 754, 778, 1242], "transit": 498, "system": [498, 562, 584, 657, 797, 876, 1240, 1242, 1248], "attach": [498, 501, 502], "four": [498, 499, 1247, 1254], "ref_side_angl": [498, 499], "closest_ref_side_index": [498, 499], "min": [498, 499], "cutting_plan": [498, 499], "vector": [499, 501, 535, 598, 599, 636, 669, 672, 884, 1156, 1157, 1168, 1169, 1243, 1248, 1249], "ref_side_incidence_with_vector": 499, "inflate_bi": [500, 713, 716, 758, 761, 1237], "bound": [500, 566, 569, 584, 590, 593, 619, 622, 657, 663, 666, 688, 691, 713, 716, 737, 740, 758, 761, 813, 892, 904, 1133, 1134, 1237], "box": [500, 566, 569, 584, 590, 593, 619, 622, 657, 663, 666, 688, 691, 713, 716, 737, 740, 758, 761, 795, 1075, 1133, 1134, 1217, 1237, 1246, 1248], "aabb": [500, 566, 584, 590, 619, 657, 663, 688, 713, 737, 758], "enlarg": 500, "amount": [500, 586, 597, 1237], "identifi": [500, 1138, 1242], "regard": [500, 849, 1004], "inflat": [500, 566, 569, 590, 593, 619, 622, 663, 666, 688, 691, 713, 716, 737, 740, 758, 761, 1237], "pluggabl": 500, "plugin": [500, 1243], "avail": 500, "jointrul": [502, 508, 515, 522, 553, 559, 1243, 1255], "categori": [502, 504, 509, 1247, 1248, 1258], "rule": [502, 504, 505, 506, 507, 508, 515, 517, 519, 520, 521, 522, 530, 531, 532, 533, 534, 535, 553, 555, 556, 557, 558, 559, 589, 602, 604, 673, 1243, 1246, 1248, 1249, 1255, 1258], "assign": [502, 553, 1122, 1124, 1132, 1242, 1254, 1257], "joint_typ": [502, 515, 553], "category_a": 502, "category_b": [502, 509], "topo": [502, 1242], "support": [502, 504, 657, 1217, 1238], "model_max_dist": [504, 517, 555], "09": [504, 508, 517, 522, 534, 555, 559], "exceed": [504, 555, 928, 929], "alreadi": [504, 517, 555, 1124, 1127, 1240], "use_default": [507, 521, 533, 558], "handled_pair": [508, 522, 534, 559], "definit": [508, 522, 534, 559, 1240, 1255], "jointdefinit": [508, 522, 534, 559, 1243], "sort": [509, 778], "accord": [509, 584, 657, 1247], "catergory_a": 509, "debug": [510, 779, 1242, 1249, 1255, 1256], "inspect": [510, 1256], "relat": [510, 709, 754, 778, 869, 1092, 1153], "feature_error": 510, "joint_error": 510, "complianc": 517, "link": [523, 783], "delai": [523, 525, 783], "actual": [523, 525, 596, 783, 955, 976, 1031, 1122, 1130], "downstream": [523, 525, 783], "compon": [523, 525, 783, 1115, 1116, 1118, 1119, 1120, 1121, 1244, 1247, 1248, 1249, 1251, 1252, 1253, 1255, 1258], "need": [523, 636, 955, 976, 1031, 1240, 1242, 1247, 1258], "There": [523, 1247, 1254, 1258], "altern": [523, 1242], "transform": [523, 570, 594, 623, 667, 692, 717, 741, 762, 1156, 1157, 1158, 1159, 1165, 1167, 1168, 1169], "shall": [525, 1127, 1245], "assembli": [535, 1243, 1249, 1256], "planar": [535, 609, 678, 720, 765, 1246, 1249, 1254], "beam_width": [535, 1249], "aka": 535, "thick": [535, 636, 657, 669, 672, 719, 720, 764, 765, 912, 1042, 1249], "caviti": 535, "frame_depth": [535, 1249], "stud_spac": [535, 1249], "space": [535, 690, 824, 840, 858, 869, 923, 939, 959, 981, 988, 998, 1015, 1049, 1066, 1084, 1092, 1101, 1240, 1249], "stud": [535, 584, 1248, 1249, 1254], "z_axi": 535, "orient": [535, 569, 593, 598, 599, 622, 666, 690, 691, 716, 719, 740, 761, 764, 824, 858, 923, 939, 959, 975, 1014, 1030, 1042, 1049, 1066, 1084, 1134, 1257], "post": 535, "insid": [535, 1160], "zaxi": 535, "categoryrul": [535, 1243], "line": [535, 584, 598, 657, 662, 884, 885, 1242, 1243, 1247, 1248, 1249, 1252, 1253], "panel_length": 535, "panel_height": 535, "jack_stud": [535, 1249, 1254], "surfaceassembli": 535, "beamdefinit": 535, "jack": [535, 939, 947, 1249], "king_stud": [535, 1249, 1254], "king": [535, 1249], "edge_stud": [535, 1249, 1254], "sill": [535, 1249, 1254], "header": [535, 1249, 1254], "element_on": 539, "element_two": 539, "beam_def": 546, "element_lists_to_intersect": 546, "element_loop": 548, "k": 553, "topology_typ": 553, "constant": 553, "global": [553, 1256], "revers": 555, "beama": 560, "beamb": 560, "x_default": 561, "t_default": 561, "l_default": 561, "screw": [562, 615, 1206], "dowel": [562, 615, 1254], "bracket": [562, 615], "finish": 562, "docstr": [562, 709, 754, 1240], "coordin": [562, 570, 584, 594, 623, 636, 657, 667, 692, 717, 741, 762, 795, 824, 840, 858, 869, 876, 923, 939, 959, 981, 988, 998, 1015, 1049, 1066, 1084, 1092, 1101, 1240, 1242, 1248], "lement": [564, 587, 617, 659, 686, 711, 735, 756], "collis": [567, 591, 620, 664, 689, 714, 738, 759], "includ": [568, 592, 665, 715, 739, 760, 809, 1240, 1242, 1245], "obb": [569, 593, 622, 666, 691, 716, 740, 761], "world": [570, 594, 623, 636, 667, 692, 717, 741, 762, 1248, 1249], "spatial": [570, 594, 623, 667, 692, 717, 741, 762, 1242], "hierarchi": [570, 594, 623, 667, 692, 717, 741, 762, 1122, 1124, 1241, 1258], "remov": [575, 576, 586, 605, 606, 607, 628, 629, 675, 676, 699, 700, 724, 725, 746, 747, 769, 770, 1152, 1153, 1154, 1155, 1247, 1252, 1254], "state": [576, 607, 629, 676, 700, 725, 747, 770], "debug_info": [576, 607, 629, 676, 700, 725, 747, 770, 779, 1242], "copi": [581, 613, 634, 682, 706, 731, 752, 776, 1157, 1159, 1166, 1167, 1169, 1245], "compas_model": [581, 613, 634, 682, 706, 731, 752, 776, 1127, 1140, 1143, 1146, 1216], "slat": 584, "etc": [584, 657, 1206, 1240, 1243, 1248], "rectangular": [584, 1248], "local": [584, 876, 1240, 1242, 1248], "major": [584, 1248], "also": [584, 778, 955, 976, 1031, 1238, 1243, 1246, 1247, 1248, 1254], "fibr": [584, 1246], "solid": [584, 636, 1255], "wood": 584, "parametr": [584, 609, 678, 824, 840, 858, 869, 923, 939, 959, 981, 988, 998, 1015, 1049, 1066, 1084, 1092, 1101, 1243], "blank": [584, 586, 605, 657, 672, 795, 928, 1151, 1248], "materi": [584, 657, 1124, 1131, 1132, 1148, 1248, 1257], "stock": [584, 657, 1248], "produc": [584, 657], "ref_fram": [584, 657], "standard": [584, 657, 1242, 1249], "6": [584, 657, 797, 967, 968, 978, 1022, 1023, 1031, 1033], "ref_edg": 584, "long": [584, 597], "equal": [584, 1042, 1242], "centerline_start": 584, "centerline_end": 584, "xmin": [584, 657], "ymin": [584, 657], "zmin": [584, 657], "xmax": [584, 657], "ymax": [584, 657], "zmax": [584, 657], "long_edg": 584, "midpoint": 584, "onc": [584, 657, 955, 976, 1031, 1248], "wide": [584, 657], "joint_kei": [586, 605], "well": [586, 1127, 1240], "ref_side_index": [589, 602, 603, 604, 673, 798, 831, 849, 869, 912, 914, 929, 946, 955, 957, 966, 967, 968, 976, 978, 988, 1004, 1022, 1023, 1031, 1033, 1057, 1074, 1092, 1240, 1242], "right": [589, 602, 604, 673, 782, 981, 988, 1101, 1245, 1254], "hand": [589, 602, 604, 673], "thumb": [589, 602, 604, 673], "rs5": [589, 602, 604, 673], "rs6": [589, 602, 604, 673, 798, 1240], "include_featur": [592, 665, 715, 739, 760], "brep": [592, 657, 665, 669, 690, 715, 720, 739, 760, 765, 827, 843, 847, 861, 865, 879, 907, 926, 932, 942, 956, 962, 967, 968, 976, 977, 978, 984, 996, 1001, 1013, 1018, 1022, 1023, 1031, 1032, 1033, 1038, 1053, 1062, 1070, 1087, 1099, 1104, 1243, 1257], "endpoint": [596, 599], "closer": 596, "interest": 596, "pln": 597, "metric": 597, "z_vector": [598, 599], "worldz": [598, 599], "worldx": [598, 599], "point_start": 599, "point_end": 599, "end_point": 599, "next": 602, "measur": 603, "across": [604, 673, 1242], "side_index": [609, 678], "request": [609, 678], "rethink": 615, "entir": [615, 988], "clear": [615, 1116, 1120, 1242], "appropri": [615, 1240], "put": [636, 795], "thought": 636, "what": [636, 1240], "v": [636, 1242], "perhap": [636, 781], "clearli": 636, "prehap": 636, "would": 636, "sens": 636, "move": 636, "stuff": 636, "over": 636, "here": [636, 778, 1151, 1242, 1244, 1249, 1250, 1257], "ballnodejoint": [636, 1243], "while": [636, 778, 779, 834, 852, 870, 886, 917, 933, 949, 969, 1007, 1024, 1043, 1059, 1077, 1093, 1109, 1240, 1242, 1244, 1254, 1256], "attempt": [636, 1256], "tightli": 636, "coupl": 636, "differec": 636, "seem": 636, "just": 636, "outline_point": 636, "structur": [636, 684, 1165, 1166, 1167, 1238, 1242, 1243, 1246, 1249, 1255, 1258], "assum": 636, "goe": [636, 981, 988], "extra": 636, "geometr": [636, 687, 1240, 1243, 1252, 1255], "These": [636, 669, 1240, 1241, 1242, 1247, 1254], "boolean": [636, 1246, 1249, 1252, 1255], "btlxfromgeometrydefinit": [636, 1243], "plywood": 657, "clt": 657, "outline_a": [657, 662], "nurbscurv": 657, "princip": [657, 662, 892, 929], "outline_b": [657, 662], "blank_extens": [657, 672], "blank_length": 657, "extrud": 669, "slab": [669, 754, 1243], "open": [672, 719, 764, 1238, 1243, 1253], "flat": 684, "steel": 684, "xy": 684, "math": 684, "pi": 684, "lai": 696, "beam_fac": 696, "singl": [709, 720, 754, 765, 1217], "serv": [709, 754, 1257], "often": [709, 754], "prefabr": [709, 754], "envelop": [709, 754], "bodi": [709, 754], "_": [715, 760, 956, 977, 1032, 1104, 1153, 1247], "sure": [719, 764], "correctli": [719, 764, 975, 1030, 1240, 1242, 1247], "is_beam": 733, "is_plat": 733, "is_wal": 733, "is_group_el": 733, "except": [778, 779, 780, 781, 955, 976, 1031, 1128, 1151, 1240, 1241, 1242], "write": [778, 809, 810, 1185, 1247, 1248], "work": [778, 1238, 1240, 1242, 1249], "figur": 778, "out": [778, 1245], "somewhat": 778, "relev": [778, 1242], "proxi": 778, "tood": 778, "never": 778, "throw": 778, "collect": [778, 1173, 1237, 1255], "report": 778, "user": [778, 1247, 1249, 1253], "messag": [778, 780, 781, 1240, 1242], "btlxpart": [778, 1243], "caus": [778, 884], "failed_process": 778, "try": [779, 912, 914, 1240, 1242], "suppos": 779, "debug_geometri": 779, "about": [779, 1104, 1243], "cannot": [780, 781, 1242, 1248, 1254], "renam": [781, 1120, 1121], "processingvisualizationerror": 781, "someth": 781, "feature_geometri": [781, 1240], "element_geometri": [781, 1240], "modifi": [781, 1164, 1240, 1242, 1244, 1245], "enum": [782, 903, 980, 1014, 1083, 1100, 1171], "left": [782, 904, 912, 981, 988, 1101], "center": [782, 981, 988, 1101, 1122, 1238, 1254], "act": 795, "wrapper": 795, "realli": 795, "order_num": 795, "scale_factor": 795, "scale": [795, 1106, 1156, 1157, 1168, 1169, 1240, 1257], "factor": [795, 804, 818, 819, 834, 835, 852, 853, 870, 871, 886, 887, 897, 898, 917, 918, 933, 934, 949, 950, 969, 970, 991, 1007, 1008, 1024, 1025, 1043, 1044, 1059, 1060, 1077, 1078, 1093, 1094, 1109, 1110, 1158, 1159, 1240], "anyth": 795, "attr": [795, 1126], "corner": [795, 1254], "et": 796, "element_fac": 797, "essenti": [797, 1242], "translat": [797, 1106, 1156, 1157, 1158, 1159], "zero": [798, 1249], "rs1": [798, 831, 849, 869, 929, 946, 955, 957, 966, 1004, 1057, 1074, 1092, 1240], "prioriti": [798, 1217, 1254], "process_id": 798, "id": [798, 1217], "processing_nam": [798, 1240], "is_joineri": 798, "subprocess": [800, 826, 842, 860, 878, 906, 925, 941, 961, 983, 1000, 1017, 1037, 1051, 1069, 1086, 1103], "nest": [800, 826, 842, 860, 878, 906, 925, 941, 961, 983, 1000, 1017, 1037, 1051, 1069, 1086, 1103], "company_nam": 809, "compani": 809, "gramazio": [809, 1238, 1243, 1245], "kohler": [809, 1238, 1243, 1245], "research": [809, 1238, 1243, 1245], "file_nam": 809, "comment": 809, "xml": [810, 811, 812, 1240, 1251], "type_": 811, "regist": [811, 1242], "callabl": [811, 1143], "file_path": 812, "model_to_xml": 812, "represen": [813, 892], "free": [813, 892, 904, 1245], "like": [813, 892, 955, 976, 980, 1031, 1243, 1246, 1255], "nailcontour": [813, 892], "depth_bound": [813, 892, 904], "inclin": [813, 840, 858, 876, 939, 959, 981, 998, 1015, 1049, 1066, 1084], "orientationtyp": [824, 858, 923, 939, 959, 1049, 1066, 1084, 1243], "start_x": [824, 840, 858, 876, 923, 939, 959, 981, 988, 998, 1015, 1049, 1066, 1084, 1101], "100000": [824, 840, 858, 923, 939, 959, 981, 998, 1015, 1049, 1066, 1084, 1101], "50000": [824, 939, 959, 981, 1015, 1049, 1066, 1101], "angle_1": 824, "horizont": [824, 923, 939, 959, 1015, 1042, 1101], "179": [824, 840, 858, 923, 939, 959, 981, 998, 1015, 1049, 1066, 1084, 1252], "9": [824, 840, 858, 923, 939, 959, 981, 998, 1015, 1049, 1066, 1084, 1252], "inclination_1": 824, "vertic": [824, 939, 959, 981, 1015, 1042, 1101, 1248, 1254], "angle_2": 824, "inclination_2": 824, "plane_a": [832, 1242, 1252], "plane_b": [832, 1252], "mean": [834, 852, 870, 886, 904, 917, 933, 949, 969, 1007, 1024, 1043, 1059, 1077, 1093, 1109, 1240], "5000": [840, 858, 998, 1084, 1127], "margin": [840, 858, 998, 1084], "180": [840, 998, 1101], "slope": [840, 959, 998, 1015], "reder": [840, 858, 998, 1084], "limitation_top": 840, "limit": [840, 858, 876, 959, 967, 968, 976, 978, 980, 981, 997, 998, 1015, 1022, 1023, 1031, 1033, 1066, 1084, 1092, 1245], "unlimit": [840, 980], "length_limited_bottom": [840, 858, 998, 1084, 1092], "whether": [840, 858, 981, 998, 1066, 1084, 1092, 1217, 1242, 1245], "1000": [840, 858, 998, 1049, 1052, 1066, 1068, 1084], "cone": [840, 849, 858, 869], "30": [840, 858], "use_flank_angl": [840, 858], "35": [840, 858], "volum": [843, 847, 861, 865, 932, 967, 968, 975, 976, 977, 978, 996, 1001, 1013, 1022, 1023, 1030, 1031, 1032, 1033, 1053, 1062, 1070, 1075, 1087, 1099, 1122, 1240, 1242], "itersect": [843, 861, 1001, 1053, 1070, 1087], "fail": [843, 861, 1001, 1053, 1070, 1087, 1240], "80": [849, 869, 1004, 1092], "40": [849, 869, 1004, 1092], "28": [849, 869, 1004, 1092], "10": [849, 869, 1238, 1244], "15": [849, 869], "20": [849, 869, 876, 1004, 1057, 1074, 1092, 1101], "case": [849, 1004, 1249, 1255], "hous": [849, 1004], "equival": [849, 1004, 1240], "dovetailtenon": [849, 1092, 1243], "length_limited_top": [858, 998, 1084, 1092], "50": [869, 876, 1092], "define_dovetail_tool": [869, 1092], "degre": [876, 981, 988], "depth_limit": [876, 981], "cylind": [881, 1217], "chang": [884, 1254], "too": 884, "fragil": 884, "issu": [884, 1253], "alt": 884, "straight": [884, 1242, 1248], "contour": [892, 897, 898, 904, 912, 913, 914, 1243], "principal_contour": 892, "dual": [892, 897, 898], "associated_contour": 892, "refedg": [903, 923], "oppedg": [903, 923], "contour_param_object": 904, "dualcontour": [904, 1243], "counter_sink": 904, "counter": 904, "sink": 904, "tool_posit": [904, 912, 914, 916, 981, 988], "polyline_a": 908, "polyline_b": 908, "interior": [912, 913, 914, 916], "alignmenttyp": [912, 914, 981, 988, 1101, 1243], "contour_point": 915, "french": [923, 932], "ref_posit": 923, "edgepositiontyp": [923, 1243], "drillhol": [923, 929], "flag": 923, "other_beam": 929, "furthest": [929, 1249], "rafter": [939, 947, 1248], "behav": [955, 976, 1031], "jackraftercut": [955, 958, 1240, 1243, 1252], "unproxifi": [955, 976, 1031], "defer": [955, 976, 1031], "oper": [955, 976, 1031, 1240, 1241, 1242, 1252, 1255], "slightli": [955, 976, 1031], "improv": [955, 976, 1031], "89": 959, "lead_angle_parallel": 959, "lead": 959, "lead_angl": 959, "lead_inclination_parallel": 959, "lead_inclin": 959, "machining_limit": [959, 967, 968, 976, 978, 1015, 1022, 1023, 1031, 1033], "polyhedron": [967, 968, 975, 976, 978, 1022, 1023, 1030, 1031, 1033], "subtract": [975, 1030, 1252, 1255], "ensur": [975, 1030, 1240, 1242], "neg": [976, 996], "constitut": 976, "longitudin": [981, 989], "90": [981, 988], "start_limit": 981, "end_limit": 981, "certain": 981, "angle_start": [981, 988], "angle_end": [981, 988], "so": [988, 1240, 1242, 1245], "chamfer": [988, 1084, 1092], "chanfer": 988, "logitudin": 989, "configur": [997, 1122], "expected_kei": 997, "dictionari": [997, 1240, 1242], "face_limited_start": 997, "face_limited_end": 997, "face_limited_front": 997, "face_limited_back": 997, "face_limited_top": 997, "face_limited_bottom": 997, "awai": 1014, "internal_angl": 1015, "intern": [1015, 1240], "tilt_ref_sid": 1015, "tilt": [1015, 1254], "tilt_end_sid": 1015, "tilt_opp_sid": 1015, "oppos": 1015, "tilt_start_sid": 1015, "full": 1042, "accross": 1042, "exactli": 1042, "small": 1042, "strut_inclin": [1049, 1066], "strut": [1049, 1066], "taperedheel": [1049, 1083], "presenc": [1049, 1066], "ye": [1049, 1066, 1244], "tenon_width": [1049, 1052], "tenon_height": [1049, 1052], "stepjointnotch": [1052, 1243], "notch_limit": [1066, 1074], "notch_width": [1066, 1074], "strut_height": [1066, 1074], "stepshapetyp": [1066, 1243], "mortise_width": [1066, 1068], "mortise_height": [1066, 1068], "plana": 1074, "engrav": [1101, 1106], "alignment_vert": 1101, "alignment_horizont": 1101, "alignment_multilin": 1101, "multilin": 1101, "mode": [1101, 1244], "stacked_mark": 1101, "stack": 1101, "mark": 1101, "text_height_auto": 1101, "text_height": 1101, "think": 1104, "curv": [1104, 1106, 1248], "draw_string_on_el": 1104, "io": 1115, "ghenv": [1115, 1116, 1120, 1121], "environ": [1115, 1116, 1120, 1121, 1243, 1244, 1248], "permanent_param_count": [1116, 1120], "delet": [1116, 1120], "param": [1118, 1119, 1240], "input_nam": [1120, 1121], "rename_count": 1120, "keep_connect": 1120, "express": [1122, 1245], "joint_candid": 1122, "center_of_mass": 1122, "mass": 1122, "detected_topo": 1122, "beam_a_kei": 1122, "beam_b_kei": 1122, "total": 1122, "groupnod": [1124, 1125, 1126, 1127], "under": [1124, 1125, 1130], "root": [1124, 1125], "elementnod": [1124, 1125], "upstream": [1127, 1143, 1146], "mayb": 1127, "wall1_group": 1127, "200": 1127, "3000": 1127, "wall1": 1127, "worldxi": 1127, "100": 1127, "300": 1127, "add_el": 1127, "has_group": 1127, "b": [1128, 1147, 1153], "graph": [1128, 1130], "neither": 1132, "retriev": [1138, 1242, 1247], "yield": [1139, 1149, 1150], "interaction_typ": 1140, "group_nam": [1143, 1146], "filter_": 1143, "queri": [1143, 1144, 1146], "filter": [1143, 1247], "stop_on_first_error": 1151, "feasibl": [1151, 1242], "instruct": [1151, 1171, 1173, 1196, 1206, 1217, 1227, 1240, 1243, 1253], "sequenc": [1151, 1216, 1243], "reason": 1151, "iter": 1151, "encount": [1151, 1253], "radian": [1156, 1157], "human": [1172, 1217], "robot": [1172, 1217], "build": [1173, 1183, 1184, 1185, 1216, 1217, 1244, 1258], "pars": 1183, "implemet": 1183, "your": [1183, 1238, 1240, 1242, 1244], "own": [1183, 1254], "you": [1183, 1238, 1240, 1242, 1244, 1246, 1249, 1253, 1254, 1258], "want": [1183, 1240], "buildingplan": [1184, 1185, 1216, 1243], "building_plan": 1185, "tranform": [1194, 1204, 1214, 1235], "3d": [1196, 1206, 1243], "linear": [1196, 1248], "incorpor": 1206, "simpl": [1216, 1243, 1246], "per": 1216, "assembl": 1217, "actor": [1217, 1243], "element_id": 1217, "cad": 1217, "elements_held": 1217, "held": 1217, "is_built": 1217, "is_plan": 1217, "increment": 1217, "text": [1227, 1243, 1251], "overlai": 1227, "prior": 1237, "project": [1238, 1243], "develop": [1238, 1241, 1243], "aleksandra": 1238, "apolinarska": 1238, "chen": 1238, "kasir": 1238, "gonzalo": 1238, "casa": 1238, "eth": [1238, 1243, 1245], "zurich": [1238, 1243, 1245], "swiss": 1238, "nation": 1238, "scienc": 1238, "foundat": 1238, "compet": 1238, "digit": 1238, "nccr": 1238, "dfab": 1238, "programm": 1238, "As": 1238, "mani": [1238, 1243, 1244], "contributor": 1238, "acknowledg": 1238, "misc": 1238, "titl": 1238, "librari": [1238, 1243, 1246, 1253], "author": [1238, 1245], "anna": 1238, "http": [1238, 1240, 1244], "github": [1238, 1244], "com": [1238, 1240, 1244], "gramaziokohl": 1238, "year": 1238, "2022": 1238, "2023": 1238, "doi": 1238, "5281": 1238, "zenodo": 1238, "7934267": 1238, "url": 1238, "welcom": 1239, "comprehens": 1239, "guidanc": 1239, "contribut": [1239, 1243, 1244], "framework": [1239, 1240, 1243], "diagram": [1239, 1243], "integr": [1240, 1242], "offici": [1240, 1253], "design2machin": 1240, "btlx_2_3_0": 1240, "pdf": 1240, "studi": [1240, 1242], "understand": [1240, 1241], "constraint": 1240, "rang": [1240, 1254], "src": [1240, 1242], "__init__": [1240, 1242], "meaning": [1240, 1242], "__data__": [1240, 1242], "properti": [1240, 1242], "btlxprocessingparam": 1240, "as_dict": 1240, "ordereddict": 1240, "btlxwriter": [1240, 1243], "newprocess": [1240, 1242], "hypotheticalprocess": 1240, "def": [1240, 1242], "super": [1240, 1242], "arg_a": [1240, 1242], "arg_b": [1240, 1242], "newprocessingparam": 1240, "arga": 1240, "prec": 1240, "_instanc": 1240, "argb": 1240, "doublecut": [1240, 1243, 1252, 1254], "At": [1240, 1243], "target": [1240, 1242], "extract": [1240, 1248, 1256], "relationship": [1240, 1241], "from_shapes_and_el": 1240, "from_anygeometry_and_el": 1240, "additional_arg_1": 1240, "additional_arg_2": 1240, "calculate_arg_a": 1240, "calculate_arg_b": 1240, "arg_c": 1240, "arg_d": 1240, "abov": [1240, 1245, 1254], "convent": [1240, 1248], "descript": 1240, "from_plane_and_beam": [1240, 1242], "from_volume_and_beam": [1240, 1242], "from_line_and_el": 1240, "from_planes_and_beam": 1240, "from_beam_beam_and_plan": 1240, "invers": 1240, "manag": [1240, 1244, 1253], "geometry_from_params_and_el": 1240, "feature_geometry_generated_from_param": 1240, "modified_element_geometri": 1240, "purpos": [1240, 1245], "plane_from_params_and_beam": 1240, "volume_from_params_and_beam": 1240, "cylinder_from_params_and_el": 1240, "planes_from_params_and_beam": 1240, "lap_volume_from_params_and_beam": 1240, "py": [1240, 1242], "cover": [1240, 1242], "modif": [1240, 1242], "referencesid": 1240, "bidirect": 1240, "document": [1240, 1241, 1245, 1247, 1248, 1253, 1257], "help": [1241, 1249, 1253], "better": 1241, "codebas": 1241, "core": 1241, "manipul": 1241, "categor": 1241, "manufactur": 1241, "special": 1241, "failur": [1241, 1242], "particip": 1242, "achiev": 1242, "establish": 1242, "how": [1242, 1246, 1253, 1254, 1258], "involv": 1242, "re": 1242, "notat": 1242, "distinct": 1242, "treat": 1242, "differenti": 1242, "accordingli": 1242, "supported_topologi": 1242, "restore_beams_from_kei": 1242, "deseri": 1242, "share": 1242, "logic": 1242, "behavior": 1242, "tnewjoint": 1242, "default_value_a": 1242, "default_value_b": 1242, "hold": 1242, "element_by_guid": 1242, "persist": 1242, "lmiterjoint": [1242, 1243], "xlapjoint": [1242, 1243], "tbirdsmouthjoint": [1242, 1243], "tstepjoint": [1242, 1243], "lfrenchridgelapjoint": [1242, 1243], "dimension": 1242, "select": [1242, 1249, 1254, 1256], "deriv": 1242, "entiti": [1242, 1243], "consult": [1242, 1253], "usag": 1242, "main_ref_side_index": 1242, "cross_ref_side_index": 1242, "main_beam_feature_geometri": 1242, "feature_geometry_for_main_beam": 1242, "cross_beam_feature_geometri": 1242, "feature_geometry_for_cross_beam": 1242, "add_featur": 1242, "accommod": 1242, "check_elements_compat": 1242, "assert": 1242, "main_beam_cutting_plan": 1242, "start_a": 1242, "end_a": 1242, "extension_to_plan": 1242, "ex": 1242, "add_blank_extens": 1242, "main_featur": 1242, "cross_featur": 1242, "itself": 1242, "are_compat": 1242, "append": 1242, "pattern": 1242, "declar": 1242, "duplic": 1242, "leverag": 1242, "maintain": [1242, 1243], "signatur": 1242, "alwai": 1242, "aid": 1242, "rebuild": 1242, "packag": [1243, 1244, 1253], "written": 1243, "python": [1243, 1244, 1246], "ecosystem": 1243, "rhinocero": 1243, "plug": 1243, "activ": [1243, 1244, 1248, 1255, 1257], "being": 1243, "continu": 1243, "stage": 1243, "encompass": 1243, "fast": 1243, "intuit": 1243, "custom": 1243, "semant": 1243, "futur": 1243, "expand": 1243, "entail": [1243, 1247], "softwar": [1243, 1245], "specialist": 1243, "built": [1243, 1246], "basic": 1243, "complex": 1243, "resolv": 1243, "backend": 1243, "run": 1243, "rhinocommon": 1243, "sdk": 1243, "opencascad": 1243, "occ": 1243, "introduct": 1243, "instal": [1243, 1246], "api": [1243, 1246], "ballnodefasten": 1243, "platefasten": 1243, "openingtyp": 1243, "xnotchjoint": 1243, "tlapjoint": 1243, "llapjoint": 1243, "plateconnectionsolv": 1243, "tdovetailjoint": 1243, "ybuttjoint": 1243, "toliginajoint": 1243, "walljoint": 1243, "platelbuttjoint": 1243, "platetbuttjoint": 1243, "platemiterjoint": 1243, "interfaceloc": 1243, "platetoplateinterfac": 1243, "nbeamkdtreeanalyz": 1243, "tripletanalyz": 1243, "quadanalyz": 1243, "maxncompositeanalyz": 1243, "find_neighboring_el": 1243, "beam_ref_side_incid": 1243, "beam_ref_side_incidence_with_vector": 1243, "point_centerline_towards_joint": 1243, "dovetailmortis": 1243, "longitudinalcut": 1243, "slot": 1243, "stepjoint": 1243, "freecontour": 1243, "limitationtoptyp": 1243, "machininglimit": 1243, "tenonshapetyp": 1243, "jackraftercutproxi": 1243, "pocketproxi": 1243, "lapproxi": 1243, "debuginfom": 1243, "directrul": 1243, "featuredefinit": 1243, "surfacemodel": 1243, "topologyrul": 1243, "guess_joint_topology_2beam": 1243, "set_default_joint": 1243, "buildingplanpars": 1243, "lineardimens": 1243, "model3d": 1243, "simplesequencegener": 1243, "text3d": 1243, "btlxprocessingerror": 1243, "clear_gh_param": 1243, "add_gh_param": 1243, "manage_dynamic_param": 1243, "list_input_valid": 1243, "item_input_valid": 1243, "get_leaf_subclass": 1243, "rename_gh_input": 1243, "workflow": [1243, 1246, 1247, 1248], "show": [1243, 1246], "util": [1243, 1246], "licens": 1243, "cite": 1243, "recommend": 1244, "mamba": 1244, "myenvnam": 1244, "c": [1244, 1245], "conda": 1244, "forg": 1244, "7": 1244, "m": 1244, "compas_rhino": 1244, "v7": 1244, "wish": 1244, "fork": 1244, "repositori": 1244, "clone": 1244, "git": 1244, "yourgithub_usernam": 1244, "cd": 1244, "edit": 1244, "pip": 1244, "dev": 1244, "compil": 1244, "rhino7": [1244, 1253], "invok": 1244, "ghuser": 1244, "rhino8": [1244, 1253], "mit": 1245, "copyright": 1245, "2025": 1245, "permiss": 1245, "herebi": 1245, "grant": 1245, "charg": 1245, "person": 1245, "obtain": 1245, "deal": 1245, "restrict": 1245, "merg": 1245, "publish": 1245, "distribut": 1245, "sublicens": 1245, "sell": 1245, "permit": 1245, "whom": 1245, "furnish": 1245, "subject": 1245, "condit": 1245, "notic": 1245, "substanti": 1245, "portion": 1245, "THE": 1245, "AS": 1245, "warranti": 1245, "OF": 1245, "kind": [1245, 1254], "OR": 1245, "impli": [1245, 1255], "BUT": 1245, "NOT": 1245, "TO": 1245, "merchant": 1245, "FOR": 1245, "particular": 1245, "AND": 1245, "noninfring": 1245, "IN": 1245, "NO": 1245, "event": 1245, "holder": 1245, "BE": 1245, "liabl": 1245, "claim": 1245, "damag": 1245, "liabil": 1245, "action": 1245, "contract": 1245, "tort": 1245, "aris": 1245, "WITH": 1245, "easi": 1246, "autom": 1246, "bake": 1246, "textur": [1246, 1257], "render": [1246, 1257], "style": 1246, "might": [1246, 1254], "componen": 1246, "overal": 1246, "idea": 1246, "Then": 1246, "explain": [1246, 1253], "concept": 1246, "intend": [1247, 1248], "hybrid": 1247, "encod": 1247, "concaten": 1247, "colon": 1247, "entri": 1247, "underscor": 1247, "attr1nam": 1247, "attr1value_attr2nam": 1247, "attr2valu": 1247, "zvector": [1247, 1248], "setstandardattribut": 1247, "getstandardattribut": 1247, "criteria": 1247, "setcustomattribut": 1247, "getcustomattribut": 1247, "checkstandardattribut": 1247, "miss": 1247, "deleteattribut": 1247, "joist": 1248, "linecurv": 1248, "referenc": [1248, 1249], "latter": 1248, "drawn": 1248, "sai": 1248, "updaterefobj": 1248, "centrelin": 1248, "bit": 1249, "vocabulari": 1249, "stud_direct": 1249, "creategeometri": [1249, 1255], "debuginfo": [1249, 1255], "sheeting_outsid": 1249, "sheet": 1249, "sheeting_insid": 1249, "lintel_post": 1249, "onto": 1249, "edge_stud_offset": 1249, "flush": [1249, 1254], "custom_dimens": 1249, "joint_overrid": 1249, "dynam": [1249, 1254], "demo": 1250, "content": 1251, "ly": 1252, "01": [1252, 1254], "cylindr": 1252, "command": 1253, "packagemanag": 1253, "press": 1253, "enter": 1253, "window": 1253, "click": [1253, 1254], "restart": 1253, "success": 1253, "toolbar": 1253, "look": 1253, "tab": 1253, "retart": 1253, "seek": 1253, "forum": 1253, "lower": 1254, "hereaft": 1254, "lowest": 1254, "highest": 1254, "level": 1254, "canva": 1254, "now": 1254, "drop": 1254, "becaus": 1254, "everi": 1254, "halflap": 1254, "overwrit": [1254, 1258], "variabl": 1254, "highli": 1254, "By": [1254, 1258], "shorten": 1254, "clean": 1254, "half": 1254, "upper": 1254, "99": 1254, "unlik": 1254, "present": 1254, "centr": 1254, "keep": 1254, "secur": 1254, "prevent": 1254, "sequenti": 1254, "inner": 1254, "third": 1254, "outer": 1254, "remain": 1254, "unchang": 1254, "crate": 1254, "doblecut": 1254, "summaris": 1254, "compos": 1255, "computation": 1255, "expens": 1255, "disabl": 1255, "maxdist": 1255, "max": 1255, "visualis": 1255, "preview": 1256, "recogn": 1256, "bakewithboxmap": 1257, "layer": 1257, "random": 1257, "deviat": 1257, "mapsiz": 1257, "adjust": 1257, "imag": 1257, "ratio": 1257, "bitmap": 1257, "care": 1258, "final": 1258}, "objects": {"compas_timber.connections": [[10, 0, 1, "", "BallNodeJoint"], [27, 0, 1, "", "BeamGroupAnalyzer"], [29, 0, 1, "", "ButtJoint"], [46, 0, 1, "", "Cluster"], [47, 0, 1, "", "CompositeAnalyzer"], [50, 0, 1, "", "ConnectionSolver"], [54, 0, 1, "", "InterfaceLocation"], [55, 0, 1, "", "InterfaceRole"], [56, 0, 1, "", "Joint"], [73, 0, 1, "", "JointCandidate"], [90, 0, 1, "", "JointTopology"], [92, 0, 1, "", "LButtJoint"], [110, 0, 1, "", "LFrenchRidgeLapJoint"], [127, 0, 1, "", "LLapJoint"], [144, 0, 1, "", "LMiterJoint"], [163, 0, 1, "", "LapJoint"], [180, 2, 1, "", "MaxNCompositeAnalyzer"], [181, 0, 1, "", "NBeamKDTreeAnalyzer"], [183, 0, 1, "", "PlateButtJoint"], [205, 0, 1, "", "PlateConnectionSolver"], [211, 0, 1, "", "PlateJoint"], [233, 0, 1, "", "PlateLButtJoint"], [255, 0, 1, "", "PlateMiterJoint"], [277, 0, 1, "", "PlateTButtJoint"], [299, 0, 1, "", "PlateToPlateInterface"], [301, 2, 1, "", "QuadAnalyzer"], [302, 0, 1, "", "TBirdsmouthJoint"], [319, 0, 1, "", "TButtJoint"], [336, 0, 1, "", "TDovetailJoint"], [354, 0, 1, "", "TLapJoint"], [371, 0, 1, "", "TOliGinaJoint"], [388, 0, 1, "", "TStepJoint"], [406, 0, 1, "", "TenonMortiseJoint"], [423, 2, 1, "", "TripletAnalyzer"], [424, 0, 1, "", "WallJoint"], [444, 0, 1, "", "XLapJoint"], [461, 0, 1, "", "XNotchJoint"], [478, 0, 1, "", "YButtJoint"], [498, 2, 1, "", "beam_ref_side_incidence"], [499, 2, 1, "", "beam_ref_side_incidence_with_vector"], [500, 2, 1, "", "find_neighboring_elements"], [501, 2, 1, "", "point_centerline_towards_joint"]], "compas_timber.connections.BallNodeJoint": [[11, 1, 1, "", "ToString"], [12, 1, 1, "", "add_extensions"], [13, 1, 1, "", "add_features"], [14, 1, 1, "", "check_elements_compatibility"], [15, 1, 1, "", "copy"], [16, 1, 1, "", "create"], [17, 1, 1, "", "element_count_complies"], [18, 1, 1, "", "from_json"], [19, 1, 1, "", "from_jsonstring"], [20, 1, 1, "", "promote_cluster"], [21, 1, 1, "", "promote_joint_candidate"], [22, 1, 1, "", "restore_beams_from_keys"], [23, 1, 1, "", "sha256"], [24, 1, 1, "", "to_json"], [25, 1, 1, "", "to_jsonstring"], [26, 1, 1, "", "validate_data"]], "compas_timber.connections.BeamGroupAnalyzer": [[28, 1, 1, "", "find"]], "compas_timber.connections.ButtJoint": [[30, 1, 1, "", "ToString"], [31, 1, 1, "", "add_extensions"], [32, 1, 1, "", "add_features"], [33, 1, 1, "", "check_elements_compatibility"], [34, 1, 1, "", "copy"], [35, 1, 1, "", "create"], [36, 1, 1, "", "element_count_complies"], [37, 1, 1, "", "from_json"], [38, 1, 1, "", "from_jsonstring"], [39, 1, 1, "", "promote_cluster"], [40, 1, 1, "", "promote_joint_candidate"], [41, 1, 1, "", "restore_beams_from_keys"], [42, 1, 1, "", "sha256"], [43, 1, 1, "", "to_json"], [44, 1, 1, "", "to_jsonstring"], [45, 1, 1, "", "validate_data"]], "compas_timber.connections.CompositeAnalyzer": [[48, 1, 1, "", "find"], [49, 1, 1, "", "from_model"]], "compas_timber.connections.ConnectionSolver": [[51, 1, 1, "", "find_intersecting_pairs"], [52, 1, 1, "", "find_topology"], [53, 1, 1, "", "find_wall_wall_topology"]], "compas_timber.connections.Joint": [[57, 1, 1, "", "ToString"], [58, 1, 1, "", "add_extensions"], [59, 1, 1, "", "add_features"], [60, 1, 1, "", "check_elements_compatibility"], [61, 1, 1, "", "copy"], [62, 1, 1, "", "create"], [63, 1, 1, "", "element_count_complies"], [64, 1, 1, "", "from_json"], [65, 1, 1, "", "from_jsonstring"], [66, 1, 1, "", "promote_cluster"], [67, 1, 1, "", "promote_joint_candidate"], [68, 1, 1, "", "restore_beams_from_keys"], [69, 1, 1, "", "sha256"], [70, 1, 1, "", "to_json"], [71, 1, 1, "", "to_jsonstring"], [72, 1, 1, "", "validate_data"]], "compas_timber.connections.JointCandidate": [[74, 1, 1, "", "ToString"], [75, 1, 1, "", "add_extensions"], [76, 1, 1, "", "add_features"], [77, 1, 1, "", "check_elements_compatibility"], [78, 1, 1, "", "copy"], [79, 1, 1, "", "create"], [80, 1, 1, "", "element_count_complies"], [81, 1, 1, "", "from_json"], [82, 1, 1, "", "from_jsonstring"], [83, 1, 1, "", "promote_cluster"], [84, 1, 1, "", "promote_joint_candidate"], [85, 1, 1, "", "restore_beams_from_keys"], [86, 1, 1, "", "sha256"], [87, 1, 1, "", "to_json"], [88, 1, 1, "", "to_jsonstring"], [89, 1, 1, "", "validate_data"]], "compas_timber.connections.JointTopology": [[91, 1, 1, "", "get_name"]], "compas_timber.connections.LButtJoint": [[93, 1, 1, "", "ToString"], [94, 1, 1, "", "add_extensions"], [95, 1, 1, "", "add_features"], [96, 1, 1, "", "check_elements_compatibility"], [97, 1, 1, "", "copy"], [98, 1, 1, "", "create"], [99, 1, 1, "", "element_count_complies"], [100, 1, 1, "", "from_json"], [101, 1, 1, "", "from_jsonstring"], [102, 1, 1, "", "promote_cluster"], [103, 1, 1, "", "promote_joint_candidate"], [104, 1, 1, "", "restore_beams_from_keys"], [105, 1, 1, "", "sha256"], [106, 1, 1, "", "to_json"], [107, 1, 1, "", "to_jsonstring"], [108, 1, 1, "", "update_beam_roles"], [109, 1, 1, "", "validate_data"]], "compas_timber.connections.LFrenchRidgeLapJoint": [[111, 1, 1, "", "ToString"], [112, 1, 1, "", "add_extensions"], [113, 1, 1, "", "add_features"], [114, 1, 1, "", "check_elements_compatibility"], [115, 1, 1, "", "copy"], [116, 1, 1, "", "create"], [117, 1, 1, "", "element_count_complies"], [118, 1, 1, "", "from_json"], [119, 1, 1, "", "from_jsonstring"], [120, 1, 1, "", "promote_cluster"], [121, 1, 1, "", "promote_joint_candidate"], [122, 1, 1, "", "restore_beams_from_keys"], [123, 1, 1, "", "sha256"], [124, 1, 1, "", "to_json"], [125, 1, 1, "", "to_jsonstring"], [126, 1, 1, "", "validate_data"]], "compas_timber.connections.LLapJoint": [[128, 1, 1, "", "ToString"], [129, 1, 1, "", "add_extensions"], [130, 1, 1, "", "add_features"], [131, 1, 1, "", "check_elements_compatibility"], [132, 1, 1, "", "copy"], [133, 1, 1, "", "create"], [134, 1, 1, "", "element_count_complies"], [135, 1, 1, "", "from_json"], [136, 1, 1, "", "from_jsonstring"], [137, 1, 1, "", "promote_cluster"], [138, 1, 1, "", "promote_joint_candidate"], [139, 1, 1, "", "restore_beams_from_keys"], [140, 1, 1, "", "sha256"], [141, 1, 1, "", "to_json"], [142, 1, 1, "", "to_jsonstring"], [143, 1, 1, "", "validate_data"]], "compas_timber.connections.LMiterJoint": [[145, 1, 1, "", "ToString"], [146, 1, 1, "", "add_extensions"], [147, 1, 1, "", "add_features"], [148, 1, 1, "", "check_elements_compatibility"], [149, 1, 1, "", "copy"], [150, 1, 1, "", "create"], [151, 1, 1, "", "element_count_complies"], [152, 1, 1, "", "from_json"], [153, 1, 1, "", "from_jsonstring"], [154, 1, 1, "", "get_cutoff_plane"], [155, 1, 1, "", "get_cutting_planes"], [156, 1, 1, "", "promote_cluster"], [157, 1, 1, "", "promote_joint_candidate"], [158, 1, 1, "", "restore_beams_from_keys"], [159, 1, 1, "", "sha256"], [160, 1, 1, "", "to_json"], [161, 1, 1, "", "to_jsonstring"], [162, 1, 1, "", "validate_data"]], "compas_timber.connections.LapJoint": [[164, 1, 1, "", "ToString"], [165, 1, 1, "", "add_extensions"], [166, 1, 1, "", "add_features"], [167, 1, 1, "", "check_elements_compatibility"], [168, 1, 1, "", "copy"], [169, 1, 1, "", "create"], [170, 1, 1, "", "element_count_complies"], [171, 1, 1, "", "from_json"], [172, 1, 1, "", "from_jsonstring"], [173, 1, 1, "", "promote_cluster"], [174, 1, 1, "", "promote_joint_candidate"], [175, 1, 1, "", "restore_beams_from_keys"], [176, 1, 1, "", "sha256"], [177, 1, 1, "", "to_json"], [178, 1, 1, "", "to_jsonstring"], [179, 1, 1, "", "validate_data"]], "compas_timber.connections.NBeamKDTreeAnalyzer": [[182, 1, 1, "", "find"]], "compas_timber.connections.PlateButtJoint": [[184, 1, 1, "", "ToString"], [185, 1, 1, "", "add_extensions"], [186, 1, 1, "", "add_features"], [187, 1, 1, "", "calculate_topology"], [188, 1, 1, "", "check_elements_compatibility"], [189, 1, 1, "", "copy"], [190, 1, 1, "", "create"], [191, 1, 1, "", "element_count_complies"], [192, 1, 1, "", "flip_roles"], [193, 1, 1, "", "from_json"], [194, 1, 1, "", "from_jsonstring"], [195, 1, 1, "", "get_interface_for_plate"], [196, 1, 1, "", "promote_cluster"], [197, 1, 1, "", "promote_joint_candidate"], [198, 1, 1, "", "reorder_planes_and_outlines"], [199, 1, 1, "", "restore_beams_from_keys"], [200, 1, 1, "", "restore_plates_from_keys"], [201, 1, 1, "", "sha256"], [202, 1, 1, "", "to_json"], [203, 1, 1, "", "to_jsonstring"], [204, 1, 1, "", "validate_data"]], "compas_timber.connections.PlateConnectionSolver": [[206, 1, 1, "", "do_segments_overlap"], [207, 1, 1, "", "does_segment_intersect_outline"], [208, 1, 1, "", "find_intersecting_pairs"], [209, 1, 1, "", "find_topology"], [210, 1, 1, "", "find_wall_wall_topology"]], "compas_timber.connections.PlateJoint": [[212, 1, 1, "", "ToString"], [213, 1, 1, "", "add_extensions"], [214, 1, 1, "", "add_features"], [215, 1, 1, "", "calculate_topology"], [216, 1, 1, "", "check_elements_compatibility"], [217, 1, 1, "", "copy"], [218, 1, 1, "", "create"], [219, 1, 1, "", "element_count_complies"], [220, 1, 1, "", "flip_roles"], [221, 1, 1, "", "from_json"], [222, 1, 1, "", "from_jsonstring"], [223, 1, 1, "", "get_interface_for_plate"], [224, 1, 1, "", "promote_cluster"], [225, 1, 1, "", "promote_joint_candidate"], [226, 1, 1, "", "reorder_planes_and_outlines"], [227, 1, 1, "", "restore_beams_from_keys"], [228, 1, 1, "", "restore_plates_from_keys"], [229, 1, 1, "", "sha256"], [230, 1, 1, "", "to_json"], [231, 1, 1, "", "to_jsonstring"], [232, 1, 1, "", "validate_data"]], "compas_timber.connections.PlateLButtJoint": [[234, 1, 1, "", "ToString"], [235, 1, 1, "", "add_extensions"], [236, 1, 1, "", "add_features"], [237, 1, 1, "", "calculate_topology"], [238, 1, 1, "", "check_elements_compatibility"], [239, 1, 1, "", "copy"], [240, 1, 1, "", "create"], [241, 1, 1, "", "element_count_complies"], [242, 1, 1, "", "flip_roles"], [243, 1, 1, "", "from_json"], [244, 1, 1, "", "from_jsonstring"], [245, 1, 1, "", "get_interface_for_plate"], [246, 1, 1, "", "promote_cluster"], [247, 1, 1, "", "promote_joint_candidate"], [248, 1, 1, "", "reorder_planes_and_outlines"], [249, 1, 1, "", "restore_beams_from_keys"], [250, 1, 1, "", "restore_plates_from_keys"], [251, 1, 1, "", "sha256"], [252, 1, 1, "", "to_json"], [253, 1, 1, "", "to_jsonstring"], [254, 1, 1, "", "validate_data"]], "compas_timber.connections.PlateMiterJoint": [[256, 1, 1, "", "ToString"], [257, 1, 1, "", "add_extensions"], [258, 1, 1, "", "add_features"], [259, 1, 1, "", "calculate_topology"], [260, 1, 1, "", "check_elements_compatibility"], [261, 1, 1, "", "copy"], [262, 1, 1, "", "create"], [263, 1, 1, "", "element_count_complies"], [264, 1, 1, "", "flip_roles"], [265, 1, 1, "", "from_json"], [266, 1, 1, "", "from_jsonstring"], [267, 1, 1, "", "get_interface_for_plate"], [268, 1, 1, "", "promote_cluster"], [269, 1, 1, "", "promote_joint_candidate"], [270, 1, 1, "", "reorder_planes_and_outlines"], [271, 1, 1, "", "restore_beams_from_keys"], [272, 1, 1, "", "restore_plates_from_keys"], [273, 1, 1, "", "sha256"], [274, 1, 1, "", "to_json"], [275, 1, 1, "", "to_jsonstring"], [276, 1, 1, "", "validate_data"]], "compas_timber.connections.PlateTButtJoint": [[278, 1, 1, "", "ToString"], [279, 1, 1, "", "add_extensions"], [280, 1, 1, "", "add_features"], [281, 1, 1, "", "calculate_topology"], [282, 1, 1, "", "check_elements_compatibility"], [283, 1, 1, "", "copy"], [284, 1, 1, "", "create"], [285, 1, 1, "", "element_count_complies"], [286, 1, 1, "", "flip_roles"], [287, 1, 1, "", "from_json"], [288, 1, 1, "", "from_jsonstring"], [289, 1, 1, "", "get_interface_for_plate"], [290, 1, 1, "", "promote_cluster"], [291, 1, 1, "", "promote_joint_candidate"], [292, 1, 1, "", "reorder_planes_and_outlines"], [293, 1, 1, "", "restore_beams_from_keys"], [294, 1, 1, "", "restore_plates_from_keys"], [295, 1, 1, "", "sha256"], [296, 1, 1, "", "to_json"], [297, 1, 1, "", "to_jsonstring"], [298, 1, 1, "", "validate_data"]], "compas_timber.connections.PlateToPlateInterface": [[300, 1, 1, "", "as_plane"]], "compas_timber.connections.TBirdsmouthJoint": [[303, 1, 1, "", "ToString"], [304, 1, 1, "", "add_extensions"], [305, 1, 1, "", "add_features"], [306, 1, 1, "", "check_elements_compatibility"], [307, 1, 1, "", "copy"], [308, 1, 1, "", "create"], [309, 1, 1, "", "element_count_complies"], [310, 1, 1, "", "from_json"], [311, 1, 1, "", "from_jsonstring"], [312, 1, 1, "", "promote_cluster"], [313, 1, 1, "", "promote_joint_candidate"], [314, 1, 1, "", "restore_beams_from_keys"], [315, 1, 1, "", "sha256"], [316, 1, 1, "", "to_json"], [317, 1, 1, "", "to_jsonstring"], [318, 1, 1, "", "validate_data"]], "compas_timber.connections.TButtJoint": [[320, 1, 1, "", "ToString"], [321, 1, 1, "", "add_extensions"], [322, 1, 1, "", "add_features"], [323, 1, 1, "", "check_elements_compatibility"], [324, 1, 1, "", "copy"], [325, 1, 1, "", "create"], [326, 1, 1, "", "element_count_complies"], [327, 1, 1, "", "from_json"], [328, 1, 1, "", "from_jsonstring"], [329, 1, 1, "", "promote_cluster"], [330, 1, 1, "", "promote_joint_candidate"], [331, 1, 1, "", "restore_beams_from_keys"], [332, 1, 1, "", "sha256"], [333, 1, 1, "", "to_json"], [334, 1, 1, "", "to_jsonstring"], [335, 1, 1, "", "validate_data"]], "compas_timber.connections.TDovetailJoint": [[337, 1, 1, "", "ToString"], [338, 1, 1, "", "add_extensions"], [339, 1, 1, "", "add_features"], [340, 1, 1, "", "check_elements_compatibility"], [341, 1, 1, "", "copy"], [342, 1, 1, "", "create"], [343, 1, 1, "", "define_dovetail_tool"], [344, 1, 1, "", "element_count_complies"], [345, 1, 1, "", "from_json"], [346, 1, 1, "", "from_jsonstring"], [347, 1, 1, "", "promote_cluster"], [348, 1, 1, "", "promote_joint_candidate"], [349, 1, 1, "", "restore_beams_from_keys"], [350, 1, 1, "", "sha256"], [351, 1, 1, "", "to_json"], [352, 1, 1, "", "to_jsonstring"], [353, 1, 1, "", "validate_data"]], "compas_timber.connections.TLapJoint": [[355, 1, 1, "", "ToString"], [356, 1, 1, "", "add_extensions"], [357, 1, 1, "", "add_features"], [358, 1, 1, "", "check_elements_compatibility"], [359, 1, 1, "", "copy"], [360, 1, 1, "", "create"], [361, 1, 1, "", "element_count_complies"], [362, 1, 1, "", "from_json"], [363, 1, 1, "", "from_jsonstring"], [364, 1, 1, "", "promote_cluster"], [365, 1, 1, "", "promote_joint_candidate"], [366, 1, 1, "", "restore_beams_from_keys"], [367, 1, 1, "", "sha256"], [368, 1, 1, "", "to_json"], [369, 1, 1, "", "to_jsonstring"], [370, 1, 1, "", "validate_data"]], "compas_timber.connections.TOliGinaJoint": [[372, 1, 1, "", "ToString"], [373, 1, 1, "", "add_extensions"], [374, 1, 1, "", "add_features"], [375, 1, 1, "", "check_elements_compatibility"], [376, 1, 1, "", "copy"], [377, 1, 1, "", "create"], [378, 1, 1, "", "element_count_complies"], [379, 1, 1, "", "from_json"], [380, 1, 1, "", "from_jsonstring"], [381, 1, 1, "", "promote_cluster"], [382, 1, 1, "", "promote_joint_candidate"], [383, 1, 1, "", "restore_beams_from_keys"], [384, 1, 1, "", "sha256"], [385, 1, 1, "", "to_json"], [386, 1, 1, "", "to_jsonstring"], [387, 1, 1, "", "validate_data"]], "compas_timber.connections.TStepJoint": [[389, 1, 1, "", "ToString"], [390, 1, 1, "", "add_extensions"], [391, 1, 1, "", "add_features"], [392, 1, 1, "", "check_elements_compatibility"], [393, 1, 1, "", "copy"], [394, 1, 1, "", "create"], [395, 1, 1, "", "element_count_complies"], [396, 1, 1, "", "from_json"], [397, 1, 1, "", "from_jsonstring"], [398, 1, 1, "", "promote_cluster"], [399, 1, 1, "", "promote_joint_candidate"], [400, 1, 1, "", "restore_beams_from_keys"], [401, 1, 1, "", "set_step_depths"], [402, 1, 1, "", "sha256"], [403, 1, 1, "", "to_json"], [404, 1, 1, "", "to_jsonstring"], [405, 1, 1, "", "validate_data"]], "compas_timber.connections.TenonMortiseJoint": [[407, 1, 1, "", "ToString"], [408, 1, 1, "", "add_extensions"], [409, 1, 1, "", "add_features"], [410, 1, 1, "", "check_elements_compatibility"], [411, 1, 1, "", "copy"], [412, 1, 1, "", "create"], [413, 1, 1, "", "element_count_complies"], [414, 1, 1, "", "from_json"], [415, 1, 1, "", "from_jsonstring"], [416, 1, 1, "", "promote_cluster"], [417, 1, 1, "", "promote_joint_candidate"], [418, 1, 1, "", "restore_beams_from_keys"], [419, 1, 1, "", "sha256"], [420, 1, 1, "", "to_json"], [421, 1, 1, "", "to_jsonstring"], [422, 1, 1, "", "validate_data"]], "compas_timber.connections.WallJoint": [[425, 1, 1, "", "ToString"], [426, 1, 1, "", "add_extensions"], [427, 1, 1, "", "add_features"], [428, 1, 1, "", "check_elements_compatibility"], [429, 1, 1, "", "copy"], [430, 1, 1, "", "create"], [431, 1, 1, "", "element_count_complies"], [432, 1, 1, "", "flip_roles"], [433, 1, 1, "", "from_json"], [434, 1, 1, "", "from_jsonstring"], [435, 1, 1, "", "get_interface_for_wall"], [436, 1, 1, "", "promote_cluster"], [437, 1, 1, "", "promote_joint_candidate"], [438, 1, 1, "", "restore_beams_from_keys"], [439, 1, 1, "", "restore_walls_from_keys"], [440, 1, 1, "", "sha256"], [441, 1, 1, "", "to_json"], [442, 1, 1, "", "to_jsonstring"], [443, 1, 1, "", "validate_data"]], "compas_timber.connections.XLapJoint": [[445, 1, 1, "", "ToString"], [446, 1, 1, "", "add_extensions"], [447, 1, 1, "", "add_features"], [448, 1, 1, "", "check_elements_compatibility"], [449, 1, 1, "", "copy"], [450, 1, 1, "", "create"], [451, 1, 1, "", "element_count_complies"], [452, 1, 1, "", "from_json"], [453, 1, 1, "", "from_jsonstring"], [454, 1, 1, "", "promote_cluster"], [455, 1, 1, "", "promote_joint_candidate"], [456, 1, 1, "", "restore_beams_from_keys"], [457, 1, 1, "", "sha256"], [458, 1, 1, "", "to_json"], [459, 1, 1, "", "to_jsonstring"], [460, 1, 1, "", "validate_data"]], "compas_timber.connections.XNotchJoint": [[462, 1, 1, "", "ToString"], [463, 1, 1, "", "add_extensions"], [464, 1, 1, "", "add_features"], [465, 1, 1, "", "check_elements_compatibility"], [466, 1, 1, "", "copy"], [467, 1, 1, "", "create"], [468, 1, 1, "", "element_count_complies"], [469, 1, 1, "", "from_json"], [470, 1, 1, "", "from_jsonstring"], [471, 1, 1, "", "promote_cluster"], [472, 1, 1, "", "promote_joint_candidate"], [473, 1, 1, "", "restore_beams_from_keys"], [474, 1, 1, "", "sha256"], [475, 1, 1, "", "to_json"], [476, 1, 1, "", "to_jsonstring"], [477, 1, 1, "", "validate_data"]], "compas_timber.connections.YButtJoint": [[479, 1, 1, "", "ToString"], [480, 1, 1, "", "add_extensions"], [481, 1, 1, "", "add_features"], [482, 1, 1, "", "check_elements_compatibility"], [483, 1, 1, "", "copy"], [484, 1, 1, "", "create"], [485, 1, 1, "", "cross_beam_ref_side_index"], [486, 1, 1, "", "element_count_complies"], [487, 1, 1, "", "from_json"], [488, 1, 1, "", "from_jsonstring"], [489, 1, 1, "", "get_miter_planes"], [490, 1, 1, "", "main_beam_ref_side_index"], [491, 1, 1, "", "promote_cluster"], [492, 1, 1, "", "promote_joint_candidate"], [493, 1, 1, "", "restore_beams_from_keys"], [494, 1, 1, "", "sha256"], [495, 1, 1, "", "to_json"], [496, 1, 1, "", "to_jsonstring"], [497, 1, 1, "", "validate_data"]], "compas_timber.design": [[502, 0, 1, "", "CategoryRule"], [510, 0, 1, "", "DebugInfomation"], [515, 0, 1, "", "DirectRule"], [523, 0, 1, "", "FeatureDefinition"], [525, 0, 1, "", "JointDefinition"], [529, 0, 1, "", "JointRule"], [535, 0, 1, "", "SurfaceModel"], [553, 0, 1, "", "TopologyRule"], [560, 2, 1, "", "guess_joint_topology_2beams"], [561, 2, 1, "", "set_default_joints"]], "compas_timber.design.CategoryRule": [[503, 1, 1, "", "ToString"], [504, 1, 1, "", "comply"], [505, 1, 1, "", "get_category_rules"], [506, 1, 1, "", "get_direct_rules"], [507, 1, 1, "", "get_topology_rules"], [508, 1, 1, "", "joints_from_beams_and_rules"], [509, 1, 1, "", "reorder"]], "compas_timber.design.DebugInfomation": [[511, 1, 1, "", "ToString"], [512, 1, 1, "", "add_fastener_error"], [513, 1, 1, "", "add_feature_error"], [514, 1, 1, "", "add_joint_error"]], "compas_timber.design.DirectRule": [[516, 1, 1, "", "ToString"], [517, 1, 1, "", "comply"], [518, 1, 1, "", "contains"], [519, 1, 1, "", "get_category_rules"], [520, 1, 1, "", "get_direct_rules"], [521, 1, 1, "", "get_topology_rules"], [522, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.FeatureDefinition": [[524, 1, 1, "", "ToString"]], "compas_timber.design.JointDefinition": [[526, 1, 1, "", "ToString"], [527, 1, 1, "", "is_identical"], [528, 1, 1, "", "match"]], "compas_timber.design.JointRule": [[530, 1, 1, "", "comply"], [531, 1, 1, "", "get_category_rules"], [532, 1, 1, "", "get_direct_rules"], [533, 1, 1, "", "get_topology_rules"], [534, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.design.SurfaceModel": [[536, 1, 1, "", "beam_category_names"], [537, 1, 1, "", "create_model"], [538, 1, 1, "", "cull_overlaps"], [539, 1, 1, "", "distance_between_elements"], [540, 1, 1, "", "generate_frame"], [541, 1, 1, "", "generate_perimeter_beams"], [542, 1, 1, "", "generate_plates"], [543, 1, 1, "", "generate_stud_lines"], [544, 1, 1, "", "generate_studs"], [545, 1, 1, "", "generate_windows"], [546, 1, 1, "", "get_beam_intersections"], [547, 1, 1, "", "get_interior_segment_indices"], [548, 1, 1, "", "offset_elements"], [549, 1, 1, "", "parse_loops"], [550, 1, 1, "", "trim_jack_studs"], [551, 1, 1, "", "trim_king_studs"], [552, 1, 1, "", "trim_studs"]], "compas_timber.design.TopologyRule": [[554, 1, 1, "", "ToString"], [555, 1, 1, "", "comply"], [556, 1, 1, "", "get_category_rules"], [557, 1, 1, "", "get_direct_rules"], [558, 1, 1, "", "get_topology_rules"], [559, 1, 1, "", "joints_from_beams_and_rules"]], "compas_timber.elements": [[562, 0, 1, "", "BallNodeFastener"], [584, 0, 1, "", "Beam"], [615, 0, 1, "", "Fastener"], [636, 0, 1, "", "FastenerTimberInterface"], [646, 0, 1, "", "Opening"], [656, 0, 1, "", "OpeningType"], [657, 0, 1, "", "Plate"], [684, 0, 1, "", "PlateFastener"], [709, 0, 1, "", "Slab"], [733, 0, 1, "", "TimberElement"], [754, 0, 1, "", "Wall"]], "compas_timber.elements.BallNodeFastener": [[563, 1, 1, "", "ToString"], [564, 1, 1, "", "add_feature"], [565, 1, 1, "", "add_features"], [566, 1, 1, "", "compute_aabb"], [567, 1, 1, "", "compute_collision_mesh"], [568, 1, 1, "", "compute_geometry"], [569, 1, 1, "", "compute_obb"], [570, 1, 1, "", "compute_worldtransformation"], [571, 1, 1, "", "copy"], [572, 1, 1, "", "from_json"], [573, 1, 1, "", "from_jsonstring"], [574, 1, 1, "", "remove_blank_extension"], [575, 1, 1, "", "remove_features"], [576, 1, 1, "", "reset"], [577, 1, 1, "", "sha256"], [578, 1, 1, "", "to_json"], [579, 1, 1, "", "to_jsonstring"], [580, 1, 1, "", "transform"], [581, 1, 1, "", "transformed"], [582, 1, 1, "", "update_interface"], [583, 1, 1, "", "validate_data"]], "compas_timber.elements.Beam": [[585, 1, 1, "", "ToString"], [586, 1, 1, "", "add_blank_extension"], [587, 1, 1, "", "add_feature"], [588, 1, 1, "", "add_features"], [589, 1, 1, "", "back_side"], [590, 1, 1, "", "compute_aabb"], [591, 1, 1, "", "compute_collision_mesh"], [592, 1, 1, "", "compute_geometry"], [593, 1, 1, "", "compute_obb"], [594, 1, 1, "", "compute_worldtransformation"], [595, 1, 1, "", "copy"], [596, 1, 1, "", "endpoint_closest_to_point"], [597, 1, 1, "", "extension_to_plane"], [598, 1, 1, "", "from_centerline"], [599, 1, 1, "", "from_endpoints"], [600, 1, 1, "", "from_json"], [601, 1, 1, "", "from_jsonstring"], [602, 1, 1, "", "front_side"], [603, 1, 1, "", "get_dimensions_relative_to_side"], [604, 1, 1, "", "opp_side"], [605, 1, 1, "", "remove_blank_extension"], [606, 1, 1, "", "remove_features"], [607, 1, 1, "", "reset"], [608, 1, 1, "", "sha256"], [609, 1, 1, "", "side_as_surface"], [610, 1, 1, "", "to_json"], [611, 1, 1, "", "to_jsonstring"], [612, 1, 1, "", "transform"], [613, 1, 1, "", "transformed"], [614, 1, 1, "", "validate_data"]], "compas_timber.elements.Fastener": [[616, 1, 1, "", "ToString"], [617, 1, 1, "", "add_feature"], [618, 1, 1, "", "add_features"], [619, 1, 1, "", "compute_aabb"], [620, 1, 1, "", "compute_collision_mesh"], [621, 1, 1, "", "compute_geometry"], [622, 1, 1, "", "compute_obb"], [623, 1, 1, "", "compute_worldtransformation"], [624, 1, 1, "", "copy"], [625, 1, 1, "", "from_json"], [626, 1, 1, "", "from_jsonstring"], [627, 1, 1, "", "remove_blank_extension"], [628, 1, 1, "", "remove_features"], [629, 1, 1, "", "reset"], [630, 1, 1, "", "sha256"], [631, 1, 1, "", "to_json"], [632, 1, 1, "", "to_jsonstring"], [633, 1, 1, "", "transform"], [634, 1, 1, "", "transformed"], [635, 1, 1, "", "validate_data"]], "compas_timber.elements.FastenerTimberInterface": [[637, 1, 1, "", "ToString"], [638, 1, 1, "", "copy"], [639, 1, 1, "", "from_json"], [640, 1, 1, "", "from_jsonstring"], [641, 1, 1, "", "get_features"], [642, 1, 1, "", "sha256"], [643, 1, 1, "", "to_json"], [644, 1, 1, "", "to_jsonstring"], [645, 1, 1, "", "validate_data"]], "compas_timber.elements.Opening": [[647, 1, 1, "", "ToString"], [648, 1, 1, "", "copy"], [649, 1, 1, "", "from_json"], [650, 1, 1, "", "from_jsonstring"], [651, 1, 1, "", "orient_polyline"], [652, 1, 1, "", "sha256"], [653, 1, 1, "", "to_json"], [654, 1, 1, "", "to_jsonstring"], [655, 1, 1, "", "validate_data"]], "compas_timber.elements.Plate": [[658, 1, 1, "", "ToString"], [659, 1, 1, "", "add_feature"], [660, 1, 1, "", "add_features"], [661, 1, 1, "", "add_interface"], [662, 1, 1, "", "check_outlines"], [663, 1, 1, "", "compute_aabb"], [664, 1, 1, "", "compute_collision_mesh"], [665, 1, 1, "", "compute_geometry"], [666, 1, 1, "", "compute_obb"], [667, 1, 1, "", "compute_worldtransformation"], [668, 1, 1, "", "copy"], [669, 1, 1, "", "from_brep"], [670, 1, 1, "", "from_json"], [671, 1, 1, "", "from_jsonstring"], [672, 1, 1, "", "from_outline_thickness"], [673, 1, 1, "", "opp_side"], [674, 1, 1, "", "remove_blank_extension"], [675, 1, 1, "", "remove_features"], [676, 1, 1, "", "reset"], [677, 1, 1, "", "sha256"], [678, 1, 1, "", "side_as_surface"], [679, 1, 1, "", "to_json"], [680, 1, 1, "", "to_jsonstring"], [681, 1, 1, "", "transform"], [682, 1, 1, "", "transformed"], [683, 1, 1, "", "validate_data"]], "compas_timber.elements.PlateFastener": [[685, 1, 1, "", "ToString"], [686, 1, 1, "", "add_feature"], [687, 1, 1, "", "add_features"], [688, 1, 1, "", "compute_aabb"], [689, 1, 1, "", "compute_collision_mesh"], [690, 1, 1, "", "compute_geometry"], [691, 1, 1, "", "compute_obb"], [692, 1, 1, "", "compute_worldtransformation"], [693, 1, 1, "", "copy"], [694, 1, 1, "", "from_json"], [695, 1, 1, "", "from_jsonstring"], [696, 1, 1, "", "get_fastener_frames"], [697, 1, 1, "", "place_instances"], [698, 1, 1, "", "remove_blank_extension"], [699, 1, 1, "", "remove_features"], [700, 1, 1, "", "reset"], [701, 1, 1, "", "set_default"], [702, 1, 1, "", "sha256"], [703, 1, 1, "", "to_json"], [704, 1, 1, "", "to_jsonstring"], [705, 1, 1, "", "transform"], [706, 1, 1, "", "transformed"], [707, 1, 1, "", "validate_data"], [708, 1, 1, "", "validate_fastener_beam_compatibility"]], "compas_timber.elements.Slab": [[710, 1, 1, "", "ToString"], [711, 1, 1, "", "add_feature"], [712, 1, 1, "", "add_features"], [713, 1, 1, "", "compute_aabb"], [714, 1, 1, "", "compute_collision_mesh"], [715, 1, 1, "", "compute_geometry"], [716, 1, 1, "", "compute_obb"], [717, 1, 1, "", "compute_worldtransformation"], [718, 1, 1, "", "copy"], [719, 1, 1, "", "from_boundary"], [720, 1, 1, "", "from_brep"], [721, 1, 1, "", "from_json"], [722, 1, 1, "", "from_jsonstring"], [723, 1, 1, "", "remove_blank_extension"], [724, 1, 1, "", "remove_features"], [725, 1, 1, "", "reset"], [726, 1, 1, "", "rotate"], [727, 1, 1, "", "sha256"], [728, 1, 1, "", "to_json"], [729, 1, 1, "", "to_jsonstring"], [730, 1, 1, "", "transform"], [731, 1, 1, "", "transformed"], [732, 1, 1, "", "validate_data"]], "compas_timber.elements.TimberElement": [[734, 1, 1, "", "ToString"], [735, 1, 1, "", "add_feature"], [736, 1, 1, "", "add_features"], [737, 1, 1, "", "compute_aabb"], [738, 1, 1, "", "compute_collision_mesh"], [739, 1, 1, "", "compute_geometry"], [740, 1, 1, "", "compute_obb"], [741, 1, 1, "", "compute_worldtransformation"], [742, 1, 1, "", "copy"], [743, 1, 1, "", "from_json"], [744, 1, 1, "", "from_jsonstring"], [745, 1, 1, "", "remove_blank_extension"], [746, 1, 1, "", "remove_features"], [747, 1, 1, "", "reset"], [748, 1, 1, "", "sha256"], [749, 1, 1, "", "to_json"], [750, 1, 1, "", "to_jsonstring"], [751, 1, 1, "", "transform"], [752, 1, 1, "", "transformed"], [753, 1, 1, "", "validate_data"]], "compas_timber.elements.Wall": [[755, 1, 1, "", "ToString"], [756, 1, 1, "", "add_feature"], [757, 1, 1, "", "add_features"], [758, 1, 1, "", "compute_aabb"], [759, 1, 1, "", "compute_collision_mesh"], [760, 1, 1, "", "compute_geometry"], [761, 1, 1, "", "compute_obb"], [762, 1, 1, "", "compute_worldtransformation"], [763, 1, 1, "", "copy"], [764, 1, 1, "", "from_boundary"], [765, 1, 1, "", "from_brep"], [766, 1, 1, "", "from_json"], [767, 1, 1, "", "from_jsonstring"], [768, 1, 1, "", "remove_blank_extension"], [769, 1, 1, "", "remove_features"], [770, 1, 1, "", "reset"], [771, 1, 1, "", "rotate"], [772, 1, 1, "", "sha256"], [773, 1, 1, "", "to_json"], [774, 1, 1, "", "to_jsonstring"], [775, 1, 1, "", "transform"], [776, 1, 1, "", "transformed"], [777, 1, 1, "", "validate_data"]], "compas_timber.errors": [[778, 3, 1, "", "BTLxProcessingError"], [779, 3, 1, "", "BeamJoiningError"], [780, 3, 1, "", "FastenerApplicationError"], [781, 3, 1, "", "FeatureApplicationError"]], "compas_timber.fabrication": [[782, 0, 1, "", "AlignmentType"], [783, 0, 1, "", "BTLxFromGeometryDefinition"], [795, 0, 1, "", "BTLxPart"], [798, 0, 1, "", "BTLxProcessing"], [809, 0, 1, "", "BTLxWriter"], [813, 0, 1, "", "Contour"], [824, 0, 1, "", "DoubleCut"], [840, 0, 1, "", "DovetailMortise"], [858, 0, 1, "", "DovetailTenon"], [876, 0, 1, "", "Drilling"], [892, 0, 1, "", "DualContour"], [903, 0, 1, "", "EdgePositionType"], [904, 0, 1, "", "FreeContour"], [923, 0, 1, "", "FrenchRidgeLap"], [939, 0, 1, "", "JackRafterCut"], [955, 0, 1, "", "JackRafterCutProxy"], [959, 0, 1, "", "Lap"], [976, 0, 1, "", "LapProxy"], [980, 0, 1, "", "LimitationTopType"], [981, 0, 1, "", "LongitudinalCut"], [997, 0, 1, "", "MachiningLimits"], [998, 0, 1, "", "Mortise"], [1014, 0, 1, "", "OrientationType"], [1015, 0, 1, "", "Pocket"], [1031, 0, 1, "", "PocketProxy"], [1035, 0, 1, "", "Slot"], [1049, 0, 1, "", "StepJoint"], [1066, 0, 1, "", "StepJointNotch"], [1083, 0, 1, "", "StepShapeType"], [1084, 0, 1, "", "Tenon"], [1100, 0, 1, "", "TenonShapeType"], [1101, 0, 1, "", "Text"]], "compas_timber.fabrication.BTLxFromGeometryDefinition": [[784, 1, 1, "", "ToString"], [785, 1, 1, "", "copy"], [786, 1, 1, "", "feature_from_element"], [787, 1, 1, "", "from_json"], [788, 1, 1, "", "from_jsonstring"], [789, 1, 1, "", "sha256"], [790, 1, 1, "", "to_json"], [791, 1, 1, "", "to_jsonstring"], [792, 1, 1, "", "transform"], [793, 1, 1, "", "transformed"], [794, 1, 1, "", "validate_data"]], "compas_timber.fabrication.BTLxPart": [[796, 1, 1, "", "et_point_vals"], [797, 1, 1, "", "ref_side_from_face"]], "compas_timber.fabrication.BTLxProcessing": [[799, 1, 1, "", "ToString"], [800, 1, 1, "", "add_subprocessing"], [801, 1, 1, "", "copy"], [802, 1, 1, "", "from_json"], [803, 1, 1, "", "from_jsonstring"], [804, 1, 1, "", "scaled"], [805, 1, 1, "", "sha256"], [806, 1, 1, "", "to_json"], [807, 1, 1, "", "to_jsonstring"], [808, 1, 1, "", "validate_data"]], "compas_timber.fabrication.BTLxWriter": [[810, 1, 1, "", "model_to_xml"], [811, 1, 1, "", "register_type_serializer"], [812, 1, 1, "", "write"]], "compas_timber.fabrication.Contour": [[814, 1, 1, "", "ToString"], [815, 1, 1, "", "copy"], [816, 1, 1, "", "from_json"], [817, 1, 1, "", "from_jsonstring"], [818, 1, 1, "", "scale"], [819, 1, 1, "", "scaled"], [820, 1, 1, "", "sha256"], [821, 1, 1, "", "to_json"], [822, 1, 1, "", "to_jsonstring"], [823, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DoubleCut": [[825, 1, 1, "", "ToString"], [826, 1, 1, "", "add_subprocessing"], [827, 1, 1, "", "apply"], [828, 1, 1, "", "copy"], [829, 1, 1, "", "from_json"], [830, 1, 1, "", "from_jsonstring"], [831, 1, 1, "", "from_planes_and_beam"], [832, 1, 1, "", "from_shapes_and_element"], [833, 1, 1, "", "planes_from_params_and_beam"], [834, 1, 1, "", "scale"], [835, 1, 1, "", "scaled"], [836, 1, 1, "", "sha256"], [837, 1, 1, "", "to_json"], [838, 1, 1, "", "to_jsonstring"], [839, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailMortise": [[841, 1, 1, "", "ToString"], [842, 1, 1, "", "add_subprocessing"], [843, 1, 1, "", "apply"], [844, 1, 1, "", "copy"], [845, 1, 1, "", "define_dovetail_tool"], [846, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [847, 1, 1, "", "dovetail_volume_from_params_and_beam"], [848, 1, 1, "", "frame_from_params_and_beam"], [849, 1, 1, "", "from_frame_and_beam"], [850, 1, 1, "", "from_json"], [851, 1, 1, "", "from_jsonstring"], [852, 1, 1, "", "scale"], [853, 1, 1, "", "scaled"], [854, 1, 1, "", "sha256"], [855, 1, 1, "", "to_json"], [856, 1, 1, "", "to_jsonstring"], [857, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DovetailTenon": [[859, 1, 1, "", "ToString"], [860, 1, 1, "", "add_subprocessing"], [861, 1, 1, "", "apply"], [862, 1, 1, "", "copy"], [863, 1, 1, "", "define_dovetail_tool"], [864, 1, 1, "", "dovetail_cutting_frames_from_params_and_beam"], [865, 1, 1, "", "dovetail_volume_from_params_and_beam"], [866, 1, 1, "", "frame_from_params_and_beam"], [867, 1, 1, "", "from_json"], [868, 1, 1, "", "from_jsonstring"], [869, 1, 1, "", "from_plane_and_beam"], [870, 1, 1, "", "scale"], [871, 1, 1, "", "scaled"], [872, 1, 1, "", "sha256"], [873, 1, 1, "", "to_json"], [874, 1, 1, "", "to_jsonstring"], [875, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Drilling": [[877, 1, 1, "", "ToString"], [878, 1, 1, "", "add_subprocessing"], [879, 1, 1, "", "apply"], [880, 1, 1, "", "copy"], [881, 1, 1, "", "cylinder_from_params_and_element"], [882, 1, 1, "", "from_json"], [883, 1, 1, "", "from_jsonstring"], [884, 1, 1, "", "from_line_and_element"], [885, 1, 1, "", "from_shapes_and_element"], [886, 1, 1, "", "scale"], [887, 1, 1, "", "scaled"], [888, 1, 1, "", "sha256"], [889, 1, 1, "", "to_json"], [890, 1, 1, "", "to_jsonstring"], [891, 1, 1, "", "validate_data"]], "compas_timber.fabrication.DualContour": [[893, 1, 1, "", "ToString"], [894, 1, 1, "", "copy"], [895, 1, 1, "", "from_json"], [896, 1, 1, "", "from_jsonstring"], [897, 1, 1, "", "scale"], [898, 1, 1, "", "scaled"], [899, 1, 1, "", "sha256"], [900, 1, 1, "", "to_json"], [901, 1, 1, "", "to_jsonstring"], [902, 1, 1, "", "validate_data"]], "compas_timber.fabrication.FreeContour": [[905, 1, 1, "", "ToString"], [906, 1, 1, "", "add_subprocessing"], [907, 1, 1, "", "apply"], [908, 1, 1, "", "are_all_segments_parallel"], [909, 1, 1, "", "copy"], [910, 1, 1, "", "from_json"], [911, 1, 1, "", "from_jsonstring"], [912, 1, 1, "", "from_polyline_and_element"], [913, 1, 1, "", "from_shapes_and_element"], [914, 1, 1, "", "from_top_bottom_and_elements"], [915, 1, 1, "", "get_ref_face_index"], [916, 1, 1, "", "parse_tool_position"], [917, 1, 1, "", "scale"], [918, 1, 1, "", "scaled"], [919, 1, 1, "", "sha256"], [920, 1, 1, "", "to_json"], [921, 1, 1, "", "to_jsonstring"], [922, 1, 1, "", "validate_data"]], "compas_timber.fabrication.FrenchRidgeLap": [[924, 1, 1, "", "ToString"], [925, 1, 1, "", "add_subprocessing"], [926, 1, 1, "", "apply"], [927, 1, 1, "", "copy"], [928, 1, 1, "", "frame_from_params_and_beam"], [929, 1, 1, "", "from_beam_beam_and_plane"], [930, 1, 1, "", "from_json"], [931, 1, 1, "", "from_jsonstring"], [932, 1, 1, "", "lap_volume_from_params_and_beam"], [933, 1, 1, "", "scale"], [934, 1, 1, "", "scaled"], [935, 1, 1, "", "sha256"], [936, 1, 1, "", "to_json"], [937, 1, 1, "", "to_jsonstring"], [938, 1, 1, "", "validate_data"]], "compas_timber.fabrication.JackRafterCut": [[940, 1, 1, "", "ToString"], [941, 1, 1, "", "add_subprocessing"], [942, 1, 1, "", "apply"], [943, 1, 1, "", "copy"], [944, 1, 1, "", "from_json"], [945, 1, 1, "", "from_jsonstring"], [946, 1, 1, "", "from_plane_and_beam"], [947, 1, 1, "", "from_shapes_and_element"], [948, 1, 1, "", "plane_from_params_and_beam"], [949, 1, 1, "", "scale"], [950, 1, 1, "", "scaled"], [951, 1, 1, "", "sha256"], [952, 1, 1, "", "to_json"], [953, 1, 1, "", "to_jsonstring"], [954, 1, 1, "", "validate_data"]], "compas_timber.fabrication.JackRafterCutProxy": [[956, 1, 1, "", "apply"], [957, 1, 1, "", "from_plane_and_beam"], [958, 1, 1, "", "unproxified"]], "compas_timber.fabrication.Lap": [[960, 1, 1, "", "ToString"], [961, 1, 1, "", "add_subprocessing"], [962, 1, 1, "", "apply"], [963, 1, 1, "", "copy"], [964, 1, 1, "", "from_json"], [965, 1, 1, "", "from_jsonstring"], [966, 1, 1, "", "from_plane_and_beam"], [967, 1, 1, "", "from_shapes_and_element"], [968, 1, 1, "", "from_volume_and_beam"], [969, 1, 1, "", "scale"], [970, 1, 1, "", "scaled"], [971, 1, 1, "", "sha256"], [972, 1, 1, "", "to_json"], [973, 1, 1, "", "to_jsonstring"], [974, 1, 1, "", "validate_data"], [975, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.LapProxy": [[977, 1, 1, "", "apply"], [978, 1, 1, "", "from_volume_and_beam"], [979, 1, 1, "", "unproxified"]], "compas_timber.fabrication.LongitudinalCut": [[982, 1, 1, "", "ToString"], [983, 1, 1, "", "add_subprocessing"], [984, 1, 1, "", "apply"], [985, 1, 1, "", "copy"], [986, 1, 1, "", "from_json"], [987, 1, 1, "", "from_jsonstring"], [988, 1, 1, "", "from_plane_and_beam"], [989, 1, 1, "", "from_shapes_and_element"], [990, 1, 1, "", "plane_from_params_and_beam"], [991, 1, 1, "", "scaled"], [992, 1, 1, "", "sha256"], [993, 1, 1, "", "to_json"], [994, 1, 1, "", "to_jsonstring"], [995, 1, 1, "", "validate_data"], [996, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Mortise": [[999, 1, 1, "", "ToString"], [1000, 1, 1, "", "add_subprocessing"], [1001, 1, 1, "", "apply"], [1002, 1, 1, "", "copy"], [1003, 1, 1, "", "frame_from_params_and_beam"], [1004, 1, 1, "", "from_frame_and_beam"], [1005, 1, 1, "", "from_json"], [1006, 1, 1, "", "from_jsonstring"], [1007, 1, 1, "", "scale"], [1008, 1, 1, "", "scaled"], [1009, 1, 1, "", "sha256"], [1010, 1, 1, "", "to_json"], [1011, 1, 1, "", "to_jsonstring"], [1012, 1, 1, "", "validate_data"], [1013, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Pocket": [[1016, 1, 1, "", "ToString"], [1017, 1, 1, "", "add_subprocessing"], [1018, 1, 1, "", "apply"], [1019, 1, 1, "", "copy"], [1020, 1, 1, "", "from_json"], [1021, 1, 1, "", "from_jsonstring"], [1022, 1, 1, "", "from_shapes_and_element"], [1023, 1, 1, "", "from_volume_and_element"], [1024, 1, 1, "", "scale"], [1025, 1, 1, "", "scaled"], [1026, 1, 1, "", "sha256"], [1027, 1, 1, "", "to_json"], [1028, 1, 1, "", "to_jsonstring"], [1029, 1, 1, "", "validate_data"], [1030, 1, 1, "", "volume_from_params_and_element"]], "compas_timber.fabrication.PocketProxy": [[1032, 1, 1, "", "apply"], [1033, 1, 1, "", "from_volume_and_element"], [1034, 1, 1, "", "unproxified"]], "compas_timber.fabrication.Slot": [[1036, 1, 1, "", "ToString"], [1037, 1, 1, "", "add_subprocessing"], [1038, 1, 1, "", "apply"], [1039, 1, 1, "", "copy"], [1040, 1, 1, "", "from_json"], [1041, 1, 1, "", "from_jsonstring"], [1042, 1, 1, "", "from_plane_and_beam"], [1043, 1, 1, "", "scale"], [1044, 1, 1, "", "scaled"], [1045, 1, 1, "", "sha256"], [1046, 1, 1, "", "to_json"], [1047, 1, 1, "", "to_jsonstring"], [1048, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJoint": [[1050, 1, 1, "", "ToString"], [1051, 1, 1, "", "add_subprocessing"], [1052, 1, 1, "", "add_tenon"], [1053, 1, 1, "", "apply"], [1054, 1, 1, "", "copy"], [1055, 1, 1, "", "from_json"], [1056, 1, 1, "", "from_jsonstring"], [1057, 1, 1, "", "from_plane_and_beam"], [1058, 1, 1, "", "planes_from_params_and_beam"], [1059, 1, 1, "", "scale"], [1060, 1, 1, "", "scaled"], [1061, 1, 1, "", "sha256"], [1062, 1, 1, "", "tenon_volume_from_params_and_beam"], [1063, 1, 1, "", "to_json"], [1064, 1, 1, "", "to_jsonstring"], [1065, 1, 1, "", "validate_data"]], "compas_timber.fabrication.StepJointNotch": [[1067, 1, 1, "", "ToString"], [1068, 1, 1, "", "add_mortise"], [1069, 1, 1, "", "add_subprocessing"], [1070, 1, 1, "", "apply"], [1071, 1, 1, "", "copy"], [1072, 1, 1, "", "from_json"], [1073, 1, 1, "", "from_jsonstring"], [1074, 1, 1, "", "from_plane_and_beam"], [1075, 1, 1, "", "mortise_volume_from_params_and_beam"], [1076, 1, 1, "", "planes_from_params_and_beam"], [1077, 1, 1, "", "scale"], [1078, 1, 1, "", "scaled"], [1079, 1, 1, "", "sha256"], [1080, 1, 1, "", "to_json"], [1081, 1, 1, "", "to_jsonstring"], [1082, 1, 1, "", "validate_data"]], "compas_timber.fabrication.Tenon": [[1085, 1, 1, "", "ToString"], [1086, 1, 1, "", "add_subprocessing"], [1087, 1, 1, "", "apply"], [1088, 1, 1, "", "copy"], [1089, 1, 1, "", "frame_from_params_and_beam"], [1090, 1, 1, "", "from_json"], [1091, 1, 1, "", "from_jsonstring"], [1092, 1, 1, "", "from_plane_and_beam"], [1093, 1, 1, "", "scale"], [1094, 1, 1, "", "scaled"], [1095, 1, 1, "", "sha256"], [1096, 1, 1, "", "to_json"], [1097, 1, 1, "", "to_jsonstring"], [1098, 1, 1, "", "validate_data"], [1099, 1, 1, "", "volume_from_params_and_beam"]], "compas_timber.fabrication.Text": [[1102, 1, 1, "", "ToString"], [1103, 1, 1, "", "add_subprocessing"], [1104, 1, 1, "", "apply"], [1105, 1, 1, "", "copy"], [1106, 1, 1, "", "create_text_curves_for_element"], [1107, 1, 1, "", "from_json"], [1108, 1, 1, "", "from_jsonstring"], [1109, 1, 1, "", "scale"], [1110, 1, 1, "", "scaled"], [1111, 1, 1, "", "sha256"], [1112, 1, 1, "", "to_json"], [1113, 1, 1, "", "to_jsonstring"], [1114, 1, 1, "", "validate_data"]], "compas_timber.ghpython": [[1115, 2, 1, "", "add_gh_param"], [1116, 2, 1, "", "clear_gh_params"], [1117, 2, 1, "", "get_leaf_subclasses"], [1118, 2, 1, "", "item_input_valid"], [1119, 2, 1, "", "list_input_valid"], [1120, 2, 1, "", "manage_dynamic_params"], [1121, 2, 1, "", "rename_gh_input"]], "compas_timber.model": [[1122, 0, 1, "", "TimberModel"]], "compas_timber.model.TimberModel": [[1123, 1, 1, "", "ToString"], [1124, 1, 1, "", "add_element"], [1125, 1, 1, "", "add_elements"], [1126, 1, 1, "", "add_group"], [1127, 1, 1, "", "add_group_element"], [1128, 1, 1, "", "add_interaction"], [1129, 1, 1, "", "add_joint"], [1130, 1, 1, "", "add_joint_candidate"], [1131, 1, 1, "", "add_material"], [1132, 1, 1, "", "assign_material"], [1133, 1, 1, "", "compute_aabb"], [1134, 1, 1, "", "compute_obb"], [1135, 1, 1, "", "connect_adjacent_beams"], [1136, 1, 1, "", "connect_adjacent_walls"], [1137, 1, 1, "", "copy"], [1138, 1, 1, "", "element_by_guid"], [1139, 1, 1, "", "elements"], [1140, 1, 1, "", "elements_connected_by"], [1141, 1, 1, "", "from_json"], [1142, 1, 1, "", "from_jsonstring"], [1143, 1, 1, "", "get_elements_in_group"], [1144, 1, 1, "", "get_interactions_for_element"], [1145, 1, 1, "", "has_element"], [1146, 1, 1, "", "has_group"], [1147, 1, 1, "", "has_interaction"], [1148, 1, 1, "", "has_material"], [1149, 1, 1, "", "interactions"], [1150, 1, 1, "", "materials"], [1151, 1, 1, "", "process_joinery"], [1152, 1, 1, "", "remove_element"], [1153, 1, 1, "", "remove_interaction"], [1154, 1, 1, "", "remove_joint"], [1155, 1, 1, "", "remove_joint_candidate"], [1156, 1, 1, "", "rotate"], [1157, 1, 1, "", "rotated"], [1158, 1, 1, "", "scale"], [1159, 1, 1, "", "scaled"], [1160, 1, 1, "", "set_topologies"], [1161, 1, 1, "", "sha256"], [1162, 1, 1, "", "to_json"], [1163, 1, 1, "", "to_jsonstring"], [1164, 1, 1, "", "transform"], [1165, 1, 1, "", "transform_numpy"], [1166, 1, 1, "", "transformed"], [1167, 1, 1, "", "transformed_numpy"], [1168, 1, 1, "", "translate"], [1169, 1, 1, "", "translated"], [1170, 1, 1, "", "validate_data"]], "compas_timber.planning": [[1171, 0, 1, "", "Actor"], [1173, 0, 1, "", "BuildingPlan"], [1183, 0, 1, "", "BuildingPlanParser"], [1186, 0, 1, "", "Instruction"], [1196, 0, 1, "", "LinearDimension"], [1206, 0, 1, "", "Model3d"], [1216, 0, 1, "", "SimpleSequenceGenerator"], [1217, 0, 1, "", "Step"], [1227, 0, 1, "", "Text3d"]], "compas_timber.planning.Actor": [[1172, 1, 1, "", "get_name"]], "compas_timber.planning.BuildingPlan": [[1174, 1, 1, "", "ToString"], [1175, 1, 1, "", "add_step"], [1176, 1, 1, "", "copy"], [1177, 1, 1, "", "from_json"], [1178, 1, 1, "", "from_jsonstring"], [1179, 1, 1, "", "sha256"], [1180, 1, 1, "", "to_json"], [1181, 1, 1, "", "to_jsonstring"], [1182, 1, 1, "", "validate_data"]], "compas_timber.planning.BuildingPlanParser": [[1184, 1, 1, "", "parse"], [1185, 1, 1, "", "serialize"]], "compas_timber.planning.Instruction": [[1187, 1, 1, "", "ToString"], [1188, 1, 1, "", "copy"], [1189, 1, 1, "", "from_json"], [1190, 1, 1, "", "from_jsonstring"], [1191, 1, 1, "", "sha256"], [1192, 1, 1, "", "to_json"], [1193, 1, 1, "", "to_jsonstring"], [1194, 1, 1, "", "transform"], [1195, 1, 1, "", "validate_data"]], "compas_timber.planning.LinearDimension": [[1197, 1, 1, "", "ToString"], [1198, 1, 1, "", "copy"], [1199, 1, 1, "", "from_json"], [1200, 1, 1, "", "from_jsonstring"], [1201, 1, 1, "", "sha256"], [1202, 1, 1, "", "to_json"], [1203, 1, 1, "", "to_jsonstring"], [1204, 1, 1, "", "transform"], [1205, 1, 1, "", "validate_data"]], "compas_timber.planning.Model3d": [[1207, 1, 1, "", "ToString"], [1208, 1, 1, "", "copy"], [1209, 1, 1, "", "from_json"], [1210, 1, 1, "", "from_jsonstring"], [1211, 1, 1, "", "sha256"], [1212, 1, 1, "", "to_json"], [1213, 1, 1, "", "to_jsonstring"], [1214, 1, 1, "", "transform"], [1215, 1, 1, "", "validate_data"]], "compas_timber.planning.Step": [[1218, 1, 1, "", "ToString"], [1219, 1, 1, "", "copy"], [1220, 1, 1, "", "from_json"], [1221, 1, 1, "", "from_jsonstring"], [1222, 1, 1, "", "sha256"], [1223, 1, 1, "", "to_json"], [1224, 1, 1, "", "to_jsonstring"], [1225, 1, 1, "", "transform"], [1226, 1, 1, "", "validate_data"]], "compas_timber.planning.Text3d": [[1228, 1, 1, "", "ToString"], [1229, 1, 1, "", "copy"], [1230, 1, 1, "", "from_json"], [1231, 1, 1, "", "from_jsonstring"], [1232, 1, 1, "", "sha256"], [1233, 1, 1, "", "to_json"], [1234, 1, 1, "", "to_jsonstring"], [1235, 1, 1, "", "transform"], [1236, 1, 1, "", "validate_data"]], "compas_timber.rhino": [[1237, 2, 1, "", "find_neighboring_elements"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"]}, "titleterms": {"api": 0, "refer": 0, "packag": 0, "compas_timb": [1, 2, 3, 4, 5, 6, 7, 8, 9], "connect": [1, 1241], "joint": [1, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 1242, 1254, 1256], "interfac": 1, "solver": 1, "function": [1, 2, 6], "except": 1, "design": [2, 1249], "class": [2, 3, 4, 7, 8, 1240, 1241, 1242], "element": [3, 1139, 1241, 1242], "error": [4, 1241, 1256], "fabric": [5, 1241, 1251], "core": [5, 1242], "process": [5, 1240], "paramet": [5, 1240], "proxi": 5, "ghpython": 6, "model": [7, 1249, 1254, 1255, 1256], "plan": 8, "rhino": [9, 1253], "plugin": [9, 1246], "ballnodejoint": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "tostr": [11, 30, 57, 74, 93, 111, 128, 145, 164, 184, 212, 234, 256, 278, 303, 320, 337, 355, 372, 389, 407, 425, 445, 462, 479, 503, 511, 516, 524, 526, 554, 563, 585, 616, 637, 647, 658, 685, 710, 734, 755, 784, 799, 814, 825, 841, 859, 877, 893, 905, 924, 940, 960, 982, 999, 1016, 1036, 1050, 1067, 1085, 1102, 1123, 1174, 1187, 1197, 1207, 1218, 1228], "add_extens": [12, 31, 58, 75, 94, 112, 129, 146, 165, 185, 213, 235, 257, 279, 304, 321, 338, 356, 373, 390, 408, 426, 446, 463, 480], "add_featur": [13, 32, 59, 76, 95, 113, 130, 147, 166, 186, 214, 236, 258, 280, 305, 322, 339, 357, 374, 391, 409, 427, 447, 464, 481, 564, 565, 587, 588, 617, 618, 659, 660, 686, 687, 711, 712, 735, 736, 756, 757], "check_elements_compat": [14, 33, 60, 77, 96, 114, 131, 148, 167, 188, 216, 238, 260, 282, 306, 323, 340, 358, 375, 392, 410, 428, 448, 465, 482], "copi": [15, 34, 61, 78, 97, 115, 132, 149, 168, 189, 217, 239, 261, 283, 307, 324, 341, 359, 376, 393, 411, 429, 449, 466, 483, 571, 595, 624, 638, 648, 668, 693, 718, 742, 763, 785, 801, 815, 828, 844, 862, 880, 894, 909, 927, 943, 963, 985, 1002, 1019, 1039, 1054, 1071, 1088, 1105, 1137, 1176, 1188, 1198, 1208, 1219, 1229], "creat": [16, 35, 62, 79, 98, 116, 133, 150, 169, 190, 218, 240, 262, 284, 308, 325, 342, 360, 377, 394, 412, 430, 450, 467, 484, 1240, 1242], "element_count_compli": [17, 36, 63, 80, 99, 117, 134, 151, 170, 191, 219, 241, 263, 285, 309, 326, 344, 361, 378, 395, 413, 431, 451, 468, 486], "from_json": [18, 37, 64, 81, 100, 118, 135, 152, 171, 193, 221, 243, 265, 287, 310, 327, 345, 362, 379, 396, 414, 433, 452, 469, 487, 572, 600, 625, 639, 649, 670, 694, 721, 743, 766, 787, 802, 816, 829, 850, 867, 882, 895, 910, 930, 944, 964, 986, 1005, 1020, 1040, 1055, 1072, 1090, 1107, 1141, 1177, 1189, 1199, 1209, 1220, 1230], "from_jsonstr": [19, 38, 65, 82, 101, 119, 136, 153, 172, 194, 222, 244, 266, 288, 311, 328, 346, 363, 380, 397, 415, 434, 453, 470, 488, 573, 601, 626, 640, 650, 671, 695, 722, 744, 767, 788, 803, 817, 830, 851, 868, 883, 896, 911, 931, 945, 965, 987, 1006, 1021, 1041, 1056, 1073, 1091, 1108, 1142, 1178, 1190, 1200, 1210, 1221, 1231], "promote_clust": [20, 39, 66, 83, 102, 120, 137, 156, 173, 196, 224, 246, 268, 290, 312, 329, 347, 364, 381, 398, 416, 436, 454, 471, 491], "promote_joint_candid": [21, 40, 67, 84, 103, 121, 138, 157, 174, 197, 225, 247, 269, 291, 313, 330, 348, 365, 382, 399, 417, 437, 455, 472, 492], "restore_beams_from_kei": [22, 41, 68, 85, 104, 122, 139, 158, 175, 199, 227, 249, 271, 293, 314, 331, 349, 366, 383, 400, 418, 438, 456, 473, 493], "sha256": [23, 42, 69, 86, 105, 123, 140, 159, 176, 201, 229, 251, 273, 295, 315, 332, 350, 367, 384, 402, 419, 440, 457, 474, 494, 577, 608, 630, 642, 652, 677, 702, 727, 748, 772, 789, 805, 820, 836, 854, 872, 888, 899, 919, 935, 951, 971, 992, 1009, 1026, 1045, 1061, 1079, 1095, 1111, 1161, 1179, 1191, 1201, 1211, 1222, 1232], "to_json": [24, 43, 70, 87, 106, 124, 141, 160, 177, 202, 230, 252, 274, 296, 316, 333, 351, 368, 385, 403, 420, 441, 458, 475, 495, 578, 610, 631, 643, 653, 679, 703, 728, 749, 773, 790, 806, 821, 837, 855, 873, 889, 900, 920, 936, 952, 972, 993, 1010, 1027, 1046, 1063, 1080, 1096, 1112, 1162, 1180, 1192, 1202, 1212, 1223, 1233], "to_jsonstr": [25, 44, 71, 88, 107, 125, 142, 161, 178, 203, 231, 253, 275, 297, 317, 334, 352, 369, 386, 404, 421, 442, 459, 476, 496, 579, 611, 632, 644, 654, 680, 704, 729, 750, 774, 791, 807, 822, 838, 856, 874, 890, 901, 921, 937, 953, 973, 994, 1011, 1028, 1047, 1064, 1081, 1097, 1113, 1163, 1181, 1193, 1203, 1213, 1224, 1234], "validate_data": [26, 45, 72, 89, 109, 126, 143, 162, 179, 204, 232, 254, 276, 298, 318, 335, 353, 370, 387, 405, 422, 443, 460, 477, 497, 583, 614, 635, 645, 655, 683, 707, 732, 753, 777, 794, 808, 823, 839, 857, 875, 891, 902, 922, 938, 954, 974, 995, 1012, 1029, 1048, 1065, 1082, 1098, 1114, 1170, 1182, 1195, 1205, 1215, 1226, 1236], "beamgroupanalyz": [27, 28], "find": [28, 48, 182], "buttjoint": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "cluster": 46, "compositeanalyz": [47, 48, 49], "from_model": 49, "connectionsolv": [50, 51, 52, 53], "find_intersecting_pair": [51, 208], "find_topologi": [52, 209], "find_wall_wall_topologi": [53, 210], "interfaceloc": 54, "interfacerol": 55, "jointcandid": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "jointtopologi": [90, 91], "get_nam": [91, 1172], "lbuttjoint": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "update_beam_rol": 108, "lfrenchridgelapjoint": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "llapjoint": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143], "lmiterjoint": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "get_cutoff_plan": 154, "get_cutting_plan": 155, "lapjoint": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "maxncompositeanalyz": 180, "nbeamkdtreeanalyz": [181, 182], "platebuttjoint": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "calculate_topologi": [187, 215, 237, 259, 281], "flip_rol": [192, 220, 242, 264, 286, 432], "get_interface_for_pl": [195, 223, 245, 267, 289], "reorder_planes_and_outlin": [198, 226, 248, 270, 292], "restore_plates_from_kei": [200, 228, 250, 272, 294], "plateconnectionsolv": [205, 206, 207, 208, 209, 210], "do_segments_overlap": 206, "does_segment_intersect_outlin": 207, "platejoint": [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232], "platelbuttjoint": [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254], "platemiterjoint": [255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "platetbuttjoint": [277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "platetoplateinterfac": [299, 300], "as_plan": 300, "quadanalyz": 301, "tbirdsmouthjoint": [302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318], "tbuttjoint": [319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "tdovetailjoint": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "define_dovetail_tool": [343, 845, 863], "tlapjoint": [354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "toliginajoint": [371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387], "tstepjoint": [388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405], "set_step_depth": 401, "tenonmortisejoint": [406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "tripletanalyz": 423, "walljoint": [424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443], "get_interface_for_wal": 435, "restore_walls_from_kei": 439, "xlapjoint": [444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460], "xnotchjoint": [461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "ybuttjoint": [478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497], "cross_beam_ref_side_index": 485, "get_miter_plan": 489, "main_beam_ref_side_index": 490, "beam_ref_side_incid": 498, "beam_ref_side_incidence_with_vector": 499, "find_neighboring_el": [500, 1237], "point_centerline_towards_joint": 501, "categoryrul": [502, 503, 504, 505, 506, 507, 508, 509], "compli": [504, 517, 530, 555], "get_category_rul": [505, 519, 531, 556], "get_direct_rul": [506, 520, 532, 557], "get_topology_rul": [507, 521, 533, 558], "joints_from_beams_and_rul": [508, 522, 534, 559], "reorder": 509, "debuginfom": [510, 511, 512, 513, 514], "add_fastener_error": 512, "add_feature_error": 513, "add_joint_error": 514, "directrul": [515, 516, 517, 518, 519, 520, 521, 522], "contain": 518, "featuredefinit": [523, 524], "jointdefinit": [525, 526, 527, 528], "is_ident": 527, "match": 528, "jointrul": [529, 530, 531, 532, 533, 534], "surfacemodel": [535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552], "beam_category_nam": 536, "create_model": 537, "cull_overlap": 538, "distance_between_el": 539, "generate_fram": 540, "generate_perimeter_beam": 541, "generate_pl": 542, "generate_stud_lin": 543, "generate_stud": 544, "generate_window": 545, "get_beam_intersect": 546, "get_interior_segment_indic": 547, "offset_el": 548, "parse_loop": 549, "trim_jack_stud": 550, "trim_king_stud": 551, "trim_stud": 552, "topologyrul": [553, 554, 555, 556, 557, 558, 559], "guess_joint_topology_2beam": 560, "set_default_joint": 561, "ballnodefasten": [562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "compute_aabb": [566, 590, 619, 663, 688, 713, 737, 758, 1133], "compute_collision_mesh": [567, 591, 620, 664, 689, 714, 738, 759], "compute_geometri": [568, 592, 621, 665, 690, 715, 739, 760], "compute_obb": [569, 593, 622, 666, 691, 716, 740, 761, 1134], "compute_worldtransform": [570, 594, 623, 667, 692, 717, 741, 762], "remove_blank_extens": [574, 605, 627, 674, 698, 723, 745, 768], "remove_featur": [575, 606, 628, 675, 699, 724, 746, 769], "reset": [576, 607, 629, 676, 700, 725, 747, 770], "transform": [580, 581, 612, 613, 633, 634, 681, 682, 705, 706, 730, 731, 751, 752, 775, 776, 792, 793, 1164, 1166, 1194, 1204, 1214, 1225, 1235], "update_interfac": 582, "beam": [584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 1248, 1249, 1256], "add_blank_extens": 586, "back_sid": 589, "endpoint_closest_to_point": 596, "extension_to_plan": 597, "from_centerlin": 598, "from_endpoint": 599, "front_sid": 602, "get_dimensions_relative_to_sid": 603, "opp_sid": [604, 673], "side_as_surfac": [609, 678], "fasten": [615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635], "fastenertimberinterfac": [636, 637, 638, 639, 640, 641, 642, 643, 644, 645], "get_featur": 641, "open": [646, 647, 648, 649, 650, 651, 652, 653, 654, 655], "orient_polylin": 651, "openingtyp": 656, "plate": [657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683], "add_interfac": 661, "check_outlin": 662, "from_brep": [669, 720, 765], "from_outline_thick": 672, "platefasten": [684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708], "get_fastener_fram": 696, "place_inst": 697, "set_default": 701, "validate_fastener_beam_compat": 708, "slab": [709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732], "from_boundari": [719, 764], "rotat": [726, 771, 1156, 1157], "timberel": [733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753], "wall": [754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777], "btlxprocessingerror": 778, "beamjoiningerror": 779, "fastenerapplicationerror": 780, "featureapplicationerror": 781, "alignmenttyp": 782, "btlxfromgeometrydefinit": [783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794], "feature_from_el": 786, "btlxpart": [795, 796, 797], "et_point_v": 796, "ref_side_from_fac": 797, "btlxprocess": [798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808], "add_subprocess": [800, 826, 842, 860, 878, 906, 925, 941, 961, 983, 1000, 1017, 1037, 1051, 1069, 1086, 1103], "scale": [804, 818, 819, 834, 835, 852, 853, 870, 871, 886, 887, 897, 898, 917, 918, 933, 934, 949, 950, 969, 970, 991, 1007, 1008, 1024, 1025, 1043, 1044, 1059, 1060, 1077, 1078, 1093, 1094, 1109, 1110, 1158, 1159], "btlxwriter": [809, 810, 811, 812], "model_to_xml": 810, "register_type_seri": 811, "write": [812, 1251], "contour": [813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823], "doublecut": [824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839], "appli": [827, 843, 861, 879, 907, 926, 942, 956, 962, 977, 984, 1001, 1018, 1032, 1038, 1053, 1070, 1087, 1104], "from_planes_and_beam": 831, "from_shapes_and_el": [832, 885, 913, 947, 967, 989, 1022], "planes_from_params_and_beam": [833, 1058, 1076], "dovetailmortis": [840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857], "dovetail_cutting_frames_from_params_and_beam": [846, 864], "dovetail_volume_from_params_and_beam": [847, 865], "frame_from_params_and_beam": [848, 866, 928, 1003, 1089], "from_frame_and_beam": [849, 1004], "dovetailtenon": [858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875], "from_plane_and_beam": [869, 946, 957, 966, 988, 1042, 1057, 1074, 1092], "drill": [876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 1252], "cylinder_from_params_and_el": 881, "from_line_and_el": 884, "dualcontour": [892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902], "edgepositiontyp": 903, "freecontour": [904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922], "are_all_segments_parallel": 908, "from_polyline_and_el": 912, "from_top_bottom_and_el": 914, "get_ref_face_index": 915, "parse_tool_posit": 916, "frenchridgelap": [923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938], "from_beam_beam_and_plan": 929, "lap_volume_from_params_and_beam": 932, "jackraftercut": [939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954], "plane_from_params_and_beam": [948, 990], "jackraftercutproxi": [955, 956, 957, 958], "unproxifi": [958, 979, 1034], "lap": [959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 1254], "from_volume_and_beam": [968, 978], "volume_from_params_and_beam": [975, 996, 1013, 1099], "lapproxi": [976, 977, 978, 979], "limitationtoptyp": 980, "longitudinalcut": [981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996], "machininglimit": 997, "mortis": [998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1254], "orientationtyp": 1014, "pocket": [1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "from_volume_and_el": [1023, 1033], "volume_from_params_and_el": 1030, "pocketproxi": [1031, 1032, 1033, 1034], "slot": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "stepjoint": [1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "add_tenon": 1052, "tenon_volume_from_params_and_beam": 1062, "stepjointnotch": [1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082], "add_mortis": 1068, "mortise_volume_from_params_and_beam": 1075, "stepshapetyp": 1083, "tenon": [1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1254], "tenonshapetyp": 1100, "text": [1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114], "create_text_curves_for_el": 1106, "add_gh_param": 1115, "clear_gh_param": 1116, "get_leaf_subclass": 1117, "item_input_valid": 1118, "list_input_valid": 1119, "manage_dynamic_param": 1120, "rename_gh_input": 1121, "timbermodel": [1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170], "add_el": [1124, 1125], "add_group": 1126, "add_group_el": 1127, "add_interact": 1128, "add_joint": 1129, "add_joint_candid": 1130, "add_materi": 1131, "assign_materi": 1132, "connect_adjacent_beam": 1135, "connect_adjacent_wal": 1136, "element_by_guid": 1138, "elements_connected_bi": 1140, "get_elements_in_group": 1143, "get_interactions_for_el": 1144, "has_el": 1145, "has_group": 1146, "has_interact": 1147, "has_materi": 1148, "interact": 1149, "materi": 1150, "process_joineri": 1151, "remove_el": 1152, "remove_interact": 1153, "remove_joint": 1154, "remove_joint_candid": 1155, "set_topologi": 1160, "transform_numpi": 1165, "transformed_numpi": 1167, "translat": [1168, 1169], "actor": [1171, 1172], "buildingplan": [1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182], "add_step": 1175, "buildingplanpars": [1183, 1184, 1185], "pars": 1184, "serial": 1185, "instruct": [1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195], "lineardimens": [1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205], "model3d": [1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215], "simplesequencegener": 1216, "step": [1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1254], "text3d": [1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236], "cite": 1238, "develop": [1239, 1244], "guid": [1239, 1240, 1242, 1253], "btlx": [1240, 1251], "contribut": [1240, 1242], "ad": 1240, "new": [1240, 1242], "1": [1240, 1242], "identifi": 1240, "2": [1240, 1242], "exampl": [1240, 1242, 1250], "3": [1240, 1242], "add": [1240, 1242], "altern": 1240, "constructor": 1240, "4": [1240, 1242], "geometri": 1240, "gener": 1240, "method": [1240, 1242], "5": [1240, 1242], "updat": [1240, 1242], "modul": [1240, 1242], "import": [1240, 1242], "6": 1240, "test": [1240, 1242], "kei": [1240, 1242], "consider": [1240, 1242], "diagram": 1241, "timber": [1241, 1243], "subsystem": 1241, "defin": 1242, "requir": 1242, "analyz": 1242, "relationship": 1242, "extract": 1242, "geometr": 1242, "inform": 1242, "implement": 1242, "compa": 1243, "document": 1243, "depend": 1243, "tabl": [1243, 1254], "content": 1243, "indic": 1243, "instal": [1244, 1253], "user": 1244, "licens": 1245, "grasshopp": 1246, "attribut": 1247, "standard": 1247, "custom": [1247, 1249], "check": 1247, "delet": 1247, "decomposebeam": 1248, "findbeambyrhinoguid": 1248, "surfac": [1249, 1254, 1256], "option": 1249, "dimens": 1249, "featur": [1252, 1256], "jack": 1252, "rafter": 1252, "cut": 1252, "doubl": 1252, "8": 1253, "7": 1253, "troubleshoot": 1253, "rule": 1254, "compon": 1254, "default": 1254, "topolog": 1254, "categori": 1254, "direct": 1254, "overrid": 1254, "type": [1254, 1256], "l": 1254, "butt": 1254, "miter": 1254, "french": 1254, "ridg": 1254, "t": 1254, "birdsmouth": 1254, "dovetail": 1254, "x": 1254, "summari": 1254, "show": 1256, "face": 1256, "index": 1256, "join": 1256, "topologi": 1256, "util": 1257, "bake": 1257, "boxmap": 1257, "workflow": 1258}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Packages": [[0, "packages"]], "compas_timber.connections": [[1, "compas-timber-connections"]], "Joints": [[1, "joints"]], "Joint Interfaces": [[1, "joint-interfaces"]], "Solvers": [[1, "solvers"]], "Functions": [[1, "functions"], [2, "functions"], [6, "functions"]], "Exceptions": [[1, "exceptions"]], "compas_timber.design": [[2, "compas-timber-design"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [7, "classes"], [8, "classes"]], "compas_timber.elements": [[3, "compas-timber-elements"]], "compas_timber.errors": [[4, "compas-timber-errors"]], "compas_timber.fabrication": [[5, "compas-timber-fabrication"]], "Core": [[5, "core"]], "Processings": [[5, "processings"]], "Processings Parameters": [[5, "processings-parameters"]], "Processings Proxies": [[5, "processings-proxies"]], "compas_timber.ghpython": [[6, "compas-timber-ghpython"]], "compas_timber.model": [[7, "compas-timber-model"]], "compas_timber.planning": [[8, "compas-timber-planning"]], "compas_timber.rhino": [[9, "compas-timber-rhino"]], "Plugins": [[9, "plugins"]], "BallNodeJoint": [[10, "ballnodejoint"]], "BallNodeJoint.ToString": [[11, "ballnodejoint-tostring"]], "BallNodeJoint.add_extensions": [[12, "ballnodejoint-add-extensions"]], "BallNodeJoint.add_features": [[13, "ballnodejoint-add-features"]], "BallNodeJoint.check_elements_compatibility": [[14, "ballnodejoint-check-elements-compatibility"]], "BallNodeJoint.copy": [[15, "ballnodejoint-copy"]], "BallNodeJoint.create": [[16, "ballnodejoint-create"]], "BallNodeJoint.element_count_complies": [[17, "ballnodejoint-element-count-complies"]], "BallNodeJoint.from_json": [[18, "ballnodejoint-from-json"]], "BallNodeJoint.from_jsonstring": [[19, "ballnodejoint-from-jsonstring"]], "BallNodeJoint.promote_cluster": [[20, "ballnodejoint-promote-cluster"]], "BallNodeJoint.promote_joint_candidate": [[21, "ballnodejoint-promote-joint-candidate"]], "BallNodeJoint.restore_beams_from_keys": [[22, "ballnodejoint-restore-beams-from-keys"]], "BallNodeJoint.sha256": [[23, "ballnodejoint-sha256"]], "BallNodeJoint.to_json": [[24, "ballnodejoint-to-json"]], "BallNodeJoint.to_jsonstring": [[25, "ballnodejoint-to-jsonstring"]], "BallNodeJoint.validate_data": [[26, "ballnodejoint-validate-data"]], "BeamGroupAnalyzer": [[27, "beamgroupanalyzer"]], "BeamGroupAnalyzer.find": [[28, "beamgroupanalyzer-find"]], "ButtJoint": [[29, "buttjoint"]], "ButtJoint.ToString": [[30, "buttjoint-tostring"]], "ButtJoint.add_extensions": [[31, "buttjoint-add-extensions"]], "ButtJoint.add_features": [[32, "buttjoint-add-features"]], "ButtJoint.check_elements_compatibility": [[33, "buttjoint-check-elements-compatibility"]], "ButtJoint.copy": [[34, "buttjoint-copy"]], "ButtJoint.create": [[35, "buttjoint-create"]], "ButtJoint.element_count_complies": [[36, "buttjoint-element-count-complies"]], "ButtJoint.from_json": [[37, "buttjoint-from-json"]], "ButtJoint.from_jsonstring": [[38, "buttjoint-from-jsonstring"]], "ButtJoint.promote_cluster": [[39, "buttjoint-promote-cluster"]], "ButtJoint.promote_joint_candidate": [[40, "buttjoint-promote-joint-candidate"]], "ButtJoint.restore_beams_from_keys": [[41, "buttjoint-restore-beams-from-keys"]], "ButtJoint.sha256": [[42, "buttjoint-sha256"]], "ButtJoint.to_json": [[43, "buttjoint-to-json"]], "ButtJoint.to_jsonstring": [[44, "buttjoint-to-jsonstring"]], "ButtJoint.validate_data": [[45, "buttjoint-validate-data"]], "Cluster": [[46, "cluster"]], "CompositeAnalyzer": [[47, "compositeanalyzer"]], "CompositeAnalyzer.find": [[48, "compositeanalyzer-find"]], "CompositeAnalyzer.from_model": [[49, "compositeanalyzer-from-model"]], "ConnectionSolver": [[50, "connectionsolver"]], "ConnectionSolver.find_intersecting_pairs": [[51, "connectionsolver-find-intersecting-pairs"]], "ConnectionSolver.find_topology": [[52, "connectionsolver-find-topology"]], "ConnectionSolver.find_wall_wall_topology": [[53, "connectionsolver-find-wall-wall-topology"]], "InterfaceLocation": [[54, "interfacelocation"]], "InterfaceRole": [[55, "interfacerole"]], "Joint": [[56, "joint"]], "Joint.ToString": [[57, "joint-tostring"]], "Joint.add_extensions": [[58, "joint-add-extensions"]], "Joint.add_features": [[59, "joint-add-features"]], "Joint.check_elements_compatibility": [[60, "joint-check-elements-compatibility"]], "Joint.copy": [[61, "joint-copy"]], "Joint.create": [[62, "joint-create"]], "Joint.element_count_complies": [[63, "joint-element-count-complies"]], "Joint.from_json": [[64, "joint-from-json"]], "Joint.from_jsonstring": [[65, "joint-from-jsonstring"]], "Joint.promote_cluster": [[66, "joint-promote-cluster"]], "Joint.promote_joint_candidate": [[67, "joint-promote-joint-candidate"]], "Joint.restore_beams_from_keys": [[68, "joint-restore-beams-from-keys"]], "Joint.sha256": [[69, "joint-sha256"]], "Joint.to_json": [[70, "joint-to-json"]], "Joint.to_jsonstring": [[71, "joint-to-jsonstring"]], "Joint.validate_data": [[72, "joint-validate-data"]], "JointCandidate": [[73, "jointcandidate"]], "JointCandidate.ToString": [[74, "jointcandidate-tostring"]], "JointCandidate.add_extensions": [[75, "jointcandidate-add-extensions"]], "JointCandidate.add_features": [[76, "jointcandidate-add-features"]], "JointCandidate.check_elements_compatibility": [[77, "jointcandidate-check-elements-compatibility"]], "JointCandidate.copy": [[78, "jointcandidate-copy"]], "JointCandidate.create": [[79, "jointcandidate-create"]], "JointCandidate.element_count_complies": [[80, "jointcandidate-element-count-complies"]], "JointCandidate.from_json": [[81, "jointcandidate-from-json"]], "JointCandidate.from_jsonstring": [[82, "jointcandidate-from-jsonstring"]], "JointCandidate.promote_cluster": [[83, "jointcandidate-promote-cluster"]], "JointCandidate.promote_joint_candidate": [[84, "jointcandidate-promote-joint-candidate"]], "JointCandidate.restore_beams_from_keys": [[85, "jointcandidate-restore-beams-from-keys"]], "JointCandidate.sha256": [[86, "jointcandidate-sha256"]], "JointCandidate.to_json": [[87, "jointcandidate-to-json"]], "JointCandidate.to_jsonstring": [[88, "jointcandidate-to-jsonstring"]], "JointCandidate.validate_data": [[89, "jointcandidate-validate-data"]], "JointTopology": [[90, "jointtopology"]], "JointTopology.get_name": [[91, "jointtopology-get-name"]], "LButtJoint": [[92, "lbuttjoint"]], "LButtJoint.ToString": [[93, "lbuttjoint-tostring"]], "LButtJoint.add_extensions": [[94, "lbuttjoint-add-extensions"]], "LButtJoint.add_features": [[95, "lbuttjoint-add-features"]], "LButtJoint.check_elements_compatibility": [[96, "lbuttjoint-check-elements-compatibility"]], "LButtJoint.copy": [[97, "lbuttjoint-copy"]], "LButtJoint.create": [[98, "lbuttjoint-create"]], "LButtJoint.element_count_complies": [[99, "lbuttjoint-element-count-complies"]], "LButtJoint.from_json": [[100, "lbuttjoint-from-json"]], "LButtJoint.from_jsonstring": [[101, "lbuttjoint-from-jsonstring"]], "LButtJoint.promote_cluster": [[102, "lbuttjoint-promote-cluster"]], "LButtJoint.promote_joint_candidate": [[103, "lbuttjoint-promote-joint-candidate"]], "LButtJoint.restore_beams_from_keys": [[104, "lbuttjoint-restore-beams-from-keys"]], "LButtJoint.sha256": [[105, "lbuttjoint-sha256"]], "LButtJoint.to_json": [[106, "lbuttjoint-to-json"]], "LButtJoint.to_jsonstring": [[107, "lbuttjoint-to-jsonstring"]], "LButtJoint.update_beam_roles": [[108, "lbuttjoint-update-beam-roles"]], "LButtJoint.validate_data": [[109, "lbuttjoint-validate-data"]], "LFrenchRidgeLapJoint": [[110, "lfrenchridgelapjoint"]], "LFrenchRidgeLapJoint.ToString": [[111, "lfrenchridgelapjoint-tostring"]], "LFrenchRidgeLapJoint.add_extensions": [[112, "lfrenchridgelapjoint-add-extensions"]], "LFrenchRidgeLapJoint.add_features": [[113, "lfrenchridgelapjoint-add-features"]], "LFrenchRidgeLapJoint.check_elements_compatibility": [[114, "lfrenchridgelapjoint-check-elements-compatibility"]], "LFrenchRidgeLapJoint.copy": [[115, "lfrenchridgelapjoint-copy"]], "LFrenchRidgeLapJoint.create": [[116, "lfrenchridgelapjoint-create"]], "LFrenchRidgeLapJoint.element_count_complies": [[117, "lfrenchridgelapjoint-element-count-complies"]], "LFrenchRidgeLapJoint.from_json": [[118, "lfrenchridgelapjoint-from-json"]], "LFrenchRidgeLapJoint.from_jsonstring": [[119, "lfrenchridgelapjoint-from-jsonstring"]], "LFrenchRidgeLapJoint.promote_cluster": [[120, "lfrenchridgelapjoint-promote-cluster"]], "LFrenchRidgeLapJoint.promote_joint_candidate": [[121, "lfrenchridgelapjoint-promote-joint-candidate"]], "LFrenchRidgeLapJoint.restore_beams_from_keys": [[122, "lfrenchridgelapjoint-restore-beams-from-keys"]], "LFrenchRidgeLapJoint.sha256": [[123, "lfrenchridgelapjoint-sha256"]], "LFrenchRidgeLapJoint.to_json": [[124, "lfrenchridgelapjoint-to-json"]], "LFrenchRidgeLapJoint.to_jsonstring": [[125, "lfrenchridgelapjoint-to-jsonstring"]], "LFrenchRidgeLapJoint.validate_data": [[126, "lfrenchridgelapjoint-validate-data"]], "LLapJoint": [[127, "llapjoint"]], "LLapJoint.ToString": [[128, "llapjoint-tostring"]], "LLapJoint.add_extensions": [[129, "llapjoint-add-extensions"]], "LLapJoint.add_features": [[130, "llapjoint-add-features"]], "LLapJoint.check_elements_compatibility": [[131, "llapjoint-check-elements-compatibility"]], "LLapJoint.copy": [[132, "llapjoint-copy"]], "LLapJoint.create": [[133, "llapjoint-create"]], "LLapJoint.element_count_complies": [[134, "llapjoint-element-count-complies"]], "LLapJoint.from_json": [[135, "llapjoint-from-json"]], "LLapJoint.from_jsonstring": [[136, "llapjoint-from-jsonstring"]], "LLapJoint.promote_cluster": [[137, "llapjoint-promote-cluster"]], "LLapJoint.promote_joint_candidate": [[138, "llapjoint-promote-joint-candidate"]], "LLapJoint.restore_beams_from_keys": [[139, "llapjoint-restore-beams-from-keys"]], "LLapJoint.sha256": [[140, "llapjoint-sha256"]], "LLapJoint.to_json": [[141, "llapjoint-to-json"]], "LLapJoint.to_jsonstring": [[142, "llapjoint-to-jsonstring"]], "LLapJoint.validate_data": [[143, "llapjoint-validate-data"]], "LMiterJoint": [[144, "lmiterjoint"]], "LMiterJoint.ToString": [[145, "lmiterjoint-tostring"]], "LMiterJoint.add_extensions": [[146, "lmiterjoint-add-extensions"]], "LMiterJoint.add_features": [[147, "lmiterjoint-add-features"]], "LMiterJoint.check_elements_compatibility": [[148, "lmiterjoint-check-elements-compatibility"]], "LMiterJoint.copy": [[149, "lmiterjoint-copy"]], "LMiterJoint.create": [[150, "lmiterjoint-create"]], "LMiterJoint.element_count_complies": [[151, "lmiterjoint-element-count-complies"]], "LMiterJoint.from_json": [[152, "lmiterjoint-from-json"]], "LMiterJoint.from_jsonstring": [[153, "lmiterjoint-from-jsonstring"]], "LMiterJoint.get_cutoff_plane": [[154, "lmiterjoint-get-cutoff-plane"]], "LMiterJoint.get_cutting_planes": [[155, "lmiterjoint-get-cutting-planes"]], "LMiterJoint.promote_cluster": [[156, "lmiterjoint-promote-cluster"]], "LMiterJoint.promote_joint_candidate": [[157, "lmiterjoint-promote-joint-candidate"]], "LMiterJoint.restore_beams_from_keys": [[158, "lmiterjoint-restore-beams-from-keys"]], "LMiterJoint.sha256": [[159, "lmiterjoint-sha256"]], "LMiterJoint.to_json": [[160, "lmiterjoint-to-json"]], "LMiterJoint.to_jsonstring": [[161, "lmiterjoint-to-jsonstring"]], "LMiterJoint.validate_data": [[162, "lmiterjoint-validate-data"]], "LapJoint": [[163, "lapjoint"]], "LapJoint.ToString": [[164, "lapjoint-tostring"]], "LapJoint.add_extensions": [[165, "lapjoint-add-extensions"]], "LapJoint.add_features": [[166, "lapjoint-add-features"]], "LapJoint.check_elements_compatibility": [[167, "lapjoint-check-elements-compatibility"]], "LapJoint.copy": [[168, "lapjoint-copy"]], "LapJoint.create": [[169, "lapjoint-create"]], "LapJoint.element_count_complies": [[170, "lapjoint-element-count-complies"]], "LapJoint.from_json": [[171, "lapjoint-from-json"]], "LapJoint.from_jsonstring": [[172, "lapjoint-from-jsonstring"]], "LapJoint.promote_cluster": [[173, "lapjoint-promote-cluster"]], "LapJoint.promote_joint_candidate": [[174, "lapjoint-promote-joint-candidate"]], "LapJoint.restore_beams_from_keys": [[175, "lapjoint-restore-beams-from-keys"]], "LapJoint.sha256": [[176, "lapjoint-sha256"]], "LapJoint.to_json": [[177, "lapjoint-to-json"]], "LapJoint.to_jsonstring": [[178, "lapjoint-to-jsonstring"]], "LapJoint.validate_data": [[179, "lapjoint-validate-data"]], "MaxNCompositeAnalyzer": [[180, "maxncompositeanalyzer"]], "NBeamKDTreeAnalyzer": [[181, "nbeamkdtreeanalyzer"]], "NBeamKDTreeAnalyzer.find": [[182, "nbeamkdtreeanalyzer-find"]], "PlateButtJoint": [[183, "platebuttjoint"]], "PlateButtJoint.ToString": [[184, "platebuttjoint-tostring"]], "PlateButtJoint.add_extensions": [[185, "platebuttjoint-add-extensions"]], "PlateButtJoint.add_features": [[186, "platebuttjoint-add-features"]], "PlateButtJoint.calculate_topology": [[187, "platebuttjoint-calculate-topology"]], "PlateButtJoint.check_elements_compatibility": [[188, "platebuttjoint-check-elements-compatibility"]], "PlateButtJoint.copy": [[189, "platebuttjoint-copy"]], "PlateButtJoint.create": [[190, "platebuttjoint-create"]], "PlateButtJoint.element_count_complies": [[191, "platebuttjoint-element-count-complies"]], "PlateButtJoint.flip_roles": [[192, "platebuttjoint-flip-roles"]], "PlateButtJoint.from_json": [[193, "platebuttjoint-from-json"]], "PlateButtJoint.from_jsonstring": [[194, "platebuttjoint-from-jsonstring"]], "PlateButtJoint.get_interface_for_plate": [[195, "platebuttjoint-get-interface-for-plate"]], "PlateButtJoint.promote_cluster": [[196, "platebuttjoint-promote-cluster"]], "PlateButtJoint.promote_joint_candidate": [[197, "platebuttjoint-promote-joint-candidate"]], "PlateButtJoint.reorder_planes_and_outlines": [[198, "platebuttjoint-reorder-planes-and-outlines"]], "PlateButtJoint.restore_beams_from_keys": [[199, "platebuttjoint-restore-beams-from-keys"]], "PlateButtJoint.restore_plates_from_keys": [[200, "platebuttjoint-restore-plates-from-keys"]], "PlateButtJoint.sha256": [[201, "platebuttjoint-sha256"]], "PlateButtJoint.to_json": [[202, "platebuttjoint-to-json"]], "PlateButtJoint.to_jsonstring": [[203, "platebuttjoint-to-jsonstring"]], "PlateButtJoint.validate_data": [[204, "platebuttjoint-validate-data"]], "PlateConnectionSolver": [[205, "plateconnectionsolver"]], "PlateConnectionSolver.do_segments_overlap": [[206, "plateconnectionsolver-do-segments-overlap"]], "PlateConnectionSolver.does_segment_intersect_outline": [[207, "plateconnectionsolver-does-segment-intersect-outline"]], "PlateConnectionSolver.find_intersecting_pairs": [[208, "plateconnectionsolver-find-intersecting-pairs"]], "PlateConnectionSolver.find_topology": [[209, "plateconnectionsolver-find-topology"]], "PlateConnectionSolver.find_wall_wall_topology": [[210, "plateconnectionsolver-find-wall-wall-topology"]], "PlateJoint": [[211, "platejoint"]], "PlateJoint.ToString": [[212, "platejoint-tostring"]], "PlateJoint.add_extensions": [[213, "platejoint-add-extensions"]], "PlateJoint.add_features": [[214, "platejoint-add-features"]], "PlateJoint.calculate_topology": [[215, "platejoint-calculate-topology"]], "PlateJoint.check_elements_compatibility": [[216, "platejoint-check-elements-compatibility"]], "PlateJoint.copy": [[217, "platejoint-copy"]], "PlateJoint.create": [[218, "platejoint-create"]], "PlateJoint.element_count_complies": [[219, "platejoint-element-count-complies"]], "PlateJoint.flip_roles": [[220, "platejoint-flip-roles"]], "PlateJoint.from_json": [[221, "platejoint-from-json"]], "PlateJoint.from_jsonstring": [[222, "platejoint-from-jsonstring"]], "PlateJoint.get_interface_for_plate": [[223, "platejoint-get-interface-for-plate"]], "PlateJoint.promote_cluster": [[224, "platejoint-promote-cluster"]], "PlateJoint.promote_joint_candidate": [[225, "platejoint-promote-joint-candidate"]], "PlateJoint.reorder_planes_and_outlines": [[226, "platejoint-reorder-planes-and-outlines"]], "PlateJoint.restore_beams_from_keys": [[227, "platejoint-restore-beams-from-keys"]], "PlateJoint.restore_plates_from_keys": [[228, "platejoint-restore-plates-from-keys"]], "PlateJoint.sha256": [[229, "platejoint-sha256"]], "PlateJoint.to_json": [[230, "platejoint-to-json"]], "PlateJoint.to_jsonstring": [[231, "platejoint-to-jsonstring"]], "PlateJoint.validate_data": [[232, "platejoint-validate-data"]], "PlateLButtJoint": [[233, "platelbuttjoint"]], "PlateLButtJoint.ToString": [[234, "platelbuttjoint-tostring"]], "PlateLButtJoint.add_extensions": [[235, "platelbuttjoint-add-extensions"]], "PlateLButtJoint.add_features": [[236, "platelbuttjoint-add-features"]], "PlateLButtJoint.calculate_topology": [[237, "platelbuttjoint-calculate-topology"]], "PlateLButtJoint.check_elements_compatibility": [[238, "platelbuttjoint-check-elements-compatibility"]], "PlateLButtJoint.copy": [[239, "platelbuttjoint-copy"]], "PlateLButtJoint.create": [[240, "platelbuttjoint-create"]], "PlateLButtJoint.element_count_complies": [[241, "platelbuttjoint-element-count-complies"]], "PlateLButtJoint.flip_roles": [[242, "platelbuttjoint-flip-roles"]], "PlateLButtJoint.from_json": [[243, "platelbuttjoint-from-json"]], "PlateLButtJoint.from_jsonstring": [[244, "platelbuttjoint-from-jsonstring"]], "PlateLButtJoint.get_interface_for_plate": [[245, "platelbuttjoint-get-interface-for-plate"]], "PlateLButtJoint.promote_cluster": [[246, "platelbuttjoint-promote-cluster"]], "PlateLButtJoint.promote_joint_candidate": [[247, "platelbuttjoint-promote-joint-candidate"]], "PlateLButtJoint.reorder_planes_and_outlines": [[248, "platelbuttjoint-reorder-planes-and-outlines"]], "PlateLButtJoint.restore_beams_from_keys": [[249, "platelbuttjoint-restore-beams-from-keys"]], "PlateLButtJoint.restore_plates_from_keys": [[250, "platelbuttjoint-restore-plates-from-keys"]], "PlateLButtJoint.sha256": [[251, "platelbuttjoint-sha256"]], "PlateLButtJoint.to_json": [[252, "platelbuttjoint-to-json"]], "PlateLButtJoint.to_jsonstring": [[253, "platelbuttjoint-to-jsonstring"]], "PlateLButtJoint.validate_data": [[254, "platelbuttjoint-validate-data"]], "PlateMiterJoint": [[255, "platemiterjoint"]], "PlateMiterJoint.ToString": [[256, "platemiterjoint-tostring"]], "PlateMiterJoint.add_extensions": [[257, "platemiterjoint-add-extensions"]], "PlateMiterJoint.add_features": [[258, "platemiterjoint-add-features"]], "PlateMiterJoint.calculate_topology": [[259, "platemiterjoint-calculate-topology"]], "PlateMiterJoint.check_elements_compatibility": [[260, "platemiterjoint-check-elements-compatibility"]], "PlateMiterJoint.copy": [[261, "platemiterjoint-copy"]], "PlateMiterJoint.create": [[262, "platemiterjoint-create"]], "PlateMiterJoint.element_count_complies": [[263, "platemiterjoint-element-count-complies"]], "PlateMiterJoint.flip_roles": [[264, "platemiterjoint-flip-roles"]], "PlateMiterJoint.from_json": [[265, "platemiterjoint-from-json"]], "PlateMiterJoint.from_jsonstring": [[266, "platemiterjoint-from-jsonstring"]], "PlateMiterJoint.get_interface_for_plate": [[267, "platemiterjoint-get-interface-for-plate"]], "PlateMiterJoint.promote_cluster": [[268, "platemiterjoint-promote-cluster"]], "PlateMiterJoint.promote_joint_candidate": [[269, "platemiterjoint-promote-joint-candidate"]], "PlateMiterJoint.reorder_planes_and_outlines": [[270, "platemiterjoint-reorder-planes-and-outlines"]], "PlateMiterJoint.restore_beams_from_keys": [[271, "platemiterjoint-restore-beams-from-keys"]], "PlateMiterJoint.restore_plates_from_keys": [[272, "platemiterjoint-restore-plates-from-keys"]], "PlateMiterJoint.sha256": [[273, "platemiterjoint-sha256"]], "PlateMiterJoint.to_json": [[274, "platemiterjoint-to-json"]], "PlateMiterJoint.to_jsonstring": [[275, "platemiterjoint-to-jsonstring"]], "PlateMiterJoint.validate_data": [[276, "platemiterjoint-validate-data"]], "PlateTButtJoint": [[277, "platetbuttjoint"]], "PlateTButtJoint.ToString": [[278, "platetbuttjoint-tostring"]], "PlateTButtJoint.add_extensions": [[279, "platetbuttjoint-add-extensions"]], "PlateTButtJoint.add_features": [[280, "platetbuttjoint-add-features"]], "PlateTButtJoint.calculate_topology": [[281, "platetbuttjoint-calculate-topology"]], "PlateTButtJoint.check_elements_compatibility": [[282, "platetbuttjoint-check-elements-compatibility"]], "PlateTButtJoint.copy": [[283, "platetbuttjoint-copy"]], "PlateTButtJoint.create": [[284, "platetbuttjoint-create"]], "PlateTButtJoint.element_count_complies": [[285, "platetbuttjoint-element-count-complies"]], "PlateTButtJoint.flip_roles": [[286, "platetbuttjoint-flip-roles"]], "PlateTButtJoint.from_json": [[287, "platetbuttjoint-from-json"]], "PlateTButtJoint.from_jsonstring": [[288, "platetbuttjoint-from-jsonstring"]], "PlateTButtJoint.get_interface_for_plate": [[289, "platetbuttjoint-get-interface-for-plate"]], "PlateTButtJoint.promote_cluster": [[290, "platetbuttjoint-promote-cluster"]], "PlateTButtJoint.promote_joint_candidate": [[291, "platetbuttjoint-promote-joint-candidate"]], "PlateTButtJoint.reorder_planes_and_outlines": [[292, "platetbuttjoint-reorder-planes-and-outlines"]], "PlateTButtJoint.restore_beams_from_keys": [[293, "platetbuttjoint-restore-beams-from-keys"]], "PlateTButtJoint.restore_plates_from_keys": [[294, "platetbuttjoint-restore-plates-from-keys"]], "PlateTButtJoint.sha256": [[295, "platetbuttjoint-sha256"]], "PlateTButtJoint.to_json": [[296, "platetbuttjoint-to-json"]], "PlateTButtJoint.to_jsonstring": [[297, "platetbuttjoint-to-jsonstring"]], "PlateTButtJoint.validate_data": [[298, "platetbuttjoint-validate-data"]], "PlateToPlateInterface": [[299, "platetoplateinterface"]], "PlateToPlateInterface.as_plane": [[300, "platetoplateinterface-as-plane"]], "QuadAnalyzer": [[301, "quadanalyzer"]], "TBirdsmouthJoint": [[302, "tbirdsmouthjoint"]], "TBirdsmouthJoint.ToString": [[303, "tbirdsmouthjoint-tostring"]], "TBirdsmouthJoint.add_extensions": [[304, "tbirdsmouthjoint-add-extensions"]], "TBirdsmouthJoint.add_features": [[305, "tbirdsmouthjoint-add-features"]], "TBirdsmouthJoint.check_elements_compatibility": [[306, "tbirdsmouthjoint-check-elements-compatibility"]], "TBirdsmouthJoint.copy": [[307, "tbirdsmouthjoint-copy"]], "TBirdsmouthJoint.create": [[308, "tbirdsmouthjoint-create"]], "TBirdsmouthJoint.element_count_complies": [[309, "tbirdsmouthjoint-element-count-complies"]], "TBirdsmouthJoint.from_json": [[310, "tbirdsmouthjoint-from-json"]], "TBirdsmouthJoint.from_jsonstring": [[311, "tbirdsmouthjoint-from-jsonstring"]], "TBirdsmouthJoint.promote_cluster": [[312, "tbirdsmouthjoint-promote-cluster"]], "TBirdsmouthJoint.promote_joint_candidate": [[313, "tbirdsmouthjoint-promote-joint-candidate"]], "TBirdsmouthJoint.restore_beams_from_keys": [[314, "tbirdsmouthjoint-restore-beams-from-keys"]], "TBirdsmouthJoint.sha256": [[315, "tbirdsmouthjoint-sha256"]], "TBirdsmouthJoint.to_json": [[316, "tbirdsmouthjoint-to-json"]], "TBirdsmouthJoint.to_jsonstring": [[317, "tbirdsmouthjoint-to-jsonstring"]], "TBirdsmouthJoint.validate_data": [[318, "tbirdsmouthjoint-validate-data"]], "TButtJoint": [[319, "tbuttjoint"]], "TButtJoint.ToString": [[320, "tbuttjoint-tostring"]], "TButtJoint.add_extensions": [[321, "tbuttjoint-add-extensions"]], "TButtJoint.add_features": [[322, "tbuttjoint-add-features"]], "TButtJoint.check_elements_compatibility": [[323, "tbuttjoint-check-elements-compatibility"]], "TButtJoint.copy": [[324, "tbuttjoint-copy"]], "TButtJoint.create": [[325, "tbuttjoint-create"]], "TButtJoint.element_count_complies": [[326, "tbuttjoint-element-count-complies"]], "TButtJoint.from_json": [[327, "tbuttjoint-from-json"]], "TButtJoint.from_jsonstring": [[328, "tbuttjoint-from-jsonstring"]], "TButtJoint.promote_cluster": [[329, "tbuttjoint-promote-cluster"]], "TButtJoint.promote_joint_candidate": [[330, "tbuttjoint-promote-joint-candidate"]], "TButtJoint.restore_beams_from_keys": [[331, "tbuttjoint-restore-beams-from-keys"]], "TButtJoint.sha256": [[332, "tbuttjoint-sha256"]], "TButtJoint.to_json": [[333, "tbuttjoint-to-json"]], "TButtJoint.to_jsonstring": [[334, "tbuttjoint-to-jsonstring"]], "TButtJoint.validate_data": [[335, "tbuttjoint-validate-data"]], "TDovetailJoint": [[336, "tdovetailjoint"]], "TDovetailJoint.ToString": [[337, "tdovetailjoint-tostring"]], "TDovetailJoint.add_extensions": [[338, "tdovetailjoint-add-extensions"]], "TDovetailJoint.add_features": [[339, "tdovetailjoint-add-features"]], "TDovetailJoint.check_elements_compatibility": [[340, "tdovetailjoint-check-elements-compatibility"]], "TDovetailJoint.copy": [[341, "tdovetailjoint-copy"]], "TDovetailJoint.create": [[342, "tdovetailjoint-create"]], "TDovetailJoint.define_dovetail_tool": [[343, "tdovetailjoint-define-dovetail-tool"]], "TDovetailJoint.element_count_complies": [[344, "tdovetailjoint-element-count-complies"]], "TDovetailJoint.from_json": [[345, "tdovetailjoint-from-json"]], "TDovetailJoint.from_jsonstring": [[346, "tdovetailjoint-from-jsonstring"]], "TDovetailJoint.promote_cluster": [[347, "tdovetailjoint-promote-cluster"]], "TDovetailJoint.promote_joint_candidate": [[348, "tdovetailjoint-promote-joint-candidate"]], "TDovetailJoint.restore_beams_from_keys": [[349, "tdovetailjoint-restore-beams-from-keys"]], "TDovetailJoint.sha256": [[350, "tdovetailjoint-sha256"]], "TDovetailJoint.to_json": [[351, "tdovetailjoint-to-json"]], "TDovetailJoint.to_jsonstring": [[352, "tdovetailjoint-to-jsonstring"]], "TDovetailJoint.validate_data": [[353, "tdovetailjoint-validate-data"]], "TLapJoint": [[354, "tlapjoint"]], "TLapJoint.ToString": [[355, "tlapjoint-tostring"]], "TLapJoint.add_extensions": [[356, "tlapjoint-add-extensions"]], "TLapJoint.add_features": [[357, "tlapjoint-add-features"]], "TLapJoint.check_elements_compatibility": [[358, "tlapjoint-check-elements-compatibility"]], "TLapJoint.copy": [[359, "tlapjoint-copy"]], "TLapJoint.create": [[360, "tlapjoint-create"]], "TLapJoint.element_count_complies": [[361, "tlapjoint-element-count-complies"]], "TLapJoint.from_json": [[362, "tlapjoint-from-json"]], "TLapJoint.from_jsonstring": [[363, "tlapjoint-from-jsonstring"]], "TLapJoint.promote_cluster": [[364, "tlapjoint-promote-cluster"]], "TLapJoint.promote_joint_candidate": [[365, "tlapjoint-promote-joint-candidate"]], "TLapJoint.restore_beams_from_keys": [[366, "tlapjoint-restore-beams-from-keys"]], "TLapJoint.sha256": [[367, "tlapjoint-sha256"]], "TLapJoint.to_json": [[368, "tlapjoint-to-json"]], "TLapJoint.to_jsonstring": [[369, "tlapjoint-to-jsonstring"]], "TLapJoint.validate_data": [[370, "tlapjoint-validate-data"]], "TOliGinaJoint": [[371, "toliginajoint"]], "TOliGinaJoint.ToString": [[372, "toliginajoint-tostring"]], "TOliGinaJoint.add_extensions": [[373, "toliginajoint-add-extensions"]], "TOliGinaJoint.add_features": [[374, "toliginajoint-add-features"]], "TOliGinaJoint.check_elements_compatibility": [[375, "toliginajoint-check-elements-compatibility"]], "TOliGinaJoint.copy": [[376, "toliginajoint-copy"]], "TOliGinaJoint.create": [[377, "toliginajoint-create"]], "TOliGinaJoint.element_count_complies": [[378, "toliginajoint-element-count-complies"]], "TOliGinaJoint.from_json": [[379, "toliginajoint-from-json"]], "TOliGinaJoint.from_jsonstring": [[380, "toliginajoint-from-jsonstring"]], "TOliGinaJoint.promote_cluster": [[381, "toliginajoint-promote-cluster"]], "TOliGinaJoint.promote_joint_candidate": [[382, "toliginajoint-promote-joint-candidate"]], "TOliGinaJoint.restore_beams_from_keys": [[383, "toliginajoint-restore-beams-from-keys"]], "TOliGinaJoint.sha256": [[384, "toliginajoint-sha256"]], "TOliGinaJoint.to_json": [[385, "toliginajoint-to-json"]], "TOliGinaJoint.to_jsonstring": [[386, "toliginajoint-to-jsonstring"]], "TOliGinaJoint.validate_data": [[387, "toliginajoint-validate-data"]], "TStepJoint": [[388, "tstepjoint"]], "TStepJoint.ToString": [[389, "tstepjoint-tostring"]], "TStepJoint.add_extensions": [[390, "tstepjoint-add-extensions"]], "TStepJoint.add_features": [[391, "tstepjoint-add-features"]], "TStepJoint.check_elements_compatibility": [[392, "tstepjoint-check-elements-compatibility"]], "TStepJoint.copy": [[393, "tstepjoint-copy"]], "TStepJoint.create": [[394, "tstepjoint-create"]], "TStepJoint.element_count_complies": [[395, "tstepjoint-element-count-complies"]], "TStepJoint.from_json": [[396, "tstepjoint-from-json"]], "TStepJoint.from_jsonstring": [[397, "tstepjoint-from-jsonstring"]], "TStepJoint.promote_cluster": [[398, "tstepjoint-promote-cluster"]], "TStepJoint.promote_joint_candidate": [[399, "tstepjoint-promote-joint-candidate"]], "TStepJoint.restore_beams_from_keys": [[400, "tstepjoint-restore-beams-from-keys"]], "TStepJoint.set_step_depths": [[401, "tstepjoint-set-step-depths"]], "TStepJoint.sha256": [[402, "tstepjoint-sha256"]], "TStepJoint.to_json": [[403, "tstepjoint-to-json"]], "TStepJoint.to_jsonstring": [[404, "tstepjoint-to-jsonstring"]], "TStepJoint.validate_data": [[405, "tstepjoint-validate-data"]], "TenonMortiseJoint": [[406, "tenonmortisejoint"]], "TenonMortiseJoint.ToString": [[407, "tenonmortisejoint-tostring"]], "TenonMortiseJoint.add_extensions": [[408, "tenonmortisejoint-add-extensions"]], "TenonMortiseJoint.add_features": [[409, "tenonmortisejoint-add-features"]], "TenonMortiseJoint.check_elements_compatibility": [[410, "tenonmortisejoint-check-elements-compatibility"]], "TenonMortiseJoint.copy": [[411, "tenonmortisejoint-copy"]], "TenonMortiseJoint.create": [[412, "tenonmortisejoint-create"]], "TenonMortiseJoint.element_count_complies": [[413, "tenonmortisejoint-element-count-complies"]], "TenonMortiseJoint.from_json": [[414, "tenonmortisejoint-from-json"]], "TenonMortiseJoint.from_jsonstring": [[415, "tenonmortisejoint-from-jsonstring"]], "TenonMortiseJoint.promote_cluster": [[416, "tenonmortisejoint-promote-cluster"]], "TenonMortiseJoint.promote_joint_candidate": [[417, "tenonmortisejoint-promote-joint-candidate"]], "TenonMortiseJoint.restore_beams_from_keys": [[418, "tenonmortisejoint-restore-beams-from-keys"]], "TenonMortiseJoint.sha256": [[419, "tenonmortisejoint-sha256"]], "TenonMortiseJoint.to_json": [[420, "tenonmortisejoint-to-json"]], "TenonMortiseJoint.to_jsonstring": [[421, "tenonmortisejoint-to-jsonstring"]], "TenonMortiseJoint.validate_data": [[422, "tenonmortisejoint-validate-data"]], "TripletAnalyzer": [[423, "tripletanalyzer"]], "WallJoint": [[424, "walljoint"]], "WallJoint.ToString": [[425, "walljoint-tostring"]], "WallJoint.add_extensions": [[426, "walljoint-add-extensions"]], "WallJoint.add_features": [[427, "walljoint-add-features"]], "WallJoint.check_elements_compatibility": [[428, "walljoint-check-elements-compatibility"]], "WallJoint.copy": [[429, "walljoint-copy"]], "WallJoint.create": [[430, "walljoint-create"]], "WallJoint.element_count_complies": [[431, "walljoint-element-count-complies"]], "WallJoint.flip_roles": [[432, "walljoint-flip-roles"]], "WallJoint.from_json": [[433, "walljoint-from-json"]], "WallJoint.from_jsonstring": [[434, "walljoint-from-jsonstring"]], "WallJoint.get_interface_for_wall": [[435, "walljoint-get-interface-for-wall"]], "WallJoint.promote_cluster": [[436, "walljoint-promote-cluster"]], "WallJoint.promote_joint_candidate": [[437, "walljoint-promote-joint-candidate"]], "WallJoint.restore_beams_from_keys": [[438, "walljoint-restore-beams-from-keys"]], "WallJoint.restore_walls_from_keys": [[439, "walljoint-restore-walls-from-keys"]], "WallJoint.sha256": [[440, "walljoint-sha256"]], "WallJoint.to_json": [[441, "walljoint-to-json"]], "WallJoint.to_jsonstring": [[442, "walljoint-to-jsonstring"]], "WallJoint.validate_data": [[443, "walljoint-validate-data"]], "XLapJoint": [[444, "xlapjoint"]], "XLapJoint.ToString": [[445, "xlapjoint-tostring"]], "XLapJoint.add_extensions": [[446, "xlapjoint-add-extensions"]], "XLapJoint.add_features": [[447, "xlapjoint-add-features"]], "XLapJoint.check_elements_compatibility": [[448, "xlapjoint-check-elements-compatibility"]], "XLapJoint.copy": [[449, "xlapjoint-copy"]], "XLapJoint.create": [[450, "xlapjoint-create"]], "XLapJoint.element_count_complies": [[451, "xlapjoint-element-count-complies"]], "XLapJoint.from_json": [[452, "xlapjoint-from-json"]], "XLapJoint.from_jsonstring": [[453, "xlapjoint-from-jsonstring"]], "XLapJoint.promote_cluster": [[454, "xlapjoint-promote-cluster"]], "XLapJoint.promote_joint_candidate": [[455, "xlapjoint-promote-joint-candidate"]], "XLapJoint.restore_beams_from_keys": [[456, "xlapjoint-restore-beams-from-keys"]], "XLapJoint.sha256": [[457, "xlapjoint-sha256"]], "XLapJoint.to_json": [[458, "xlapjoint-to-json"]], "XLapJoint.to_jsonstring": [[459, "xlapjoint-to-jsonstring"]], "XLapJoint.validate_data": [[460, "xlapjoint-validate-data"]], "XNotchJoint": [[461, "xnotchjoint"]], "XNotchJoint.ToString": [[462, "xnotchjoint-tostring"]], "XNotchJoint.add_extensions": [[463, "xnotchjoint-add-extensions"]], "XNotchJoint.add_features": [[464, "xnotchjoint-add-features"]], "XNotchJoint.check_elements_compatibility": [[465, "xnotchjoint-check-elements-compatibility"]], "XNotchJoint.copy": [[466, "xnotchjoint-copy"]], "XNotchJoint.create": [[467, "xnotchjoint-create"]], "XNotchJoint.element_count_complies": [[468, "xnotchjoint-element-count-complies"]], "XNotchJoint.from_json": [[469, "xnotchjoint-from-json"]], "XNotchJoint.from_jsonstring": [[470, "xnotchjoint-from-jsonstring"]], "XNotchJoint.promote_cluster": [[471, "xnotchjoint-promote-cluster"]], "XNotchJoint.promote_joint_candidate": [[472, "xnotchjoint-promote-joint-candidate"]], "XNotchJoint.restore_beams_from_keys": [[473, "xnotchjoint-restore-beams-from-keys"]], "XNotchJoint.sha256": [[474, "xnotchjoint-sha256"]], "XNotchJoint.to_json": [[475, "xnotchjoint-to-json"]], "XNotchJoint.to_jsonstring": [[476, "xnotchjoint-to-jsonstring"]], "XNotchJoint.validate_data": [[477, "xnotchjoint-validate-data"]], "YButtJoint": [[478, "ybuttjoint"]], "YButtJoint.ToString": [[479, "ybuttjoint-tostring"]], "YButtJoint.add_extensions": [[480, "ybuttjoint-add-extensions"]], "YButtJoint.add_features": [[481, "ybuttjoint-add-features"]], "YButtJoint.check_elements_compatibility": [[482, "ybuttjoint-check-elements-compatibility"]], "YButtJoint.copy": [[483, "ybuttjoint-copy"]], "YButtJoint.create": [[484, "ybuttjoint-create"]], "YButtJoint.cross_beam_ref_side_index": [[485, "ybuttjoint-cross-beam-ref-side-index"]], "YButtJoint.element_count_complies": [[486, "ybuttjoint-element-count-complies"]], "YButtJoint.from_json": [[487, "ybuttjoint-from-json"]], "YButtJoint.from_jsonstring": [[488, "ybuttjoint-from-jsonstring"]], "YButtJoint.get_miter_planes": [[489, "ybuttjoint-get-miter-planes"]], "YButtJoint.main_beam_ref_side_index": [[490, "ybuttjoint-main-beam-ref-side-index"]], "YButtJoint.promote_cluster": [[491, "ybuttjoint-promote-cluster"]], "YButtJoint.promote_joint_candidate": [[492, "ybuttjoint-promote-joint-candidate"]], "YButtJoint.restore_beams_from_keys": [[493, "ybuttjoint-restore-beams-from-keys"]], "YButtJoint.sha256": [[494, "ybuttjoint-sha256"]], "YButtJoint.to_json": [[495, "ybuttjoint-to-json"]], "YButtJoint.to_jsonstring": [[496, "ybuttjoint-to-jsonstring"]], "YButtJoint.validate_data": [[497, "ybuttjoint-validate-data"]], "beam_ref_side_incidence": [[498, "beam-ref-side-incidence"]], "beam_ref_side_incidence_with_vector": [[499, "beam-ref-side-incidence-with-vector"]], "find_neighboring_elements": [[500, "find-neighboring-elements"], [1237, "find-neighboring-elements"]], "point_centerline_towards_joint": [[501, "point-centerline-towards-joint"]], "CategoryRule": [[502, "categoryrule"]], "CategoryRule.ToString": [[503, "categoryrule-tostring"]], "CategoryRule.comply": [[504, "categoryrule-comply"]], "CategoryRule.get_category_rules": [[505, "categoryrule-get-category-rules"]], "CategoryRule.get_direct_rules": [[506, "categoryrule-get-direct-rules"]], "CategoryRule.get_topology_rules": [[507, "categoryrule-get-topology-rules"]], "CategoryRule.joints_from_beams_and_rules": [[508, "categoryrule-joints-from-beams-and-rules"]], "CategoryRule.reorder": [[509, "categoryrule-reorder"]], "DebugInfomation": [[510, "debuginfomation"]], "DebugInfomation.ToString": [[511, "debuginfomation-tostring"]], "DebugInfomation.add_fastener_error": [[512, "debuginfomation-add-fastener-error"]], "DebugInfomation.add_feature_error": [[513, "debuginfomation-add-feature-error"]], "DebugInfomation.add_joint_error": [[514, "debuginfomation-add-joint-error"]], "DirectRule": [[515, "directrule"]], "DirectRule.ToString": [[516, "directrule-tostring"]], "DirectRule.comply": [[517, "directrule-comply"]], "DirectRule.contains": [[518, "directrule-contains"]], "DirectRule.get_category_rules": [[519, "directrule-get-category-rules"]], "DirectRule.get_direct_rules": [[520, "directrule-get-direct-rules"]], "DirectRule.get_topology_rules": [[521, "directrule-get-topology-rules"]], "DirectRule.joints_from_beams_and_rules": [[522, "directrule-joints-from-beams-and-rules"]], "FeatureDefinition": [[523, "featuredefinition"]], "FeatureDefinition.ToString": [[524, "featuredefinition-tostring"]], "JointDefinition": [[525, "jointdefinition"]], "JointDefinition.ToString": [[526, "jointdefinition-tostring"]], "JointDefinition.is_identical": [[527, "jointdefinition-is-identical"]], "JointDefinition.match": [[528, "jointdefinition-match"]], "JointRule": [[529, "jointrule"]], "JointRule.comply": [[530, "jointrule-comply"]], "JointRule.get_category_rules": [[531, "jointrule-get-category-rules"]], "JointRule.get_direct_rules": [[532, "jointrule-get-direct-rules"]], "JointRule.get_topology_rules": [[533, "jointrule-get-topology-rules"]], "JointRule.joints_from_beams_and_rules": [[534, "jointrule-joints-from-beams-and-rules"]], "SurfaceModel": [[535, "surfacemodel"]], "SurfaceModel.beam_category_names": [[536, "surfacemodel-beam-category-names"]], "SurfaceModel.create_model": [[537, "surfacemodel-create-model"]], "SurfaceModel.cull_overlaps": [[538, "surfacemodel-cull-overlaps"]], "SurfaceModel.distance_between_elements": [[539, "surfacemodel-distance-between-elements"]], "SurfaceModel.generate_frame": [[540, "surfacemodel-generate-frame"]], "SurfaceModel.generate_perimeter_beams": [[541, "surfacemodel-generate-perimeter-beams"]], "SurfaceModel.generate_plates": [[542, "surfacemodel-generate-plates"]], "SurfaceModel.generate_stud_lines": [[543, "surfacemodel-generate-stud-lines"]], "SurfaceModel.generate_studs": [[544, "surfacemodel-generate-studs"]], "SurfaceModel.generate_windows": [[545, "surfacemodel-generate-windows"]], "SurfaceModel.get_beam_intersections": [[546, "surfacemodel-get-beam-intersections"]], "SurfaceModel.get_interior_segment_indices": [[547, "surfacemodel-get-interior-segment-indices"]], "SurfaceModel.offset_elements": [[548, "surfacemodel-offset-elements"]], "SurfaceModel.parse_loops": [[549, "surfacemodel-parse-loops"]], "SurfaceModel.trim_jack_studs": [[550, "surfacemodel-trim-jack-studs"]], "SurfaceModel.trim_king_studs": [[551, "surfacemodel-trim-king-studs"]], "SurfaceModel.trim_studs": [[552, "surfacemodel-trim-studs"]], "TopologyRule": [[553, "topologyrule"]], "TopologyRule.ToString": [[554, "topologyrule-tostring"]], "TopologyRule.comply": [[555, "topologyrule-comply"]], "TopologyRule.get_category_rules": [[556, "topologyrule-get-category-rules"]], "TopologyRule.get_direct_rules": [[557, "topologyrule-get-direct-rules"]], "TopologyRule.get_topology_rules": [[558, "topologyrule-get-topology-rules"]], "TopologyRule.joints_from_beams_and_rules": [[559, "topologyrule-joints-from-beams-and-rules"]], "guess_joint_topology_2beams": [[560, "guess-joint-topology-2beams"]], "set_default_joints": [[561, "set-default-joints"]], "BallNodeFastener": [[562, "ballnodefastener"]], "BallNodeFastener.ToString": [[563, "ballnodefastener-tostring"]], "BallNodeFastener.add_feature": [[564, "ballnodefastener-add-feature"]], "BallNodeFastener.add_features": [[565, "ballnodefastener-add-features"]], "BallNodeFastener.compute_aabb": [[566, "ballnodefastener-compute-aabb"]], "BallNodeFastener.compute_collision_mesh": [[567, "ballnodefastener-compute-collision-mesh"]], "BallNodeFastener.compute_geometry": [[568, "ballnodefastener-compute-geometry"]], "BallNodeFastener.compute_obb": [[569, "ballnodefastener-compute-obb"]], "BallNodeFastener.compute_worldtransformation": [[570, "ballnodefastener-compute-worldtransformation"]], "BallNodeFastener.copy": [[571, "ballnodefastener-copy"]], "BallNodeFastener.from_json": [[572, "ballnodefastener-from-json"]], "BallNodeFastener.from_jsonstring": [[573, "ballnodefastener-from-jsonstring"]], "BallNodeFastener.remove_blank_extension": [[574, "ballnodefastener-remove-blank-extension"]], "BallNodeFastener.remove_features": [[575, "ballnodefastener-remove-features"]], "BallNodeFastener.reset": [[576, "ballnodefastener-reset"]], "BallNodeFastener.sha256": [[577, "ballnodefastener-sha256"]], "BallNodeFastener.to_json": [[578, "ballnodefastener-to-json"]], "BallNodeFastener.to_jsonstring": [[579, "ballnodefastener-to-jsonstring"]], "BallNodeFastener.transform": [[580, "ballnodefastener-transform"]], "BallNodeFastener.transformed": [[581, "ballnodefastener-transformed"]], "BallNodeFastener.update_interface": [[582, "ballnodefastener-update-interface"]], "BallNodeFastener.validate_data": [[583, "ballnodefastener-validate-data"]], "Beam": [[584, "beam"]], "Beam.ToString": [[585, "beam-tostring"]], "Beam.add_blank_extension": [[586, "beam-add-blank-extension"]], "Beam.add_feature": [[587, "beam-add-feature"]], "Beam.add_features": [[588, "beam-add-features"]], "Beam.back_side": [[589, "beam-back-side"]], "Beam.compute_aabb": [[590, "beam-compute-aabb"]], "Beam.compute_collision_mesh": [[591, "beam-compute-collision-mesh"]], "Beam.compute_geometry": [[592, "beam-compute-geometry"]], "Beam.compute_obb": [[593, "beam-compute-obb"]], "Beam.compute_worldtransformation": [[594, "beam-compute-worldtransformation"]], "Beam.copy": [[595, "beam-copy"]], "Beam.endpoint_closest_to_point": [[596, "beam-endpoint-closest-to-point"]], "Beam.extension_to_plane": [[597, "beam-extension-to-plane"]], "Beam.from_centerline": [[598, "beam-from-centerline"]], "Beam.from_endpoints": [[599, "beam-from-endpoints"]], "Beam.from_json": [[600, "beam-from-json"]], "Beam.from_jsonstring": [[601, "beam-from-jsonstring"]], "Beam.front_side": [[602, "beam-front-side"]], "Beam.get_dimensions_relative_to_side": [[603, "beam-get-dimensions-relative-to-side"]], "Beam.opp_side": [[604, "beam-opp-side"]], "Beam.remove_blank_extension": [[605, "beam-remove-blank-extension"]], "Beam.remove_features": [[606, "beam-remove-features"]], "Beam.reset": [[607, "beam-reset"]], "Beam.sha256": [[608, "beam-sha256"]], "Beam.side_as_surface": [[609, "beam-side-as-surface"]], "Beam.to_json": [[610, "beam-to-json"]], "Beam.to_jsonstring": [[611, "beam-to-jsonstring"]], "Beam.transform": [[612, "beam-transform"]], "Beam.transformed": [[613, "beam-transformed"]], "Beam.validate_data": [[614, "beam-validate-data"]], "Fastener": [[615, "fastener"]], "Fastener.ToString": [[616, "fastener-tostring"]], "Fastener.add_feature": [[617, "fastener-add-feature"]], "Fastener.add_features": [[618, "fastener-add-features"]], "Fastener.compute_aabb": [[619, "fastener-compute-aabb"]], "Fastener.compute_collision_mesh": [[620, "fastener-compute-collision-mesh"]], "Fastener.compute_geometry": [[621, "fastener-compute-geometry"]], "Fastener.compute_obb": [[622, "fastener-compute-obb"]], "Fastener.compute_worldtransformation": [[623, "fastener-compute-worldtransformation"]], "Fastener.copy": [[624, "fastener-copy"]], "Fastener.from_json": [[625, "fastener-from-json"]], "Fastener.from_jsonstring": [[626, "fastener-from-jsonstring"]], "Fastener.remove_blank_extension": [[627, "fastener-remove-blank-extension"]], "Fastener.remove_features": [[628, "fastener-remove-features"]], "Fastener.reset": [[629, "fastener-reset"]], "Fastener.sha256": [[630, "fastener-sha256"]], "Fastener.to_json": [[631, "fastener-to-json"]], "Fastener.to_jsonstring": [[632, "fastener-to-jsonstring"]], "Fastener.transform": [[633, "fastener-transform"]], "Fastener.transformed": [[634, "fastener-transformed"]], "Fastener.validate_data": [[635, "fastener-validate-data"]], "FastenerTimberInterface": [[636, "fastenertimberinterface"]], "FastenerTimberInterface.ToString": [[637, "fastenertimberinterface-tostring"]], "FastenerTimberInterface.copy": [[638, "fastenertimberinterface-copy"]], "FastenerTimberInterface.from_json": [[639, "fastenertimberinterface-from-json"]], "FastenerTimberInterface.from_jsonstring": [[640, "fastenertimberinterface-from-jsonstring"]], "FastenerTimberInterface.get_features": [[641, "fastenertimberinterface-get-features"]], "FastenerTimberInterface.sha256": [[642, "fastenertimberinterface-sha256"]], "FastenerTimberInterface.to_json": [[643, "fastenertimberinterface-to-json"]], "FastenerTimberInterface.to_jsonstring": [[644, "fastenertimberinterface-to-jsonstring"]], "FastenerTimberInterface.validate_data": [[645, "fastenertimberinterface-validate-data"]], "Opening": [[646, "opening"]], "Opening.ToString": [[647, "opening-tostring"]], "Opening.copy": [[648, "opening-copy"]], "Opening.from_json": [[649, "opening-from-json"]], "Opening.from_jsonstring": [[650, "opening-from-jsonstring"]], "Opening.orient_polyline": [[651, "opening-orient-polyline"]], "Opening.sha256": [[652, "opening-sha256"]], "Opening.to_json": [[653, "opening-to-json"]], "Opening.to_jsonstring": [[654, "opening-to-jsonstring"]], "Opening.validate_data": [[655, "opening-validate-data"]], "OpeningType": [[656, "openingtype"]], "Plate": [[657, "plate"]], "Plate.ToString": [[658, "plate-tostring"]], "Plate.add_feature": [[659, "plate-add-feature"]], "Plate.add_features": [[660, "plate-add-features"]], "Plate.add_interface": [[661, "plate-add-interface"]], "Plate.check_outlines": [[662, "plate-check-outlines"]], "Plate.compute_aabb": [[663, "plate-compute-aabb"]], "Plate.compute_collision_mesh": [[664, "plate-compute-collision-mesh"]], "Plate.compute_geometry": [[665, "plate-compute-geometry"]], "Plate.compute_obb": [[666, "plate-compute-obb"]], "Plate.compute_worldtransformation": [[667, "plate-compute-worldtransformation"]], "Plate.copy": [[668, "plate-copy"]], "Plate.from_brep": [[669, "plate-from-brep"]], "Plate.from_json": [[670, "plate-from-json"]], "Plate.from_jsonstring": [[671, "plate-from-jsonstring"]], "Plate.from_outline_thickness": [[672, "plate-from-outline-thickness"]], "Plate.opp_side": [[673, "plate-opp-side"]], "Plate.remove_blank_extension": [[674, "plate-remove-blank-extension"]], "Plate.remove_features": [[675, "plate-remove-features"]], "Plate.reset": [[676, "plate-reset"]], "Plate.sha256": [[677, "plate-sha256"]], "Plate.side_as_surface": [[678, "plate-side-as-surface"]], "Plate.to_json": [[679, "plate-to-json"]], "Plate.to_jsonstring": [[680, "plate-to-jsonstring"]], "Plate.transform": [[681, "plate-transform"]], "Plate.transformed": [[682, "plate-transformed"]], "Plate.validate_data": [[683, "plate-validate-data"]], "PlateFastener": [[684, "platefastener"]], "PlateFastener.ToString": [[685, "platefastener-tostring"]], "PlateFastener.add_feature": [[686, "platefastener-add-feature"]], "PlateFastener.add_features": [[687, "platefastener-add-features"]], "PlateFastener.compute_aabb": [[688, "platefastener-compute-aabb"]], "PlateFastener.compute_collision_mesh": [[689, "platefastener-compute-collision-mesh"]], "PlateFastener.compute_geometry": [[690, "platefastener-compute-geometry"]], "PlateFastener.compute_obb": [[691, "platefastener-compute-obb"]], "PlateFastener.compute_worldtransformation": [[692, "platefastener-compute-worldtransformation"]], "PlateFastener.copy": [[693, "platefastener-copy"]], "PlateFastener.from_json": [[694, "platefastener-from-json"]], "PlateFastener.from_jsonstring": [[695, "platefastener-from-jsonstring"]], "PlateFastener.get_fastener_frames": [[696, "platefastener-get-fastener-frames"]], "PlateFastener.place_instances": [[697, "platefastener-place-instances"]], "PlateFastener.remove_blank_extension": [[698, "platefastener-remove-blank-extension"]], "PlateFastener.remove_features": [[699, "platefastener-remove-features"]], "PlateFastener.reset": [[700, "platefastener-reset"]], "PlateFastener.set_default": [[701, "platefastener-set-default"]], "PlateFastener.sha256": [[702, "platefastener-sha256"]], "PlateFastener.to_json": [[703, "platefastener-to-json"]], "PlateFastener.to_jsonstring": [[704, "platefastener-to-jsonstring"]], "PlateFastener.transform": [[705, "platefastener-transform"]], "PlateFastener.transformed": [[706, "platefastener-transformed"]], "PlateFastener.validate_data": [[707, "platefastener-validate-data"]], "PlateFastener.validate_fastener_beam_compatibility": [[708, "platefastener-validate-fastener-beam-compatibility"]], "Slab": [[709, "slab"]], "Slab.ToString": [[710, "slab-tostring"]], "Slab.add_feature": [[711, "slab-add-feature"]], "Slab.add_features": [[712, "slab-add-features"]], "Slab.compute_aabb": [[713, "slab-compute-aabb"]], "Slab.compute_collision_mesh": [[714, "slab-compute-collision-mesh"]], "Slab.compute_geometry": [[715, "slab-compute-geometry"]], "Slab.compute_obb": [[716, "slab-compute-obb"]], "Slab.compute_worldtransformation": [[717, "slab-compute-worldtransformation"]], "Slab.copy": [[718, "slab-copy"]], "Slab.from_boundary": [[719, "slab-from-boundary"]], "Slab.from_brep": [[720, "slab-from-brep"]], "Slab.from_json": [[721, "slab-from-json"]], "Slab.from_jsonstring": [[722, "slab-from-jsonstring"]], "Slab.remove_blank_extension": [[723, "slab-remove-blank-extension"]], "Slab.remove_features": [[724, "slab-remove-features"]], "Slab.reset": [[725, "slab-reset"]], "Slab.rotate": [[726, "slab-rotate"]], "Slab.sha256": [[727, "slab-sha256"]], "Slab.to_json": [[728, "slab-to-json"]], "Slab.to_jsonstring": [[729, "slab-to-jsonstring"]], "Slab.transform": [[730, "slab-transform"]], "Slab.transformed": [[731, "slab-transformed"]], "Slab.validate_data": [[732, "slab-validate-data"]], "TimberElement": [[733, "timberelement"]], "TimberElement.ToString": [[734, "timberelement-tostring"]], "TimberElement.add_feature": [[735, "timberelement-add-feature"]], "TimberElement.add_features": [[736, "timberelement-add-features"]], "TimberElement.compute_aabb": [[737, "timberelement-compute-aabb"]], "TimberElement.compute_collision_mesh": [[738, "timberelement-compute-collision-mesh"]], "TimberElement.compute_geometry": [[739, "timberelement-compute-geometry"]], "TimberElement.compute_obb": [[740, "timberelement-compute-obb"]], "TimberElement.compute_worldtransformation": [[741, "timberelement-compute-worldtransformation"]], "TimberElement.copy": [[742, "timberelement-copy"]], "TimberElement.from_json": [[743, "timberelement-from-json"]], "TimberElement.from_jsonstring": [[744, "timberelement-from-jsonstring"]], "TimberElement.remove_blank_extension": [[745, "timberelement-remove-blank-extension"]], "TimberElement.remove_features": [[746, "timberelement-remove-features"]], "TimberElement.reset": [[747, "timberelement-reset"]], "TimberElement.sha256": [[748, "timberelement-sha256"]], "TimberElement.to_json": [[749, "timberelement-to-json"]], "TimberElement.to_jsonstring": [[750, "timberelement-to-jsonstring"]], "TimberElement.transform": [[751, "timberelement-transform"]], "TimberElement.transformed": [[752, "timberelement-transformed"]], "TimberElement.validate_data": [[753, "timberelement-validate-data"]], "Wall": [[754, "wall"]], "Wall.ToString": [[755, "wall-tostring"]], "Wall.add_feature": [[756, "wall-add-feature"]], "Wall.add_features": [[757, "wall-add-features"]], "Wall.compute_aabb": [[758, "wall-compute-aabb"]], "Wall.compute_collision_mesh": [[759, "wall-compute-collision-mesh"]], "Wall.compute_geometry": [[760, "wall-compute-geometry"]], "Wall.compute_obb": [[761, "wall-compute-obb"]], "Wall.compute_worldtransformation": [[762, "wall-compute-worldtransformation"]], "Wall.copy": [[763, "wall-copy"]], "Wall.from_boundary": [[764, "wall-from-boundary"]], "Wall.from_brep": [[765, "wall-from-brep"]], "Wall.from_json": [[766, "wall-from-json"]], "Wall.from_jsonstring": [[767, "wall-from-jsonstring"]], "Wall.remove_blank_extension": [[768, "wall-remove-blank-extension"]], "Wall.remove_features": [[769, "wall-remove-features"]], "Wall.reset": [[770, "wall-reset"]], "Wall.rotate": [[771, "wall-rotate"]], "Wall.sha256": [[772, "wall-sha256"]], "Wall.to_json": [[773, "wall-to-json"]], "Wall.to_jsonstring": [[774, "wall-to-jsonstring"]], "Wall.transform": [[775, "wall-transform"]], "Wall.transformed": [[776, "wall-transformed"]], "Wall.validate_data": [[777, "wall-validate-data"]], "BTLxProcessingError": [[778, "btlxprocessingerror"]], "BeamJoiningError": [[779, "beamjoiningerror"]], "FastenerApplicationError": [[780, "fastenerapplicationerror"]], "FeatureApplicationError": [[781, "featureapplicationerror"]], "AlignmentType": [[782, "alignmenttype"]], "BTLxFromGeometryDefinition": [[783, "btlxfromgeometrydefinition"]], "BTLxFromGeometryDefinition.ToString": [[784, "btlxfromgeometrydefinition-tostring"]], "BTLxFromGeometryDefinition.copy": [[785, "btlxfromgeometrydefinition-copy"]], "BTLxFromGeometryDefinition.feature_from_element": [[786, "btlxfromgeometrydefinition-feature-from-element"]], "BTLxFromGeometryDefinition.from_json": [[787, "btlxfromgeometrydefinition-from-json"]], "BTLxFromGeometryDefinition.from_jsonstring": [[788, "btlxfromgeometrydefinition-from-jsonstring"]], "BTLxFromGeometryDefinition.sha256": [[789, "btlxfromgeometrydefinition-sha256"]], "BTLxFromGeometryDefinition.to_json": [[790, "btlxfromgeometrydefinition-to-json"]], "BTLxFromGeometryDefinition.to_jsonstring": [[791, "btlxfromgeometrydefinition-to-jsonstring"]], "BTLxFromGeometryDefinition.transform": [[792, "btlxfromgeometrydefinition-transform"]], "BTLxFromGeometryDefinition.transformed": [[793, "btlxfromgeometrydefinition-transformed"]], "BTLxFromGeometryDefinition.validate_data": [[794, "btlxfromgeometrydefinition-validate-data"]], "BTLxPart": [[795, "btlxpart"]], "BTLxPart.et_point_vals": [[796, "btlxpart-et-point-vals"]], "BTLxPart.ref_side_from_face": [[797, "btlxpart-ref-side-from-face"]], "BTLxProcessing": [[798, "btlxprocessing"]], "BTLxProcessing.ToString": [[799, "btlxprocessing-tostring"]], "BTLxProcessing.add_subprocessing": [[800, "btlxprocessing-add-subprocessing"]], "BTLxProcessing.copy": [[801, "btlxprocessing-copy"]], "BTLxProcessing.from_json": [[802, "btlxprocessing-from-json"]], "BTLxProcessing.from_jsonstring": [[803, "btlxprocessing-from-jsonstring"]], "BTLxProcessing.scaled": [[804, "btlxprocessing-scaled"]], "BTLxProcessing.sha256": [[805, "btlxprocessing-sha256"]], "BTLxProcessing.to_json": [[806, "btlxprocessing-to-json"]], "BTLxProcessing.to_jsonstring": [[807, "btlxprocessing-to-jsonstring"]], "BTLxProcessing.validate_data": [[808, "btlxprocessing-validate-data"]], "BTLxWriter": [[809, "btlxwriter"]], "BTLxWriter.model_to_xml": [[810, "btlxwriter-model-to-xml"]], "BTLxWriter.register_type_serializer": [[811, "btlxwriter-register-type-serializer"]], "BTLxWriter.write": [[812, "btlxwriter-write"]], "Contour": [[813, "contour"]], "Contour.ToString": [[814, "contour-tostring"]], "Contour.copy": [[815, "contour-copy"]], "Contour.from_json": [[816, "contour-from-json"]], "Contour.from_jsonstring": [[817, "contour-from-jsonstring"]], "Contour.scale": [[818, "contour-scale"]], "Contour.scaled": [[819, "contour-scaled"]], "Contour.sha256": [[820, "contour-sha256"]], "Contour.to_json": [[821, "contour-to-json"]], "Contour.to_jsonstring": [[822, "contour-to-jsonstring"]], "Contour.validate_data": [[823, "contour-validate-data"]], "DoubleCut": [[824, "doublecut"]], "DoubleCut.ToString": [[825, "doublecut-tostring"]], "DoubleCut.add_subprocessing": [[826, "doublecut-add-subprocessing"]], "DoubleCut.apply": [[827, "doublecut-apply"]], "DoubleCut.copy": [[828, "doublecut-copy"]], "DoubleCut.from_json": [[829, "doublecut-from-json"]], "DoubleCut.from_jsonstring": [[830, "doublecut-from-jsonstring"]], "DoubleCut.from_planes_and_beam": [[831, "doublecut-from-planes-and-beam"]], "DoubleCut.from_shapes_and_element": [[832, "doublecut-from-shapes-and-element"]], "DoubleCut.planes_from_params_and_beam": [[833, "doublecut-planes-from-params-and-beam"]], "DoubleCut.scale": [[834, "doublecut-scale"]], "DoubleCut.scaled": [[835, "doublecut-scaled"]], "DoubleCut.sha256": [[836, "doublecut-sha256"]], "DoubleCut.to_json": [[837, "doublecut-to-json"]], "DoubleCut.to_jsonstring": [[838, "doublecut-to-jsonstring"]], "DoubleCut.validate_data": [[839, "doublecut-validate-data"]], "DovetailMortise": [[840, "dovetailmortise"]], "DovetailMortise.ToString": [[841, "dovetailmortise-tostring"]], "DovetailMortise.add_subprocessing": [[842, "dovetailmortise-add-subprocessing"]], "DovetailMortise.apply": [[843, "dovetailmortise-apply"]], "DovetailMortise.copy": [[844, "dovetailmortise-copy"]], "DovetailMortise.define_dovetail_tool": [[845, "dovetailmortise-define-dovetail-tool"]], "DovetailMortise.dovetail_cutting_frames_from_params_and_beam": [[846, "dovetailmortise-dovetail-cutting-frames-from-params-and-beam"]], "DovetailMortise.dovetail_volume_from_params_and_beam": [[847, "dovetailmortise-dovetail-volume-from-params-and-beam"]], "DovetailMortise.frame_from_params_and_beam": [[848, "dovetailmortise-frame-from-params-and-beam"]], "DovetailMortise.from_frame_and_beam": [[849, "dovetailmortise-from-frame-and-beam"]], "DovetailMortise.from_json": [[850, "dovetailmortise-from-json"]], "DovetailMortise.from_jsonstring": [[851, "dovetailmortise-from-jsonstring"]], "DovetailMortise.scale": [[852, "dovetailmortise-scale"]], "DovetailMortise.scaled": [[853, "dovetailmortise-scaled"]], "DovetailMortise.sha256": [[854, "dovetailmortise-sha256"]], "DovetailMortise.to_json": [[855, "dovetailmortise-to-json"]], "DovetailMortise.to_jsonstring": [[856, "dovetailmortise-to-jsonstring"]], "DovetailMortise.validate_data": [[857, "dovetailmortise-validate-data"]], "DovetailTenon": [[858, "dovetailtenon"]], "DovetailTenon.ToString": [[859, "dovetailtenon-tostring"]], "DovetailTenon.add_subprocessing": [[860, "dovetailtenon-add-subprocessing"]], "DovetailTenon.apply": [[861, "dovetailtenon-apply"]], "DovetailTenon.copy": [[862, "dovetailtenon-copy"]], "DovetailTenon.define_dovetail_tool": [[863, "dovetailtenon-define-dovetail-tool"]], "DovetailTenon.dovetail_cutting_frames_from_params_and_beam": [[864, "dovetailtenon-dovetail-cutting-frames-from-params-and-beam"]], "DovetailTenon.dovetail_volume_from_params_and_beam": [[865, "dovetailtenon-dovetail-volume-from-params-and-beam"]], "DovetailTenon.frame_from_params_and_beam": [[866, "dovetailtenon-frame-from-params-and-beam"]], "DovetailTenon.from_json": [[867, "dovetailtenon-from-json"]], "DovetailTenon.from_jsonstring": [[868, "dovetailtenon-from-jsonstring"]], "DovetailTenon.from_plane_and_beam": [[869, "dovetailtenon-from-plane-and-beam"]], "DovetailTenon.scale": [[870, "dovetailtenon-scale"]], "DovetailTenon.scaled": [[871, "dovetailtenon-scaled"]], "DovetailTenon.sha256": [[872, "dovetailtenon-sha256"]], "DovetailTenon.to_json": [[873, "dovetailtenon-to-json"]], "DovetailTenon.to_jsonstring": [[874, "dovetailtenon-to-jsonstring"]], "DovetailTenon.validate_data": [[875, "dovetailtenon-validate-data"]], "Drilling": [[876, "drilling"]], "Drilling.ToString": [[877, "drilling-tostring"]], "Drilling.add_subprocessing": [[878, "drilling-add-subprocessing"]], "Drilling.apply": [[879, "drilling-apply"]], "Drilling.copy": [[880, "drilling-copy"]], "Drilling.cylinder_from_params_and_element": [[881, "drilling-cylinder-from-params-and-element"]], "Drilling.from_json": [[882, "drilling-from-json"]], "Drilling.from_jsonstring": [[883, "drilling-from-jsonstring"]], "Drilling.from_line_and_element": [[884, "drilling-from-line-and-element"]], "Drilling.from_shapes_and_element": [[885, "drilling-from-shapes-and-element"]], "Drilling.scale": [[886, "drilling-scale"]], "Drilling.scaled": [[887, "drilling-scaled"]], "Drilling.sha256": [[888, "drilling-sha256"]], "Drilling.to_json": [[889, "drilling-to-json"]], "Drilling.to_jsonstring": [[890, "drilling-to-jsonstring"]], "Drilling.validate_data": [[891, "drilling-validate-data"]], "DualContour": [[892, "dualcontour"]], "DualContour.ToString": [[893, "dualcontour-tostring"]], "DualContour.copy": [[894, "dualcontour-copy"]], "DualContour.from_json": [[895, "dualcontour-from-json"]], "DualContour.from_jsonstring": [[896, "dualcontour-from-jsonstring"]], "DualContour.scale": [[897, "dualcontour-scale"]], "DualContour.scaled": [[898, "dualcontour-scaled"]], "DualContour.sha256": [[899, "dualcontour-sha256"]], "DualContour.to_json": [[900, "dualcontour-to-json"]], "DualContour.to_jsonstring": [[901, "dualcontour-to-jsonstring"]], "DualContour.validate_data": [[902, "dualcontour-validate-data"]], "EdgePositionType": [[903, "edgepositiontype"]], "FreeContour": [[904, "freecontour"]], "FreeContour.ToString": [[905, "freecontour-tostring"]], "FreeContour.add_subprocessing": [[906, "freecontour-add-subprocessing"]], "FreeContour.apply": [[907, "freecontour-apply"]], "FreeContour.are_all_segments_parallel": [[908, "freecontour-are-all-segments-parallel"]], "FreeContour.copy": [[909, "freecontour-copy"]], "FreeContour.from_json": [[910, "freecontour-from-json"]], "FreeContour.from_jsonstring": [[911, "freecontour-from-jsonstring"]], "FreeContour.from_polyline_and_element": [[912, "freecontour-from-polyline-and-element"]], "FreeContour.from_shapes_and_element": [[913, "freecontour-from-shapes-and-element"]], "FreeContour.from_top_bottom_and_elements": [[914, "freecontour-from-top-bottom-and-elements"]], "FreeContour.get_ref_face_index": [[915, "freecontour-get-ref-face-index"]], "FreeContour.parse_tool_position": [[916, "freecontour-parse-tool-position"]], "FreeContour.scale": [[917, "freecontour-scale"]], "FreeContour.scaled": [[918, "freecontour-scaled"]], "FreeContour.sha256": [[919, "freecontour-sha256"]], "FreeContour.to_json": [[920, "freecontour-to-json"]], "FreeContour.to_jsonstring": [[921, "freecontour-to-jsonstring"]], "FreeContour.validate_data": [[922, "freecontour-validate-data"]], "FrenchRidgeLap": [[923, "frenchridgelap"]], "FrenchRidgeLap.ToString": [[924, "frenchridgelap-tostring"]], "FrenchRidgeLap.add_subprocessing": [[925, "frenchridgelap-add-subprocessing"]], "FrenchRidgeLap.apply": [[926, "frenchridgelap-apply"]], "FrenchRidgeLap.copy": [[927, "frenchridgelap-copy"]], "FrenchRidgeLap.frame_from_params_and_beam": [[928, "frenchridgelap-frame-from-params-and-beam"]], "FrenchRidgeLap.from_beam_beam_and_plane": [[929, "frenchridgelap-from-beam-beam-and-plane"]], "FrenchRidgeLap.from_json": [[930, "frenchridgelap-from-json"]], "FrenchRidgeLap.from_jsonstring": [[931, "frenchridgelap-from-jsonstring"]], "FrenchRidgeLap.lap_volume_from_params_and_beam": [[932, "frenchridgelap-lap-volume-from-params-and-beam"]], "FrenchRidgeLap.scale": [[933, "frenchridgelap-scale"]], "FrenchRidgeLap.scaled": [[934, "frenchridgelap-scaled"]], "FrenchRidgeLap.sha256": [[935, "frenchridgelap-sha256"]], "FrenchRidgeLap.to_json": [[936, "frenchridgelap-to-json"]], "FrenchRidgeLap.to_jsonstring": [[937, "frenchridgelap-to-jsonstring"]], "FrenchRidgeLap.validate_data": [[938, "frenchridgelap-validate-data"]], "JackRafterCut": [[939, "jackraftercut"]], "JackRafterCut.ToString": [[940, "jackraftercut-tostring"]], "JackRafterCut.add_subprocessing": [[941, "jackraftercut-add-subprocessing"]], "JackRafterCut.apply": [[942, "jackraftercut-apply"]], "JackRafterCut.copy": [[943, "jackraftercut-copy"]], "JackRafterCut.from_json": [[944, "jackraftercut-from-json"]], "JackRafterCut.from_jsonstring": [[945, "jackraftercut-from-jsonstring"]], "JackRafterCut.from_plane_and_beam": [[946, "jackraftercut-from-plane-and-beam"]], "JackRafterCut.from_shapes_and_element": [[947, "jackraftercut-from-shapes-and-element"]], "JackRafterCut.plane_from_params_and_beam": [[948, "jackraftercut-plane-from-params-and-beam"]], "JackRafterCut.scale": [[949, "jackraftercut-scale"]], "JackRafterCut.scaled": [[950, "jackraftercut-scaled"]], "JackRafterCut.sha256": [[951, "jackraftercut-sha256"]], "JackRafterCut.to_json": [[952, "jackraftercut-to-json"]], "JackRafterCut.to_jsonstring": [[953, "jackraftercut-to-jsonstring"]], "JackRafterCut.validate_data": [[954, "jackraftercut-validate-data"]], "JackRafterCutProxy": [[955, "jackraftercutproxy"]], "JackRafterCutProxy.apply": [[956, "jackraftercutproxy-apply"]], "JackRafterCutProxy.from_plane_and_beam": [[957, "jackraftercutproxy-from-plane-and-beam"]], "JackRafterCutProxy.unproxified": [[958, "jackraftercutproxy-unproxified"]], "Lap": [[959, "lap"]], "Lap.ToString": [[960, "lap-tostring"]], "Lap.add_subprocessing": [[961, "lap-add-subprocessing"]], "Lap.apply": [[962, "lap-apply"]], "Lap.copy": [[963, "lap-copy"]], "Lap.from_json": [[964, "lap-from-json"]], "Lap.from_jsonstring": [[965, "lap-from-jsonstring"]], "Lap.from_plane_and_beam": [[966, "lap-from-plane-and-beam"]], "Lap.from_shapes_and_element": [[967, "lap-from-shapes-and-element"]], "Lap.from_volume_and_beam": [[968, "lap-from-volume-and-beam"]], "Lap.scale": [[969, "lap-scale"]], "Lap.scaled": [[970, "lap-scaled"]], "Lap.sha256": [[971, "lap-sha256"]], "Lap.to_json": [[972, "lap-to-json"]], "Lap.to_jsonstring": [[973, "lap-to-jsonstring"]], "Lap.validate_data": [[974, "lap-validate-data"]], "Lap.volume_from_params_and_beam": [[975, "lap-volume-from-params-and-beam"]], "LapProxy": [[976, "lapproxy"]], "LapProxy.apply": [[977, "lapproxy-apply"]], "LapProxy.from_volume_and_beam": [[978, "lapproxy-from-volume-and-beam"]], "LapProxy.unproxified": [[979, "lapproxy-unproxified"]], "LimitationTopType": [[980, "limitationtoptype"]], "LongitudinalCut": [[981, "longitudinalcut"]], "LongitudinalCut.ToString": [[982, "longitudinalcut-tostring"]], "LongitudinalCut.add_subprocessing": [[983, "longitudinalcut-add-subprocessing"]], "LongitudinalCut.apply": [[984, "longitudinalcut-apply"]], "LongitudinalCut.copy": [[985, "longitudinalcut-copy"]], "LongitudinalCut.from_json": [[986, "longitudinalcut-from-json"]], "LongitudinalCut.from_jsonstring": [[987, "longitudinalcut-from-jsonstring"]], "LongitudinalCut.from_plane_and_beam": [[988, "longitudinalcut-from-plane-and-beam"]], "LongitudinalCut.from_shapes_and_element": [[989, "longitudinalcut-from-shapes-and-element"]], "LongitudinalCut.plane_from_params_and_beam": [[990, "longitudinalcut-plane-from-params-and-beam"]], "LongitudinalCut.scaled": [[991, "longitudinalcut-scaled"]], "LongitudinalCut.sha256": [[992, "longitudinalcut-sha256"]], "LongitudinalCut.to_json": [[993, "longitudinalcut-to-json"]], "LongitudinalCut.to_jsonstring": [[994, "longitudinalcut-to-jsonstring"]], "LongitudinalCut.validate_data": [[995, "longitudinalcut-validate-data"]], "LongitudinalCut.volume_from_params_and_beam": [[996, "longitudinalcut-volume-from-params-and-beam"]], "MachiningLimits": [[997, "machininglimits"]], "Mortise": [[998, "mortise"]], "Mortise.ToString": [[999, "mortise-tostring"]], "Mortise.add_subprocessing": [[1000, "mortise-add-subprocessing"]], "Mortise.apply": [[1001, "mortise-apply"]], "Mortise.copy": [[1002, "mortise-copy"]], "Mortise.frame_from_params_and_beam": [[1003, "mortise-frame-from-params-and-beam"]], "Mortise.from_frame_and_beam": [[1004, "mortise-from-frame-and-beam"]], "Mortise.from_json": [[1005, "mortise-from-json"]], "Mortise.from_jsonstring": [[1006, "mortise-from-jsonstring"]], "Mortise.scale": [[1007, "mortise-scale"]], "Mortise.scaled": [[1008, "mortise-scaled"]], "Mortise.sha256": [[1009, "mortise-sha256"]], "Mortise.to_json": [[1010, "mortise-to-json"]], "Mortise.to_jsonstring": [[1011, "mortise-to-jsonstring"]], "Mortise.validate_data": [[1012, "mortise-validate-data"]], "Mortise.volume_from_params_and_beam": [[1013, "mortise-volume-from-params-and-beam"]], "OrientationType": [[1014, "orientationtype"]], "Pocket": [[1015, "pocket"]], "Pocket.ToString": [[1016, "pocket-tostring"]], "Pocket.add_subprocessing": [[1017, "pocket-add-subprocessing"]], "Pocket.apply": [[1018, "pocket-apply"]], "Pocket.copy": [[1019, "pocket-copy"]], "Pocket.from_json": [[1020, "pocket-from-json"]], "Pocket.from_jsonstring": [[1021, "pocket-from-jsonstring"]], "Pocket.from_shapes_and_element": [[1022, "pocket-from-shapes-and-element"]], "Pocket.from_volume_and_element": [[1023, "pocket-from-volume-and-element"]], "Pocket.scale": [[1024, "pocket-scale"]], "Pocket.scaled": [[1025, "pocket-scaled"]], "Pocket.sha256": [[1026, "pocket-sha256"]], "Pocket.to_json": [[1027, "pocket-to-json"]], "Pocket.to_jsonstring": [[1028, "pocket-to-jsonstring"]], "Pocket.validate_data": [[1029, "pocket-validate-data"]], "Pocket.volume_from_params_and_element": [[1030, "pocket-volume-from-params-and-element"]], "PocketProxy": [[1031, "pocketproxy"]], "PocketProxy.apply": [[1032, "pocketproxy-apply"]], "PocketProxy.from_volume_and_element": [[1033, "pocketproxy-from-volume-and-element"]], "PocketProxy.unproxified": [[1034, "pocketproxy-unproxified"]], "Slot": [[1035, "slot"]], "Slot.ToString": [[1036, "slot-tostring"]], "Slot.add_subprocessing": [[1037, "slot-add-subprocessing"]], "Slot.apply": [[1038, "slot-apply"]], "Slot.copy": [[1039, "slot-copy"]], "Slot.from_json": [[1040, "slot-from-json"]], "Slot.from_jsonstring": [[1041, "slot-from-jsonstring"]], "Slot.from_plane_and_beam": [[1042, "slot-from-plane-and-beam"]], "Slot.scale": [[1043, "slot-scale"]], "Slot.scaled": [[1044, "slot-scaled"]], "Slot.sha256": [[1045, "slot-sha256"]], "Slot.to_json": [[1046, "slot-to-json"]], "Slot.to_jsonstring": [[1047, "slot-to-jsonstring"]], "Slot.validate_data": [[1048, "slot-validate-data"]], "StepJoint": [[1049, "stepjoint"]], "StepJoint.ToString": [[1050, "stepjoint-tostring"]], "StepJoint.add_subprocessing": [[1051, "stepjoint-add-subprocessing"]], "StepJoint.add_tenon": [[1052, "stepjoint-add-tenon"]], "StepJoint.apply": [[1053, "stepjoint-apply"]], "StepJoint.copy": [[1054, "stepjoint-copy"]], "StepJoint.from_json": [[1055, "stepjoint-from-json"]], "StepJoint.from_jsonstring": [[1056, "stepjoint-from-jsonstring"]], "StepJoint.from_plane_and_beam": [[1057, "stepjoint-from-plane-and-beam"]], "StepJoint.planes_from_params_and_beam": [[1058, "stepjoint-planes-from-params-and-beam"]], "StepJoint.scale": [[1059, "stepjoint-scale"]], "StepJoint.scaled": [[1060, "stepjoint-scaled"]], "StepJoint.sha256": [[1061, "stepjoint-sha256"]], "StepJoint.tenon_volume_from_params_and_beam": [[1062, "stepjoint-tenon-volume-from-params-and-beam"]], "StepJoint.to_json": [[1063, "stepjoint-to-json"]], "StepJoint.to_jsonstring": [[1064, "stepjoint-to-jsonstring"]], "StepJoint.validate_data": [[1065, "stepjoint-validate-data"]], "StepJointNotch": [[1066, "stepjointnotch"]], "StepJointNotch.ToString": [[1067, "stepjointnotch-tostring"]], "StepJointNotch.add_mortise": [[1068, "stepjointnotch-add-mortise"]], "StepJointNotch.add_subprocessing": [[1069, "stepjointnotch-add-subprocessing"]], "StepJointNotch.apply": [[1070, "stepjointnotch-apply"]], "StepJointNotch.copy": [[1071, "stepjointnotch-copy"]], "StepJointNotch.from_json": [[1072, "stepjointnotch-from-json"]], "StepJointNotch.from_jsonstring": [[1073, "stepjointnotch-from-jsonstring"]], "StepJointNotch.from_plane_and_beam": [[1074, "stepjointnotch-from-plane-and-beam"]], "StepJointNotch.mortise_volume_from_params_and_beam": [[1075, "stepjointnotch-mortise-volume-from-params-and-beam"]], "StepJointNotch.planes_from_params_and_beam": [[1076, "stepjointnotch-planes-from-params-and-beam"]], "StepJointNotch.scale": [[1077, "stepjointnotch-scale"]], "StepJointNotch.scaled": [[1078, "stepjointnotch-scaled"]], "StepJointNotch.sha256": [[1079, "stepjointnotch-sha256"]], "StepJointNotch.to_json": [[1080, "stepjointnotch-to-json"]], "StepJointNotch.to_jsonstring": [[1081, "stepjointnotch-to-jsonstring"]], "StepJointNotch.validate_data": [[1082, "stepjointnotch-validate-data"]], "StepShapeType": [[1083, "stepshapetype"]], "Tenon": [[1084, "tenon"]], "Tenon.ToString": [[1085, "tenon-tostring"]], "Tenon.add_subprocessing": [[1086, "tenon-add-subprocessing"]], "Tenon.apply": [[1087, "tenon-apply"]], "Tenon.copy": [[1088, "tenon-copy"]], "Tenon.frame_from_params_and_beam": [[1089, "tenon-frame-from-params-and-beam"]], "Tenon.from_json": [[1090, "tenon-from-json"]], "Tenon.from_jsonstring": [[1091, "tenon-from-jsonstring"]], "Tenon.from_plane_and_beam": [[1092, "tenon-from-plane-and-beam"]], "Tenon.scale": [[1093, "tenon-scale"]], "Tenon.scaled": [[1094, "tenon-scaled"]], "Tenon.sha256": [[1095, "tenon-sha256"]], "Tenon.to_json": [[1096, "tenon-to-json"]], "Tenon.to_jsonstring": [[1097, "tenon-to-jsonstring"]], "Tenon.validate_data": [[1098, "tenon-validate-data"]], "Tenon.volume_from_params_and_beam": [[1099, "tenon-volume-from-params-and-beam"]], "TenonShapeType": [[1100, "tenonshapetype"]], "Text": [[1101, "text"]], "Text.ToString": [[1102, "text-tostring"]], "Text.add_subprocessing": [[1103, "text-add-subprocessing"]], "Text.apply": [[1104, "text-apply"]], "Text.copy": [[1105, "text-copy"]], "Text.create_text_curves_for_element": [[1106, "text-create-text-curves-for-element"]], "Text.from_json": [[1107, "text-from-json"]], "Text.from_jsonstring": [[1108, "text-from-jsonstring"]], "Text.scale": [[1109, "text-scale"]], "Text.scaled": [[1110, "text-scaled"]], "Text.sha256": [[1111, "text-sha256"]], "Text.to_json": [[1112, "text-to-json"]], "Text.to_jsonstring": [[1113, "text-to-jsonstring"]], "Text.validate_data": [[1114, "text-validate-data"]], "add_gh_param": [[1115, "add-gh-param"]], "clear_gh_params": [[1116, "clear-gh-params"]], "get_leaf_subclasses": [[1117, "get-leaf-subclasses"]], "item_input_valid": [[1118, "item-input-valid"]], "list_input_valid": [[1119, "list-input-valid"]], "manage_dynamic_params": [[1120, "manage-dynamic-params"]], "rename_gh_input": [[1121, "rename-gh-input"]], "TimberModel": [[1122, "timbermodel"]], "TimberModel.ToString": [[1123, "timbermodel-tostring"]], "TimberModel.add_element": [[1124, "timbermodel-add-element"]], "TimberModel.add_elements": [[1125, "timbermodel-add-elements"]], "TimberModel.add_group": [[1126, "timbermodel-add-group"]], "TimberModel.add_group_element": [[1127, "timbermodel-add-group-element"]], "TimberModel.add_interaction": [[1128, "timbermodel-add-interaction"]], "TimberModel.add_joint": [[1129, "timbermodel-add-joint"]], "TimberModel.add_joint_candidate": [[1130, "timbermodel-add-joint-candidate"]], "TimberModel.add_material": [[1131, "timbermodel-add-material"]], "TimberModel.assign_material": [[1132, "timbermodel-assign-material"]], "TimberModel.compute_aabb": [[1133, "timbermodel-compute-aabb"]], "TimberModel.compute_obb": [[1134, "timbermodel-compute-obb"]], "TimberModel.connect_adjacent_beams": [[1135, "timbermodel-connect-adjacent-beams"]], "TimberModel.connect_adjacent_walls": [[1136, "timbermodel-connect-adjacent-walls"]], "TimberModel.copy": [[1137, "timbermodel-copy"]], "TimberModel.element_by_guid": [[1138, "timbermodel-element-by-guid"]], "TimberModel.elements": [[1139, "timbermodel-elements"]], "TimberModel.elements_connected_by": [[1140, "timbermodel-elements-connected-by"]], "TimberModel.from_json": [[1141, "timbermodel-from-json"]], "TimberModel.from_jsonstring": [[1142, "timbermodel-from-jsonstring"]], "TimberModel.get_elements_in_group": [[1143, "timbermodel-get-elements-in-group"]], "TimberModel.get_interactions_for_element": [[1144, "timbermodel-get-interactions-for-element"]], "TimberModel.has_element": [[1145, "timbermodel-has-element"]], "TimberModel.has_group": [[1146, "timbermodel-has-group"]], "TimberModel.has_interaction": [[1147, "timbermodel-has-interaction"]], "TimberModel.has_material": [[1148, "timbermodel-has-material"]], "TimberModel.interactions": [[1149, "timbermodel-interactions"]], "TimberModel.materials": [[1150, "timbermodel-materials"]], "TimberModel.process_joinery": [[1151, "timbermodel-process-joinery"]], "TimberModel.remove_element": [[1152, "timbermodel-remove-element"]], "TimberModel.remove_interaction": [[1153, "timbermodel-remove-interaction"]], "TimberModel.remove_joint": [[1154, "timbermodel-remove-joint"]], "TimberModel.remove_joint_candidate": [[1155, "timbermodel-remove-joint-candidate"]], "TimberModel.rotate": [[1156, "timbermodel-rotate"]], "TimberModel.rotated": [[1157, "timbermodel-rotated"]], "TimberModel.scale": [[1158, "timbermodel-scale"]], "TimberModel.scaled": [[1159, "timbermodel-scaled"]], "TimberModel.set_topologies": [[1160, "timbermodel-set-topologies"]], "TimberModel.sha256": [[1161, "timbermodel-sha256"]], "TimberModel.to_json": [[1162, "timbermodel-to-json"]], "TimberModel.to_jsonstring": [[1163, "timbermodel-to-jsonstring"]], "TimberModel.transform": [[1164, "timbermodel-transform"]], "TimberModel.transform_numpy": [[1165, "timbermodel-transform-numpy"]], "TimberModel.transformed": [[1166, "timbermodel-transformed"]], "TimberModel.transformed_numpy": [[1167, "timbermodel-transformed-numpy"]], "TimberModel.translate": [[1168, "timbermodel-translate"]], "TimberModel.translated": [[1169, "timbermodel-translated"]], "TimberModel.validate_data": [[1170, "timbermodel-validate-data"]], "Actor": [[1171, "actor"]], "Actor.get_name": [[1172, "actor-get-name"]], "BuildingPlan": [[1173, "buildingplan"]], "BuildingPlan.ToString": [[1174, "buildingplan-tostring"]], "BuildingPlan.add_step": [[1175, "buildingplan-add-step"]], "BuildingPlan.copy": [[1176, "buildingplan-copy"]], "BuildingPlan.from_json": [[1177, "buildingplan-from-json"]], "BuildingPlan.from_jsonstring": [[1178, "buildingplan-from-jsonstring"]], "BuildingPlan.sha256": [[1179, "buildingplan-sha256"]], "BuildingPlan.to_json": [[1180, "buildingplan-to-json"]], "BuildingPlan.to_jsonstring": [[1181, "buildingplan-to-jsonstring"]], "BuildingPlan.validate_data": [[1182, "buildingplan-validate-data"]], "BuildingPlanParser": [[1183, "buildingplanparser"]], "BuildingPlanParser.parse": [[1184, "buildingplanparser-parse"]], "BuildingPlanParser.serialize": [[1185, "buildingplanparser-serialize"]], "Instruction": [[1186, "instruction"]], "Instruction.ToString": [[1187, "instruction-tostring"]], "Instruction.copy": [[1188, "instruction-copy"]], "Instruction.from_json": [[1189, "instruction-from-json"]], "Instruction.from_jsonstring": [[1190, "instruction-from-jsonstring"]], "Instruction.sha256": [[1191, "instruction-sha256"]], "Instruction.to_json": [[1192, "instruction-to-json"]], "Instruction.to_jsonstring": [[1193, "instruction-to-jsonstring"]], "Instruction.transform": [[1194, "instruction-transform"]], "Instruction.validate_data": [[1195, "instruction-validate-data"]], "LinearDimension": [[1196, "lineardimension"]], "LinearDimension.ToString": [[1197, "lineardimension-tostring"]], "LinearDimension.copy": [[1198, "lineardimension-copy"]], "LinearDimension.from_json": [[1199, "lineardimension-from-json"]], "LinearDimension.from_jsonstring": [[1200, "lineardimension-from-jsonstring"]], "LinearDimension.sha256": [[1201, "lineardimension-sha256"]], "LinearDimension.to_json": [[1202, "lineardimension-to-json"]], "LinearDimension.to_jsonstring": [[1203, "lineardimension-to-jsonstring"]], "LinearDimension.transform": [[1204, "lineardimension-transform"]], "LinearDimension.validate_data": [[1205, "lineardimension-validate-data"]], "Model3d": [[1206, "model3d"]], "Model3d.ToString": [[1207, "model3d-tostring"]], "Model3d.copy": [[1208, "model3d-copy"]], "Model3d.from_json": [[1209, "model3d-from-json"]], "Model3d.from_jsonstring": [[1210, "model3d-from-jsonstring"]], "Model3d.sha256": [[1211, "model3d-sha256"]], "Model3d.to_json": [[1212, "model3d-to-json"]], "Model3d.to_jsonstring": [[1213, "model3d-to-jsonstring"]], "Model3d.transform": [[1214, "model3d-transform"]], "Model3d.validate_data": [[1215, "model3d-validate-data"]], "SimpleSequenceGenerator": [[1216, "simplesequencegenerator"]], "Step": [[1217, "step"]], "Step.ToString": [[1218, "step-tostring"]], "Step.copy": [[1219, "step-copy"]], "Step.from_json": [[1220, "step-from-json"]], "Step.from_jsonstring": [[1221, "step-from-jsonstring"]], "Step.sha256": [[1222, "step-sha256"]], "Step.to_json": [[1223, "step-to-json"]], "Step.to_jsonstring": [[1224, "step-to-jsonstring"]], "Step.transform": [[1225, "step-transform"]], "Step.validate_data": [[1226, "step-validate-data"]], "Text3d": [[1227, "text3d"]], "Text3d.ToString": [[1228, "text3d-tostring"]], "Text3d.copy": [[1229, "text3d-copy"]], "Text3d.from_json": [[1230, "text3d-from-json"]], "Text3d.from_jsonstring": [[1231, "text3d-from-jsonstring"]], "Text3d.sha256": [[1232, "text3d-sha256"]], "Text3d.to_json": [[1233, "text3d-to-json"]], "Text3d.to_jsonstring": [[1234, "text3d-to-jsonstring"]], "Text3d.transform": [[1235, "text3d-transform"]], "Text3d.validate_data": [[1236, "text3d-validate-data"]], "Citing": [[1238, "citing"]], "Developer Guide": [[1239, "developer-guide"]], "BTLx Contribution Guide": [[1240, "btlx-contribution-guide"]], "Adding a new BTLx Processing": [[1240, "adding-a-new-btlx-processing"]], "1. Identify the BTLx Processing and Parameters": [[1240, "identify-the-btlx-processing-and-parameters"]], "2. Create the Processing Class": [[1240, "create-the-processing-class"]], "Example:": [[1240, "example"], [1240, "id1"], [1240, "id2"], [1242, "example"], [1242, "id1"], [1242, "id2"]], "3. Add Alternative Constructors in Processing Class": [[1240, "add-alternative-constructors-in-processing-class"]], "4. Add Geometry Generation Method in Processing Class": [[1240, "add-geometry-generation-method-in-processing-class"]], "5. Update Module Imports": [[1240, "update-module-imports"]], "6. Add Tests": [[1240, "add-tests"]], "Key Considerations": [[1240, "key-considerations"], [1242, "key-considerations"]], "Class Diagrams": [[1241, "class-diagrams"]], "Timber Element Subsystem": [[1241, "timber-element-subsystem"]], "Connections Subsystem": [[1241, "connections-subsystem"]], "Fabrication Subsystem": [[1241, "fabrication-subsystem"]], "Errors Subsystem": [[1241, "errors-subsystem"]], "Joints Contribution Guide": [[1242, "joints-contribution-guide"]], "Creating a New Joint": [[1242, "creating-a-new-joint"]], "1. Define Joint Requirements and Analyze Element Relationships": [[1242, "define-joint-requirements-and-analyze-element-relationships"]], "2. Create the Joint Class": [[1242, "create-the-joint-class"]], "2. Extract Geometric Information": [[1242, "extract-geometric-information"]], "3. Implement Core Methods": [[1242, "implement-core-methods"]], "4. Update Module Imports": [[1242, "update-module-imports"]], "5. Add Tests": [[1242, "add-tests"]], "COMPAS Timber Documentation": [[1243, "compas-timber-documentation"]], "Dependencies": [[1243, "dependencies"]], "Table of Contents": [[1243, "table-of-contents"]], "Indices and tables": [[1243, "indices-and-tables"]], "Installation": [[1244, "installation"]], "User": [[1244, "user"]], "Developer": [[1244, "developer"]], "License": [[1245, "license"]], "Grasshopper plugin": [[1246, "grasshopper-plugin"]], "Attributes": [[1247, "attributes"]], "Standard Attributes": [[1247, "standard-attributes"]], "Custom Attributes": [[1247, "custom-attributes"]], "Check Attributes": [[1247, "check-attributes"]], "Delete Attributes": [[1247, "delete-attributes"]], "Beams": [[1248, "beams"]], "DecomposeBeam": [[1248, "decomposebeam"]], "FindBeamByRhinoGuid": [[1248, "findbeambyrhinoguid"]], "Design": [[1249, "design"]], "Surface Model": [[1249, "surface-model"]], "Surface Model Options": [[1249, "surface-model-options"]], "Custom Beam Dimensions": [[1249, "custom-beam-dimensions"]], "Examples": [[1250, "examples"]], "Fabrication": [[1251, "fabrication"]], "Write BTLx": [[1251, "write-btlx"]], "Features": [[1252, "features"]], "Jack Rafter Cut Feature": [[1252, "jack-rafter-cut-feature"]], "Double Cut Feature": [[1252, "double-cut-feature"]], "Drilling Feature": [[1252, "drilling-feature"]], "Installation Guide": [[1253, "installation-guide"]], "Rhino 8 Installation": [[1253, "rhino-8-installation"]], "Rhino 7 Installation": [[1253, "rhino-7-installation"]], "Troubleshooting": [[1253, "troubleshooting"]], "Joint Rules": [[1254, "joint-rules"]], "Joint Rules Components": [[1254, "joint-rules-components"]], "Default Joint Rules": [[1254, "default-joint-rules"]], "Topological Joint Rules": [[1254, "topological-joint-rules"]], "Category Joint Rules": [[1254, "category-joint-rules"]], "Direct Joint Rules": [[1254, "direct-joint-rules"]], "Surface Model Joint Override": [[1254, "surface-model-joint-override"]], "Joint Types": [[1254, "joint-types"]], "L-Butt": [[1254, "l-butt"]], "L-Lap": [[1254, "l-lap"]], "L-Miter": [[1254, "l-miter"]], "French Ridge Lap": [[1254, "french-ridge-lap"]], "Tenon and Mortise": [[1254, "tenon-and-mortise"], [1254, "id1"]], "T-Butt": [[1254, "t-butt"]], "T-Lap": [[1254, "t-lap"]], "T-Step": [[1254, "t-step"]], "T-Birdsmouth": [[1254, "t-birdsmouth"]], "T-Dovetail": [[1254, "t-dovetail"]], "X-Lap": [[1254, "x-lap"]], "Summary Table": [[1254, "summary-table"]], "Model": [[1255, "model"]], "Show": [[1256, "show"]], "Show Beam Face Index": [[1256, "show-beam-face-index"]], "Show Beam Index": [[1256, "show-beam-index"]], "Show Surface Model Beam Types": [[1256, "show-surface-model-beam-types"]], "Show Feature Errors": [[1256, "show-feature-errors"]], "Show Joining Errors": [[1256, "show-joining-errors"]], "Show Joint Types": [[1256, "show-joint-types"]], "Show Topology Types": [[1256, "show-topology-types"]], "Utils": [[1257, "utils"]], "Bake with BoxMap": [[1257, "bake-with-boxmap"]], "Workflow": [[1258, "workflow"]]}, "indexentries": {"ballnodejoint (class in compas_timber.connections)": [[10, "compas_timber.connections.BallNodeJoint"]], "tostring() (compas_timber.connections.ballnodejoint method)": [[11, "compas_timber.connections.BallNodeJoint.ToString"]], "add_extensions() (compas_timber.connections.ballnodejoint method)": [[12, "compas_timber.connections.BallNodeJoint.add_extensions"]], "add_features() (compas_timber.connections.ballnodejoint method)": [[13, "compas_timber.connections.BallNodeJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ballnodejoint method)": [[14, "compas_timber.connections.BallNodeJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ballnodejoint method)": [[15, "compas_timber.connections.BallNodeJoint.copy"]], "create() (compas_timber.connections.ballnodejoint class method)": [[16, "compas_timber.connections.BallNodeJoint.create"]], "element_count_complies() (compas_timber.connections.ballnodejoint class method)": [[17, "compas_timber.connections.BallNodeJoint.element_count_complies"]], "from_json() (compas_timber.connections.ballnodejoint class method)": [[18, "compas_timber.connections.BallNodeJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ballnodejoint class method)": [[19, "compas_timber.connections.BallNodeJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.ballnodejoint class method)": [[20, "compas_timber.connections.BallNodeJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.ballnodejoint class method)": [[21, "compas_timber.connections.BallNodeJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.ballnodejoint method)": [[22, "compas_timber.connections.BallNodeJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ballnodejoint method)": [[23, "compas_timber.connections.BallNodeJoint.sha256"]], "to_json() (compas_timber.connections.ballnodejoint method)": [[24, "compas_timber.connections.BallNodeJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ballnodejoint method)": [[25, "compas_timber.connections.BallNodeJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ballnodejoint class method)": [[26, "compas_timber.connections.BallNodeJoint.validate_data"]], "beamgroupanalyzer (class in compas_timber.connections)": [[27, "compas_timber.connections.BeamGroupAnalyzer"]], "find() (compas_timber.connections.beamgroupanalyzer method)": [[28, "compas_timber.connections.BeamGroupAnalyzer.find"]], "buttjoint (class in compas_timber.connections)": [[29, "compas_timber.connections.ButtJoint"]], "tostring() (compas_timber.connections.buttjoint method)": [[30, "compas_timber.connections.ButtJoint.ToString"]], "add_extensions() (compas_timber.connections.buttjoint method)": [[31, "compas_timber.connections.ButtJoint.add_extensions"]], "add_features() (compas_timber.connections.buttjoint method)": [[32, "compas_timber.connections.ButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.buttjoint method)": [[33, "compas_timber.connections.ButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.buttjoint method)": [[34, "compas_timber.connections.ButtJoint.copy"]], "create() (compas_timber.connections.buttjoint class method)": [[35, "compas_timber.connections.ButtJoint.create"]], "element_count_complies() (compas_timber.connections.buttjoint class method)": [[36, "compas_timber.connections.ButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.buttjoint class method)": [[37, "compas_timber.connections.ButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.buttjoint class method)": [[38, "compas_timber.connections.ButtJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.buttjoint class method)": [[39, "compas_timber.connections.ButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.buttjoint class method)": [[40, "compas_timber.connections.ButtJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.buttjoint method)": [[41, "compas_timber.connections.ButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.buttjoint method)": [[42, "compas_timber.connections.ButtJoint.sha256"]], "to_json() (compas_timber.connections.buttjoint method)": [[43, "compas_timber.connections.ButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.buttjoint method)": [[44, "compas_timber.connections.ButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.buttjoint class method)": [[45, "compas_timber.connections.ButtJoint.validate_data"]], "cluster (class in compas_timber.connections)": [[46, "compas_timber.connections.Cluster"]], "compositeanalyzer (class in compas_timber.connections)": [[47, "compas_timber.connections.CompositeAnalyzer"]], "find() (compas_timber.connections.compositeanalyzer method)": [[48, "compas_timber.connections.CompositeAnalyzer.find"]], "from_model() (compas_timber.connections.compositeanalyzer class method)": [[49, "compas_timber.connections.CompositeAnalyzer.from_model"]], "connectionsolver (class in compas_timber.connections)": [[50, "compas_timber.connections.ConnectionSolver"]], "find_intersecting_pairs() (compas_timber.connections.connectionsolver class method)": [[51, "compas_timber.connections.ConnectionSolver.find_intersecting_pairs"]], "find_topology() (compas_timber.connections.connectionsolver method)": [[52, "compas_timber.connections.ConnectionSolver.find_topology"]], "find_wall_wall_topology() (compas_timber.connections.connectionsolver method)": [[53, "compas_timber.connections.ConnectionSolver.find_wall_wall_topology"]], "interfacelocation (class in compas_timber.connections)": [[54, "compas_timber.connections.InterfaceLocation"]], "interfacerole (class in compas_timber.connections)": [[55, "compas_timber.connections.InterfaceRole"]], "joint (class in compas_timber.connections)": [[56, "compas_timber.connections.Joint"]], "tostring() (compas_timber.connections.joint method)": [[57, "compas_timber.connections.Joint.ToString"]], "add_extensions() (compas_timber.connections.joint method)": [[58, "compas_timber.connections.Joint.add_extensions"]], "add_features() (compas_timber.connections.joint method)": [[59, "compas_timber.connections.Joint.add_features"]], "check_elements_compatibility() (compas_timber.connections.joint method)": [[60, "compas_timber.connections.Joint.check_elements_compatibility"]], "copy() (compas_timber.connections.joint method)": [[61, "compas_timber.connections.Joint.copy"]], "create() (compas_timber.connections.joint class method)": [[62, "compas_timber.connections.Joint.create"]], "element_count_complies() (compas_timber.connections.joint class method)": [[63, "compas_timber.connections.Joint.element_count_complies"]], "from_json() (compas_timber.connections.joint class method)": [[64, "compas_timber.connections.Joint.from_json"]], "from_jsonstring() (compas_timber.connections.joint class method)": [[65, "compas_timber.connections.Joint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.joint class method)": [[66, "compas_timber.connections.Joint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.joint class method)": [[67, "compas_timber.connections.Joint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.joint method)": [[68, "compas_timber.connections.Joint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.joint method)": [[69, "compas_timber.connections.Joint.sha256"]], "to_json() (compas_timber.connections.joint method)": [[70, "compas_timber.connections.Joint.to_json"]], "to_jsonstring() (compas_timber.connections.joint method)": [[71, "compas_timber.connections.Joint.to_jsonstring"]], "validate_data() (compas_timber.connections.joint class method)": [[72, "compas_timber.connections.Joint.validate_data"]], "jointcandidate (class in compas_timber.connections)": [[73, "compas_timber.connections.JointCandidate"]], "tostring() (compas_timber.connections.jointcandidate method)": [[74, "compas_timber.connections.JointCandidate.ToString"]], "add_extensions() (compas_timber.connections.jointcandidate method)": [[75, "compas_timber.connections.JointCandidate.add_extensions"]], "add_features() (compas_timber.connections.jointcandidate method)": [[76, "compas_timber.connections.JointCandidate.add_features"]], "check_elements_compatibility() (compas_timber.connections.jointcandidate method)": [[77, "compas_timber.connections.JointCandidate.check_elements_compatibility"]], "copy() (compas_timber.connections.jointcandidate method)": [[78, "compas_timber.connections.JointCandidate.copy"]], "create() (compas_timber.connections.jointcandidate class method)": [[79, "compas_timber.connections.JointCandidate.create"]], "element_count_complies() (compas_timber.connections.jointcandidate class method)": [[80, "compas_timber.connections.JointCandidate.element_count_complies"]], "from_json() (compas_timber.connections.jointcandidate class method)": [[81, "compas_timber.connections.JointCandidate.from_json"]], "from_jsonstring() (compas_timber.connections.jointcandidate class method)": [[82, "compas_timber.connections.JointCandidate.from_jsonstring"]], "promote_cluster() (compas_timber.connections.jointcandidate class method)": [[83, "compas_timber.connections.JointCandidate.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.jointcandidate class method)": [[84, "compas_timber.connections.JointCandidate.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.jointcandidate method)": [[85, "compas_timber.connections.JointCandidate.restore_beams_from_keys"]], "sha256() (compas_timber.connections.jointcandidate method)": [[86, "compas_timber.connections.JointCandidate.sha256"]], "to_json() (compas_timber.connections.jointcandidate method)": [[87, "compas_timber.connections.JointCandidate.to_json"]], "to_jsonstring() (compas_timber.connections.jointcandidate method)": [[88, "compas_timber.connections.JointCandidate.to_jsonstring"]], "validate_data() (compas_timber.connections.jointcandidate class method)": [[89, "compas_timber.connections.JointCandidate.validate_data"]], "jointtopology (class in compas_timber.connections)": [[90, "compas_timber.connections.JointTopology"]], "get_name() (compas_timber.connections.jointtopology class method)": [[91, "compas_timber.connections.JointTopology.get_name"]], "lbuttjoint (class in compas_timber.connections)": [[92, "compas_timber.connections.LButtJoint"]], "tostring() (compas_timber.connections.lbuttjoint method)": [[93, "compas_timber.connections.LButtJoint.ToString"]], "add_extensions() (compas_timber.connections.lbuttjoint method)": [[94, "compas_timber.connections.LButtJoint.add_extensions"]], "add_features() (compas_timber.connections.lbuttjoint method)": [[95, "compas_timber.connections.LButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lbuttjoint method)": [[96, "compas_timber.connections.LButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lbuttjoint method)": [[97, "compas_timber.connections.LButtJoint.copy"]], "create() (compas_timber.connections.lbuttjoint class method)": [[98, "compas_timber.connections.LButtJoint.create"]], "element_count_complies() (compas_timber.connections.lbuttjoint class method)": [[99, "compas_timber.connections.LButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.lbuttjoint class method)": [[100, "compas_timber.connections.LButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lbuttjoint class method)": [[101, "compas_timber.connections.LButtJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.lbuttjoint class method)": [[102, "compas_timber.connections.LButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.lbuttjoint class method)": [[103, "compas_timber.connections.LButtJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.lbuttjoint method)": [[104, "compas_timber.connections.LButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lbuttjoint method)": [[105, "compas_timber.connections.LButtJoint.sha256"]], "to_json() (compas_timber.connections.lbuttjoint method)": [[106, "compas_timber.connections.LButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lbuttjoint method)": [[107, "compas_timber.connections.LButtJoint.to_jsonstring"]], "update_beam_roles() (compas_timber.connections.lbuttjoint method)": [[108, "compas_timber.connections.LButtJoint.update_beam_roles"]], "validate_data() (compas_timber.connections.lbuttjoint class method)": [[109, "compas_timber.connections.LButtJoint.validate_data"]], "lfrenchridgelapjoint (class in compas_timber.connections)": [[110, "compas_timber.connections.LFrenchRidgeLapJoint"]], "tostring() (compas_timber.connections.lfrenchridgelapjoint method)": [[111, "compas_timber.connections.LFrenchRidgeLapJoint.ToString"]], "add_extensions() (compas_timber.connections.lfrenchridgelapjoint method)": [[112, "compas_timber.connections.LFrenchRidgeLapJoint.add_extensions"]], "add_features() (compas_timber.connections.lfrenchridgelapjoint method)": [[113, "compas_timber.connections.LFrenchRidgeLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lfrenchridgelapjoint method)": [[114, "compas_timber.connections.LFrenchRidgeLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lfrenchridgelapjoint method)": [[115, "compas_timber.connections.LFrenchRidgeLapJoint.copy"]], "create() (compas_timber.connections.lfrenchridgelapjoint class method)": [[116, "compas_timber.connections.LFrenchRidgeLapJoint.create"]], "element_count_complies() (compas_timber.connections.lfrenchridgelapjoint class method)": [[117, "compas_timber.connections.LFrenchRidgeLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lfrenchridgelapjoint class method)": [[118, "compas_timber.connections.LFrenchRidgeLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lfrenchridgelapjoint class method)": [[119, "compas_timber.connections.LFrenchRidgeLapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.lfrenchridgelapjoint class method)": [[120, "compas_timber.connections.LFrenchRidgeLapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.lfrenchridgelapjoint class method)": [[121, "compas_timber.connections.LFrenchRidgeLapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.lfrenchridgelapjoint method)": [[122, "compas_timber.connections.LFrenchRidgeLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lfrenchridgelapjoint method)": [[123, "compas_timber.connections.LFrenchRidgeLapJoint.sha256"]], "to_json() (compas_timber.connections.lfrenchridgelapjoint method)": [[124, "compas_timber.connections.LFrenchRidgeLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lfrenchridgelapjoint method)": [[125, "compas_timber.connections.LFrenchRidgeLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lfrenchridgelapjoint class method)": [[126, "compas_timber.connections.LFrenchRidgeLapJoint.validate_data"]], "llapjoint (class in compas_timber.connections)": [[127, "compas_timber.connections.LLapJoint"]], "tostring() (compas_timber.connections.llapjoint method)": [[128, "compas_timber.connections.LLapJoint.ToString"]], "add_extensions() (compas_timber.connections.llapjoint method)": [[129, "compas_timber.connections.LLapJoint.add_extensions"]], "add_features() (compas_timber.connections.llapjoint method)": [[130, "compas_timber.connections.LLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.llapjoint method)": [[131, "compas_timber.connections.LLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.llapjoint method)": [[132, "compas_timber.connections.LLapJoint.copy"]], "create() (compas_timber.connections.llapjoint class method)": [[133, "compas_timber.connections.LLapJoint.create"]], "element_count_complies() (compas_timber.connections.llapjoint class method)": [[134, "compas_timber.connections.LLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.llapjoint class method)": [[135, "compas_timber.connections.LLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.llapjoint class method)": [[136, "compas_timber.connections.LLapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.llapjoint class method)": [[137, "compas_timber.connections.LLapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.llapjoint class method)": [[138, "compas_timber.connections.LLapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.llapjoint method)": [[139, "compas_timber.connections.LLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.llapjoint method)": [[140, "compas_timber.connections.LLapJoint.sha256"]], "to_json() (compas_timber.connections.llapjoint method)": [[141, "compas_timber.connections.LLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.llapjoint method)": [[142, "compas_timber.connections.LLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.llapjoint class method)": [[143, "compas_timber.connections.LLapJoint.validate_data"]], "lmiterjoint (class in compas_timber.connections)": [[144, "compas_timber.connections.LMiterJoint"]], "tostring() (compas_timber.connections.lmiterjoint method)": [[145, "compas_timber.connections.LMiterJoint.ToString"]], "add_extensions() (compas_timber.connections.lmiterjoint method)": [[146, "compas_timber.connections.LMiterJoint.add_extensions"]], "add_features() (compas_timber.connections.lmiterjoint method)": [[147, "compas_timber.connections.LMiterJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lmiterjoint method)": [[148, "compas_timber.connections.LMiterJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lmiterjoint method)": [[149, "compas_timber.connections.LMiterJoint.copy"]], "create() (compas_timber.connections.lmiterjoint class method)": [[150, "compas_timber.connections.LMiterJoint.create"]], "element_count_complies() (compas_timber.connections.lmiterjoint class method)": [[151, "compas_timber.connections.LMiterJoint.element_count_complies"]], "from_json() (compas_timber.connections.lmiterjoint class method)": [[152, "compas_timber.connections.LMiterJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lmiterjoint class method)": [[153, "compas_timber.connections.LMiterJoint.from_jsonstring"]], "get_cutoff_plane() (compas_timber.connections.lmiterjoint method)": [[154, "compas_timber.connections.LMiterJoint.get_cutoff_plane"]], "get_cutting_planes() (compas_timber.connections.lmiterjoint method)": [[155, "compas_timber.connections.LMiterJoint.get_cutting_planes"]], "promote_cluster() (compas_timber.connections.lmiterjoint class method)": [[156, "compas_timber.connections.LMiterJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.lmiterjoint class method)": [[157, "compas_timber.connections.LMiterJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.lmiterjoint method)": [[158, "compas_timber.connections.LMiterJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lmiterjoint method)": [[159, "compas_timber.connections.LMiterJoint.sha256"]], "to_json() (compas_timber.connections.lmiterjoint method)": [[160, "compas_timber.connections.LMiterJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lmiterjoint method)": [[161, "compas_timber.connections.LMiterJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lmiterjoint class method)": [[162, "compas_timber.connections.LMiterJoint.validate_data"]], "lapjoint (class in compas_timber.connections)": [[163, "compas_timber.connections.LapJoint"]], "tostring() (compas_timber.connections.lapjoint method)": [[164, "compas_timber.connections.LapJoint.ToString"]], "add_extensions() (compas_timber.connections.lapjoint method)": [[165, "compas_timber.connections.LapJoint.add_extensions"]], "add_features() (compas_timber.connections.lapjoint method)": [[166, "compas_timber.connections.LapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.lapjoint method)": [[167, "compas_timber.connections.LapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.lapjoint method)": [[168, "compas_timber.connections.LapJoint.copy"]], "create() (compas_timber.connections.lapjoint class method)": [[169, "compas_timber.connections.LapJoint.create"]], "element_count_complies() (compas_timber.connections.lapjoint class method)": [[170, "compas_timber.connections.LapJoint.element_count_complies"]], "from_json() (compas_timber.connections.lapjoint class method)": [[171, "compas_timber.connections.LapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.lapjoint class method)": [[172, "compas_timber.connections.LapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.lapjoint class method)": [[173, "compas_timber.connections.LapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.lapjoint class method)": [[174, "compas_timber.connections.LapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.lapjoint method)": [[175, "compas_timber.connections.LapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.lapjoint method)": [[176, "compas_timber.connections.LapJoint.sha256"]], "to_json() (compas_timber.connections.lapjoint method)": [[177, "compas_timber.connections.LapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.lapjoint method)": [[178, "compas_timber.connections.LapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.lapjoint class method)": [[179, "compas_timber.connections.LapJoint.validate_data"]], "maxncompositeanalyzer() (in module compas_timber.connections)": [[180, "compas_timber.connections.MaxNCompositeAnalyzer"]], "nbeamkdtreeanalyzer (class in compas_timber.connections)": [[181, "compas_timber.connections.NBeamKDTreeAnalyzer"]], "find() (compas_timber.connections.nbeamkdtreeanalyzer method)": [[182, "compas_timber.connections.NBeamKDTreeAnalyzer.find"]], "platebuttjoint (class in compas_timber.connections)": [[183, "compas_timber.connections.PlateButtJoint"]], "tostring() (compas_timber.connections.platebuttjoint method)": [[184, "compas_timber.connections.PlateButtJoint.ToString"]], "add_extensions() (compas_timber.connections.platebuttjoint method)": [[185, "compas_timber.connections.PlateButtJoint.add_extensions"]], "add_features() (compas_timber.connections.platebuttjoint method)": [[186, "compas_timber.connections.PlateButtJoint.add_features"]], "calculate_topology() (compas_timber.connections.platebuttjoint method)": [[187, "compas_timber.connections.PlateButtJoint.calculate_topology"]], "check_elements_compatibility() (compas_timber.connections.platebuttjoint method)": [[188, "compas_timber.connections.PlateButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.platebuttjoint method)": [[189, "compas_timber.connections.PlateButtJoint.copy"]], "create() (compas_timber.connections.platebuttjoint class method)": [[190, "compas_timber.connections.PlateButtJoint.create"]], "element_count_complies() (compas_timber.connections.platebuttjoint class method)": [[191, "compas_timber.connections.PlateButtJoint.element_count_complies"]], "flip_roles() (compas_timber.connections.platebuttjoint method)": [[192, "compas_timber.connections.PlateButtJoint.flip_roles"]], "from_json() (compas_timber.connections.platebuttjoint class method)": [[193, "compas_timber.connections.PlateButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.platebuttjoint class method)": [[194, "compas_timber.connections.PlateButtJoint.from_jsonstring"]], "get_interface_for_plate() (compas_timber.connections.platebuttjoint method)": [[195, "compas_timber.connections.PlateButtJoint.get_interface_for_plate"]], "promote_cluster() (compas_timber.connections.platebuttjoint class method)": [[196, "compas_timber.connections.PlateButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.platebuttjoint class method)": [[197, "compas_timber.connections.PlateButtJoint.promote_joint_candidate"]], "reorder_planes_and_outlines() (compas_timber.connections.platebuttjoint method)": [[198, "compas_timber.connections.PlateButtJoint.reorder_planes_and_outlines"]], "restore_beams_from_keys() (compas_timber.connections.platebuttjoint method)": [[199, "compas_timber.connections.PlateButtJoint.restore_beams_from_keys"]], "restore_plates_from_keys() (compas_timber.connections.platebuttjoint method)": [[200, "compas_timber.connections.PlateButtJoint.restore_plates_from_keys"]], "sha256() (compas_timber.connections.platebuttjoint method)": [[201, "compas_timber.connections.PlateButtJoint.sha256"]], "to_json() (compas_timber.connections.platebuttjoint method)": [[202, "compas_timber.connections.PlateButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.platebuttjoint method)": [[203, "compas_timber.connections.PlateButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.platebuttjoint class method)": [[204, "compas_timber.connections.PlateButtJoint.validate_data"]], "plateconnectionsolver (class in compas_timber.connections)": [[205, "compas_timber.connections.PlateConnectionSolver"]], "do_segments_overlap() (compas_timber.connections.plateconnectionsolver static method)": [[206, "compas_timber.connections.PlateConnectionSolver.do_segments_overlap"]], "does_segment_intersect_outline() (compas_timber.connections.plateconnectionsolver static method)": [[207, "compas_timber.connections.PlateConnectionSolver.does_segment_intersect_outline"]], "find_intersecting_pairs() (compas_timber.connections.plateconnectionsolver class method)": [[208, "compas_timber.connections.PlateConnectionSolver.find_intersecting_pairs"]], "find_topology() (compas_timber.connections.plateconnectionsolver method)": [[209, "compas_timber.connections.PlateConnectionSolver.find_topology"]], "find_wall_wall_topology() (compas_timber.connections.plateconnectionsolver method)": [[210, "compas_timber.connections.PlateConnectionSolver.find_wall_wall_topology"]], "platejoint (class in compas_timber.connections)": [[211, "compas_timber.connections.PlateJoint"]], "tostring() (compas_timber.connections.platejoint method)": [[212, "compas_timber.connections.PlateJoint.ToString"]], "add_extensions() (compas_timber.connections.platejoint method)": [[213, "compas_timber.connections.PlateJoint.add_extensions"]], "add_features() (compas_timber.connections.platejoint method)": [[214, "compas_timber.connections.PlateJoint.add_features"]], "calculate_topology() (compas_timber.connections.platejoint method)": [[215, "compas_timber.connections.PlateJoint.calculate_topology"]], "check_elements_compatibility() (compas_timber.connections.platejoint method)": [[216, "compas_timber.connections.PlateJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.platejoint method)": [[217, "compas_timber.connections.PlateJoint.copy"]], "create() (compas_timber.connections.platejoint class method)": [[218, "compas_timber.connections.PlateJoint.create"]], "element_count_complies() (compas_timber.connections.platejoint class method)": [[219, "compas_timber.connections.PlateJoint.element_count_complies"]], "flip_roles() (compas_timber.connections.platejoint method)": [[220, "compas_timber.connections.PlateJoint.flip_roles"]], "from_json() (compas_timber.connections.platejoint class method)": [[221, "compas_timber.connections.PlateJoint.from_json"]], "from_jsonstring() (compas_timber.connections.platejoint class method)": [[222, "compas_timber.connections.PlateJoint.from_jsonstring"]], "get_interface_for_plate() (compas_timber.connections.platejoint method)": [[223, "compas_timber.connections.PlateJoint.get_interface_for_plate"]], "promote_cluster() (compas_timber.connections.platejoint class method)": [[224, "compas_timber.connections.PlateJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.platejoint class method)": [[225, "compas_timber.connections.PlateJoint.promote_joint_candidate"]], "reorder_planes_and_outlines() (compas_timber.connections.platejoint method)": [[226, "compas_timber.connections.PlateJoint.reorder_planes_and_outlines"]], "restore_beams_from_keys() (compas_timber.connections.platejoint method)": [[227, "compas_timber.connections.PlateJoint.restore_beams_from_keys"]], "restore_plates_from_keys() (compas_timber.connections.platejoint method)": [[228, "compas_timber.connections.PlateJoint.restore_plates_from_keys"]], "sha256() (compas_timber.connections.platejoint method)": [[229, "compas_timber.connections.PlateJoint.sha256"]], "to_json() (compas_timber.connections.platejoint method)": [[230, "compas_timber.connections.PlateJoint.to_json"]], "to_jsonstring() (compas_timber.connections.platejoint method)": [[231, "compas_timber.connections.PlateJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.platejoint class method)": [[232, "compas_timber.connections.PlateJoint.validate_data"]], "platelbuttjoint (class in compas_timber.connections)": [[233, "compas_timber.connections.PlateLButtJoint"]], "tostring() (compas_timber.connections.platelbuttjoint method)": [[234, "compas_timber.connections.PlateLButtJoint.ToString"]], "add_extensions() (compas_timber.connections.platelbuttjoint method)": [[235, "compas_timber.connections.PlateLButtJoint.add_extensions"]], "add_features() (compas_timber.connections.platelbuttjoint method)": [[236, "compas_timber.connections.PlateLButtJoint.add_features"]], "calculate_topology() (compas_timber.connections.platelbuttjoint method)": [[237, "compas_timber.connections.PlateLButtJoint.calculate_topology"]], "check_elements_compatibility() (compas_timber.connections.platelbuttjoint method)": [[238, "compas_timber.connections.PlateLButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.platelbuttjoint method)": [[239, "compas_timber.connections.PlateLButtJoint.copy"]], "create() (compas_timber.connections.platelbuttjoint class method)": [[240, "compas_timber.connections.PlateLButtJoint.create"]], "element_count_complies() (compas_timber.connections.platelbuttjoint class method)": [[241, "compas_timber.connections.PlateLButtJoint.element_count_complies"]], "flip_roles() (compas_timber.connections.platelbuttjoint method)": [[242, "compas_timber.connections.PlateLButtJoint.flip_roles"]], "from_json() (compas_timber.connections.platelbuttjoint class method)": [[243, "compas_timber.connections.PlateLButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.platelbuttjoint class method)": [[244, "compas_timber.connections.PlateLButtJoint.from_jsonstring"]], "get_interface_for_plate() (compas_timber.connections.platelbuttjoint method)": [[245, "compas_timber.connections.PlateLButtJoint.get_interface_for_plate"]], "promote_cluster() (compas_timber.connections.platelbuttjoint class method)": [[246, "compas_timber.connections.PlateLButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.platelbuttjoint class method)": [[247, "compas_timber.connections.PlateLButtJoint.promote_joint_candidate"]], "reorder_planes_and_outlines() (compas_timber.connections.platelbuttjoint method)": [[248, "compas_timber.connections.PlateLButtJoint.reorder_planes_and_outlines"]], "restore_beams_from_keys() (compas_timber.connections.platelbuttjoint method)": [[249, "compas_timber.connections.PlateLButtJoint.restore_beams_from_keys"]], "restore_plates_from_keys() (compas_timber.connections.platelbuttjoint method)": [[250, "compas_timber.connections.PlateLButtJoint.restore_plates_from_keys"]], "sha256() (compas_timber.connections.platelbuttjoint method)": [[251, "compas_timber.connections.PlateLButtJoint.sha256"]], "to_json() (compas_timber.connections.platelbuttjoint method)": [[252, "compas_timber.connections.PlateLButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.platelbuttjoint method)": [[253, "compas_timber.connections.PlateLButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.platelbuttjoint class method)": [[254, "compas_timber.connections.PlateLButtJoint.validate_data"]], "platemiterjoint (class in compas_timber.connections)": [[255, "compas_timber.connections.PlateMiterJoint"]], "tostring() (compas_timber.connections.platemiterjoint method)": [[256, "compas_timber.connections.PlateMiterJoint.ToString"]], "add_extensions() (compas_timber.connections.platemiterjoint method)": [[257, "compas_timber.connections.PlateMiterJoint.add_extensions"]], "add_features() (compas_timber.connections.platemiterjoint method)": [[258, "compas_timber.connections.PlateMiterJoint.add_features"]], "calculate_topology() (compas_timber.connections.platemiterjoint method)": [[259, "compas_timber.connections.PlateMiterJoint.calculate_topology"]], "check_elements_compatibility() (compas_timber.connections.platemiterjoint method)": [[260, "compas_timber.connections.PlateMiterJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.platemiterjoint method)": [[261, "compas_timber.connections.PlateMiterJoint.copy"]], "create() (compas_timber.connections.platemiterjoint class method)": [[262, "compas_timber.connections.PlateMiterJoint.create"]], "element_count_complies() (compas_timber.connections.platemiterjoint class method)": [[263, "compas_timber.connections.PlateMiterJoint.element_count_complies"]], "flip_roles() (compas_timber.connections.platemiterjoint method)": [[264, "compas_timber.connections.PlateMiterJoint.flip_roles"]], "from_json() (compas_timber.connections.platemiterjoint class method)": [[265, "compas_timber.connections.PlateMiterJoint.from_json"]], "from_jsonstring() (compas_timber.connections.platemiterjoint class method)": [[266, "compas_timber.connections.PlateMiterJoint.from_jsonstring"]], "get_interface_for_plate() (compas_timber.connections.platemiterjoint method)": [[267, "compas_timber.connections.PlateMiterJoint.get_interface_for_plate"]], "promote_cluster() (compas_timber.connections.platemiterjoint class method)": [[268, "compas_timber.connections.PlateMiterJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.platemiterjoint class method)": [[269, "compas_timber.connections.PlateMiterJoint.promote_joint_candidate"]], "reorder_planes_and_outlines() (compas_timber.connections.platemiterjoint method)": [[270, "compas_timber.connections.PlateMiterJoint.reorder_planes_and_outlines"]], "restore_beams_from_keys() (compas_timber.connections.platemiterjoint method)": [[271, "compas_timber.connections.PlateMiterJoint.restore_beams_from_keys"]], "restore_plates_from_keys() (compas_timber.connections.platemiterjoint method)": [[272, "compas_timber.connections.PlateMiterJoint.restore_plates_from_keys"]], "sha256() (compas_timber.connections.platemiterjoint method)": [[273, "compas_timber.connections.PlateMiterJoint.sha256"]], "to_json() (compas_timber.connections.platemiterjoint method)": [[274, "compas_timber.connections.PlateMiterJoint.to_json"]], "to_jsonstring() (compas_timber.connections.platemiterjoint method)": [[275, "compas_timber.connections.PlateMiterJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.platemiterjoint class method)": [[276, "compas_timber.connections.PlateMiterJoint.validate_data"]], "platetbuttjoint (class in compas_timber.connections)": [[277, "compas_timber.connections.PlateTButtJoint"]], "tostring() (compas_timber.connections.platetbuttjoint method)": [[278, "compas_timber.connections.PlateTButtJoint.ToString"]], "add_extensions() (compas_timber.connections.platetbuttjoint method)": [[279, "compas_timber.connections.PlateTButtJoint.add_extensions"]], "add_features() (compas_timber.connections.platetbuttjoint method)": [[280, "compas_timber.connections.PlateTButtJoint.add_features"]], "calculate_topology() (compas_timber.connections.platetbuttjoint method)": [[281, "compas_timber.connections.PlateTButtJoint.calculate_topology"]], "check_elements_compatibility() (compas_timber.connections.platetbuttjoint method)": [[282, "compas_timber.connections.PlateTButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.platetbuttjoint method)": [[283, "compas_timber.connections.PlateTButtJoint.copy"]], "create() (compas_timber.connections.platetbuttjoint class method)": [[284, "compas_timber.connections.PlateTButtJoint.create"]], "element_count_complies() (compas_timber.connections.platetbuttjoint class method)": [[285, "compas_timber.connections.PlateTButtJoint.element_count_complies"]], "flip_roles() (compas_timber.connections.platetbuttjoint method)": [[286, "compas_timber.connections.PlateTButtJoint.flip_roles"]], "from_json() (compas_timber.connections.platetbuttjoint class method)": [[287, "compas_timber.connections.PlateTButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.platetbuttjoint class method)": [[288, "compas_timber.connections.PlateTButtJoint.from_jsonstring"]], "get_interface_for_plate() (compas_timber.connections.platetbuttjoint method)": [[289, "compas_timber.connections.PlateTButtJoint.get_interface_for_plate"]], "promote_cluster() (compas_timber.connections.platetbuttjoint class method)": [[290, "compas_timber.connections.PlateTButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.platetbuttjoint class method)": [[291, "compas_timber.connections.PlateTButtJoint.promote_joint_candidate"]], "reorder_planes_and_outlines() (compas_timber.connections.platetbuttjoint method)": [[292, "compas_timber.connections.PlateTButtJoint.reorder_planes_and_outlines"]], "restore_beams_from_keys() (compas_timber.connections.platetbuttjoint method)": [[293, "compas_timber.connections.PlateTButtJoint.restore_beams_from_keys"]], "restore_plates_from_keys() (compas_timber.connections.platetbuttjoint method)": [[294, "compas_timber.connections.PlateTButtJoint.restore_plates_from_keys"]], "sha256() (compas_timber.connections.platetbuttjoint method)": [[295, "compas_timber.connections.PlateTButtJoint.sha256"]], "to_json() (compas_timber.connections.platetbuttjoint method)": [[296, "compas_timber.connections.PlateTButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.platetbuttjoint method)": [[297, "compas_timber.connections.PlateTButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.platetbuttjoint class method)": [[298, "compas_timber.connections.PlateTButtJoint.validate_data"]], "platetoplateinterface (class in compas_timber.connections)": [[299, "compas_timber.connections.PlateToPlateInterface"]], "as_plane() (compas_timber.connections.platetoplateinterface method)": [[300, "compas_timber.connections.PlateToPlateInterface.as_plane"]], "quadanalyzer() (in module compas_timber.connections)": [[301, "compas_timber.connections.QuadAnalyzer"]], "tbirdsmouthjoint (class in compas_timber.connections)": [[302, "compas_timber.connections.TBirdsmouthJoint"]], "tostring() (compas_timber.connections.tbirdsmouthjoint method)": [[303, "compas_timber.connections.TBirdsmouthJoint.ToString"]], "add_extensions() (compas_timber.connections.tbirdsmouthjoint method)": [[304, "compas_timber.connections.TBirdsmouthJoint.add_extensions"]], "add_features() (compas_timber.connections.tbirdsmouthjoint method)": [[305, "compas_timber.connections.TBirdsmouthJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbirdsmouthjoint method)": [[306, "compas_timber.connections.TBirdsmouthJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbirdsmouthjoint method)": [[307, "compas_timber.connections.TBirdsmouthJoint.copy"]], "create() (compas_timber.connections.tbirdsmouthjoint class method)": [[308, "compas_timber.connections.TBirdsmouthJoint.create"]], "element_count_complies() (compas_timber.connections.tbirdsmouthjoint class method)": [[309, "compas_timber.connections.TBirdsmouthJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbirdsmouthjoint class method)": [[310, "compas_timber.connections.TBirdsmouthJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbirdsmouthjoint class method)": [[311, "compas_timber.connections.TBirdsmouthJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tbirdsmouthjoint class method)": [[312, "compas_timber.connections.TBirdsmouthJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tbirdsmouthjoint class method)": [[313, "compas_timber.connections.TBirdsmouthJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tbirdsmouthjoint method)": [[314, "compas_timber.connections.TBirdsmouthJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbirdsmouthjoint method)": [[315, "compas_timber.connections.TBirdsmouthJoint.sha256"]], "to_json() (compas_timber.connections.tbirdsmouthjoint method)": [[316, "compas_timber.connections.TBirdsmouthJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbirdsmouthjoint method)": [[317, "compas_timber.connections.TBirdsmouthJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbirdsmouthjoint class method)": [[318, "compas_timber.connections.TBirdsmouthJoint.validate_data"]], "tbuttjoint (class in compas_timber.connections)": [[319, "compas_timber.connections.TButtJoint"]], "tostring() (compas_timber.connections.tbuttjoint method)": [[320, "compas_timber.connections.TButtJoint.ToString"]], "add_extensions() (compas_timber.connections.tbuttjoint method)": [[321, "compas_timber.connections.TButtJoint.add_extensions"]], "add_features() (compas_timber.connections.tbuttjoint method)": [[322, "compas_timber.connections.TButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tbuttjoint method)": [[323, "compas_timber.connections.TButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tbuttjoint method)": [[324, "compas_timber.connections.TButtJoint.copy"]], "create() (compas_timber.connections.tbuttjoint class method)": [[325, "compas_timber.connections.TButtJoint.create"]], "element_count_complies() (compas_timber.connections.tbuttjoint class method)": [[326, "compas_timber.connections.TButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.tbuttjoint class method)": [[327, "compas_timber.connections.TButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tbuttjoint class method)": [[328, "compas_timber.connections.TButtJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tbuttjoint class method)": [[329, "compas_timber.connections.TButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tbuttjoint class method)": [[330, "compas_timber.connections.TButtJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tbuttjoint method)": [[331, "compas_timber.connections.TButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tbuttjoint method)": [[332, "compas_timber.connections.TButtJoint.sha256"]], "to_json() (compas_timber.connections.tbuttjoint method)": [[333, "compas_timber.connections.TButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tbuttjoint method)": [[334, "compas_timber.connections.TButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tbuttjoint class method)": [[335, "compas_timber.connections.TButtJoint.validate_data"]], "tdovetailjoint (class in compas_timber.connections)": [[336, "compas_timber.connections.TDovetailJoint"]], "tostring() (compas_timber.connections.tdovetailjoint method)": [[337, "compas_timber.connections.TDovetailJoint.ToString"]], "add_extensions() (compas_timber.connections.tdovetailjoint method)": [[338, "compas_timber.connections.TDovetailJoint.add_extensions"]], "add_features() (compas_timber.connections.tdovetailjoint method)": [[339, "compas_timber.connections.TDovetailJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tdovetailjoint method)": [[340, "compas_timber.connections.TDovetailJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tdovetailjoint method)": [[341, "compas_timber.connections.TDovetailJoint.copy"]], "create() (compas_timber.connections.tdovetailjoint class method)": [[342, "compas_timber.connections.TDovetailJoint.create"]], "define_dovetail_tool() (compas_timber.connections.tdovetailjoint method)": [[343, "compas_timber.connections.TDovetailJoint.define_dovetail_tool"]], "element_count_complies() (compas_timber.connections.tdovetailjoint class method)": [[344, "compas_timber.connections.TDovetailJoint.element_count_complies"]], "from_json() (compas_timber.connections.tdovetailjoint class method)": [[345, "compas_timber.connections.TDovetailJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tdovetailjoint class method)": [[346, "compas_timber.connections.TDovetailJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tdovetailjoint class method)": [[347, "compas_timber.connections.TDovetailJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tdovetailjoint class method)": [[348, "compas_timber.connections.TDovetailJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tdovetailjoint method)": [[349, "compas_timber.connections.TDovetailJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tdovetailjoint method)": [[350, "compas_timber.connections.TDovetailJoint.sha256"]], "to_json() (compas_timber.connections.tdovetailjoint method)": [[351, "compas_timber.connections.TDovetailJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tdovetailjoint method)": [[352, "compas_timber.connections.TDovetailJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tdovetailjoint class method)": [[353, "compas_timber.connections.TDovetailJoint.validate_data"]], "tlapjoint (class in compas_timber.connections)": [[354, "compas_timber.connections.TLapJoint"]], "tostring() (compas_timber.connections.tlapjoint method)": [[355, "compas_timber.connections.TLapJoint.ToString"]], "add_extensions() (compas_timber.connections.tlapjoint method)": [[356, "compas_timber.connections.TLapJoint.add_extensions"]], "add_features() (compas_timber.connections.tlapjoint method)": [[357, "compas_timber.connections.TLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tlapjoint method)": [[358, "compas_timber.connections.TLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tlapjoint method)": [[359, "compas_timber.connections.TLapJoint.copy"]], "create() (compas_timber.connections.tlapjoint class method)": [[360, "compas_timber.connections.TLapJoint.create"]], "element_count_complies() (compas_timber.connections.tlapjoint class method)": [[361, "compas_timber.connections.TLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.tlapjoint class method)": [[362, "compas_timber.connections.TLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tlapjoint class method)": [[363, "compas_timber.connections.TLapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tlapjoint class method)": [[364, "compas_timber.connections.TLapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tlapjoint class method)": [[365, "compas_timber.connections.TLapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tlapjoint method)": [[366, "compas_timber.connections.TLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tlapjoint method)": [[367, "compas_timber.connections.TLapJoint.sha256"]], "to_json() (compas_timber.connections.tlapjoint method)": [[368, "compas_timber.connections.TLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tlapjoint method)": [[369, "compas_timber.connections.TLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tlapjoint class method)": [[370, "compas_timber.connections.TLapJoint.validate_data"]], "toliginajoint (class in compas_timber.connections)": [[371, "compas_timber.connections.TOliGinaJoint"]], "tostring() (compas_timber.connections.toliginajoint method)": [[372, "compas_timber.connections.TOliGinaJoint.ToString"]], "add_extensions() (compas_timber.connections.toliginajoint method)": [[373, "compas_timber.connections.TOliGinaJoint.add_extensions"]], "add_features() (compas_timber.connections.toliginajoint method)": [[374, "compas_timber.connections.TOliGinaJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.toliginajoint method)": [[375, "compas_timber.connections.TOliGinaJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.toliginajoint method)": [[376, "compas_timber.connections.TOliGinaJoint.copy"]], "create() (compas_timber.connections.toliginajoint class method)": [[377, "compas_timber.connections.TOliGinaJoint.create"]], "element_count_complies() (compas_timber.connections.toliginajoint class method)": [[378, "compas_timber.connections.TOliGinaJoint.element_count_complies"]], "from_json() (compas_timber.connections.toliginajoint class method)": [[379, "compas_timber.connections.TOliGinaJoint.from_json"]], "from_jsonstring() (compas_timber.connections.toliginajoint class method)": [[380, "compas_timber.connections.TOliGinaJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.toliginajoint class method)": [[381, "compas_timber.connections.TOliGinaJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.toliginajoint class method)": [[382, "compas_timber.connections.TOliGinaJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.toliginajoint method)": [[383, "compas_timber.connections.TOliGinaJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.toliginajoint method)": [[384, "compas_timber.connections.TOliGinaJoint.sha256"]], "to_json() (compas_timber.connections.toliginajoint method)": [[385, "compas_timber.connections.TOliGinaJoint.to_json"]], "to_jsonstring() (compas_timber.connections.toliginajoint method)": [[386, "compas_timber.connections.TOliGinaJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.toliginajoint class method)": [[387, "compas_timber.connections.TOliGinaJoint.validate_data"]], "tstepjoint (class in compas_timber.connections)": [[388, "compas_timber.connections.TStepJoint"]], "tostring() (compas_timber.connections.tstepjoint method)": [[389, "compas_timber.connections.TStepJoint.ToString"]], "add_extensions() (compas_timber.connections.tstepjoint method)": [[390, "compas_timber.connections.TStepJoint.add_extensions"]], "add_features() (compas_timber.connections.tstepjoint method)": [[391, "compas_timber.connections.TStepJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tstepjoint method)": [[392, "compas_timber.connections.TStepJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tstepjoint method)": [[393, "compas_timber.connections.TStepJoint.copy"]], "create() (compas_timber.connections.tstepjoint class method)": [[394, "compas_timber.connections.TStepJoint.create"]], "element_count_complies() (compas_timber.connections.tstepjoint class method)": [[395, "compas_timber.connections.TStepJoint.element_count_complies"]], "from_json() (compas_timber.connections.tstepjoint class method)": [[396, "compas_timber.connections.TStepJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tstepjoint class method)": [[397, "compas_timber.connections.TStepJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tstepjoint class method)": [[398, "compas_timber.connections.TStepJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tstepjoint class method)": [[399, "compas_timber.connections.TStepJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tstepjoint method)": [[400, "compas_timber.connections.TStepJoint.restore_beams_from_keys"]], "set_step_depths() (compas_timber.connections.tstepjoint method)": [[401, "compas_timber.connections.TStepJoint.set_step_depths"]], "sha256() (compas_timber.connections.tstepjoint method)": [[402, "compas_timber.connections.TStepJoint.sha256"]], "to_json() (compas_timber.connections.tstepjoint method)": [[403, "compas_timber.connections.TStepJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tstepjoint method)": [[404, "compas_timber.connections.TStepJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tstepjoint class method)": [[405, "compas_timber.connections.TStepJoint.validate_data"]], "tenonmortisejoint (class in compas_timber.connections)": [[406, "compas_timber.connections.TenonMortiseJoint"]], "tostring() (compas_timber.connections.tenonmortisejoint method)": [[407, "compas_timber.connections.TenonMortiseJoint.ToString"]], "add_extensions() (compas_timber.connections.tenonmortisejoint method)": [[408, "compas_timber.connections.TenonMortiseJoint.add_extensions"]], "add_features() (compas_timber.connections.tenonmortisejoint method)": [[409, "compas_timber.connections.TenonMortiseJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.tenonmortisejoint method)": [[410, "compas_timber.connections.TenonMortiseJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.tenonmortisejoint method)": [[411, "compas_timber.connections.TenonMortiseJoint.copy"]], "create() (compas_timber.connections.tenonmortisejoint class method)": [[412, "compas_timber.connections.TenonMortiseJoint.create"]], "element_count_complies() (compas_timber.connections.tenonmortisejoint class method)": [[413, "compas_timber.connections.TenonMortiseJoint.element_count_complies"]], "from_json() (compas_timber.connections.tenonmortisejoint class method)": [[414, "compas_timber.connections.TenonMortiseJoint.from_json"]], "from_jsonstring() (compas_timber.connections.tenonmortisejoint class method)": [[415, "compas_timber.connections.TenonMortiseJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.tenonmortisejoint class method)": [[416, "compas_timber.connections.TenonMortiseJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.tenonmortisejoint class method)": [[417, "compas_timber.connections.TenonMortiseJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.tenonmortisejoint method)": [[418, "compas_timber.connections.TenonMortiseJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.tenonmortisejoint method)": [[419, "compas_timber.connections.TenonMortiseJoint.sha256"]], "to_json() (compas_timber.connections.tenonmortisejoint method)": [[420, "compas_timber.connections.TenonMortiseJoint.to_json"]], "to_jsonstring() (compas_timber.connections.tenonmortisejoint method)": [[421, "compas_timber.connections.TenonMortiseJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.tenonmortisejoint class method)": [[422, "compas_timber.connections.TenonMortiseJoint.validate_data"]], "tripletanalyzer() (in module compas_timber.connections)": [[423, "compas_timber.connections.TripletAnalyzer"]], "walljoint (class in compas_timber.connections)": [[424, "compas_timber.connections.WallJoint"]], "tostring() (compas_timber.connections.walljoint method)": [[425, "compas_timber.connections.WallJoint.ToString"]], "add_extensions() (compas_timber.connections.walljoint method)": [[426, "compas_timber.connections.WallJoint.add_extensions"]], "add_features() (compas_timber.connections.walljoint method)": [[427, "compas_timber.connections.WallJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.walljoint method)": [[428, "compas_timber.connections.WallJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.walljoint method)": [[429, "compas_timber.connections.WallJoint.copy"]], "create() (compas_timber.connections.walljoint class method)": [[430, "compas_timber.connections.WallJoint.create"]], "element_count_complies() (compas_timber.connections.walljoint class method)": [[431, "compas_timber.connections.WallJoint.element_count_complies"]], "flip_roles() (compas_timber.connections.walljoint method)": [[432, "compas_timber.connections.WallJoint.flip_roles"]], "from_json() (compas_timber.connections.walljoint class method)": [[433, "compas_timber.connections.WallJoint.from_json"]], "from_jsonstring() (compas_timber.connections.walljoint class method)": [[434, "compas_timber.connections.WallJoint.from_jsonstring"]], "get_interface_for_wall() (compas_timber.connections.walljoint method)": [[435, "compas_timber.connections.WallJoint.get_interface_for_wall"]], "promote_cluster() (compas_timber.connections.walljoint class method)": [[436, "compas_timber.connections.WallJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.walljoint class method)": [[437, "compas_timber.connections.WallJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.walljoint method)": [[438, "compas_timber.connections.WallJoint.restore_beams_from_keys"]], "restore_walls_from_keys() (compas_timber.connections.walljoint method)": [[439, "compas_timber.connections.WallJoint.restore_walls_from_keys"]], "sha256() (compas_timber.connections.walljoint method)": [[440, "compas_timber.connections.WallJoint.sha256"]], "to_json() (compas_timber.connections.walljoint method)": [[441, "compas_timber.connections.WallJoint.to_json"]], "to_jsonstring() (compas_timber.connections.walljoint method)": [[442, "compas_timber.connections.WallJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.walljoint class method)": [[443, "compas_timber.connections.WallJoint.validate_data"]], "xlapjoint (class in compas_timber.connections)": [[444, "compas_timber.connections.XLapJoint"]], "tostring() (compas_timber.connections.xlapjoint method)": [[445, "compas_timber.connections.XLapJoint.ToString"]], "add_extensions() (compas_timber.connections.xlapjoint method)": [[446, "compas_timber.connections.XLapJoint.add_extensions"]], "add_features() (compas_timber.connections.xlapjoint method)": [[447, "compas_timber.connections.XLapJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xlapjoint method)": [[448, "compas_timber.connections.XLapJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xlapjoint method)": [[449, "compas_timber.connections.XLapJoint.copy"]], "create() (compas_timber.connections.xlapjoint class method)": [[450, "compas_timber.connections.XLapJoint.create"]], "element_count_complies() (compas_timber.connections.xlapjoint class method)": [[451, "compas_timber.connections.XLapJoint.element_count_complies"]], "from_json() (compas_timber.connections.xlapjoint class method)": [[452, "compas_timber.connections.XLapJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xlapjoint class method)": [[453, "compas_timber.connections.XLapJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.xlapjoint class method)": [[454, "compas_timber.connections.XLapJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.xlapjoint class method)": [[455, "compas_timber.connections.XLapJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.xlapjoint method)": [[456, "compas_timber.connections.XLapJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xlapjoint method)": [[457, "compas_timber.connections.XLapJoint.sha256"]], "to_json() (compas_timber.connections.xlapjoint method)": [[458, "compas_timber.connections.XLapJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xlapjoint method)": [[459, "compas_timber.connections.XLapJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xlapjoint class method)": [[460, "compas_timber.connections.XLapJoint.validate_data"]], "xnotchjoint (class in compas_timber.connections)": [[461, "compas_timber.connections.XNotchJoint"]], "tostring() (compas_timber.connections.xnotchjoint method)": [[462, "compas_timber.connections.XNotchJoint.ToString"]], "add_extensions() (compas_timber.connections.xnotchjoint method)": [[463, "compas_timber.connections.XNotchJoint.add_extensions"]], "add_features() (compas_timber.connections.xnotchjoint method)": [[464, "compas_timber.connections.XNotchJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.xnotchjoint method)": [[465, "compas_timber.connections.XNotchJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.xnotchjoint method)": [[466, "compas_timber.connections.XNotchJoint.copy"]], "create() (compas_timber.connections.xnotchjoint class method)": [[467, "compas_timber.connections.XNotchJoint.create"]], "element_count_complies() (compas_timber.connections.xnotchjoint class method)": [[468, "compas_timber.connections.XNotchJoint.element_count_complies"]], "from_json() (compas_timber.connections.xnotchjoint class method)": [[469, "compas_timber.connections.XNotchJoint.from_json"]], "from_jsonstring() (compas_timber.connections.xnotchjoint class method)": [[470, "compas_timber.connections.XNotchJoint.from_jsonstring"]], "promote_cluster() (compas_timber.connections.xnotchjoint class method)": [[471, "compas_timber.connections.XNotchJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.xnotchjoint class method)": [[472, "compas_timber.connections.XNotchJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.xnotchjoint method)": [[473, "compas_timber.connections.XNotchJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.xnotchjoint method)": [[474, "compas_timber.connections.XNotchJoint.sha256"]], "to_json() (compas_timber.connections.xnotchjoint method)": [[475, "compas_timber.connections.XNotchJoint.to_json"]], "to_jsonstring() (compas_timber.connections.xnotchjoint method)": [[476, "compas_timber.connections.XNotchJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.xnotchjoint class method)": [[477, "compas_timber.connections.XNotchJoint.validate_data"]], "ybuttjoint (class in compas_timber.connections)": [[478, "compas_timber.connections.YButtJoint"]], "tostring() (compas_timber.connections.ybuttjoint method)": [[479, "compas_timber.connections.YButtJoint.ToString"]], "add_extensions() (compas_timber.connections.ybuttjoint method)": [[480, "compas_timber.connections.YButtJoint.add_extensions"]], "add_features() (compas_timber.connections.ybuttjoint method)": [[481, "compas_timber.connections.YButtJoint.add_features"]], "check_elements_compatibility() (compas_timber.connections.ybuttjoint method)": [[482, "compas_timber.connections.YButtJoint.check_elements_compatibility"]], "copy() (compas_timber.connections.ybuttjoint method)": [[483, "compas_timber.connections.YButtJoint.copy"]], "create() (compas_timber.connections.ybuttjoint class method)": [[484, "compas_timber.connections.YButtJoint.create"]], "cross_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[485, "compas_timber.connections.YButtJoint.cross_beam_ref_side_index"]], "element_count_complies() (compas_timber.connections.ybuttjoint class method)": [[486, "compas_timber.connections.YButtJoint.element_count_complies"]], "from_json() (compas_timber.connections.ybuttjoint class method)": [[487, "compas_timber.connections.YButtJoint.from_json"]], "from_jsonstring() (compas_timber.connections.ybuttjoint class method)": [[488, "compas_timber.connections.YButtJoint.from_jsonstring"]], "get_miter_planes() (compas_timber.connections.ybuttjoint method)": [[489, "compas_timber.connections.YButtJoint.get_miter_planes"]], "main_beam_ref_side_index() (compas_timber.connections.ybuttjoint method)": [[490, "compas_timber.connections.YButtJoint.main_beam_ref_side_index"]], "promote_cluster() (compas_timber.connections.ybuttjoint class method)": [[491, "compas_timber.connections.YButtJoint.promote_cluster"]], "promote_joint_candidate() (compas_timber.connections.ybuttjoint class method)": [[492, "compas_timber.connections.YButtJoint.promote_joint_candidate"]], "restore_beams_from_keys() (compas_timber.connections.ybuttjoint method)": [[493, "compas_timber.connections.YButtJoint.restore_beams_from_keys"]], "sha256() (compas_timber.connections.ybuttjoint method)": [[494, "compas_timber.connections.YButtJoint.sha256"]], "to_json() (compas_timber.connections.ybuttjoint method)": [[495, "compas_timber.connections.YButtJoint.to_json"]], "to_jsonstring() (compas_timber.connections.ybuttjoint method)": [[496, "compas_timber.connections.YButtJoint.to_jsonstring"]], "validate_data() (compas_timber.connections.ybuttjoint class method)": [[497, "compas_timber.connections.YButtJoint.validate_data"]], "beam_ref_side_incidence() (in module compas_timber.connections)": [[498, "compas_timber.connections.beam_ref_side_incidence"]], "beam_ref_side_incidence_with_vector() (in module compas_timber.connections)": [[499, "compas_timber.connections.beam_ref_side_incidence_with_vector"]], "find_neighboring_elements() (in module compas_timber.connections)": [[500, "compas_timber.connections.find_neighboring_elements"]], "point_centerline_towards_joint() (in module compas_timber.connections)": [[501, "compas_timber.connections.point_centerline_towards_joint"]], "categoryrule (class in compas_timber.design)": [[502, "compas_timber.design.CategoryRule"]], "tostring() (compas_timber.design.categoryrule method)": [[503, "compas_timber.design.CategoryRule.ToString"]], "comply() (compas_timber.design.categoryrule method)": [[504, "compas_timber.design.CategoryRule.comply"]], "get_category_rules() (compas_timber.design.categoryrule static method)": [[505, "compas_timber.design.CategoryRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.categoryrule static method)": [[506, "compas_timber.design.CategoryRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.categoryrule static method)": [[507, "compas_timber.design.CategoryRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.categoryrule static method)": [[508, "compas_timber.design.CategoryRule.joints_from_beams_and_rules"]], "reorder() (compas_timber.design.categoryrule method)": [[509, "compas_timber.design.CategoryRule.reorder"]], "debuginfomation (class in compas_timber.design)": [[510, "compas_timber.design.DebugInfomation"]], "tostring() (compas_timber.design.debuginfomation method)": [[511, "compas_timber.design.DebugInfomation.ToString"]], "add_fastener_error() (compas_timber.design.debuginfomation method)": [[512, "compas_timber.design.DebugInfomation.add_fastener_error"]], "add_feature_error() (compas_timber.design.debuginfomation method)": [[513, "compas_timber.design.DebugInfomation.add_feature_error"]], "add_joint_error() (compas_timber.design.debuginfomation method)": [[514, "compas_timber.design.DebugInfomation.add_joint_error"]], "directrule (class in compas_timber.design)": [[515, "compas_timber.design.DirectRule"]], "tostring() (compas_timber.design.directrule method)": [[516, "compas_timber.design.DirectRule.ToString"]], "comply() (compas_timber.design.directrule method)": [[517, "compas_timber.design.DirectRule.comply"]], "contains() (compas_timber.design.directrule method)": [[518, "compas_timber.design.DirectRule.contains"]], "get_category_rules() (compas_timber.design.directrule static method)": [[519, "compas_timber.design.DirectRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.directrule static method)": [[520, "compas_timber.design.DirectRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.directrule static method)": [[521, "compas_timber.design.DirectRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.directrule static method)": [[522, "compas_timber.design.DirectRule.joints_from_beams_and_rules"]], "featuredefinition (class in compas_timber.design)": [[523, "compas_timber.design.FeatureDefinition"]], "tostring() (compas_timber.design.featuredefinition method)": [[524, "compas_timber.design.FeatureDefinition.ToString"]], "jointdefinition (class in compas_timber.design)": [[525, "compas_timber.design.JointDefinition"]], "tostring() (compas_timber.design.jointdefinition method)": [[526, "compas_timber.design.JointDefinition.ToString"]], "is_identical() (compas_timber.design.jointdefinition method)": [[527, "compas_timber.design.JointDefinition.is_identical"]], "match() (compas_timber.design.jointdefinition method)": [[528, "compas_timber.design.JointDefinition.match"]], "jointrule (class in compas_timber.design)": [[529, "compas_timber.design.JointRule"]], "comply() (compas_timber.design.jointrule method)": [[530, "compas_timber.design.JointRule.comply"]], "get_category_rules() (compas_timber.design.jointrule static method)": [[531, "compas_timber.design.JointRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.jointrule static method)": [[532, "compas_timber.design.JointRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.jointrule static method)": [[533, "compas_timber.design.JointRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.jointrule static method)": [[534, "compas_timber.design.JointRule.joints_from_beams_and_rules"]], "surfacemodel (class in compas_timber.design)": [[535, "compas_timber.design.SurfaceModel"]], "beam_category_names() (compas_timber.design.surfacemodel class method)": [[536, "compas_timber.design.SurfaceModel.beam_category_names"]], "create_model() (compas_timber.design.surfacemodel method)": [[537, "compas_timber.design.SurfaceModel.create_model"]], "cull_overlaps() (compas_timber.design.surfacemodel method)": [[538, "compas_timber.design.SurfaceModel.cull_overlaps"]], "distance_between_elements() (compas_timber.design.surfacemodel method)": [[539, "compas_timber.design.SurfaceModel.distance_between_elements"]], "generate_frame() (compas_timber.design.surfacemodel method)": [[540, "compas_timber.design.SurfaceModel.generate_frame"]], "generate_perimeter_beams() (compas_timber.design.surfacemodel method)": [[541, "compas_timber.design.SurfaceModel.generate_perimeter_beams"]], "generate_plates() (compas_timber.design.surfacemodel method)": [[542, "compas_timber.design.SurfaceModel.generate_plates"]], "generate_stud_lines() (compas_timber.design.surfacemodel method)": [[543, "compas_timber.design.SurfaceModel.generate_stud_lines"]], "generate_studs() (compas_timber.design.surfacemodel method)": [[544, "compas_timber.design.SurfaceModel.generate_studs"]], "generate_windows() (compas_timber.design.surfacemodel method)": [[545, "compas_timber.design.SurfaceModel.generate_windows"]], "get_beam_intersections() (compas_timber.design.surfacemodel method)": [[546, "compas_timber.design.SurfaceModel.get_beam_intersections"]], "get_interior_segment_indices() (compas_timber.design.surfacemodel method)": [[547, "compas_timber.design.SurfaceModel.get_interior_segment_indices"]], "offset_elements() (compas_timber.design.surfacemodel method)": [[548, "compas_timber.design.SurfaceModel.offset_elements"]], "parse_loops() (compas_timber.design.surfacemodel method)": [[549, "compas_timber.design.SurfaceModel.parse_loops"]], "trim_jack_studs() (compas_timber.design.surfacemodel method)": [[550, "compas_timber.design.SurfaceModel.trim_jack_studs"]], "trim_king_studs() (compas_timber.design.surfacemodel method)": [[551, "compas_timber.design.SurfaceModel.trim_king_studs"]], "trim_studs() (compas_timber.design.surfacemodel method)": [[552, "compas_timber.design.SurfaceModel.trim_studs"]], "topologyrule (class in compas_timber.design)": [[553, "compas_timber.design.TopologyRule"]], "tostring() (compas_timber.design.topologyrule method)": [[554, "compas_timber.design.TopologyRule.ToString"]], "comply() (compas_timber.design.topologyrule method)": [[555, "compas_timber.design.TopologyRule.comply"]], "get_category_rules() (compas_timber.design.topologyrule static method)": [[556, "compas_timber.design.TopologyRule.get_category_rules"]], "get_direct_rules() (compas_timber.design.topologyrule static method)": [[557, "compas_timber.design.TopologyRule.get_direct_rules"]], "get_topology_rules() (compas_timber.design.topologyrule static method)": [[558, "compas_timber.design.TopologyRule.get_topology_rules"]], "joints_from_beams_and_rules() (compas_timber.design.topologyrule static method)": [[559, "compas_timber.design.TopologyRule.joints_from_beams_and_rules"]], "guess_joint_topology_2beams() (in module compas_timber.design)": [[560, "compas_timber.design.guess_joint_topology_2beams"]], "set_default_joints() (in module compas_timber.design)": [[561, "compas_timber.design.set_default_joints"]], "ballnodefastener (class in compas_timber.elements)": [[562, "compas_timber.elements.BallNodeFastener"]], "tostring() (compas_timber.elements.ballnodefastener method)": [[563, "compas_timber.elements.BallNodeFastener.ToString"]], "add_feature() (compas_timber.elements.ballnodefastener method)": [[564, "compas_timber.elements.BallNodeFastener.add_feature"]], "add_features() (compas_timber.elements.ballnodefastener method)": [[565, "compas_timber.elements.BallNodeFastener.add_features"]], "compute_aabb() (compas_timber.elements.ballnodefastener method)": [[566, "compas_timber.elements.BallNodeFastener.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.ballnodefastener method)": [[567, "compas_timber.elements.BallNodeFastener.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.ballnodefastener method)": [[568, "compas_timber.elements.BallNodeFastener.compute_geometry"]], "compute_obb() (compas_timber.elements.ballnodefastener method)": [[569, "compas_timber.elements.BallNodeFastener.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.ballnodefastener method)": [[570, "compas_timber.elements.BallNodeFastener.compute_worldtransformation"]], "copy() (compas_timber.elements.ballnodefastener method)": [[571, "compas_timber.elements.BallNodeFastener.copy"]], "from_json() (compas_timber.elements.ballnodefastener class method)": [[572, "compas_timber.elements.BallNodeFastener.from_json"]], "from_jsonstring() (compas_timber.elements.ballnodefastener class method)": [[573, "compas_timber.elements.BallNodeFastener.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.ballnodefastener method)": [[574, "compas_timber.elements.BallNodeFastener.remove_blank_extension"]], "remove_features() (compas_timber.elements.ballnodefastener method)": [[575, "compas_timber.elements.BallNodeFastener.remove_features"]], "reset() (compas_timber.elements.ballnodefastener method)": [[576, "compas_timber.elements.BallNodeFastener.reset"]], "sha256() (compas_timber.elements.ballnodefastener method)": [[577, "compas_timber.elements.BallNodeFastener.sha256"]], "to_json() (compas_timber.elements.ballnodefastener method)": [[578, "compas_timber.elements.BallNodeFastener.to_json"]], "to_jsonstring() (compas_timber.elements.ballnodefastener method)": [[579, "compas_timber.elements.BallNodeFastener.to_jsonstring"]], "transform() (compas_timber.elements.ballnodefastener method)": [[580, "compas_timber.elements.BallNodeFastener.transform"]], "transformed() (compas_timber.elements.ballnodefastener method)": [[581, "compas_timber.elements.BallNodeFastener.transformed"]], "update_interface() (compas_timber.elements.ballnodefastener method)": [[582, "compas_timber.elements.BallNodeFastener.update_interface"]], "validate_data() (compas_timber.elements.ballnodefastener class method)": [[583, "compas_timber.elements.BallNodeFastener.validate_data"]], "beam (class in compas_timber.elements)": [[584, "compas_timber.elements.Beam"]], "tostring() (compas_timber.elements.beam method)": [[585, "compas_timber.elements.Beam.ToString"]], "add_blank_extension() (compas_timber.elements.beam method)": [[586, "compas_timber.elements.Beam.add_blank_extension"]], "add_feature() (compas_timber.elements.beam method)": [[587, "compas_timber.elements.Beam.add_feature"]], "add_features() (compas_timber.elements.beam method)": [[588, "compas_timber.elements.Beam.add_features"]], "back_side() (compas_timber.elements.beam method)": [[589, "compas_timber.elements.Beam.back_side"]], "compute_aabb() (compas_timber.elements.beam method)": [[590, "compas_timber.elements.Beam.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.beam method)": [[591, "compas_timber.elements.Beam.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.beam method)": [[592, "compas_timber.elements.Beam.compute_geometry"]], "compute_obb() (compas_timber.elements.beam method)": [[593, "compas_timber.elements.Beam.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.beam method)": [[594, "compas_timber.elements.Beam.compute_worldtransformation"]], "copy() (compas_timber.elements.beam method)": [[595, "compas_timber.elements.Beam.copy"]], "endpoint_closest_to_point() (compas_timber.elements.beam method)": [[596, "compas_timber.elements.Beam.endpoint_closest_to_point"]], "extension_to_plane() (compas_timber.elements.beam method)": [[597, "compas_timber.elements.Beam.extension_to_plane"]], "from_centerline() (compas_timber.elements.beam class method)": [[598, "compas_timber.elements.Beam.from_centerline"]], "from_endpoints() (compas_timber.elements.beam class method)": [[599, "compas_timber.elements.Beam.from_endpoints"]], "from_json() (compas_timber.elements.beam class method)": [[600, "compas_timber.elements.Beam.from_json"]], "from_jsonstring() (compas_timber.elements.beam class method)": [[601, "compas_timber.elements.Beam.from_jsonstring"]], "front_side() (compas_timber.elements.beam method)": [[602, "compas_timber.elements.Beam.front_side"]], "get_dimensions_relative_to_side() (compas_timber.elements.beam method)": [[603, "compas_timber.elements.Beam.get_dimensions_relative_to_side"]], "opp_side() (compas_timber.elements.beam method)": [[604, "compas_timber.elements.Beam.opp_side"]], "remove_blank_extension() (compas_timber.elements.beam method)": [[605, "compas_timber.elements.Beam.remove_blank_extension"]], "remove_features() (compas_timber.elements.beam method)": [[606, "compas_timber.elements.Beam.remove_features"]], "reset() (compas_timber.elements.beam method)": [[607, "compas_timber.elements.Beam.reset"]], "sha256() (compas_timber.elements.beam method)": [[608, "compas_timber.elements.Beam.sha256"]], "side_as_surface() (compas_timber.elements.beam method)": [[609, "compas_timber.elements.Beam.side_as_surface"]], "to_json() (compas_timber.elements.beam method)": [[610, "compas_timber.elements.Beam.to_json"]], "to_jsonstring() (compas_timber.elements.beam method)": [[611, "compas_timber.elements.Beam.to_jsonstring"]], "transform() (compas_timber.elements.beam method)": [[612, "compas_timber.elements.Beam.transform"]], "transformed() (compas_timber.elements.beam method)": [[613, "compas_timber.elements.Beam.transformed"]], "validate_data() (compas_timber.elements.beam class method)": [[614, "compas_timber.elements.Beam.validate_data"]], "fastener (class in compas_timber.elements)": [[615, "compas_timber.elements.Fastener"]], "tostring() (compas_timber.elements.fastener method)": [[616, "compas_timber.elements.Fastener.ToString"]], "add_feature() (compas_timber.elements.fastener method)": [[617, "compas_timber.elements.Fastener.add_feature"]], "add_features() (compas_timber.elements.fastener method)": [[618, "compas_timber.elements.Fastener.add_features"]], "compute_aabb() (compas_timber.elements.fastener method)": [[619, "compas_timber.elements.Fastener.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.fastener method)": [[620, "compas_timber.elements.Fastener.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.fastener method)": [[621, "compas_timber.elements.Fastener.compute_geometry"]], "compute_obb() (compas_timber.elements.fastener method)": [[622, "compas_timber.elements.Fastener.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.fastener method)": [[623, "compas_timber.elements.Fastener.compute_worldtransformation"]], "copy() (compas_timber.elements.fastener method)": [[624, "compas_timber.elements.Fastener.copy"]], "from_json() (compas_timber.elements.fastener class method)": [[625, "compas_timber.elements.Fastener.from_json"]], "from_jsonstring() (compas_timber.elements.fastener class method)": [[626, "compas_timber.elements.Fastener.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.fastener method)": [[627, "compas_timber.elements.Fastener.remove_blank_extension"]], "remove_features() (compas_timber.elements.fastener method)": [[628, "compas_timber.elements.Fastener.remove_features"]], "reset() (compas_timber.elements.fastener method)": [[629, "compas_timber.elements.Fastener.reset"]], "sha256() (compas_timber.elements.fastener method)": [[630, "compas_timber.elements.Fastener.sha256"]], "to_json() (compas_timber.elements.fastener method)": [[631, "compas_timber.elements.Fastener.to_json"]], "to_jsonstring() (compas_timber.elements.fastener method)": [[632, "compas_timber.elements.Fastener.to_jsonstring"]], "transform() (compas_timber.elements.fastener method)": [[633, "compas_timber.elements.Fastener.transform"]], "transformed() (compas_timber.elements.fastener method)": [[634, "compas_timber.elements.Fastener.transformed"]], "validate_data() (compas_timber.elements.fastener class method)": [[635, "compas_timber.elements.Fastener.validate_data"]], "fastenertimberinterface (class in compas_timber.elements)": [[636, "compas_timber.elements.FastenerTimberInterface"]], "tostring() (compas_timber.elements.fastenertimberinterface method)": [[637, "compas_timber.elements.FastenerTimberInterface.ToString"]], "copy() (compas_timber.elements.fastenertimberinterface method)": [[638, "compas_timber.elements.FastenerTimberInterface.copy"]], "from_json() (compas_timber.elements.fastenertimberinterface class method)": [[639, "compas_timber.elements.FastenerTimberInterface.from_json"]], "from_jsonstring() (compas_timber.elements.fastenertimberinterface class method)": [[640, "compas_timber.elements.FastenerTimberInterface.from_jsonstring"]], "get_features() (compas_timber.elements.fastenertimberinterface method)": [[641, "compas_timber.elements.FastenerTimberInterface.get_features"]], "sha256() (compas_timber.elements.fastenertimberinterface method)": [[642, "compas_timber.elements.FastenerTimberInterface.sha256"]], "to_json() (compas_timber.elements.fastenertimberinterface method)": [[643, "compas_timber.elements.FastenerTimberInterface.to_json"]], "to_jsonstring() (compas_timber.elements.fastenertimberinterface method)": [[644, "compas_timber.elements.FastenerTimberInterface.to_jsonstring"]], "validate_data() (compas_timber.elements.fastenertimberinterface class method)": [[645, "compas_timber.elements.FastenerTimberInterface.validate_data"]], "opening (class in compas_timber.elements)": [[646, "compas_timber.elements.Opening"]], "tostring() (compas_timber.elements.opening method)": [[647, "compas_timber.elements.Opening.ToString"]], "copy() (compas_timber.elements.opening method)": [[648, "compas_timber.elements.Opening.copy"]], "from_json() (compas_timber.elements.opening class method)": [[649, "compas_timber.elements.Opening.from_json"]], "from_jsonstring() (compas_timber.elements.opening class method)": [[650, "compas_timber.elements.Opening.from_jsonstring"]], "orient_polyline() (compas_timber.elements.opening method)": [[651, "compas_timber.elements.Opening.orient_polyline"]], "sha256() (compas_timber.elements.opening method)": [[652, "compas_timber.elements.Opening.sha256"]], "to_json() (compas_timber.elements.opening method)": [[653, "compas_timber.elements.Opening.to_json"]], "to_jsonstring() (compas_timber.elements.opening method)": [[654, "compas_timber.elements.Opening.to_jsonstring"]], "validate_data() (compas_timber.elements.opening class method)": [[655, "compas_timber.elements.Opening.validate_data"]], "openingtype (class in compas_timber.elements)": [[656, "compas_timber.elements.OpeningType"]], "plate (class in compas_timber.elements)": [[657, "compas_timber.elements.Plate"]], "tostring() (compas_timber.elements.plate method)": [[658, "compas_timber.elements.Plate.ToString"]], "add_feature() (compas_timber.elements.plate method)": [[659, "compas_timber.elements.Plate.add_feature"]], "add_features() (compas_timber.elements.plate method)": [[660, "compas_timber.elements.Plate.add_features"]], "add_interface() (compas_timber.elements.plate method)": [[661, "compas_timber.elements.Plate.add_interface"]], "check_outlines() (compas_timber.elements.plate method)": [[662, "compas_timber.elements.Plate.check_outlines"]], "compute_aabb() (compas_timber.elements.plate method)": [[663, "compas_timber.elements.Plate.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.plate method)": [[664, "compas_timber.elements.Plate.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.plate method)": [[665, "compas_timber.elements.Plate.compute_geometry"]], "compute_obb() (compas_timber.elements.plate method)": [[666, "compas_timber.elements.Plate.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.plate method)": [[667, "compas_timber.elements.Plate.compute_worldtransformation"]], "copy() (compas_timber.elements.plate method)": [[668, "compas_timber.elements.Plate.copy"]], "from_brep() (compas_timber.elements.plate class method)": [[669, "compas_timber.elements.Plate.from_brep"]], "from_json() (compas_timber.elements.plate class method)": [[670, "compas_timber.elements.Plate.from_json"]], "from_jsonstring() (compas_timber.elements.plate class method)": [[671, "compas_timber.elements.Plate.from_jsonstring"]], "from_outline_thickness() (compas_timber.elements.plate class method)": [[672, "compas_timber.elements.Plate.from_outline_thickness"]], "opp_side() (compas_timber.elements.plate method)": [[673, "compas_timber.elements.Plate.opp_side"]], "remove_blank_extension() (compas_timber.elements.plate method)": [[674, "compas_timber.elements.Plate.remove_blank_extension"]], "remove_features() (compas_timber.elements.plate method)": [[675, "compas_timber.elements.Plate.remove_features"]], "reset() (compas_timber.elements.plate method)": [[676, "compas_timber.elements.Plate.reset"]], "sha256() (compas_timber.elements.plate method)": [[677, "compas_timber.elements.Plate.sha256"]], "side_as_surface() (compas_timber.elements.plate method)": [[678, "compas_timber.elements.Plate.side_as_surface"]], "to_json() (compas_timber.elements.plate method)": [[679, "compas_timber.elements.Plate.to_json"]], "to_jsonstring() (compas_timber.elements.plate method)": [[680, "compas_timber.elements.Plate.to_jsonstring"]], "transform() (compas_timber.elements.plate method)": [[681, "compas_timber.elements.Plate.transform"]], "transformed() (compas_timber.elements.plate method)": [[682, "compas_timber.elements.Plate.transformed"]], "validate_data() (compas_timber.elements.plate class method)": [[683, "compas_timber.elements.Plate.validate_data"]], "platefastener (class in compas_timber.elements)": [[684, "compas_timber.elements.PlateFastener"]], "tostring() (compas_timber.elements.platefastener method)": [[685, "compas_timber.elements.PlateFastener.ToString"]], "add_feature() (compas_timber.elements.platefastener method)": [[686, "compas_timber.elements.PlateFastener.add_feature"]], "add_features() (compas_timber.elements.platefastener method)": [[687, "compas_timber.elements.PlateFastener.add_features"]], "compute_aabb() (compas_timber.elements.platefastener method)": [[688, "compas_timber.elements.PlateFastener.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.platefastener method)": [[689, "compas_timber.elements.PlateFastener.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.platefastener method)": [[690, "compas_timber.elements.PlateFastener.compute_geometry"]], "compute_obb() (compas_timber.elements.platefastener method)": [[691, "compas_timber.elements.PlateFastener.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.platefastener method)": [[692, "compas_timber.elements.PlateFastener.compute_worldtransformation"]], "copy() (compas_timber.elements.platefastener method)": [[693, "compas_timber.elements.PlateFastener.copy"]], "from_json() (compas_timber.elements.platefastener class method)": [[694, "compas_timber.elements.PlateFastener.from_json"]], "from_jsonstring() (compas_timber.elements.platefastener class method)": [[695, "compas_timber.elements.PlateFastener.from_jsonstring"]], "get_fastener_frames() (compas_timber.elements.platefastener method)": [[696, "compas_timber.elements.PlateFastener.get_fastener_frames"]], "place_instances() (compas_timber.elements.platefastener method)": [[697, "compas_timber.elements.PlateFastener.place_instances"]], "remove_blank_extension() (compas_timber.elements.platefastener method)": [[698, "compas_timber.elements.PlateFastener.remove_blank_extension"]], "remove_features() (compas_timber.elements.platefastener method)": [[699, "compas_timber.elements.PlateFastener.remove_features"]], "reset() (compas_timber.elements.platefastener method)": [[700, "compas_timber.elements.PlateFastener.reset"]], "set_default() (compas_timber.elements.platefastener method)": [[701, "compas_timber.elements.PlateFastener.set_default"]], "sha256() (compas_timber.elements.platefastener method)": [[702, "compas_timber.elements.PlateFastener.sha256"]], "to_json() (compas_timber.elements.platefastener method)": [[703, "compas_timber.elements.PlateFastener.to_json"]], "to_jsonstring() (compas_timber.elements.platefastener method)": [[704, "compas_timber.elements.PlateFastener.to_jsonstring"]], "transform() (compas_timber.elements.platefastener method)": [[705, "compas_timber.elements.PlateFastener.transform"]], "transformed() (compas_timber.elements.platefastener method)": [[706, "compas_timber.elements.PlateFastener.transformed"]], "validate_data() (compas_timber.elements.platefastener class method)": [[707, "compas_timber.elements.PlateFastener.validate_data"]], "validate_fastener_beam_compatibility() (compas_timber.elements.platefastener method)": [[708, "compas_timber.elements.PlateFastener.validate_fastener_beam_compatibility"]], "slab (class in compas_timber.elements)": [[709, "compas_timber.elements.Slab"]], "tostring() (compas_timber.elements.slab method)": [[710, "compas_timber.elements.Slab.ToString"]], "add_feature() (compas_timber.elements.slab method)": [[711, "compas_timber.elements.Slab.add_feature"]], "add_features() (compas_timber.elements.slab method)": [[712, "compas_timber.elements.Slab.add_features"]], "compute_aabb() (compas_timber.elements.slab method)": [[713, "compas_timber.elements.Slab.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.slab method)": [[714, "compas_timber.elements.Slab.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.slab method)": [[715, "compas_timber.elements.Slab.compute_geometry"]], "compute_obb() (compas_timber.elements.slab method)": [[716, "compas_timber.elements.Slab.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.slab method)": [[717, "compas_timber.elements.Slab.compute_worldtransformation"]], "copy() (compas_timber.elements.slab method)": [[718, "compas_timber.elements.Slab.copy"]], "from_boundary() (compas_timber.elements.slab class method)": [[719, "compas_timber.elements.Slab.from_boundary"]], "from_brep() (compas_timber.elements.slab class method)": [[720, "compas_timber.elements.Slab.from_brep"]], "from_json() (compas_timber.elements.slab class method)": [[721, "compas_timber.elements.Slab.from_json"]], "from_jsonstring() (compas_timber.elements.slab class method)": [[722, "compas_timber.elements.Slab.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.slab method)": [[723, "compas_timber.elements.Slab.remove_blank_extension"]], "remove_features() (compas_timber.elements.slab method)": [[724, "compas_timber.elements.Slab.remove_features"]], "reset() (compas_timber.elements.slab method)": [[725, "compas_timber.elements.Slab.reset"]], "rotate() (compas_timber.elements.slab method)": [[726, "compas_timber.elements.Slab.rotate"]], "sha256() (compas_timber.elements.slab method)": [[727, "compas_timber.elements.Slab.sha256"]], "to_json() (compas_timber.elements.slab method)": [[728, "compas_timber.elements.Slab.to_json"]], "to_jsonstring() (compas_timber.elements.slab method)": [[729, "compas_timber.elements.Slab.to_jsonstring"]], "transform() (compas_timber.elements.slab method)": [[730, "compas_timber.elements.Slab.transform"]], "transformed() (compas_timber.elements.slab method)": [[731, "compas_timber.elements.Slab.transformed"]], "validate_data() (compas_timber.elements.slab class method)": [[732, "compas_timber.elements.Slab.validate_data"]], "timberelement (class in compas_timber.elements)": [[733, "compas_timber.elements.TimberElement"]], "tostring() (compas_timber.elements.timberelement method)": [[734, "compas_timber.elements.TimberElement.ToString"]], "add_feature() (compas_timber.elements.timberelement method)": [[735, "compas_timber.elements.TimberElement.add_feature"]], "add_features() (compas_timber.elements.timberelement method)": [[736, "compas_timber.elements.TimberElement.add_features"]], "compute_aabb() (compas_timber.elements.timberelement method)": [[737, "compas_timber.elements.TimberElement.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.timberelement method)": [[738, "compas_timber.elements.TimberElement.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.timberelement method)": [[739, "compas_timber.elements.TimberElement.compute_geometry"]], "compute_obb() (compas_timber.elements.timberelement method)": [[740, "compas_timber.elements.TimberElement.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.timberelement method)": [[741, "compas_timber.elements.TimberElement.compute_worldtransformation"]], "copy() (compas_timber.elements.timberelement method)": [[742, "compas_timber.elements.TimberElement.copy"]], "from_json() (compas_timber.elements.timberelement class method)": [[743, "compas_timber.elements.TimberElement.from_json"]], "from_jsonstring() (compas_timber.elements.timberelement class method)": [[744, "compas_timber.elements.TimberElement.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.timberelement method)": [[745, "compas_timber.elements.TimberElement.remove_blank_extension"]], "remove_features() (compas_timber.elements.timberelement method)": [[746, "compas_timber.elements.TimberElement.remove_features"]], "reset() (compas_timber.elements.timberelement method)": [[747, "compas_timber.elements.TimberElement.reset"]], "sha256() (compas_timber.elements.timberelement method)": [[748, "compas_timber.elements.TimberElement.sha256"]], "to_json() (compas_timber.elements.timberelement method)": [[749, "compas_timber.elements.TimberElement.to_json"]], "to_jsonstring() (compas_timber.elements.timberelement method)": [[750, "compas_timber.elements.TimberElement.to_jsonstring"]], "transform() (compas_timber.elements.timberelement method)": [[751, "compas_timber.elements.TimberElement.transform"]], "transformed() (compas_timber.elements.timberelement method)": [[752, "compas_timber.elements.TimberElement.transformed"]], "validate_data() (compas_timber.elements.timberelement class method)": [[753, "compas_timber.elements.TimberElement.validate_data"]], "wall (class in compas_timber.elements)": [[754, "compas_timber.elements.Wall"]], "tostring() (compas_timber.elements.wall method)": [[755, "compas_timber.elements.Wall.ToString"]], "add_feature() (compas_timber.elements.wall method)": [[756, "compas_timber.elements.Wall.add_feature"]], "add_features() (compas_timber.elements.wall method)": [[757, "compas_timber.elements.Wall.add_features"]], "compute_aabb() (compas_timber.elements.wall method)": [[758, "compas_timber.elements.Wall.compute_aabb"]], "compute_collision_mesh() (compas_timber.elements.wall method)": [[759, "compas_timber.elements.Wall.compute_collision_mesh"]], "compute_geometry() (compas_timber.elements.wall method)": [[760, "compas_timber.elements.Wall.compute_geometry"]], "compute_obb() (compas_timber.elements.wall method)": [[761, "compas_timber.elements.Wall.compute_obb"]], "compute_worldtransformation() (compas_timber.elements.wall method)": [[762, "compas_timber.elements.Wall.compute_worldtransformation"]], "copy() (compas_timber.elements.wall method)": [[763, "compas_timber.elements.Wall.copy"]], "from_boundary() (compas_timber.elements.wall class method)": [[764, "compas_timber.elements.Wall.from_boundary"]], "from_brep() (compas_timber.elements.wall class method)": [[765, "compas_timber.elements.Wall.from_brep"]], "from_json() (compas_timber.elements.wall class method)": [[766, "compas_timber.elements.Wall.from_json"]], "from_jsonstring() (compas_timber.elements.wall class method)": [[767, "compas_timber.elements.Wall.from_jsonstring"]], "remove_blank_extension() (compas_timber.elements.wall method)": [[768, "compas_timber.elements.Wall.remove_blank_extension"]], "remove_features() (compas_timber.elements.wall method)": [[769, "compas_timber.elements.Wall.remove_features"]], "reset() (compas_timber.elements.wall method)": [[770, "compas_timber.elements.Wall.reset"]], "rotate() (compas_timber.elements.wall method)": [[771, "compas_timber.elements.Wall.rotate"]], "sha256() (compas_timber.elements.wall method)": [[772, "compas_timber.elements.Wall.sha256"]], "to_json() (compas_timber.elements.wall method)": [[773, "compas_timber.elements.Wall.to_json"]], "to_jsonstring() (compas_timber.elements.wall method)": [[774, "compas_timber.elements.Wall.to_jsonstring"]], "transform() (compas_timber.elements.wall method)": [[775, "compas_timber.elements.Wall.transform"]], "transformed() (compas_timber.elements.wall method)": [[776, "compas_timber.elements.Wall.transformed"]], "validate_data() (compas_timber.elements.wall class method)": [[777, "compas_timber.elements.Wall.validate_data"]], "btlxprocessingerror": [[778, "compas_timber.errors.BTLxProcessingError"]], "beamjoiningerror": [[779, "compas_timber.errors.BeamJoiningError"]], "fastenerapplicationerror": [[780, "compas_timber.errors.FastenerApplicationError"]], "featureapplicationerror": [[781, "compas_timber.errors.FeatureApplicationError"]], "alignmenttype (class in compas_timber.fabrication)": [[782, "compas_timber.fabrication.AlignmentType"]], "btlxfromgeometrydefinition (class in compas_timber.fabrication)": [[783, "compas_timber.fabrication.BTLxFromGeometryDefinition"]], "tostring() (compas_timber.fabrication.btlxfromgeometrydefinition method)": [[784, "compas_timber.fabrication.BTLxFromGeometryDefinition.ToString"]], "copy() (compas_timber.fabrication.btlxfromgeometrydefinition method)": [[785, "compas_timber.fabrication.BTLxFromGeometryDefinition.copy"]], "feature_from_element() (compas_timber.fabrication.btlxfromgeometrydefinition method)": [[786, "compas_timber.fabrication.BTLxFromGeometryDefinition.feature_from_element"]], "from_json() (compas_timber.fabrication.btlxfromgeometrydefinition class method)": [[787, "compas_timber.fabrication.BTLxFromGeometryDefinition.from_json"]], "from_jsonstring() (compas_timber.fabrication.btlxfromgeometrydefinition class method)": [[788, "compas_timber.fabrication.BTLxFromGeometryDefinition.from_jsonstring"]], "sha256() (compas_timber.fabrication.btlxfromgeometrydefinition method)": [[789, "compas_timber.fabrication.BTLxFromGeometryDefinition.sha256"]], "to_json() (compas_timber.fabrication.btlxfromgeometrydefinition method)": [[790, "compas_timber.fabrication.BTLxFromGeometryDefinition.to_json"]], "to_jsonstring() (compas_timber.fabrication.btlxfromgeometrydefinition method)": [[791, "compas_timber.fabrication.BTLxFromGeometryDefinition.to_jsonstring"]], "transform() (compas_timber.fabrication.btlxfromgeometrydefinition method)": [[792, "compas_timber.fabrication.BTLxFromGeometryDefinition.transform"]], "transformed() (compas_timber.fabrication.btlxfromgeometrydefinition method)": [[793, "compas_timber.fabrication.BTLxFromGeometryDefinition.transformed"]], "validate_data() (compas_timber.fabrication.btlxfromgeometrydefinition class method)": [[794, "compas_timber.fabrication.BTLxFromGeometryDefinition.validate_data"]], "btlxpart (class in compas_timber.fabrication)": [[795, "compas_timber.fabrication.BTLxPart"]], "et_point_vals() (compas_timber.fabrication.btlxpart method)": [[796, "compas_timber.fabrication.BTLxPart.et_point_vals"]], "ref_side_from_face() (compas_timber.fabrication.btlxpart method)": [[797, "compas_timber.fabrication.BTLxPart.ref_side_from_face"]], "btlxprocessing (class in compas_timber.fabrication)": [[798, "compas_timber.fabrication.BTLxProcessing"]], "tostring() (compas_timber.fabrication.btlxprocessing method)": [[799, "compas_timber.fabrication.BTLxProcessing.ToString"]], "add_subprocessing() (compas_timber.fabrication.btlxprocessing method)": [[800, "compas_timber.fabrication.BTLxProcessing.add_subprocessing"]], "copy() (compas_timber.fabrication.btlxprocessing method)": [[801, "compas_timber.fabrication.BTLxProcessing.copy"]], "from_json() (compas_timber.fabrication.btlxprocessing class method)": [[802, "compas_timber.fabrication.BTLxProcessing.from_json"]], "from_jsonstring() (compas_timber.fabrication.btlxprocessing class method)": [[803, "compas_timber.fabrication.BTLxProcessing.from_jsonstring"]], "scaled() (compas_timber.fabrication.btlxprocessing method)": [[804, "compas_timber.fabrication.BTLxProcessing.scaled"]], "sha256() (compas_timber.fabrication.btlxprocessing method)": [[805, "compas_timber.fabrication.BTLxProcessing.sha256"]], "to_json() (compas_timber.fabrication.btlxprocessing method)": [[806, "compas_timber.fabrication.BTLxProcessing.to_json"]], "to_jsonstring() (compas_timber.fabrication.btlxprocessing method)": [[807, "compas_timber.fabrication.BTLxProcessing.to_jsonstring"]], "validate_data() (compas_timber.fabrication.btlxprocessing class method)": [[808, "compas_timber.fabrication.BTLxProcessing.validate_data"]], "btlxwriter (class in compas_timber.fabrication)": [[809, "compas_timber.fabrication.BTLxWriter"]], "model_to_xml() (compas_timber.fabrication.btlxwriter method)": [[810, "compas_timber.fabrication.BTLxWriter.model_to_xml"]], "register_type_serializer() (compas_timber.fabrication.btlxwriter class method)": [[811, "compas_timber.fabrication.BTLxWriter.register_type_serializer"]], "write() (compas_timber.fabrication.btlxwriter method)": [[812, "compas_timber.fabrication.BTLxWriter.write"]], "contour (class in compas_timber.fabrication)": [[813, "compas_timber.fabrication.Contour"]], "tostring() (compas_timber.fabrication.contour method)": [[814, "compas_timber.fabrication.Contour.ToString"]], "copy() (compas_timber.fabrication.contour method)": [[815, "compas_timber.fabrication.Contour.copy"]], "from_json() (compas_timber.fabrication.contour class method)": [[816, "compas_timber.fabrication.Contour.from_json"]], "from_jsonstring() (compas_timber.fabrication.contour class method)": [[817, "compas_timber.fabrication.Contour.from_jsonstring"]], "scale() (compas_timber.fabrication.contour method)": [[818, "compas_timber.fabrication.Contour.scale"]], "scaled() (compas_timber.fabrication.contour method)": [[819, "compas_timber.fabrication.Contour.scaled"]], "sha256() (compas_timber.fabrication.contour method)": [[820, "compas_timber.fabrication.Contour.sha256"]], "to_json() (compas_timber.fabrication.contour method)": [[821, "compas_timber.fabrication.Contour.to_json"]], "to_jsonstring() (compas_timber.fabrication.contour method)": [[822, "compas_timber.fabrication.Contour.to_jsonstring"]], "validate_data() (compas_timber.fabrication.contour class method)": [[823, "compas_timber.fabrication.Contour.validate_data"]], "doublecut (class in compas_timber.fabrication)": [[824, "compas_timber.fabrication.DoubleCut"]], "tostring() (compas_timber.fabrication.doublecut method)": [[825, "compas_timber.fabrication.DoubleCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.doublecut method)": [[826, "compas_timber.fabrication.DoubleCut.add_subprocessing"]], "apply() (compas_timber.fabrication.doublecut method)": [[827, "compas_timber.fabrication.DoubleCut.apply"]], "copy() (compas_timber.fabrication.doublecut method)": [[828, "compas_timber.fabrication.DoubleCut.copy"]], "from_json() (compas_timber.fabrication.doublecut class method)": [[829, "compas_timber.fabrication.DoubleCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.doublecut class method)": [[830, "compas_timber.fabrication.DoubleCut.from_jsonstring"]], "from_planes_and_beam() (compas_timber.fabrication.doublecut class method)": [[831, "compas_timber.fabrication.DoubleCut.from_planes_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.doublecut class method)": [[832, "compas_timber.fabrication.DoubleCut.from_shapes_and_element"]], "planes_from_params_and_beam() (compas_timber.fabrication.doublecut method)": [[833, "compas_timber.fabrication.DoubleCut.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.doublecut method)": [[834, "compas_timber.fabrication.DoubleCut.scale"]], "scaled() (compas_timber.fabrication.doublecut method)": [[835, "compas_timber.fabrication.DoubleCut.scaled"]], "sha256() (compas_timber.fabrication.doublecut method)": [[836, "compas_timber.fabrication.DoubleCut.sha256"]], "to_json() (compas_timber.fabrication.doublecut method)": [[837, "compas_timber.fabrication.DoubleCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.doublecut method)": [[838, "compas_timber.fabrication.DoubleCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.doublecut class method)": [[839, "compas_timber.fabrication.DoubleCut.validate_data"]], "dovetailmortise (class in compas_timber.fabrication)": [[840, "compas_timber.fabrication.DovetailMortise"]], "tostring() (compas_timber.fabrication.dovetailmortise method)": [[841, "compas_timber.fabrication.DovetailMortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailmortise method)": [[842, "compas_timber.fabrication.DovetailMortise.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailmortise method)": [[843, "compas_timber.fabrication.DovetailMortise.apply"]], "copy() (compas_timber.fabrication.dovetailmortise method)": [[844, "compas_timber.fabrication.DovetailMortise.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailmortise class method)": [[845, "compas_timber.fabrication.DovetailMortise.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[846, "compas_timber.fabrication.DovetailMortise.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[847, "compas_timber.fabrication.DovetailMortise.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailmortise method)": [[848, "compas_timber.fabrication.DovetailMortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.dovetailmortise class method)": [[849, "compas_timber.fabrication.DovetailMortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.dovetailmortise class method)": [[850, "compas_timber.fabrication.DovetailMortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailmortise class method)": [[851, "compas_timber.fabrication.DovetailMortise.from_jsonstring"]], "scale() (compas_timber.fabrication.dovetailmortise method)": [[852, "compas_timber.fabrication.DovetailMortise.scale"]], "scaled() (compas_timber.fabrication.dovetailmortise method)": [[853, "compas_timber.fabrication.DovetailMortise.scaled"]], "sha256() (compas_timber.fabrication.dovetailmortise method)": [[854, "compas_timber.fabrication.DovetailMortise.sha256"]], "to_json() (compas_timber.fabrication.dovetailmortise method)": [[855, "compas_timber.fabrication.DovetailMortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailmortise method)": [[856, "compas_timber.fabrication.DovetailMortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailmortise class method)": [[857, "compas_timber.fabrication.DovetailMortise.validate_data"]], "dovetailtenon (class in compas_timber.fabrication)": [[858, "compas_timber.fabrication.DovetailTenon"]], "tostring() (compas_timber.fabrication.dovetailtenon method)": [[859, "compas_timber.fabrication.DovetailTenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.dovetailtenon method)": [[860, "compas_timber.fabrication.DovetailTenon.add_subprocessing"]], "apply() (compas_timber.fabrication.dovetailtenon method)": [[861, "compas_timber.fabrication.DovetailTenon.apply"]], "copy() (compas_timber.fabrication.dovetailtenon method)": [[862, "compas_timber.fabrication.DovetailTenon.copy"]], "define_dovetail_tool() (compas_timber.fabrication.dovetailtenon class method)": [[863, "compas_timber.fabrication.DovetailTenon.define_dovetail_tool"]], "dovetail_cutting_frames_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[864, "compas_timber.fabrication.DovetailTenon.dovetail_cutting_frames_from_params_and_beam"]], "dovetail_volume_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[865, "compas_timber.fabrication.DovetailTenon.dovetail_volume_from_params_and_beam"]], "frame_from_params_and_beam() (compas_timber.fabrication.dovetailtenon method)": [[866, "compas_timber.fabrication.DovetailTenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.dovetailtenon class method)": [[867, "compas_timber.fabrication.DovetailTenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.dovetailtenon class method)": [[868, "compas_timber.fabrication.DovetailTenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.dovetailtenon class method)": [[869, "compas_timber.fabrication.DovetailTenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.dovetailtenon method)": [[870, "compas_timber.fabrication.DovetailTenon.scale"]], "scaled() (compas_timber.fabrication.dovetailtenon method)": [[871, "compas_timber.fabrication.DovetailTenon.scaled"]], "sha256() (compas_timber.fabrication.dovetailtenon method)": [[872, "compas_timber.fabrication.DovetailTenon.sha256"]], "to_json() (compas_timber.fabrication.dovetailtenon method)": [[873, "compas_timber.fabrication.DovetailTenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.dovetailtenon method)": [[874, "compas_timber.fabrication.DovetailTenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dovetailtenon class method)": [[875, "compas_timber.fabrication.DovetailTenon.validate_data"]], "drilling (class in compas_timber.fabrication)": [[876, "compas_timber.fabrication.Drilling"]], "tostring() (compas_timber.fabrication.drilling method)": [[877, "compas_timber.fabrication.Drilling.ToString"]], "add_subprocessing() (compas_timber.fabrication.drilling method)": [[878, "compas_timber.fabrication.Drilling.add_subprocessing"]], "apply() (compas_timber.fabrication.drilling method)": [[879, "compas_timber.fabrication.Drilling.apply"]], "copy() (compas_timber.fabrication.drilling method)": [[880, "compas_timber.fabrication.Drilling.copy"]], "cylinder_from_params_and_element() (compas_timber.fabrication.drilling method)": [[881, "compas_timber.fabrication.Drilling.cylinder_from_params_and_element"]], "from_json() (compas_timber.fabrication.drilling class method)": [[882, "compas_timber.fabrication.Drilling.from_json"]], "from_jsonstring() (compas_timber.fabrication.drilling class method)": [[883, "compas_timber.fabrication.Drilling.from_jsonstring"]], "from_line_and_element() (compas_timber.fabrication.drilling class method)": [[884, "compas_timber.fabrication.Drilling.from_line_and_element"]], "from_shapes_and_element() (compas_timber.fabrication.drilling class method)": [[885, "compas_timber.fabrication.Drilling.from_shapes_and_element"]], "scale() (compas_timber.fabrication.drilling method)": [[886, "compas_timber.fabrication.Drilling.scale"]], "scaled() (compas_timber.fabrication.drilling method)": [[887, "compas_timber.fabrication.Drilling.scaled"]], "sha256() (compas_timber.fabrication.drilling method)": [[888, "compas_timber.fabrication.Drilling.sha256"]], "to_json() (compas_timber.fabrication.drilling method)": [[889, "compas_timber.fabrication.Drilling.to_json"]], "to_jsonstring() (compas_timber.fabrication.drilling method)": [[890, "compas_timber.fabrication.Drilling.to_jsonstring"]], "validate_data() (compas_timber.fabrication.drilling class method)": [[891, "compas_timber.fabrication.Drilling.validate_data"]], "dualcontour (class in compas_timber.fabrication)": [[892, "compas_timber.fabrication.DualContour"]], "tostring() (compas_timber.fabrication.dualcontour method)": [[893, "compas_timber.fabrication.DualContour.ToString"]], "copy() (compas_timber.fabrication.dualcontour method)": [[894, "compas_timber.fabrication.DualContour.copy"]], "from_json() (compas_timber.fabrication.dualcontour class method)": [[895, "compas_timber.fabrication.DualContour.from_json"]], "from_jsonstring() (compas_timber.fabrication.dualcontour class method)": [[896, "compas_timber.fabrication.DualContour.from_jsonstring"]], "scale() (compas_timber.fabrication.dualcontour method)": [[897, "compas_timber.fabrication.DualContour.scale"]], "scaled() (compas_timber.fabrication.dualcontour method)": [[898, "compas_timber.fabrication.DualContour.scaled"]], "sha256() (compas_timber.fabrication.dualcontour method)": [[899, "compas_timber.fabrication.DualContour.sha256"]], "to_json() (compas_timber.fabrication.dualcontour method)": [[900, "compas_timber.fabrication.DualContour.to_json"]], "to_jsonstring() (compas_timber.fabrication.dualcontour method)": [[901, "compas_timber.fabrication.DualContour.to_jsonstring"]], "validate_data() (compas_timber.fabrication.dualcontour class method)": [[902, "compas_timber.fabrication.DualContour.validate_data"]], "edgepositiontype (class in compas_timber.fabrication)": [[903, "compas_timber.fabrication.EdgePositionType"]], "freecontour (class in compas_timber.fabrication)": [[904, "compas_timber.fabrication.FreeContour"]], "tostring() (compas_timber.fabrication.freecontour method)": [[905, "compas_timber.fabrication.FreeContour.ToString"]], "add_subprocessing() (compas_timber.fabrication.freecontour method)": [[906, "compas_timber.fabrication.FreeContour.add_subprocessing"]], "apply() (compas_timber.fabrication.freecontour method)": [[907, "compas_timber.fabrication.FreeContour.apply"]], "are_all_segments_parallel() (compas_timber.fabrication.freecontour static method)": [[908, "compas_timber.fabrication.FreeContour.are_all_segments_parallel"]], "copy() (compas_timber.fabrication.freecontour method)": [[909, "compas_timber.fabrication.FreeContour.copy"]], "from_json() (compas_timber.fabrication.freecontour class method)": [[910, "compas_timber.fabrication.FreeContour.from_json"]], "from_jsonstring() (compas_timber.fabrication.freecontour class method)": [[911, "compas_timber.fabrication.FreeContour.from_jsonstring"]], "from_polyline_and_element() (compas_timber.fabrication.freecontour class method)": [[912, "compas_timber.fabrication.FreeContour.from_polyline_and_element"]], "from_shapes_and_element() (compas_timber.fabrication.freecontour class method)": [[913, "compas_timber.fabrication.FreeContour.from_shapes_and_element"]], "from_top_bottom_and_elements() (compas_timber.fabrication.freecontour class method)": [[914, "compas_timber.fabrication.FreeContour.from_top_bottom_and_elements"]], "get_ref_face_index() (compas_timber.fabrication.freecontour static method)": [[915, "compas_timber.fabrication.FreeContour.get_ref_face_index"]], "parse_tool_position() (compas_timber.fabrication.freecontour static method)": [[916, "compas_timber.fabrication.FreeContour.parse_tool_position"]], "scale() (compas_timber.fabrication.freecontour method)": [[917, "compas_timber.fabrication.FreeContour.scale"]], "scaled() (compas_timber.fabrication.freecontour method)": [[918, "compas_timber.fabrication.FreeContour.scaled"]], "sha256() (compas_timber.fabrication.freecontour method)": [[919, "compas_timber.fabrication.FreeContour.sha256"]], "to_json() (compas_timber.fabrication.freecontour method)": [[920, "compas_timber.fabrication.FreeContour.to_json"]], "to_jsonstring() (compas_timber.fabrication.freecontour method)": [[921, "compas_timber.fabrication.FreeContour.to_jsonstring"]], "validate_data() (compas_timber.fabrication.freecontour class method)": [[922, "compas_timber.fabrication.FreeContour.validate_data"]], "frenchridgelap (class in compas_timber.fabrication)": [[923, "compas_timber.fabrication.FrenchRidgeLap"]], "tostring() (compas_timber.fabrication.frenchridgelap method)": [[924, "compas_timber.fabrication.FrenchRidgeLap.ToString"]], "add_subprocessing() (compas_timber.fabrication.frenchridgelap method)": [[925, "compas_timber.fabrication.FrenchRidgeLap.add_subprocessing"]], "apply() (compas_timber.fabrication.frenchridgelap method)": [[926, "compas_timber.fabrication.FrenchRidgeLap.apply"]], "copy() (compas_timber.fabrication.frenchridgelap method)": [[927, "compas_timber.fabrication.FrenchRidgeLap.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[928, "compas_timber.fabrication.FrenchRidgeLap.frame_from_params_and_beam"]], "from_beam_beam_and_plane() (compas_timber.fabrication.frenchridgelap class method)": [[929, "compas_timber.fabrication.FrenchRidgeLap.from_beam_beam_and_plane"]], "from_json() (compas_timber.fabrication.frenchridgelap class method)": [[930, "compas_timber.fabrication.FrenchRidgeLap.from_json"]], "from_jsonstring() (compas_timber.fabrication.frenchridgelap class method)": [[931, "compas_timber.fabrication.FrenchRidgeLap.from_jsonstring"]], "lap_volume_from_params_and_beam() (compas_timber.fabrication.frenchridgelap method)": [[932, "compas_timber.fabrication.FrenchRidgeLap.lap_volume_from_params_and_beam"]], "scale() (compas_timber.fabrication.frenchridgelap method)": [[933, "compas_timber.fabrication.FrenchRidgeLap.scale"]], "scaled() (compas_timber.fabrication.frenchridgelap method)": [[934, "compas_timber.fabrication.FrenchRidgeLap.scaled"]], "sha256() (compas_timber.fabrication.frenchridgelap method)": [[935, "compas_timber.fabrication.FrenchRidgeLap.sha256"]], "to_json() (compas_timber.fabrication.frenchridgelap method)": [[936, "compas_timber.fabrication.FrenchRidgeLap.to_json"]], "to_jsonstring() (compas_timber.fabrication.frenchridgelap method)": [[937, "compas_timber.fabrication.FrenchRidgeLap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.frenchridgelap class method)": [[938, "compas_timber.fabrication.FrenchRidgeLap.validate_data"]], "jackraftercut (class in compas_timber.fabrication)": [[939, "compas_timber.fabrication.JackRafterCut"]], "tostring() (compas_timber.fabrication.jackraftercut method)": [[940, "compas_timber.fabrication.JackRafterCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.jackraftercut method)": [[941, "compas_timber.fabrication.JackRafterCut.add_subprocessing"]], "apply() (compas_timber.fabrication.jackraftercut method)": [[942, "compas_timber.fabrication.JackRafterCut.apply"]], "copy() (compas_timber.fabrication.jackraftercut method)": [[943, "compas_timber.fabrication.JackRafterCut.copy"]], "from_json() (compas_timber.fabrication.jackraftercut class method)": [[944, "compas_timber.fabrication.JackRafterCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.jackraftercut class method)": [[945, "compas_timber.fabrication.JackRafterCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.jackraftercut class method)": [[946, "compas_timber.fabrication.JackRafterCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.jackraftercut class method)": [[947, "compas_timber.fabrication.JackRafterCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.jackraftercut method)": [[948, "compas_timber.fabrication.JackRafterCut.plane_from_params_and_beam"]], "scale() (compas_timber.fabrication.jackraftercut method)": [[949, "compas_timber.fabrication.JackRafterCut.scale"]], "scaled() (compas_timber.fabrication.jackraftercut method)": [[950, "compas_timber.fabrication.JackRafterCut.scaled"]], "sha256() (compas_timber.fabrication.jackraftercut method)": [[951, "compas_timber.fabrication.JackRafterCut.sha256"]], "to_json() (compas_timber.fabrication.jackraftercut method)": [[952, "compas_timber.fabrication.JackRafterCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.jackraftercut method)": [[953, "compas_timber.fabrication.JackRafterCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.jackraftercut class method)": [[954, "compas_timber.fabrication.JackRafterCut.validate_data"]], "jackraftercutproxy (class in compas_timber.fabrication)": [[955, "compas_timber.fabrication.JackRafterCutProxy"]], "apply() (compas_timber.fabrication.jackraftercutproxy method)": [[956, "compas_timber.fabrication.JackRafterCutProxy.apply"]], "from_plane_and_beam() (compas_timber.fabrication.jackraftercutproxy class method)": [[957, "compas_timber.fabrication.JackRafterCutProxy.from_plane_and_beam"]], "unproxified() (compas_timber.fabrication.jackraftercutproxy method)": [[958, "compas_timber.fabrication.JackRafterCutProxy.unproxified"]], "lap (class in compas_timber.fabrication)": [[959, "compas_timber.fabrication.Lap"]], "tostring() (compas_timber.fabrication.lap method)": [[960, "compas_timber.fabrication.Lap.ToString"]], "add_subprocessing() (compas_timber.fabrication.lap method)": [[961, "compas_timber.fabrication.Lap.add_subprocessing"]], "apply() (compas_timber.fabrication.lap method)": [[962, "compas_timber.fabrication.Lap.apply"]], "copy() (compas_timber.fabrication.lap method)": [[963, "compas_timber.fabrication.Lap.copy"]], "from_json() (compas_timber.fabrication.lap class method)": [[964, "compas_timber.fabrication.Lap.from_json"]], "from_jsonstring() (compas_timber.fabrication.lap class method)": [[965, "compas_timber.fabrication.Lap.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.lap class method)": [[966, "compas_timber.fabrication.Lap.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.lap class method)": [[967, "compas_timber.fabrication.Lap.from_shapes_and_element"]], "from_volume_and_beam() (compas_timber.fabrication.lap class method)": [[968, "compas_timber.fabrication.Lap.from_volume_and_beam"]], "scale() (compas_timber.fabrication.lap method)": [[969, "compas_timber.fabrication.Lap.scale"]], "scaled() (compas_timber.fabrication.lap method)": [[970, "compas_timber.fabrication.Lap.scaled"]], "sha256() (compas_timber.fabrication.lap method)": [[971, "compas_timber.fabrication.Lap.sha256"]], "to_json() (compas_timber.fabrication.lap method)": [[972, "compas_timber.fabrication.Lap.to_json"]], "to_jsonstring() (compas_timber.fabrication.lap method)": [[973, "compas_timber.fabrication.Lap.to_jsonstring"]], "validate_data() (compas_timber.fabrication.lap class method)": [[974, "compas_timber.fabrication.Lap.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.lap method)": [[975, "compas_timber.fabrication.Lap.volume_from_params_and_beam"]], "lapproxy (class in compas_timber.fabrication)": [[976, "compas_timber.fabrication.LapProxy"]], "apply() (compas_timber.fabrication.lapproxy method)": [[977, "compas_timber.fabrication.LapProxy.apply"]], "from_volume_and_beam() (compas_timber.fabrication.lapproxy class method)": [[978, "compas_timber.fabrication.LapProxy.from_volume_and_beam"]], "unproxified() (compas_timber.fabrication.lapproxy method)": [[979, "compas_timber.fabrication.LapProxy.unproxified"]], "limitationtoptype (class in compas_timber.fabrication)": [[980, "compas_timber.fabrication.LimitationTopType"]], "longitudinalcut (class in compas_timber.fabrication)": [[981, "compas_timber.fabrication.LongitudinalCut"]], "tostring() (compas_timber.fabrication.longitudinalcut method)": [[982, "compas_timber.fabrication.LongitudinalCut.ToString"]], "add_subprocessing() (compas_timber.fabrication.longitudinalcut method)": [[983, "compas_timber.fabrication.LongitudinalCut.add_subprocessing"]], "apply() (compas_timber.fabrication.longitudinalcut method)": [[984, "compas_timber.fabrication.LongitudinalCut.apply"]], "copy() (compas_timber.fabrication.longitudinalcut method)": [[985, "compas_timber.fabrication.LongitudinalCut.copy"]], "from_json() (compas_timber.fabrication.longitudinalcut class method)": [[986, "compas_timber.fabrication.LongitudinalCut.from_json"]], "from_jsonstring() (compas_timber.fabrication.longitudinalcut class method)": [[987, "compas_timber.fabrication.LongitudinalCut.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.longitudinalcut class method)": [[988, "compas_timber.fabrication.LongitudinalCut.from_plane_and_beam"]], "from_shapes_and_element() (compas_timber.fabrication.longitudinalcut class method)": [[989, "compas_timber.fabrication.LongitudinalCut.from_shapes_and_element"]], "plane_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[990, "compas_timber.fabrication.LongitudinalCut.plane_from_params_and_beam"]], "scaled() (compas_timber.fabrication.longitudinalcut method)": [[991, "compas_timber.fabrication.LongitudinalCut.scaled"]], "sha256() (compas_timber.fabrication.longitudinalcut method)": [[992, "compas_timber.fabrication.LongitudinalCut.sha256"]], "to_json() (compas_timber.fabrication.longitudinalcut method)": [[993, "compas_timber.fabrication.LongitudinalCut.to_json"]], "to_jsonstring() (compas_timber.fabrication.longitudinalcut method)": [[994, "compas_timber.fabrication.LongitudinalCut.to_jsonstring"]], "validate_data() (compas_timber.fabrication.longitudinalcut class method)": [[995, "compas_timber.fabrication.LongitudinalCut.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.longitudinalcut method)": [[996, "compas_timber.fabrication.LongitudinalCut.volume_from_params_and_beam"]], "machininglimits (class in compas_timber.fabrication)": [[997, "compas_timber.fabrication.MachiningLimits"]], "mortise (class in compas_timber.fabrication)": [[998, "compas_timber.fabrication.Mortise"]], "tostring() (compas_timber.fabrication.mortise method)": [[999, "compas_timber.fabrication.Mortise.ToString"]], "add_subprocessing() (compas_timber.fabrication.mortise method)": [[1000, "compas_timber.fabrication.Mortise.add_subprocessing"]], "apply() (compas_timber.fabrication.mortise method)": [[1001, "compas_timber.fabrication.Mortise.apply"]], "copy() (compas_timber.fabrication.mortise method)": [[1002, "compas_timber.fabrication.Mortise.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[1003, "compas_timber.fabrication.Mortise.frame_from_params_and_beam"]], "from_frame_and_beam() (compas_timber.fabrication.mortise class method)": [[1004, "compas_timber.fabrication.Mortise.from_frame_and_beam"]], "from_json() (compas_timber.fabrication.mortise class method)": [[1005, "compas_timber.fabrication.Mortise.from_json"]], "from_jsonstring() (compas_timber.fabrication.mortise class method)": [[1006, "compas_timber.fabrication.Mortise.from_jsonstring"]], "scale() (compas_timber.fabrication.mortise method)": [[1007, "compas_timber.fabrication.Mortise.scale"]], "scaled() (compas_timber.fabrication.mortise method)": [[1008, "compas_timber.fabrication.Mortise.scaled"]], "sha256() (compas_timber.fabrication.mortise method)": [[1009, "compas_timber.fabrication.Mortise.sha256"]], "to_json() (compas_timber.fabrication.mortise method)": [[1010, "compas_timber.fabrication.Mortise.to_json"]], "to_jsonstring() (compas_timber.fabrication.mortise method)": [[1011, "compas_timber.fabrication.Mortise.to_jsonstring"]], "validate_data() (compas_timber.fabrication.mortise class method)": [[1012, "compas_timber.fabrication.Mortise.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.mortise method)": [[1013, "compas_timber.fabrication.Mortise.volume_from_params_and_beam"]], "orientationtype (class in compas_timber.fabrication)": [[1014, "compas_timber.fabrication.OrientationType"]], "pocket (class in compas_timber.fabrication)": [[1015, "compas_timber.fabrication.Pocket"]], "tostring() (compas_timber.fabrication.pocket method)": [[1016, "compas_timber.fabrication.Pocket.ToString"]], "add_subprocessing() (compas_timber.fabrication.pocket method)": [[1017, "compas_timber.fabrication.Pocket.add_subprocessing"]], "apply() (compas_timber.fabrication.pocket method)": [[1018, "compas_timber.fabrication.Pocket.apply"]], "copy() (compas_timber.fabrication.pocket method)": [[1019, "compas_timber.fabrication.Pocket.copy"]], "from_json() (compas_timber.fabrication.pocket class method)": [[1020, "compas_timber.fabrication.Pocket.from_json"]], "from_jsonstring() (compas_timber.fabrication.pocket class method)": [[1021, "compas_timber.fabrication.Pocket.from_jsonstring"]], "from_shapes_and_element() (compas_timber.fabrication.pocket class method)": [[1022, "compas_timber.fabrication.Pocket.from_shapes_and_element"]], "from_volume_and_element() (compas_timber.fabrication.pocket class method)": [[1023, "compas_timber.fabrication.Pocket.from_volume_and_element"]], "scale() (compas_timber.fabrication.pocket method)": [[1024, "compas_timber.fabrication.Pocket.scale"]], "scaled() (compas_timber.fabrication.pocket method)": [[1025, "compas_timber.fabrication.Pocket.scaled"]], "sha256() (compas_timber.fabrication.pocket method)": [[1026, "compas_timber.fabrication.Pocket.sha256"]], "to_json() (compas_timber.fabrication.pocket method)": [[1027, "compas_timber.fabrication.Pocket.to_json"]], "to_jsonstring() (compas_timber.fabrication.pocket method)": [[1028, "compas_timber.fabrication.Pocket.to_jsonstring"]], "validate_data() (compas_timber.fabrication.pocket class method)": [[1029, "compas_timber.fabrication.Pocket.validate_data"]], "volume_from_params_and_element() (compas_timber.fabrication.pocket method)": [[1030, "compas_timber.fabrication.Pocket.volume_from_params_and_element"]], "pocketproxy (class in compas_timber.fabrication)": [[1031, "compas_timber.fabrication.PocketProxy"]], "apply() (compas_timber.fabrication.pocketproxy method)": [[1032, "compas_timber.fabrication.PocketProxy.apply"]], "from_volume_and_element() (compas_timber.fabrication.pocketproxy class method)": [[1033, "compas_timber.fabrication.PocketProxy.from_volume_and_element"]], "unproxified() (compas_timber.fabrication.pocketproxy method)": [[1034, "compas_timber.fabrication.PocketProxy.unproxified"]], "slot (class in compas_timber.fabrication)": [[1035, "compas_timber.fabrication.Slot"]], "tostring() (compas_timber.fabrication.slot method)": [[1036, "compas_timber.fabrication.Slot.ToString"]], "add_subprocessing() (compas_timber.fabrication.slot method)": [[1037, "compas_timber.fabrication.Slot.add_subprocessing"]], "apply() (compas_timber.fabrication.slot method)": [[1038, "compas_timber.fabrication.Slot.apply"]], "copy() (compas_timber.fabrication.slot method)": [[1039, "compas_timber.fabrication.Slot.copy"]], "from_json() (compas_timber.fabrication.slot class method)": [[1040, "compas_timber.fabrication.Slot.from_json"]], "from_jsonstring() (compas_timber.fabrication.slot class method)": [[1041, "compas_timber.fabrication.Slot.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.slot class method)": [[1042, "compas_timber.fabrication.Slot.from_plane_and_beam"]], "scale() (compas_timber.fabrication.slot method)": [[1043, "compas_timber.fabrication.Slot.scale"]], "scaled() (compas_timber.fabrication.slot method)": [[1044, "compas_timber.fabrication.Slot.scaled"]], "sha256() (compas_timber.fabrication.slot method)": [[1045, "compas_timber.fabrication.Slot.sha256"]], "to_json() (compas_timber.fabrication.slot method)": [[1046, "compas_timber.fabrication.Slot.to_json"]], "to_jsonstring() (compas_timber.fabrication.slot method)": [[1047, "compas_timber.fabrication.Slot.to_jsonstring"]], "validate_data() (compas_timber.fabrication.slot class method)": [[1048, "compas_timber.fabrication.Slot.validate_data"]], "stepjoint (class in compas_timber.fabrication)": [[1049, "compas_timber.fabrication.StepJoint"]], "tostring() (compas_timber.fabrication.stepjoint method)": [[1050, "compas_timber.fabrication.StepJoint.ToString"]], "add_subprocessing() (compas_timber.fabrication.stepjoint method)": [[1051, "compas_timber.fabrication.StepJoint.add_subprocessing"]], "add_tenon() (compas_timber.fabrication.stepjoint method)": [[1052, "compas_timber.fabrication.StepJoint.add_tenon"]], "apply() (compas_timber.fabrication.stepjoint method)": [[1053, "compas_timber.fabrication.StepJoint.apply"]], "copy() (compas_timber.fabrication.stepjoint method)": [[1054, "compas_timber.fabrication.StepJoint.copy"]], "from_json() (compas_timber.fabrication.stepjoint class method)": [[1055, "compas_timber.fabrication.StepJoint.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjoint class method)": [[1056, "compas_timber.fabrication.StepJoint.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjoint class method)": [[1057, "compas_timber.fabrication.StepJoint.from_plane_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[1058, "compas_timber.fabrication.StepJoint.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjoint method)": [[1059, "compas_timber.fabrication.StepJoint.scale"]], "scaled() (compas_timber.fabrication.stepjoint method)": [[1060, "compas_timber.fabrication.StepJoint.scaled"]], "sha256() (compas_timber.fabrication.stepjoint method)": [[1061, "compas_timber.fabrication.StepJoint.sha256"]], "tenon_volume_from_params_and_beam() (compas_timber.fabrication.stepjoint method)": [[1062, "compas_timber.fabrication.StepJoint.tenon_volume_from_params_and_beam"]], "to_json() (compas_timber.fabrication.stepjoint method)": [[1063, "compas_timber.fabrication.StepJoint.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjoint method)": [[1064, "compas_timber.fabrication.StepJoint.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjoint class method)": [[1065, "compas_timber.fabrication.StepJoint.validate_data"]], "stepjointnotch (class in compas_timber.fabrication)": [[1066, "compas_timber.fabrication.StepJointNotch"]], "tostring() (compas_timber.fabrication.stepjointnotch method)": [[1067, "compas_timber.fabrication.StepJointNotch.ToString"]], "add_mortise() (compas_timber.fabrication.stepjointnotch method)": [[1068, "compas_timber.fabrication.StepJointNotch.add_mortise"]], "add_subprocessing() (compas_timber.fabrication.stepjointnotch method)": [[1069, "compas_timber.fabrication.StepJointNotch.add_subprocessing"]], "apply() (compas_timber.fabrication.stepjointnotch method)": [[1070, "compas_timber.fabrication.StepJointNotch.apply"]], "copy() (compas_timber.fabrication.stepjointnotch method)": [[1071, "compas_timber.fabrication.StepJointNotch.copy"]], "from_json() (compas_timber.fabrication.stepjointnotch class method)": [[1072, "compas_timber.fabrication.StepJointNotch.from_json"]], "from_jsonstring() (compas_timber.fabrication.stepjointnotch class method)": [[1073, "compas_timber.fabrication.StepJointNotch.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.stepjointnotch class method)": [[1074, "compas_timber.fabrication.StepJointNotch.from_plane_and_beam"]], "mortise_volume_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[1075, "compas_timber.fabrication.StepJointNotch.mortise_volume_from_params_and_beam"]], "planes_from_params_and_beam() (compas_timber.fabrication.stepjointnotch method)": [[1076, "compas_timber.fabrication.StepJointNotch.planes_from_params_and_beam"]], "scale() (compas_timber.fabrication.stepjointnotch method)": [[1077, "compas_timber.fabrication.StepJointNotch.scale"]], "scaled() (compas_timber.fabrication.stepjointnotch method)": [[1078, "compas_timber.fabrication.StepJointNotch.scaled"]], "sha256() (compas_timber.fabrication.stepjointnotch method)": [[1079, "compas_timber.fabrication.StepJointNotch.sha256"]], "to_json() (compas_timber.fabrication.stepjointnotch method)": [[1080, "compas_timber.fabrication.StepJointNotch.to_json"]], "to_jsonstring() (compas_timber.fabrication.stepjointnotch method)": [[1081, "compas_timber.fabrication.StepJointNotch.to_jsonstring"]], "validate_data() (compas_timber.fabrication.stepjointnotch class method)": [[1082, "compas_timber.fabrication.StepJointNotch.validate_data"]], "stepshapetype (class in compas_timber.fabrication)": [[1083, "compas_timber.fabrication.StepShapeType"]], "tenon (class in compas_timber.fabrication)": [[1084, "compas_timber.fabrication.Tenon"]], "tostring() (compas_timber.fabrication.tenon method)": [[1085, "compas_timber.fabrication.Tenon.ToString"]], "add_subprocessing() (compas_timber.fabrication.tenon method)": [[1086, "compas_timber.fabrication.Tenon.add_subprocessing"]], "apply() (compas_timber.fabrication.tenon method)": [[1087, "compas_timber.fabrication.Tenon.apply"]], "copy() (compas_timber.fabrication.tenon method)": [[1088, "compas_timber.fabrication.Tenon.copy"]], "frame_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[1089, "compas_timber.fabrication.Tenon.frame_from_params_and_beam"]], "from_json() (compas_timber.fabrication.tenon class method)": [[1090, "compas_timber.fabrication.Tenon.from_json"]], "from_jsonstring() (compas_timber.fabrication.tenon class method)": [[1091, "compas_timber.fabrication.Tenon.from_jsonstring"]], "from_plane_and_beam() (compas_timber.fabrication.tenon class method)": [[1092, "compas_timber.fabrication.Tenon.from_plane_and_beam"]], "scale() (compas_timber.fabrication.tenon method)": [[1093, "compas_timber.fabrication.Tenon.scale"]], "scaled() (compas_timber.fabrication.tenon method)": [[1094, "compas_timber.fabrication.Tenon.scaled"]], "sha256() (compas_timber.fabrication.tenon method)": [[1095, "compas_timber.fabrication.Tenon.sha256"]], "to_json() (compas_timber.fabrication.tenon method)": [[1096, "compas_timber.fabrication.Tenon.to_json"]], "to_jsonstring() (compas_timber.fabrication.tenon method)": [[1097, "compas_timber.fabrication.Tenon.to_jsonstring"]], "validate_data() (compas_timber.fabrication.tenon class method)": [[1098, "compas_timber.fabrication.Tenon.validate_data"]], "volume_from_params_and_beam() (compas_timber.fabrication.tenon method)": [[1099, "compas_timber.fabrication.Tenon.volume_from_params_and_beam"]], "tenonshapetype (class in compas_timber.fabrication)": [[1100, "compas_timber.fabrication.TenonShapeType"]], "text (class in compas_timber.fabrication)": [[1101, "compas_timber.fabrication.Text"]], "tostring() (compas_timber.fabrication.text method)": [[1102, "compas_timber.fabrication.Text.ToString"]], "add_subprocessing() (compas_timber.fabrication.text method)": [[1103, "compas_timber.fabrication.Text.add_subprocessing"]], "apply() (compas_timber.fabrication.text method)": [[1104, "compas_timber.fabrication.Text.apply"]], "copy() (compas_timber.fabrication.text method)": [[1105, "compas_timber.fabrication.Text.copy"]], "create_text_curves_for_element() (compas_timber.fabrication.text method)": [[1106, "compas_timber.fabrication.Text.create_text_curves_for_element"]], "from_json() (compas_timber.fabrication.text class method)": [[1107, "compas_timber.fabrication.Text.from_json"]], "from_jsonstring() (compas_timber.fabrication.text class method)": [[1108, "compas_timber.fabrication.Text.from_jsonstring"]], "scale() (compas_timber.fabrication.text method)": [[1109, "compas_timber.fabrication.Text.scale"]], "scaled() (compas_timber.fabrication.text method)": [[1110, "compas_timber.fabrication.Text.scaled"]], "sha256() (compas_timber.fabrication.text method)": [[1111, "compas_timber.fabrication.Text.sha256"]], "to_json() (compas_timber.fabrication.text method)": [[1112, "compas_timber.fabrication.Text.to_json"]], "to_jsonstring() (compas_timber.fabrication.text method)": [[1113, "compas_timber.fabrication.Text.to_jsonstring"]], "validate_data() (compas_timber.fabrication.text class method)": [[1114, "compas_timber.fabrication.Text.validate_data"]], "add_gh_param() (in module compas_timber.ghpython)": [[1115, "compas_timber.ghpython.add_gh_param"]], "clear_gh_params() (in module compas_timber.ghpython)": [[1116, "compas_timber.ghpython.clear_gh_params"]], "get_leaf_subclasses() (in module compas_timber.ghpython)": [[1117, "compas_timber.ghpython.get_leaf_subclasses"]], "item_input_valid() (in module compas_timber.ghpython)": [[1118, "compas_timber.ghpython.item_input_valid"]], "list_input_valid() (in module compas_timber.ghpython)": [[1119, "compas_timber.ghpython.list_input_valid"]], "manage_dynamic_params() (in module compas_timber.ghpython)": [[1120, "compas_timber.ghpython.manage_dynamic_params"]], "rename_gh_input() (in module compas_timber.ghpython)": [[1121, "compas_timber.ghpython.rename_gh_input"]], "timbermodel (class in compas_timber.model)": [[1122, "compas_timber.model.TimberModel"]], "tostring() (compas_timber.model.timbermodel method)": [[1123, "compas_timber.model.TimberModel.ToString"]], "add_element() (compas_timber.model.timbermodel method)": [[1124, "compas_timber.model.TimberModel.add_element"]], "add_elements() (compas_timber.model.timbermodel method)": [[1125, "compas_timber.model.TimberModel.add_elements"]], "add_group() (compas_timber.model.timbermodel method)": [[1126, "compas_timber.model.TimberModel.add_group"]], "add_group_element() (compas_timber.model.timbermodel method)": [[1127, "compas_timber.model.TimberModel.add_group_element"]], "add_interaction() (compas_timber.model.timbermodel method)": [[1128, "compas_timber.model.TimberModel.add_interaction"]], "add_joint() (compas_timber.model.timbermodel method)": [[1129, "compas_timber.model.TimberModel.add_joint"]], "add_joint_candidate() (compas_timber.model.timbermodel method)": [[1130, "compas_timber.model.TimberModel.add_joint_candidate"]], "add_material() (compas_timber.model.timbermodel method)": [[1131, "compas_timber.model.TimberModel.add_material"]], "assign_material() (compas_timber.model.timbermodel method)": [[1132, "compas_timber.model.TimberModel.assign_material"]], "compute_aabb() (compas_timber.model.timbermodel method)": [[1133, "compas_timber.model.TimberModel.compute_aabb"]], "compute_obb() (compas_timber.model.timbermodel method)": [[1134, "compas_timber.model.TimberModel.compute_obb"]], "connect_adjacent_beams() (compas_timber.model.timbermodel method)": [[1135, "compas_timber.model.TimberModel.connect_adjacent_beams"]], "connect_adjacent_walls() (compas_timber.model.timbermodel method)": [[1136, "compas_timber.model.TimberModel.connect_adjacent_walls"]], "copy() (compas_timber.model.timbermodel method)": [[1137, "compas_timber.model.TimberModel.copy"]], "element_by_guid() (compas_timber.model.timbermodel method)": [[1138, "compas_timber.model.TimberModel.element_by_guid"]], "elements() (compas_timber.model.timbermodel method)": [[1139, "compas_timber.model.TimberModel.elements"]], "elements_connected_by() (compas_timber.model.timbermodel method)": [[1140, "compas_timber.model.TimberModel.elements_connected_by"]], "from_json() (compas_timber.model.timbermodel class method)": [[1141, "compas_timber.model.TimberModel.from_json"]], "from_jsonstring() (compas_timber.model.timbermodel class method)": [[1142, "compas_timber.model.TimberModel.from_jsonstring"]], "get_elements_in_group() (compas_timber.model.timbermodel method)": [[1143, "compas_timber.model.TimberModel.get_elements_in_group"]], "get_interactions_for_element() (compas_timber.model.timbermodel method)": [[1144, "compas_timber.model.TimberModel.get_interactions_for_element"]], "has_element() (compas_timber.model.timbermodel method)": [[1145, "compas_timber.model.TimberModel.has_element"]], "has_group() (compas_timber.model.timbermodel method)": [[1146, "compas_timber.model.TimberModel.has_group"]], "has_interaction() (compas_timber.model.timbermodel method)": [[1147, "compas_timber.model.TimberModel.has_interaction"]], "has_material() (compas_timber.model.timbermodel method)": [[1148, "compas_timber.model.TimberModel.has_material"]], "interactions() (compas_timber.model.timbermodel method)": [[1149, "compas_timber.model.TimberModel.interactions"]], "materials() (compas_timber.model.timbermodel method)": [[1150, "compas_timber.model.TimberModel.materials"]], "process_joinery() (compas_timber.model.timbermodel method)": [[1151, "compas_timber.model.TimberModel.process_joinery"]], "remove_element() (compas_timber.model.timbermodel method)": [[1152, "compas_timber.model.TimberModel.remove_element"]], "remove_interaction() (compas_timber.model.timbermodel method)": [[1153, "compas_timber.model.TimberModel.remove_interaction"]], "remove_joint() (compas_timber.model.timbermodel method)": [[1154, "compas_timber.model.TimberModel.remove_joint"]], "remove_joint_candidate() (compas_timber.model.timbermodel method)": [[1155, "compas_timber.model.TimberModel.remove_joint_candidate"]], "rotate() (compas_timber.model.timbermodel method)": [[1156, "compas_timber.model.TimberModel.rotate"]], "rotated() (compas_timber.model.timbermodel method)": [[1157, "compas_timber.model.TimberModel.rotated"]], "scale() (compas_timber.model.timbermodel method)": [[1158, "compas_timber.model.TimberModel.scale"]], "scaled() (compas_timber.model.timbermodel method)": [[1159, "compas_timber.model.TimberModel.scaled"]], "set_topologies() (compas_timber.model.timbermodel method)": [[1160, "compas_timber.model.TimberModel.set_topologies"]], "sha256() (compas_timber.model.timbermodel method)": [[1161, "compas_timber.model.TimberModel.sha256"]], "to_json() (compas_timber.model.timbermodel method)": [[1162, "compas_timber.model.TimberModel.to_json"]], "to_jsonstring() (compas_timber.model.timbermodel method)": [[1163, "compas_timber.model.TimberModel.to_jsonstring"]], "transform() (compas_timber.model.timbermodel method)": [[1164, "compas_timber.model.TimberModel.transform"]], "transform_numpy() (compas_timber.model.timbermodel method)": [[1165, "compas_timber.model.TimberModel.transform_numpy"]], "transformed() (compas_timber.model.timbermodel method)": [[1166, "compas_timber.model.TimberModel.transformed"]], "transformed_numpy() (compas_timber.model.timbermodel method)": [[1167, "compas_timber.model.TimberModel.transformed_numpy"]], "translate() (compas_timber.model.timbermodel method)": [[1168, "compas_timber.model.TimberModel.translate"]], "translated() (compas_timber.model.timbermodel method)": [[1169, "compas_timber.model.TimberModel.translated"]], "validate_data() (compas_timber.model.timbermodel class method)": [[1170, "compas_timber.model.TimberModel.validate_data"]], "actor (class in compas_timber.planning)": [[1171, "compas_timber.planning.Actor"]], "get_name() (compas_timber.planning.actor class method)": [[1172, "compas_timber.planning.Actor.get_name"]], "buildingplan (class in compas_timber.planning)": [[1173, "compas_timber.planning.BuildingPlan"]], "tostring() (compas_timber.planning.buildingplan method)": [[1174, "compas_timber.planning.BuildingPlan.ToString"]], "add_step() (compas_timber.planning.buildingplan method)": [[1175, "compas_timber.planning.BuildingPlan.add_step"]], "copy() (compas_timber.planning.buildingplan method)": [[1176, "compas_timber.planning.BuildingPlan.copy"]], "from_json() (compas_timber.planning.buildingplan class method)": [[1177, "compas_timber.planning.BuildingPlan.from_json"]], "from_jsonstring() (compas_timber.planning.buildingplan class method)": [[1178, "compas_timber.planning.BuildingPlan.from_jsonstring"]], "sha256() (compas_timber.planning.buildingplan method)": [[1179, "compas_timber.planning.BuildingPlan.sha256"]], "to_json() (compas_timber.planning.buildingplan method)": [[1180, "compas_timber.planning.BuildingPlan.to_json"]], "to_jsonstring() (compas_timber.planning.buildingplan method)": [[1181, "compas_timber.planning.BuildingPlan.to_jsonstring"]], "validate_data() (compas_timber.planning.buildingplan class method)": [[1182, "compas_timber.planning.BuildingPlan.validate_data"]], "buildingplanparser (class in compas_timber.planning)": [[1183, "compas_timber.planning.BuildingPlanParser"]], "parse() (compas_timber.planning.buildingplanparser class method)": [[1184, "compas_timber.planning.BuildingPlanParser.parse"]], "serialize() (compas_timber.planning.buildingplanparser class method)": [[1185, "compas_timber.planning.BuildingPlanParser.serialize"]], "instruction (class in compas_timber.planning)": [[1186, "compas_timber.planning.Instruction"]], "tostring() (compas_timber.planning.instruction method)": [[1187, "compas_timber.planning.Instruction.ToString"]], "copy() (compas_timber.planning.instruction method)": [[1188, "compas_timber.planning.Instruction.copy"]], "from_json() (compas_timber.planning.instruction class method)": [[1189, "compas_timber.planning.Instruction.from_json"]], "from_jsonstring() (compas_timber.planning.instruction class method)": [[1190, "compas_timber.planning.Instruction.from_jsonstring"]], "sha256() (compas_timber.planning.instruction method)": [[1191, "compas_timber.planning.Instruction.sha256"]], "to_json() (compas_timber.planning.instruction method)": [[1192, "compas_timber.planning.Instruction.to_json"]], "to_jsonstring() (compas_timber.planning.instruction method)": [[1193, "compas_timber.planning.Instruction.to_jsonstring"]], "transform() (compas_timber.planning.instruction method)": [[1194, "compas_timber.planning.Instruction.transform"]], "validate_data() (compas_timber.planning.instruction class method)": [[1195, "compas_timber.planning.Instruction.validate_data"]], "lineardimension (class in compas_timber.planning)": [[1196, "compas_timber.planning.LinearDimension"]], "tostring() (compas_timber.planning.lineardimension method)": [[1197, "compas_timber.planning.LinearDimension.ToString"]], "copy() (compas_timber.planning.lineardimension method)": [[1198, "compas_timber.planning.LinearDimension.copy"]], "from_json() (compas_timber.planning.lineardimension class method)": [[1199, "compas_timber.planning.LinearDimension.from_json"]], "from_jsonstring() (compas_timber.planning.lineardimension class method)": [[1200, "compas_timber.planning.LinearDimension.from_jsonstring"]], "sha256() (compas_timber.planning.lineardimension method)": [[1201, "compas_timber.planning.LinearDimension.sha256"]], "to_json() (compas_timber.planning.lineardimension method)": [[1202, "compas_timber.planning.LinearDimension.to_json"]], "to_jsonstring() (compas_timber.planning.lineardimension method)": [[1203, "compas_timber.planning.LinearDimension.to_jsonstring"]], "transform() (compas_timber.planning.lineardimension method)": [[1204, "compas_timber.planning.LinearDimension.transform"]], "validate_data() (compas_timber.planning.lineardimension class method)": [[1205, "compas_timber.planning.LinearDimension.validate_data"]], "model3d (class in compas_timber.planning)": [[1206, "compas_timber.planning.Model3d"]], "tostring() (compas_timber.planning.model3d method)": [[1207, "compas_timber.planning.Model3d.ToString"]], "copy() (compas_timber.planning.model3d method)": [[1208, "compas_timber.planning.Model3d.copy"]], "from_json() (compas_timber.planning.model3d class method)": [[1209, "compas_timber.planning.Model3d.from_json"]], "from_jsonstring() (compas_timber.planning.model3d class method)": [[1210, "compas_timber.planning.Model3d.from_jsonstring"]], "sha256() (compas_timber.planning.model3d method)": [[1211, "compas_timber.planning.Model3d.sha256"]], "to_json() (compas_timber.planning.model3d method)": [[1212, "compas_timber.planning.Model3d.to_json"]], "to_jsonstring() (compas_timber.planning.model3d method)": [[1213, "compas_timber.planning.Model3d.to_jsonstring"]], "transform() (compas_timber.planning.model3d method)": [[1214, "compas_timber.planning.Model3d.transform"]], "validate_data() (compas_timber.planning.model3d class method)": [[1215, "compas_timber.planning.Model3d.validate_data"]], "simplesequencegenerator (class in compas_timber.planning)": [[1216, "compas_timber.planning.SimpleSequenceGenerator"]], "step (class in compas_timber.planning)": [[1217, "compas_timber.planning.Step"]], "tostring() (compas_timber.planning.step method)": [[1218, "compas_timber.planning.Step.ToString"]], "copy() (compas_timber.planning.step method)": [[1219, "compas_timber.planning.Step.copy"]], "from_json() (compas_timber.planning.step class method)": [[1220, "compas_timber.planning.Step.from_json"]], "from_jsonstring() (compas_timber.planning.step class method)": [[1221, "compas_timber.planning.Step.from_jsonstring"]], "sha256() (compas_timber.planning.step method)": [[1222, "compas_timber.planning.Step.sha256"]], "to_json() (compas_timber.planning.step method)": [[1223, "compas_timber.planning.Step.to_json"]], "to_jsonstring() (compas_timber.planning.step method)": [[1224, "compas_timber.planning.Step.to_jsonstring"]], "transform() (compas_timber.planning.step method)": [[1225, "compas_timber.planning.Step.transform"]], "validate_data() (compas_timber.planning.step class method)": [[1226, "compas_timber.planning.Step.validate_data"]], "text3d (class in compas_timber.planning)": [[1227, "compas_timber.planning.Text3d"]], "tostring() (compas_timber.planning.text3d method)": [[1228, "compas_timber.planning.Text3d.ToString"]], "copy() (compas_timber.planning.text3d method)": [[1229, "compas_timber.planning.Text3d.copy"]], "from_json() (compas_timber.planning.text3d class method)": [[1230, "compas_timber.planning.Text3d.from_json"]], "from_jsonstring() (compas_timber.planning.text3d class method)": [[1231, "compas_timber.planning.Text3d.from_jsonstring"]], "sha256() (compas_timber.planning.text3d method)": [[1232, "compas_timber.planning.Text3d.sha256"]], "to_json() (compas_timber.planning.text3d method)": [[1233, "compas_timber.planning.Text3d.to_json"]], "to_jsonstring() (compas_timber.planning.text3d method)": [[1234, "compas_timber.planning.Text3d.to_jsonstring"]], "transform() (compas_timber.planning.text3d method)": [[1235, "compas_timber.planning.Text3d.transform"]], "validate_data() (compas_timber.planning.text3d class method)": [[1236, "compas_timber.planning.Text3d.validate_data"]], "find_neighboring_elements() (in module compas_timber.rhino)": [[1237, "compas_timber.rhino.find_neighboring_elements"]]}})